
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024b10  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003db0  08024ca8  08024ca8  00034ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028a58  08028a58  000400fc  2**0
                  CONTENTS
  4 .ARM          00000008  08028a58  08028a58  00038a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028a60  08028a60  000400fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028a60  08028a60  00038a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028a64  08028a64  00038a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08028a68  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  20000100  08028b64  00040100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000228c  08028b64  0004228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042646  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000986d  00000000  00000000  00082772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  0008bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022c0  00000000  00000000  0008e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020522  00000000  00000000  00090870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034706  00000000  00000000  000b0d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9858  00000000  00000000  000e5498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ecf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a87c  00000000  00000000  0018ed40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08024c90 	.word	0x08024c90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08024c90 	.word	0x08024c90

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	3a01      	subs	r2, #1
 8000c92:	bf28      	it	cs
 8000c94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c98:	d2ed      	bcs.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ldivmod>:
 8000df4:	b97b      	cbnz	r3, 8000e16 <__aeabi_ldivmod+0x22>
 8000df6:	b972      	cbnz	r2, 8000e16 <__aeabi_ldivmod+0x22>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bfbe      	ittt	lt
 8000dfc:	2000      	movlt	r0, #0
 8000dfe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e02:	e006      	blt.n	8000e12 <__aeabi_ldivmod+0x1e>
 8000e04:	bf08      	it	eq
 8000e06:	2800      	cmpeq	r0, #0
 8000e08:	bf1c      	itt	ne
 8000e0a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e0e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e12:	f000 b9bf 	b.w	8001194 <__aeabi_idiv0>
 8000e16:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e1a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	db09      	blt.n	8000e36 <__aeabi_ldivmod+0x42>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db1a      	blt.n	8000e5c <__aeabi_ldivmod+0x68>
 8000e26:	f000 f84d 	bl	8000ec4 <__udivmoddi4>
 8000e2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e32:	b004      	add	sp, #16
 8000e34:	4770      	bx	lr
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db1b      	blt.n	8000e78 <__aeabi_ldivmod+0x84>
 8000e40:	f000 f840 	bl	8000ec4 <__udivmoddi4>
 8000e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4c:	b004      	add	sp, #16
 8000e4e:	4240      	negs	r0, r0
 8000e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	4770      	bx	lr
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e62:	f000 f82f 	bl	8000ec4 <__udivmoddi4>
 8000e66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6e:	b004      	add	sp, #16
 8000e70:	4240      	negs	r0, r0
 8000e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e76:	4770      	bx	lr
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	f000 f821 	bl	8000ec4 <__udivmoddi4>
 8000e82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e8a:	b004      	add	sp, #16
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea8:	f000 b974 	b.w	8001194 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f806 	bl	8000ec4 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__udivmoddi4>:
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	9d08      	ldr	r5, [sp, #32]
 8000eca:	4604      	mov	r4, r0
 8000ecc:	468e      	mov	lr, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d14d      	bne.n	8000f6e <__udivmoddi4+0xaa>
 8000ed2:	428a      	cmp	r2, r1
 8000ed4:	4694      	mov	ip, r2
 8000ed6:	d969      	bls.n	8000fac <__udivmoddi4+0xe8>
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	b152      	cbz	r2, 8000ef4 <__udivmoddi4+0x30>
 8000ede:	fa01 f302 	lsl.w	r3, r1, r2
 8000ee2:	f1c2 0120 	rsb	r1, r2, #32
 8000ee6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eee:	ea41 0e03 	orr.w	lr, r1, r3
 8000ef2:	4094      	lsls	r4, r2
 8000ef4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef8:	0c21      	lsrs	r1, r4, #16
 8000efa:	fbbe f6f8 	udiv	r6, lr, r8
 8000efe:	fa1f f78c 	uxth.w	r7, ip
 8000f02:	fb08 e316 	mls	r3, r8, r6, lr
 8000f06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f0a:	fb06 f107 	mul.w	r1, r6, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x64>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f1a:	f080 811f 	bcs.w	800115c <__udivmoddi4+0x298>
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	f240 811c 	bls.w	800115c <__udivmoddi4+0x298>
 8000f24:	3e02      	subs	r6, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1a5b      	subs	r3, r3, r1
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f38:	fb00 f707 	mul.w	r7, r0, r7
 8000f3c:	42a7      	cmp	r7, r4
 8000f3e:	d90a      	bls.n	8000f56 <__udivmoddi4+0x92>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	f080 810a 	bcs.w	8001160 <__udivmoddi4+0x29c>
 8000f4c:	42a7      	cmp	r7, r4
 8000f4e:	f240 8107 	bls.w	8001160 <__udivmoddi4+0x29c>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f5a:	1be4      	subs	r4, r4, r7
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	b11d      	cbz	r5, 8000f68 <__udivmoddi4+0xa4>
 8000f60:	40d4      	lsrs	r4, r2
 8000f62:	2300      	movs	r3, #0
 8000f64:	e9c5 4300 	strd	r4, r3, [r5]
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d909      	bls.n	8000f86 <__udivmoddi4+0xc2>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	f000 80ef 	beq.w	8001156 <__udivmoddi4+0x292>
 8000f78:	2600      	movs	r6, #0
 8000f7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f7e:	4630      	mov	r0, r6
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	fab3 f683 	clz	r6, r3
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d14a      	bne.n	8001024 <__udivmoddi4+0x160>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d302      	bcc.n	8000f98 <__udivmoddi4+0xd4>
 8000f92:	4282      	cmp	r2, r0
 8000f94:	f200 80f9 	bhi.w	800118a <__udivmoddi4+0x2c6>
 8000f98:	1a84      	subs	r4, r0, r2
 8000f9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d0e0      	beq.n	8000f68 <__udivmoddi4+0xa4>
 8000fa6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000faa:	e7dd      	b.n	8000f68 <__udivmoddi4+0xa4>
 8000fac:	b902      	cbnz	r2, 8000fb0 <__udivmoddi4+0xec>
 8000fae:	deff      	udf	#255	; 0xff
 8000fb0:	fab2 f282 	clz	r2, r2
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	f040 8092 	bne.w	80010de <__udivmoddi4+0x21a>
 8000fba:	eba1 010c 	sub.w	r1, r1, ip
 8000fbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc2:	fa1f fe8c 	uxth.w	lr, ip
 8000fc6:	2601      	movs	r6, #1
 8000fc8:	0c20      	lsrs	r0, r4, #16
 8000fca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fce:	fb07 1113 	mls	r1, r7, r3, r1
 8000fd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fd6:	fb0e f003 	mul.w	r0, lr, r3
 8000fda:	4288      	cmp	r0, r1
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x12c>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x12a>
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	f200 80cb 	bhi.w	8001184 <__udivmoddi4+0x2c0>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1a09      	subs	r1, r1, r0
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ffc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001000:	fb0e fe00 	mul.w	lr, lr, r0
 8001004:	45a6      	cmp	lr, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x156>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001010:	d202      	bcs.n	8001018 <__udivmoddi4+0x154>
 8001012:	45a6      	cmp	lr, r4
 8001014:	f200 80bb 	bhi.w	800118e <__udivmoddi4+0x2ca>
 8001018:	4608      	mov	r0, r1
 800101a:	eba4 040e 	sub.w	r4, r4, lr
 800101e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001022:	e79c      	b.n	8000f5e <__udivmoddi4+0x9a>
 8001024:	f1c6 0720 	rsb	r7, r6, #32
 8001028:	40b3      	lsls	r3, r6
 800102a:	fa22 fc07 	lsr.w	ip, r2, r7
 800102e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001032:	fa20 f407 	lsr.w	r4, r0, r7
 8001036:	fa01 f306 	lsl.w	r3, r1, r6
 800103a:	431c      	orrs	r4, r3
 800103c:	40f9      	lsrs	r1, r7
 800103e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001042:	fa00 f306 	lsl.w	r3, r0, r6
 8001046:	fbb1 f8f9 	udiv	r8, r1, r9
 800104a:	0c20      	lsrs	r0, r4, #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fb09 1118 	mls	r1, r9, r8, r1
 8001054:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001058:	fb08 f00e 	mul.w	r0, r8, lr
 800105c:	4288      	cmp	r0, r1
 800105e:	fa02 f206 	lsl.w	r2, r2, r6
 8001062:	d90b      	bls.n	800107c <__udivmoddi4+0x1b8>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f108 3aff 	add.w	sl, r8, #4294967295
 800106c:	f080 8088 	bcs.w	8001180 <__udivmoddi4+0x2bc>
 8001070:	4288      	cmp	r0, r1
 8001072:	f240 8085 	bls.w	8001180 <__udivmoddi4+0x2bc>
 8001076:	f1a8 0802 	sub.w	r8, r8, #2
 800107a:	4461      	add	r1, ip
 800107c:	1a09      	subs	r1, r1, r0
 800107e:	b2a4      	uxth	r4, r4
 8001080:	fbb1 f0f9 	udiv	r0, r1, r9
 8001084:	fb09 1110 	mls	r1, r9, r0, r1
 8001088:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800108c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001090:	458e      	cmp	lr, r1
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x1e2>
 8001094:	eb1c 0101 	adds.w	r1, ip, r1
 8001098:	f100 34ff 	add.w	r4, r0, #4294967295
 800109c:	d26c      	bcs.n	8001178 <__udivmoddi4+0x2b4>
 800109e:	458e      	cmp	lr, r1
 80010a0:	d96a      	bls.n	8001178 <__udivmoddi4+0x2b4>
 80010a2:	3802      	subs	r0, #2
 80010a4:	4461      	add	r1, ip
 80010a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010aa:	fba0 9402 	umull	r9, r4, r0, r2
 80010ae:	eba1 010e 	sub.w	r1, r1, lr
 80010b2:	42a1      	cmp	r1, r4
 80010b4:	46c8      	mov	r8, r9
 80010b6:	46a6      	mov	lr, r4
 80010b8:	d356      	bcc.n	8001168 <__udivmoddi4+0x2a4>
 80010ba:	d053      	beq.n	8001164 <__udivmoddi4+0x2a0>
 80010bc:	b15d      	cbz	r5, 80010d6 <__udivmoddi4+0x212>
 80010be:	ebb3 0208 	subs.w	r2, r3, r8
 80010c2:	eb61 010e 	sbc.w	r1, r1, lr
 80010c6:	fa01 f707 	lsl.w	r7, r1, r7
 80010ca:	fa22 f306 	lsr.w	r3, r2, r6
 80010ce:	40f1      	lsrs	r1, r6
 80010d0:	431f      	orrs	r7, r3
 80010d2:	e9c5 7100 	strd	r7, r1, [r5]
 80010d6:	2600      	movs	r6, #0
 80010d8:	4631      	mov	r1, r6
 80010da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010de:	f1c2 0320 	rsb	r3, r2, #32
 80010e2:	40d8      	lsrs	r0, r3
 80010e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e8:	fa21 f303 	lsr.w	r3, r1, r3
 80010ec:	4091      	lsls	r1, r2
 80010ee:	4301      	orrs	r1, r0
 80010f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f4:	fa1f fe8c 	uxth.w	lr, ip
 80010f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80010fc:	fb07 3610 	mls	r6, r7, r0, r3
 8001100:	0c0b      	lsrs	r3, r1, #16
 8001102:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001106:	fb00 f60e 	mul.w	r6, r0, lr
 800110a:	429e      	cmp	r6, r3
 800110c:	fa04 f402 	lsl.w	r4, r4, r2
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x260>
 8001112:	eb1c 0303 	adds.w	r3, ip, r3
 8001116:	f100 38ff 	add.w	r8, r0, #4294967295
 800111a:	d22f      	bcs.n	800117c <__udivmoddi4+0x2b8>
 800111c:	429e      	cmp	r6, r3
 800111e:	d92d      	bls.n	800117c <__udivmoddi4+0x2b8>
 8001120:	3802      	subs	r0, #2
 8001122:	4463      	add	r3, ip
 8001124:	1b9b      	subs	r3, r3, r6
 8001126:	b289      	uxth	r1, r1
 8001128:	fbb3 f6f7 	udiv	r6, r3, r7
 800112c:	fb07 3316 	mls	r3, r7, r6, r3
 8001130:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001134:	fb06 f30e 	mul.w	r3, r6, lr
 8001138:	428b      	cmp	r3, r1
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x28a>
 800113c:	eb1c 0101 	adds.w	r1, ip, r1
 8001140:	f106 38ff 	add.w	r8, r6, #4294967295
 8001144:	d216      	bcs.n	8001174 <__udivmoddi4+0x2b0>
 8001146:	428b      	cmp	r3, r1
 8001148:	d914      	bls.n	8001174 <__udivmoddi4+0x2b0>
 800114a:	3e02      	subs	r6, #2
 800114c:	4461      	add	r1, ip
 800114e:	1ac9      	subs	r1, r1, r3
 8001150:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001154:	e738      	b.n	8000fc8 <__udivmoddi4+0x104>
 8001156:	462e      	mov	r6, r5
 8001158:	4628      	mov	r0, r5
 800115a:	e705      	b.n	8000f68 <__udivmoddi4+0xa4>
 800115c:	4606      	mov	r6, r0
 800115e:	e6e3      	b.n	8000f28 <__udivmoddi4+0x64>
 8001160:	4618      	mov	r0, r3
 8001162:	e6f8      	b.n	8000f56 <__udivmoddi4+0x92>
 8001164:	454b      	cmp	r3, r9
 8001166:	d2a9      	bcs.n	80010bc <__udivmoddi4+0x1f8>
 8001168:	ebb9 0802 	subs.w	r8, r9, r2
 800116c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001170:	3801      	subs	r0, #1
 8001172:	e7a3      	b.n	80010bc <__udivmoddi4+0x1f8>
 8001174:	4646      	mov	r6, r8
 8001176:	e7ea      	b.n	800114e <__udivmoddi4+0x28a>
 8001178:	4620      	mov	r0, r4
 800117a:	e794      	b.n	80010a6 <__udivmoddi4+0x1e2>
 800117c:	4640      	mov	r0, r8
 800117e:	e7d1      	b.n	8001124 <__udivmoddi4+0x260>
 8001180:	46d0      	mov	r8, sl
 8001182:	e77b      	b.n	800107c <__udivmoddi4+0x1b8>
 8001184:	3b02      	subs	r3, #2
 8001186:	4461      	add	r1, ip
 8001188:	e732      	b.n	8000ff0 <__udivmoddi4+0x12c>
 800118a:	4630      	mov	r0, r6
 800118c:	e709      	b.n	8000fa2 <__udivmoddi4+0xde>
 800118e:	4464      	add	r4, ip
 8001190:	3802      	subs	r0, #2
 8001192:	e742      	b.n	800101a <__udivmoddi4+0x156>

08001194 <__aeabi_idiv0>:
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 80011a0:	2204      	movs	r2, #4
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <adcInit+0x1c>)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <adcInit+0x20>)
 80011a6:	f019 fcfb 	bl	801aba0 <HAL_ADC_Start_DMA>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000011c 	.word	0x2000011c
 80011b8:	200007e4 	.word	0x200007e4

080011bc <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <actGetAdcChannel+0x20>)
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	b29b      	uxth	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	2000011c 	.word	0x2000011c

080011e0 <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <actGetBatteryVoltage+0x30>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001214 <actGetBatteryVoltage+0x34>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001218 <actGetBatteryVoltage+0x38>
 80011fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001200:	eef0 7a66 	vmov.f32	s15, s13
}
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	2000011c 	.word	0x2000011c
 8001214:	40533333 	.word	0x40533333
 8001218:	457ff000 	.word	0x457ff000

0800121c <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <actGetBatteryCurrent+0x28>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	fb03 f202 	mul.w	r2, r3, r2
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <actGetBatteryCurrent+0x2c>)
 800122e:	fba3 1302 	umull	r1, r3, r3, r2
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	0852      	lsrs	r2, r2, #1
 8001236:	4413      	add	r3, r2
 8001238:	0adb      	lsrs	r3, r3, #11
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	2000011c 	.word	0x2000011c
 8001248:	00100101 	.word	0x00100101

0800124c <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
#endif

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    acc_1G = 512 * 8;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <gy86Detect+0xf8>)
 8001258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125c:	801a      	strh	r2, [r3, #0]

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a39      	ldr	r2, [pc, #228]	; (8001348 <gy86Detect+0xfc>)
 8001262:	615a      	str	r2, [r3, #20]

    memset(&config, 0, sizeof(PifGy86Config));
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2214      	movs	r2, #20
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f020 fe45 	bl	8021efc <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001272:	2301      	movs	r3, #1
 8001274:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001276:	2303      	movs	r3, #3
 8001278:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	8a1b      	ldrh	r3, [r3, #16]
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d102      	bne.n	8001288 <gy86Detect+0x3c>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e024      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 188)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8a1b      	ldrh	r3, [r3, #16]
 800128c:	2bbb      	cmp	r3, #187	; 0xbb
 800128e:	d902      	bls.n	8001296 <gy86Detect+0x4a>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e01d      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 98)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	8a1b      	ldrh	r3, [r3, #16]
 800129a:	2b61      	cmp	r3, #97	; 0x61
 800129c:	d902      	bls.n	80012a4 <gy86Detect+0x58>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 800129e:	2302      	movs	r3, #2
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e016      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 42)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	2b29      	cmp	r3, #41	; 0x29
 80012aa:	d902      	bls.n	80012b2 <gy86Detect+0x66>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012ac:	2303      	movs	r3, #3
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e00f      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	2b13      	cmp	r3, #19
 80012b8:	d902      	bls.n	80012c0 <gy86Detect+0x74>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012ba:	2304      	movs	r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e008      	b.n	80012d2 <gy86Detect+0x86>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	8a1b      	ldrh	r3, [r3, #16]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d902      	bls.n	80012ce <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c8:	2305      	movs	r3, #5
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e001      	b.n	80012d2 <gy86Detect+0x86>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ce:	2306      	movs	r3, #6
 80012d0:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012d2:	2303      	movs	r3, #3
 80012d4:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d6:	2302      	movs	r3, #2
 80012d8:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012da:	230d      	movs	r3, #13
 80012dc:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012de:	2301      	movs	r3, #1
 80012e0:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012e2:	2303      	movs	r3, #3
 80012e4:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e6:	2306      	movs	r3, #6
 80012e8:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012ea:	2300      	movs	r3, #0
 80012ec:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ee:	2308      	movs	r3, #8
 80012f0:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012f2:	2319      	movs	r3, #25
 80012f4:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = evtBaroRead;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <gy86Detect+0x100>)
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(&p_sensor_set->acc, &p_sensor_set->gyro, &p_sensor_set->mag, &config)) return false;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f103 0018 	add.w	r0, r3, #24
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	f000 f822 	bl	8001354 <mpu6050Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <gy86Detect+0xce>
 8001316:	2300      	movs	r3, #0
 8001318:	e010      	b.n	800133c <gy86Detect+0xf0>

    p_sensor_set->gyro.hardware = hw_Names[0];
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <gy86Detect+0x104>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    p_sensor_set->acc.hardware = hw_Names[0];
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <gy86Detect+0x104>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
    p_sensor_set->mag.hardware = hw_Names[1];
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <gy86Detect+0x104>)
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	649a      	str	r2, [r3, #72]	; 0x48
    p_sensor_set->baro.hardware = hw_Names[2];
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <gy86Detect+0x104>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	631a      	str	r2, [r3, #48]	; 0x30

    return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000005a 	.word	0x2000005a
 8001348:	31924418 	.word	0x31924418
 800134c:	0800e9f5 	.word	0x0800e9f5
 8001350:	20000000 	.word	0x20000000

08001354 <mpu6050Init>:

static BOOL mpu6050Init(sensor_t *acc, sensor_t *gyro, sensor_t *mag, PifGy86Config* p_config)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &imu_sensor, p_config)) return FALSE;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <mpu6050Init+0x64>)
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <mpu6050Init+0x68>)
 800136a:	2100      	movs	r1, #0
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <mpu6050Init+0x6c>)
 800136e:	f016 fb19 	bl	80179a4 <pifGy86_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <mpu6050Init+0x28>
 8001378:	2300      	movs	r3, #0
 800137a:	e018      	b.n	80013ae <mpu6050Init+0x5a>
    s_gy86._mpu6050.gyro_scale = 4;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <mpu6050Init+0x6c>)
 800137e:	2204      	movs	r2, #4
 8001380:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <mpu6050Init+0x6c>)
 8001384:	2264      	movs	r2, #100	; 0x64
 8001386:	719a      	strb	r2, [r3, #6]

    acc->init = mpuAccInit;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <mpu6050Init+0x70>)
 800138c:	605a      	str	r2, [r3, #4]
    acc->read = mpuAccRead;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x74>)
 8001392:	609a      	str	r2, [r3, #8]
    gyro->init = mpuGyroInit;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <mpu6050Init+0x78>)
 8001398:	605a      	str	r2, [r3, #4]
    gyro->read = mpuGyroRead;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <mpu6050Init+0x7c>)
 800139e:	609a      	str	r2, [r3, #8]
    mag->init = hmc5883lInit;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <mpu6050Init+0x80>)
 80013a4:	605a      	str	r2, [r3, #4]
    mag->read = hmc5883lRead;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <mpu6050Init+0x84>)
 80013aa:	609a      	str	r2, [r3, #8]
    return TRUE;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20001d18 	.word	0x20001d18
 80013bc:	20001b2c 	.word	0x20001b2c
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	08001401 	.word	0x08001401
 80013cc:	08001449 	.word	0x08001449
 80013d0:	0800146d 	.word	0x0800146d
 80013d4:	080014b5 	.word	0x080014b5
 80013d8:	08001805 	.word	0x08001805

080013dc <mpuAccInit>:

static BOOL mpuAccInit(PifImuSensorAlign align)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetAccelAlign(&imu_sensor, align);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <mpuAccInit+0x20>)
 80013ec:	f017 fb6f 	bl	8018ace <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20001d18 	.word	0x20001d18

08001400 <mpuAccRead>:

static BOOL mpuAccRead(int16_t *accData)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel(&imu_sensor, data)) return FALSE;
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <mpuAccRead+0x44>)
 8001410:	f017 fb70 	bl	8018af4 <pifImuSensor_ReadAccel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <mpuAccRead+0x1e>
 800141a:	2300      	movs	r3, #0
 800141c:	e00e      	b.n	800143c <mpuAccRead+0x3c>
    accData[0] = data[0];
 800141e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3302      	adds	r3, #2
 800142a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800142e:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001438:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20001d18 	.word	0x20001d18

08001448 <mpuGyroInit>:

static BOOL mpuGyroInit(PifImuSensorAlign align)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
    pifImuSensor_SetGyroAlign(&imu_sensor, align);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <mpuGyroInit+0x20>)
 8001458:	f017 fb00 	bl	8018a5c <pifImuSensor_SetGyroAlign>
    return TRUE;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001d18 	.word	0x20001d18

0800146c <mpuGyroRead>:

static BOOL mpuGyroRead(int16_t *gyroData)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro(&imu_sensor, data)) return FALSE;
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <mpuGyroRead+0x44>)
 800147c:	f017 fb00 	bl	8018a80 <pifImuSensor_ReadGyro>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <mpuGyroRead+0x1e>
 8001486:	2300      	movs	r3, #0
 8001488:	e00e      	b.n	80014a8 <mpuGyroRead+0x3c>
	gyroData[0] = data[0];
 800148a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3302      	adds	r3, #2
 8001496:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800149a:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014a4:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20001d18 	.word	0x20001d18

080014b4 <hmc5883lInit>:

static BOOL hmc5883lInit(PifImuSensorAlign align)
{
 80014b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014b8:	b08e      	sub	sp, #56	; 0x38
 80014ba:	af04      	add	r7, sp, #16
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&imu_sensor, align);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4619      	mov	r1, r3
 80014d6:	48a6      	ldr	r0, [pc, #664]	; (8001770 <hmc5883lInit+0x2bc>)
 80014d8:	f017 fb34 	bl	8018b44 <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014dc:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <hmc5883lInit+0x2c0>)
 80014de:	68d8      	ldr	r0, [r3, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	f240 5201 	movw	r2, #1281	; 0x501
 80014e6:	216a      	movs	r1, #106	; 0x6a
 80014e8:	f011 f9c0 	bl	801286c <pifI2cDevice_WriteRegBit8>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <hmc5883lInit+0x42>
 80014f2:	2300      	movs	r3, #0
 80014f4:	e17d      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014f6:	4b9f      	ldr	r3, [pc, #636]	; (8001774 <hmc5883lInit+0x2c0>)
 80014f8:	68d8      	ldr	r0, [r3, #12]
 80014fa:	2301      	movs	r3, #1
 80014fc:	f240 1201 	movw	r2, #257	; 0x101
 8001500:	2137      	movs	r1, #55	; 0x37
 8001502:	f011 f9b3 	bl	801286c <pifI2cDevice_WriteRegBit8>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <hmc5883lInit+0x5c>
 800150c:	2300      	movs	r3, #0
 800150e:	e170      	b.n	80017f2 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 8001514:	7b3b      	ldrb	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f362 0301 	bfi	r3, r2, #0, #2
 800151c:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	2204      	movs	r2, #4
 8001522:	f362 0384 	bfi	r3, r2, #2, #3
 8001526:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <hmc5883lInit+0x2c0>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	7b3a      	ldrb	r2, [r7, #12]
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f011 f985 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <hmc5883lInit+0x8c>
 800153c:	2300      	movs	r3, #0
 800153e:	e158      	b.n	80017f2 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001540:	2103      	movs	r1, #3
 8001542:	488d      	ldr	r0, [pc, #564]	; (8001778 <hmc5883lInit+0x2c4>)
 8001544:	f016 ff34 	bl	80183b0 <pifHmc5883_SetGain>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <hmc5883lInit+0x9e>
 800154e:	2300      	movs	r3, #0
 8001550:	e14f      	b.n	80017f2 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f013 fb88 	bl	8014c68 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4886      	ldr	r0, [pc, #536]	; (8001778 <hmc5883lInit+0x2c4>)
 8001560:	f016 ff45 	bl	80183ee <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	e03d      	b.n	80015e6 <hmc5883lInit+0x132>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800156a:	4b82      	ldr	r3, [pc, #520]	; (8001774 <hmc5883lInit+0x2c0>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2201      	movs	r2, #1
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f011 f964 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <hmc5883lInit+0xce>
 800157e:	2300      	movs	r3, #0
 8001580:	e137      	b.n	80017f2 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f013 fb70 	bl	8014c68 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	487a      	ldr	r0, [pc, #488]	; (8001778 <hmc5883lInit+0x2c4>)
 8001590:	f016 ff2d 	bl	80183ee <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80015a4:	4413      	add	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	4413      	add	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015ba:	4293      	cmp	r3, r2
 80015bc:	bfa8      	it	ge
 80015be:	4613      	movge	r3, r2
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	bfa8      	it	ge
 80015ca:	4613      	movge	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015d2:	dc03      	bgt.n	80015dc <hmc5883lInit+0x128>
            bret = false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015da:	e007      	b.n	80015ec <hmc5883lInit+0x138>
        }
        actLed1Toggle();
 80015dc:	f000 fd60 	bl	80020a0 <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3301      	adds	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	ddbe      	ble.n	800156a <hmc5883lInit+0xb6>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015ec:	7b3b      	ldrb	r3, [r7, #12]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f362 0301 	bfi	r3, r2, #0, #2
 80015f4:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <hmc5883lInit+0x2c0>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	7b3a      	ldrb	r2, [r7, #12]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f011 f91e 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <hmc5883lInit+0x15a>
 800160a:	2300      	movs	r3, #0
 800160c:	e0f1      	b.n	80017f2 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e03d      	b.n	8001690 <hmc5883lInit+0x1dc>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <hmc5883lInit+0x2c0>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2201      	movs	r2, #1
 800161a:	2102      	movs	r1, #2
 800161c:	4618      	mov	r0, r3
 800161e:	f011 f90f 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <hmc5883lInit+0x178>
 8001628:	2300      	movs	r3, #0
 800162a:	e0e2      	b.n	80017f2 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800162c:	2032      	movs	r0, #50	; 0x32
 800162e:	f013 fb1b 	bl	8014c68 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	484f      	ldr	r0, [pc, #316]	; (8001778 <hmc5883lInit+0x2c4>)
 800163a:	f016 fed8 	bl	80183ee <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 800165c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001660:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001664:	4293      	cmp	r3, r2
 8001666:	bfa8      	it	ge
 8001668:	4613      	movge	r3, r2
 800166a:	b21a      	sxth	r2, r3
 800166c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001670:	4293      	cmp	r3, r2
 8001672:	bfa8      	it	ge
 8001674:	4613      	movge	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800167c:	dc03      	bgt.n	8001686 <hmc5883lInit+0x1d2>
            bret = false;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8001684:	e007      	b.n	8001696 <hmc5883lInit+0x1e2>
        }
        actLed1Toggle();
 8001686:	f000 fd0b 	bl	80020a0 <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	2b09      	cmp	r3, #9
 8001694:	ddbe      	ble.n	8001614 <hmc5883lInit+0x160>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a0:	eddf 6a36 	vldr	s13, [pc, #216]	; 800177c <hmc5883lInit+0x2c8>
 80016a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a8:	eef0 7ae7 	vabs.f32	s15, s15
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <hmc5883lInit+0x2c0>)
 80016ae:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016bc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800177c <hmc5883lInit+0x2c8>
 80016c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c4:	eef0 7ae7 	vabs.f32	s15, s15
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <hmc5883lInit+0x2c0>)
 80016ca:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001780 <hmc5883lInit+0x2cc>
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	eef0 7ae7 	vabs.f32	s15, s15
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <hmc5883lInit+0x2c0>)
 80016e6:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f36f 0301 	bfc	r3, #0, #2
 80016f0:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f8:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <hmc5883lInit+0x2c0>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	7b3a      	ldrb	r2, [r7, #12]
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f011 f89c 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <hmc5883lInit+0x25e>
 800170e:	2300      	movs	r3, #0
 8001710:	e06f      	b.n	80017f2 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 8001712:	2101      	movs	r1, #1
 8001714:	4818      	ldr	r0, [pc, #96]	; (8001778 <hmc5883lInit+0x2c4>)
 8001716:	f016 fe4b 	bl	80183b0 <pifHmc5883_SetGain>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <hmc5883lInit+0x270>
 8001720:	2300      	movs	r3, #0
 8001722:	e066      	b.n	80017f2 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <hmc5883lInit+0x2c0>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f011 f887 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <hmc5883lInit+0x288>
 8001738:	2300      	movs	r3, #0
 800173a:	e05a      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <hmc5883lInit+0x2c0>)
 800173e:	68d8      	ldr	r0, [r3, #12]
 8001740:	2300      	movs	r3, #0
 8001742:	f240 1201 	movw	r2, #257	; 0x101
 8001746:	2137      	movs	r1, #55	; 0x37
 8001748:	f011 f890 	bl	801286c <pifI2cDevice_WriteRegBit8>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <hmc5883lInit+0x2a2>
 8001752:	2300      	movs	r3, #0
 8001754:	e04d      	b.n	80017f2 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <hmc5883lInit+0x2c0>)
 8001758:	68d8      	ldr	r0, [r3, #12]
 800175a:	2301      	movs	r3, #1
 800175c:	f240 5201 	movw	r2, #1281	; 0x501
 8001760:	216a      	movs	r1, #106	; 0x6a
 8001762:	f011 f883 	bl	801286c <pifI2cDevice_WriteRegBit8>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10b      	bne.n	8001784 <hmc5883lInit+0x2d0>
 800176c:	2300      	movs	r3, #0
 800176e:	e040      	b.n	80017f2 <hmc5883lInit+0x33e>
 8001770:	20001d18 	.word	0x20001d18
 8001774:	2000012c 	.word	0x2000012c
 8001778:	20000140 	.word	0x20000140
 800177c:	466f4000 	.word	0x466f4000
 8001780:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <hmc5883lInit+0x348>)
 8001794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001798:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <hmc5883lInit+0x348>)
 800179c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a0:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <hmc5883lInit+0x348>)
 80017a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a8:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <hmc5883lInit+0x348>)
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <hmc5883lInit+0x348>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe84 	bl	80004c4 <__aeabi_f2d>
 80017bc:	4680      	mov	r8, r0
 80017be:	4689      	mov	r9, r1
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <hmc5883lInit+0x348>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe7d 	bl	80004c4 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <hmc5883lInit+0x348>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe76 	bl	80004c4 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017e0:	e9cd 4500 	strd	r4, r5, [sp]
 80017e4:	4642      	mov	r2, r8
 80017e6:	464b      	mov	r3, r9
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <hmc5883lInit+0x34c>)
 80017ea:	2002      	movs	r0, #2
 80017ec:	f011 fef4 	bl	80135d8 <pifLog_Printf>
    return TRUE;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017fc:	2000012c 	.word	0x2000012c
 8001800:	08024cc0 	.word	0x08024cc0

08001804 <hmc5883lRead>:

static BOOL hmc5883lRead(int16_t *magData)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag(&imu_sensor, data)) return FALSE;
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4619      	mov	r1, r3
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <hmc5883lRead+0x44>)
 8001814:	f017 f9a9 	bl	8018b6a <pifImuSensor_ReadMag>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <hmc5883lRead+0x1e>
 800181e:	2300      	movs	r3, #0
 8001820:	e00e      	b.n	8001840 <hmc5883lRead+0x3c>
	magData[0] = data[0];
 8001822:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3302      	adds	r3, #2
 800182e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001832:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800183c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20001d18 	.word	0x20001d18

0800184c <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	461a      	mov	r2, r3
 800185a:	2101      	movs	r1, #1
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <_actHcSr04Trigger+0x24>)
 800185e:	f01a fd25 	bl	801c2ac <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <_actHcSr04Trigger+0x28>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020800 	.word	0x40020800
 8001874:	200001b0 	.word	0x200001b0

08001878 <hcsr04Echo>:

void hcsr04Echo()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <hcsr04Echo+0x24>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <hcsr04Echo+0x24>)
 8001888:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <hcsr04Echo+0x24>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <hcsr04Echo+0x28>)
 8001892:	f016 fc2d 	bl	80180f0 <pifHcSr04_sigReceiveEcho>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001b0 	.word	0x200001b0
 80018a0:	2000018c 	.word	0x2000018c

080018a4 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <_evtHcSr04Distance+0x54>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_evtHcSr04Distance+0x58>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d010      	beq.n	80018ee <_evtHcSr04Distance+0x4a>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <_evtHcSr04Distance+0x5c>)
 80018d2:	f016 fbc9 	bl	8018068 <pifHcSr04_SetTemperature>
#ifdef __PIF_DEBUG__
        pifLog_Printf(LT_INFO, "Temp=%f", temp);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7fe fdf4 	bl	80004c4 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4908      	ldr	r1, [pc, #32]	; (8001904 <_evtHcSr04Distance+0x60>)
 80018e2:	2002      	movs	r0, #2
 80018e4:	f011 fe78 	bl	80135d8 <pifLog_Printf>
#endif
        pretemp = temp;
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <_evtHcSr04Distance+0x58>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6013      	str	r3, [r2, #0]
    }
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001b4 	.word	0x200001b4
 80018fc:	200001b8 	.word	0x200001b8
 8001900:	2000018c 	.word	0x2000018c
 8001904:	08024cd4 	.word	0x08024cd4

08001908 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 8001914:	2100      	movs	r1, #0
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <hcsr04Init+0x50>)
 8001918:	f016 fb20 	bl	8017f5c <pifHcSr04_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <hcsr04Init+0x1e>
 8001922:	2300      	movs	r3, #0
 8001924:	e013      	b.n	800194e <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <hcsr04Init+0x50>)
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <hcsr04Init+0x54>)
 800192a:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_distance = _evtHcSr04Distance;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <hcsr04Init+0x50>)
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <hcsr04Init+0x58>)
 8001930:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4619      	mov	r1, r3
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <hcsr04Init+0x50>)
 8001938:	f016 fb72 	bl	8018020 <pifHcSr04_StartTrigger>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <hcsr04Init+0x3e>
 8001942:	2300      	movs	r3, #0
 8001944:	e003      	b.n	800194e <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <hcsr04Init+0x5c>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6013      	str	r3, [r2, #0]
    return TRUE;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000018c 	.word	0x2000018c
 800195c:	0800184d 	.word	0x0800184d
 8001960:	080018a5 	.word	0x080018a5
 8001964:	200001b4 	.word	0x200001b4

08001968 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af02      	add	r7, sp, #8
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	4613      	mov	r3, r2
 8001978:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	b21b      	sxth	r3, r3
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	b21b      	sxth	r3, r3
 800198c:	b299      	uxth	r1, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	b29a      	uxth	r2, r3
 8001992:	7bbb      	ldrb	r3, [r7, #14]
 8001994:	b298      	uxth	r0, r3
 8001996:	8b3b      	ldrh	r3, [r7, #24]
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4603      	mov	r3, r0
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <actI2cRead+0x78>)
 80019a2:	f01b f9bd 	bl	801cd20 <HAL_I2C_Mem_Read_DMA>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <actI2cRead+0x48>
 80019ac:	2300      	movs	r3, #0
 80019ae:	e013      	b.n	80019d8 <actI2cRead+0x70>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e011      	b.n	80019d8 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	b21b      	sxth	r3, r3
 80019c0:	b299      	uxth	r1, r3
 80019c2:	8b3b      	ldrh	r3, [r7, #24]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <actI2cRead+0x78>)
 80019c8:	f01a ff16 	bl	801c7f8 <HAL_I2C_Master_Receive_DMA>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <actI2cRead+0x6e>
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <actI2cRead+0x70>
 80019d6:	2302      	movs	r3, #2
	}
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000088c 	.word	0x2000088c

080019e4 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	4613      	mov	r3, r2
 80019f4:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d016      	beq.n	8001a2a <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b298      	uxth	r0, r3
 8001a0c:	8b3b      	ldrh	r3, [r7, #24]
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	480e      	ldr	r0, [pc, #56]	; (8001a50 <actI2cWrite+0x6c>)
 8001a18:	f01b f81e 	bl	801ca58 <HAL_I2C_Mem_Write_DMA>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <actI2cWrite+0x42>
 8001a22:	2300      	movs	r3, #0
 8001a24:	e010      	b.n	8001a48 <actI2cWrite+0x64>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e00e      	b.n	8001a48 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b299      	uxth	r1, r3
 8001a32:	8b3b      	ldrh	r3, [r7, #24]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <actI2cWrite+0x6c>)
 8001a38:	f01a fdae 	bl	801c598 <HAL_I2C_Master_Transmit_DMA>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <actI2cWrite+0x62>
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <actI2cWrite+0x64>
 8001a46:	2302      	movs	r3, #2
	}
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000088c 	.word	0x2000088c

08001a54 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d103      	bne.n	8001a6e <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a66:	2101      	movs	r1, #1
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a6a:	f010 ff61 	bl	8012930 <pifI2cPort_sigEndTransfer>
	}
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	20001b2c 	.word	0x20001b2c

08001a80 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d103      	bne.n	8001a9a <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a92:	2101      	movs	r1, #1
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a96:	f010 ff4b 	bl	8012930 <pifI2cPort_sigEndTransfer>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	20001b2c 	.word	0x20001b2c

08001aac <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d103      	bne.n	8001ac6 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001ac2:	f010 ff35 	bl	8012930 <pifI2cPort_sigEndTransfer>
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40005400 	.word	0x40005400
 8001ad4:	20001b2c 	.word	0x20001b2c

08001ad8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d103      	bne.n	8001af2 <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001aea:	2101      	movs	r1, #1
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001aee:	f010 ff1f 	bl	8012930 <pifI2cPort_sigEndTransfer>
	}
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40005400 	.word	0x40005400
 8001b00:	20001b2c 	.word	0x20001b2c

08001b04 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d811      	bhi.n	8001b3e <failsafeCheck+0x3a>
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <failsafeCheck+0x78>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	88ba      	ldrh	r2, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d90c      	bls.n	8001b3e <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <failsafeCheck+0x7c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <failsafeCheck+0x7c>)
 8001b3c:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <failsafeCheck+0x7c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d114      	bne.n	8001b70 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <failsafeCheck+0x7c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <failsafeCheck+0x80>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	2b14      	cmp	r3, #20
 8001b54:	dd09      	ble.n	8001b6a <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <failsafeCheck+0x80>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b14      	subs	r3, #20
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <failsafeCheck+0x80>)
 8001b66:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b68:	e002      	b.n	8001b70 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <failsafeCheck+0x80>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	801a      	strh	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	2000000c 	.word	0x2000000c
 8001b80:	20000695 	.word	0x20000695
 8001b84:	200019b6 	.word	0x200019b6

08001b88 <pwmReadRc>:

void pwmReadRc()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
    PifPulse* p_pulse = &pwmPorts[0].pulse;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <pwmReadRc+0x48>)
 8001b90:	607b      	str	r3, [r7, #4]

	if (pifPulse_sigTick(p_pulse, (*pif_act_timer1us)())) {
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <pwmReadRc+0x4c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4798      	blx	r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f011 ff05 	bl	80139ac <pifPulse_sigTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00e      	beq.n	8001bc6 <pwmReadRc+0x3e>
		failsafeCheck(p_pulse->_channel, captures[p_pulse->_channel]);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <pwmReadRc+0x50>)
 8001bba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7ff ff9f 	bl	8001b04 <failsafeCheck>
	}
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001c0 	.word	0x200001c0
 8001bd4:	200020e8 	.word	0x200020e8
 8001bd8:	2000061c 	.word	0x2000061c

08001bdc <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	460a      	mov	r2, r1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <pwmWriteStandard+0x8c>)
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	78db      	ldrb	r3, [r3, #3]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d830      	bhi.n	8001c5c <pwmWriteStandard+0x80>
 8001bfa:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <pwmWriteStandard+0x24>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c35 	.word	0x08001c35
 8001c04:	08001c5d 	.word	0x08001c5d
 8001c08:	08001c5d 	.word	0x08001c5d
 8001c0c:	08001c5d 	.word	0x08001c5d
 8001c10:	08001c3f 	.word	0x08001c3f
 8001c14:	08001c5d 	.word	0x08001c5d
 8001c18:	08001c5d 	.word	0x08001c5d
 8001c1c:	08001c5d 	.word	0x08001c5d
 8001c20:	08001c49 	.word	0x08001c49
 8001c24:	08001c5d 	.word	0x08001c5d
 8001c28:	08001c5d 	.word	0x08001c5d
 8001c2c:	08001c5d 	.word	0x08001c5d
 8001c30:	08001c53 	.word	0x08001c53
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	88ba      	ldrh	r2, [r7, #4]
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3c:	e00e      	b.n	8001c5c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
 8001c46:	e009      	b.n	8001c5c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	88ba      	ldrh	r2, [r7, #4]
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c50:	e004      	b.n	8001c5c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <pwmWriteStandard+0x90>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5a:	bf00      	nop
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	2000063c 	.word	0x2000063c
 8001c6c:	200009e8 	.word	0x200009e8

08001c70 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8a5a      	ldrh	r2, [r3, #18]
 8001c80:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <pwmInit+0x23c>)
 8001c82:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	79da      	ldrb	r2, [r3, #7]
 8001c88:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <pwmInit+0x240>)
 8001c8a:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7d1a      	ldrb	r2, [r3, #20]
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <pwmInit+0x244>)
 8001c92:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	799b      	ldrb	r3, [r3, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <pwmInit+0x3e>
        i++; // next index is for PPM
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	3301      	adds	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cae:	4a82      	ldr	r2, [pc, #520]	; (8001eb8 <pwmInit+0x248>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e0e4      	b.n	8001e88 <pwmInit+0x218>
        uint8_t pwm = setup[i].pwm;
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4413      	add	r3, r2
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	f000 80d5 	beq.w	8001e92 <pwmInit+0x222>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001ce8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <pwmInit+0x98>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <pwmInit+0x98>
        	type = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d026      	beq.n	8001d62 <pwmInit+0xf2>
            p = &pwmPorts[pwm];
 8001d14:	7dfa      	ldrb	r2, [r7, #23]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4a67      	ldr	r2, [pc, #412]	; (8001ebc <pwmInit+0x24c>)
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
            if (pifPulse_Init(&p->pulse, PIF_ID_AUTO)) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3304      	adds	r3, #4
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f011 fd8e 	bl	801384c <pifPulse_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a5 	beq.w	8001e82 <pwmInit+0x212>
                pifPulse_SetPositionMode(&p->pulse, 8, 2700, captures);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1d18      	adds	r0, r3, #4
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <pwmInit+0x250>)
 8001d3e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001d42:	2108      	movs	r1, #8
 8001d44:	f011 fdac 	bl	80138a0 <pifPulse_SetPositionMode>
                pifPulse_SetValidRange(&p->pulse, PIF_PMM_TICK_POSITION, PULSE_MIN, PULSE_MAX);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1d18      	adds	r0, r3, #4
 8001d4c:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8001d50:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	f011 fdd3 	bl	8013900 <pifPulse_SetValidRange>
                numInputs = 8;
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <pwmInit+0x254>)
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e08f      	b.n	8001e82 <pwmInit+0x212>
            }
        } else if (type & TYPE_IW) {
 8001d62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8089 	bne.w	8001e82 <pwmInit+0x212>
                	break;
            	}
                numInputs++;
            }
*/
        } else if (type & TYPE_M) {
 8001d70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05d      	beq.n	8001e38 <pwmInit+0x1c8>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	895b      	ldrh	r3, [r3, #10]
 8001d80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d84:	d803      	bhi.n	8001d8e <pwmInit+0x11e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7d5b      	ldrb	r3, [r3, #21]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <pwmInit+0x124>
                mhz = PWM_TIMER_8_MHZ;
 8001d8e:	2308      	movs	r3, #8
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e001      	b.n	8001d98 <pwmInit+0x128>
            else
                mhz = PWM_TIMER_MHZ;
 8001d94:	2301      	movs	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <pwmInit+0x258>)
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7d5b      	ldrb	r3, [r3, #21]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <pwmInit+0x148>
                period = hz / 4000;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <pwmInit+0x25c>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001db6:	e006      	b.n	8001dc6 <pwmInit+0x156>
            else
                period = hz / init->motorPwmRate;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	895b      	ldrh	r3, [r3, #10]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dc4:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001dc6:	7dfa      	ldrb	r2, [r7, #23]
 8001dc8:	493c      	ldr	r1, [pc, #240]	; (8001ebc <pwmInit+0x24c>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dd6:	801a      	strh	r2, [r3, #0]
            pwmPorts[pwm].port = setup[i].port;
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4413      	add	r3, r2
 8001de4:	7dfa      	ldrb	r2, [r7, #23]
 8001de6:	7898      	ldrb	r0, [r3, #2]
 8001de8:	4934      	ldr	r1, [pc, #208]	; (8001ebc <pwmInit+0x24c>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	440b      	add	r3, r1
 8001df4:	3303      	adds	r3, #3
 8001df6:	4602      	mov	r2, r0
 8001df8:	701a      	strb	r2, [r3, #0]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dfa:	7dfa      	ldrb	r2, [r7, #23]
 8001dfc:	492f      	ldr	r1, [pc, #188]	; (8001ebc <pwmInit+0x24c>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	3303      	adds	r3, #3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4830      	ldr	r0, [pc, #192]	; (8001ed0 <pwmInit+0x260>)
 8001e10:	f01d fee4 	bl	801fbdc <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e14:	7dfa      	ldrb	r2, [r7, #23]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <pwmInit+0x264>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	b2c8      	uxtb	r0, r1
 8001e1e:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <pwmInit+0x264>)
 8001e20:	7008      	strb	r0, [r1, #0]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <pwmInit+0x24c>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <pwmInit+0x268>)
 8001e32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e36:	e024      	b.n	8001e82 <pwmInit+0x212>
        } else if (type & TYPE_S) {
 8001e38:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da20      	bge.n	8001e82 <pwmInit+0x212>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	899b      	ldrh	r3, [r3, #12]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <pwmInit+0x258>)
 8001e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e4c:	7dfa      	ldrb	r2, [r7, #23]
 8001e4e:	b298      	uxth	r0, r3
 8001e50:	491a      	ldr	r1, [pc, #104]	; (8001ebc <pwmInit+0x24c>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	440b      	add	r3, r1
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	801a      	strh	r2, [r3, #0]
            servos[numServos++] = &pwmPorts[pwm];
 8001e60:	7dfa      	ldrb	r2, [r7, #23]
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <pwmInit+0x26c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	b2c8      	uxtb	r0, r1
 8001e6a:	491c      	ldr	r1, [pc, #112]	; (8001edc <pwmInit+0x26c>)
 8001e6c:	7008      	strb	r0, [r1, #0]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <pwmInit+0x24c>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <pwmInit+0x270>)
 8001e7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	2b0d      	cmp	r3, #13
 8001e8c:	f77f af17 	ble.w	8001cbe <pwmInit+0x4e>
 8001e90:	e000      	b.n	8001e94 <pwmInit+0x224>
            break;
 8001e92:	bf00      	nop
        }
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <pwmInit+0x274>)
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <pwmInit+0x278>)
 8001e98:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <pwmInit+0x26c>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	759a      	strb	r2, [r3, #22]

    return false;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20000693 	.word	0x20000693
 8001eb4:	20000694 	.word	0x20000694
 8001eb8:	08026c50 	.word	0x08026c50
 8001ebc:	200001bc 	.word	0x200001bc
 8001ec0:	2000061c 	.word	0x2000061c
 8001ec4:	20000692 	.word	0x20000692
 8001ec8:	000f4240 	.word	0x000f4240
 8001ecc:	10624dd3 	.word	0x10624dd3
 8001ed0:	200009e8 	.word	0x200009e8
 8001ed4:	20000690 	.word	0x20000690
 8001ed8:	2000063c 	.word	0x2000063c
 8001edc:	20000691 	.word	0x20000691
 8001ee0:	2000066c 	.word	0x2000066c
 8001ee4:	2000068c 	.word	0x2000068c
 8001ee8:	08001bdd 	.word	0x08001bdd

08001eec <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <actPwmWriteMotor+0x30>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d205      	bcs.n	8001f12 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <actPwmWriteMotor+0x34>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	88b9      	ldrh	r1, [r7, #4]
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4798      	blx	r3
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000690 	.word	0x20000690
 8001f20:	2000068c 	.word	0x2000068c

08001f24 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <actPwmRead+0x20>)
 8001f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	2000061c 	.word	0x2000061c

08001f64 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001f6e:	f000 f8ad 	bl	80020cc <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f852 	bl	800201c <actLed0State>
    actLed1State(OFF);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f87b 	bl	8002074 <actLed1State>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <failureMode>:

void failureMode(uint8_t mode)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
 8001f8c:	f011 fbec 	bl	8013768 <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 f86f 	bl	8002074 <actLed1State>
    actLed0State(ON);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 f840 	bl	800201c <actLed0State>
    while (1) {
        actLed1Toggle();
 8001f9c:	f000 f880 	bl	80020a0 <actLed1Toggle>
        actLed0Toggle();
 8001fa0:	f000 f852 	bl	8002048 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	0052      	lsls	r2, r2, #1
 8001fac:	441a      	add	r2, r3
 8001fae:	0152      	lsls	r2, r2, #5
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	0091      	lsls	r1, r2, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b02      	subs	r3, #2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00f fa86 	bl	80114d4 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f87d 	bl	80020cc <actBuzzerAction>
        pif_Delay1ms(25);
 8001fd2:	2019      	movs	r0, #25
 8001fd4:	f00f fa7e 	bl	80114d4 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fde:	f000 f875 	bl	80020cc <actBuzzerAction>
        actLed1Toggle();
 8001fe2:	e7db      	b.n	8001f9c <failureMode+0x1a>

08001fe4 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4907      	ldr	r1, [pc, #28]	; (8002010 <systemReset+0x2c>)
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f011 faef 	bl	80135d8 <pifLog_Printf>
	pif_Delay1ms(2000);
 8001ffa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ffe:	f00f fa69 	bl	80114d4 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <systemReset+0x30>)
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <systemReset+0x34>)
 8002006:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08024cdc 	.word	0x08024cdc
 8002014:	e000ed00 	.word	0xe000ed00
 8002018:	05fa0004 	.word	0x05fa0004

0800201c <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	461a      	mov	r2, r3
 800202a:	2110      	movs	r1, #16
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <actLed0State+0x24>)
 800202e:	f01a f93d 	bl	801c2ac <HAL_GPIO_WritePin>
    len0_state = state;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <actLed0State+0x28>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40020800 	.word	0x40020800
 8002044:	200006e0 	.word	0x200006e0

08002048 <actLed0Toggle>:

void actLed0Toggle()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <actLed0Toggle+0x24>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <actLed0Toggle+0x24>)
 8002058:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <actLed0Toggle+0x24>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	2110      	movs	r1, #16
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <actLed0Toggle+0x28>)
 8002064:	f01a f922 	bl	801c2ac <HAL_GPIO_WritePin>
#endif
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200006e0 	.word	0x200006e0
 8002070:	40020800 	.word	0x40020800

08002074 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	461a      	mov	r2, r3
 8002082:	2104      	movs	r1, #4
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <actLed1State+0x24>)
 8002086:	f01a f911 	bl	801c2ac <HAL_GPIO_WritePin>
    len1_state = state;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <actLed1State+0x28>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020400 	.word	0x40020400
 800209c:	200006e1 	.word	0x200006e1

080020a0 <actLed1Toggle>:

void actLed1Toggle()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <actLed1Toggle+0x24>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <actLed1Toggle+0x24>)
 80020b0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <actLed1Toggle+0x24>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	2104      	movs	r1, #4
 80020ba:	4803      	ldr	r0, [pc, #12]	; (80020c8 <actLed1Toggle+0x28>)
 80020bc:	f01a f8f6 	bl	801c2ac <HAL_GPIO_WritePin>
#endif
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200006e1 	.word	0x200006e1
 80020c8:	40020400 	.word	0x40020400

080020cc <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	460a      	mov	r2, r1
 80020d6:	80fb      	strh	r3, [r7, #6]
 80020d8:	4613      	mov	r3, r2
 80020da:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	461a      	mov	r2, r3
 80020e0:	2120      	movs	r1, #32
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <actBuzzerAction+0x24>)
 80020e4:	f01a f8e2 	bl	801c2ac <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020800 	.word	0x40020800

080020f4 <HAL_GPIO_EXTI_Callback>:
    (void)state;
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_EXTI_Callback+0x1c>
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002108:	d105      	bne.n	8002116 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 800210a:	f7ff fd3d 	bl	8001b88 <pwmReadRc>
		break;
 800210e:	e002      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002110:	f7ff fbb2 	bl	8001878 <hcsr04Echo>
    	break;
 8002114:	bf00      	nop
    }
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002126:	2100      	movs	r1, #0
 8002128:	4822      	ldr	r0, [pc, #136]	; (80021b4 <storageInit+0x94>)
 800212a:	f017 ffc3 	bl	801a0b4 <pifStorageVar_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <storageInit+0x18>
 8002134:	2300      	movs	r3, #0
 8002136:	e039      	b.n	80021ac <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8002138:	230a      	movs	r3, #10
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2302      	movs	r3, #2
 800213e:	2250      	movs	r2, #80	; 0x50
 8002140:	491d      	ldr	r1, [pc, #116]	; (80021b8 <storageInit+0x98>)
 8002142:	481c      	ldr	r0, [pc, #112]	; (80021b4 <storageInit+0x94>)
 8002144:	f018 f8fe 	bl	801a344 <pifStorageVar_AttachI2c>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d027      	beq.n	800219e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 800214e:	2308      	movs	r3, #8
 8002150:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	4817      	ldr	r0, [pc, #92]	; (80021b4 <storageInit+0x94>)
 8002158:	f018 f822 	bl	801a1a0 <pifStorageVar_SetMedia>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01f      	beq.n	80021a2 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 8002162:	4814      	ldr	r0, [pc, #80]	; (80021b4 <storageInit+0x94>)
 8002164:	f018 f907 	bl	801a376 <pifStorageVar_IsFormat>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <storageInit+0x9c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <storageInit+0xa0>)
 8002176:	2002      	movs	r0, #2
 8002178:	f011 fa2e 	bl	80135d8 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <storageInit+0x94>)
 800217e:	f017 feb6 	bl	8019eee <pifStorage_Format>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <storageInit+0xa4>)
 800218a:	2002      	movs	r0, #2
 800218c:	f011 fa24 	bl	80135d8 <pifLog_Printf>
			goto fail;
 8002190:	e008      	b.n	80021a4 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8002192:	490d      	ldr	r1, [pc, #52]	; (80021c8 <storageInit+0xa8>)
 8002194:	2002      	movs	r0, #2
 8002196:	f011 fa1f 	bl	80135d8 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <storageInit+0x94>)
 800219c:	e006      	b.n	80021ac <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021a2:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <storageInit+0x94>)
 80021a6:	f017 ffd1 	bl	801a14c <pifStorageVar_Clear>
#endif
	return NULL;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000698 	.word	0x20000698
 80021b8:	20001b2c 	.word	0x20001b2c
 80021bc:	200020c9 	.word	0x200020c9
 80021c0:	08024cf4 	.word	0x08024cf4
 80021c4:	08024d0c 	.word	0x08024d0c
 80021c8:	08024d24 	.word	0x08024d24

080021cc <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8a1b      	ldrh	r3, [r3, #16]
 80021da:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4a11      	ldr	r2, [pc, #68]	; (800222c <actUartSetBaudRate+0x60>)
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d101      	bne.n	80021fc <actUartSetBaudRate+0x30>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e013      	b.n	8002224 <actUartSetBaudRate+0x58>

	HAL_UART_DeInit(p_uart->p_huart);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	4618      	mov	r0, r3
 8002202:	f01e fd14 	bl	8020c2e <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	4618      	mov	r0, r3
 8002214:	f01e fcbe 	bl	8020b94 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <actUartSetBaudRate+0x56>
		return FALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <actUartSetBaudRate+0x58>
	}
	return TRUE;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000718 	.word	0x20000718

08002230 <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8a1b      	ldrh	r3, [r3, #16]
 800223c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <actUartStartTransfer+0x64>)
 800224a:	4413      	add	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2208      	movs	r2, #8
 8002252:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f00f ffce 	bl	8012202 <pifComm_StartGetTxData>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <actUartStartTransfer+0x58>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800227e:	461a      	mov	r2, r3
 8002280:	f01e fd04 	bl	8020c8c <HAL_UART_Transmit_IT>
		return TRUE;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <actUartStartTransfer+0x5a>
	}
	return FALSE;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000718 	.word	0x20000718

08002298 <serialUSART>:

static BOOL serialUSART(uartPort_t* s, uint32_t baudRate, PifId pif_id)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
	s->init = TRUE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (!pifComm_Init(&s->port.comm, pif_id)) return FALSE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3304      	adds	r3, #4
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00f fe8e 	bl	8011fd8 <pifComm_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <serialUSART+0x2e>
 80022c2:	2300      	movs	r3, #0
 80022c4:	e02b      	b.n	800231e <serialUSART+0x86>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, 1, TRUE)) return FALSE;	// 1ms
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1d18      	adds	r0, r3, #4
 80022ca:	2301      	movs	r3, #1
 80022cc:	2201      	movs	r2, #1
 80022ce:	2102      	movs	r1, #2
 80022d0:	f010 f82c 	bl	801232c <pifComm_AttachTask>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <serialUSART+0x46>
 80022da:	2300      	movs	r3, #0
 80022dc:	e01f      	b.n	800231e <serialUSART+0x86>
	if (!pifComm_AllocRxBuffer(&s->port.comm, 64, s->rx_threshold)) return FALSE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1d18      	adds	r0, r3, #4
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022e8:	461a      	mov	r2, r3
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	f00f fec4 	bl	8012078 <pifComm_AllocRxBuffer>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <serialUSART+0x62>
 80022f6:	2300      	movs	r3, #0
 80022f8:	e011      	b.n	800231e <serialUSART+0x86>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	4618      	mov	r0, r3
 8002302:	f00f fefd 	bl	8012100 <pifComm_AllocTxBuffer>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <serialUSART+0x78>
 800230c:	2300      	movs	r3, #0
 800230e:	e006      	b.n	800231e <serialUSART+0x86>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <serialUSART+0x90>)
 8002314:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <serialUSART+0x94>)
 800231a:	611a      	str	r2, [r3, #16]
	return TRUE;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	080021cd 	.word	0x080021cd
 800232c:	08002231 	.word	0x08002231

08002330 <actLogStartTransfer>:

#ifdef __PIF_DEBUG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <actLogStartTransfer+0x48>)
 800233a:	2200      	movs	r2, #0
 800233c:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <actLogStartTransfer+0x48>)
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f00f ff5b 	bl	8012202 <pifComm_StartGetTxData>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <actLogStartTransfer+0x48>)
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <actLogStartTransfer+0x4c>)
 8002364:	f01e fc92 	bl	8020c8c <HAL_UART_Transmit_IT>
		return TRUE;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <actLogStartTransfer+0x3e>
	}
	return FALSE;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000714 	.word	0x20000714
 800237c:	20000a74 	.word	0x20000a74

08002380 <logOpen>:

BOOL logOpen()
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	pifLog_Init();
 8002384:	f011 f83c 	bl	8013400 <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 8002388:	2100      	movs	r1, #0
 800238a:	4815      	ldr	r0, [pc, #84]	; (80023e0 <logOpen+0x60>)
 800238c:	f00f fe24 	bl	8011fd8 <pifComm_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <logOpen+0x1a>
 8002396:	2300      	movs	r3, #0
 8002398:	e020      	b.n	80023dc <logOpen+0x5c>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE)) return FALSE;			// 1ms
 800239a:	2301      	movs	r3, #1
 800239c:	2201      	movs	r2, #1
 800239e:	2102      	movs	r1, #2
 80023a0:	480f      	ldr	r0, [pc, #60]	; (80023e0 <logOpen+0x60>)
 80023a2:	f00f ffc3 	bl	801232c <pifComm_AttachTask>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <logOpen+0x30>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e015      	b.n	80023dc <logOpen+0x5c>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 80023b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b4:	480a      	ldr	r0, [pc, #40]	; (80023e0 <logOpen+0x60>)
 80023b6:	f00f fea3 	bl	8012100 <pifComm_AllocTxBuffer>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <logOpen+0x44>
 80023c0:	2300      	movs	r3, #0
 80023c2:	e00b      	b.n	80023dc <logOpen+0x5c>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <logOpen+0x60>)
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <logOpen+0x64>)
 80023c8:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <logOpen+0x60>)
 80023cc:	f011 f992 	bl	80136f4 <pifLog_AttachComm>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <logOpen+0x5a>
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <logOpen+0x5c>
	return TRUE;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200006e4 	.word	0x200006e4
 80023e4:	08002331 	.word	0x08002331

080023e8 <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
    uartPort_t *s = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]

    if (port == UART_PORT_1) {
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d109      	bne.n	8002414 <uartOpen+0x2c>
        s = &uartPort[0];
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <uartOpen+0x98>)
 8002402:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart1;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <uartOpen+0x9c>)
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2219      	movs	r2, #25
 800240e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002412:	e00e      	b.n	8002432 <uartOpen+0x4a>
        s = &uartPort[1];
        s->p_huart = &huart2;
        s->rx_threshold = 10;
    }
#endif
    else if (port == UART_PORT_3) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d109      	bne.n	800242e <uartOpen+0x46>
        s = &uartPort[2];
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <uartOpen+0xa0>)
 800241c:	617b      	str	r3, [r7, #20]
        s->p_huart = &huart6;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <uartOpen+0xa4>)
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
        s->rx_threshold = 25;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2219      	movs	r2, #25
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	e001      	b.n	8002432 <uartOpen+0x4a>
    }
    else return NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	e021      	b.n	8002476 <uartOpen+0x8e>

    if (!serialUSART(s, baudRate, PIF_ID_UART(port - 1))) return FALSE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	b29b      	uxth	r3, r3
 8002436:	33ff      	adds	r3, #255	; 0xff
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff2a 	bl	8002298 <serialUSART>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <uartOpen+0x66>
 800244a:	2300      	movs	r3, #0
 800244c:	e013      	b.n	8002476 <uartOpen+0x8e>

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f8e8 	bl	8002628 <serialSetBaudRate>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <uartOpen+0x84>
    	pifComm_Clear(&s->port.comm);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3304      	adds	r3, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f00f fde2 	bl	801202c <pifComm_Clear>
    	return FALSE;
 8002468:	2300      	movs	r3, #0
 800246a:	e004      	b.n	8002476 <uartOpen+0x8e>
    }

	s->init = FALSE;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return (serialPort_t *)s;
 8002474:	697b      	ldr	r3, [r7, #20]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000718 	.word	0x20000718
 8002484:	20000a30 	.word	0x20000a30
 8002488:	200007a0 	.word	0x200007a0
 800248c:	20000ab8 	.word	0x20000ab8

08002490 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a39      	ldr	r2, [pc, #228]	; (8002584 <HAL_UART_TxCpltCallback+0xf4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d102      	bne.n	80024a8 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_UART_TxCpltCallback+0xf8>)
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e035      	b.n	8002514 <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a37      	ldr	r2, [pc, #220]	; (800258c <HAL_UART_TxCpltCallback+0xfc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d129      	bne.n	8002506 <HAL_UART_TxCpltCallback+0x76>
#ifdef __PIF_DEBUG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4836      	ldr	r0, [pc, #216]	; (8002594 <HAL_UART_TxCpltCallback+0x104>)
 80024ba:	f00f feda 	bl	8012272 <pifComm_EndGetTxData>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 80024cc:	4831      	ldr	r0, [pc, #196]	; (8002594 <HAL_UART_TxCpltCallback+0x104>)
 80024ce:	f00f fee9 	bl	80122a4 <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 80024d2:	e050      	b.n	8002576 <HAL_UART_TxCpltCallback+0xe6>
			s_usLogTx = 0;
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024e0:	4619      	mov	r1, r3
 80024e2:	482c      	ldr	r0, [pc, #176]	; (8002594 <HAL_UART_TxCpltCallback+0x104>)
 80024e4:	f00f fe8d 	bl	8012202 <pifComm_StartGetTxData>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03f      	beq.n	8002576 <HAL_UART_TxCpltCallback+0xe6>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_UART_TxCpltCallback+0x100>)
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f01e fbc4 	bl	8020c8c <HAL_UART_Transmit_IT>
		return;
 8002504:	e037      	b.n	8002576 <HAL_UART_TxCpltCallback+0xe6>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_UART_TxCpltCallback+0x108>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d134      	bne.n	800257a <HAL_UART_TxCpltCallback+0xea>
		p_uart = &uartPort[2];
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_UART_TxCpltCallback+0x10c>)
 8002512:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f00f fea7 	bl	8012272 <pifComm_EndGetTxData>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_UART_TxCpltCallback+0xae>
		pifComm_FinishTransfer(&p_uart->port.comm);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3304      	adds	r3, #4
 8002536:	4618      	mov	r0, r3
 8002538:	f00f feb4 	bl	80122a4 <pifComm_FinishTransfer>
 800253c:	e01e      	b.n	800257c <HAL_UART_TxCpltCallback+0xec>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2208      	movs	r2, #8
 8002542:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1d18      	adds	r0, r3, #4
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	4619      	mov	r1, r3
 8002554:	f00f fe55 	bl	8012202 <pifComm_StartGetTxData>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_UART_TxCpltCallback+0xec>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800256c:	461a      	mov	r2, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f01e fb8c 	bl	8020c8c <HAL_UART_Transmit_IT>
 8002574:	e002      	b.n	800257c <HAL_UART_TxCpltCallback+0xec>
		return;
 8002576:	bf00      	nop
 8002578:	e000      	b.n	800257c <HAL_UART_TxCpltCallback+0xec>
	else return;
 800257a:	bf00      	nop
		}
	}
}
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40011000 	.word	0x40011000
 8002588:	20000718 	.word	0x20000718
 800258c:	40004400 	.word	0x40004400
 8002590:	20000714 	.word	0x20000714
 8002594:	200006e4 	.word	0x200006e4
 8002598:	40011400 	.word	0x40011400
 800259c:	200007a0 	.word	0x200007a0

080025a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_UART_RxCpltCallback+0x70>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d102      	bne.n	80025b8 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_UART_RxCpltCallback+0x74>)
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e00e      	b.n	80025d6 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_UART_RxCpltCallback+0x78>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_UART_RxCpltCallback+0x7c>)
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e006      	b.n	80025d6 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_UART_RxCpltCallback+0x80>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d117      	bne.n	8002602 <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_UART_RxCpltCallback+0x84>)
 80025d4:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d112      	bne.n	8002606 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1d1a      	adds	r2, r3, #4
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f00f fddc 	bl	80121aa <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	333e      	adds	r3, #62	; 0x3e
 80025f6:	2201      	movs	r2, #1
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f01e fb8b 	bl	8020d16 <HAL_UART_Receive_IT>
 8002600:	e002      	b.n	8002608 <HAL_UART_RxCpltCallback+0x68>
	else return;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002606:	bf00      	nop
}
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000
 8002614:	20000718 	.word	0x20000718
 8002618:	40004400 	.word	0x40004400
 800261c:	2000075c 	.word	0x2000075c
 8002620:	40011400 	.word	0x40011400
 8002624:	200007a0 	.word	0x200007a0

08002628 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	3204      	adds	r2, #4
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8a1b      	ldrh	r3, [r3, #16]
 8002658:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <serialStartReceiveFunc+0x44>)
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	333e      	adds	r3, #62	; 0x3e
 8002672:	2201      	movs	r2, #1
 8002674:	4619      	mov	r1, r3
 8002676:	f01e fb4e 	bl	8020d16 <HAL_UART_Receive_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <serialStartReceiveFunc+0x38>
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <serialStartReceiveFunc+0x3a>
	return TRUE;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000718 	.word	0x20000718

08002694 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8a1b      	ldrh	r3, [r3, #16]
 80026a0:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <serialStopReceiveFunc+0x34>)
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4618      	mov	r0, r3
 80026b8:	f01e fb5e 	bl	8020d78 <HAL_UART_Abort_IT>
	return TRUE;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000718 	.word	0x20000718

080026cc <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <micros+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	200009a0 	.word	0x200009a0

080026e4 <featureDefault>:

static void featureDefault(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f004 fc73 	bl	8006fd4 <featureSet>
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <actTaskSignal>:

#ifdef __PIF_DEBUG__

void actTaskSignal(BOOL state)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, state);
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	461a      	mov	r2, r3
 8002702:	2120      	movs	r1, #32
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <actTaskSignal+0x20>)
 8002706:	f019 fdd1 	bl	801c2ac <HAL_GPIO_WritePin>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40020000 	.word	0x40020000

08002718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b08d      	sub	sp, #52	; 0x34
 800271c:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 800271e:	2300      	movs	r3, #0
 8002720:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002722:	f018 f987 	bl	801aa34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002726:	f000 fb17 	bl	8002d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800272a:	f000 fdcf 	bl	80032cc <MX_GPIO_Init>
  MX_DMA_Init();
 800272e:	f000 fd8f 	bl	8003250 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002732:	f000 fd39 	bl	80031a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002736:	f000 fbf5 	bl	8002f24 <MX_I2C1_Init>
  MX_TIM3_Init();
 800273a:	f000 fc6d 	bl	8003018 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800273e:	f000 fd09 	bl	8003154 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002742:	f000 fd5b 	bl	80031fc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002746:	f000 fb71 	bl	8002e2c <MX_ADC1_Init>
  MX_TIM2_Init();
 800274a:	f000 fc19 	bl	8002f80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800274e:	2100      	movs	r1, #0
 8002750:	488c      	ldr	r0, [pc, #560]	; (8002984 <main+0x26c>)
 8002752:	f01d faf3 	bl	801fd3c <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 8002756:	488c      	ldr	r0, [pc, #560]	; (8002988 <main+0x270>)
 8002758:	f00e fdf2 	bl	8011340 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 800275c:	2014      	movs	r0, #20
 800275e:	f012 f899 	bl	8014894 <pifTaskManager_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <main+0x56>
 8002768:	23ab      	movs	r3, #171	; 0xab
 800276a:	623b      	str	r3, [r7, #32]
 800276c:	e2e0      	b.n	8002d30 <main+0x618>

#ifdef __PIF_DEBUG__
    pif_act_task_signal = actTaskSignal;
 800276e:	4b87      	ldr	r3, [pc, #540]	; (800298c <main+0x274>)
 8002770:	4a87      	ldr	r2, [pc, #540]	; (8002990 <main+0x278>)
 8002772:	601a      	str	r2, [r3, #0]

    logOpen();
 8002774:	f7ff fe04 	bl	8002380 <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 8002778:	2303      	movs	r3, #3
 800277a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800277e:	2100      	movs	r1, #0
 8002780:	4884      	ldr	r0, [pc, #528]	; (8002994 <main+0x27c>)
 8002782:	f012 fac1 	bl	8014d08 <pifTimerManager_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <main+0x7a>
 800278c:	23b3      	movs	r3, #179	; 0xb3
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	e2ce      	b.n	8002d30 <main+0x618>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 8002792:	f240 526c 	movw	r2, #1388	; 0x56c
 8002796:	4980      	ldr	r1, [pc, #512]	; (8002998 <main+0x280>)
 8002798:	2002      	movs	r0, #2
 800279a:	f010 ff1d 	bl	80135d8 <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 800279e:	f001 fbf9 	bl	8003f94 <buzzerInit>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <main+0x9c>
 80027ae:	23b9      	movs	r3, #185	; 0xb9
 80027b0:	623b      	str	r3, [r7, #32]
 80027b2:	e2bd      	b.n	8002d30 <main+0x618>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80027b4:	4b79      	ldr	r3, [pc, #484]	; (800299c <main+0x284>)
 80027b6:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <main+0x288>)
 80027b8:	601a      	str	r2, [r3, #0]

    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) FAIL;
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	2205      	movs	r2, #5
 80027be:	2100      	movs	r1, #0
 80027c0:	4878      	ldr	r0, [pc, #480]	; (80029a4 <main+0x28c>)
 80027c2:	f00f fdd3 	bl	801236c <pifI2cPort_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <main+0xba>
 80027cc:	23c0      	movs	r3, #192	; 0xc0
 80027ce:	623b      	str	r3, [r7, #32]
 80027d0:	e2ae      	b.n	8002d30 <main+0x618>
    g_i2c_port.act_read = actI2cRead;
 80027d2:	4b74      	ldr	r3, [pc, #464]	; (80029a4 <main+0x28c>)
 80027d4:	4a74      	ldr	r2, [pc, #464]	; (80029a8 <main+0x290>)
 80027d6:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 80027d8:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <main+0x28c>)
 80027da:	4a74      	ldr	r2, [pc, #464]	; (80029ac <main+0x294>)
 80027dc:	609a      	str	r2, [r3, #8]

    if (!initEEPROM()) FAIL;
 80027de:	f003 fe45 	bl	800646c <initEEPROM>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f083 0301 	eor.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <main+0xdc>
 80027ee:	23c4      	movs	r3, #196	; 0xc4
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	e29d      	b.n	8002d30 <main+0x618>
    if (!checkFirstTime(false)) FAIL;
 80027f4:	2000      	movs	r0, #0
 80027f6:	f004 f877 	bl	80068e8 <checkFirstTime>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f083 0301 	eor.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <main+0xf4>
 8002806:	23c5      	movs	r3, #197	; 0xc5
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	e291      	b.n	8002d30 <main+0x618>
    readEEPROM();
 800280c:	f003 fed6 	bl	80065bc <readEEPROM>

    systemInit();
 8002810:	f7ff fba8 	bl	8001f64 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 8002814:	2064      	movs	r0, #100	; 0x64
 8002816:	f00e fe5d 	bl	80114d4 <pif_Delay1ms>

    activateConfig();
 800281a:	f003 ff19 	bl	8006650 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 800281e:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <main+0x298>)
 8002820:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <main+0x148>
 8002828:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <main+0x298>)
 800282a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800282e:	2b01      	cmp	r3, #1
 8002830:	d009      	beq.n	8002846 <main+0x12e>
 8002832:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <main+0x298>)
 8002834:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002838:	2b09      	cmp	r3, #9
 800283a:	d004      	beq.n	8002846 <main+0x12e>
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <main+0x298>)
 800283e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10c      	bne.n	8002860 <main+0x148>
 8002846:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <main+0x298>)
 8002848:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 800284c:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <main+0x298>)
 800284e:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002852:	429a      	cmp	r2, r3
 8002854:	d004      	beq.n	8002860 <main+0x148>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002856:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <main+0x298>)
 8002858:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800285c:	707b      	strb	r3, [r7, #1]
 800285e:	e005      	b.n	800286c <main+0x154>
    else {
        adc_params.rssiAdcChannel = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	707b      	strb	r3, [r7, #1]
        mcfg.rssi_adc_channel = 0;
 8002864:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <main+0x298>)
 8002866:	2200      	movs	r2, #0
 8002868:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 800286c:	463b      	mov	r3, r7
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc92 	bl	8001198 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 8002874:	2002      	movs	r0, #2
 8002876:	f004 fb97 	bl	8006fa8 <feature>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <main+0x16c>
        batteryInit();
 8002880:	f00b fe5c 	bl	800e53c <batteryInit>
    initBoardAlignment();
 8002884:	f001 fa2c 	bl	8003ce0 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 8002888:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <main+0x29c>)
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	4b4a      	ldr	r3, [pc, #296]	; (80029b8 <main+0x2a0>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <main+0x2a4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	484a      	ldr	r0, [pc, #296]	; (80029c0 <main+0x2a8>)
 8002896:	f00b fcf5 	bl	800e284 <sensorsAutodetect>
 800289a:	4603      	mov	r3, r0
 800289c:	77fb      	strb	r3, [r7, #31]
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 800289e:	f004 fb77 	bl	8006f90 <sensorsMask>
 80028a2:	4602      	mov	r2, r0
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	4947      	ldr	r1, [pc, #284]	; (80029c4 <main+0x2ac>)
 80028a8:	2002      	movs	r0, #2
 80028aa:	f010 fe95 	bl	80135d8 <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <main+0x1a8>
        failureMode(3);
 80028ba:	2003      	movs	r0, #3
 80028bc:	f7ff fb61 	bl	8001f82 <failureMode>

    actLed1State(ON);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7ff fbd7 	bl	8002074 <actLed1State>
    actLed0State(OFF);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fba8 	bl	800201c <actLed0State>
    for (i = 0; i < 10; i++) {
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028d2:	e018      	b.n	8002906 <main+0x1ee>
        actLed1Toggle();
 80028d4:	f7ff fbe4 	bl	80020a0 <actLed1Toggle>
        actLed0Toggle();
 80028d8:	f7ff fbb6 	bl	8002048 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 80028dc:	2019      	movs	r0, #25
 80028de:	f012 f9c3 	bl	8014c68 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 80028e2:	2101      	movs	r1, #1
 80028e4:	f44f 7098 	mov.w	r0, #304	; 0x130
 80028e8:	f7ff fbf0 	bl	80020cc <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 80028ec:	2019      	movs	r0, #25
 80028ee:	f012 f9bb 	bl	8014c68 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 80028f2:	2100      	movs	r1, #0
 80028f4:	f44f 7098 	mov.w	r0, #304	; 0x130
 80028f8:	f7ff fbe8 	bl	80020cc <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 80028fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002900:	3301      	adds	r3, #1
 8002902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290a:	2b09      	cmp	r3, #9
 800290c:	d9e2      	bls.n	80028d4 <main+0x1bc>
    }
    actLed0State(OFF);
 800290e:	2000      	movs	r0, #0
 8002910:	f7ff fb84 	bl	800201c <actLed0State>
    actLed1State(OFF);
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff fbad 	bl	8002074 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 800291a:	f006 ff45 	bl	80097a8 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 800291e:	f008 fa1f 	bl	800ad60 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <main+0x298>)
 8002924:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002928:	461a      	mov	r2, r3
 800292a:	4927      	ldr	r1, [pc, #156]	; (80029c8 <main+0x2b0>)
 800292c:	2002      	movs	r0, #2
 800292e:	f010 fe53 	bl	80135d8 <pifLog_Printf>
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <main+0x298>)
 8002934:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	2001      	movs	r0, #1
 800293e:	f00c fd61 	bl	800f404 <serialInit>

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <main+0x298>)
 8002944:	795b      	ldrb	r3, [r3, #5]
 8002946:	2b0e      	cmp	r3, #14
 8002948:	d007      	beq.n	800295a <main+0x242>
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <main+0x298>)
 800294c:	795b      	ldrb	r3, [r3, #5]
 800294e:	2b08      	cmp	r3, #8
 8002950:	d003      	beq.n	800295a <main+0x242>
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <main+0x298>)
 8002954:	795b      	ldrb	r3, [r3, #5]
 8002956:	2b18      	cmp	r3, #24
 8002958:	d102      	bne.n	8002960 <main+0x248>
        pwm_params.airplane = true;
 800295a:	2301      	movs	r3, #1
 800295c:	72bb      	strb	r3, [r7, #10]
 800295e:	e001      	b.n	8002964 <main+0x24c>
    else
        pwm_params.airplane = false;
 8002960:	2300      	movs	r3, #0
 8002962:	72bb      	strb	r3, [r7, #10]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 8002964:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002968:	f004 fb1e 	bl	8006fa8 <feature>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <main+0x266>
 8002972:	2008      	movs	r0, #8
 8002974:	f004 fb18 	bl	8006fa8 <feature>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d026      	beq.n	80029cc <main+0x2b4>
 800297e:	2301      	movs	r3, #1
 8002980:	e025      	b.n	80029ce <main+0x2b6>
 8002982:	bf00      	nop
 8002984:	200009a0 	.word	0x200009a0
 8002988:	080026cd 	.word	0x080026cd
 800298c:	2000216c 	.word	0x2000216c
 8002990:	080026f5 	.word	0x080026f5
 8002994:	20001b5c 	.word	0x20001b5c
 8002998:	08024d34 	.word	0x08024d34
 800299c:	20001968 	.word	0x20001968
 80029a0:	080026e5 	.word	0x080026e5
 80029a4:	20001b2c 	.word	0x20001b2c
 80029a8:	08001969 	.word	0x08001969
 80029ac:	080019e5 	.word	0x080019e5
 80029b0:	20000bb4 	.word	0x20000bb4
 80029b4:	20000b14 	.word	0x20000b14
 80029b8:	20000b18 	.word	0x20000b18
 80029bc:	20000b1c 	.word	0x20000b1c
 80029c0:	20000010 	.word	0x20000010
 80029c4:	08024d4c 	.word	0x08024d4c
 80029c8:	08024d60 	.word	0x08024d60
 80029cc:	2300      	movs	r3, #0
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	71bb      	strb	r3, [r7, #6]
    pwm_params.useSoftSerial = false;
 80029d6:	2300      	movs	r3, #0
 80029d8:	71fb      	strb	r3, [r7, #7]
    pwm_params.usePPM = feature(FEATURE_PPM);
 80029da:	2001      	movs	r0, #1
 80029dc:	f004 fae4 	bl	8006fa8 <feature>
 80029e0:	4603      	mov	r3, r0
 80029e2:	717b      	strb	r3, [r7, #5]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 80029e4:	2008      	movs	r0, #8
 80029e6:	f004 fadf 	bl	8006fa8 <feature>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f083 0301 	eor.w	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	713b      	strb	r3, [r7, #4]
    pwm_params.useServos = core.useServo;
 8002a04:	4bb0      	ldr	r3, [pc, #704]	; (8002cc8 <main+0x5b0>)
 8002a06:	7d5b      	ldrb	r3, [r3, #21]
 8002a08:	723b      	strb	r3, [r7, #8]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 8002a0a:	4bb0      	ldr	r3, [pc, #704]	; (8002ccc <main+0x5b4>)
 8002a0c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf14      	ite	ne
 8002a18:	2301      	movne	r3, #1
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	727b      	strb	r3, [r7, #9]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002a20:	4bab      	ldr	r3, [pc, #684]	; (8002cd0 <main+0x5b8>)
 8002a22:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002a26:	81fb      	strh	r3, [r7, #14]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002a28:	4ba9      	ldr	r3, [pc, #676]	; (8002cd0 <main+0x5b8>)
 8002a2a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002a2e:	823b      	strh	r3, [r7, #16]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002a30:	4ba7      	ldr	r3, [pc, #668]	; (8002cd0 <main+0x5b8>)
 8002a32:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002a36:	72fb      	strb	r3, [r7, #11]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3c:	827b      	strh	r3, [r7, #18]
    if (feature(FEATURE_3D))
 8002a3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a42:	f004 fab1 	bl	8006fa8 <feature>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <main+0x33c>
        pwm_params.idlePulse = mcfg.neutral3d;
 8002a4c:	4ba0      	ldr	r3, [pc, #640]	; (8002cd0 <main+0x5b8>)
 8002a4e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002a52:	827b      	strh	r3, [r7, #18]
    if (pwm_params.motorPwmRate > 500)
 8002a54:	89fb      	ldrh	r3, [r7, #14]
 8002a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a5a:	d901      	bls.n	8002a60 <main+0x348>
        pwm_params.idlePulse = 0; // brushed motors
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	827b      	strh	r3, [r7, #18]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 8002a60:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002a64:	f004 faa0 	bl	8006fa8 <feature>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	763b      	strb	r3, [r7, #24]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 8002a6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a70:	f004 fa9a 	bl	8006fa8 <feature>
 8002a74:	4603      	mov	r3, r0
 8002a76:	767b      	strb	r3, [r7, #25]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002a78:	4b95      	ldr	r3, [pc, #596]	; (8002cd0 <main+0x5b8>)
 8002a7a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8002a7e:	82bb      	strh	r3, [r7, #20]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <main+0x5b4>)
 8002a82:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002a86:	82fb      	strh	r3, [r7, #22]
    switch (mcfg.power_adc_channel) {
 8002a88:	4b91      	ldr	r3, [pc, #580]	; (8002cd0 <main+0x5b8>)
 8002a8a:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d002      	beq.n	8002a98 <main+0x380>
 8002a92:	2b09      	cmp	r3, #9
 8002a94:	d003      	beq.n	8002a9e <main+0x386>
 8002a96:	e005      	b.n	8002aa4 <main+0x38c>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	733b      	strb	r3, [r7, #12]
            break;
 8002a9c:	e005      	b.n	8002aaa <main+0x392>
        case 9:
            pwm_params.adcChannel = PWM8;
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	733b      	strb	r3, [r7, #12]
            break;
 8002aa2:	e002      	b.n	8002aaa <main+0x392>
        default:
            pwm_params.adcChannel = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	733b      	strb	r3, [r7, #12]
            break;
 8002aa8:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f8df 	bl	8001c70 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002ab2:	7eba      	ldrb	r2, [r7, #26]
 8002ab4:	4b84      	ldr	r3, [pc, #528]	; (8002cc8 <main+0x5b0>)
 8002ab6:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002abe:	e00b      	b.n	8002ad8 <main+0x3c0>
        rcData[i] = 1502;
 8002ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac4:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <main+0x5bc>)
 8002ac6:	f240 51de 	movw	r1, #1502	; 0x5de
 8002aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 8002ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d9ef      	bls.n	8002ac0 <main+0x3a8>
    rcReadRawFunc = pwmReadRawRC;
 8002ae0:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <main+0x5c0>)
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	; (8002cdc <main+0x5c4>)
 8002ae4:	601a      	str	r2, [r3, #0]
    }
#endif

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002ae6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002aea:	f004 fa5d 	bl	8006fa8 <feature>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <main+0x3ec>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002af4:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <main+0x5b8>)
 8002af6:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	2003      	movs	r0, #3
 8002b00:	f005 f9ae 	bl	8007e60 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002b04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b08:	f004 fa4e 	bl	8006fa8 <feature>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <main+0x402>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002b12:	2102      	movs	r1, #2
 8002b14:	4872      	ldr	r0, [pc, #456]	; (8002ce0 <main+0x5c8>)
 8002b16:	f00c fab7 	bl	800f088 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <main+0x5b8>)
 8002b1c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002b20:	3b04      	subs	r3, #4
 8002b22:	2208      	movs	r2, #8
 8002b24:	2104      	movs	r1, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 f8c0 	bl	8003cac <constrain>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <main+0x5b0>)
 8002b32:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    previousTime = (*pif_act_timer1us)();
 8002b34:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <main+0x5cc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4798      	blx	r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ce8 <main+0x5d0>)
 8002b3e:	6013      	str	r3, [r2, #0]
    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <main+0x5b8>)
 8002b42:	795b      	ldrb	r3, [r3, #5]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d103      	bne.n	8002b50 <main+0x438>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <main+0x5d4>)
 8002b4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b4e:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002b50:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <main+0x5d8>)
 8002b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b56:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002b58:	4b66      	ldr	r3, [pc, #408]	; (8002cf4 <main+0x5dc>)
 8002b5a:	22c8      	movs	r2, #200	; 0xc8
 8002b5c:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002b5e:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <main+0x5e0>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	735a      	strb	r2, [r3, #13]

    if (!pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE)) FAIL;         								// 1ms
 8002b64:	2301      	movs	r3, #1
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4a64      	ldr	r2, [pc, #400]	; (8002cfc <main+0x5e4>)
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2002      	movs	r0, #2
 8002b70:	f011 feb6 	bl	80148e0 <pifTaskManager_Add>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <main+0x46a>
 8002b7a:	f240 135d 	movw	r3, #349	; 0x15d
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	e0d6      	b.n	8002d30 <main+0x618>

    if (mcfg.looptime) {
 8002b82:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <main+0x5b8>)
 8002b84:	899b      	ldrh	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <main+0x48c>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <main+0x5b8>)
 8002b8c:	8999      	ldrh	r1, [r3, #12]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2300      	movs	r3, #0
 8002b94:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <main+0x5e8>)
 8002b96:	2003      	movs	r0, #3
 8002b98:	f011 fea2 	bl	80148e0 <pifTaskManager_Add>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <main+0x5ec>)
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00a      	b.n	8002bba <main+0x4a2>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4a55      	ldr	r2, [pc, #340]	; (8002d00 <main+0x5e8>)
 8002bac:	2100      	movs	r1, #0
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f011 fe96 	bl	80148e0 <pifTaskManager_Add>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4a53      	ldr	r2, [pc, #332]	; (8002d04 <main+0x5ec>)
 8002bb8:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002bba:	4b52      	ldr	r3, [pc, #328]	; (8002d04 <main+0x5ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <main+0x4b2>
 8002bc2:	f240 1365 	movw	r3, #357	; 0x165
 8002bc6:	623b      	str	r3, [r7, #32]
 8002bc8:	e0b2      	b.n	8002d30 <main+0x618>
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <main+0x5ec>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	709a      	strb	r2, [r3, #2]

    g_task_compute_rc = pifTaskManager_Add(TM_PERIOD_MS, 20, taskComputeRc, NULL, TRUE);						// 20ms - 50Hz
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	; (8002d08 <main+0x5f0>)
 8002bda:	2114      	movs	r1, #20
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f011 fe7f 	bl	80148e0 <pifTaskManager_Add>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <main+0x5f4>)
 8002be6:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002be8:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <main+0x5f4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <main+0x4e0>
 8002bf0:	f240 1369 	movw	r3, #361	; 0x169
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	e09b      	b.n	8002d30 <main+0x618>

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002bf8:	2008      	movs	r0, #8
 8002bfa:	f004 f98d 	bl	8006f18 <sensors>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <main+0x51a>
        sensor_set.mag.p_m_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002c04:	2301      	movs	r3, #1
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4a41      	ldr	r2, [pc, #260]	; (8002d10 <main+0x5f8>)
 8002c0c:	2164      	movs	r1, #100	; 0x64
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f011 fe66 	bl	80148e0 <pifTaskManager_Add>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a3f      	ldr	r2, [pc, #252]	; (8002d14 <main+0x5fc>)
 8002c18:	6553      	str	r3, [r2, #84]	; 0x54
        if (!sensor_set.mag.p_m_task) FAIL;
 8002c1a:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <main+0x5fc>)
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <main+0x512>
 8002c22:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	e082      	b.n	8002d30 <main+0x618>
        sensor_set.mag.p_m_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <main+0x5fc>)
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	2201      	movs	r2, #1
 8002c30:	709a      	strb	r2, [r3, #2]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002c32:	2004      	movs	r0, #4
 8002c34:	f004 f970 	bl	8006f18 <sensors>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d012      	beq.n	8002c64 <main+0x54c>
        sensor_set.baro.p_b_task = pifTaskManager_Add(TM_NEED, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <main+0x600>)
 8002c46:	2100      	movs	r1, #0
 8002c48:	2006      	movs	r0, #6
 8002c4a:	f011 fe49 	bl	80148e0 <pifTaskManager_Add>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <main+0x5fc>)
 8002c52:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (!sensor_set.baro.p_b_task) FAIL;
 8002c54:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <main+0x5fc>)
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <main+0x54c>
 8002c5c:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	e065      	b.n	8002d30 <main+0x618>
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_NEED, 0, taskGpsNewData, NULL, FALSE);
 8002c64:	2300      	movs	r3, #0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <main+0x604>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2006      	movs	r0, #6
 8002c70:	f011 fe36 	bl	80148e0 <pifTaskManager_Add>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <main+0x608>)
 8002c78:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <main+0x608>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <main+0x572>
 8002c82:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	e052      	b.n	8002d30 <main+0x618>
#endif

    if (!pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE)) FAIL;									// 50ms
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <main+0x60c>)
 8002c92:	2132      	movs	r1, #50	; 0x32
 8002c94:	2002      	movs	r0, #2
 8002c96:	f011 fe23 	bl	80148e0 <pifTaskManager_Add>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <main+0x590>
 8002ca0:	f240 137f 	movw	r3, #383	; 0x17f
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	e043      	b.n	8002d30 <main+0x618>

#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002ca8:	f011 feb6 	bl	8014a18 <pifTaskManager_Count>
 8002cac:	4604      	mov	r4, r0
 8002cae:	481e      	ldr	r0, [pc, #120]	; (8002d28 <main+0x610>)
 8002cb0:	f012 f8c1 	bl	8014e36 <pifTimerManager_Count>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	491c      	ldr	r1, [pc, #112]	; (8002d2c <main+0x614>)
 8002cba:	2002      	movs	r0, #2
 8002cbc:	f010 fc8c 	bl	80135d8 <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002cc0:	f011 feb4 	bl	8014a2c <pifTaskManager_Loop>
 8002cc4:	e7fc      	b.n	8002cc0 <main+0x5a8>
 8002cc6:	bf00      	nop
 8002cc8:	20000afc 	.word	0x20000afc
 8002ccc:	20001120 	.word	0x20001120
 8002cd0:	20000bb4 	.word	0x20000bb4
 8002cd4:	200019bc 	.word	0x200019bc
 8002cd8:	20001a14 	.word	0x20001a14
 8002cdc:	0800c819 	.word	0x0800c819
 8002ce0:	08001909 	.word	0x08001909
 8002ce4:	200020e8 	.word	0x200020e8
 8002ce8:	200019a0 	.word	0x200019a0
 8002cec:	20001ca6 	.word	0x20001ca6
 8002cf0:	20001caa 	.word	0x20001caa
 8002cf4:	20001ca8 	.word	0x20001ca8
 8002cf8:	20001980 	.word	0x20001980
 8002cfc:	0800dc11 	.word	0x0800dc11
 8002d00:	0800dc79 	.word	0x0800dc79
 8002d04:	20001b80 	.word	0x20001b80
 8002d08:	0800d041 	.word	0x0800d041
 8002d0c:	20001b84 	.word	0x20001b84
 8002d10:	0800edfd 	.word	0x0800edfd
 8002d14:	20001cb8 	.word	0x20001cb8
 8002d18:	0800a5e1 	.word	0x0800a5e1
 8002d1c:	080087b5 	.word	0x080087b5
 8002d20:	20001b88 	.word	0x20001b88
 8002d24:	0800c561 	.word	0x0800c561
 8002d28:	20001b5c 	.word	0x20001b5c
 8002d2c:	08024d6c 	.word	0x08024d6c
  }
  return 0;

fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <main+0x638>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	4906      	ldr	r1, [pc, #24]	; (8002d54 <main+0x63c>)
 8002d3a:	2004      	movs	r0, #4
 8002d3c:	f010 fc4c 	bl	80135d8 <pifLog_Printf>
	pifLog_SendAndExit();
 8002d40:	f010 fd12 	bl	8013768 <pifLog_SendAndExit>
#endif
  return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	372c      	adds	r7, #44	; 0x2c
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	200020c9 	.word	0x200020c9
 8002d54:	08024d84 	.word	0x08024d84

08002d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b094      	sub	sp, #80	; 0x50
 8002d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d5e:	f107 0320 	add.w	r3, r7, #32
 8002d62:	2230      	movs	r2, #48	; 0x30
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f01f f8c8 	bl	8021efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <SystemClock_Config+0xcc>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <SystemClock_Config+0xcc>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <SystemClock_Config+0xcc>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <SystemClock_Config+0xd0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <SystemClock_Config+0xd0>)
 8002da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <SystemClock_Config+0xd0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002db4:	2302      	movs	r3, #2
 8002db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002db8:	2301      	movs	r3, #1
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002dbc:	230d      	movs	r3, #13
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002dc8:	2310      	movs	r3, #16
 8002dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002dcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	4618      	mov	r0, r3
 8002de0:	f01c f9bc 	bl	801f15c <HAL_RCC_OscConfig>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002dea:	f000 fb31 	bl	8003450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dee:	230f      	movs	r3, #15
 8002df0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002df2:	2302      	movs	r3, #2
 8002df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f01c fc1e 	bl	801f64c <HAL_RCC_ClockConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e16:	f000 fb1b 	bl	8003450 <Error_Handler>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3750      	adds	r7, #80	; 0x50
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000

08002e2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e32:	463b      	mov	r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e40:	4a36      	ldr	r2, [pc, #216]	; (8002f1c <MX_ADC1_Init+0xf0>)
 8002e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e44:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <MX_ADC1_Init+0xf4>)
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e8c:	4822      	ldr	r0, [pc, #136]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002e8e:	f017 fe43 	bl	801ab18 <HAL_ADC_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002e98:	f000 fada 	bl	8003450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481a      	ldr	r0, [pc, #104]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002eae:	f017 ff85 	bl	801adbc <HAL_ADC_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002eb8:	f000 faca 	bl	8003450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ebc:	2309      	movs	r3, #9
 8002ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4813      	ldr	r0, [pc, #76]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002eca:	f017 ff77 	bl	801adbc <HAL_ADC_ConfigChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002ed4:	f000 fabc 	bl	8003450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002ed8:	2307      	movs	r3, #7
 8002eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002edc:	2303      	movs	r3, #3
 8002ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480c      	ldr	r0, [pc, #48]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002ee6:	f017 ff69 	bl	801adbc <HAL_ADC_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002ef0:	f000 faae 	bl	8003450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002efc:	463b      	mov	r3, r7
 8002efe:	4619      	mov	r1, r3
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_ADC1_Init+0xec>)
 8002f02:	f017 ff5b 	bl	801adbc <HAL_ADC_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002f0c:	f000 faa0 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200007e4 	.word	0x200007e4
 8002f1c:	40012000 	.word	0x40012000
 8002f20:	0f000001 	.word	0x0f000001

08002f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f2a:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <MX_I2C1_Init+0x58>)
 8002f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <MX_I2C1_Init+0x50>)
 8002f62:	f019 f9d5 	bl	801c310 <HAL_I2C_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f6c:	f000 fa70 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000088c 	.word	0x2000088c
 8002f78:	40005400 	.word	0x40005400
 8002f7c:	00061a80 	.word	0x00061a80

08002f80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f94:	463b      	mov	r3, r7
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <MX_TIM2_Init+0x94>)
 8002f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fa6:	2253      	movs	r2, #83	; 0x53
 8002fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fc4:	4813      	ldr	r0, [pc, #76]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fc6:	f01c fd61 	bl	801fa8c <HAL_TIM_Base_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fd0:	f000 fa3e 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <MX_TIM2_Init+0x94>)
 8002fe2:	f01d f98f 	bl	8020304 <HAL_TIM_ConfigClockSource>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fec:	f000 fa30 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_TIM2_Init+0x94>)
 8002ffe:	f01d fd47 	bl	8020a90 <HAL_TIMEx_MasterConfigSynchronization>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003008:	f000 fa22 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200009a0 	.word	0x200009a0

08003018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	; 0x38
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
 8003044:	615a      	str	r2, [r3, #20]
 8003046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <MX_TIM3_Init+0x134>)
 800304a:	4a41      	ldr	r2, [pc, #260]	; (8003150 <MX_TIM3_Init+0x138>)
 800304c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <MX_TIM3_Init+0x134>)
 8003050:	2253      	movs	r2, #83	; 0x53
 8003052:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <MX_TIM3_Init+0x134>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <MX_TIM3_Init+0x134>)
 800305c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003060:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003062:	4b3a      	ldr	r3, [pc, #232]	; (800314c <MX_TIM3_Init+0x134>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003068:	4b38      	ldr	r3, [pc, #224]	; (800314c <MX_TIM3_Init+0x134>)
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800306e:	4837      	ldr	r0, [pc, #220]	; (800314c <MX_TIM3_Init+0x134>)
 8003070:	f01c fd0c 	bl	801fa8c <HAL_TIM_Base_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800307a:	f000 f9e9 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003088:	4619      	mov	r1, r3
 800308a:	4830      	ldr	r0, [pc, #192]	; (800314c <MX_TIM3_Init+0x134>)
 800308c:	f01d f93a 	bl	8020304 <HAL_TIM_ConfigClockSource>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003096:	f000 f9db 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800309a:	482c      	ldr	r0, [pc, #176]	; (800314c <MX_TIM3_Init+0x134>)
 800309c:	f01c fd45 	bl	801fb2a <HAL_TIM_PWM_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030a6:	f000 f9d3 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030b2:	f107 0320 	add.w	r3, r7, #32
 80030b6:	4619      	mov	r1, r3
 80030b8:	4824      	ldr	r0, [pc, #144]	; (800314c <MX_TIM3_Init+0x134>)
 80030ba:	f01d fce9 	bl	8020a90 <HAL_TIMEx_MasterConfigSynchronization>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80030c4:	f000 f9c4 	bl	8003450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c8:	2360      	movs	r3, #96	; 0x60
 80030ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80030cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2200      	movs	r2, #0
 80030de:	4619      	mov	r1, r3
 80030e0:	481a      	ldr	r0, [pc, #104]	; (800314c <MX_TIM3_Init+0x134>)
 80030e2:	f01d f84d 	bl	8020180 <HAL_TIM_PWM_ConfigChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80030ec:	f000 f9b0 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	2204      	movs	r2, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <MX_TIM3_Init+0x134>)
 80030f8:	f01d f842 	bl	8020180 <HAL_TIM_PWM_ConfigChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003102:	f000 f9a5 	bl	8003450 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2208      	movs	r2, #8
 800310e:	4619      	mov	r1, r3
 8003110:	480e      	ldr	r0, [pc, #56]	; (800314c <MX_TIM3_Init+0x134>)
 8003112:	f01d f835 	bl	8020180 <HAL_TIM_PWM_ConfigChannel>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 800311c:	f000 f998 	bl	8003450 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8003120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	220c      	movs	r2, #12
 800312a:	4619      	mov	r1, r3
 800312c:	4807      	ldr	r0, [pc, #28]	; (800314c <MX_TIM3_Init+0x134>)
 800312e:	f01d f827 	bl	8020180 <HAL_TIM_PWM_ConfigChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8003138:	f000 f98a 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800313c:	4803      	ldr	r0, [pc, #12]	; (800314c <MX_TIM3_Init+0x134>)
 800313e:	f000 fb5d 	bl	80037fc <HAL_TIM_MspPostInit>

}
 8003142:	bf00      	nop
 8003144:	3738      	adds	r7, #56	; 0x38
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200009e8 	.word	0x200009e8
 8003150:	40000400 	.word	0x40000400

08003154 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <MX_USART1_UART_Init+0x50>)
 800315c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 8003160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003164:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 800316e:	2200      	movs	r2, #0
 8003170:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 800317a:	220c      	movs	r2, #12
 800317c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <MX_USART1_UART_Init+0x4c>)
 800318c:	f01d fd02 	bl	8020b94 <HAL_UART_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003196:	f000 f95b 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000a30 	.word	0x20000a30
 80031a4:	40011000 	.word	0x40011000

080031a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <MX_USART2_UART_Init+0x50>)
 80031b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031ce:	220c      	movs	r2, #12
 80031d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031de:	4805      	ldr	r0, [pc, #20]	; (80031f4 <MX_USART2_UART_Init+0x4c>)
 80031e0:	f01d fcd8 	bl	8020b94 <HAL_UART_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031ea:	f000 f931 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000a74 	.word	0x20000a74
 80031f8:	40004400 	.word	0x40004400

080031fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <MX_USART6_UART_Init+0x50>)
 8003204:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003208:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800320c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <MX_USART6_UART_Init+0x4c>)
 8003234:	f01d fcae 	bl	8020b94 <HAL_UART_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800323e:	f000 f907 	bl	8003450 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000ab8 	.word	0x20000ab8
 800324c:	40011400 	.word	0x40011400

08003250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <MX_DMA_Init+0x78>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <MX_DMA_Init+0x78>)
 8003260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <MX_DMA_Init+0x78>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <MX_DMA_Init+0x78>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <MX_DMA_Init+0x78>)
 800327c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <MX_DMA_Init+0x78>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	200b      	movs	r0, #11
 8003294:	f018 f941 	bl	801b51a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003298:	200b      	movs	r0, #11
 800329a:	f018 f95a 	bl	801b552 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	200c      	movs	r0, #12
 80032a4:	f018 f939 	bl	801b51a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80032a8:	200c      	movs	r0, #12
 80032aa:	f018 f952 	bl	801b552 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2038      	movs	r0, #56	; 0x38
 80032b4:	f018 f931 	bl	801b51a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032b8:	2038      	movs	r0, #56	; 0x38
 80032ba:	f018 f94a 	bl	801b552 <HAL_NVIC_EnableIRQ>

}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <MX_GPIO_Init+0x174>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a55      	ldr	r2, [pc, #340]	; (8003440 <MX_GPIO_Init+0x174>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b53      	ldr	r3, [pc, #332]	; (8003440 <MX_GPIO_Init+0x174>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <MX_GPIO_Init+0x174>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a4e      	ldr	r2, [pc, #312]	; (8003440 <MX_GPIO_Init+0x174>)
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <MX_GPIO_Init+0x174>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b48      	ldr	r3, [pc, #288]	; (8003440 <MX_GPIO_Init+0x174>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a47      	ldr	r2, [pc, #284]	; (8003440 <MX_GPIO_Init+0x174>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <MX_GPIO_Init+0x174>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <MX_GPIO_Init+0x174>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a40      	ldr	r2, [pc, #256]	; (8003440 <MX_GPIO_Init+0x174>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <MX_GPIO_Init+0x174>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003352:	2200      	movs	r2, #0
 8003354:	2131      	movs	r1, #49	; 0x31
 8003356:	483b      	ldr	r0, [pc, #236]	; (8003444 <MX_GPIO_Init+0x178>)
 8003358:	f018 ffa8 	bl	801c2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	2120      	movs	r1, #32
 8003360:	4839      	ldr	r0, [pc, #228]	; (8003448 <MX_GPIO_Init+0x17c>)
 8003362:	f018 ffa3 	bl	801c2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003366:	2200      	movs	r2, #0
 8003368:	2104      	movs	r1, #4
 800336a:	4838      	ldr	r0, [pc, #224]	; (800344c <MX_GPIO_Init+0x180>)
 800336c:	f018 ff9e 	bl	801c2ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003376:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800337a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	482f      	ldr	r0, [pc, #188]	; (8003444 <MX_GPIO_Init+0x178>)
 8003388:	f018 fd28 	bl	801bddc <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 800338c:	2331      	movs	r3, #49	; 0x31
 800338e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003390:	2301      	movs	r3, #1
 8003392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	4619      	mov	r1, r3
 80033a2:	4828      	ldr	r0, [pc, #160]	; (8003444 <MX_GPIO_Init+0x178>)
 80033a4:	f018 fd1a 	bl	801bddc <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 80033a8:	2302      	movs	r3, #2
 80033aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033ac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80033b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	4619      	mov	r1, r3
 80033bc:	4821      	ldr	r0, [pc, #132]	; (8003444 <MX_GPIO_Init+0x178>)
 80033be:	f018 fd0d 	bl	801bddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033c2:	2320      	movs	r3, #32
 80033c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	481b      	ldr	r0, [pc, #108]	; (8003448 <MX_GPIO_Init+0x17c>)
 80033da:	f018 fcff 	bl	801bddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80033de:	2304      	movs	r3, #4
 80033e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e2:	2301      	movs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	4619      	mov	r1, r3
 80033f4:	4815      	ldr	r0, [pc, #84]	; (800344c <MX_GPIO_Init+0x180>)
 80033f6:	f018 fcf1 	bl	801bddc <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 80033fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003400:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	4619      	mov	r1, r3
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <MX_GPIO_Init+0x178>)
 8003412:	f018 fce3 	bl	801bddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	2007      	movs	r0, #7
 800341c:	f018 f87d 	bl	801b51a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003420:	2007      	movs	r0, #7
 8003422:	f018 f896 	bl	801b552 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	2028      	movs	r0, #40	; 0x28
 800342c:	f018 f875 	bl	801b51a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003430:	2028      	movs	r0, #40	; 0x28
 8003432:	f018 f88e 	bl	801b552 <HAL_NVIC_EnableIRQ>

}
 8003436:	bf00      	nop
 8003438:	3728      	adds	r7, #40	; 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40020800 	.word	0x40020800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400

08003450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003454:	b672      	cpsid	i
}
 8003456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003458:	e7fe      	b.n	8003458 <Error_Handler+0x8>
	...

0800345c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_MspInit+0x4c>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <HAL_MspInit+0x4c>)
 800346c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003470:	6453      	str	r3, [r2, #68]	; 0x44
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_MspInit+0x4c>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_MspInit+0x4c>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <HAL_MspInit+0x4c>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_MspInit+0x4c>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800349a:	2007      	movs	r0, #7
 800349c:	f018 f832 	bl	801b504 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 031c 	add.w	r3, r7, #28
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a49      	ldr	r2, [pc, #292]	; (80035f0 <HAL_ADC_MspInit+0x144>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f040 808c 	bne.w	80035e8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6453      	str	r3, [r2, #68]	; 0x44
 80034e0:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	4a3f      	ldr	r2, [pc, #252]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6313      	str	r3, [r2, #48]	; 0x30
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4a38      	ldr	r2, [pc, #224]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6313      	str	r3, [r2, #48]	; 0x30
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	6313      	str	r3, [r2, #48]	; 0x30
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_ADC_MspInit+0x148>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 8003540:	2304      	movs	r3, #4
 8003542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003544:	2303      	movs	r3, #3
 8003546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	4829      	ldr	r0, [pc, #164]	; (80035f8 <HAL_ADC_MspInit+0x14c>)
 8003554:	f018 fc42 	bl	801bddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 8003558:	23c0      	movs	r3, #192	; 0xc0
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800355c:	2303      	movs	r3, #3
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	4824      	ldr	r0, [pc, #144]	; (80035fc <HAL_ADC_MspInit+0x150>)
 800356c:	f018 fc36 	bl	801bddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 8003570:	2302      	movs	r3, #2
 8003572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003574:	2303      	movs	r3, #3
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 800357c:	f107 031c 	add.w	r3, r7, #28
 8003580:	4619      	mov	r1, r3
 8003582:	481f      	ldr	r0, [pc, #124]	; (8003600 <HAL_ADC_MspInit+0x154>)
 8003584:	f018 fc2a 	bl	801bddc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_ADC_MspInit+0x158>)
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <HAL_ADC_MspInit+0x15c>)
 800358c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_ADC_MspInit+0x158>)
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_ADC_MspInit+0x158>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_ADC_MspInit+0x158>)
 800359c:	2200      	movs	r2, #0
 800359e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035cc:	480d      	ldr	r0, [pc, #52]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035ce:	f017 ffe9 	bl	801b5a4 <HAL_DMA_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80035d8:	f7ff ff3a 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_ADC_MspInit+0x158>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035e8:	bf00      	nop
 80035ea:	3730      	adds	r7, #48	; 0x30
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40012000 	.word	0x40012000
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	2000082c 	.word	0x2000082c
 8003608:	40026410 	.word	0x40026410

0800360c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4f      	ldr	r2, [pc, #316]	; (8003768 <HAL_I2C_MspInit+0x15c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	f040 8097 	bne.w	800375e <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	4b4d      	ldr	r3, [pc, #308]	; (800376c <HAL_I2C_MspInit+0x160>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	4a4c      	ldr	r2, [pc, #304]	; (800376c <HAL_I2C_MspInit+0x160>)
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
 8003640:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_I2C_MspInit+0x160>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800364c:	23c0      	movs	r3, #192	; 0xc0
 800364e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003650:	2312      	movs	r3, #18
 8003652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800365c:	2304      	movs	r3, #4
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4619      	mov	r1, r3
 8003666:	4842      	ldr	r0, [pc, #264]	; (8003770 <HAL_I2C_MspInit+0x164>)
 8003668:	f018 fbb8 	bl	801bddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_I2C_MspInit+0x160>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4a3d      	ldr	r2, [pc, #244]	; (800376c <HAL_I2C_MspInit+0x160>)
 8003676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800367a:	6413      	str	r3, [r2, #64]	; 0x40
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_I2C_MspInit+0x160>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003688:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <HAL_I2C_MspInit+0x168>)
 800368a:	4a3b      	ldr	r2, [pc, #236]	; (8003778 <HAL_I2C_MspInit+0x16c>)
 800368c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_I2C_MspInit+0x168>)
 8003690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003694:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_I2C_MspInit+0x168>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_I2C_MspInit+0x168>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036a2:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036aa:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80036b6:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80036c8:	482a      	ldr	r0, [pc, #168]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036ca:	f017 ff6b 	bl	801b5a4 <HAL_DMA_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80036d4:	f7ff febc 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
 80036de:	4a25      	ldr	r2, [pc, #148]	; (8003774 <HAL_I2C_MspInit+0x168>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_I2C_MspInit+0x170>)
 80036e6:	4a26      	ldr	r2, [pc, #152]	; (8003780 <HAL_I2C_MspInit+0x174>)
 80036e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_I2C_MspInit+0x170>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036f0:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_I2C_MspInit+0x170>)
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f6:	4b21      	ldr	r3, [pc, #132]	; (800377c <HAL_I2C_MspInit+0x170>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036fc:	4b1f      	ldr	r3, [pc, #124]	; (800377c <HAL_I2C_MspInit+0x170>)
 80036fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003702:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_I2C_MspInit+0x170>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_I2C_MspInit+0x170>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_I2C_MspInit+0x170>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_I2C_MspInit+0x170>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371c:	4b17      	ldr	r3, [pc, #92]	; (800377c <HAL_I2C_MspInit+0x170>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003722:	4816      	ldr	r0, [pc, #88]	; (800377c <HAL_I2C_MspInit+0x170>)
 8003724:	f017 ff3e 	bl	801b5a4 <HAL_DMA_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800372e:	f7ff fe8f 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a11      	ldr	r2, [pc, #68]	; (800377c <HAL_I2C_MspInit+0x170>)
 8003736:	635a      	str	r2, [r3, #52]	; 0x34
 8003738:	4a10      	ldr	r2, [pc, #64]	; (800377c <HAL_I2C_MspInit+0x170>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	201f      	movs	r0, #31
 8003744:	f017 fee9 	bl	801b51a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003748:	201f      	movs	r0, #31
 800374a:	f017 ff02 	bl	801b552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2100      	movs	r1, #0
 8003752:	2020      	movs	r0, #32
 8003754:	f017 fee1 	bl	801b51a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003758:	2020      	movs	r0, #32
 800375a:	f017 fefa 	bl	801b552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40005400 	.word	0x40005400
 800376c:	40023800 	.word	0x40023800
 8003770:	40020400 	.word	0x40020400
 8003774:	200008e0 	.word	0x200008e0
 8003778:	40026010 	.word	0x40026010
 800377c:	20000940 	.word	0x20000940
 8003780:	40026028 	.word	0x40026028

08003784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_TIM_Base_MspInit+0x70>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_TIM_Base_MspInit+0x70>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_TIM_Base_MspInit+0x70>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037b2:	e01a      	b.n	80037ea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <HAL_TIM_Base_MspInit+0x74>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d115      	bne.n	80037ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_TIM_Base_MspInit+0x70>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <HAL_TIM_Base_MspInit+0x70>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_TIM_Base_MspInit+0x70>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	201d      	movs	r0, #29
 80037e0:	f017 fe9b 	bl	801b51a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037e4:	201d      	movs	r0, #29
 80037e6:	f017 feb4 	bl	801b552 <HAL_NVIC_EnableIRQ>
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40000400 	.word	0x40000400

080037fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <HAL_TIM_MspPostInit+0xa4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d13c      	bne.n	8003898 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_TIM_MspPostInit+0xa8>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_TIM_MspPostInit+0xa8>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_TIM_MspPostInit+0xa8>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_TIM_MspPostInit+0xa8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIM_MspPostInit+0xa8>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_TIM_MspPostInit+0xa8>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003856:	2301      	movs	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003866:	2302      	movs	r3, #2
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386a:	f107 0314 	add.w	r3, r7, #20
 800386e:	4619      	mov	r1, r3
 8003870:	480d      	ldr	r0, [pc, #52]	; (80038a8 <HAL_TIM_MspPostInit+0xac>)
 8003872:	f018 fab3 	bl	801bddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003876:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800387a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003888:	2302      	movs	r3, #2
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4619      	mov	r1, r3
 8003892:	4806      	ldr	r0, [pc, #24]	; (80038ac <HAL_TIM_MspPostInit+0xb0>)
 8003894:	f018 faa2 	bl	801bddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003898:	bf00      	nop
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020400 	.word	0x40020400
 80038ac:	40020800 	.word	0x40020800

080038b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_UART_MspInit+0x180>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d135      	bne.n	800393e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	4b57      	ldr	r3, [pc, #348]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a56      	ldr	r2, [pc, #344]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80038dc:	f043 0310 	orr.w	r3, r3, #16
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a4f      	ldr	r2, [pc, #316]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <HAL_UART_MspInit+0x184>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800390a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003918:	2303      	movs	r3, #3
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800391c:	2307      	movs	r3, #7
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003924:	4619      	mov	r1, r3
 8003926:	4844      	ldr	r0, [pc, #272]	; (8003a38 <HAL_UART_MspInit+0x188>)
 8003928:	f018 fa58 	bl	801bddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	2025      	movs	r0, #37	; 0x25
 8003932:	f017 fdf2 	bl	801b51a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003936:	2025      	movs	r0, #37	; 0x25
 8003938:	f017 fe0b 	bl	801b552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800393c:	e073      	b.n	8003a26 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3e      	ldr	r2, [pc, #248]	; (8003a3c <HAL_UART_MspInit+0x18c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d134      	bne.n	80039b2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <HAL_UART_MspInit+0x184>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <HAL_UART_MspInit+0x184>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003956:	6413      	str	r3, [r2, #64]	; 0x40
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_UART_MspInit+0x184>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_UART_MspInit+0x184>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	4a31      	ldr	r2, [pc, #196]	; (8003a34 <HAL_UART_MspInit+0x184>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6313      	str	r3, [r2, #48]	; 0x30
 8003974:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_UART_MspInit+0x184>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003980:	230c      	movs	r3, #12
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398c:	2303      	movs	r3, #3
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003990:	2307      	movs	r3, #7
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003998:	4619      	mov	r1, r3
 800399a:	4827      	ldr	r0, [pc, #156]	; (8003a38 <HAL_UART_MspInit+0x188>)
 800399c:	f018 fa1e 	bl	801bddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	2026      	movs	r0, #38	; 0x26
 80039a6:	f017 fdb8 	bl	801b51a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039aa:	2026      	movs	r0, #38	; 0x26
 80039ac:	f017 fdd1 	bl	801b552 <HAL_NVIC_EnableIRQ>
}
 80039b0:	e039      	b.n	8003a26 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <HAL_UART_MspInit+0x190>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d134      	bne.n	8003a26 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80039c6:	f043 0320 	orr.w	r3, r3, #32
 80039ca:	6453      	str	r3, [r2, #68]	; 0x44
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6313      	str	r3, [r2, #48]	; 0x30
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_UART_MspInit+0x184>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a02:	2303      	movs	r3, #3
 8003a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a06:	2308      	movs	r3, #8
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4809      	ldr	r0, [pc, #36]	; (8003a38 <HAL_UART_MspInit+0x188>)
 8003a12:	f018 f9e3 	bl	801bddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	2047      	movs	r0, #71	; 0x47
 8003a1c:	f017 fd7d 	bl	801b51a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a20:	2047      	movs	r0, #71	; 0x47
 8003a22:	f017 fd96 	bl	801b552 <HAL_NVIC_EnableIRQ>
}
 8003a26:	bf00      	nop
 8003a28:	3738      	adds	r7, #56	; 0x38
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40011000 	.word	0x40011000
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	40011400 	.word	0x40011400

08003a44 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_UART_MspDeInit+0x84>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10e      	bne.n	8003a74 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_UART_MspDeInit+0x88>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_UART_MspDeInit+0x88>)
 8003a5c:	f023 0310 	bic.w	r3, r3, #16
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003a62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a66:	481a      	ldr	r0, [pc, #104]	; (8003ad0 <HAL_UART_MspDeInit+0x8c>)
 8003a68:	f018 fb3c 	bl	801c0e4 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003a6c:	2025      	movs	r0, #37	; 0x25
 8003a6e:	f017 fd7e 	bl	801b56e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003a72:	e025      	b.n	8003ac0 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_UART_MspDeInit+0x90>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10d      	bne.n	8003a9a <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_UART_MspDeInit+0x88>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <HAL_UART_MspDeInit+0x88>)
 8003a84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8003a8a:	210c      	movs	r1, #12
 8003a8c:	4810      	ldr	r0, [pc, #64]	; (8003ad0 <HAL_UART_MspDeInit+0x8c>)
 8003a8e:	f018 fb29 	bl	801c0e4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003a92:	2026      	movs	r0, #38	; 0x26
 8003a94:	f017 fd6b 	bl	801b56e <HAL_NVIC_DisableIRQ>
}
 8003a98:	e012      	b.n	8003ac0 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_UART_MspDeInit+0x94>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_UART_MspDeInit+0x88>)
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <HAL_UART_MspDeInit+0x88>)
 8003aaa:	f023 0320 	bic.w	r3, r3, #32
 8003aae:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003ab0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ab4:	4806      	ldr	r0, [pc, #24]	; (8003ad0 <HAL_UART_MspDeInit+0x8c>)
 8003ab6:	f018 fb15 	bl	801c0e4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003aba:	2047      	movs	r0, #71	; 0x47
 8003abc:	f017 fd57 	bl	801b56e <HAL_NVIC_DisableIRQ>
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40004400 	.word	0x40004400
 8003ad8:	40011400 	.word	0x40011400

08003adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <NMI_Handler+0x4>

08003ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae6:	e7fe      	b.n	8003ae6 <HardFault_Handler+0x4>

08003ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <MemManage_Handler+0x4>

08003aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003af2:	e7fe      	b.n	8003af2 <BusFault_Handler+0x4>

08003af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af8:	e7fe      	b.n	8003af8 <UsageFault_Handler+0x4>

08003afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003b28:	f00d fc22 	bl	8011370 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003b2c:	4803      	ldr	r0, [pc, #12]	; (8003b3c <SysTick_Handler+0x18>)
 8003b2e:	f011 f9e6 	bl	8014efe <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b32:	f016 ffd1 	bl	801aad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20001b5c 	.word	0x20001b5c

08003b40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003b44:	2002      	movs	r0, #2
 8003b46:	f018 fbcb 	bl	801c2e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA1_Stream0_IRQHandler+0x10>)
 8003b56:	f017 febd 	bl	801b8d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200008e0 	.word	0x200008e0

08003b64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <DMA1_Stream1_IRQHandler+0x10>)
 8003b6a:	f017 feb3 	bl	801b8d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000940 	.word	0x20000940

08003b78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <TIM3_IRQHandler+0x10>)
 8003b7e:	f01c f9f7 	bl	801ff70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200009e8 	.word	0x200009e8

08003b8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <I2C1_EV_IRQHandler+0x10>)
 8003b92:	f019 fa59 	bl	801d048 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2000088c 	.word	0x2000088c

08003ba0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <I2C1_ER_IRQHandler+0x10>)
 8003ba6:	f019 fbc0 	bl	801d32a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000088c 	.word	0x2000088c

08003bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <USART1_IRQHandler+0x10>)
 8003bba:	f01d f9f1 	bl	8020fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000a30 	.word	0x20000a30

08003bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <USART2_IRQHandler+0x10>)
 8003bce:	f01d f9e7 	bl	8020fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000a74 	.word	0x20000a74

08003bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003be0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003be4:	f018 fb7c 	bl	801c2e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003be8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003bec:	f018 fb78 	bl	801c2e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <DMA2_Stream0_IRQHandler+0x10>)
 8003bfa:	f017 fe6b 	bl	801b8d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000082c 	.word	0x2000082c

08003c08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <USART6_IRQHandler+0x10>)
 8003c0e:	f01d f9c7 	bl	8020fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000ab8 	.word	0x20000ab8

08003c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <_sbrk+0x5c>)
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <_sbrk+0x60>)
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <_sbrk+0x64>)
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <_sbrk+0x68>)
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d207      	bcs.n	8003c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c4c:	f01e f90e 	bl	8021e6c <__errno>
 8003c50:	4603      	mov	r3, r0
 8003c52:	220c      	movs	r2, #12
 8003c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	e009      	b.n	8003c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <_sbrk+0x64>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <_sbrk+0x64>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <_sbrk+0x64>)
 8003c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20020000 	.word	0x20020000
 8003c7c:	00000400 	.word	0x00000400
 8003c80:	20000b20 	.word	0x20000b20
 8003c84:	20002290 	.word	0x20002290

08003c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <SystemInit+0x20>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <SystemInit+0x20>)
 8003c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	da01      	bge.n	8003cc4 <constrain+0x18>
        return low;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	e006      	b.n	8003cd2 <constrain+0x26>
    else if (amt > high)
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	dd01      	ble.n	8003cd0 <constrain+0x24>
        return high;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	e000      	b.n	8003cd2 <constrain+0x26>
    else
        return amt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08e      	sub	sp, #56	; 0x38
 8003ce4:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003ce6:	4b8a      	ldr	r3, [pc, #552]	; (8003f10 <initBoardAlignment+0x230>)
 8003ce8:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <initBoardAlignment+0x26>
 8003cf0:	4b87      	ldr	r3, [pc, #540]	; (8003f10 <initBoardAlignment+0x230>)
 8003cf2:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <initBoardAlignment+0x26>
 8003cfa:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <initBoardAlignment+0x230>)
 8003cfc:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80fd 	beq.w	8003f00 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003d06:	4b83      	ldr	r3, [pc, #524]	; (8003f14 <initBoardAlignment+0x234>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003d0c:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <initBoardAlignment+0x230>)
 8003d0e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fbc4 	bl	80004a0 <__aeabi_i2d>
 8003d18:	a37b      	add	r3, pc, #492	; (adr r3, 8003f08 <initBoardAlignment+0x228>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fc29 	bl	8000574 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	4b7a      	ldr	r3, [pc, #488]	; (8003f18 <initBoardAlignment+0x238>)
 8003d30:	f7fc fd4a 	bl	80007c8 <__aeabi_ddiv>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7fc fefc 	bl	8000b38 <__aeabi_d2f>
 8003d40:	4603      	mov	r3, r0
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003d44:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <initBoardAlignment+0x230>)
 8003d46:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fba8 	bl	80004a0 <__aeabi_i2d>
 8003d50:	a36d      	add	r3, pc, #436	; (adr r3, 8003f08 <initBoardAlignment+0x228>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fc0d 	bl	8000574 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <initBoardAlignment+0x238>)
 8003d68:	f7fc fd2e 	bl	80007c8 <__aeabi_ddiv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fc fee0 	bl	8000b38 <__aeabi_d2f>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003d7c:	4b64      	ldr	r3, [pc, #400]	; (8003f10 <initBoardAlignment+0x230>)
 8003d7e:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fb8c 	bl	80004a0 <__aeabi_i2d>
 8003d88:	a35f      	add	r3, pc, #380	; (adr r3, 8003f08 <initBoardAlignment+0x228>)
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f7fc fbf1 	bl	8000574 <__aeabi_dmul>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <initBoardAlignment+0x238>)
 8003da0:	f7fc fd12 	bl	80007c8 <__aeabi_ddiv>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7fc fec4 	bl	8000b38 <__aeabi_d2f>
 8003db0:	4603      	mov	r3, r0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003db4:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003db8:	f01e fb7e 	bl	80224b8 <cosf>
 8003dbc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003dc0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003dc4:	f01e fbfc 	bl	80225c0 <sinf>
 8003dc8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003dcc:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003dd0:	f01e fb72 	bl	80224b8 <cosf>
 8003dd4:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003dd8:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003ddc:	f01e fbf0 	bl	80225c0 <sinf>
 8003de0:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003de4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003de8:	f01e fb66 	bl	80224b8 <cosf>
 8003dec:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003df0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003df4:	f01e fbe4 	bl	80225c0 <sinf>
 8003df8:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003dfc:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e08:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003e0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e10:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e18:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003e1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e28:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003e2c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e38:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003e3c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e48:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003e4c:	4a33      	ldr	r2, [pc, #204]	; (8003f1c <initBoardAlignment+0x23c>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003e52:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e56:	eeb1 7a67 	vneg.f32	s14, s15
 8003e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <initBoardAlignment+0x23c>)
 8003e64:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003e68:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <initBoardAlignment+0x23c>)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003e6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <initBoardAlignment+0x23c>)
 8003e84:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003e88:	ed97 7a00 	vldr	s14, [r7]
 8003e8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e94:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <initBoardAlignment+0x23c>)
 8003e9e:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003ea2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ea6:	eeb1 7a67 	vneg.f32	s14, s15
 8003eaa:	edd7 7a08 	vldr	s15, [r7, #32]
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <initBoardAlignment+0x23c>)
 8003eb4:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003eb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ebc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec4:	ed97 7a00 	vldr	s14, [r7]
 8003ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <initBoardAlignment+0x23c>)
 8003ece:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003ed2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ed6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <initBoardAlignment+0x23c>)
 8003ee8:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ef0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <initBoardAlignment+0x23c>)
 8003efa:	edc3 7a08 	vstr	s15, [r3, #32]
 8003efe:	e000      	b.n	8003f02 <initBoardAlignment+0x222>
        return;
 8003f00:	bf00      	nop
}
 8003f02:	3738      	adds	r7, #56	; 0x38
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	54442d18 	.word	0x54442d18
 8003f0c:	400921fb 	.word	0x400921fb
 8003f10:	20000bb4 	.word	0x20000bb4
 8003f14:	20000024 	.word	0x20000024
 8003f18:	40668000 	.word	0x40668000
 8003f1c:	20000b24 	.word	0x20000b24

08003f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f24:	480d      	ldr	r0, [pc, #52]	; (8003f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f26:	490e      	ldr	r1, [pc, #56]	; (8003f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f28:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f2c:	e002      	b.n	8003f34 <LoopCopyDataInit>

08003f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f32:	3304      	adds	r3, #4

08003f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f38:	d3f9      	bcc.n	8003f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f3c:	4c0b      	ldr	r4, [pc, #44]	; (8003f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f40:	e001      	b.n	8003f46 <LoopFillZerobss>

08003f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f44:	3204      	adds	r2, #4

08003f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f48:	d3fb      	bcc.n	8003f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f4a:	f7ff fe9d 	bl	8003c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f4e:	f01d ff93 	bl	8021e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f52:	f7fe fbe1 	bl	8002718 <main>
  bx  lr    
 8003f56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f60:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8003f64:	08028a68 	.word	0x08028a68
  ldr r2, =_sbss
 8003f68:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003f6c:	2000228c 	.word	0x2000228c

08003f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f70:	e7fe      	b.n	8003f70 <ADC_IRQHandler>
	...

08003f74 <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <_evtBuzzerFinish+0x1c>)
 8003f80:	220d      	movs	r2, #13
 8003f82:	701a      	strb	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000025 	.word	0x20000025

08003f94 <buzzerInit>:

bool buzzerInit()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003f98:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <buzzerInit+0x28>)
 8003f9a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003f9e:	4808      	ldr	r0, [pc, #32]	; (8003fc0 <buzzerInit+0x2c>)
 8003fa0:	f015 fe0c 	bl	8019bbc <pifBuzzer_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <buzzerInit+0x1a>
 8003faa:	2300      	movs	r3, #0
 8003fac:	e003      	b.n	8003fb6 <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <buzzerInit+0x2c>)
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <buzzerInit+0x30>)
 8003fb2:	601a      	str	r2, [r3, #0]
    return true;
 8003fb4:	2301      	movs	r3, #1
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	080020cd 	.word	0x080020cd
 8003fc0:	20000b60 	.word	0x20000b60
 8003fc4:	08003f75 	.word	0x08003f75

08003fc8 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <buzzer+0x198>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	79fa      	ldrb	r2, [r7, #7]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f080 80b7 	bcs.w	8004150 <buzzer+0x188>
        return;

    switch (mode) {
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	f200 80b5 	bhi.w	8004154 <buzzer+0x18c>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <buzzer+0x28>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	080040a3 	.word	0x080040a3
 8003ff8:	08004093 	.word	0x08004093
 8003ffc:	08004083 	.word	0x08004083
 8004000:	080040b3 	.word	0x080040b3
 8004004:	08004053 	.word	0x08004053
 8004008:	08004053 	.word	0x08004053
 800400c:	080040c3 	.word	0x080040c3
 8004010:	080040d3 	.word	0x080040d3
 8004014:	080040b3 	.word	0x080040b3
 8004018:	08004063 	.word	0x08004063
 800401c:	08004073 	.word	0x08004073
 8004020:	08004033 	.word	0x08004033
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8004024:	4b4e      	ldr	r3, [pc, #312]	; (8004160 <buzzer+0x198>)
 8004026:	220d      	movs	r2, #13
 8004028:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 800402a:	484e      	ldr	r0, [pc, #312]	; (8004164 <buzzer+0x19c>)
 800402c:	f015 fe2c 	bl	8019c88 <pifBuzzer_Stop>
            break;
 8004030:	e093      	b.n	800415a <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8004032:	4b4d      	ldr	r3, [pc, #308]	; (8004168 <buzzer+0x1a0>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 808e 	bne.w	8004158 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 800403c:	494b      	ldr	r1, [pc, #300]	; (800416c <buzzer+0x1a4>)
 800403e:	4849      	ldr	r0, [pc, #292]	; (8004164 <buzzer+0x19c>)
 8004040:	f015 fe00 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 8004044:	4a46      	ldr	r2, [pc, #280]	; (8004160 <buzzer+0x198>)
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <buzzer+0x1a0>)
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
            break;
 8004050:	e083      	b.n	800415a <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8004052:	4947      	ldr	r1, [pc, #284]	; (8004170 <buzzer+0x1a8>)
 8004054:	4843      	ldr	r0, [pc, #268]	; (8004164 <buzzer+0x19c>)
 8004056:	f015 fdf5 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 800405a:	4a41      	ldr	r2, [pc, #260]	; (8004160 <buzzer+0x198>)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	7013      	strb	r3, [r2, #0]
            break;
 8004060:	e07b      	b.n	800415a <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8004062:	4944      	ldr	r1, [pc, #272]	; (8004174 <buzzer+0x1ac>)
 8004064:	483f      	ldr	r0, [pc, #252]	; (8004164 <buzzer+0x19c>)
 8004066:	f015 fded 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 800406a:	4a3d      	ldr	r2, [pc, #244]	; (8004160 <buzzer+0x198>)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	7013      	strb	r3, [r2, #0]
            break;
 8004070:	e073      	b.n	800415a <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 8004072:	4941      	ldr	r1, [pc, #260]	; (8004178 <buzzer+0x1b0>)
 8004074:	483b      	ldr	r0, [pc, #236]	; (8004164 <buzzer+0x19c>)
 8004076:	f015 fde5 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 800407a:	4a39      	ldr	r2, [pc, #228]	; (8004160 <buzzer+0x198>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	7013      	strb	r3, [r2, #0]
            break;
 8004080:	e06b      	b.n	800415a <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 8004082:	493e      	ldr	r1, [pc, #248]	; (800417c <buzzer+0x1b4>)
 8004084:	4837      	ldr	r0, [pc, #220]	; (8004164 <buzzer+0x19c>)
 8004086:	f015 fddd 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 800408a:	4a35      	ldr	r2, [pc, #212]	; (8004160 <buzzer+0x198>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	7013      	strb	r3, [r2, #0]
            break;
 8004090:	e063      	b.n	800415a <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 8004092:	493b      	ldr	r1, [pc, #236]	; (8004180 <buzzer+0x1b8>)
 8004094:	4833      	ldr	r0, [pc, #204]	; (8004164 <buzzer+0x19c>)
 8004096:	f015 fdd5 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 800409a:	4a31      	ldr	r2, [pc, #196]	; (8004160 <buzzer+0x198>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	7013      	strb	r3, [r2, #0]
            break;
 80040a0:	e05b      	b.n	800415a <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 80040a2:	4938      	ldr	r1, [pc, #224]	; (8004184 <buzzer+0x1bc>)
 80040a4:	482f      	ldr	r0, [pc, #188]	; (8004164 <buzzer+0x19c>)
 80040a6:	f015 fdcd 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 80040aa:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <buzzer+0x198>)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	7013      	strb	r3, [r2, #0]
            break;
 80040b0:	e053      	b.n	800415a <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 80040b2:	4935      	ldr	r1, [pc, #212]	; (8004188 <buzzer+0x1c0>)
 80040b4:	482b      	ldr	r0, [pc, #172]	; (8004164 <buzzer+0x19c>)
 80040b6:	f015 fdc5 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 80040ba:	4a29      	ldr	r2, [pc, #164]	; (8004160 <buzzer+0x198>)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	7013      	strb	r3, [r2, #0]
            break;
 80040c0:	e04b      	b.n	800415a <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 80040c2:	4932      	ldr	r1, [pc, #200]	; (800418c <buzzer+0x1c4>)
 80040c4:	4827      	ldr	r0, [pc, #156]	; (8004164 <buzzer+0x19c>)
 80040c6:	f015 fdbd 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 80040ca:	4a25      	ldr	r2, [pc, #148]	; (8004160 <buzzer+0x198>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	7013      	strb	r3, [r2, #0]
            break;
 80040d0:	e043      	b.n	800415a <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 80040d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80040d6:	f002 ff67 	bl	8006fa8 <feature>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02f      	beq.n	8004140 <buzzer+0x178>
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <buzzer+0x1c8>)
 80040e2:	7adb      	ldrb	r3, [r3, #11]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02b      	beq.n	8004140 <buzzer+0x178>
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <buzzer+0x1cc>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d927      	bls.n	8004140 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4a29      	ldr	r2, [pc, #164]	; (8004198 <buzzer+0x1d0>)
 80040f4:	2105      	movs	r1, #5
 80040f6:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <buzzer+0x1d0>)
 80040fe:	210f      	movs	r1, #15
 8004100:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	3302      	adds	r3, #2
 8004106:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b13      	cmp	r3, #19
 800410c:	d806      	bhi.n	800411c <buzzer+0x154>
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <buzzer+0x1cc>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d3e9      	bcc.n	80040f0 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	3301      	adds	r3, #1
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <buzzer+0x1d0>)
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3302      	adds	r3, #2
 800412a:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <buzzer+0x1d0>)
 800412c:	21f0      	movs	r1, #240	; 0xf0
 800412e:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004130:	4919      	ldr	r1, [pc, #100]	; (8004198 <buzzer+0x1d0>)
 8004132:	480c      	ldr	r0, [pc, #48]	; (8004164 <buzzer+0x19c>)
 8004134:	f015 fd86 	bl	8019c44 <pifBuzzer_Start>
                buzzerMode = mode;
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <buzzer+0x198>)
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	7013      	strb	r3, [r2, #0]
                break;
 800413e:	e00c      	b.n	800415a <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8004140:	4916      	ldr	r1, [pc, #88]	; (800419c <buzzer+0x1d4>)
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <buzzer+0x19c>)
 8004144:	f015 fd7e 	bl	8019c44 <pifBuzzer_Start>
            buzzerMode = mode;
 8004148:	4a05      	ldr	r2, [pc, #20]	; (8004160 <buzzer+0x198>)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	7013      	strb	r3, [r2, #0]
            break;
 800414e:	e004      	b.n	800415a <buzzer+0x192>
        return;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <buzzer+0x192>

        default:
            return;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <buzzer+0x192>
                return;
 8004158:	bf00      	nop
    }
}
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000025 	.word	0x20000025
 8004164:	20000b60 	.word	0x20000b60
 8004168:	20000b5e 	.word	0x20000b5e
 800416c:	08026cbc 	.word	0x08026cbc
 8004170:	08026c90 	.word	0x08026c90
 8004174:	08026ccc 	.word	0x08026ccc
 8004178:	08026cd4 	.word	0x08026cd4
 800417c:	08026c9c 	.word	0x08026c9c
 8004180:	08026c98 	.word	0x08026c98
 8004184:	08026c8c 	.word	0x08026c8c
 8004188:	08026c94 	.word	0x08026c94
 800418c:	08026cb0 	.word	0x08026cb0
 8004190:	20001980 	.word	0x20001980
 8004194:	20001a68 	.word	0x20001a68
 8004198:	20000b48 	.word	0x20000b48
 800419c:	08026c88 	.word	0x08026c88

080041a0 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <buzzerUpdate+0x20>)
 80041a6:	7b5b      	ldrb	r3, [r3, #13]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d006      	beq.n	80041ba <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <buzzerUpdate+0x24>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d902      	bls.n	80041ba <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 80041b4:	2008      	movs	r0, #8
 80041b6:	f7ff ff07 	bl	8003fc8 <buzzer>
    }
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20001a24 	.word	0x20001a24
 80041c4:	20000025 	.word	0x20000025

080041c8 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d309      	bcc.n	80041f0 <i2a+0x28>
        a = i2a(i / r, a, r);
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff ffed 	bl	80041c8 <i2a>
 80041ee:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	fb01 f202 	mul.w	r2, r1, r2
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <i2a+0x4c>)
 8004202:	5cd2      	ldrb	r2, [r2, r3]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3301      	adds	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	08025a24 	.word	0x08025a24

08004218 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	dd02      	ble.n	8004230 <itoa+0x18>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b24      	cmp	r3, #36	; 0x24
 800422e:	dd01      	ble.n	8004234 <itoa+0x1c>
        r = 10;
 8004230:	230a      	movs	r3, #10
 8004232:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	da0e      	bge.n	8004258 <itoa+0x40>
        *a = '-';
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	222d      	movs	r2, #45	; 0x2d
 800423e:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4258      	negs	r0, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3301      	adds	r3, #1
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4619      	mov	r1, r3
 800424c:	f7ff ffbc 	bl	80041c8 <i2a>
 8004250:	4603      	mov	r3, r0
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e008      	b.n	800426a <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ffb2 	bl	80041c8 <i2a>
 8004264:	4603      	mov	r3, r0
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    return a;
 800426a:	68bb      	ldr	r3, [r7, #8]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    int frac = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 8004280:	e002      	b.n	8004288 <_atof+0x14>
        p += 1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3301      	adds	r3, #1
 8004286:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b20      	cmp	r3, #32
 800428e:	d0f8      	beq.n	8004282 <_atof+0xe>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b09      	cmp	r3, #9
 8004296:	d0f4      	beq.n	8004282 <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 8004298:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800429c:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b2d      	cmp	r3, #45	; 0x2d
 80042a4:	d105      	bne.n	80042b2 <_atof+0x3e>
        sign = -1.0f;
 80042a6:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <_atof+0x1dc>)
 80042a8:	61bb      	str	r3, [r7, #24]
        p += 1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3301      	adds	r3, #1
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e006      	b.n	80042c0 <_atof+0x4c>

    } else if (*p == '+') {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b2b      	cmp	r3, #43	; 0x2b
 80042b8:	d102      	bne.n	80042c0 <_atof+0x4c>
        p += 1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3301      	adds	r3, #1
 80042be:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 80042c6:	e013      	b.n	80042f0 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 80042c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80042cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	3b30      	subs	r3, #48	; 0x30
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e6:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3301      	adds	r3, #1
 80042ee:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b2f      	cmp	r3, #47	; 0x2f
 80042f6:	d903      	bls.n	8004300 <_atof+0x8c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b39      	cmp	r3, #57	; 0x39
 80042fe:	d9e3      	bls.n	80042c8 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b2e      	cmp	r3, #46	; 0x2e
 8004306:	d129      	bne.n	800435c <_atof+0xe8>
        float pow10 = 10.0f;
 8004308:	4b52      	ldr	r3, [pc, #328]	; (8004454 <_atof+0x1e0>)
 800430a:	60fb      	str	r3, [r7, #12]
        p += 1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 8004312:	e01b      	b.n	800434c <_atof+0xd8>
            value += (*p - '0') / pow10;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	3b30      	subs	r3, #48	; 0x30
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004322:	ed97 7a03 	vldr	s14, [r7, #12]
 8004326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432a:	ed97 7a05 	vldr	s14, [r7, #20]
 800432e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004332:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 8004336:	edd7 7a03 	vldr	s15, [r7, #12]
 800433a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800433e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004342:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3301      	adds	r3, #1
 800434a:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b2f      	cmp	r3, #47	; 0x2f
 8004352:	d903      	bls.n	800435c <_atof+0xe8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b39      	cmp	r3, #57	; 0x39
 800435a:	d9db      	bls.n	8004314 <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 800435c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004360:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b65      	cmp	r3, #101	; 0x65
 8004368:	d003      	beq.n	8004372 <_atof+0xfe>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b45      	cmp	r3, #69	; 0x45
 8004370:	d153      	bne.n	800441a <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3301      	adds	r3, #1
 8004376:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b2d      	cmp	r3, #45	; 0x2d
 8004382:	d105      	bne.n	8004390 <_atof+0x11c>
            frac = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
            p += 1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3301      	adds	r3, #1
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	e006      	b.n	800439e <_atof+0x12a>

        } else if (*p == '+') {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b2b      	cmp	r3, #43	; 0x2b
 8004396:	d102      	bne.n	800439e <_atof+0x12a>
            p += 1;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 80043a2:	e00d      	b.n	80043c0 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	3b30      	subs	r3, #48	; 0x30
 80043b8:	60bb      	str	r3, [r7, #8]
            p += 1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3301      	adds	r3, #1
 80043be:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b2f      	cmp	r3, #47	; 0x2f
 80043c6:	d903      	bls.n	80043d0 <_atof+0x15c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b39      	cmp	r3, #57	; 0x39
 80043ce:	d9e9      	bls.n	80043a4 <_atof+0x130>
        }
        if (expon > 308)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80043d6:	d90e      	bls.n	80043f6 <_atof+0x182>
            expon = 308;
 80043d8:	f44f 739a 	mov.w	r3, #308	; 0x134
 80043dc:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 80043de:	e00a      	b.n	80043f6 <_atof+0x182>
            scale *= 1E8f;
 80043e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80043e4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004458 <_atof+0x1e4>
 80043e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ec:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3b08      	subs	r3, #8
 80043f4:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	d8f1      	bhi.n	80043e0 <_atof+0x16c>
        }
        while (expon >   0) {
 80043fc:	e00a      	b.n	8004414 <_atof+0x1a0>
            scale *= 10.0f;
 80043fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004402:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440a:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3b01      	subs	r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f1      	bne.n	80043fe <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <_atof+0x1ba>
 8004420:	edd7 6a05 	vldr	s13, [r7, #20]
 8004424:	ed97 7a04 	vldr	s14, [r7, #16]
 8004428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442c:	e005      	b.n	800443a <_atof+0x1c6>
 800442e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004432:	edd7 7a04 	vldr	s15, [r7, #16]
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	ed97 7a06 	vldr	s14, [r7, #24]
 800443e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004442:	eeb0 0a67 	vmov.f32	s0, s15
 8004446:	3724      	adds	r7, #36	; 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	bf800000 	.word	0xbf800000
 8004454:	41200000 	.word	0x41200000
 8004458:	4cbebc20 	.word	0x4cbebc20

0800445c <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	ed87 0a01 	vstr	s0, [r7, #4]
 8004466:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 8004476:	4b54      	ldr	r3, [pc, #336]	; (80045c8 <ftoa+0x16c>)
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 800447a:	edd7 7a01 	vldr	s15, [r7, #4]
 800447e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004486:	dd08      	ble.n	800449a <ftoa+0x3e>
        x += 0.0005f;
 8004488:	edd7 7a01 	vldr	s15, [r7, #4]
 800448c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80045cc <ftoa+0x170>
 8004490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004494:	edc7 7a01 	vstr	s15, [r7, #4]
 8004498:	e007      	b.n	80044aa <ftoa+0x4e>
    else
        x -= 0.0005f;
 800449a:	edd7 7a01 	vldr	s15, [r7, #4]
 800449e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80045cc <ftoa+0x170>
 80044a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a6:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 80044aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80044ae:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80045d0 <ftoa+0x174>
 80044b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ba:	ee17 3a90 	vmov	r3, s15
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	425b      	neglt	r3, r3
 80044c8:	f107 0118 	add.w	r1, r7, #24
 80044cc:	220a      	movs	r2, #10
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fea2 	bl	8004218 <itoa>

    if (value >= 0)
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db02      	blt.n	80044e0 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 80044da:	2320      	movs	r3, #32
 80044dc:	733b      	strb	r3, [r7, #12]
 80044de:	e001      	b.n	80044e4 <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 80044e0:	232d      	movs	r3, #45	; 0x2d
 80044e2:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 80044e4:	f107 0318 	add.w	r3, r7, #24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fb fe7f 	bl	80001ec <strlen>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10e      	bne.n	8004512 <ftoa+0xb6>
        intString2[1] = '0';
 80044f4:	2330      	movs	r3, #48	; 0x30
 80044f6:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 80044f8:	2330      	movs	r3, #48	; 0x30
 80044fa:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 80044fc:	2330      	movs	r3, #48	; 0x30
 80044fe:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004500:	f107 0218 	add.w	r2, r7, #24
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f01d fe1e 	bl	802214c <strcat>
 8004510:	e02f      	b.n	8004572 <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 8004512:	f107 0318 	add.w	r3, r7, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f7fb fe68 	bl	80001ec <strlen>
 800451c:	4603      	mov	r3, r0
 800451e:	2b02      	cmp	r3, #2
 8004520:	d10c      	bne.n	800453c <ftoa+0xe0>
        intString2[1] = '0';
 8004522:	2330      	movs	r3, #48	; 0x30
 8004524:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 800452a:	f107 0218 	add.w	r2, r7, #24
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f01d fe09 	bl	802214c <strcat>
 800453a:	e01a      	b.n	8004572 <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 800453c:	f107 0318 	add.w	r3, r7, #24
 8004540:	4618      	mov	r0, r3
 8004542:	f7fb fe53 	bl	80001ec <strlen>
 8004546:	4603      	mov	r3, r0
 8004548:	2b03      	cmp	r3, #3
 800454a:	d10a      	bne.n	8004562 <ftoa+0x106>
        intString2[1] = '0';
 800454c:	2330      	movs	r3, #48	; 0x30
 800454e:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 8004550:	f107 0218 	add.w	r2, r7, #24
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f01d fdf6 	bl	802214c <strcat>
 8004560:	e007      	b.n	8004572 <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 8004562:	f107 0218 	add.w	r2, r7, #24
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f01d fded 	bl	802214c <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	4618      	mov	r0, r3
 8004578:	f7fb fe38 	bl	80001ec <strlen>
 800457c:	4603      	mov	r3, r0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3b03      	subs	r3, #3
 8004582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 8004586:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800458a:	f107 030c 	add.w	r3, r7, #12
 800458e:	4619      	mov	r1, r3
 8004590:	6838      	ldr	r0, [r7, #0]
 8004592:	f01d fe21 	bl	80221d8 <strncpy>
    floatString[dpLocation] = '\0';
 8004596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4413      	add	r3, r2
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 80045a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045a4:	6838      	ldr	r0, [r7, #0]
 80045a6:	f01d fdd1 	bl	802214c <strcat>
    strcat(floatString, intString2 + dpLocation);
 80045aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ae:	f107 020c 	add.w	r2, r7, #12
 80045b2:	4413      	add	r3, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f01d fdc8 	bl	802214c <strcat>

    return floatString;
 80045bc:	683b      	ldr	r3, [r7, #0]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3730      	adds	r7, #48	; 0x30
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	08025a4c 	.word	0x08025a4c
 80045cc:	3a03126f 	.word	0x3a03126f
 80045d0:	447a0000 	.word	0x447a0000

080045d4 <cliAux>:

static int cliAux(int argc, char *argv[])
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d114      	bne.n	8004612 <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e00d      	b.n	800460a <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <cliAux+0x94>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3312      	adds	r3, #18
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	491b      	ldr	r1, [pc, #108]	; (800466c <cliAux+0x98>)
 80045fe:	2000      	movs	r0, #0
 8004600:	f00e ffea 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b18      	cmp	r3, #24
 800460e:	ddee      	ble.n	80045ee <cliAux+0x1a>
 8004610:	e024      	b.n	800465c <cliAux+0x88>
    } else if (argc > 2) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	dd1e      	ble.n	8004656 <cliAux+0x82>
        i = atoi(argv[1]);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	3304      	adds	r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f01d fc18 	bl	8021e54 <atoi>
 8004624:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b18      	cmp	r3, #24
 800462a:	dc0e      	bgt.n	800464a <cliAux+0x76>
            val = atoi(argv[2]);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f01d fc0e 	bl	8021e54 <atoi>
 8004638:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	490a      	ldr	r1, [pc, #40]	; (8004668 <cliAux+0x94>)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3312      	adds	r3, #18
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	e008      	b.n	800465c <cliAux+0x88>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 800464a:	2219      	movs	r2, #25
 800464c:	4908      	ldr	r1, [pc, #32]	; (8004670 <cliAux+0x9c>)
 800464e:	2000      	movs	r0, #0
 8004650:	f00e ffc2 	bl	80135d8 <pifLog_Printf>
 8004654:	e002      	b.n	800465c <cliAux+0x88>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004656:	f06f 0302 	mvn.w	r3, #2
 800465a:	e000      	b.n	800465e <cliAux+0x8a>
    }
	return PIF_LOG_CMD_NO_ERROR;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20001120 	.word	0x20001120
 800466c:	08025a50 	.word	0x08025a50
 8004670:	08025a5c 	.word	0x08025a5c

08004674 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	; 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 1) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 80d8 	bne.w	800483e <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 800468e:	499a      	ldr	r1, [pc, #616]	; (80048f8 <cliCMix+0x284>)
 8004690:	2000      	movs	r0, #0
 8004692:	f00e ff13 	bl	80134bc <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	e069      	b.n	8004770 <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 800469c:	4a97      	ldr	r2, [pc, #604]	; (80048fc <cliCMix+0x288>)
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	3301      	adds	r3, #1
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4413      	add	r3, r2
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d061      	beq.n	8004778 <cliCMix+0x104>
                break;
            num_motors++;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	3301      	adds	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	3301      	adds	r3, #1
 80046be:	461a      	mov	r2, r3
 80046c0:	498f      	ldr	r1, [pc, #572]	; (8004900 <cliCMix+0x28c>)
 80046c2:	2000      	movs	r0, #0
 80046c4:	f00e ff88 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 80046c8:	4a8c      	ldr	r2, [pc, #560]	; (80048fc <cliCMix+0x288>)
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	3301      	adds	r3, #1
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	4618      	mov	r0, r3
 80046dc:	eeb0 0a67 	vmov.f32	s0, s15
 80046e0:	f7ff febc 	bl	800445c <ftoa>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4986      	ldr	r1, [pc, #536]	; (8004904 <cliCMix+0x290>)
 80046ea:	2000      	movs	r0, #0
 80046ec:	f00e ff74 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 80046f0:	4a82      	ldr	r2, [pc, #520]	; (80048fc <cliCMix+0x288>)
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	3301      	adds	r3, #1
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	4413      	add	r3, r2
 80046fa:	3304      	adds	r3, #4
 80046fc:	edd3 7a00 	vldr	s15, [r3]
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4618      	mov	r0, r3
 8004706:	eeb0 0a67 	vmov.f32	s0, s15
 800470a:	f7ff fea7 	bl	800445c <ftoa>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	497c      	ldr	r1, [pc, #496]	; (8004904 <cliCMix+0x290>)
 8004714:	2000      	movs	r0, #0
 8004716:	f00e ff5f 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 800471a:	4a78      	ldr	r2, [pc, #480]	; (80048fc <cliCMix+0x288>)
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	4413      	add	r3, r2
 8004722:	3318      	adds	r3, #24
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	4618      	mov	r0, r3
 800472e:	eeb0 0a67 	vmov.f32	s0, s15
 8004732:	f7ff fe93 	bl	800445c <ftoa>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	4972      	ldr	r1, [pc, #456]	; (8004904 <cliCMix+0x290>)
 800473c:	2000      	movs	r0, #0
 800473e:	f00e ff4b 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 8004742:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <cliCMix+0x288>)
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	331c      	adds	r3, #28
 800474c:	edd3 7a00 	vldr	s15, [r3]
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4618      	mov	r0, r3
 8004756:	eeb0 0a67 	vmov.f32	s0, s15
 800475a:	f7ff fe7f 	bl	800445c <ftoa>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4969      	ldr	r1, [pc, #420]	; (8004908 <cliCMix+0x294>)
 8004764:	2000      	movs	r0, #0
 8004766:	f00e ff37 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	3301      	adds	r3, #1
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	2b0b      	cmp	r3, #11
 8004774:	dd92      	ble.n	800469c <cliCMix+0x28>
 8004776:	e000      	b.n	800477a <cliCMix+0x106>
                break;
 8004778:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478c:	e02a      	b.n	80047e4 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 800478e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004792:	4a5a      	ldr	r2, [pc, #360]	; (80048fc <cliCMix+0x288>)
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	3301      	adds	r3, #1
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	4413      	add	r3, r2
 800479c:	3304      	adds	r3, #4
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a6:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 80047aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80047ae:	4a53      	ldr	r2, [pc, #332]	; (80048fc <cliCMix+0x288>)
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	4413      	add	r3, r2
 80047b6:	3318      	adds	r3, #24
 80047b8:	edd3 7a00 	vldr	s15, [r3]
 80047bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c0:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 80047c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <cliCMix+0x288>)
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	331c      	adds	r3, #28
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047da:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	3301      	adds	r3, #1
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	dbd0      	blt.n	800478e <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 80047ec:	4947      	ldr	r1, [pc, #284]	; (800490c <cliCMix+0x298>)
 80047ee:	2000      	movs	r0, #0
 80047f0:	f00e fe64 	bl	80134bc <pifLog_Print>
        for (i = 0; i < 3; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f8:	e019      	b.n	800482e <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	3330      	adds	r3, #48	; 0x30
 8004800:	443b      	add	r3, r7
 8004802:	3b28      	subs	r3, #40	; 0x28
 8004804:	edd3 7a00 	vldr	s15, [r3]
 8004808:	eef0 7ae7 	vabs.f32	s15, s15
 800480c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004910 <cliCMix+0x29c>
 8004810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	dd01      	ble.n	800481e <cliCMix+0x1aa>
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <cliCMix+0x2a0>)
 800481c:	e000      	b.n	8004820 <cliCMix+0x1ac>
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <cliCMix+0x2a4>)
 8004820:	4619      	mov	r1, r3
 8004822:	2000      	movs	r0, #0
 8004824:	f00e fe4a 	bl	80134bc <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	3301      	adds	r3, #1
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	2b02      	cmp	r3, #2
 8004832:	dde2      	ble.n	80047fa <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004834:	4939      	ldr	r1, [pc, #228]	; (800491c <cliCMix+0x2a8>)
 8004836:	2000      	movs	r0, #0
 8004838:	f00e fe40 	bl	80134bc <pifLog_Print>
 800483c:	e0ee      	b.n	8004a1c <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	3304      	adds	r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4936      	ldr	r1, [pc, #216]	; (8004920 <cliCMix+0x2ac>)
 8004846:	4618      	mov	r0, r3
 8004848:	f01d fc66 	bl	8022118 <strcasecmp>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d111      	bne.n	8004876 <cliCMix+0x202>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 8004852:	2300      	movs	r3, #0
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004856:	e00a      	b.n	800486e <cliCMix+0x1fa>
            mcfg.customMixer[i].throttle = 0.0f;
 8004858:	4a28      	ldr	r2, [pc, #160]	; (80048fc <cliCMix+0x288>)
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	3301      	adds	r3, #1
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	4413      	add	r3, r2
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	3301      	adds	r3, #1
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b0b      	cmp	r3, #11
 8004872:	ddf1      	ble.n	8004858 <cliCMix+0x1e4>
 8004874:	e0d2      	b.n	8004a1c <cliCMix+0x3a8>
    } else if (strcasecmp(argv[1], "load") == 0) {
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3304      	adds	r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4929      	ldr	r1, [pc, #164]	; (8004924 <cliCMix+0x2b0>)
 800487e:	4618      	mov	r0, r3
 8004880:	f01d fc4a 	bl	8022118 <strcasecmp>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d154      	bne.n	8004934 <cliCMix+0x2c0>
        if (argc > 2) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b02      	cmp	r3, #2
 800488e:	dd2f      	ble.n	80048f0 <cliCMix+0x27c>
            for (i = 0; ; i++) {
 8004890:	2300      	movs	r3, #0
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <cliCMix+0x2b4>)
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <cliCMix+0x236>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80048a0:	4922      	ldr	r1, [pc, #136]	; (800492c <cliCMix+0x2b8>)
 80048a2:	2000      	movs	r0, #0
 80048a4:	f00e fe0a 	bl	80134bc <pifLog_Print>
                    break;
 80048a8:	e0b8      	b.n	8004a1c <cliCMix+0x3a8>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	3308      	adds	r3, #8
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	491d      	ldr	r1, [pc, #116]	; (8004928 <cliCMix+0x2b4>)
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f01d fc2c 	bl	8022118 <strcasecmp>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d110      	bne.n	80048e8 <cliCMix+0x274>
                    mixerLoadMix(i);
 80048c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048c8:	f006 fc18 	bl	800b0fc <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <cliCMix+0x2b4>)
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4916      	ldr	r1, [pc, #88]	; (8004930 <cliCMix+0x2bc>)
 80048d8:	2000      	movs	r0, #0
 80048da:	f00e fe7d 	bl	80135d8 <pifLog_Printf>
                    cliCMix(1, NULL);
 80048de:	2100      	movs	r1, #0
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7ff fec7 	bl	8004674 <cliCMix>
                    break;
 80048e6:	e099      	b.n	8004a1c <cliCMix+0x3a8>
            for (i = 0; ; i++) {
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	3301      	adds	r3, #1
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80048ee:	e7d1      	b.n	8004894 <cliCMix+0x220>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80048f0:	f06f 0302 	mvn.w	r3, #2
 80048f4:	e093      	b.n	8004a1e <cliCMix+0x3aa>
 80048f6:	bf00      	nop
 80048f8:	08025a84 	.word	0x08025a84
 80048fc:	20000bb4 	.word	0x20000bb4
 8004900:	08025ab0 	.word	0x08025ab0
 8004904:	08025ab8 	.word	0x08025ab8
 8004908:	08025abc 	.word	0x08025abc
 800490c:	08025ac4 	.word	0x08025ac4
 8004910:	3c23d70a 	.word	0x3c23d70a
 8004914:	08025ad4 	.word	0x08025ad4
 8004918:	08025ad8 	.word	0x08025ad8
 800491c:	08025adc 	.word	0x08025adc
 8004920:	08025ae0 	.word	0x08025ae0
 8004924:	08025ae8 	.word	0x08025ae8
 8004928:	08026cdc 	.word	0x08026cdc
 800492c:	08025af0 	.word	0x08025af0
 8004930:	08025b08 	.word	0x08025b08
        }
    } else {
        i = atoi(argv[1]); // get motor number
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3304      	adds	r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f01d fa8a 	bl	8021e54 <atoi>
 8004940:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	3b01      	subs	r3, #1
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	2b0b      	cmp	r3, #11
 800494c:	dc61      	bgt.n	8004a12 <cliCMix+0x39e>
            if (argc > 2) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b02      	cmp	r3, #2
 8004952:	dd11      	ble.n	8004978 <cliCMix+0x304>
                mcfg.customMixer[i].throttle = _atof(argv[2]);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	3308      	adds	r3, #8
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fc8a 	bl	8004274 <_atof>
 8004960:	eef0 7a40 	vmov.f32	s15, s0
 8004964:	4a30      	ldr	r2, [pc, #192]	; (8004a28 <cliCMix+0x3b4>)
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	3301      	adds	r3, #1
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	4413      	add	r3, r2
 800496e:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	3301      	adds	r3, #1
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b03      	cmp	r3, #3
 800497c:	dd12      	ble.n	80049a4 <cliCMix+0x330>
                mcfg.customMixer[i].roll = _atof(argv[3]);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fc75 	bl	8004274 <_atof>
 800498a:	eef0 7a40 	vmov.f32	s15, s0
 800498e:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <cliCMix+0x3b4>)
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	3301      	adds	r3, #1
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	edc3 7a00 	vstr	s15, [r3]
                check++;
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	3301      	adds	r3, #1
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	dd11      	ble.n	80049ce <cliCMix+0x35a>
                mcfg.customMixer[i].pitch = _atof(argv[4]);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	3310      	adds	r3, #16
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fc5f 	bl	8004274 <_atof>
 80049b6:	eef0 7a40 	vmov.f32	s15, s0
 80049ba:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <cliCMix+0x3b4>)
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	3318      	adds	r3, #24
 80049c4:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	3301      	adds	r3, #1
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 5) {
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	dd11      	ble.n	80049f8 <cliCMix+0x384>
                mcfg.customMixer[i].yaw = _atof(argv[5]);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fc4a 	bl	8004274 <_atof>
 80049e0:	eef0 7a40 	vmov.f32	s15, s0
 80049e4:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <cliCMix+0x3b4>)
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4413      	add	r3, r2
 80049ec:	331c      	adds	r3, #28
 80049ee:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	3301      	adds	r3, #1
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d004      	beq.n	8004a08 <cliCMix+0x394>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 80049fe:	490b      	ldr	r1, [pc, #44]	; (8004a2c <cliCMix+0x3b8>)
 8004a00:	2000      	movs	r0, #0
 8004a02:	f00e fd5b 	bl	80134bc <pifLog_Print>
 8004a06:	e009      	b.n	8004a1c <cliCMix+0x3a8>
            } else {
                cliCMix(1, NULL);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f7ff fe32 	bl	8004674 <cliCMix>
 8004a10:	e004      	b.n	8004a1c <cliCMix+0x3a8>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004a12:	220c      	movs	r2, #12
 8004a14:	4906      	ldr	r1, [pc, #24]	; (8004a30 <cliCMix+0x3bc>)
 8004a16:	2000      	movs	r0, #0
 8004a18:	f00e fdde 	bl	80135d8 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3730      	adds	r7, #48	; 0x30
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000bb4 	.word	0x20000bb4
 8004a2c:	08025b1c 	.word	0x08025b1c
 8004a30:	08025b58 	.word	0x08025b58

08004a34 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004a3e:	4aa2      	ldr	r2, [pc, #648]	; (8004cc8 <cliServo+0x294>)
 8004a40:	f107 0320 	add.w	r3, r7, #32
 8004a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a48:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 1) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d15c      	bne.n	8004b0c <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 8004a52:	499e      	ldr	r1, [pc, #632]	; (8004ccc <cliServo+0x298>)
 8004a54:	2000      	movs	r0, #0
 8004a56:	f00e fd31 	bl	80134bc <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5e:	e049      	b.n	8004af4 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	3301      	adds	r3, #1
 8004a64:	461a      	mov	r2, r3
 8004a66:	499a      	ldr	r1, [pc, #616]	; (8004cd0 <cliServo+0x29c>)
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f00e fdb5 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 8004a6e:	4999      	ldr	r1, [pc, #612]	; (8004cd4 <cliServo+0x2a0>)
 8004a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	440b      	add	r3, r1
 8004a7c:	33b8      	adds	r3, #184	; 0xb8
 8004a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a82:	461a      	mov	r2, r3
 8004a84:	4994      	ldr	r1, [pc, #592]	; (8004cd8 <cliServo+0x2a4>)
 8004a86:	2000      	movs	r0, #0
 8004a88:	f00e fda6 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 8004a8c:	4991      	ldr	r1, [pc, #580]	; (8004cd4 <cliServo+0x2a0>)
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	440b      	add	r3, r1
 8004a9a:	33bc      	adds	r3, #188	; 0xbc
 8004a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	498d      	ldr	r1, [pc, #564]	; (8004cd8 <cliServo+0x2a4>)
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f00e fd97 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 8004aaa:	498a      	ldr	r1, [pc, #552]	; (8004cd4 <cliServo+0x2a0>)
 8004aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	440b      	add	r3, r1
 8004ab8:	33ba      	adds	r3, #186	; 0xba
 8004aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4985      	ldr	r1, [pc, #532]	; (8004cd8 <cliServo+0x2a4>)
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f00e fd88 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004ac8:	4982      	ldr	r1, [pc, #520]	; (8004cd4 <cliServo+0x2a0>)
 8004aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	440b      	add	r3, r1
 8004ad6:	33be      	adds	r3, #190	; 0xbe
 8004ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8004adc:	461a      	mov	r2, r3
 8004ade:	497e      	ldr	r1, [pc, #504]	; (8004cd8 <cliServo+0x2a4>)
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f00e fd79 	bl	80135d8 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004ae6:	497d      	ldr	r1, [pc, #500]	; (8004cdc <cliServo+0x2a8>)
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f00e fce7 	bl	80134bc <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	3301      	adds	r3, #1
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	ddb2      	ble.n	8004a60 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004afa:	4978      	ldr	r1, [pc, #480]	; (8004cdc <cliServo+0x2a8>)
 8004afc:	2000      	movs	r0, #0
 8004afe:	f00e fcdd 	bl	80134bc <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004b02:	4977      	ldr	r1, [pc, #476]	; (8004ce0 <cliServo+0x2ac>)
 8004b04:	2000      	movs	r0, #0
 8004b06:	f00e fcd9 	bl	80134bc <pifLog_Print>
 8004b0a:	e0d7      	b.n	8004cbc <cliServo+0x288>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4974      	ldr	r1, [pc, #464]	; (8004ce4 <cliServo+0x2b0>)
 8004b14:	4618      	mov	r0, r3
 8004b16:	f01d faff 	bl	8022118 <strcasecmp>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d13a      	bne.n	8004b96 <cliServo+0x162>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b20:	2300      	movs	r3, #0
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b24:	e033      	b.n	8004b8e <cliServo+0x15a>
            cfg.servoConf[i].min = 1020;
 8004b26:	496b      	ldr	r1, [pc, #428]	; (8004cd4 <cliServo+0x2a0>)
 8004b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	440b      	add	r3, r1
 8004b34:	33b8      	adds	r3, #184	; 0xb8
 8004b36:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004b3a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004b3c:	4965      	ldr	r1, [pc, #404]	; (8004cd4 <cliServo+0x2a0>)
 8004b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	440b      	add	r3, r1
 8004b4a:	33ba      	adds	r3, #186	; 0xba
 8004b4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b50:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004b52:	4960      	ldr	r1, [pc, #384]	; (8004cd4 <cliServo+0x2a0>)
 8004b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	440b      	add	r3, r1
 8004b60:	33bc      	adds	r3, #188	; 0xbc
 8004b62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b66:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004b68:	f107 0220 	add.w	r2, r7, #32
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	4413      	add	r3, r2
 8004b70:	f993 0000 	ldrsb.w	r0, [r3]
 8004b74:	4957      	ldr	r1, [pc, #348]	; (8004cd4 <cliServo+0x2a0>)
 8004b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	440b      	add	r3, r1
 8004b82:	33be      	adds	r3, #190	; 0xbe
 8004b84:	4602      	mov	r2, r0
 8004b86:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2b07      	cmp	r3, #7
 8004b92:	ddc8      	ble.n	8004b26 <cliServo+0xf2>
 8004b94:	e092      	b.n	8004cbc <cliServo+0x288>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check + 1 < argc && check < ARGS_COUNT) {
 8004b9a:	e012      	b.n	8004bc2 <cliServo+0x18e>
            args[check] = atoi(argv[check + 1]);
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f01d f953 	bl	8021e54 <atoi>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3330      	adds	r3, #48	; 0x30
 8004bb6:	443b      	add	r3, r7
 8004bb8:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check + 1 < argc && check < ARGS_COUNT) {
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dd02      	ble.n	8004bd2 <cliServo+0x19e>
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	dde4      	ble.n	8004b9c <cliServo+0x168>
        }

        if (check != ARGS_COUNT) {
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d005      	beq.n	8004be4 <cliServo+0x1b0>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004bd8:	4943      	ldr	r1, [pc, #268]	; (8004ce8 <cliServo+0x2b4>)
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f00e fc6e 	bl	80134bc <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e06c      	b.n	8004cbe <cliServo+0x28a>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dd60      	ble.n	8004cac <cliServo+0x278>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	dc5d      	bgt.n	8004cac <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004bf0:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004bf2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004bf6:	db59      	blt.n	8004cac <cliServo+0x278>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f640 0234 	movw	r2, #2100	; 0x834
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	dc54      	bgt.n	8004cac <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c02:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004c04:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c08:	db50      	blt.n	8004cac <cliServo+0x278>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f640 0234 	movw	r2, #2100	; 0x834
 8004c10:	4293      	cmp	r3, r2
 8004c12:	dc4b      	bgt.n	8004cac <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c14:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004c16:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004c1a:	db47      	blt.n	8004cac <cliServo+0x278>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f640 0234 	movw	r2, #2100	; 0x834
 8004c22:	4293      	cmp	r3, r2
 8004c24:	dc42      	bgt.n	8004cac <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c26:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004c28:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004c2c:	db3e      	blt.n	8004cac <cliServo+0x278>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	dc3b      	bgt.n	8004cac <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	dc37      	bgt.n	8004cac <cliServo+0x278>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	dc33      	bgt.n	8004cac <cliServo+0x278>
            args[SERVO]--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	b218      	sxth	r0, r3
 8004c50:	4920      	ldr	r1, [pc, #128]	; (8004cd4 <cliServo+0x2a0>)
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	440b      	add	r3, r1
 8004c5c:	33b8      	adds	r3, #184	; 0xb8
 8004c5e:	4602      	mov	r2, r0
 8004c60:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	b218      	sxth	r0, r3
 8004c68:	491a      	ldr	r1, [pc, #104]	; (8004cd4 <cliServo+0x2a0>)
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	440b      	add	r3, r1
 8004c74:	33ba      	adds	r3, #186	; 0xba
 8004c76:	4602      	mov	r2, r0
 8004c78:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	b218      	sxth	r0, r3
 8004c80:	4914      	ldr	r1, [pc, #80]	; (8004cd4 <cliServo+0x2a0>)
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	440b      	add	r3, r1
 8004c8c:	33bc      	adds	r3, #188	; 0xbc
 8004c8e:	4602      	mov	r2, r0
 8004c90:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	b258      	sxtb	r0, r3
 8004c98:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <cliServo+0x2a0>)
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	440b      	add	r3, r1
 8004ca4:	33be      	adds	r3, #190	; 0xbe
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e003      	b.n	8004cb4 <cliServo+0x280>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004cac:	490f      	ldr	r1, [pc, #60]	; (8004cec <cliServo+0x2b8>)
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f00e fc04 	bl	80134bc <pifLog_Print>
        cliServo(1, NULL);
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f7ff febc 	bl	8004a34 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3730      	adds	r7, #48	; 0x30
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	08025c94 	.word	0x08025c94
 8004ccc:	08025b80 	.word	0x08025b80
 8004cd0:	08025ab0 	.word	0x08025ab0
 8004cd4:	20001120 	.word	0x20001120
 8004cd8:	08025bac 	.word	0x08025bac
 8004cdc:	08025adc 	.word	0x08025adc
 8004ce0:	08025bb0 	.word	0x08025bb0
 8004ce4:	08025ae0 	.word	0x08025ae0
 8004ce8:	08025bcc 	.word	0x08025bcc
 8004cec:	08025c18 	.word	0x08025c18

08004cf0 <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b090      	sub	sp, #64	; 0x40
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 1) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	f040 808a 	bne.w	8004e1a <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004d06:	49ab      	ldr	r1, [pc, #684]	; (8004fb4 <cliServoMix+0x2c4>)
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f00e fbd7 	bl	80134bc <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004d0e:	49aa      	ldr	r1, [pc, #680]	; (8004fb8 <cliServoMix+0x2c8>)
 8004d10:	2000      	movs	r0, #0
 8004d12:	f00e fbd3 	bl	80134bc <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004d16:	2300      	movs	r3, #0
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1a:	e074      	b.n	8004e06 <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004d1c:	49a7      	ldr	r1, [pc, #668]	; (8004fbc <cliServoMix+0x2cc>)
 8004d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	440b      	add	r3, r1
 8004d28:	33d2      	adds	r3, #210	; 0xd2
 8004d2a:	f993 3000 	ldrsb.w	r3, [r3]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d06d      	beq.n	8004e0e <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d34:	3301      	adds	r3, #1
 8004d36:	461a      	mov	r2, r3
 8004d38:	49a1      	ldr	r1, [pc, #644]	; (8004fc0 <cliServoMix+0x2d0>)
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f00e fc4c 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004d40:	499e      	ldr	r1, [pc, #632]	; (8004fbc <cliServoMix+0x2cc>)
 8004d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	33d0      	adds	r3, #208	; 0xd0
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	461a      	mov	r2, r3
 8004d54:	499b      	ldr	r1, [pc, #620]	; (8004fc4 <cliServoMix+0x2d4>)
 8004d56:	2000      	movs	r0, #0
 8004d58:	f00e fc3e 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004d5c:	4997      	ldr	r1, [pc, #604]	; (8004fbc <cliServoMix+0x2cc>)
 8004d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	440b      	add	r3, r1
 8004d68:	33d1      	adds	r3, #209	; 0xd1
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4994      	ldr	r1, [pc, #592]	; (8004fc4 <cliServoMix+0x2d4>)
 8004d72:	2000      	movs	r0, #0
 8004d74:	f00e fc30 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004d78:	4990      	ldr	r1, [pc, #576]	; (8004fbc <cliServoMix+0x2cc>)
 8004d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	440b      	add	r3, r1
 8004d84:	33d2      	adds	r3, #210	; 0xd2
 8004d86:	f993 3000 	ldrsb.w	r3, [r3]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	498d      	ldr	r1, [pc, #564]	; (8004fc4 <cliServoMix+0x2d4>)
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f00e fc22 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004d94:	4989      	ldr	r1, [pc, #548]	; (8004fbc <cliServoMix+0x2cc>)
 8004d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	440b      	add	r3, r1
 8004da0:	33d3      	adds	r3, #211	; 0xd3
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	4987      	ldr	r1, [pc, #540]	; (8004fc4 <cliServoMix+0x2d4>)
 8004da8:	2000      	movs	r0, #0
 8004daa:	f00e fc15 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004dae:	4983      	ldr	r1, [pc, #524]	; (8004fbc <cliServoMix+0x2cc>)
 8004db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	440b      	add	r3, r1
 8004dba:	33d4      	adds	r3, #212	; 0xd4
 8004dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4980      	ldr	r1, [pc, #512]	; (8004fc4 <cliServoMix+0x2d4>)
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f00e fc07 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004dca:	497c      	ldr	r1, [pc, #496]	; (8004fbc <cliServoMix+0x2cc>)
 8004dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	33d5      	adds	r3, #213	; 0xd5
 8004dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4979      	ldr	r1, [pc, #484]	; (8004fc4 <cliServoMix+0x2d4>)
 8004de0:	2000      	movs	r0, #0
 8004de2:	f00e fbf9 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004de6:	4975      	ldr	r1, [pc, #468]	; (8004fbc <cliServoMix+0x2cc>)
 8004de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	440b      	add	r3, r1
 8004df2:	33d6      	adds	r3, #214	; 0xd6
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	4973      	ldr	r1, [pc, #460]	; (8004fc8 <cliServoMix+0x2d8>)
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f00e fbec 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e02:	3301      	adds	r3, #1
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	dd87      	ble.n	8004d1c <cliServoMix+0x2c>
 8004e0c:	e000      	b.n	8004e10 <cliServoMix+0x120>
                break;
 8004e0e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004e10:	496e      	ldr	r1, [pc, #440]	; (8004fcc <cliServoMix+0x2dc>)
 8004e12:	2000      	movs	r0, #0
 8004e14:	f00e fb52 	bl	80134bc <pifLog_Print>
 8004e18:	e23b      	b.n	8005292 <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "reset") == 0) {
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	496b      	ldr	r1, [pc, #428]	; (8004fd0 <cliServoMix+0x2e0>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	f01d f978 	bl	8022118 <strcasecmp>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d118      	bne.n	8004e60 <cliServoMix+0x170>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004e2e:	2270      	movs	r2, #112	; 0x70
 8004e30:	2100      	movs	r1, #0
 8004e32:	4868      	ldr	r0, [pc, #416]	; (8004fd4 <cliServoMix+0x2e4>)
 8004e34:	f01d f862 	bl	8021efc <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3c:	e00c      	b.n	8004e58 <cliServoMix+0x168>
            cfg.servoConf[i].direction = 0;
 8004e3e:	4966      	ldr	r1, [pc, #408]	; (8004fd8 <cliServoMix+0x2e8>)
 8004e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	440b      	add	r3, r1
 8004e4c:	33c0      	adds	r3, #192	; 0xc0
 8004e4e:	2200      	movs	r2, #0
 8004e50:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e54:	3301      	adds	r3, #1
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5a:	2b07      	cmp	r3, #7
 8004e5c:	ddef      	ble.n	8004e3e <cliServoMix+0x14e>
 8004e5e:	e218      	b.n	8005292 <cliServoMix+0x5a2>
    } else if (strcasecmp(argv[1], "load") == 0) {
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	3304      	adds	r3, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	495d      	ldr	r1, [pc, #372]	; (8004fdc <cliServoMix+0x2ec>)
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f01d f955 	bl	8022118 <strcasecmp>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d135      	bne.n	8004ee0 <cliServoMix+0x1f0>
        if (argc > 2) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	dd2f      	ble.n	8004eda <cliServoMix+0x1ea>
            for (i = 0; ; i++) {
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004e7e:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <cliServoMix+0x2f0>)
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <cliServoMix+0x1a4>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004e8a:	4956      	ldr	r1, [pc, #344]	; (8004fe4 <cliServoMix+0x2f4>)
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f00e fb15 	bl	80134bc <pifLog_Print>
                    break;
 8004e92:	e1fe      	b.n	8005292 <cliServoMix+0x5a2>
                }
                if (strcasecmp(argv[2], mixerNames[i]) == 0) {
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4951      	ldr	r1, [pc, #324]	; (8004fe0 <cliServoMix+0x2f0>)
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f01d f937 	bl	8022118 <strcasecmp>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <cliServoMix+0x1e2>
                    servoMixerLoadMix(i);
 8004eb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004eb2:	f006 f8ab 	bl	800b00c <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004eb6:	4a4a      	ldr	r2, [pc, #296]	; (8004fe0 <cliServoMix+0x2f0>)
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4949      	ldr	r1, [pc, #292]	; (8004fe8 <cliServoMix+0x2f8>)
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f00e fb88 	bl	80135d8 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004ec8:	2100      	movs	r1, #0
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f7ff ff10 	bl	8004cf0 <cliServoMix>
                    break;
 8004ed0:	e1df      	b.n	8005292 <cliServoMix+0x5a2>
            for (i = 0; ; i++) {
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004ed8:	e7d1      	b.n	8004e7e <cliServoMix+0x18e>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004eda:	f06f 0302 	mvn.w	r3, #2
 8004ede:	e1d9      	b.n	8005294 <cliServoMix+0x5a4>
        }
    } else if (strcasecmp(argv[1], "direction") == 0) {
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4941      	ldr	r1, [pc, #260]	; (8004fec <cliServoMix+0x2fc>)
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f01d f915 	bl	8022118 <strcasecmp>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8128 	bne.w	8005146 <cliServoMix+0x456>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004ef6:	4a3e      	ldr	r2, [pc, #248]	; (8004ff0 <cliServoMix+0x300>)
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f00:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 2) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	f040 8095 	bne.w	8005036 <cliServoMix+0x346>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004f0c:	4939      	ldr	r1, [pc, #228]	; (8004ff4 <cliServoMix+0x304>)
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f00e fad4 	bl	80134bc <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004f14:	4938      	ldr	r1, [pc, #224]	; (8004ff8 <cliServoMix+0x308>)
 8004f16:	2000      	movs	r0, #0
 8004f18:	f00e fad0 	bl	80134bc <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f20:	e009      	b.n	8004f36 <cliServoMix+0x246>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	3301      	adds	r3, #1
 8004f26:	461a      	mov	r2, r3
 8004f28:	4934      	ldr	r1, [pc, #208]	; (8004ffc <cliServoMix+0x30c>)
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f00e fb54 	bl	80135d8 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	3301      	adds	r3, #1
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b0b      	cmp	r3, #11
 8004f3a:	ddf2      	ble.n	8004f22 <cliServoMix+0x232>
            pifLog_Print(LT_NONE, "\r\n");
 8004f3c:	4923      	ldr	r1, [pc, #140]	; (8004fcc <cliServoMix+0x2dc>)
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f00e fabc 	bl	80134bc <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004f44:	2300      	movs	r3, #0
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
 8004f48:	e02f      	b.n	8004faa <cliServoMix+0x2ba>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	461a      	mov	r2, r3
 8004f50:	492b      	ldr	r1, [pc, #172]	; (8005000 <cliServoMix+0x310>)
 8004f52:	2000      	movs	r0, #0
 8004f54:	f00e fb40 	bl	80135d8 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5c:	e01b      	b.n	8004f96 <cliServoMix+0x2a6>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004f5e:	491e      	ldr	r1, [pc, #120]	; (8004fd8 <cliServoMix+0x2e8>)
 8004f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	440b      	add	r3, r1
 8004f6c:	33c0      	adds	r3, #192	; 0xc0
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	fa42 f303 	asr.w	r3, r2, r3
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <cliServoMix+0x294>
 8004f80:	4b20      	ldr	r3, [pc, #128]	; (8005004 <cliServoMix+0x314>)
 8004f82:	e000      	b.n	8004f86 <cliServoMix+0x296>
 8004f84:	4b20      	ldr	r3, [pc, #128]	; (8005008 <cliServoMix+0x318>)
 8004f86:	461a      	mov	r2, r3
 8004f88:	4920      	ldr	r1, [pc, #128]	; (800500c <cliServoMix+0x31c>)
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f00e fb24 	bl	80135d8 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	3301      	adds	r3, #1
 8004f94:	633b      	str	r3, [r7, #48]	; 0x30
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b0b      	cmp	r3, #11
 8004f9a:	dde0      	ble.n	8004f5e <cliServoMix+0x26e>
                pifLog_Print(LT_NONE, "\r\n");
 8004f9c:	490b      	ldr	r1, [pc, #44]	; (8004fcc <cliServoMix+0x2dc>)
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f00e fa8c 	bl	80134bc <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	2b07      	cmp	r3, #7
 8004fae:	ddcc      	ble.n	8004f4a <cliServoMix+0x25a>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e16f      	b.n	8005294 <cliServoMix+0x5a4>
 8004fb4:	08025c9c 	.word	0x08025c9c
 8004fb8:	08025d04 	.word	0x08025d04
 8004fbc:	20000bb4 	.word	0x20000bb4
 8004fc0:	08025ab0 	.word	0x08025ab0
 8004fc4:	08025bac 	.word	0x08025bac
 8004fc8:	08025d64 	.word	0x08025d64
 8004fcc:	08025adc 	.word	0x08025adc
 8004fd0:	08025ae0 	.word	0x08025ae0
 8004fd4:	20000c84 	.word	0x20000c84
 8004fd8:	20001120 	.word	0x20001120
 8004fdc:	08025ae8 	.word	0x08025ae8
 8004fe0:	08026cdc 	.word	0x08026cdc
 8004fe4:	08025af0 	.word	0x08025af0
 8004fe8:	08025b08 	.word	0x08025b08
 8004fec:	08024da0 	.word	0x08024da0
 8004ff0:	08025ea0 	.word	0x08025ea0
 8004ff4:	08025d6c 	.word	0x08025d6c
 8004ff8:	08025dbc 	.word	0x08025dbc
 8004ffc:	08025dc0 	.word	0x08025dc0
 8005000:	08025dc8 	.word	0x08025dc8
 8005004:	08025dcc 	.word	0x08025dcc
 8005008:	08025dd0 	.word	0x08025dd0
 800500c:	08025dd4 	.word	0x08025dd4
        }

        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	3301      	adds	r3, #1
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	4413      	add	r3, r2
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f01c ff19 	bl	8021e54 <atoi>
 8005022:	4602      	mov	r2, r0
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	3340      	adds	r3, #64	; 0x40
 800502a:	443b      	add	r3, r7
 800502c:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	3301      	adds	r3, #1
 8005034:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	3301      	adds	r3, #1
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	dd02      	ble.n	8005046 <cliServoMix+0x356>
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	2b02      	cmp	r3, #2
 8005044:	dde4      	ble.n	8005010 <cliServoMix+0x320>
        }

        if (check != ARGS_COUNT) {
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b03      	cmp	r3, #3
 800504a:	d005      	beq.n	8005058 <cliServoMix+0x368>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 800504c:	4993      	ldr	r1, [pc, #588]	; (800529c <cliServoMix+0x5ac>)
 800504e:	2000      	movs	r0, #0
 8005050:	f00e fa34 	bl	80134bc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005054:	2300      	movs	r3, #0
 8005056:	e11d      	b.n	8005294 <cliServoMix+0x5a4>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	dd55      	ble.n	800510a <cliServoMix+0x41a>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b08      	cmp	r3, #8
 8005062:	dc52      	bgt.n	800510a <cliServoMix+0x41a>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	dd4f      	ble.n	800510a <cliServoMix+0x41a>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	dc4c      	bgt.n	800510a <cliServoMix+0x41a>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d002      	beq.n	800507e <cliServoMix+0x38e>
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d145      	bne.n	800510a <cliServoMix+0x41a>
            args[SERVO] -= 1;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3b01      	subs	r3, #1
 8005082:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3b01      	subs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d11c      	bne.n	80050cc <cliServoMix+0x3dc>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4982      	ldr	r1, [pc, #520]	; (80052a0 <cliServoMix+0x5b0>)
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	440b      	add	r3, r1
 80050a0:	33c0      	adds	r3, #192	; 0xc0
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b21a      	sxth	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	4313      	orrs	r3, r2
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	b298      	uxth	r0, r3
 80050b8:	4979      	ldr	r1, [pc, #484]	; (80052a0 <cliServoMix+0x5b0>)
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	440b      	add	r3, r1
 80050c4:	33c0      	adds	r3, #192	; 0xc0
 80050c6:	4602      	mov	r2, r0
 80050c8:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 80050ca:	e022      	b.n	8005112 <cliServoMix+0x422>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4974      	ldr	r1, [pc, #464]	; (80052a0 <cliServoMix+0x5b0>)
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	440b      	add	r3, r1
 80050da:	33c0      	adds	r3, #192	; 0xc0
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b21a      	sxth	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2101      	movs	r1, #1
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	b21b      	sxth	r3, r3
 80050ee:	4013      	ands	r3, r2
 80050f0:	b21b      	sxth	r3, r3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	b298      	uxth	r0, r3
 80050f6:	496a      	ldr	r1, [pc, #424]	; (80052a0 <cliServoMix+0x5b0>)
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	440b      	add	r3, r1
 8005102:	33c0      	adds	r3, #192	; 0xc0
 8005104:	4602      	mov	r2, r0
 8005106:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8005108:	e003      	b.n	8005112 <cliServoMix+0x422>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800510a:	4966      	ldr	r1, [pc, #408]	; (80052a4 <cliServoMix+0x5b4>)
 800510c:	2000      	movs	r0, #0
 800510e:	f00e f9d5 	bl	80134bc <pifLog_Print>

        cliServoMix(2, smix_dir);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4619      	mov	r1, r3
 8005118:	2002      	movs	r0, #2
 800511a:	f7ff fde9 	bl	8004cf0 <cliServoMix>
 800511e:	e0b8      	b.n	8005292 <cliServoMix+0x5a2>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check + 1 < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check + 1]);
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	3301      	adds	r3, #1
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	4413      	add	r3, r2
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f01c fe91 	bl	8021e54 <atoi>
 8005132:	4602      	mov	r2, r0
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	3340      	adds	r3, #64	; 0x40
 800513a:	443b      	add	r3, r7
 800513c:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	3301      	adds	r3, #1
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check + 1 < argc && check < ARGS_COUNT) {
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	3301      	adds	r3, #1
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	dd02      	ble.n	8005156 <cliServoMix+0x466>
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	2b07      	cmp	r3, #7
 8005154:	dde4      	ble.n	8005120 <cliServoMix+0x430>
        }

        if (check != ARGS_COUNT) {
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	2b08      	cmp	r3, #8
 800515a:	d005      	beq.n	8005168 <cliServoMix+0x478>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 800515c:	4952      	ldr	r1, [pc, #328]	; (80052a8 <cliServoMix+0x5b8>)
 800515e:	2000      	movs	r0, #0
 8005160:	f00e f9ac 	bl	80134bc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005164:	2300      	movs	r3, #0
 8005166:	e095      	b.n	8005294 <cliServoMix+0x5a4>
        }

        i = args[RULE] - 1;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3b01      	subs	r3, #1
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 800516e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005170:	2b00      	cmp	r3, #0
 8005172:	f2c0 808a 	blt.w	800528a <cliServoMix+0x59a>
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	2b0f      	cmp	r3, #15
 800517a:	f300 8086 	bgt.w	800528a <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 800517e:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8005180:	2b00      	cmp	r3, #0
 8005182:	f340 8082 	ble.w	800528a <cliServoMix+0x59a>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b08      	cmp	r3, #8
 800518a:	dc7e      	bgt.n	800528a <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 800518c:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 800518e:	2b00      	cmp	r3, #0
 8005190:	dd7b      	ble.n	800528a <cliServoMix+0x59a>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	dc78      	bgt.n	800528a <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8005198:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 800519a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800519e:	db74      	blt.n	800528a <cliServoMix+0x59a>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	dc71      	bgt.n	800528a <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051a6:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db6e      	blt.n	800528a <cliServoMix+0x59a>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	2bff      	cmp	r3, #255	; 0xff
 80051b0:	dc6b      	bgt.n	800528a <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db68      	blt.n	800528a <cliServoMix+0x59a>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	dc65      	bgt.n	800528a <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db62      	blt.n	800528a <cliServoMix+0x59a>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	dc5f      	bgt.n	800528a <cliServoMix+0x59a>
 80051ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	429a      	cmp	r2, r3
 80051d0:	da5b      	bge.n	800528a <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	db58      	blt.n	800528a <cliServoMix+0x59a>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	2b03      	cmp	r3, #3
 80051dc:	dc55      	bgt.n	800528a <cliServoMix+0x59a>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b2d8      	uxtb	r0, r3
 80051e6:	4931      	ldr	r1, [pc, #196]	; (80052ac <cliServoMix+0x5bc>)
 80051e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	440b      	add	r3, r1
 80051f2:	33d0      	adds	r3, #208	; 0xd0
 80051f4:	4602      	mov	r2, r0
 80051f6:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b2d8      	uxtb	r0, r3
 8005200:	492a      	ldr	r1, [pc, #168]	; (80052ac <cliServoMix+0x5bc>)
 8005202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	440b      	add	r3, r1
 800520c:	33d1      	adds	r3, #209	; 0xd1
 800520e:	4602      	mov	r2, r0
 8005210:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	b258      	sxtb	r0, r3
 8005216:	4925      	ldr	r1, [pc, #148]	; (80052ac <cliServoMix+0x5bc>)
 8005218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800521a:	4613      	mov	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	440b      	add	r3, r1
 8005222:	33d2      	adds	r3, #210	; 0xd2
 8005224:	4602      	mov	r2, r0
 8005226:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	b2d8      	uxtb	r0, r3
 800522c:	491f      	ldr	r1, [pc, #124]	; (80052ac <cliServoMix+0x5bc>)
 800522e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	440b      	add	r3, r1
 8005238:	33d3      	adds	r3, #211	; 0xd3
 800523a:	4602      	mov	r2, r0
 800523c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	b258      	sxtb	r0, r3
 8005242:	491a      	ldr	r1, [pc, #104]	; (80052ac <cliServoMix+0x5bc>)
 8005244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	440b      	add	r3, r1
 800524e:	33d4      	adds	r3, #212	; 0xd4
 8005250:	4602      	mov	r2, r0
 8005252:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	b258      	sxtb	r0, r3
 8005258:	4914      	ldr	r1, [pc, #80]	; (80052ac <cliServoMix+0x5bc>)
 800525a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800525c:	4613      	mov	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	440b      	add	r3, r1
 8005264:	33d5      	adds	r3, #213	; 0xd5
 8005266:	4602      	mov	r2, r0
 8005268:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	b2d8      	uxtb	r0, r3
 800526e:	490f      	ldr	r1, [pc, #60]	; (80052ac <cliServoMix+0x5bc>)
 8005270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005272:	4613      	mov	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	440b      	add	r3, r1
 800527a:	33d6      	adds	r3, #214	; 0xd6
 800527c:	4602      	mov	r2, r0
 800527e:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 8005280:	2100      	movs	r1, #0
 8005282:	2001      	movs	r0, #1
 8005284:	f7ff fd34 	bl	8004cf0 <cliServoMix>
 8005288:	e003      	b.n	8005292 <cliServoMix+0x5a2>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800528a:	4906      	ldr	r1, [pc, #24]	; (80052a4 <cliServoMix+0x5b4>)
 800528c:	2000      	movs	r0, #0
 800528e:	f00e f915 	bl	80134bc <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3740      	adds	r7, #64	; 0x40
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08025ddc 	.word	0x08025ddc
 80052a0:	20001120 	.word	0x20001120
 80052a4:	08025e18 	.word	0x08025e18
 80052a8:	08025e3c 	.word	0x08025e3c
 80052ac:	20000bb4 	.word	0x20000bb4

080052b0 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80052ba:	490b      	ldr	r1, [pc, #44]	; (80052e8 <cliDefaults+0x38>)
 80052bc:	2000      	movs	r0, #0
 80052be:	f00e f8fd 	bl	80134bc <pifLog_Print>
    checkFirstTime(true);
 80052c2:	2001      	movs	r0, #1
 80052c4:	f001 fb10 	bl	80068e8 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 80052c8:	4908      	ldr	r1, [pc, #32]	; (80052ec <cliDefaults+0x3c>)
 80052ca:	2000      	movs	r0, #0
 80052cc:	f00e f8f6 	bl	80134bc <pifLog_Print>
    pif_Delay1ms(10);
 80052d0:	200a      	movs	r0, #10
 80052d2:	f00c f8ff 	bl	80114d4 <pif_Delay1ms>
    systemReset(false);
 80052d6:	2000      	movs	r0, #0
 80052d8:	f7fc fe84 	bl	8001fe4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08025ea8 	.word	0x08025ea8
 80052ec:	08025ec4 	.word	0x08025ec4

080052f0 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b093      	sub	sp, #76	; 0x4c
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 80052fa:	2100      	movs	r1, #0
 80052fc:	2001      	movs	r0, #1
 80052fe:	f001 f86d 	bl	80063dc <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 8005302:	49bc      	ldr	r1, [pc, #752]	; (80055f4 <cliDump+0x304>)
 8005304:	2000      	movs	r0, #0
 8005306:	f00e f8d9 	bl	80134bc <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 800530a:	2100      	movs	r1, #0
 800530c:	2001      	movs	r0, #1
 800530e:	f7ff f961 	bl	80045d4 <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005312:	4bb9      	ldr	r3, [pc, #740]	; (80055f8 <cliDump+0x308>)
 8005314:	795b      	ldrb	r3, [r3, #5]
 8005316:	3b01      	subs	r3, #1
 8005318:	4ab8      	ldr	r2, [pc, #736]	; (80055fc <cliDump+0x30c>)
 800531a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531e:	461a      	mov	r2, r3
 8005320:	49b7      	ldr	r1, [pc, #732]	; (8005600 <cliDump+0x310>)
 8005322:	2000      	movs	r0, #0
 8005324:	f00e f958 	bl	80135d8 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005328:	4bb3      	ldr	r3, [pc, #716]	; (80055f8 <cliDump+0x308>)
 800532a:	edd3 7a04 	vldr	s15, [r3, #16]
 800532e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	f000 80a4 	beq.w	8005482 <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	; 0x34
 800533e:	e093      	b.n	8005468 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005340:	4aad      	ldr	r2, [pc, #692]	; (80055f8 <cliDump+0x308>)
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	3301      	adds	r3, #1
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	4413      	add	r3, r2
 800534a:	edd3 7a00 	vldr	s15, [r3]
 800534e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	f000 808c 	beq.w	8005472 <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 800535a:	4aa7      	ldr	r2, [pc, #668]	; (80055f8 <cliDump+0x308>)
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	3301      	adds	r3, #1
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	4413      	add	r3, r2
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 8005368:	4aa3      	ldr	r2, [pc, #652]	; (80055f8 <cliDump+0x308>)
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	3301      	adds	r3, #1
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	4413      	add	r3, r2
 8005372:	3304      	adds	r3, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 8005378:	4a9f      	ldr	r2, [pc, #636]	; (80055f8 <cliDump+0x308>)
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	4413      	add	r3, r2
 8005380:	3318      	adds	r3, #24
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 8005386:	4a9c      	ldr	r2, [pc, #624]	; (80055f8 <cliDump+0x308>)
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	4413      	add	r3, r2
 800538e:	331c      	adds	r3, #28
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	3301      	adds	r3, #1
 8005398:	461a      	mov	r2, r3
 800539a:	499a      	ldr	r1, [pc, #616]	; (8005604 <cliDump+0x314>)
 800539c:	2000      	movs	r0, #0
 800539e:	f00e f91b 	bl	80135d8 <pifLog_Printf>
            if (thr < 0)
 80053a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80053a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	d503      	bpl.n	80053b8 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80053b0:	4995      	ldr	r1, [pc, #596]	; (8005608 <cliDump+0x318>)
 80053b2:	2000      	movs	r0, #0
 80053b4:	f00e f882 	bl	80134bc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80053b8:	f107 0308 	add.w	r3, r7, #8
 80053bc:	4618      	mov	r0, r3
 80053be:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80053c2:	f7ff f84b 	bl	800445c <ftoa>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	4990      	ldr	r1, [pc, #576]	; (800560c <cliDump+0x31c>)
 80053cc:	2000      	movs	r0, #0
 80053ce:	f00e f903 	bl	80135d8 <pifLog_Printf>
            if (roll < 0)
 80053d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80053d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d503      	bpl.n	80053e8 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 80053e0:	4989      	ldr	r1, [pc, #548]	; (8005608 <cliDump+0x318>)
 80053e2:	2000      	movs	r0, #0
 80053e4:	f00e f86a 	bl	80134bc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	4618      	mov	r0, r3
 80053ee:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80053f2:	f7ff f833 	bl	800445c <ftoa>
 80053f6:	4603      	mov	r3, r0
 80053f8:	461a      	mov	r2, r3
 80053fa:	4984      	ldr	r1, [pc, #528]	; (800560c <cliDump+0x31c>)
 80053fc:	2000      	movs	r0, #0
 80053fe:	f00e f8eb 	bl	80135d8 <pifLog_Printf>
            if (pitch < 0)
 8005402:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540e:	d503      	bpl.n	8005418 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005410:	497d      	ldr	r1, [pc, #500]	; (8005608 <cliDump+0x318>)
 8005412:	2000      	movs	r0, #0
 8005414:	f00e f852 	bl	80134bc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	4618      	mov	r0, r3
 800541e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005422:	f7ff f81b 	bl	800445c <ftoa>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	4978      	ldr	r1, [pc, #480]	; (800560c <cliDump+0x31c>)
 800542c:	2000      	movs	r0, #0
 800542e:	f00e f8d3 	bl	80135d8 <pifLog_Printf>
            if (yaw < 0)
 8005432:	edd7 7a08 	vldr	s15, [r7, #32]
 8005436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543e:	d503      	bpl.n	8005448 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005440:	4971      	ldr	r1, [pc, #452]	; (8005608 <cliDump+0x318>)
 8005442:	2000      	movs	r0, #0
 8005444:	f00e f83a 	bl	80134bc <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	4618      	mov	r0, r3
 800544e:	ed97 0a08 	vldr	s0, [r7, #32]
 8005452:	f7ff f803 	bl	800445c <ftoa>
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	496d      	ldr	r1, [pc, #436]	; (8005610 <cliDump+0x320>)
 800545c:	2000      	movs	r0, #0
 800545e:	f00e f8bb 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	3301      	adds	r3, #1
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	2b0b      	cmp	r3, #11
 800546c:	f67f af68 	bls.w	8005340 <cliDump+0x50>
 8005470:	e000      	b.n	8005474 <cliDump+0x184>
                break;
 8005472:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	3301      	adds	r3, #1
 8005478:	461a      	mov	r2, r3
 800547a:	4966      	ldr	r1, [pc, #408]	; (8005614 <cliDump+0x324>)
 800547c:	2000      	movs	r0, #0
 800547e:	f00e f8ab 	bl	80135d8 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 8005482:	4b5d      	ldr	r3, [pc, #372]	; (80055f8 <cliDump+0x308>)
 8005484:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8084 	beq.w	8005596 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
 8005492:	e074      	b.n	800557e <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 8005494:	4958      	ldr	r1, [pc, #352]	; (80055f8 <cliDump+0x308>)
 8005496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	440b      	add	r3, r1
 80054a0:	33d2      	adds	r3, #210	; 0xd2
 80054a2:	f993 3000 	ldrsb.w	r3, [r3]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d06d      	beq.n	8005586 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	3301      	adds	r3, #1
 80054ae:	461a      	mov	r2, r3
 80054b0:	4959      	ldr	r1, [pc, #356]	; (8005618 <cliDump+0x328>)
 80054b2:	2000      	movs	r0, #0
 80054b4:	f00e f890 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80054b8:	494f      	ldr	r1, [pc, #316]	; (80055f8 <cliDump+0x308>)
 80054ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	440b      	add	r3, r1
 80054c4:	33d0      	adds	r3, #208	; 0xd0
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	461a      	mov	r2, r3
 80054cc:	4953      	ldr	r1, [pc, #332]	; (800561c <cliDump+0x32c>)
 80054ce:	2000      	movs	r0, #0
 80054d0:	f00e f882 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 80054d4:	4948      	ldr	r1, [pc, #288]	; (80055f8 <cliDump+0x308>)
 80054d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	440b      	add	r3, r1
 80054e0:	33d1      	adds	r3, #209	; 0xd1
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	461a      	mov	r2, r3
 80054e8:	494c      	ldr	r1, [pc, #304]	; (800561c <cliDump+0x32c>)
 80054ea:	2000      	movs	r0, #0
 80054ec:	f00e f874 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 80054f0:	4941      	ldr	r1, [pc, #260]	; (80055f8 <cliDump+0x308>)
 80054f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	440b      	add	r3, r1
 80054fc:	33d2      	adds	r3, #210	; 0xd2
 80054fe:	f993 3000 	ldrsb.w	r3, [r3]
 8005502:	461a      	mov	r2, r3
 8005504:	4945      	ldr	r1, [pc, #276]	; (800561c <cliDump+0x32c>)
 8005506:	2000      	movs	r0, #0
 8005508:	f00e f866 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 800550c:	493a      	ldr	r1, [pc, #232]	; (80055f8 <cliDump+0x308>)
 800550e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	440b      	add	r3, r1
 8005518:	33d3      	adds	r3, #211	; 0xd3
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	493f      	ldr	r1, [pc, #252]	; (800561c <cliDump+0x32c>)
 8005520:	2000      	movs	r0, #0
 8005522:	f00e f859 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005526:	4934      	ldr	r1, [pc, #208]	; (80055f8 <cliDump+0x308>)
 8005528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	440b      	add	r3, r1
 8005532:	33d4      	adds	r3, #212	; 0xd4
 8005534:	f993 3000 	ldrsb.w	r3, [r3]
 8005538:	461a      	mov	r2, r3
 800553a:	4938      	ldr	r1, [pc, #224]	; (800561c <cliDump+0x32c>)
 800553c:	2000      	movs	r0, #0
 800553e:	f00e f84b 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 8005542:	492d      	ldr	r1, [pc, #180]	; (80055f8 <cliDump+0x308>)
 8005544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	440b      	add	r3, r1
 800554e:	33d5      	adds	r3, #213	; 0xd5
 8005550:	f993 3000 	ldrsb.w	r3, [r3]
 8005554:	461a      	mov	r2, r3
 8005556:	4931      	ldr	r1, [pc, #196]	; (800561c <cliDump+0x32c>)
 8005558:	2000      	movs	r0, #0
 800555a:	f00e f83d 	bl	80135d8 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 800555e:	4926      	ldr	r1, [pc, #152]	; (80055f8 <cliDump+0x308>)
 8005560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	440b      	add	r3, r1
 800556a:	33d6      	adds	r3, #214	; 0xd6
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	492b      	ldr	r1, [pc, #172]	; (8005620 <cliDump+0x330>)
 8005572:	2000      	movs	r0, #0
 8005574:	f00e f830 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	3301      	adds	r3, #1
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	2b0f      	cmp	r3, #15
 8005582:	d987      	bls.n	8005494 <cliDump+0x1a4>
 8005584:	e000      	b.n	8005588 <cliDump+0x298>
                break;
 8005586:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	3301      	adds	r3, #1
 800558c:	461a      	mov	r2, r3
 800558e:	4925      	ldr	r1, [pc, #148]	; (8005624 <cliDump+0x334>)
 8005590:	2000      	movs	r0, #0
 8005592:	f00e f821 	bl	80135d8 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 8005596:	2300      	movs	r3, #0
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
 800559a:	e024      	b.n	80055e6 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 800559c:	2300      	movs	r3, #0
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
 80055a0:	e01b      	b.n	80055da <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 80055a2:	4921      	ldr	r1, [pc, #132]	; (8005628 <cliDump+0x338>)
 80055a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	440b      	add	r3, r1
 80055b0:	33c0      	adds	r3, #192	; 0xc0
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	fa42 f303 	asr.w	r3, r2, r3
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3301      	adds	r3, #1
 80055cc:	4917      	ldr	r1, [pc, #92]	; (800562c <cliDump+0x33c>)
 80055ce:	2000      	movs	r0, #0
 80055d0:	f00e f802 	bl	80135d8 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	3301      	adds	r3, #1
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b0b      	cmp	r3, #11
 80055de:	d9e0      	bls.n	80055a2 <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e2:	3301      	adds	r3, #1
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	2b07      	cmp	r3, #7
 80055ea:	d9d7      	bls.n	800559c <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
 80055f0:	e057      	b.n	80056a2 <cliDump+0x3b2>
 80055f2:	bf00      	nop
 80055f4:	08025ed4 	.word	0x08025ed4
 80055f8:	20000bb4 	.word	0x20000bb4
 80055fc:	08026cdc 	.word	0x08026cdc
 8005600:	08025f04 	.word	0x08025f04
 8005604:	08025f10 	.word	0x08025f10
 8005608:	08025f18 	.word	0x08025f18
 800560c:	08025f1c 	.word	0x08025f1c
 8005610:	08025abc 	.word	0x08025abc
 8005614:	08025f20 	.word	0x08025f20
 8005618:	08025f34 	.word	0x08025f34
 800561c:	08025f40 	.word	0x08025f40
 8005620:	08025d64 	.word	0x08025d64
 8005624:	08025f44 	.word	0x08025f44
 8005628:	20001120 	.word	0x20001120
 800562c:	08025f58 	.word	0x08025f58
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	4863      	ldr	r0, [pc, #396]	; (80057c4 <cliDump+0x4d4>)
 8005636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4403      	add	r3, r0
 8005642:	33b8      	adds	r3, #184	; 0xb8
 8005644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005648:	461e      	mov	r6, r3
 800564a:	485e      	ldr	r0, [pc, #376]	; (80057c4 <cliDump+0x4d4>)
 800564c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4403      	add	r3, r0
 8005658:	33bc      	adds	r3, #188	; 0xbc
 800565a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800565e:	461c      	mov	r4, r3
 8005660:	4858      	ldr	r0, [pc, #352]	; (80057c4 <cliDump+0x4d4>)
 8005662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4403      	add	r3, r0
 800566e:	33ba      	adds	r3, #186	; 0xba
 8005670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005674:	461d      	mov	r5, r3
 8005676:	4853      	ldr	r0, [pc, #332]	; (80057c4 <cliDump+0x4d4>)
 8005678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4403      	add	r3, r0
 8005684:	33be      	adds	r3, #190	; 0xbe
 8005686:	f993 3000 	ldrsb.w	r3, [r3]
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	9501      	str	r5, [sp, #4]
 800568e:	9400      	str	r4, [sp, #0]
 8005690:	4633      	mov	r3, r6
 8005692:	460a      	mov	r2, r1
 8005694:	494c      	ldr	r1, [pc, #304]	; (80057c8 <cliDump+0x4d8>)
 8005696:	2000      	movs	r0, #0
 8005698:	f00d ff9e 	bl	80135d8 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	3301      	adds	r3, #1
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	2b07      	cmp	r3, #7
 80056a6:	d9c3      	bls.n	8005630 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80056a8:	f001 fcc6 	bl	8007038 <featureMask>
 80056ac:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80056b2:	4a46      	ldr	r2, [pc, #280]	; (80057cc <cliDump+0x4dc>)
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80056be:	4a43      	ldr	r2, [pc, #268]	; (80057cc <cliDump+0x4dc>)
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4941      	ldr	r1, [pc, #260]	; (80057d0 <cliDump+0x4e0>)
 80056ca:	2000      	movs	r0, #0
 80056cc:	f00d ff84 	bl	80135d8 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	3301      	adds	r3, #1
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80056d6:	e7ec      	b.n	80056b2 <cliDump+0x3c2>
            break;
 80056d8:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 80056da:	2300      	movs	r3, #0
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80056de:	4a3b      	ldr	r2, [pc, #236]	; (80057cc <cliDump+0x4dc>)
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d015      	beq.n	8005716 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 80056ea:	2201      	movs	r2, #1
 80056ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 80056fc:	4a33      	ldr	r2, [pc, #204]	; (80057cc <cliDump+0x4dc>)
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	461a      	mov	r2, r3
 8005706:	4933      	ldr	r1, [pc, #204]	; (80057d4 <cliDump+0x4e4>)
 8005708:	2000      	movs	r0, #0
 800570a:	f00d ff65 	bl	80135d8 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	3301      	adds	r3, #1
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005714:	e7e3      	b.n	80056de <cliDump+0x3ee>
            break;
 8005716:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	; 0x34
 800571c:	e012      	b.n	8005744 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800571e:	4a2e      	ldr	r2, [pc, #184]	; (80057d8 <cliDump+0x4e8>)
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	4413      	add	r3, r2
 8005724:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <cliDump+0x4ec>)
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	4413      	add	r3, r2
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005738:	443b      	add	r3, r7
 800573a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	3301      	adds	r3, #1
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <cliDump+0x4e8>)
 8005746:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800574a:	461a      	mov	r2, r3
 800574c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574e:	4293      	cmp	r3, r2
 8005750:	d3e5      	bcc.n	800571e <cliDump+0x42e>
    buf[i] = '\0';
 8005752:	f107 0208 	add.w	r2, r7, #8
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	4413      	add	r3, r2
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	461a      	mov	r2, r3
 8005764:	491e      	ldr	r1, [pc, #120]	; (80057e0 <cliDump+0x4f0>)
 8005766:	2000      	movs	r0, #0
 8005768:	f00d ff36 	bl	80135d8 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 800576c:	2300      	movs	r3, #0
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
 8005770:	e01f      	b.n	80057b2 <cliDump+0x4c2>
        setval = &valueTable[i];
 8005772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <cliDump+0x4f4>)
 800577e:	4413      	add	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 8005782:	4918      	ldr	r1, [pc, #96]	; (80057e4 <cliDump+0x4f4>)
 8005784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	4914      	ldr	r1, [pc, #80]	; (80057e8 <cliDump+0x4f8>)
 8005796:	2000      	movs	r0, #0
 8005798:	f00d ff1e 	bl	80135d8 <pifLog_Printf>
        cliPrintVar(setval, 0);
 800579c:	2100      	movs	r1, #0
 800579e:	69b8      	ldr	r0, [r7, #24]
 80057a0:	f000 fb58 	bl	8005e54 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 80057a4:	4911      	ldr	r1, [pc, #68]	; (80057ec <cliDump+0x4fc>)
 80057a6:	2000      	movs	r0, #0
 80057a8:	f00d fe88 	bl	80134bc <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	3301      	adds	r3, #1
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2b8e      	cmp	r3, #142	; 0x8e
 80057b6:	d9dc      	bls.n	8005772 <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	373c      	adds	r7, #60	; 0x3c
 80057be:	46bd      	mov	sp, r7
 80057c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20001120 	.word	0x20001120
 80057c8:	08025f74 	.word	0x08025f74
 80057cc:	08026d40 	.word	0x08026d40
 80057d0:	08025f8c 	.word	0x08025f8c
 80057d4:	08025f9c 	.word	0x08025f9c
 80057d8:	20000bb4 	.word	0x20000bb4
 80057dc:	080279b0 	.word	0x080279b0
 80057e0:	08025fac 	.word	0x08025fac
 80057e4:	08026e84 	.word	0x08026e84
 80057e8:	08025fb8 	.word	0x08025fb8
 80057ec:	08025adc 	.word	0x08025adc

080057f0 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 80057fa:	490c      	ldr	r1, [pc, #48]	; (800582c <cliExit+0x3c>)
 80057fc:	2000      	movs	r0, #0
 80057fe:	f00d fe5d 	bl	80134bc <pifLog_Print>
    *cliBuffer = '\0';
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <cliExit+0x40>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <cliExit+0x44>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <cliExit+0x48>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005814:	f005 fbd0 	bl	800afb8 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fafa 	bl	8005e14 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	08025fc4 	.word	0x08025fc4
 8005830:	20000b80 	.word	0x20000b80
 8005834:	20000bb0 	.word	0x20000bb0
 8005838:	20000b7c 	.word	0x20000b7c

0800583c <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 8005846:	f001 fbf7 	bl	8007038 <featureMask>
 800584a:	60f8      	str	r0, [r7, #12]

    if (argc == 1) {
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d127      	bne.n	80058a2 <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 8005852:	4952      	ldr	r1, [pc, #328]	; (800599c <cliFeature+0x160>)
 8005854:	2000      	movs	r0, #0
 8005856:	f00d fe31 	bl	80134bc <pifLog_Print>
        for (i = 0; ; i++) {
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800585e:	4a50      	ldr	r2, [pc, #320]	; (80059a0 <cliFeature+0x164>)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d015      	beq.n	8005896 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 800586a:	2201      	movs	r2, #1
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800587c:	4a48      	ldr	r2, [pc, #288]	; (80059a0 <cliFeature+0x164>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005884:	461a      	mov	r2, r3
 8005886:	4947      	ldr	r1, [pc, #284]	; (80059a4 <cliFeature+0x168>)
 8005888:	2000      	movs	r0, #0
 800588a:	f00d fea5 	bl	80135d8 <pifLog_Printf>
        for (i = 0; ; i++) {
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3301      	adds	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005894:	e7e3      	b.n	800585e <cliFeature+0x22>
                break;
 8005896:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005898:	4943      	ldr	r1, [pc, #268]	; (80059a8 <cliFeature+0x16c>)
 800589a:	2000      	movs	r0, #0
 800589c:	f00d fe0e 	bl	80134bc <pifLog_Print>
 80058a0:	e076      	b.n	8005990 <cliFeature+0x154>
    } else if (strcasecmp(argv[1], "list") == 0) {
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	3304      	adds	r3, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4940      	ldr	r1, [pc, #256]	; (80059ac <cliFeature+0x170>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f01c fc34 	bl	8022118 <strcasecmp>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11e      	bne.n	80058f4 <cliFeature+0xb8>
        pifLog_Print(LT_NONE, "Available features: ");
 80058b6:	493e      	ldr	r1, [pc, #248]	; (80059b0 <cliFeature+0x174>)
 80058b8:	2000      	movs	r0, #0
 80058ba:	f00d fdff 	bl	80134bc <pifLog_Print>
        for (i = 0; ; i++) {
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80058c2:	4a37      	ldr	r2, [pc, #220]	; (80059a0 <cliFeature+0x164>)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <cliFeature+0xac>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <cliFeature+0x164>)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	461a      	mov	r2, r3
 80058d8:	4932      	ldr	r1, [pc, #200]	; (80059a4 <cliFeature+0x168>)
 80058da:	2000      	movs	r0, #0
 80058dc:	f00d fe7c 	bl	80135d8 <pifLog_Printf>
        for (i = 0; ; i++) {
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3301      	adds	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80058e6:	e7ec      	b.n	80058c2 <cliFeature+0x86>
                break;
 80058e8:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80058ea:	492f      	ldr	r1, [pc, #188]	; (80059a8 <cliFeature+0x16c>)
 80058ec:	2000      	movs	r0, #0
 80058ee:	f00d fde5 	bl	80134bc <pifLog_Print>
 80058f2:	e04d      	b.n	8005990 <cliFeature+0x154>
    } else {
        bool remove = false;
 80058f4:	2300      	movs	r3, #0
 80058f6:	74fb      	strb	r3, [r7, #19]
        if (argv[1][0] == '-') {
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	3304      	adds	r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b2d      	cmp	r3, #45	; 0x2d
 8005902:	d101      	bne.n	8005908 <cliFeature+0xcc>
            // remove feature
            remove = true;
 8005904:	2301      	movs	r3, #1
 8005906:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 800590c:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <cliFeature+0x164>)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <cliFeature+0xe6>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005918:	4926      	ldr	r1, [pc, #152]	; (80059b4 <cliFeature+0x178>)
 800591a:	2000      	movs	r0, #0
 800591c:	f00d fdce 	bl	80134bc <pifLog_Print>
                break;
 8005920:	e036      	b.n	8005990 <cliFeature+0x154>
            }
            if (strcasecmp(argv[1] + 1, featureNames[i]) == 0) {
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3304      	adds	r3, #4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	491d      	ldr	r1, [pc, #116]	; (80059a0 <cliFeature+0x164>)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f01c fbef 	bl	8022118 <strcasecmp>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d123      	bne.n	8005988 <cliFeature+0x14c>
                if (remove) {
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <cliFeature+0x122>
                    featureClear(1 << i);
 8005946:	2201      	movs	r2, #1
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fb52 	bl	8006ff8 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 8005954:	4918      	ldr	r1, [pc, #96]	; (80059b8 <cliFeature+0x17c>)
 8005956:	2000      	movs	r0, #0
 8005958:	f00d fdb0 	bl	80134bc <pifLog_Print>
 800595c:	e00a      	b.n	8005974 <cliFeature+0x138>
                } else {
                    featureSet(1 << i);
 800595e:	2201      	movs	r2, #1
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fb34 	bl	8006fd4 <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 800596c:	4913      	ldr	r1, [pc, #76]	; (80059bc <cliFeature+0x180>)
 800596e:	2000      	movs	r0, #0
 8005970:	f00d fda4 	bl	80134bc <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 8005974:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <cliFeature+0x164>)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597c:	461a      	mov	r2, r3
 800597e:	4910      	ldr	r1, [pc, #64]	; (80059c0 <cliFeature+0x184>)
 8005980:	2000      	movs	r0, #0
 8005982:	f00d fe29 	bl	80135d8 <pifLog_Printf>
                break;
 8005986:	e003      	b.n	8005990 <cliFeature+0x154>
        for (i = 0; ; i++) {
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	3301      	adds	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 800598e:	e7bd      	b.n	800590c <cliFeature+0xd0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	08025fdc 	.word	0x08025fdc
 80059a0:	08026d40 	.word	0x08026d40
 80059a4:	08025ff0 	.word	0x08025ff0
 80059a8:	08025adc 	.word	0x08025adc
 80059ac:	08025ff4 	.word	0x08025ff4
 80059b0:	08025ffc 	.word	0x08025ffc
 80059b4:	08026014 	.word	0x08026014
 80059b8:	08026030 	.word	0x08026030
 80059bc:	0802603c 	.word	0x0802603c
 80059c0:	08025abc 	.word	0x08025abc

080059c4 <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 80059ce:	f003 fa35 	bl	8008e3c <gpsSetPassthrough>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <cliGpsPassthrough+0x1a>
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d005      	beq.n	80059e8 <cliGpsPassthrough+0x24>
 80059dc:	e009      	b.n	80059f2 <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 80059de:	490a      	ldr	r1, [pc, #40]	; (8005a08 <cliGpsPassthrough+0x44>)
 80059e0:	2000      	movs	r0, #0
 80059e2:	f00d fd6b 	bl	80134bc <pifLog_Print>
        break;
 80059e6:	e009      	b.n	80059fc <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 80059e8:	4908      	ldr	r1, [pc, #32]	; (8005a0c <cliGpsPassthrough+0x48>)
 80059ea:	2000      	movs	r0, #0
 80059ec:	f00d fd66 	bl	80134bc <pifLog_Print>
        break;
 80059f0:	e004      	b.n	80059fc <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 80059f2:	4907      	ldr	r1, [pc, #28]	; (8005a10 <cliGpsPassthrough+0x4c>)
 80059f4:	2000      	movs	r0, #0
 80059f6:	f00d fd61 	bl	80134bc <pifLog_Print>
        break;
 80059fa:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	08026048 	.word	0x08026048
 8005a0c:	08026068 	.word	0x08026068
 8005a10:	08026088 	.word	0x08026088

08005a14 <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 2) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	dc02      	bgt.n	8005a2a <cliMap+0x16>
 8005a24:	f06f 0302 	mvn.w	r3, #2
 8005a28:	e09d      	b.n	8005b66 <cliMap+0x152>

    len = strlen(argv[1]);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fa fbdb 	bl	80001ec <strlen>
 8005a36:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 8005a38:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <cliMap+0x15c>)
 8005a3a:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a3e:	461a      	mov	r2, r3
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d160      	bne.n	8005b08 <cliMap+0xf4>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	e01d      	b.n	8005a88 <cliMap+0x74>
            argv[1][i] = toupper((unsigned char)argv[1][i]);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	75fb      	strb	r3, [r7, #23]
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	4a45      	ldr	r2, [pc, #276]	; (8005b74 <cliMap+0x160>)
 8005a60:	4413      	add	r3, r2
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d102      	bne.n	8005a72 <cliMap+0x5e>
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	3b20      	subs	r3, #32
 8005a70:	e000      	b.n	8005a74 <cliMap+0x60>
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	3204      	adds	r2, #4
 8005a78:	6811      	ldr	r1, [r2, #0]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <cliMap+0x15c>)
 8005a8a:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a8e:	461a      	mov	r2, r3
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d3da      	bcc.n	8005a4c <cliMap+0x38>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	e028      	b.n	8005aee <cliMap+0xda>
            if (strchr(rcChannelLetters, argv[1][i]) && !strchr(argv[1] + i + 1, argv[1][i]))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4833      	ldr	r0, [pc, #204]	; (8005b78 <cliMap+0x164>)
 8005aac:	f01c fb5d 	bl	802216a <strchr>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d015      	beq.n	8005ae2 <cliMap+0xce>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	18d0      	adds	r0, r2, r3
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f01c fb4b 	bl	802216a <strchr>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <cliMap+0xce>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3301      	adds	r3, #1
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	e005      	b.n	8005aee <cliMap+0xda>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005ae2:	4926      	ldr	r1, [pc, #152]	; (8005b7c <cliMap+0x168>)
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f00d fce9 	bl	80134bc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e03b      	b.n	8005b66 <cliMap+0x152>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005aee:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <cliMap+0x15c>)
 8005af0:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005af4:	461a      	mov	r2, r3
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d3cf      	bcc.n	8005a9c <cliMap+0x88>
        }
        parseRcChannels(argv[1]);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	3304      	adds	r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fcc4 	bl	8006490 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005b08:	491d      	ldr	r1, [pc, #116]	; (8005b80 <cliMap+0x16c>)
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	f00d fcd6 	bl	80134bc <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e012      	b.n	8005b3c <cliMap+0x128>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <cliMap+0x15c>)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <cliMap+0x164>)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	f101 0320 	add.w	r3, r1, #32
 8005b30:	443b      	add	r3, r7
 8005b32:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <cliMap+0x15c>)
 8005b3e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005b42:	461a      	mov	r2, r3
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d3e5      	bcc.n	8005b16 <cliMap+0x102>
    out[i] = '\0';
 8005b4a:	f107 020c 	add.w	r2, r7, #12
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4909      	ldr	r1, [pc, #36]	; (8005b84 <cliMap+0x170>)
 8005b5e:	2000      	movs	r0, #0
 8005b60:	f00d fd3a 	bl	80135d8 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3720      	adds	r7, #32
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000bb4 	.word	0x20000bb4
 8005b74:	0802834c 	.word	0x0802834c
 8005b78:	080279b0 	.word	0x080279b0
 8005b7c:	080260b0 	.word	0x080260b0
 8005b80:	080260d0 	.word	0x080260d0
 8005b84:	08025abc 	.word	0x08025abc

08005b88 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d10c      	bne.n	8005bb2 <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005b98:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <cliMixer+0x130>)
 8005b9a:	795b      	ldrb	r3, [r3, #5]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	4a47      	ldr	r2, [pc, #284]	; (8005cbc <cliMixer+0x134>)
 8005ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4946      	ldr	r1, [pc, #280]	; (8005cc0 <cliMixer+0x138>)
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f00d fd15 	bl	80135d8 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e07d      	b.n	8005cae <cliMixer+0x126>
    } else if (strcasecmp(argv[1], "list") == 0) {
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4942      	ldr	r1, [pc, #264]	; (8005cc4 <cliMixer+0x13c>)
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f01c faac 	bl	8022118 <strcasecmp>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d11f      	bne.n	8005c06 <cliMixer+0x7e>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005bc6:	4940      	ldr	r1, [pc, #256]	; (8005cc8 <cliMixer+0x140>)
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f00d fc77 	bl	80134bc <pifLog_Print>
        for (i = 0; ; i++) {
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005bd2:	4a3a      	ldr	r2, [pc, #232]	; (8005cbc <cliMixer+0x134>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <cliMixer+0x70>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005bde:	4a37      	ldr	r2, [pc, #220]	; (8005cbc <cliMixer+0x134>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be6:	461a      	mov	r2, r3
 8005be8:	4938      	ldr	r1, [pc, #224]	; (8005ccc <cliMixer+0x144>)
 8005bea:	2000      	movs	r0, #0
 8005bec:	f00d fcf4 	bl	80135d8 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005bf6:	e7ec      	b.n	8005bd2 <cliMixer+0x4a>
                break;
 8005bf8:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005bfa:	4935      	ldr	r1, [pc, #212]	; (8005cd0 <cliMixer+0x148>)
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f00d fc5d 	bl	80134bc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e053      	b.n	8005cae <cliMixer+0x126>
    }

    for (i = 0; ; i++) {
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <cliMixer+0x134>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d105      	bne.n	8005c22 <cliMixer+0x9a>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005c16:	492f      	ldr	r1, [pc, #188]	; (8005cd4 <cliMixer+0x14c>)
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f00d fc4f 	bl	80134bc <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e045      	b.n	8005cae <cliMixer+0x126>
        }
        if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	3304      	adds	r3, #4
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4924      	ldr	r1, [pc, #144]	; (8005cbc <cliMixer+0x134>)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f01c fa70 	bl	8022118 <strcasecmp>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d131      	bne.n	8005ca2 <cliMixer+0x11a>
            mcfg.mixerConfiguration = i + 1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	3301      	adds	r3, #1
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	4b1c      	ldr	r3, [pc, #112]	; (8005cb8 <cliMixer+0x130>)
 8005c48:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <cliMixer+0x134>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c52:	461a      	mov	r2, r3
 8005c54:	4920      	ldr	r1, [pc, #128]	; (8005cd8 <cliMixer+0x150>)
 8005c56:	2000      	movs	r0, #0
 8005c58:	f00d fcbe 	bl	80135d8 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <cliMixer+0x130>)
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d003      	beq.n	8005c6c <cliMixer+0xe4>
 8005c64:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <cliMixer+0x130>)
 8005c66:	795b      	ldrb	r3, [r3, #5]
 8005c68:	2b0e      	cmp	r3, #14
 8005c6a:	d11e      	bne.n	8005caa <cliMixer+0x122>
                cfg.dynThrPID = 90;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <cliMixer+0x154>)
 8005c6e:	225a      	movs	r2, #90	; 0x5a
 8005c70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <cliMixer+0x154>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005c7c:	4b17      	ldr	r3, [pc, #92]	; (8005cdc <cliMixer+0x154>)
 8005c7e:	221e      	movs	r2, #30
 8005c80:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005c82:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <cliMixer+0x154>)
 8005c84:	2214      	movs	r2, #20
 8005c86:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005c88:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <cliMixer+0x154>)
 8005c8a:	222d      	movs	r2, #45	; 0x2d
 8005c8c:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005c8e:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <cliMixer+0x154>)
 8005c90:	221e      	movs	r2, #30
 8005c92:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <cliMixer+0x154>)
 8005c96:	2214      	movs	r2, #20
 8005c98:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <cliMixer+0x154>)
 8005c9c:	222d      	movs	r2, #45	; 0x2d
 8005c9e:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005ca0:	e003      	b.n	8005caa <cliMixer+0x122>
    for (i = 0; ; i++) {
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005ca8:	e7af      	b.n	8005c0a <cliMixer+0x82>
            break;
 8005caa:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000bb4 	.word	0x20000bb4
 8005cbc:	08026cdc 	.word	0x08026cdc
 8005cc0:	080260e8 	.word	0x080260e8
 8005cc4:	08025ff4 	.word	0x08025ff4
 8005cc8:	080260fc 	.word	0x080260fc
 8005ccc:	08025ff0 	.word	0x08025ff0
 8005cd0:	08025adc 	.word	0x08025adc
 8005cd4:	08025af0 	.word	0x08025af0
 8005cd8:	08026110 	.word	0x08026110
 8005cdc:	20001120 	.word	0x20001120

08005ce0 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]

    if (argc == 1) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d105      	bne.n	8005d04 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005cf8:	4926      	ldr	r1, [pc, #152]	; (8005d94 <cliMotor+0xb4>)
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	f00d fbde 	bl	80134bc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e043      	b.n	8005d8c <cliMotor+0xac>
    }

    if (argc < 3) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	dc0a      	bgt.n	8005d20 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005d0a:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <cliMotor+0xb8>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4921      	ldr	r1, [pc, #132]	; (8005d9c <cliMotor+0xbc>)
 8005d16:	2000      	movs	r0, #0
 8005d18:	f00d fc5e 	bl	80135d8 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e035      	b.n	8005d8c <cliMotor+0xac>
    }

    motor_index = atoi(argv[1]);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	3304      	adds	r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f01c f894 	bl	8021e54 <atoi>
 8005d2c:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[2]);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f01c f88d 	bl	8021e54 <atoi>
 8005d3a:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	db02      	blt.n	8005d48 <cliMotor+0x68>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b0b      	cmp	r3, #11
 8005d46:	dd06      	ble.n	8005d56 <cliMotor+0x76>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005d48:	220c      	movs	r2, #12
 8005d4a:	4915      	ldr	r1, [pc, #84]	; (8005da0 <cliMotor+0xc0>)
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f00d fc43 	bl	80135d8 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e01a      	b.n	8005d8c <cliMotor+0xac>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d5c:	db03      	blt.n	8005d66 <cliMotor+0x86>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005d64:	dd05      	ble.n	8005d72 <cliMotor+0x92>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005d66:	490f      	ldr	r1, [pc, #60]	; (8005da4 <cliMotor+0xc4>)
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f00d fba7 	bl	80134bc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e00c      	b.n	8005d8c <cliMotor+0xac>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	490c      	ldr	r1, [pc, #48]	; (8005da8 <cliMotor+0xc8>)
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f00d fc2d 	bl	80135d8 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	b219      	sxth	r1, r3
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <cliMotor+0xb8>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08026124 	.word	0x08026124
 8005d98:	20001800 	.word	0x20001800
 8005d9c:	08026160 	.word	0x08026160
 8005da0:	08026178 	.word	0x08026178
 8005da4:	080261a0 	.word	0x080261a0
 8005da8:	080261c4 	.word	0x080261c4

08005dac <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 1) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d108      	bne.n	8005dce <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005dbc:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <cliProfile+0x60>)
 8005dbe:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4912      	ldr	r1, [pc, #72]	; (8005e10 <cliProfile+0x64>)
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f00d fc06 	bl	80135d8 <pifLog_Printf>
 8005dcc:	e019      	b.n	8005e02 <cliProfile+0x56>
    } else {
        i = atoi(argv[1]);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f01c f83d 	bl	8021e54 <atoi>
 8005dda:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db0f      	blt.n	8005e02 <cliProfile+0x56>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	dc0c      	bgt.n	8005e02 <cliProfile+0x56>
            mcfg.current_profile = i;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <cliProfile+0x60>)
 8005dee:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005df2:	2100      	movs	r1, #0
 8005df4:	2000      	movs	r0, #0
 8005df6:	f000 fcf5 	bl	80067e4 <writeEEPROM>
            cliProfile(1, NULL);
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	f7ff ffd5 	bl	8005dac <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000bb4 	.word	0x20000bb4
 8005e10:	080261e0 	.word	0x080261e0

08005e14 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005e1e:	490b      	ldr	r1, [pc, #44]	; (8005e4c <cliSave+0x38>)
 8005e20:	2000      	movs	r0, #0
 8005e22:	f00d fb4b 	bl	80134bc <pifLog_Print>
    writeEEPROM(0, true);
 8005e26:	2101      	movs	r1, #1
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f000 fcdb 	bl	80067e4 <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005e2e:	4908      	ldr	r1, [pc, #32]	; (8005e50 <cliSave+0x3c>)
 8005e30:	2000      	movs	r0, #0
 8005e32:	f00d fb43 	bl	80134bc <pifLog_Print>
    pif_Delay1ms(10);
 8005e36:	200a      	movs	r0, #10
 8005e38:	f00b fb4c 	bl	80114d4 <pif_Delay1ms>
    systemReset(false);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7fc f8d1 	bl	8001fe4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	080261f8 	.word	0x080261f8
 8005e50:	08026204 	.word	0x08026204

08005e54 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d864      	bhi.n	8005f34 <cliPrintVar+0xe0>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <cliPrintVar+0x1c>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e93 	.word	0x08005e93
 8005e78:	08005e9f 	.word	0x08005e9f
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	08005eb5 	.word	0x08005eb5
 8005e84:	08005ebf 	.word	0x08005ebf
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	617b      	str	r3, [r7, #20]
            break;
 8005e90:	e050      	b.n	8005f34 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f993 3000 	ldrsb.w	r3, [r3]
 8005e9a:	617b      	str	r3, [r7, #20]
            break;
 8005e9c:	e04a      	b.n	8005f34 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	617b      	str	r3, [r7, #20]
            break;
 8005ea6:	e045      	b.n	8005f34 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb0:	617b      	str	r3, [r7, #20]
            break;
 8005eb2:	e03f      	b.n	8005f34 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	617b      	str	r3, [r7, #20]
            break;
 8005ebc:	e03a      	b.n	8005f34 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	edd3 7a00 	vldr	s15, [r3]
 8005ec6:	f107 030c 	add.w	r3, r7, #12
 8005eca:	4618      	mov	r0, r3
 8005ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed0:	f7fe fac4 	bl	800445c <ftoa>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4921      	ldr	r1, [pc, #132]	; (8005f60 <cliPrintVar+0x10c>)
 8005eda:	2000      	movs	r0, #0
 8005edc:	f00d fb7c 	bl	80135d8 <pifLog_Printf>
            if (full) {
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d037      	beq.n	8005f56 <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8005efc:	f7fe faae 	bl	800445c <ftoa>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	4917      	ldr	r1, [pc, #92]	; (8005f64 <cliPrintVar+0x110>)
 8005f06:	2000      	movs	r0, #0
 8005f08:	f00d fb66 	bl	80135d8 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f18:	f107 030c 	add.w	r3, r7, #12
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f22:	f7fe fa9b 	bl	800445c <ftoa>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	490e      	ldr	r1, [pc, #56]	; (8005f64 <cliPrintVar+0x110>)
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f00d fb53 	bl	80135d8 <pifLog_Printf>
 8005f32:	e011      	b.n	8005f58 <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	490c      	ldr	r1, [pc, #48]	; (8005f68 <cliPrintVar+0x114>)
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f00d fb4d 	bl	80135d8 <pifLog_Printf>
    if (full)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d009      	beq.n	8005f58 <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	4907      	ldr	r1, [pc, #28]	; (8005f6c <cliPrintVar+0x118>)
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f00d fb42 	bl	80135d8 <pifLog_Printf>
 8005f54:	e000      	b.n	8005f58 <cliPrintVar+0x104>
            return; // return from case for float only
 8005f56:	bf00      	nop
}
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	08025f1c 	.word	0x08025f1c
 8005f64:	08026214 	.word	0x08026214
 8005f68:	08025dc8 	.word	0x08025dc8
 8005f6c:	08026218 	.word	0x08026218

08005f70 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	791b      	ldrb	r3, [r3, #4]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d824      	bhi.n	8005fcc <cliSetVar+0x5c>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <cliSetVar+0x18>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fa1 	.word	0x08005fa1
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	08005fad 	.word	0x08005fad
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fc3 	.word	0x08005fc3
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
            break;
 8005faa:	e00f      	b.n	8005fcc <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	b212      	sxth	r2, r2
 8005fb4:	801a      	strh	r2, [r3, #0]
            break;
 8005fb6:	e009      	b.n	8005fcc <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	601a      	str	r2, [r3, #0]
            break;
 8005fc0:	e004      	b.n	8005fcc <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	601a      	str	r2, [r3, #0]
            break;
 8005fca:	bf00      	nop
    }
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8005fd8:	b5b0      	push	{r4, r5, r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	613b      	str	r3, [r7, #16]

    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d008      	beq.n	8006008 <cliSet+0x30>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d137      	bne.n	800606c <cliSet+0x94>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3304      	adds	r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b2a      	cmp	r3, #42	; 0x2a
 8006006:	d131      	bne.n	800606c <cliSet+0x94>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8006008:	4988      	ldr	r1, [pc, #544]	; (800622c <cliSet+0x254>)
 800600a:	2000      	movs	r0, #0
 800600c:	f00d fa56 	bl	80134bc <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006010:	2300      	movs	r3, #0
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	e026      	b.n	8006064 <cliSet+0x8c>
            val = &valueTable[i];
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4a83      	ldr	r2, [pc, #524]	; (8006230 <cliSet+0x258>)
 8006022:	4413      	add	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006026:	4982      	ldr	r1, [pc, #520]	; (8006230 <cliSet+0x258>)
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	497e      	ldr	r1, [pc, #504]	; (8006234 <cliSet+0x25c>)
 800603a:	2000      	movs	r0, #0
 800603c:	f00d facc 	bl	80135d8 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[1])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	3304      	adds	r3, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fa f8d0 	bl	80001ec <strlen>
 800604c:	4603      	mov	r3, r0
 800604e:	4619      	mov	r1, r3
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff feff 	bl	8005e54 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8006056:	4978      	ldr	r1, [pc, #480]	; (8006238 <cliSet+0x260>)
 8006058:	2000      	movs	r0, #0
 800605a:	f00d fa2f 	bl	80134bc <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3301      	adds	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	2b8e      	cmp	r3, #142	; 0x8e
 8006068:	d9d5      	bls.n	8006016 <cliSet+0x3e>
    if (argc == 1 || (argc == 2 && argv[1][0] == '*')) {
 800606a:	e0da      	b.n	8006222 <cliSet+0x24a>
        }
    } else if ((eqptr = strstr(argv[1], "=")) != NULL) {
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	3304      	adds	r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	213d      	movs	r1, #61	; 0x3d
 8006074:	4618      	mov	r0, r3
 8006076:	f01c f878 	bl	802216a <strchr>
 800607a:	61b8      	str	r0, [r7, #24]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8097 	beq.w	80061b2 <cliSet+0x1da>
        // has equal, set var
        eqptr++;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	3301      	adds	r3, #1
 8006088:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 800608a:	69b8      	ldr	r0, [r7, #24]
 800608c:	f01b fee2 	bl	8021e54 <atoi>
 8006090:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f7fe f8ee 	bl	8004274 <_atof>
 8006098:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	e07d      	b.n	800619e <cliSet+0x1c6>
            val = &valueTable[i];
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a60      	ldr	r2, [pc, #384]	; (8006230 <cliSet+0x258>)
 80060ae:	4413      	add	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[1], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	681c      	ldr	r4, [r3, #0]
 80060b8:	495d      	ldr	r1, [pc, #372]	; (8006230 <cliSet+0x258>)
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	681d      	ldr	r5, [r3, #0]
 80060c8:	4959      	ldr	r1, [pc, #356]	; (8006230 <cliSet+0x258>)
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa f887 	bl	80001ec <strlen>
 80060de:	4603      	mov	r3, r0
 80060e0:	461a      	mov	r2, r3
 80060e2:	4629      	mov	r1, r5
 80060e4:	4620      	mov	r0, r4
 80060e6:	f01c f855 	bl	8022194 <strncasecmp>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d153      	bne.n	8006198 <cliSet+0x1c0>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80060f0:	494f      	ldr	r1, [pc, #316]	; (8006230 <cliSet+0x258>)
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	330c      	adds	r3, #12
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800610a:	ed97 7a04 	vldr	s14, [r7, #16]
 800610e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006116:	db39      	blt.n	800618c <cliSet+0x1b4>
 8006118:	4945      	ldr	r1, [pc, #276]	; (8006230 <cliSet+0x258>)
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	3310      	adds	r3, #16
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006132:	ed97 7a04 	vldr	s14, [r7, #16]
 8006136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800613a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613e:	d825      	bhi.n	800618c <cliSet+0x1b4>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 8006140:	493b      	ldr	r1, [pc, #236]	; (8006230 <cliSet+0x258>)
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	3304      	adds	r3, #4
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d102      	bne.n	800615c <cliSet+0x184>
                        tmp.float_value = valuef;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	e001      	b.n	8006160 <cliSet+0x188>
                    else
                        tmp.int_value = value;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff04 	bl	8005f70 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 8006168:	4931      	ldr	r1, [pc, #196]	; (8006230 <cliSet+0x258>)
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	4930      	ldr	r1, [pc, #192]	; (800623c <cliSet+0x264>)
 800617c:	2000      	movs	r0, #0
 800617e:	f00d fa2b 	bl	80135d8 <pifLog_Printf>
                    cliPrintVar(val, 0);
 8006182:	2100      	movs	r1, #0
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fe65 	bl	8005e54 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 800618a:	e003      	b.n	8006194 <cliSet+0x1bc>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 800618c:	492c      	ldr	r1, [pc, #176]	; (8006240 <cliSet+0x268>)
 800618e:	2000      	movs	r0, #0
 8006190:	f00d f994 	bl	80134bc <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 8006194:	2300      	movs	r3, #0
 8006196:	e045      	b.n	8006224 <cliSet+0x24c>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b8e      	cmp	r3, #142	; 0x8e
 80061a2:	f67f af7e 	bls.w	80060a2 <cliSet+0xca>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 80061a6:	4927      	ldr	r1, [pc, #156]	; (8006244 <cliSet+0x26c>)
 80061a8:	2000      	movs	r0, #0
 80061aa:	f00d f987 	bl	80134bc <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e038      	b.n	8006224 <cliSet+0x24c>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	e031      	b.n	800621c <cliSet+0x244>
            if (strstr(valueTable[i].name, argv[1])) {
 80061b8:	491d      	ldr	r1, [pc, #116]	; (8006230 <cliSet+0x258>)
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	3304      	adds	r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f01c f814 	bl	80221fe <strstr>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01c      	beq.n	8006216 <cliSet+0x23e>
                val = &valueTable[i];
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <cliSet+0x258>)
 80061e8:	4413      	add	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 80061ec:	4910      	ldr	r1, [pc, #64]	; (8006230 <cliSet+0x258>)
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	490d      	ldr	r1, [pc, #52]	; (8006234 <cliSet+0x25c>)
 8006200:	2000      	movs	r0, #0
 8006202:	f00d f9e9 	bl	80135d8 <pifLog_Printf>
                cliPrintVar(val, 0);
 8006206:	2100      	movs	r1, #0
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fe23 	bl	8005e54 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 800620e:	490a      	ldr	r1, [pc, #40]	; (8006238 <cliSet+0x260>)
 8006210:	2000      	movs	r0, #0
 8006212:	f00d f953 	bl	80134bc <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3301      	adds	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b8e      	cmp	r3, #142	; 0x8e
 8006220:	d9ca      	bls.n	80061b8 <cliSet+0x1e0>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bdb0      	pop	{r4, r5, r7, pc}
 800622c:	08026220 	.word	0x08026220
 8006230:	08026e84 	.word	0x08026e84
 8006234:	08026238 	.word	0x08026238
 8006238:	08025adc 	.word	0x08025adc
 800623c:	08026240 	.word	0x08026240
 8006240:	0802624c 	.word	0x0802624c
 8006244:	08026274 	.word	0x08026274

08006248 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af02      	add	r7, sp, #8
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 8006252:	4b4c      	ldr	r3, [pc, #304]	; (8006384 <cliStatus+0x13c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4c      	ldr	r2, [pc, #304]	; (8006388 <cliStatus+0x140>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	099a      	lsrs	r2, r3, #6
 800625e:	4b4b      	ldr	r3, [pc, #300]	; (800638c <cliStatus+0x144>)
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	4b4a      	ldr	r3, [pc, #296]	; (8006390 <cliStatus+0x148>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	460b      	mov	r3, r1
 800626c:	4949      	ldr	r1, [pc, #292]	; (8006394 <cliStatus+0x14c>)
 800626e:	2000      	movs	r0, #0
 8006270:	f00d f9b2 	bl	80135d8 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 8006274:	f000 fe8c 	bl	8006f90 <sensorsMask>
 8006278:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <cliStatus+0x150>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a47      	ldr	r2, [pc, #284]	; (800639c <cliStatus+0x154>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	0c9b      	lsrs	r3, r3, #18
 8006286:	4a46      	ldr	r2, [pc, #280]	; (80063a0 <cliStatus+0x158>)
 8006288:	4946      	ldr	r1, [pc, #280]	; (80063a4 <cliStatus+0x15c>)
 800628a:	2000      	movs	r0, #0
 800628c:	f00d f9a4 	bl	80135d8 <pifLog_Printf>
    for (i = 0; ; i++) {
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	4a44      	ldr	r2, [pc, #272]	; (80063a8 <cliStatus+0x160>)
 8006298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2201      	movs	r2, #1
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	4a3c      	ldr	r2, [pc, #240]	; (80063a8 <cliStatus+0x160>)
 80062b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ba:	461a      	mov	r2, r3
 80062bc:	493b      	ldr	r1, [pc, #236]	; (80063ac <cliStatus+0x164>)
 80062be:	2000      	movs	r0, #0
 80062c0:	f00d f98a 	bl	80135d8 <pifLog_Printf>
    for (i = 0; ; i++) {
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	3301      	adds	r3, #1
 80062c8:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80062ca:	e7e3      	b.n	8006294 <cliStatus+0x4c>
            break;
 80062cc:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 80062ce:	4938      	ldr	r1, [pc, #224]	; (80063b0 <cliStatus+0x168>)
 80062d0:	2000      	movs	r0, #0
 80062d2:	f00d f8f3 	bl	80134bc <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 80062d6:	2001      	movs	r0, #1
 80062d8:	f000 fe1e 	bl	8006f18 <sensors>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d006      	beq.n	80062f0 <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <cliStatus+0x16c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	4933      	ldr	r1, [pc, #204]	; (80063b8 <cliStatus+0x170>)
 80062ea:	2000      	movs	r0, #0
 80062ec:	f00d f974 	bl	80135d8 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 80062f0:	2002      	movs	r0, #2
 80062f2:	f000 fe11 	bl	8006f18 <sensors>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d006      	beq.n	800630a <cliStatus+0xc2>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 80062fc:	4b2d      	ldr	r3, [pc, #180]	; (80063b4 <cliStatus+0x16c>)
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	461a      	mov	r2, r3
 8006302:	492e      	ldr	r1, [pc, #184]	; (80063bc <cliStatus+0x174>)
 8006304:	2000      	movs	r0, #0
 8006306:	f00d f967 	bl	80135d8 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 800630a:	2008      	movs	r0, #8
 800630c:	f000 fe04 	bl	8006f18 <sensors>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <cliStatus+0xdc>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006316:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <cliStatus+0x16c>)
 8006318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631a:	461a      	mov	r2, r3
 800631c:	4928      	ldr	r1, [pc, #160]	; (80063c0 <cliStatus+0x178>)
 800631e:	2000      	movs	r0, #0
 8006320:	f00d f95a 	bl	80135d8 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006324:	2004      	movs	r0, #4
 8006326:	f000 fdf7 	bl	8006f18 <sensors>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <cliStatus+0xf6>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006330:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <cliStatus+0x16c>)
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	461a      	mov	r2, r3
 8006336:	4923      	ldr	r1, [pc, #140]	; (80063c4 <cliStatus+0x17c>)
 8006338:	2000      	movs	r0, #0
 800633a:	f00d f94d 	bl	80135d8 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 800633e:	491c      	ldr	r1, [pc, #112]	; (80063b0 <cliStatus+0x168>)
 8006340:	2000      	movs	r0, #0
 8006342:	f00d f8bb 	bl	80134bc <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <cliStatus+0x180>)
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <cliStatus+0x184>)
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	4619      	mov	r1, r3
 8006352:	f240 536c 	movw	r3, #1388	; 0x56c
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	460b      	mov	r3, r1
 800635a:	491d      	ldr	r1, [pc, #116]	; (80063d0 <cliStatus+0x188>)
 800635c:	2000      	movs	r0, #0
 800635e:	f00d f93b 	bl	80135d8 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 8006362:	481c      	ldr	r0, [pc, #112]	; (80063d4 <cliStatus+0x18c>)
 8006364:	f00e fd67 	bl	8014e36 <pifTimerManager_Count>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	491a      	ldr	r1, [pc, #104]	; (80063d8 <cliStatus+0x190>)
 800636e:	2000      	movs	r0, #0
 8006370:	f00d f932 	bl	80135d8 <pifLog_Printf>

    cliStatusCallback();
 8006374:	f000 f872 	bl	800645c <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	200020d8 	.word	0x200020d8
 8006388:	10624dd3 	.word	0x10624dd3
 800638c:	200019a8 	.word	0x200019a8
 8006390:	20000054 	.word	0x20000054
 8006394:	08026294 	.word	0x08026294
 8006398:	20001970 	.word	0x20001970
 800639c:	431bde83 	.word	0x431bde83
 80063a0:	08026c60 	.word	0x08026c60
 80063a4:	080262d4 	.word	0x080262d4
 80063a8:	08026d8c 	.word	0x08026d8c
 80063ac:	08025ff0 	.word	0x08025ff0
 80063b0:	08025adc 	.word	0x08025adc
 80063b4:	20001cb8 	.word	0x20001cb8
 80063b8:	08026300 	.word	0x08026300
 80063bc:	08026310 	.word	0x08026310
 80063c0:	0802631c 	.word	0x0802631c
 80063c4:	0802632c 	.word	0x0802632c
 80063c8:	200019a4 	.word	0x200019a4
 80063cc:	20001b2c 	.word	0x20001b2c
 80063d0:	0802633c 	.word	0x0802633c
 80063d4:	20001b5c 	.word	0x20001b5c
 80063d8:	08026370 	.word	0x08026370

080063dc <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 80063e6:	4904      	ldr	r1, [pc, #16]	; (80063f8 <cliVersion+0x1c>)
 80063e8:	2000      	movs	r0, #0
 80063ea:	f00d f8f5 	bl	80135d8 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	08026388 	.word	0x08026388

080063fc <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 8006404:	4b11      	ldr	r3, [pc, #68]	; (800644c <cliInit+0x50>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d119      	bne.n	8006440 <cliInit+0x44>
        cliMode = 1;
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <cliInit+0x50>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 8006412:	f00d f995 	bl	8013740 <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f00d f96c 	bl	80136f4 <pifLog_AttachComm>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <cliInit+0x2a>
 8006422:	2300      	movs	r3, #0
 8006424:	e00d      	b.n	8006442 <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 8006426:	490a      	ldr	r1, [pc, #40]	; (8006450 <cliInit+0x54>)
 8006428:	480a      	ldr	r0, [pc, #40]	; (8006454 <cliInit+0x58>)
 800642a:	f00d f80d 	bl	8013448 <pifLog_UseCommand>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <cliInit+0x3c>
 8006434:	2300      	movs	r3, #0
 8006436:	e004      	b.n	8006442 <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006438:	4907      	ldr	r1, [pc, #28]	; (8006458 <cliInit+0x5c>)
 800643a:	2000      	movs	r0, #0
 800643c:	f00d f83e 	bl	80134bc <pifLog_Print>
    }
    return TRUE;
 8006440:	2301      	movs	r3, #1
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000b7c 	.word	0x20000b7c
 8006450:	080263b8 	.word	0x080263b8
 8006454:	08026dac 	.word	0x08026dac
 8006458:	080263c0 	.word	0x080263c0

0800645c <cliStatusCallback>:

__attribute__ ((weak)) void cliStatusCallback()
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0

}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
	p_storage = storageInit();
 8006470:	f7fb fe56 	bl	8002120 <storageInit>
 8006474:	4603      	mov	r3, r0
 8006476:	4a05      	ldr	r2, [pc, #20]	; (800648c <initEEPROM+0x20>)
 8006478:	6013      	str	r3, [r2, #0]
	return p_storage != NULL;
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <initEEPROM+0x20>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	bf14      	ite	ne
 8006482:	2301      	movne	r3, #1
 8006484:	2300      	moveq	r3, #0
 8006486:	b2db      	uxtb	r3, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	2000125c 	.word	0x2000125c

08006490 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e018      	b.n	80064d0 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	480f      	ldr	r0, [pc, #60]	; (80064e4 <parseRcChannels+0x54>)
 80064a6:	f01b fe60 	bl	802216a <strchr>
 80064aa:	60b8      	str	r0, [r7, #8]
        if (s)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1ad1      	subs	r1, r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <parseRcChannels+0x54>)
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	b2c9      	uxtb	r1, r1
 80064c0:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <parseRcChannels+0x58>)
 80064c2:	4413      	add	r3, r2
 80064c4:	460a      	mov	r2, r1
 80064c6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e2      	bne.n	800649e <parseRcChannels+0xe>
    }
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	080279b0 	.word	0x080279b0
 80064e8:	20000bb4 	.word	0x20000bb4

080064ec <validEEPROM>:

static uint8_t validEEPROM(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 80064fa:	f240 506c 	movw	r0, #1388	; 0x56c
 80064fe:	f01b fcdf 	bl	8021ec0 <malloc>
 8006502:	4603      	mov	r3, r0
 8006504:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <validEEPROM+0x24>
 800650c:	2300      	movs	r3, #0
 800650e:	e04e      	b.n	80065ae <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <validEEPROM+0xcc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	214c      	movs	r1, #76	; 0x4c
 8006516:	4618      	mov	r0, r3
 8006518:	f013 fd09 	bl	8019f2e <pifStorage_Open>
 800651c:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d037      	beq.n	8006594 <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <validEEPROM+0xcc>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	f240 536c 	movw	r3, #1388	; 0x56c
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	f013 fd0e 	bl	8019f50 <pifStorage_Read>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d02e      	beq.n	8006598 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	224c      	movs	r2, #76	; 0x4c
 8006540:	4293      	cmp	r3, r2
 8006542:	d12b      	bne.n	800659c <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	885b      	ldrh	r3, [r3, #2]
 8006548:	f240 526c 	movw	r2, #1388	; 0x56c
 800654c:	4293      	cmp	r3, r2
 800654e:	d127      	bne.n	80065a0 <validEEPROM+0xb4>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	791b      	ldrb	r3, [r3, #4]
 8006554:	2bbe      	cmp	r3, #190	; 0xbe
 8006556:	d123      	bne.n	80065a0 <validEEPROM+0xb4>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 800655e:	2bef      	cmp	r3, #239	; 0xef
 8006560:	d11e      	bne.n	80065a0 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e007      	b.n	8006578 <validEEPROM+0x8c>
        chk ^= *p;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	781a      	ldrb	r2, [r3, #0]
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	4053      	eors	r3, r2
 8006570:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	429a      	cmp	r2, r3
 8006582:	d3f1      	bcc.n	8006568 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10c      	bne.n	80065a4 <validEEPROM+0xb8>
        goto fail;

    free(temp);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f01b fca0 	bl	8021ed0 <free>

    // looks good, let's roll!
    return 1;
 8006590:	2301      	movs	r3, #1
 8006592:	e00c      	b.n	80065ae <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 8006594:	bf00      	nop
 8006596:	e006      	b.n	80065a6 <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 8006598:	bf00      	nop
 800659a:	e004      	b.n	80065a6 <validEEPROM+0xba>
        goto fail;
 800659c:	bf00      	nop
 800659e:	e002      	b.n	80065a6 <validEEPROM+0xba>
        goto fail;
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <validEEPROM+0xba>
        goto fail;
 80065a4:	bf00      	nop

fail:
    free(temp);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f01b fc92 	bl	8021ed0 <free>
    return 0;    
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	2000125c 	.word	0x2000125c

080065bc <readEEPROM>:

void readEEPROM(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80065c2:	f7ff ff93 	bl	80064ec <validEEPROM>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d030      	beq.n	800662e <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <readEEPROM+0x88>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	214c      	movs	r1, #76	; 0x4c
 80065d2:	4618      	mov	r0, r3
 80065d4:	f013 fcab 	bl	8019f2e <pifStorage_Open>
 80065d8:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d028      	beq.n	8006632 <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 80065e0:	4b18      	ldr	r3, [pc, #96]	; (8006644 <readEEPROM+0x88>)
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	f240 536c 	movw	r3, #1388	; 0x56c
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4917      	ldr	r1, [pc, #92]	; (8006648 <readEEPROM+0x8c>)
 80065ec:	f013 fcb0 	bl	8019f50 <pifStorage_Read>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01f      	beq.n	8006636 <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <readEEPROM+0x8c>)
 80065f8:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d903      	bls.n	8006608 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <readEEPROM+0x8c>)
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <readEEPROM+0x8c>)
 800660a:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800660e:	461a      	mov	r2, r3
 8006610:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006614:	fb02 f303 	mul.w	r3, r2, r3
 8006618:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800661c:	4a0a      	ldr	r2, [pc, #40]	; (8006648 <readEEPROM+0x8c>)
 800661e:	4413      	add	r3, r2
 8006620:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006624:	4619      	mov	r1, r3
 8006626:	4809      	ldr	r0, [pc, #36]	; (800664c <readEEPROM+0x90>)
 8006628:	f01b fc5a 	bl	8021ee0 <memcpy>
    return;
 800662c:	e007      	b.n	800663e <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006636:	bf00      	nop

fail:    
    failureMode(10);
 8006638:	200a      	movs	r0, #10
 800663a:	f7fb fca2 	bl	8001f82 <failureMode>
}
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	2000125c 	.word	0x2000125c
 8006648:	20000bb4 	.word	0x20000bb4
 800664c:	20001120 	.word	0x20001120

08006650 <activateConfig>:

void activateConfig(void)
{
 8006650:	b5b0      	push	{r4, r5, r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 8006656:	2300      	movs	r3, #0
 8006658:	71fb      	strb	r3, [r7, #7]
 800665a:	e021      	b.n	80066a0 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 800665c:	4b56      	ldr	r3, [pc, #344]	; (80067b8 <activateConfig+0x168>)
 800665e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006662:	4619      	mov	r1, r3
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	79fa      	ldrb	r2, [r7, #7]
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	3b19      	subs	r3, #25
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8006676:	79fa      	ldrb	r2, [r7, #7]
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	4a4e      	ldr	r2, [pc, #312]	; (80067b8 <activateConfig+0x168>)
 800667e:	7fd2      	ldrb	r2, [r2, #31]
 8006680:	fb02 f303 	mul.w	r3, r2, r3
 8006684:	4a4d      	ldr	r2, [pc, #308]	; (80067bc <activateConfig+0x16c>)
 8006686:	fb82 1203 	smull	r1, r2, r2, r3
 800668a:	1292      	asrs	r2, r2, #10
 800668c:	17db      	asrs	r3, r3, #31
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	b211      	sxth	r1, r2
 8006694:	4a4a      	ldr	r2, [pc, #296]	; (80067c0 <activateConfig+0x170>)
 8006696:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	3301      	adds	r3, #1
 800669e:	71fb      	strb	r3, [r7, #7]
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d9da      	bls.n	800665c <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80066a6:	2300      	movs	r3, #0
 80066a8:	71fb      	strb	r3, [r7, #7]
 80066aa:	e076      	b.n	800679a <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	4b3f      	ldr	r3, [pc, #252]	; (80067b8 <activateConfig+0x168>)
 80066bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 80066c8:	2301      	movs	r3, #1
 80066ca:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 80066cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dd05      	ble.n	80066e0 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 80066d4:	4b38      	ldr	r3, [pc, #224]	; (80067b8 <activateConfig+0x168>)
 80066d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066da:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80066de:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 80066e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da03      	bge.n	80066f0 <activateConfig+0xa0>
            y = cfg.thrMid8;
 80066e8:	4b33      	ldr	r3, [pc, #204]	; (80067b8 <activateConfig+0x168>)
 80066ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066ee:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 80066f0:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <activateConfig+0x168>)
 80066f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	0092      	lsls	r2, r2, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006706:	492c      	ldr	r1, [pc, #176]	; (80067b8 <activateConfig+0x168>)
 8006708:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800670c:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 8006710:	4929      	ldr	r1, [pc, #164]	; (80067b8 <activateConfig+0x168>)
 8006712:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006716:	460d      	mov	r5, r1
 8006718:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800671c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006720:	fb04 f101 	mul.w	r1, r4, r1
 8006724:	fb01 f405 	mul.w	r4, r1, r5
 8006728:	79b9      	ldrb	r1, [r7, #6]
 800672a:	79bd      	ldrb	r5, [r7, #6]
 800672c:	fb05 f101 	mul.w	r1, r5, r1
 8006730:	fb94 f1f1 	sdiv	r1, r4, r1
 8006734:	4401      	add	r1, r0
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4922      	ldr	r1, [pc, #136]	; (80067c4 <activateConfig+0x174>)
 800673c:	fb81 0103 	smull	r0, r1, r1, r3
 8006740:	1089      	asrs	r1, r1, #2
 8006742:	17db      	asrs	r3, r3, #31
 8006744:	1acb      	subs	r3, r1, r3
 8006746:	b29b      	uxth	r3, r3
 8006748:	4413      	add	r3, r2
 800674a:	b29a      	uxth	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	b211      	sxth	r1, r2
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <activateConfig+0x178>)
 8006752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 8006756:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <activateConfig+0x17c>)
 8006758:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 800675c:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <activateConfig+0x17c>)
 800675e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8006762:	4619      	mov	r1, r3
 8006764:	4b19      	ldr	r3, [pc, #100]	; (80067cc <activateConfig+0x17c>)
 8006766:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800676a:	1acb      	subs	r3, r1, r3
 800676c:	79f9      	ldrb	r1, [r7, #7]
 800676e:	4816      	ldr	r0, [pc, #88]	; (80067c8 <activateConfig+0x178>)
 8006770:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4915      	ldr	r1, [pc, #84]	; (80067d0 <activateConfig+0x180>)
 800677a:	fb81 0103 	smull	r0, r1, r1, r3
 800677e:	1189      	asrs	r1, r1, #6
 8006780:	17db      	asrs	r3, r3, #31
 8006782:	1acb      	subs	r3, r1, r3
 8006784:	b29b      	uxth	r3, r3
 8006786:	4413      	add	r3, r2
 8006788:	b29a      	uxth	r2, r3
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	b211      	sxth	r1, r2
 800678e:	4a0e      	ldr	r2, [pc, #56]	; (80067c8 <activateConfig+0x178>)
 8006790:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	3301      	adds	r3, #1
 8006798:	71fb      	strb	r3, [r7, #7]
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	2b0b      	cmp	r3, #11
 800679e:	d985      	bls.n	80066ac <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <activateConfig+0x168>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f006 fc2f 	bl	800d008 <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 80067aa:	f002 fa7f 	bl	8008cac <gpsSetPIDs>
#endif
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bdb0      	pop	{r4, r5, r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20001120 	.word	0x20001120
 80067bc:	68db8bad 	.word	0x68db8bad
 80067c0:	200019e8 	.word	0x200019e8
 80067c4:	66666667 	.word	0x66666667
 80067c8:	200019f8 	.word	0x200019f8
 80067cc:	20000bb4 	.word	0x20000bb4
 80067d0:	10624dd3 	.word	0x10624dd3

080067d4 <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
    readEEPROM();
 80067d8:	f7ff fef0 	bl	80065bc <readEEPROM>
    activateConfig();
 80067dc:	f7ff ff38 	bl	8006650 <activateConfig>
}
 80067e0:	bf00      	nop
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	460a      	mov	r2, r1
 80067ee:	71fb      	strb	r3, [r7, #7]
 80067f0:	4613      	mov	r3, r2
 80067f2:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 80067f4:	2300      	movs	r3, #0
 80067f6:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 80067fc:	224c      	movs	r2, #76	; 0x4c
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <writeEEPROM+0xf4>)
 8006800:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 8006802:	4b35      	ldr	r3, [pc, #212]	; (80068d8 <writeEEPROM+0xf4>)
 8006804:	f240 526c 	movw	r2, #1388	; 0x56c
 8006808:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 800680a:	4b33      	ldr	r3, [pc, #204]	; (80068d8 <writeEEPROM+0xf4>)
 800680c:	22be      	movs	r2, #190	; 0xbe
 800680e:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 8006810:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <writeEEPROM+0xf4>)
 8006812:	22ef      	movs	r2, #239	; 0xef
 8006814:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006818:	4b2f      	ldr	r3, [pc, #188]	; (80068d8 <writeEEPROM+0xf4>)
 800681a:	2200      	movs	r2, #0
 800681c:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006820:	79bb      	ldrb	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d011      	beq.n	800684a <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 8006826:	4b2c      	ldr	r3, [pc, #176]	; (80068d8 <writeEEPROM+0xf4>)
 8006828:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800682c:	461a      	mov	r2, r3
 800682e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800683a:	4a27      	ldr	r2, [pc, #156]	; (80068d8 <writeEEPROM+0xf4>)
 800683c:	4413      	add	r3, r2
 800683e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006842:	4926      	ldr	r1, [pc, #152]	; (80068dc <writeEEPROM+0xf8>)
 8006844:	4618      	mov	r0, r3
 8006846:	f01b fb4b 	bl	8021ee0 <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 800684a:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <writeEEPROM+0xf4>)
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e007      	b.n	8006860 <writeEEPROM+0x7c>
        chk ^= *p;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	7dbb      	ldrb	r3, [r7, #22]
 8006856:	4053      	eors	r3, r2
 8006858:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3301      	adds	r3, #1
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <writeEEPROM+0xfc>)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4293      	cmp	r3, r2
 8006866:	d3f3      	bcc.n	8006850 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 8006868:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <writeEEPROM+0xf4>)
 800686a:	7dbb      	ldrb	r3, [r7, #22]
 800686c:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006870:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <writeEEPROM+0x100>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	214c      	movs	r1, #76	; 0x4c
 8006876:	4618      	mov	r0, r3
 8006878:	f013 fb59 	bl	8019f2e <pifStorage_Open>
 800687c:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00c      	beq.n	800689e <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 8006884:	4b17      	ldr	r3, [pc, #92]	; (80068e4 <writeEEPROM+0x100>)
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	f240 536c 	movw	r3, #1388	; 0x56c
 800688c:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <writeEEPROM+0xf4>)
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	f013 fb71 	bl	8019f76 <pifStorage_Write>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <writeEEPROM+0xba>
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <writeEEPROM+0xd0>
 80068aa:	f7ff fe1f 	bl	80064ec <validEEPROM>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <writeEEPROM+0xd6>
        failureMode(10);
 80068b4:	200a      	movs	r0, #10
 80068b6:	f7fb fb64 	bl	8001f82 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80068ba:	f7ff ff8b 	bl	80067d4 <loadAndActivateConfig>
    if (b)
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 80068c4:	2201      	movs	r2, #1
 80068c6:	2114      	movs	r1, #20
 80068c8:	200f      	movs	r0, #15
 80068ca:	f005 fb6b 	bl	800bfa4 <blinkLED>
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000bb4 	.word	0x20000bb4
 80068dc:	20001120 	.word	0x20001120
 80068e0:	20001120 	.word	0x20001120
 80068e4:	2000125c 	.word	0x2000125c

080068e8 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 80068f2:	2301      	movs	r3, #1
 80068f4:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <checkFirstTime+0xa0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f013 faea 	bl	8019ed4 <pifStorage_IsFormat>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10c      	bne.n	8006920 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 8006906:	4b20      	ldr	r3, [pc, #128]	; (8006988 <checkFirstTime+0xa0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f013 faef 	bl	8019eee <pifStorage_Format>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <checkFirstTime+0x32>
 8006916:	2300      	movs	r3, #0
 8006918:	e032      	b.n	8006980 <checkFirstTime+0x98>
        alloc = false;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
 800691e:	e00b      	b.n	8006938 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006920:	4b19      	ldr	r3, [pc, #100]	; (8006988 <checkFirstTime+0xa0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	214c      	movs	r1, #76	; 0x4c
 8006926:	4618      	mov	r0, r3
 8006928:	f013 fb01 	bl	8019f2e <pifStorage_Open>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	bf14      	ite	ne
 8006932:	2301      	movne	r3, #1
 8006934:	2300      	moveq	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <checkFirstTime+0xa0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f240 526c 	movw	r2, #1388	; 0x56c
 800694c:	214c      	movs	r1, #76	; 0x4c
 800694e:	4618      	mov	r0, r3
 8006950:	f013 fada 	bl	8019f08 <pifStorage_Create>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <checkFirstTime+0x76>
 800695a:	2300      	movs	r3, #0
 800695c:	e010      	b.n	8006980 <checkFirstTime+0x98>
        reset = true;
 800695e:	2301      	movs	r3, #1
 8006960:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 8006962:	f7ff fdc3 	bl	80064ec <validEEPROM>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <checkFirstTime+0x8a>
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <checkFirstTime+0x96>
        resetConf();
 8006972:	f000 f80b 	bl	800698c <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 8006976:	2100      	movs	r1, #0
 8006978:	2000      	movs	r0, #0
 800697a:	f7ff ff33 	bl	80067e4 <writeEEPROM>
    }
    return true;
 800697e:	2301      	movs	r3, #1
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	2000125c 	.word	0x2000125c

0800698c <resetConf>:

// Default settings
static void resetConf(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8006992:	4ac7      	ldr	r2, [pc, #796]	; (8006cb0 <resetConf+0x324>)
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	e892 0003 	ldmia.w	r2, {r0, r1}
 800699a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 800699e:	f240 526c 	movw	r2, #1388	; 0x56c
 80069a2:	2100      	movs	r1, #0
 80069a4:	48c3      	ldr	r0, [pc, #780]	; (8006cb4 <resetConf+0x328>)
 80069a6:	f01b faa9 	bl	8021efc <memset>
    memset(&cfg, 0, sizeof(config_t));
 80069aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80069ae:	2100      	movs	r1, #0
 80069b0:	48c1      	ldr	r0, [pc, #772]	; (8006cb8 <resetConf+0x32c>)
 80069b2:	f01b faa3 	bl	8021efc <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 80069b6:	224c      	movs	r2, #76	; 0x4c
 80069b8:	4bbe      	ldr	r3, [pc, #760]	; (8006cb4 <resetConf+0x328>)
 80069ba:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 80069bc:	4bbd      	ldr	r3, [pc, #756]	; (8006cb4 <resetConf+0x328>)
 80069be:	2203      	movs	r2, #3
 80069c0:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 80069c2:	f000 fb2d 	bl	8007020 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 80069c6:	4bbd      	ldr	r3, [pc, #756]	; (8006cbc <resetConf+0x330>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <resetConf+0x48>
 80069ce:	4bbb      	ldr	r3, [pc, #748]	; (8006cbc <resetConf+0x330>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 80069d4:	4bb7      	ldr	r3, [pc, #732]	; (8006cb4 <resetConf+0x328>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 80069dc:	4bb5      	ldr	r3, [pc, #724]	; (8006cb4 <resetConf+0x328>)
 80069de:	f44f 7216 	mov.w	r2, #600	; 0x258
 80069e2:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 80069e6:	4bb3      	ldr	r3, [pc, #716]	; (8006cb4 <resetConf+0x328>)
 80069e8:	22fa      	movs	r2, #250	; 0xfa
 80069ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 80069ee:	4bb1      	ldr	r3, [pc, #708]	; (8006cb4 <resetConf+0x328>)
 80069f0:	222a      	movs	r2, #42	; 0x2a
 80069f2:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 80069f6:	4baf      	ldr	r3, [pc, #700]	; (8006cb4 <resetConf+0x328>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 80069fe:	4bad      	ldr	r3, [pc, #692]	; (8006cb4 <resetConf+0x328>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 8006a06:	4bab      	ldr	r3, [pc, #684]	; (8006cb4 <resetConf+0x328>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006a0e:	4ba9      	ldr	r3, [pc, #676]	; (8006cb4 <resetConf+0x328>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 8006a16:	4ba7      	ldr	r3, [pc, #668]	; (8006cb4 <resetConf+0x328>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006a1e:	4ba5      	ldr	r3, [pc, #660]	; (8006cb4 <resetConf+0x328>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 8006a26:	4ba3      	ldr	r3, [pc, #652]	; (8006cb4 <resetConf+0x328>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006a2e:	4ba1      	ldr	r3, [pc, #644]	; (8006cb4 <resetConf+0x328>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 8006a36:	4b9f      	ldr	r3, [pc, #636]	; (8006cb4 <resetConf+0x328>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006a3e:	4b9d      	ldr	r3, [pc, #628]	; (8006cb4 <resetConf+0x328>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 8006a46:	4b9b      	ldr	r3, [pc, #620]	; (8006cb4 <resetConf+0x328>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006a4e:	4b99      	ldr	r3, [pc, #612]	; (8006cb4 <resetConf+0x328>)
 8006a50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006a54:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006a58:	4b96      	ldr	r3, [pc, #600]	; (8006cb4 <resetConf+0x328>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006a60:	4b94      	ldr	r3, [pc, #592]	; (8006cb4 <resetConf+0x328>)
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006a68:	4b92      	ldr	r3, [pc, #584]	; (8006cb4 <resetConf+0x328>)
 8006a6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 8006a72:	4b90      	ldr	r3, [pc, #576]	; (8006cb4 <resetConf+0x328>)
 8006a74:	226e      	movs	r2, #110	; 0x6e
 8006a76:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 8006a7a:	4b8e      	ldr	r3, [pc, #568]	; (8006cb4 <resetConf+0x328>)
 8006a7c:	222b      	movs	r2, #43	; 0x2b
 8006a7e:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 8006a82:	4b8c      	ldr	r3, [pc, #560]	; (8006cb4 <resetConf+0x328>)
 8006a84:	2221      	movs	r2, #33	; 0x21
 8006a86:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 8006a8a:	4b8a      	ldr	r3, [pc, #552]	; (8006cb4 <resetConf+0x328>)
 8006a8c:	2223      	movs	r2, #35	; 0x23
 8006a8e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 8006a92:	4b88      	ldr	r3, [pc, #544]	; (8006cb4 <resetConf+0x328>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 8006a9a:	4b86      	ldr	r3, [pc, #536]	; (8006cb4 <resetConf+0x328>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 8006aa2:	4b84      	ldr	r3, [pc, #528]	; (8006cb4 <resetConf+0x328>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 8006aaa:	4b82      	ldr	r3, [pc, #520]	; (8006cb4 <resetConf+0x328>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 8006ab2:	4b80      	ldr	r3, [pc, #512]	; (8006cb4 <resetConf+0x328>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 8006aba:	4b7e      	ldr	r3, [pc, #504]	; (8006cb4 <resetConf+0x328>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 8006ac2:	4b7c      	ldr	r3, [pc, #496]	; (8006cb4 <resetConf+0x328>)
 8006ac4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ac8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 8006acc:	4b79      	ldr	r3, [pc, #484]	; (8006cb4 <resetConf+0x328>)
 8006ace:	f240 424c 	movw	r2, #1100	; 0x44c
 8006ad2:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 8006ad6:	4b77      	ldr	r3, [pc, #476]	; (8006cb4 <resetConf+0x328>)
 8006ad8:	f240 726c 	movw	r2, #1900	; 0x76c
 8006adc:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006ae0:	4b74      	ldr	r3, [pc, #464]	; (8006cb4 <resetConf+0x328>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006ae8:	4b72      	ldr	r3, [pc, #456]	; (8006cb4 <resetConf+0x328>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006af0:	4b70      	ldr	r3, [pc, #448]	; (8006cb4 <resetConf+0x328>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006af8:	4b6e      	ldr	r3, [pc, #440]	; (8006cb4 <resetConf+0x328>)
 8006afa:	f240 427e 	movw	r2, #1150	; 0x47e
 8006afe:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006b02:	4b6c      	ldr	r3, [pc, #432]	; (8006cb4 <resetConf+0x328>)
 8006b04:	f240 723a 	movw	r2, #1850	; 0x73a
 8006b08:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006b0c:	4b69      	ldr	r3, [pc, #420]	; (8006cb4 <resetConf+0x328>)
 8006b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b12:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006b16:	4b67      	ldr	r3, [pc, #412]	; (8006cb4 <resetConf+0x328>)
 8006b18:	f240 527e 	movw	r2, #1406	; 0x57e
 8006b1c:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006b20:	4b64      	ldr	r3, [pc, #400]	; (8006cb4 <resetConf+0x328>)
 8006b22:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006b26:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006b2a:	4b62      	ldr	r3, [pc, #392]	; (8006cb4 <resetConf+0x328>)
 8006b2c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006b30:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006b34:	4b5f      	ldr	r3, [pc, #380]	; (8006cb4 <resetConf+0x328>)
 8006b36:	2232      	movs	r2, #50	; 0x32
 8006b38:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006b3c:	4b5d      	ldr	r3, [pc, #372]	; (8006cb4 <resetConf+0x328>)
 8006b3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b42:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006b46:	4b5b      	ldr	r3, [pc, #364]	; (8006cb4 <resetConf+0x328>)
 8006b48:	2232      	movs	r2, #50	; 0x32
 8006b4a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006b4e:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <resetConf+0x328>)
 8006b50:	2205      	movs	r2, #5
 8006b52:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006b56:	4b57      	ldr	r3, [pc, #348]	; (8006cb4 <resetConf+0x328>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006b5e:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <resetConf+0x328>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006b66:	4b53      	ldr	r3, [pc, #332]	; (8006cb4 <resetConf+0x328>)
 8006b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b6c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006b70:	4b50      	ldr	r3, [pc, #320]	; (8006cb4 <resetConf+0x328>)
 8006b72:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006b76:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006b7a:	4b4e      	ldr	r3, [pc, #312]	; (8006cb4 <resetConf+0x328>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006b82:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <resetConf+0x328>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006b8a:	4b4a      	ldr	r3, [pc, #296]	; (8006cb4 <resetConf+0x328>)
 8006b8c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006b90:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006b92:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <resetConf+0x328>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006b98:	4b46      	ldr	r3, [pc, #280]	; (8006cb4 <resetConf+0x328>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006ba0:	4b44      	ldr	r3, [pc, #272]	; (8006cb4 <resetConf+0x328>)
 8006ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ba6:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <resetConf+0x328>)
 8006bac:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006bb0:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006bb4:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <resetConf+0x328>)
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006bbc:	4b3e      	ldr	r3, [pc, #248]	; (8006cb8 <resetConf+0x32c>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006bc2:	4b3d      	ldr	r3, [pc, #244]	; (8006cb8 <resetConf+0x32c>)
 8006bc4:	2228      	movs	r2, #40	; 0x28
 8006bc6:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006bc8:	4b3b      	ldr	r3, [pc, #236]	; (8006cb8 <resetConf+0x32c>)
 8006bca:	221e      	movs	r2, #30
 8006bcc:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006bce:	4b3a      	ldr	r3, [pc, #232]	; (8006cb8 <resetConf+0x32c>)
 8006bd0:	2217      	movs	r2, #23
 8006bd2:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006bd4:	4b38      	ldr	r3, [pc, #224]	; (8006cb8 <resetConf+0x32c>)
 8006bd6:	2228      	movs	r2, #40	; 0x28
 8006bd8:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006bda:	4b37      	ldr	r3, [pc, #220]	; (8006cb8 <resetConf+0x32c>)
 8006bdc:	221e      	movs	r2, #30
 8006bde:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006be0:	4b35      	ldr	r3, [pc, #212]	; (8006cb8 <resetConf+0x32c>)
 8006be2:	2217      	movs	r2, #23
 8006be4:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006be6:	4b34      	ldr	r3, [pc, #208]	; (8006cb8 <resetConf+0x32c>)
 8006be8:	2255      	movs	r2, #85	; 0x55
 8006bea:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006bec:	4b32      	ldr	r3, [pc, #200]	; (8006cb8 <resetConf+0x32c>)
 8006bee:	222d      	movs	r2, #45	; 0x2d
 8006bf0:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006bf2:	4b31      	ldr	r3, [pc, #196]	; (8006cb8 <resetConf+0x32c>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006bf8:	4b2f      	ldr	r3, [pc, #188]	; (8006cb8 <resetConf+0x32c>)
 8006bfa:	2232      	movs	r2, #50	; 0x32
 8006bfc:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006bfe:	4b2e      	ldr	r3, [pc, #184]	; (8006cb8 <resetConf+0x32c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006c04:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <resetConf+0x32c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006c0a:	4b2b      	ldr	r3, [pc, #172]	; (8006cb8 <resetConf+0x32c>)
 8006c0c:	220b      	movs	r2, #11
 8006c0e:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006c10:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <resetConf+0x32c>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006c16:	4b28      	ldr	r3, [pc, #160]	; (8006cb8 <resetConf+0x32c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006c1c:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <resetConf+0x32c>)
 8006c1e:	2214      	movs	r2, #20
 8006c20:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006c22:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <resetConf+0x32c>)
 8006c24:	2208      	movs	r2, #8
 8006c26:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006c28:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <resetConf+0x32c>)
 8006c2a:	222d      	movs	r2, #45	; 0x2d
 8006c2c:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006c2e:	4b22      	ldr	r3, [pc, #136]	; (8006cb8 <resetConf+0x32c>)
 8006c30:	220e      	movs	r2, #14
 8006c32:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006c34:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <resetConf+0x32c>)
 8006c36:	2214      	movs	r2, #20
 8006c38:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006c3a:	4b1f      	ldr	r3, [pc, #124]	; (8006cb8 <resetConf+0x32c>)
 8006c3c:	2250      	movs	r2, #80	; 0x50
 8006c3e:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <resetConf+0x32c>)
 8006c42:	225a      	movs	r2, #90	; 0x5a
 8006c44:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <resetConf+0x32c>)
 8006c48:	220a      	movs	r2, #10
 8006c4a:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <resetConf+0x32c>)
 8006c4e:	2264      	movs	r2, #100	; 0x64
 8006c50:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006c52:	4b19      	ldr	r3, [pc, #100]	; (8006cb8 <resetConf+0x32c>)
 8006c54:	2228      	movs	r2, #40	; 0x28
 8006c56:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006c58:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <resetConf+0x32c>)
 8006c5a:	2278      	movs	r2, #120	; 0x78
 8006c5c:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006c5e:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <resetConf+0x32c>)
 8006c60:	222d      	movs	r2, #45	; 0x2d
 8006c62:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006c64:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <resetConf+0x32c>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <resetConf+0x32c>)
 8006c6c:	225a      	movs	r2, #90	; 0x5a
 8006c6e:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <resetConf+0x32c>)
 8006c72:	2241      	movs	r2, #65	; 0x41
 8006c74:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <resetConf+0x32c>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006c80:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <resetConf+0x32c>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <resetConf+0x32c>)
 8006c8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <resetConf+0x32c>)
 8006c92:	2232      	movs	r2, #50	; 0x32
 8006c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <resetConf+0x32c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <resetConf+0x32c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006ca6:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <resetConf+0x32c>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006cac:	e008      	b.n	8006cc0 <resetConf+0x334>
 8006cae:	bf00      	nop
 8006cb0:	0802640c 	.word	0x0802640c
 8006cb4:	20000bb4 	.word	0x20000bb4
 8006cb8:	20001120 	.word	0x20001120
 8006cbc:	20001968 	.word	0x20001968
    cfg.locked_in = 0;
 8006cc0:	4b8e      	ldr	r3, [pc, #568]	; (8006efc <resetConf+0x570>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006cc8:	4b8c      	ldr	r3, [pc, #560]	; (8006efc <resetConf+0x570>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006cce:	4b8b      	ldr	r3, [pc, #556]	; (8006efc <resetConf+0x570>)
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006cd6:	4b89      	ldr	r3, [pc, #548]	; (8006efc <resetConf+0x570>)
 8006cd8:	2228      	movs	r2, #40	; 0x28
 8006cda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006cde:	4b87      	ldr	r3, [pc, #540]	; (8006efc <resetConf+0x570>)
 8006ce0:	2228      	movs	r2, #40	; 0x28
 8006ce2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006ce6:	4b85      	ldr	r3, [pc, #532]	; (8006efc <resetConf+0x570>)
 8006ce8:	2215      	movs	r2, #21
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006cee:	4b83      	ldr	r3, [pc, #524]	; (8006efc <resetConf+0x570>)
 8006cf0:	4a83      	ldr	r2, [pc, #524]	; (8006f00 <resetConf+0x574>)
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006cf4:	4b81      	ldr	r3, [pc, #516]	; (8006efc <resetConf+0x570>)
 8006cf6:	4a83      	ldr	r2, [pc, #524]	; (8006f04 <resetConf+0x578>)
 8006cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006cfa:	4b80      	ldr	r3, [pc, #512]	; (8006efc <resetConf+0x570>)
 8006cfc:	4a82      	ldr	r2, [pc, #520]	; (8006f08 <resetConf+0x57c>)
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006d00:	4b7e      	ldr	r3, [pc, #504]	; (8006efc <resetConf+0x570>)
 8006d02:	4a82      	ldr	r2, [pc, #520]	; (8006f0c <resetConf+0x580>)
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006d06:	4b7d      	ldr	r3, [pc, #500]	; (8006efc <resetConf+0x570>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006d0e:	4b7b      	ldr	r3, [pc, #492]	; (8006efc <resetConf+0x570>)
 8006d10:	2219      	movs	r2, #25
 8006d12:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006d16:	487e      	ldr	r0, [pc, #504]	; (8006f10 <resetConf+0x584>)
 8006d18:	f7ff fbba 	bl	8006490 <parseRcChannels>
    cfg.deadband = 0;
 8006d1c:	4b77      	ldr	r3, [pc, #476]	; (8006efc <resetConf+0x570>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006d24:	4b75      	ldr	r3, [pc, #468]	; (8006efc <resetConf+0x570>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006d2c:	4b73      	ldr	r3, [pc, #460]	; (8006efc <resetConf+0x570>)
 8006d2e:	2228      	movs	r2, #40	; 0x28
 8006d30:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006d34:	4b71      	ldr	r3, [pc, #452]	; (8006efc <resetConf+0x570>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006d3c:	4b6f      	ldr	r3, [pc, #444]	; (8006efc <resetConf+0x570>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006d44:	4b6d      	ldr	r3, [pc, #436]	; (8006efc <resetConf+0x570>)
 8006d46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006d4a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006d4e:	4b6b      	ldr	r3, [pc, #428]	; (8006efc <resetConf+0x570>)
 8006d50:	220a      	movs	r2, #10
 8006d52:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006d56:	4b69      	ldr	r3, [pc, #420]	; (8006efc <resetConf+0x570>)
 8006d58:	22c8      	movs	r2, #200	; 0xc8
 8006d5a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006d5e:	4b67      	ldr	r3, [pc, #412]	; (8006efc <resetConf+0x570>)
 8006d60:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006d64:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006d68:	4b64      	ldr	r3, [pc, #400]	; (8006efc <resetConf+0x570>)
 8006d6a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006d6e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e032      	b.n	8006dde <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006d78:	4960      	ldr	r1, [pc, #384]	; (8006efc <resetConf+0x570>)
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	440b      	add	r3, r1
 8006d86:	33b8      	adds	r3, #184	; 0xb8
 8006d88:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006d8c:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006d8e:	495b      	ldr	r1, [pc, #364]	; (8006efc <resetConf+0x570>)
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	440b      	add	r3, r1
 8006d9c:	33ba      	adds	r3, #186	; 0xba
 8006d9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006da2:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006da4:	4955      	ldr	r1, [pc, #340]	; (8006efc <resetConf+0x570>)
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	440b      	add	r3, r1
 8006db2:	33bc      	adds	r3, #188	; 0xbc
 8006db4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006db8:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006dba:	1d3a      	adds	r2, r7, #4
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f993 0000 	ldrsb.w	r0, [r3]
 8006dc4:	494d      	ldr	r1, [pc, #308]	; (8006efc <resetConf+0x570>)
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	440b      	add	r3, r1
 8006dd2:	33be      	adds	r3, #190	; 0xbe
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	ddc9      	ble.n	8006d78 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006de4:	4b45      	ldr	r3, [pc, #276]	; (8006efc <resetConf+0x570>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006dec:	4b43      	ldr	r3, [pc, #268]	; (8006efc <resetConf+0x570>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006df4:	4b41      	ldr	r3, [pc, #260]	; (8006efc <resetConf+0x570>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <resetConf+0x570>)
 8006dfe:	22c8      	movs	r2, #200	; 0xc8
 8006e00:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006e04:	4b3d      	ldr	r3, [pc, #244]	; (8006efc <resetConf+0x570>)
 8006e06:	2214      	movs	r2, #20
 8006e08:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006e0c:	4b3b      	ldr	r3, [pc, #236]	; (8006efc <resetConf+0x570>)
 8006e0e:	221e      	movs	r2, #30
 8006e10:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <resetConf+0x570>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006e1c:	4b37      	ldr	r3, [pc, #220]	; (8006efc <resetConf+0x570>)
 8006e1e:	2264      	movs	r2, #100	; 0x64
 8006e20:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006e24:	4b35      	ldr	r3, [pc, #212]	; (8006efc <resetConf+0x570>)
 8006e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e2a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006e2e:	4b33      	ldr	r3, [pc, #204]	; (8006efc <resetConf+0x570>)
 8006e30:	2228      	movs	r2, #40	; 0x28
 8006e32:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006e36:	4b31      	ldr	r3, [pc, #196]	; (8006efc <resetConf+0x570>)
 8006e38:	2214      	movs	r2, #20
 8006e3a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006e3e:	4b2f      	ldr	r3, [pc, #188]	; (8006efc <resetConf+0x570>)
 8006e40:	220f      	movs	r2, #15
 8006e42:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006e46:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <resetConf+0x570>)
 8006e48:	220f      	movs	r2, #15
 8006e4a:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006e4e:	4b2b      	ldr	r3, [pc, #172]	; (8006efc <resetConf+0x570>)
 8006e50:	220f      	movs	r2, #15
 8006e52:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006e56:	4b29      	ldr	r3, [pc, #164]	; (8006efc <resetConf+0x570>)
 8006e58:	f240 726c 	movw	r2, #1900	; 0x76c
 8006e5c:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <resetConf+0x570>)
 8006e62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e66:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <resetConf+0x570>)
 8006e6c:	f240 5214 	movw	r2, #1300	; 0x514
 8006e70:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006e74:	4b21      	ldr	r3, [pc, #132]	; (8006efc <resetConf+0x570>)
 8006e76:	2208      	movs	r2, #8
 8006e78:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006e7c:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <resetConf+0x570>)
 8006e7e:	2264      	movs	r2, #100	; 0x64
 8006e80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <resetConf+0x570>)
 8006e86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006e8a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006e8e:	4b1b      	ldr	r3, [pc, #108]	; (8006efc <resetConf+0x570>)
 8006e90:	2232      	movs	r2, #50	; 0x32
 8006e92:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006e96:	4b1f      	ldr	r3, [pc, #124]	; (8006f14 <resetConf+0x588>)
 8006e98:	2252      	movs	r2, #82	; 0x52
 8006e9a:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e00a      	b.n	8006eba <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <resetConf+0x588>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	4413      	add	r3, r2
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b0b      	cmp	r3, #11
 8006ebe:	ddf1      	ble.n	8006ea4 <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e011      	b.n	8006eea <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006ed4:	4a0f      	ldr	r2, [pc, #60]	; (8006f14 <resetConf+0x588>)
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006edc:	4907      	ldr	r1, [pc, #28]	; (8006efc <resetConf+0x570>)
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f01a fffe 	bl	8021ee0 <memcpy>
    for (i = 0; i < 3; i++)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	ddea      	ble.n	8006ec6 <resetConf+0x53a>
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20001120 	.word	0x20001120
 8006f00:	3f19999a 	.word	0x3f19999a
 8006f04:	3f7c28f6 	.word	0x3f7c28f6
 8006f08:	3f770a3d 	.word	0x3f770a3d
 8006f0c:	40a00000 	.word	0x40a00000
 8006f10:	080263f8 	.word	0x080263f8
 8006f14:	20000bb4 	.word	0x20000bb4

08006f18 <sensors>:

bool sensors(uint32_t mask)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006f20:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <sensors+0x28>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20001258 	.word	0x20001258

08006f44 <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <sensorsSet+0x20>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	4a03      	ldr	r2, [pc, #12]	; (8006f64 <sensorsSet+0x20>)
 8006f56:	6013      	str	r3, [r2, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20001258 	.word	0x20001258

08006f68 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	43da      	mvns	r2, r3
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <sensorsClear+0x24>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <sensorsClear+0x24>)
 8006f7c:	6013      	str	r3, [r2, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20001258 	.word	0x20001258

08006f90 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006f94:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <sensorsMask+0x14>)
 8006f96:	681b      	ldr	r3, [r3, #0]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20001258 	.word	0x20001258

08006fa8 <feature>:

bool feature(uint32_t mask)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <feature+0x28>)
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000bb4 	.word	0x20000bb4

08006fd4 <featureSet>:

void featureSet(uint32_t mask)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8006fdc:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <featureSet+0x20>)
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	4a03      	ldr	r2, [pc, #12]	; (8006ff4 <featureSet+0x20>)
 8006fe6:	6093      	str	r3, [r2, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20000bb4 	.word	0x20000bb4

08006ff8 <featureClear>:

void featureClear(uint32_t mask)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <featureClear+0x24>)
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	43db      	mvns	r3, r3
 8007008:	4013      	ands	r3, r2
 800700a:	4a04      	ldr	r2, [pc, #16]	; (800701c <featureClear+0x24>)
 800700c:	6093      	str	r3, [r2, #8]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000bb4 	.word	0x20000bb4

08007020 <featureClearAll>:

void featureClearAll()
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <featureClearAll+0x14>)
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]
}
 800702a:	bf00      	nop
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	20000bb4 	.word	0x20000bb4

08007038 <featureMask>:

uint32_t featureMask(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 800703c:	4b03      	ldr	r3, [pc, #12]	; (800704c <featureMask+0x14>)
 800703e:	689b      	ldr	r3, [r3, #8]
}
 8007040:	4618      	mov	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20000bb4 	.word	0x20000bb4

08007050 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <fw_nav_reset+0x5c>)
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 800705e:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <fw_nav_reset+0x60>)
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 8007066:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <fw_nav_reset+0x64>)
 8007068:	2200      	movs	r2, #0
 800706a:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 800706c:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <fw_nav_reset+0x68>)
 800706e:	2200      	movs	r2, #0
 8007070:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <fw_nav_reset+0x6c>)
 8007074:	2200      	movs	r2, #0
 8007076:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8007078:	2300      	movs	r3, #0
 800707a:	71fb      	strb	r3, [r7, #7]
 800707c:	e00c      	b.n	8007098 <fw_nav_reset+0x48>
        altHist[i] = 0;
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <fw_nav_reset+0x70>)
 8007082:	2100      	movs	r1, #0
 8007084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	4a0e      	ldr	r2, [pc, #56]	; (80070c4 <fw_nav_reset+0x74>)
 800708c:	2100      	movs	r1, #0
 800708e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	3301      	adds	r3, #1
 8007096:	71fb      	strb	r3, [r7, #7]
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	2b04      	cmp	r3, #4
 800709c:	d9ef      	bls.n	800707e <fw_nav_reset+0x2e>
    }
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20001260 	.word	0x20001260
 80070b0:	20001264 	.word	0x20001264
 80070b4:	20001268 	.word	0x20001268
 80070b8:	2000126a 	.word	0x2000126a
 80070bc:	2000126c 	.word	0x2000126c
 80070c0:	20001270 	.word	0x20001270
 80070c4:	2000127c 	.word	0x2000127c

080070c8 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 80070c8:	b5b0      	push	{r4, r5, r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 80070ce:	4b48      	ldr	r3, [pc, #288]	; (80071f0 <fw_FlyTo+0x128>)
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	4a48      	ldr	r2, [pc, #288]	; (80071f4 <fw_FlyTo+0x12c>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	08db      	lsrs	r3, r3, #3
 80070da:	b29b      	uxth	r3, r3
 80070dc:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2bb4      	cmp	r3, #180	; 0xb4
 80070e2:	dd03      	ble.n	80070ec <fw_FlyTo+0x24>
        holdHeading -= 360;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80070ea:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 80070ec:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <fw_FlyTo+0x130>)
 80070ee:	edd3 7a00 	vldr	s15, [r3]
 80070f2:	eddf 6a42 	vldr	s13, [pc, #264]	; 80071fc <fw_FlyTo+0x134>
 80070f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fa:	4b41      	ldr	r3, [pc, #260]	; (8007200 <fw_FlyTo+0x138>)
 80070fc:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710c:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800711a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007204 <fw_FlyTo+0x13c>
 800711e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007122:	ee17 0a90 	vmov	r0, s15
 8007126:	f7f9 f9cd 	bl	80004c4 <__aeabi_f2d>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	ec43 2b10 	vmov	d0, r2, r3
 8007132:	f01b f915 	bl	8022360 <cos>
 8007136:	ec53 2b10 	vmov	r2, r3, d0
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	f7f9 fcfb 	bl	8000b38 <__aeabi_d2f>
 8007142:	4603      	mov	r3, r0
 8007144:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007150:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007204 <fw_FlyTo+0x13c>
 8007154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007158:	ee17 0a90 	vmov	r0, s15
 800715c:	f7f9 f9b2 	bl	80004c4 <__aeabi_f2d>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	ec43 2b10 	vmov	d0, r2, r3
 8007168:	f01b f94e 	bl	8022408 <sin>
 800716c:	ec55 4b10 	vmov	r4, r5, d0
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <fw_FlyTo+0x130>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f7f9 f9a5 	bl	80004c4 <__aeabi_f2d>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 f9f7 	bl	8000574 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	f7f9 fcd3 	bl	8000b38 <__aeabi_d2f>
 8007192:	4603      	mov	r3, r0
 8007194:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 8007196:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <fw_FlyTo+0x140>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80071a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80071aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071b6:	ee17 2a90 	vmov	r2, s15
 80071ba:	4b13      	ldr	r3, [pc, #76]	; (8007208 <fw_FlyTo+0x140>)
 80071bc:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <fw_FlyTo+0x140>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071ca:	edd7 6a00 	vldr	s13, [r7]
 80071ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80071d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071de:	ee17 2a90 	vmov	r2, s15
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <fw_FlyTo+0x140>)
 80071e4:	605a      	str	r2, [r3, #4]
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bdb0      	pop	{r4, r5, r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20001a7a 	.word	0x20001a7a
 80071f4:	cccccccd 	.word	0xcccccccd
 80071f8:	20000028 	.word	0x20000028
 80071fc:	42b3a9fc 	.word	0x42b3a9fc
 8007200:	20001120 	.word	0x20001120
 8007204:	3c8efa35 	.word	0x3c8efa35
 8007208:	2000167c 	.word	0x2000167c

0800720c <fw_nav>:

void fw_nav(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 8007212:	4b56      	ldr	r3, [pc, #344]	; (800736c <fw_nav+0x160>)
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 800721c:	4b54      	ldr	r3, [pc, #336]	; (8007370 <fw_nav+0x164>)
 800721e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007222:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 8007224:	2300      	movs	r3, #0
 8007226:	80bb      	strh	r3, [r7, #4]
 8007228:	2300      	movs	r3, #0
 800722a:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 800722c:	4b51      	ldr	r3, [pc, #324]	; (8007374 <fw_nav+0x168>)
 800722e:	88db      	ldrh	r3, [r3, #6]
 8007230:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 8007232:	4b51      	ldr	r3, [pc, #324]	; (8007378 <fw_nav+0x16c>)
 8007234:	881a      	ldrh	r2, [r3, #0]
 8007236:	4b51      	ldr	r3, [pc, #324]	; (800737c <fw_nav+0x170>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	b29b      	uxth	r3, r3
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	b29b      	uxth	r3, r3
 8007240:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 8007242:	4b4f      	ldr	r3, [pc, #316]	; (8007380 <fw_nav+0x174>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	b29a      	uxth	r2, r3
 8007248:	4b4c      	ldr	r3, [pc, #304]	; (800737c <fw_nav+0x170>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	b29b      	uxth	r3, r3
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	b29b      	uxth	r3, r3
 8007252:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 8007254:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <fw_nav+0x178>)
 8007256:	7cdb      	ldrb	r3, [r3, #19]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <fw_nav+0x66>
 800725c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007260:	7f7b      	ldrb	r3, [r7, #29]
 8007262:	429a      	cmp	r2, r3
 8007264:	da05      	bge.n	8007272 <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 8007266:	4b45      	ldr	r3, [pc, #276]	; (800737c <fw_nav+0x170>)
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	7f7b      	ldrb	r3, [r7, #29]
 800726c:	4413      	add	r3, r2
 800726e:	4a44      	ldr	r2, [pc, #272]	; (8007380 <fw_nav+0x174>)
 8007270:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 8007272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	4618      	mov	r0, r3
 8007280:	f002 fa54 	bl	800972c <wrap_18000>
 8007284:	4603      	mov	r3, r0
 8007286:	4a40      	ldr	r2, [pc, #256]	; (8007388 <fw_nav+0x17c>)
 8007288:	fb82 1203 	smull	r1, r2, r2, r3
 800728c:	1092      	asrs	r2, r2, #2
 800728e:	17db      	asrs	r3, r3, #31
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 8007294:	2008      	movs	r0, #8
 8007296:	f7ff fe3f 	bl	8006f18 <sensors>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d024      	beq.n	80072ea <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 80072a0:	4b3a      	ldr	r3, [pc, #232]	; (800738c <fw_nav+0x180>)
 80072a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072a6:	4619      	mov	r1, r3
 80072a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80072ac:	4a36      	ldr	r2, [pc, #216]	; (8007388 <fw_nav+0x17c>)
 80072ae:	fb82 0203 	smull	r0, r2, r2, r3
 80072b2:	1092      	asrs	r2, r2, #2
 80072b4:	17db      	asrs	r3, r3, #31
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	b21b      	sxth	r3, r3
 80072ba:	1acb      	subs	r3, r1, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfb8      	it	lt
 80072c0:	425b      	neglt	r3, r3
 80072c2:	2b0a      	cmp	r3, #10
 80072c4:	dd0d      	ble.n	80072e2 <fw_nav+0xd6>
 80072c6:	4b32      	ldr	r3, [pc, #200]	; (8007390 <fw_nav+0x184>)
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	2bc8      	cmp	r3, #200	; 0xc8
 80072cc:	d909      	bls.n	80072e2 <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 80072ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80072d2:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <fw_nav+0x17c>)
 80072d4:	fb82 1203 	smull	r1, r2, r2, r3
 80072d8:	1092      	asrs	r2, r2, #2
 80072da:	17db      	asrs	r3, r3, #31
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072e0:	e00c      	b.n	80072fc <fw_nav+0xf0>
        else
            Current_Heading = heading;
 80072e2:	4b2a      	ldr	r3, [pc, #168]	; (800738c <fw_nav+0x180>)
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072e8:	e008      	b.n	80072fc <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 80072ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80072ee:	4a26      	ldr	r2, [pc, #152]	; (8007388 <fw_nav+0x17c>)
 80072f0:	fb82 1203 	smull	r1, r2, r2, r3
 80072f4:	1092      	asrs	r2, r2, #2
 80072f6:	17db      	asrs	r3, r3, #31
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <fw_nav+0x188>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a25      	ldr	r2, [pc, #148]	; (8007398 <fw_nav+0x18c>)
 8007302:	fb82 1203 	smull	r1, r2, r2, r3
 8007306:	1152      	asrs	r2, r2, #5
 8007308:	17db      	asrs	r3, r3, #31
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	b21a      	sxth	r2, r3
 800730e:	4b23      	ldr	r3, [pc, #140]	; (800739c <fw_nav+0x190>)
 8007310:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 8007312:	4b22      	ldr	r3, [pc, #136]	; (800739c <fw_nav+0x190>)
 8007314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007318:	b29a      	uxth	r2, r3
 800731a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	b29b      	uxth	r3, r3
 8007320:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 8007322:	8b3a      	ldrh	r2, [r7, #24]
 8007324:	8afb      	ldrh	r3, [r7, #22]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	b29b      	uxth	r3, r3
 800732a:	b21a      	sxth	r2, r3
 800732c:	4b1c      	ldr	r3, [pc, #112]	; (80073a0 <fw_nav+0x194>)
 800732e:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007330:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <fw_nav+0x198>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b1c      	ldr	r3, [pc, #112]	; (80073a8 <fw_nav+0x19c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <fw_nav+0x1a0>)
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	4293      	cmp	r3, r2
 8007340:	f0c0 83e9 	bcc.w	8007b16 <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 8007344:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <fw_nav+0x198>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <fw_nav+0x19c>)
 800734a:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 800734c:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <fw_nav+0x194>)
 800734e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfb8      	it	lt
 8007356:	425b      	neglt	r3, r3
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d12a      	bne.n	80073b4 <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 800735e:	4b04      	ldr	r3, [pc, #16]	; (8007370 <fw_nav+0x164>)
 8007360:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8007364:	b21a      	sxth	r2, r3
 8007366:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <fw_nav+0x1a4>)
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e03f      	b.n	80073ec <fw_nav+0x1e0>
 800736c:	20001a7a 	.word	0x20001a7a
 8007370:	20001120 	.word	0x20001120
 8007374:	200019bc 	.word	0x200019bc
 8007378:	20001a6e 	.word	0x20001a6e
 800737c:	20001a50 	.word	0x20001a50
 8007380:	20001a5c 	.word	0x20001a5c
 8007384:	20001980 	.word	0x20001980
 8007388:	66666667 	.word	0x66666667
 800738c:	20001cac 	.word	0x20001cac
 8007390:	20001a70 	.word	0x20001a70
 8007394:	200016e4 	.word	0x200016e4
 8007398:	51eb851f 	.word	0x51eb851f
 800739c:	20001288 	.word	0x20001288
 80073a0:	2000128a 	.word	0x2000128a
 80073a4:	200020d8 	.word	0x200020d8
 80073a8:	2000128c 	.word	0x2000128c
 80073ac:	20000026 	.word	0x20000026
 80073b0:	20001290 	.word	0x20001290
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80073b4:	4b99      	ldr	r3, [pc, #612]	; (800761c <fw_nav+0x410>)
 80073b6:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80073ba:	461a      	mov	r2, r3
 80073bc:	4b98      	ldr	r3, [pc, #608]	; (8007620 <fw_nav+0x414>)
 80073be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073c2:	4619      	mov	r1, r3
 80073c4:	4b95      	ldr	r3, [pc, #596]	; (800761c <fw_nav+0x410>)
 80073c6:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	4a92      	ldr	r2, [pc, #584]	; (800761c <fw_nav+0x410>)
 80073d2:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 80073d6:	4611      	mov	r1, r2
 80073d8:	4a90      	ldr	r2, [pc, #576]	; (800761c <fw_nav+0x410>)
 80073da:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fc fc64 	bl	8003cac <constrain>
 80073e4:	4603      	mov	r3, r0
 80073e6:	b21a      	sxth	r2, r3
 80073e8:	4b8e      	ldr	r3, [pc, #568]	; (8007624 <fw_nav+0x418>)
 80073ea:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 80073ec:	4b8e      	ldr	r3, [pc, #568]	; (8007628 <fw_nav+0x41c>)
 80073ee:	7cdb      	ldrb	r3, [r3, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <fw_nav+0x1f8>
 80073f4:	4b8a      	ldr	r3, [pc, #552]	; (8007620 <fw_nav+0x414>)
 80073f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	db02      	blt.n	8007404 <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 80073fe:	4b8a      	ldr	r3, [pc, #552]	; (8007628 <fw_nav+0x41c>)
 8007400:	2200      	movs	r2, #0
 8007402:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 8007404:	4b88      	ldr	r3, [pc, #544]	; (8007628 <fw_nav+0x41c>)
 8007406:	79db      	ldrb	r3, [r3, #7]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d02c      	beq.n	8007466 <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 800740c:	4b86      	ldr	r3, [pc, #536]	; (8007628 <fw_nav+0x41c>)
 800740e:	7cdb      	ldrb	r3, [r3, #19]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d019      	beq.n	8007448 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 8007414:	4b81      	ldr	r3, [pc, #516]	; (800761c <fw_nav+0x410>)
 8007416:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 800741a:	b29b      	uxth	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	0352      	lsls	r2, r2, #13
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	0092      	lsls	r2, r2, #2
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	b29b      	uxth	r3, r3
 800742a:	b21a      	sxth	r2, r3
 800742c:	4b7c      	ldr	r3, [pc, #496]	; (8007620 <fw_nav+0x414>)
 800742e:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007430:	4b7a      	ldr	r3, [pc, #488]	; (800761c <fw_nav+0x410>)
 8007432:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007436:	b21a      	sxth	r2, r3
 8007438:	4b7a      	ldr	r3, [pc, #488]	; (8007624 <fw_nav+0x418>)
 800743a:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 800743c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007440:	2b18      	cmp	r3, #24
 8007442:	dc01      	bgt.n	8007448 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 8007444:	2300      	movs	r3, #0
 8007446:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007448:	4b78      	ldr	r3, [pc, #480]	; (800762c <fw_nav+0x420>)
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	2b31      	cmp	r3, #49	; 0x31
 800744e:	d80a      	bhi.n	8007466 <fw_nav+0x25a>
 8007450:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007454:	7f7b      	ldrb	r3, [r7, #29]
 8007456:	429a      	cmp	r2, r3
 8007458:	dd05      	ble.n	8007466 <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 800745a:	4b75      	ldr	r3, [pc, #468]	; (8007630 <fw_nav+0x424>)
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	7f7b      	ldrb	r3, [r7, #29]
 8007460:	4413      	add	r3, r2
 8007462:	4a74      	ldr	r2, [pc, #464]	; (8007634 <fw_nav+0x428>)
 8007464:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 8007466:	4b70      	ldr	r3, [pc, #448]	; (8007628 <fw_nav+0x41c>)
 8007468:	7c9b      	ldrb	r3, [r3, #18]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00e      	beq.n	800748c <fw_nav+0x280>
 800746e:	4b6f      	ldr	r3, [pc, #444]	; (800762c <fw_nav+0x420>)
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	2b09      	cmp	r3, #9
 8007474:	d80a      	bhi.n	800748c <fw_nav+0x280>
            f.ARMED = 0;
 8007476:	4b6c      	ldr	r3, [pc, #432]	; (8007628 <fw_nav+0x41c>)
 8007478:	2200      	movs	r2, #0
 800747a:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 800747c:	4b6a      	ldr	r3, [pc, #424]	; (8007628 <fw_nav+0x41c>)
 800747e:	2200      	movs	r2, #0
 8007480:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 8007482:	4b6b      	ldr	r3, [pc, #428]	; (8007630 <fw_nav+0x424>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	3305      	adds	r3, #5
 8007488:	4a6a      	ldr	r2, [pc, #424]	; (8007634 <fw_nav+0x428>)
 800748a:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 800748c:	4b67      	ldr	r3, [pc, #412]	; (800762c <fw_nav+0x420>)
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	2b09      	cmp	r3, #9
 8007492:	d80e      	bhi.n	80074b2 <fw_nav+0x2a6>
            navDiff *= 0.1f;
 8007494:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074a0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007638 <fw_nav+0x42c>
 80074a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ac:	ee17 3a90 	vmov	r3, s15
 80074b0:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 80074b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074b6:	2264      	movs	r2, #100	; 0x64
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	4618      	mov	r0, r3
 80074be:	f002 f935 	bl	800972c <wrap_18000>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a5d      	ldr	r2, [pc, #372]	; (800763c <fw_nav+0x430>)
 80074c6:	fb82 1203 	smull	r1, r2, r2, r3
 80074ca:	1152      	asrs	r2, r2, #5
 80074cc:	17db      	asrs	r3, r3, #31
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 80074d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bfb8      	it	lt
 80074da:	425b      	neglt	r3, r3
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2baa      	cmp	r3, #170	; 0xaa
 80074e0:	d901      	bls.n	80074e6 <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 80074e2:	23af      	movs	r3, #175	; 0xaf
 80074e4:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 80074e6:	4b56      	ldr	r3, [pc, #344]	; (8007640 <fw_nav+0x434>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b56      	ldr	r3, [pc, #344]	; (8007644 <fw_nav+0x438>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074f8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007648 <fw_nav+0x43c>
 80074fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007500:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 8007504:	4b4e      	ldr	r3, [pc, #312]	; (8007640 <fw_nav+0x434>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a4e      	ldr	r2, [pc, #312]	; (8007644 <fw_nav+0x438>)
 800750a:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 800750c:	4b44      	ldr	r3, [pc, #272]	; (8007620 <fw_nav+0x414>)
 800750e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfb8      	it	lt
 8007516:	425b      	neglt	r3, r3
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d809      	bhi.n	8007532 <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 800751e:	4b4b      	ldr	r3, [pc, #300]	; (800764c <fw_nav+0x440>)
 8007520:	ed93 7a00 	vldr	s14, [r3]
 8007524:	edd7 7a04 	vldr	s15, [r7, #16]
 8007528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752c:	4b47      	ldr	r3, [pc, #284]	; (800764c <fw_nav+0x440>)
 800752e:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 8007532:	4b3b      	ldr	r3, [pc, #236]	; (8007620 <fw_nav+0x414>)
 8007534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007538:	b29b      	uxth	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	4413      	add	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	b29b      	uxth	r3, r3
 8007544:	b21a      	sxth	r2, r3
 8007546:	4b36      	ldr	r3, [pc, #216]	; (8007620 <fw_nav+0x414>)
 8007548:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 800754a:	4b35      	ldr	r3, [pc, #212]	; (8007620 <fw_nav+0x414>)
 800754c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007558:	4b3d      	ldr	r3, [pc, #244]	; (8007650 <fw_nav+0x444>)
 800755a:	edd3 7a01 	vldr	s15, [r3, #4]
 800755e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007562:	edd7 7a04 	vldr	s15, [r7, #16]
 8007566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800756a:	4b38      	ldr	r3, [pc, #224]	; (800764c <fw_nav+0x440>)
 800756c:	edd3 7a00 	vldr	s15, [r3]
 8007570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007574:	4b35      	ldr	r3, [pc, #212]	; (800764c <fw_nav+0x440>)
 8007576:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 800757a:	4b34      	ldr	r3, [pc, #208]	; (800764c <fw_nav+0x440>)
 800757c:	edd3 7a00 	vldr	s15, [r3]
 8007580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007588:	4932      	ldr	r1, [pc, #200]	; (8007654 <fw_nav+0x448>)
 800758a:	ee17 0a90 	vmov	r0, s15
 800758e:	f7fc fb8d 	bl	8003cac <constrain>
 8007592:	ee07 0a90 	vmov	s15, r0
 8007596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800759a:	4b2c      	ldr	r3, [pc, #176]	; (800764c <fw_nav+0x440>)
 800759c:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 80075a0:	4b1f      	ldr	r3, [pc, #124]	; (8007620 <fw_nav+0x414>)
 80075a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	4b2b      	ldr	r3, [pc, #172]	; (8007658 <fw_nav+0x44c>)
 80075aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80075b8:	4b19      	ldr	r3, [pc, #100]	; (8007620 <fw_nav+0x414>)
 80075ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075be:	4b26      	ldr	r3, [pc, #152]	; (8007658 <fw_nav+0x44c>)
 80075c0:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80075c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bfb8      	it	lt
 80075ca:	425b      	neglt	r3, r3
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b64      	cmp	r3, #100	; 0x64
 80075d0:	d901      	bls.n	80075d6 <fw_nav+0x3ca>
            delta[0] = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075dc:	e00f      	b.n	80075fe <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 80075de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075e8:	491c      	ldr	r1, [pc, #112]	; (800765c <fw_nav+0x450>)
 80075ea:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80075ee:	4a1b      	ldr	r2, [pc, #108]	; (800765c <fw_nav+0x450>)
 80075f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f8:	3301      	adds	r3, #1
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007602:	2b04      	cmp	r3, #4
 8007604:	d9eb      	bls.n	80075de <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 8007606:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800760a:	4b14      	ldr	r3, [pc, #80]	; (800765c <fw_nav+0x450>)
 800760c:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <fw_nav+0x454>)
 8007610:	2200      	movs	r2, #0
 8007612:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761a:	e037      	b.n	800768c <fw_nav+0x480>
 800761c:	20001120 	.word	0x20001120
 8007620:	2000128a 	.word	0x2000128a
 8007624:	20001290 	.word	0x20001290
 8007628:	20001980 	.word	0x20001980
 800762c:	20001a6a 	.word	0x20001a6a
 8007630:	20001a50 	.word	0x20001a50
 8007634:	20001a5c 	.word	0x20001a5c
 8007638:	3dcccccd 	.word	0x3dcccccd
 800763c:	51eb851f 	.word	0x51eb851f
 8007640:	200020d8 	.word	0x200020d8
 8007644:	20001294 	.word	0x20001294
 8007648:	447a0000 	.word	0x447a0000
 800764c:	20001264 	.word	0x20001264
 8007650:	200015e0 	.word	0x200015e0
 8007654:	fffffe0c 	.word	0xfffffe0c
 8007658:	20001268 	.word	0x20001268
 800765c:	20001270 	.word	0x20001270
 8007660:	20001298 	.word	0x20001298
            ALT_deltaSum += altHist[i];
 8007664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007668:	4a64      	ldr	r2, [pc, #400]	; (80077fc <fw_nav+0x5f0>)
 800766a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800766e:	b29a      	uxth	r2, r3
 8007670:	4b63      	ldr	r3, [pc, #396]	; (8007800 <fw_nav+0x5f4>)
 8007672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007676:	b29b      	uxth	r3, r3
 8007678:	4413      	add	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	b21a      	sxth	r2, r3
 800767e:	4b60      	ldr	r3, [pc, #384]	; (8007800 <fw_nav+0x5f4>)
 8007680:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007686:	3301      	adds	r3, #1
 8007688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007690:	2b04      	cmp	r3, #4
 8007692:	d9e7      	bls.n	8007664 <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 8007694:	4b5a      	ldr	r3, [pc, #360]	; (8007800 <fw_nav+0x5f4>)
 8007696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076a2:	4b58      	ldr	r3, [pc, #352]	; (8007804 <fw_nav+0x5f8>)
 80076a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80076a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80076ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80076b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b8:	ee17 3a90 	vmov	r3, s15
 80076bc:	b21a      	sxth	r2, r3
 80076be:	4b50      	ldr	r3, [pc, #320]	; (8007800 <fw_nav+0x5f4>)
 80076c0:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80076c2:	4b51      	ldr	r3, [pc, #324]	; (8007808 <fw_nav+0x5fc>)
 80076c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076d0:	4b4c      	ldr	r3, [pc, #304]	; (8007804 <fw_nav+0x5f8>)
 80076d2:	edd3 7a00 	vldr	s15, [r3]
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076de:	ee17 3a90 	vmov	r3, s15
 80076e2:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 80076e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076f0:	4b46      	ldr	r3, [pc, #280]	; (800780c <fw_nav+0x600>)
 80076f2:	edd3 7a00 	vldr	s15, [r3]
 80076f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076fe:	ee17 3a90 	vmov	r3, s15
 8007702:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 8007704:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfb8      	it	lt
 800770c:	425b      	neglt	r3, r3
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b03      	cmp	r3, #3
 8007712:	d809      	bhi.n	8007728 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 8007714:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <fw_nav+0x604>)
 8007716:	ed93 7a00 	vldr	s14, [r3]
 800771a:	edd7 7a04 	vldr	s15, [r7, #16]
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	4b3b      	ldr	r3, [pc, #236]	; (8007810 <fw_nav+0x604>)
 8007724:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772a:	461a      	mov	r2, r3
 800772c:	0092      	lsls	r2, r2, #2
 800772e:	4413      	add	r3, r2
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 8007736:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007742:	4b34      	ldr	r3, [pc, #208]	; (8007814 <fw_nav+0x608>)
 8007744:	edd3 7a01 	vldr	s15, [r3, #4]
 8007748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800774c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007754:	4b2e      	ldr	r3, [pc, #184]	; (8007810 <fw_nav+0x604>)
 8007756:	edd3 7a00 	vldr	s15, [r3]
 800775a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800775e:	4b2c      	ldr	r3, [pc, #176]	; (8007810 <fw_nav+0x604>)
 8007760:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 8007764:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <fw_nav+0x604>)
 8007766:	edd3 7a00 	vldr	s15, [r3]
 800776a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800776e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007772:	4929      	ldr	r1, [pc, #164]	; (8007818 <fw_nav+0x60c>)
 8007774:	ee17 0a90 	vmov	r0, s15
 8007778:	f7fc fa98 	bl	8003cac <constrain>
 800777c:	ee07 0a90 	vmov	s15, r0
 8007780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007784:	4b22      	ldr	r3, [pc, #136]	; (8007810 <fw_nav+0x604>)
 8007786:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 800778a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800778c:	4b23      	ldr	r3, [pc, #140]	; (800781c <fw_nav+0x610>)
 800778e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007792:	b29b      	uxth	r3, r3
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	b29b      	uxth	r3, r3
 8007798:	b21b      	sxth	r3, r3
 800779a:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <fw_nav+0x610>)
 800779e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077a0:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 80077a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfb8      	it	lt
 80077aa:	425b      	neglt	r3, r3
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b64      	cmp	r3, #100	; 0x64
 80077b0:	d901      	bls.n	80077b6 <fw_nav+0x5aa>
            delta[1] = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077bc:	e00f      	b.n	80077de <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80077be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c8:	4915      	ldr	r1, [pc, #84]	; (8007820 <fw_nav+0x614>)
 80077ca:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80077ce:	4a14      	ldr	r2, [pc, #80]	; (8007820 <fw_nav+0x614>)
 80077d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80077d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d8:	3301      	adds	r3, #1
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d9eb      	bls.n	80077be <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 80077e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077ea:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <fw_nav+0x614>)
 80077ec:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <fw_nav+0x618>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80077f4:	2300      	movs	r3, #0
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fa:	e029      	b.n	8007850 <fw_nav+0x644>
 80077fc:	20001270 	.word	0x20001270
 8007800:	20001298 	.word	0x20001298
 8007804:	200015e0 	.word	0x200015e0
 8007808:	2000128a 	.word	0x2000128a
 800780c:	20001264 	.word	0x20001264
 8007810:	20001260 	.word	0x20001260
 8007814:	200015d0 	.word	0x200015d0
 8007818:	fffffe0c 	.word	0xfffffe0c
 800781c:	2000126a 	.word	0x2000126a
 8007820:	2000127c 	.word	0x2000127c
 8007824:	2000129a 	.word	0x2000129a
            NAV_deltaSum += navDif[i];
 8007828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800782c:	4abc      	ldr	r2, [pc, #752]	; (8007b20 <fw_nav+0x914>)
 800782e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007832:	b29a      	uxth	r2, r3
 8007834:	4bbb      	ldr	r3, [pc, #748]	; (8007b24 <fw_nav+0x918>)
 8007836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800783a:	b29b      	uxth	r3, r3
 800783c:	4413      	add	r3, r2
 800783e:	b29b      	uxth	r3, r3
 8007840:	b21a      	sxth	r2, r3
 8007842:	4bb8      	ldr	r3, [pc, #736]	; (8007b24 <fw_nav+0x918>)
 8007844:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 8007846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800784a:	3301      	adds	r3, #1
 800784c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007854:	2b04      	cmp	r3, #4
 8007856:	d9e7      	bls.n	8007828 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007858:	4bb2      	ldr	r3, [pc, #712]	; (8007b24 <fw_nav+0x918>)
 800785a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007866:	4bb0      	ldr	r3, [pc, #704]	; (8007b28 <fw_nav+0x91c>)
 8007868:	edd3 7a02 	vldr	s15, [r3, #8]
 800786c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007870:	ed97 7a04 	vldr	s14, [r7, #16]
 8007874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800787c:	ee17 3a90 	vmov	r3, s15
 8007880:	b21a      	sxth	r2, r3
 8007882:	4ba8      	ldr	r3, [pc, #672]	; (8007b24 <fw_nav+0x918>)
 8007884:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 8007886:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007892:	4ba5      	ldr	r3, [pc, #660]	; (8007b28 <fw_nav+0x91c>)
 8007894:	edd3 7a00 	vldr	s15, [r3]
 8007898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078a0:	ee17 3a90 	vmov	r3, s15
 80078a4:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 80078a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078b2:	4b9e      	ldr	r3, [pc, #632]	; (8007b2c <fw_nav+0x920>)
 80078b4:	edd3 7a00 	vldr	s15, [r3]
 80078b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078c0:	ee17 3a90 	vmov	r3, s15
 80078c4:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 80078c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80078ca:	4a99      	ldr	r2, [pc, #612]	; (8007b30 <fw_nav+0x924>)
 80078cc:	fb82 1203 	smull	r1, r2, r2, r3
 80078d0:	1092      	asrs	r2, r2, #2
 80078d2:	17db      	asrs	r3, r3, #31
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	b21b      	sxth	r3, r3
 80078d8:	4618      	mov	r0, r3
 80078da:	4b96      	ldr	r3, [pc, #600]	; (8007b34 <fw_nav+0x928>)
 80078dc:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80078e0:	461a      	mov	r2, r3
 80078e2:	f06f 0309 	mvn.w	r3, #9
 80078e6:	fb03 f102 	mul.w	r1, r3, r2
 80078ea:	4b92      	ldr	r3, [pc, #584]	; (8007b34 <fw_nav+0x928>)
 80078ec:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80078f0:	461a      	mov	r2, r3
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	461a      	mov	r2, r3
 80078fc:	f7fc f9d6 	bl	8003cac <constrain>
 8007900:	4603      	mov	r3, r0
 8007902:	b29a      	uxth	r2, r3
 8007904:	4b8c      	ldr	r3, [pc, #560]	; (8007b38 <fw_nav+0x92c>)
 8007906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800790a:	b29b      	uxth	r3, r3
 800790c:	4413      	add	r3, r2
 800790e:	b29b      	uxth	r3, r3
 8007910:	b21a      	sxth	r2, r3
 8007912:	4b8a      	ldr	r3, [pc, #552]	; (8007b3c <fw_nav+0x930>)
 8007914:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 8007916:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800791a:	4a85      	ldr	r2, [pc, #532]	; (8007b30 <fw_nav+0x924>)
 800791c:	fb82 1203 	smull	r1, r2, r2, r3
 8007920:	1092      	asrs	r2, r2, #2
 8007922:	17db      	asrs	r3, r3, #31
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	b21b      	sxth	r3, r3
 8007928:	4618      	mov	r0, r3
 800792a:	4b82      	ldr	r3, [pc, #520]	; (8007b34 <fw_nav+0x928>)
 800792c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007930:	461a      	mov	r2, r3
 8007932:	f06f 0309 	mvn.w	r3, #9
 8007936:	fb03 f102 	mul.w	r1, r3, r2
 800793a:	4b7e      	ldr	r3, [pc, #504]	; (8007b34 <fw_nav+0x928>)
 800793c:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007940:	461a      	mov	r2, r3
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	461a      	mov	r2, r3
 800794c:	f7fc f9ae 	bl	8003cac <constrain>
 8007950:	4603      	mov	r3, r0
 8007952:	b29a      	uxth	r2, r3
 8007954:	4b73      	ldr	r3, [pc, #460]	; (8007b24 <fw_nav+0x918>)
 8007956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800795a:	b29b      	uxth	r3, r3
 800795c:	4413      	add	r3, r2
 800795e:	b29b      	uxth	r3, r3
 8007960:	b21a      	sxth	r2, r3
 8007962:	4b76      	ldr	r3, [pc, #472]	; (8007b3c <fw_nav+0x930>)
 8007964:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 8007966:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800796a:	4a71      	ldr	r2, [pc, #452]	; (8007b30 <fw_nav+0x924>)
 800796c:	fb82 1203 	smull	r1, r2, r2, r3
 8007970:	1092      	asrs	r2, r2, #2
 8007972:	17db      	asrs	r3, r3, #31
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	b21b      	sxth	r3, r3
 8007978:	4618      	mov	r0, r3
 800797a:	4b6e      	ldr	r3, [pc, #440]	; (8007b34 <fw_nav+0x928>)
 800797c:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007980:	461a      	mov	r2, r3
 8007982:	f06f 0309 	mvn.w	r3, #9
 8007986:	fb03 f102 	mul.w	r1, r3, r2
 800798a:	4b6a      	ldr	r3, [pc, #424]	; (8007b34 <fw_nav+0x928>)
 800798c:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8007990:	461a      	mov	r2, r3
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	461a      	mov	r2, r3
 800799c:	f7fc f986 	bl	8003cac <constrain>
 80079a0:	4603      	mov	r3, r0
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	4b5f      	ldr	r3, [pc, #380]	; (8007b24 <fw_nav+0x918>)
 80079a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4413      	add	r3, r2
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	b21a      	sxth	r2, r3
 80079b2:	4b62      	ldr	r3, [pc, #392]	; (8007b3c <fw_nav+0x930>)
 80079b4:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 80079b6:	4b62      	ldr	r3, [pc, #392]	; (8007b40 <fw_nav+0x934>)
 80079b8:	7c5b      	ldrb	r3, [r3, #17]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d016      	beq.n	80079ec <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 80079be:	4b5f      	ldr	r3, [pc, #380]	; (8007b3c <fw_nav+0x930>)
 80079c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079c4:	4618      	mov	r0, r3
 80079c6:	4b5b      	ldr	r3, [pc, #364]	; (8007b34 <fw_nav+0x928>)
 80079c8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80079cc:	4259      	negs	r1, r3
 80079ce:	4b59      	ldr	r3, [pc, #356]	; (8007b34 <fw_nav+0x928>)
 80079d0:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80079d4:	461a      	mov	r2, r3
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	461a      	mov	r2, r3
 80079e0:	f7fc f964 	bl	8003cac <constrain>
 80079e4:	4603      	mov	r3, r0
 80079e6:	b21a      	sxth	r2, r3
 80079e8:	4b54      	ldr	r3, [pc, #336]	; (8007b3c <fw_nav+0x930>)
 80079ea:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 80079ec:	4b54      	ldr	r3, [pc, #336]	; (8007b40 <fw_nav+0x934>)
 80079ee:	7cdb      	ldrb	r3, [r3, #19]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d11b      	bne.n	8007a2c <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 80079f4:	4b51      	ldr	r3, [pc, #324]	; (8007b3c <fw_nav+0x930>)
 80079f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	4b51      	ldr	r3, [pc, #324]	; (8007b44 <fw_nav+0x938>)
 80079fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfb8      	it	lt
 8007a06:	425b      	neglt	r3, r3
 8007a08:	b299      	uxth	r1, r3
 8007a0a:	4b4a      	ldr	r3, [pc, #296]	; (8007b34 <fw_nav+0x928>)
 8007a0c:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007a10:	484d      	ldr	r0, [pc, #308]	; (8007b48 <fw_nav+0x93c>)
 8007a12:	fba0 0303 	umull	r0, r3, r0, r3
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	fb11 f303 	smulbb	r3, r1, r3
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	b21a      	sxth	r2, r3
 8007a28:	4b44      	ldr	r3, [pc, #272]	; (8007b3c <fw_nav+0x930>)
 8007a2a:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007a2c:	4b45      	ldr	r3, [pc, #276]	; (8007b44 <fw_nav+0x938>)
 8007a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a46:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	ee17 0a90 	vmov	r0, s15
 8007a50:	f7fc f92c 	bl	8003cac <constrain>
 8007a54:	4601      	mov	r1, r0
 8007a56:	4b3d      	ldr	r3, [pc, #244]	; (8007b4c <fw_nav+0x940>)
 8007a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	b28b      	uxth	r3, r1
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	b21a      	sxth	r2, r3
 8007a66:	4b39      	ldr	r3, [pc, #228]	; (8007b4c <fw_nav+0x940>)
 8007a68:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007a6a:	4b39      	ldr	r3, [pc, #228]	; (8007b50 <fw_nav+0x944>)
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a74:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8007a78:	ee07 3a90 	vmov	s15, r3
 8007a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a80:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007b54 <fw_nav+0x948>
 8007a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a8c:	ee17 3a90 	vmov	r3, s15
 8007a90:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 8007a92:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <fw_nav+0x944>)
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8007a9a:	d305      	bcc.n	8007aa8 <fw_nav+0x89c>
 8007a9c:	4b2c      	ldr	r3, [pc, #176]	; (8007b50 <fw_nav+0x944>)
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	f240 2226 	movw	r2, #550	; 0x226
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d90a      	bls.n	8007abe <fw_nav+0x8b2>
            speedBoost += spDiff;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	4b2a      	ldr	r3, [pc, #168]	; (8007b58 <fw_nav+0x94c>)
 8007aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	b21a      	sxth	r2, r3
 8007aba:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <fw_nav+0x94c>)
 8007abc:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 8007abe:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <fw_nav+0x94c>)
 8007ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ac4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fc f8ee 	bl	8003cac <constrain>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	b21a      	sxth	r2, r3
 8007ad4:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <fw_nav+0x94c>)
 8007ad6:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007ad8:	4b1c      	ldr	r3, [pc, #112]	; (8007b4c <fw_nav+0x940>)
 8007ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	4b1d      	ldr	r3, [pc, #116]	; (8007b58 <fw_nav+0x94c>)
 8007ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	b21a      	sxth	r2, r3
 8007aee:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <fw_nav+0x940>)
 8007af0:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007af2:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <fw_nav+0x940>)
 8007af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007af8:	4618      	mov	r0, r3
 8007afa:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <fw_nav+0x928>)
 8007afc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007b00:	4619      	mov	r1, r3
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <fw_nav+0x928>)
 8007b04:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f7fc f8cf 	bl	8003cac <constrain>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	b21a      	sxth	r2, r3
 8007b12:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <fw_nav+0x940>)
 8007b14:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <fw_nav+0x934>)
 8007b18:	78db      	ldrb	r3, [r3, #3]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d122      	bne.n	8007b64 <fw_nav+0x958>
 8007b1e:	e01d      	b.n	8007b5c <fw_nav+0x950>
 8007b20:	2000127c 	.word	0x2000127c
 8007b24:	2000129a 	.word	0x2000129a
 8007b28:	200015d0 	.word	0x200015d0
 8007b2c:	20001260 	.word	0x20001260
 8007b30:	66666667 	.word	0x66666667
 8007b34:	20001120 	.word	0x20001120
 8007b38:	20001298 	.word	0x20001298
 8007b3c:	20001a74 	.word	0x20001a74
 8007b40:	20001980 	.word	0x20001980
 8007b44:	20001788 	.word	0x20001788
 8007b48:	51eb851f 	.word	0x51eb851f
 8007b4c:	20001290 	.word	0x20001290
 8007b50:	20001a70 	.word	0x20001a70
 8007b54:	3dcccccd 	.word	0x3dcccccd
 8007b58:	2000126c 	.word	0x2000126c
 8007b5c:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <fw_nav+0x9ac>)
 8007b5e:	791b      	ldrb	r3, [r3, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d007      	beq.n	8007b74 <fw_nav+0x968>
 8007b64:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <fw_nav+0x9ac>)
 8007b66:	7a9b      	ldrb	r3, [r3, #10]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00f      	beq.n	8007b8c <fw_nav+0x980>
 8007b6c:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <fw_nav+0x9ac>)
 8007b6e:	7c9b      	ldrb	r3, [r3, #18]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007b74:	4a11      	ldr	r2, [pc, #68]	; (8007bbc <fw_nav+0x9b0>)
 8007b76:	8b7b      	ldrh	r3, [r7, #26]
 8007b78:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <fw_nav+0x9b4>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007b80:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <fw_nav+0x9b4>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007b86:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <fw_nav+0x9b4>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007b8c:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <fw_nav+0x9b0>)
 8007b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <fw_nav+0x9b8>)
 8007b94:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <fw_nav+0x9b8>)
 8007b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <fw_nav+0x9b4>)
 8007ba0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	b21a      	sxth	r2, r3
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <fw_nav+0x9b8>)
 8007bae:	809a      	strh	r2, [r3, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	3728      	adds	r7, #40	; 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20001980 	.word	0x20001980
 8007bbc:	20001290 	.word	0x20001290
 8007bc0:	20001a74 	.word	0x20001a74
 8007bc4:	200019e0 	.word	0x200019e0

08007bc8 <gpsSetState>:
static PifGpsNmea gps_nmea;
static PifGpsUblox gps_ublox;


static void gpsSetState(uint8_t state)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007bd2:	4a0b      	ldr	r2, [pc, #44]	; (8007c00 <gpsSetState+0x38>)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007bd8:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <gpsSetState+0x38>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <gpsSetState+0x3c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a07      	ldr	r2, [pc, #28]	; (8007c00 <gpsSetState+0x38>)
 8007be4:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <gpsSetState+0x38>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <gpsSetState+0x38>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	761a      	strb	r2, [r3, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2000129c 	.word	0x2000129c
 8007c04:	200020d8 	.word	0x200020d8

08007c08 <_evtGpsUbloxCfgResult>:

static void _evtGpsUbloxCfgResult(PifGpsUblox* p_owner, BOOL result)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
	(void)p_owner;

	gpsData.cfg_result = result ? GUCR_ACK : GUCR_NAK;
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <_evtGpsUbloxCfgResult+0x16>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <_evtGpsUbloxCfgResult+0x18>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	4a03      	ldr	r2, [pc, #12]	; (8007c30 <_evtGpsUbloxCfgResult+0x28>)
 8007c22:	61d3      	str	r3, [r2, #28]
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	2000129c 	.word	0x2000129c
 8007c34:	00000000 	.word	0x00000000

08007c38 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
    f.GPS_FIX = p_owner->_fix;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b5c      	ldr	r3, [pc, #368]	; (8007dc0 <_evtGpsReceive+0x188>)
 8007c50:	72da      	strb	r2, [r3, #11]
    if (f.GPS_FIX) {
 8007c52:	4b5b      	ldr	r3, [pc, #364]	; (8007dc0 <_evtGpsReceive+0x188>)
 8007c54:	7adb      	ldrb	r3, [r3, #11]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d049      	beq.n	8007cee <_evtGpsReceive+0xb6>
        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007c60:	a355      	add	r3, pc, #340	; (adr r3, 8007db8 <_evtGpsReceive+0x180>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fc85 	bl	8000574 <__aeabi_dmul>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	f7f8 ff19 	bl	8000aa8 <__aeabi_d2iz>
 8007c76:	4603      	mov	r3, r0
 8007c78:	4a52      	ldr	r2, [pc, #328]	; (8007dc4 <_evtGpsReceive+0x18c>)
 8007c7a:	6013      	str	r3, [r2, #0]
        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007c82:	a34d      	add	r3, pc, #308	; (adr r3, 8007db8 <_evtGpsReceive+0x180>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fc74 	bl	8000574 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4610      	mov	r0, r2
 8007c92:	4619      	mov	r1, r3
 8007c94:	f7f8 ff08 	bl	8000aa8 <__aeabi_d2iz>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4a4a      	ldr	r2, [pc, #296]	; (8007dc4 <_evtGpsReceive+0x18c>)
 8007c9c:	6053      	str	r3, [r2, #4]
        GPS_numSat = p_owner->_num_sat;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007ca4:	4b48      	ldr	r3, [pc, #288]	; (8007dc8 <_evtGpsReceive+0x190>)
 8007ca6:	701a      	strb	r2, [r3, #0]
        GPS_altitude = p_owner->_altitude;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f7f8 ff21 	bl	8000af8 <__aeabi_d2uiz>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	4b44      	ldr	r3, [pc, #272]	; (8007dcc <_evtGpsReceive+0x194>)
 8007cbc:	801a      	strh	r2, [r3, #0]
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007cbe:	2004      	movs	r0, #4
 8007cc0:	f7ff f92a 	bl	8006f18 <sensors>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f083 0301 	eor.w	r3, r3, #1
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00e      	beq.n	8007cee <_evtGpsReceive+0xb6>
 8007cd0:	4b3b      	ldr	r3, [pc, #236]	; (8007dc0 <_evtGpsReceive+0x188>)
 8007cd2:	7c1b      	ldrb	r3, [r3, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <_evtGpsReceive+0xb6>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007cd8:	4b3c      	ldr	r3, [pc, #240]	; (8007dcc <_evtGpsReceive+0x194>)
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4b3c      	ldr	r3, [pc, #240]	; (8007dd0 <_evtGpsReceive+0x198>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2264      	movs	r2, #100	; 0x64
 8007ce6:	fb02 f303 	mul.w	r3, r2, r3
 8007cea:	4a3a      	ldr	r2, [pc, #232]	; (8007dd4 <_evtGpsReceive+0x19c>)
 8007cec:	6013      	str	r3, [r2, #0]
    }

    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <_evtGpsReceive+0x1a0>)
 8007cfa:	f7f8 fd65 	bl	80007c8 <__aeabi_ddiv>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	f7f8 fef7 	bl	8000af8 <__aeabi_d2uiz>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	4b33      	ldr	r3, [pc, #204]	; (8007ddc <_evtGpsReceive+0x1a4>)
 8007d10:	801a      	strh	r2, [r3, #0]
    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <_evtGpsReceive+0x1a0>)
 8007d1e:	f7f8 fc29 	bl	8000574 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	f7f8 fee5 	bl	8000af8 <__aeabi_d2uiz>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	4b2b      	ldr	r3, [pc, #172]	; (8007de0 <_evtGpsReceive+0x1a8>)
 8007d34:	801a      	strh	r2, [r3, #0]
    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007d36:	2008      	movs	r0, #8
 8007d38:	f7ff f8ee 	bl	8006f18 <sensors>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f083 0301 	eor.w	r3, r3, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d021      	beq.n	8007d8c <_evtGpsReceive+0x154>
 8007d48:	4b24      	ldr	r3, [pc, #144]	; (8007ddc <_evtGpsReceive+0x1a4>)
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	2b64      	cmp	r3, #100	; 0x64
 8007d4e:	d91d      	bls.n	8007d8c <_evtGpsReceive+0x154>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007d50:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <_evtGpsReceive+0x1a8>)
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fce4 	bl	800972c <wrap_18000>
 8007d64:	4603      	mov	r3, r0
 8007d66:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <_evtGpsReceive+0x1ac>)
 8007d68:	fb82 1203 	smull	r1, r2, r2, r3
 8007d6c:	1092      	asrs	r2, r2, #2
 8007d6e:	17db      	asrs	r3, r3, #31
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <_evtGpsReceive+0x1a8>)
 8007d76:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007d78:	4b19      	ldr	r3, [pc, #100]	; (8007de0 <_evtGpsReceive+0x1a8>)
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <_evtGpsReceive+0x1b0>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	08db      	lsrs	r3, r3, #3
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	b21a      	sxth	r2, r3
 8007d88:	4b18      	ldr	r3, [pc, #96]	; (8007dec <_evtGpsReceive+0x1b4>)
 8007d8a:	801a      	strh	r2, [r3, #0]
    }

    GPS_HorizontalAcc = p_owner->_horizontal_acc;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	4a17      	ldr	r2, [pc, #92]	; (8007df0 <_evtGpsReceive+0x1b8>)
 8007d92:	6013      	str	r3, [r2, #0]
    GPS_VerticalAcc = p_owner->_vertical_acc;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d98:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <_evtGpsReceive+0x1bc>)
 8007d9a:	6013      	str	r3, [r2, #0]

    g_task_gps->immediate = TRUE;
 8007d9c:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <_evtGpsReceive+0x1c0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2201      	movs	r2, #1
 8007da2:	705a      	strb	r2, [r3, #1]
    gpsData.receive = TRUE;
 8007da4:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <_evtGpsReceive+0x1c4>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	761a      	strb	r2, [r3, #24]
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	f3af 8000 	nop.w
 8007db8:	00000000 	.word	0x00000000
 8007dbc:	416312d0 	.word	0x416312d0
 8007dc0:	20001980 	.word	0x20001980
 8007dc4:	20001a48 	.word	0x20001a48
 8007dc8:	20001a68 	.word	0x20001a68
 8007dcc:	20001a6e 	.word	0x20001a6e
 8007dd0:	20001a50 	.word	0x20001a50
 8007dd4:	2000174c 	.word	0x2000174c
 8007dd8:	40240000 	.word	0x40240000
 8007ddc:	20001a70 	.word	0x20001a70
 8007de0:	20001a7a 	.word	0x20001a7a
 8007de4:	66666667 	.word	0x66666667
 8007de8:	cccccccd 	.word	0xcccccccd
 8007dec:	20001cac 	.word	0x20001cac
 8007df0:	20001b18 	.word	0x20001b18
 8007df4:	20001b1c 	.word	0x20001b1c
 8007df8:	20001b88 	.word	0x20001b88
 8007dfc:	2000129c 	.word	0x2000129c

08007e00 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    if (mcfg.gps_type != GPS_NMEA || gpsInitData[gpsData.baudrateIndex].baudrate != 9600) {
 8007e08:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <_evtGpsTimeout+0x4c>)
 8007e0a:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d108      	bne.n	8007e24 <_evtGpsTimeout+0x24>
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <_evtGpsTimeout+0x50>)
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	4a0f      	ldr	r2, [pc, #60]	; (8007e54 <_evtGpsTimeout+0x54>)
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	4413      	add	r3, r2
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007e22:	d005      	beq.n	8007e30 <_evtGpsTimeout+0x30>
        serialStopReceiveFunc(&core.gpsport->comm);
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <_evtGpsTimeout+0x58>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fa fc32 	bl	8002694 <serialStopReceiveFunc>
    }
    sensorsClear(SENSOR_GPS);
 8007e30:	2020      	movs	r0, #32
 8007e32:	f7ff f899 	bl	8006f68 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007e36:	2006      	movs	r0, #6
 8007e38:	f7ff fec6 	bl	8007bc8 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 8007e3c:	4907      	ldr	r1, [pc, #28]	; (8007e5c <_evtGpsTimeout+0x5c>)
 8007e3e:	2002      	movs	r0, #2
 8007e40:	f00b fb3c 	bl	80134bc <pifLog_Print>
#endif
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000bb4 	.word	0x20000bb4
 8007e50:	2000129c 	.word	0x2000129c
 8007e54:	080279c4 	.word	0x080279c4
 8007e58:	20000afc 	.word	0x20000afc
 8007e5c:	08026414 	.word	0x08026414

08007e60 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	460a      	mov	r2, r1
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007e70:	2000      	movs	r0, #0
 8007e72:	f7ff fea9 	bl	8007bc8 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007e76:	4a32      	ldr	r2, [pc, #200]	; (8007f40 <gpsInit+0xe0>)
 8007e78:	79bb      	ldrb	r3, [r7, #6]
 8007e7a:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007e7c:	4b31      	ldr	r3, [pc, #196]	; (8007f44 <gpsInit+0xe4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a2f      	ldr	r2, [pc, #188]	; (8007f40 <gpsInit+0xe0>)
 8007e82:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007e84:	4b2e      	ldr	r3, [pc, #184]	; (8007f40 <gpsInit+0xe0>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007e8a:	f000 ff0f 	bl	8008cac <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX);    // signal GPS "thread" to initialize when it gets to it
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2203      	movs	r2, #3
 8007e92:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fa faa6 	bl	80023e8 <uartOpen>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	4a2a      	ldr	r2, [pc, #168]	; (8007f48 <gpsInit+0xe8>)
 8007ea0:	6093      	str	r3, [r2, #8]
    if (mcfg.gps_type == GPS_NMEA && gpsInitData[baudrateIndex].baudrate == 9600) {
 8007ea2:	4b2a      	ldr	r3, [pc, #168]	; (8007f4c <gpsInit+0xec>)
 8007ea4:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d125      	bne.n	8007ef8 <gpsInit+0x98>
 8007eac:	79bb      	ldrb	r3, [r7, #6]
 8007eae:	4a28      	ldr	r2, [pc, #160]	; (8007f50 <gpsInit+0xf0>)
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007eba:	d11d      	bne.n	8007ef8 <gpsInit+0x98>
    	serialStartReceiveFunc(&core.gpsport->comm);
 8007ebc:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <gpsInit+0xe8>)
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fa fbc2 	bl	800264c <serialStartReceiveFunc>

        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4822      	ldr	r0, [pc, #136]	; (8007f54 <gpsInit+0xf4>)
 8007ecc:	f00e fb16 	bl	80164fc <pifGpsNmea_Init>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d02e      	beq.n	8007f34 <gpsInit+0xd4>
        gps_nmea._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007ed6:	4b1f      	ldr	r3, [pc, #124]	; (8007f54 <gpsInit+0xf4>)
 8007ed8:	2203      	movs	r2, #3
 8007eda:	701a      	strb	r2, [r3, #0]
        pifGpsNmea_AttachComm(&gps_nmea, &core.gpsport->comm);
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <gpsInit+0xe8>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	481b      	ldr	r0, [pc, #108]	; (8007f54 <gpsInit+0xf4>)
 8007ee6:	f00e fb3f 	bl	8016568 <pifGpsNmea_AttachComm>
        gps_nmea._gps.evt_receive = _evtGpsReceive;
 8007eea:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <gpsInit+0xf4>)
 8007eec:	4a1a      	ldr	r2, [pc, #104]	; (8007f58 <gpsInit+0xf8>)
 8007eee:	605a      	str	r2, [r3, #4]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_CONFIGURATION);
 8007ef0:	2004      	movs	r0, #4
 8007ef2:	f7ff fe69 	bl	8007bc8 <gpsSetState>
 8007ef6:	e013      	b.n	8007f20 <gpsInit+0xc0>
    }
    else {
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4818      	ldr	r0, [pc, #96]	; (8007f5c <gpsInit+0xfc>)
 8007efc:	f00f f918 	bl	8017130 <pifGpsUblox_Init>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <gpsInit+0xd8>
        pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <gpsInit+0xe8>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4813      	ldr	r0, [pc, #76]	; (8007f5c <gpsInit+0xfc>)
 8007f10:	f00f f968 	bl	80171e4 <pifGpsUblox_AttachComm>
        gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007f14:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <gpsInit+0xfc>)
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <gpsInit+0xf8>)
 8007f18:	615a      	str	r2, [r3, #20]

		// signal GPS "thread" to initialize when it gets to it
		gpsSetState(GPS_INITIALIZING);
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	f7ff fe54 	bl	8007bc8 <gpsSetState>
    }

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <gpsInit+0xec>)
 8007f22:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	dd07      	ble.n	8007f3a <gpsInit+0xda>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <gpsInit+0xec>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8007f32:	e002      	b.n	8007f3a <gpsInit+0xda>
        if (!pifGpsNmea_Init(&gps_nmea, PIF_ID_AUTO)) return;
 8007f34:	bf00      	nop
 8007f36:	e000      	b.n	8007f3a <gpsInit+0xda>
        if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) return;
 8007f38:	bf00      	nop
}
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	2000129c 	.word	0x2000129c
 8007f44:	200020d8 	.word	0x200020d8
 8007f48:	20000afc 	.word	0x20000afc
 8007f4c:	20000bb4 	.word	0x20000bb4
 8007f50:	080279c4 	.word	0x080279c4
 8007f54:	200012c0 	.word	0x200012c0
 8007f58:	08007c39 	.word	0x08007c39
 8007f5c:	20001330 	.word	0x20001330

08007f60 <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
    if (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <gpsInitNmea+0x44>)
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	4a0f      	ldr	r2, [pc, #60]	; (8007fa8 <gpsInitNmea+0x48>)
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007f74:	d107      	bne.n	8007f86 <gpsInitNmea+0x26>
        pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007f76:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <gpsInitNmea+0x4c>)
 8007f78:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007f7c:	490c      	ldr	r1, [pc, #48]	; (8007fb0 <gpsInitNmea+0x50>)
 8007f7e:	480d      	ldr	r0, [pc, #52]	; (8007fb4 <gpsInitNmea+0x54>)
 8007f80:	f00d fd6c 	bl	8015a5c <pifGps_SetTimeout>
 8007f84:	e009      	b.n	8007f9a <gpsInitNmea+0x3a>
    }
    else {
        gps_ublox._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <gpsInitNmea+0x58>)
 8007f88:	2203      	movs	r2, #3
 8007f8a:	741a      	strb	r2, [r3, #16]
        pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007f8c:	4b07      	ldr	r3, [pc, #28]	; (8007fac <gpsInitNmea+0x4c>)
 8007f8e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007f92:	4907      	ldr	r1, [pc, #28]	; (8007fb0 <gpsInitNmea+0x50>)
 8007f94:	4809      	ldr	r0, [pc, #36]	; (8007fbc <gpsInitNmea+0x5c>)
 8007f96:	f00d fd61 	bl	8015a5c <pifGps_SetTimeout>
    }
    gpsSetState(GPS_RECEIVINGDATA);
 8007f9a:	2005      	movs	r0, #5
 8007f9c:	f7ff fe14 	bl	8007bc8 <gpsSetState>
}
 8007fa0:	bf00      	nop
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	2000129c 	.word	0x2000129c
 8007fa8:	080279c4 	.word	0x080279c4
 8007fac:	08007e01 	.word	0x08007e01
 8007fb0:	20001b5c 	.word	0x20001b5c
 8007fb4:	200012c0 	.word	0x200012c0
 8007fb8:	20001330 	.word	0x20001330
 8007fbc:	20001340 	.word	0x20001340

08007fc0 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af02      	add	r7, sp, #8
	static uint8_t cfg_msg_size = 0;
    uint8_t i;
    int line = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 20) {
 8007fca:	4b8c      	ldr	r3, [pc, #560]	; (80081fc <gpsInitUblox+0x23c>)
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b13      	cmp	r3, #19
 8007fd0:	dd30      	ble.n	8008034 <gpsInitUblox+0x74>
		if (gpsData.cfg_result == GUCR_ACK) {
 8007fd2:	4b8a      	ldr	r3, [pc, #552]	; (80081fc <gpsInitUblox+0x23c>)
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d112      	bne.n	8008000 <gpsInitUblox+0x40>
	  		gpsData.step = (gpsData.step - 20) + 1;
 8007fda:	4b88      	ldr	r3, [pc, #544]	; (80081fc <gpsInitUblox+0x23c>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	3b13      	subs	r3, #19
 8007fe0:	4a86      	ldr	r2, [pc, #536]	; (80081fc <gpsInitUblox+0x23c>)
 8007fe2:	60d3      	str	r3, [r2, #12]
			if (gpsData.step == cfg_msg_size) gpsData.step = 15;
 8007fe4:	4b85      	ldr	r3, [pc, #532]	; (80081fc <gpsInitUblox+0x23c>)
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	4a85      	ldr	r2, [pc, #532]	; (8008200 <gpsInitUblox+0x240>)
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d102      	bne.n	8007ff6 <gpsInitUblox+0x36>
 8007ff0:	4b82      	ldr	r3, [pc, #520]	; (80081fc <gpsInitUblox+0x23c>)
 8007ff2:	220f      	movs	r2, #15
 8007ff4:	60da      	str	r2, [r3, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007ff6:	4b83      	ldr	r3, [pc, #524]	; (8008204 <gpsInitUblox+0x244>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a80      	ldr	r2, [pc, #512]	; (80081fc <gpsInitUblox+0x23c>)
 8007ffc:	6153      	str	r3, [r2, #20]
 8007ffe:	e121      	b.n	8008244 <gpsInitUblox+0x284>
		}
		else if (gpsData.cfg_result == GUCR_NAK) {
 8008000:	4b7e      	ldr	r3, [pc, #504]	; (80081fc <gpsInitUblox+0x23c>)
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d106      	bne.n	8008016 <gpsInitUblox+0x56>
			pif_error = E_RECEIVE_NACK;
 8008008:	4b7f      	ldr	r3, [pc, #508]	; (8008208 <gpsInitUblox+0x248>)
 800800a:	2210      	movs	r2, #16
 800800c:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 800800e:	f240 1303 	movw	r3, #259	; 0x103
 8008012:	607b      	str	r3, [r7, #4]
 8008014:	e116      	b.n	8008244 <gpsInitUblox+0x284>
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 200) {
 8008016:	4b7b      	ldr	r3, [pc, #492]	; (8008204 <gpsInitUblox+0x244>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b78      	ldr	r3, [pc, #480]	; (80081fc <gpsInitUblox+0x23c>)
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2bc7      	cmp	r3, #199	; 0xc7
 8008022:	f240 810f 	bls.w	8008244 <gpsInitUblox+0x284>
				pif_error = E_TIMEOUT;
 8008026:	4b78      	ldr	r3, [pc, #480]	; (8008208 <gpsInitUblox+0x248>)
 8008028:	2207      	movs	r2, #7
 800802a:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800802c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	e107      	b.n	8008244 <gpsInitUblox+0x284>
			}
		}
	}
	else {
		if (cfg_msg_size == 0) {
 8008034:	4b72      	ldr	r3, [pc, #456]	; (8008200 <gpsInitUblox+0x240>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d109      	bne.n	8008050 <gpsInitUblox+0x90>
			cfg_msg_size = sizeof(kCfgMsg) / sizeof(kCfgMsg[0]);
 800803c:	4b70      	ldr	r3, [pc, #448]	; (8008200 <gpsInitUblox+0x240>)
 800803e:	220a      	movs	r2, #10
 8008040:	701a      	strb	r2, [r3, #0]
			gps_ublox.evt_ubx_cfg_result = _evtGpsUbloxCfgResult;
 8008042:	4b72      	ldr	r3, [pc, #456]	; (800820c <gpsInitUblox+0x24c>)
 8008044:	4a72      	ldr	r2, [pc, #456]	; (8008210 <gpsInitUblox+0x250>)
 8008046:	601a      	str	r2, [r3, #0]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8008048:	4b6e      	ldr	r3, [pc, #440]	; (8008204 <gpsInitUblox+0x244>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a6b      	ldr	r2, [pc, #428]	; (80081fc <gpsInitUblox+0x23c>)
 800804e:	6153      	str	r3, [r2, #20]
		}
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8008050:	4b6c      	ldr	r3, [pc, #432]	; (8008204 <gpsInitUblox+0x244>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	4b69      	ldr	r3, [pc, #420]	; (80081fc <gpsInitUblox+0x23c>)
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b04      	cmp	r3, #4
 800805c:	f240 8108 	bls.w	8008270 <gpsInitUblox+0x2b0>
		if (gpsData.step < cfg_msg_size) {
 8008060:	4b66      	ldr	r3, [pc, #408]	; (80081fc <gpsInitUblox+0x23c>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4a66      	ldr	r2, [pc, #408]	; (8008200 <gpsInitUblox+0x240>)
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	4293      	cmp	r3, r2
 800806a:	da26      	bge.n	80080ba <gpsInitUblox+0xfa>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsg[gpsData.step]), (uint8_t*)kCfgMsg[gpsData.step], FALSE)) {
 800806c:	4b63      	ldr	r3, [pc, #396]	; (80081fc <gpsInitUblox+0x23c>)
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	4613      	mov	r3, r2
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	4413      	add	r3, r2
 8008076:	4a67      	ldr	r2, [pc, #412]	; (8008214 <gpsInitUblox+0x254>)
 8008078:	4413      	add	r3, r2
 800807a:	2200      	movs	r2, #0
 800807c:	9201      	str	r2, [sp, #4]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2303      	movs	r3, #3
 8008082:	2201      	movs	r2, #1
 8008084:	2106      	movs	r1, #6
 8008086:	4861      	ldr	r0, [pc, #388]	; (800820c <gpsInitUblox+0x24c>)
 8008088:	f00f f8fa 	bl	8017280 <pifGpsUblox_SendUbxMsg>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00c      	beq.n	80080ac <gpsInitUblox+0xec>
                gpsData.cfg_result = GUCR_NONE;
 8008092:	4b5a      	ldr	r3, [pc, #360]	; (80081fc <gpsInitUblox+0x23c>)
 8008094:	2200      	movs	r2, #0
 8008096:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008098:	4b58      	ldr	r3, [pc, #352]	; (80081fc <gpsInitUblox+0x23c>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	3314      	adds	r3, #20
 800809e:	4a57      	ldr	r2, [pc, #348]	; (80081fc <gpsInitUblox+0x23c>)
 80080a0:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080a2:	4b58      	ldr	r3, [pc, #352]	; (8008204 <gpsInitUblox+0x244>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a55      	ldr	r2, [pc, #340]	; (80081fc <gpsInitUblox+0x23c>)
 80080a8:	6153      	str	r3, [r2, #20]
 80080aa:	e0cb      	b.n	8008244 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080ac:	4b56      	ldr	r3, [pc, #344]	; (8008208 <gpsInitUblox+0x248>)
 80080ae:	220a      	movs	r2, #10
 80080b0:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080b2:	f240 131b 	movw	r3, #283	; 0x11b
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	e0c4      	b.n	8008244 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 15) {
 80080ba:	4b50      	ldr	r3, [pc, #320]	; (80081fc <gpsInitUblox+0x23c>)
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b0f      	cmp	r3, #15
 80080c0:	d120      	bne.n	8008104 <gpsInitUblox+0x144>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 80080c2:	2300      	movs	r3, #0
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	4b54      	ldr	r3, [pc, #336]	; (8008218 <gpsInitUblox+0x258>)
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2306      	movs	r3, #6
 80080cc:	2208      	movs	r2, #8
 80080ce:	2106      	movs	r1, #6
 80080d0:	484e      	ldr	r0, [pc, #312]	; (800820c <gpsInitUblox+0x24c>)
 80080d2:	f00f f8d5 	bl	8017280 <pifGpsUblox_SendUbxMsg>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <gpsInitUblox+0x136>
                gpsData.cfg_result = GUCR_NONE;
 80080dc:	4b47      	ldr	r3, [pc, #284]	; (80081fc <gpsInitUblox+0x23c>)
 80080de:	2200      	movs	r2, #0
 80080e0:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 80080e2:	4b46      	ldr	r3, [pc, #280]	; (80081fc <gpsInitUblox+0x23c>)
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	3314      	adds	r3, #20
 80080e8:	4a44      	ldr	r2, [pc, #272]	; (80081fc <gpsInitUblox+0x23c>)
 80080ea:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080ec:	4b45      	ldr	r3, [pc, #276]	; (8008204 <gpsInitUblox+0x244>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a42      	ldr	r2, [pc, #264]	; (80081fc <gpsInitUblox+0x23c>)
 80080f2:	6153      	str	r3, [r2, #20]
 80080f4:	e0a6      	b.n	8008244 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080f6:	4b44      	ldr	r3, [pc, #272]	; (8008208 <gpsInitUblox+0x248>)
 80080f8:	220a      	movs	r2, #10
 80080fa:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080fc:	f44f 7393 	mov.w	r3, #294	; 0x126
 8008100:	607b      	str	r3, [r7, #4]
 8008102:	e09f      	b.n	8008244 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 16) {
 8008104:	4b3d      	ldr	r3, [pc, #244]	; (80081fc <gpsInitUblox+0x23c>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b10      	cmp	r3, #16
 800810a:	d120      	bne.n	800814e <gpsInitUblox+0x18e>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 800810c:	2300      	movs	r3, #0
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	4b42      	ldr	r3, [pc, #264]	; (800821c <gpsInitUblox+0x25c>)
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2324      	movs	r3, #36	; 0x24
 8008116:	2224      	movs	r2, #36	; 0x24
 8008118:	2106      	movs	r1, #6
 800811a:	483c      	ldr	r0, [pc, #240]	; (800820c <gpsInitUblox+0x24c>)
 800811c:	f00f f8b0 	bl	8017280 <pifGpsUblox_SendUbxMsg>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <gpsInitUblox+0x180>
                gpsData.cfg_result = GUCR_NONE;
 8008126:	4b35      	ldr	r3, [pc, #212]	; (80081fc <gpsInitUblox+0x23c>)
 8008128:	2200      	movs	r2, #0
 800812a:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 800812c:	4b33      	ldr	r3, [pc, #204]	; (80081fc <gpsInitUblox+0x23c>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	3314      	adds	r3, #20
 8008132:	4a32      	ldr	r2, [pc, #200]	; (80081fc <gpsInitUblox+0x23c>)
 8008134:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008136:	4b33      	ldr	r3, [pc, #204]	; (8008204 <gpsInitUblox+0x244>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a30      	ldr	r2, [pc, #192]	; (80081fc <gpsInitUblox+0x23c>)
 800813c:	6153      	str	r3, [r2, #20]
 800813e:	e081      	b.n	8008244 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008140:	4b31      	ldr	r3, [pc, #196]	; (8008208 <gpsInitUblox+0x248>)
 8008142:	220a      	movs	r2, #10
 8008144:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008146:	f240 1331 	movw	r3, #305	; 0x131
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	e07a      	b.n	8008244 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 17) {
 800814e:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <gpsInitUblox+0x23c>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b11      	cmp	r3, #17
 8008154:	d12f      	bne.n	80081b6 <gpsInitUblox+0x1f6>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 8008156:	4b32      	ldr	r3, [pc, #200]	; (8008220 <gpsInitUblox+0x260>)
 8008158:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 800815c:	2b00      	cmp	r3, #0
 800815e:	db04      	blt.n	800816a <gpsInitUblox+0x1aa>
 8008160:	4b2f      	ldr	r3, [pc, #188]	; (8008220 <gpsInitUblox+0x260>)
 8008162:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008166:	b2db      	uxtb	r3, r3
 8008168:	e000      	b.n	800816c <gpsInitUblox+0x1ac>
 800816a:	2305      	movs	r3, #5
 800816c:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	4a2c      	ldr	r2, [pc, #176]	; (8008224 <gpsInitUblox+0x264>)
 8008174:	4413      	add	r3, r2
 8008176:	2200      	movs	r2, #0
 8008178:	9201      	str	r2, [sp, #4]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	2308      	movs	r3, #8
 800817e:	2216      	movs	r2, #22
 8008180:	2106      	movs	r1, #6
 8008182:	4822      	ldr	r0, [pc, #136]	; (800820c <gpsInitUblox+0x24c>)
 8008184:	f00f f87c 	bl	8017280 <pifGpsUblox_SendUbxMsg>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <gpsInitUblox+0x1e8>
                gpsData.cfg_result = GUCR_NONE;
 800818e:	4b1b      	ldr	r3, [pc, #108]	; (80081fc <gpsInitUblox+0x23c>)
 8008190:	2200      	movs	r2, #0
 8008192:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008194:	4b19      	ldr	r3, [pc, #100]	; (80081fc <gpsInitUblox+0x23c>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	3314      	adds	r3, #20
 800819a:	4a18      	ldr	r2, [pc, #96]	; (80081fc <gpsInitUblox+0x23c>)
 800819c:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800819e:	4b19      	ldr	r3, [pc, #100]	; (8008204 <gpsInitUblox+0x244>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a16      	ldr	r2, [pc, #88]	; (80081fc <gpsInitUblox+0x23c>)
 80081a4:	6153      	str	r3, [r2, #20]
 80081a6:	e04d      	b.n	8008244 <gpsInitUblox+0x284>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80081a8:	4b17      	ldr	r3, [pc, #92]	; (8008208 <gpsInitUblox+0x248>)
 80081aa:	220a      	movs	r2, #10
 80081ac:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80081ae:	f240 133d 	movw	r3, #317	; 0x13d
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e046      	b.n	8008244 <gpsInitUblox+0x284>
			}
		}
		else if (gpsData.step == 18) {
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <gpsInitUblox+0x23c>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	2b12      	cmp	r3, #18
 80081bc:	d142      	bne.n	8008244 <gpsInitUblox+0x284>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 80081be:	4b11      	ldr	r3, [pc, #68]	; (8008204 <gpsInitUblox+0x244>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4b0e      	ldr	r3, [pc, #56]	; (80081fc <gpsInitUblox+0x23c>)
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d833      	bhi.n	8008238 <gpsInitUblox+0x278>
				if (gpsData.receive) {
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <gpsInitUblox+0x23c>)
 80081d2:	7e1b      	ldrb	r3, [r3, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d035      	beq.n	8008244 <gpsInitUblox+0x284>
					// ublox should be init'd, time to try receiving some junk
					serialStartReceiveFunc(&core.gpsport->comm);
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <gpsInitUblox+0x268>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	3304      	adds	r3, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fa fa34 	bl	800264c <serialStartReceiveFunc>
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 80081e4:	4b11      	ldr	r3, [pc, #68]	; (800822c <gpsInitUblox+0x26c>)
 80081e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081ea:	4911      	ldr	r1, [pc, #68]	; (8008230 <gpsInitUblox+0x270>)
 80081ec:	4811      	ldr	r0, [pc, #68]	; (8008234 <gpsInitUblox+0x274>)
 80081ee:	f00d fc35 	bl	8015a5c <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 80081f2:	2005      	movs	r0, #5
 80081f4:	f7ff fce8 	bl	8007bc8 <gpsSetState>
 80081f8:	e024      	b.n	8008244 <gpsInitUblox+0x284>
 80081fa:	bf00      	nop
 80081fc:	2000129c 	.word	0x2000129c
 8008200:	200016ea 	.word	0x200016ea
 8008204:	200020d8 	.word	0x200020d8
 8008208:	200020c9 	.word	0x200020c9
 800820c:	20001330 	.word	0x20001330
 8008210:	08007c09 	.word	0x08007c09
 8008214:	080279ec 	.word	0x080279ec
 8008218:	08027a0c 	.word	0x08027a0c
 800821c:	08027a14 	.word	0x08027a14
 8008220:	20000bb4 	.word	0x20000bb4
 8008224:	08027a38 	.word	0x08027a38
 8008228:	20000afc 	.word	0x20000afc
 800822c:	08007e01 	.word	0x08007e01
 8008230:	20001b5c 	.word	0x20001b5c
 8008234:	20001340 	.word	0x20001340
				}
			}
			else {
				pif_error = E_TIMEOUT;
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <gpsInitUblox+0x2b8>)
 800823a:	2207      	movs	r2, #7
 800823c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800823e:	f240 134b 	movw	r3, #331	; 0x14b
 8008242:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d013      	beq.n	8008272 <gpsInitUblox+0x2b2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) CS:%u S:%u E:%u", line, cfg_msg_size, gpsData.step, pif_error);
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <gpsInitUblox+0x2bc>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <gpsInitUblox+0x2c0>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4a08      	ldr	r2, [pc, #32]	; (8008278 <gpsInitUblox+0x2b8>)
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	9201      	str	r2, [sp, #4]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	460b      	mov	r3, r1
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	4908      	ldr	r1, [pc, #32]	; (8008284 <gpsInitUblox+0x2c4>)
 8008262:	2004      	movs	r0, #4
 8008264:	f00b f9b8 	bl	80135d8 <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 8008268:	4807      	ldr	r0, [pc, #28]	; (8008288 <gpsInitUblox+0x2c8>)
 800826a:	f7ff fdc9 	bl	8007e00 <_evtGpsTimeout>
 800826e:	e000      	b.n	8008272 <gpsInitUblox+0x2b2>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8008270:	bf00      	nop
	}
}
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	200020c9 	.word	0x200020c9
 800827c:	200016ea 	.word	0x200016ea
 8008280:	2000129c 	.word	0x2000129c
 8008284:	08026424 	.word	0x08026424
 8008288:	20001340 	.word	0x20001340

0800828c <gpsInitHardware>:

static void gpsInitHardware(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <gpsInitHardware+0x34>)
 8008292:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008296:	2b03      	cmp	r3, #3
 8008298:	dc0d      	bgt.n	80082b6 <gpsInitHardware+0x2a>
 800829a:	2b02      	cmp	r3, #2
 800829c:	da0a      	bge.n	80082b4 <gpsInitHardware+0x28>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <gpsInitHardware+0x1c>
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d003      	beq.n	80082ae <gpsInitHardware+0x22>
 80082a6:	e006      	b.n	80082b6 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 80082a8:	f7ff fe5a 	bl	8007f60 <gpsInitNmea>
            break;
 80082ac:	e003      	b.n	80082b6 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 80082ae:	f7ff fe87 	bl	8007fc0 <gpsInitUblox>
            break;
 80082b2:	e000      	b.n	80082b6 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 80082b4:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 80082b6:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <gpsInitHardware+0x38>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]
}
 80082bc:	bf00      	nop
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000bb4 	.word	0x20000bb4
 80082c4:	2000129c 	.word	0x2000129c

080082c8 <gpsThread>:

void gpsThread(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 80082ce:	4b70      	ldr	r3, [pc, #448]	; (8008490 <gpsThread+0x1c8>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	f200 80d8 	bhi.w	8008488 <gpsThread+0x1c0>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <gpsThread+0x18>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008489 	.word	0x08008489
 80082e4:	080082fd 	.word	0x080082fd
 80082e8:	08008357 	.word	0x08008357
 80082ec:	080083af 	.word	0x080083af
 80082f0:	080083ed 	.word	0x080083ed
 80082f4:	08008489 	.word	0x08008489
 80082f8:	080083f3 	.word	0x080083f3
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 80082fc:	4b65      	ldr	r3, [pc, #404]	; (8008494 <gpsThread+0x1cc>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 8008302:	4b63      	ldr	r3, [pc, #396]	; (8008490 <gpsThread+0x1c8>)
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	4a61      	ldr	r2, [pc, #388]	; (8008490 <gpsThread+0x1c8>)
 800830c:	6912      	ldr	r2, [r2, #16]
 800830e:	2a00      	cmp	r2, #0
 8008310:	d001      	beq.n	8008316 <gpsThread+0x4e>
 8008312:	22c8      	movs	r2, #200	; 0xc8
 8008314:	e001      	b.n	800831a <gpsThread+0x52>
 8008316:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800831a:	429a      	cmp	r2, r3
 800831c:	f200 80af 	bhi.w	800847e <gpsThread+0x1b6>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8008320:	4b5b      	ldr	r3, [pc, #364]	; (8008490 <gpsThread+0x1c8>)
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b04      	cmp	r3, #4
 8008326:	dc12      	bgt.n	800834e <gpsThread+0x86>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008328:	4b5b      	ldr	r3, [pc, #364]	; (8008498 <gpsThread+0x1d0>)
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	4b58      	ldr	r3, [pc, #352]	; (8008490 <gpsThread+0x1c8>)
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	495a      	ldr	r1, [pc, #360]	; (800849c <gpsThread+0x1d4>)
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	440b      	add	r3, r1
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fa f974 	bl	8002628 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 8008340:	4b53      	ldr	r3, [pc, #332]	; (8008490 <gpsThread+0x1c8>)
 8008342:	2202      	movs	r2, #2
 8008344:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 8008346:	4a52      	ldr	r2, [pc, #328]	; (8008490 <gpsThread+0x1c8>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 800834c:	e09c      	b.n	8008488 <gpsThread+0x1c0>
                gpsSetState(GPS_SETBAUD);
 800834e:	2003      	movs	r0, #3
 8008350:	f7ff fc3a 	bl	8007bc8 <gpsSetState>
            break;
 8008354:	e098      	b.n	8008488 <gpsThread+0x1c0>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 8008356:	4b4f      	ldr	r3, [pc, #316]	; (8008494 <gpsThread+0x1cc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 800835c:	4b4c      	ldr	r3, [pc, #304]	; (8008490 <gpsThread+0x1c8>)
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2bc7      	cmp	r3, #199	; 0xc7
 8008366:	f240 808c 	bls.w	8008482 <gpsThread+0x1ba>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 800836a:	4b49      	ldr	r3, [pc, #292]	; (8008490 <gpsThread+0x1c8>)
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	4a4b      	ldr	r2, [pc, #300]	; (800849c <gpsThread+0x1d4>)
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	4413      	add	r3, r2
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	9201      	str	r2, [sp, #4]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2303      	movs	r3, #3
 800837e:	2207      	movs	r2, #7
 8008380:	2101      	movs	r1, #1
 8008382:	4847      	ldr	r0, [pc, #284]	; (80084a0 <gpsThread+0x1d8>)
 8008384:	f00e ff46 	bl	8017214 <pifGpsUblox_SetPubxConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00b      	beq.n	80083a6 <gpsThread+0xde>
                gpsData.state_position++;
 800838e:	4b40      	ldr	r3, [pc, #256]	; (8008490 <gpsThread+0x1c8>)
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	3301      	adds	r3, #1
 8008394:	4a3e      	ldr	r2, [pc, #248]	; (8008490 <gpsThread+0x1c8>)
 8008396:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 8008398:	4b3d      	ldr	r3, [pc, #244]	; (8008490 <gpsThread+0x1c8>)
 800839a:	2201      	movs	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 800839e:	4a3c      	ldr	r2, [pc, #240]	; (8008490 <gpsThread+0x1c8>)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 80083a4:	e070      	b.n	8008488 <gpsThread+0x1c0>
        		gpsSetState(GPS_INITIALIZING);
 80083a6:	2001      	movs	r0, #1
 80083a8:	f7ff fc0e 	bl	8007bc8 <gpsSetState>
            break;
 80083ac:	e06c      	b.n	8008488 <gpsThread+0x1c0>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 80083ae:	4b39      	ldr	r3, [pc, #228]	; (8008494 <gpsThread+0x1cc>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 80083b4:	4b36      	ldr	r3, [pc, #216]	; (8008490 <gpsThread+0x1c8>)
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2bc7      	cmp	r3, #199	; 0xc7
 80083be:	d962      	bls.n	8008486 <gpsThread+0x1be>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 80083c0:	4b35      	ldr	r3, [pc, #212]	; (8008498 <gpsThread+0x1d0>)
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	4b32      	ldr	r3, [pc, #200]	; (8008490 <gpsThread+0x1c8>)
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	4934      	ldr	r1, [pc, #208]	; (800849c <gpsThread+0x1d4>)
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	440b      	add	r3, r1
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fa f928 	bl	8002628 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 80083d8:	4b2f      	ldr	r3, [pc, #188]	; (8008498 <gpsThread+0x1d0>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	3304      	adds	r3, #4
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fa f934 	bl	800264c <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 80083e4:	2004      	movs	r0, #4
 80083e6:	f7ff fbef 	bl	8007bc8 <gpsSetState>
            break;
 80083ea:	e04d      	b.n	8008488 <gpsThread+0x1c0>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 80083ec:	f7ff ff4e 	bl	800828c <gpsInitHardware>
            break;
 80083f0:	e04a      	b.n	8008488 <gpsThread+0x1c0>

        case GPS_LOSTCOMMS:
            if (mcfg.gps_type == GPS_NMEA && gpsInitData[gpsData.baudrateIndex].baudrate == 9600) {
 80083f2:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <gpsThread+0x1dc>)
 80083f4:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10f      	bne.n	800841c <gpsThread+0x154>
 80083fc:	4b24      	ldr	r3, [pc, #144]	; (8008490 <gpsThread+0x1c8>)
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	4a26      	ldr	r2, [pc, #152]	; (800849c <gpsThread+0x1d4>)
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	4413      	add	r3, r2
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800840c:	d106      	bne.n	800841c <gpsThread+0x154>
                pifGps_SetTimeout(&gps_nmea._gps, &g_timer_1ms, 0, NULL);
 800840e:	2300      	movs	r3, #0
 8008410:	2200      	movs	r2, #0
 8008412:	4925      	ldr	r1, [pc, #148]	; (80084a8 <gpsThread+0x1e0>)
 8008414:	4825      	ldr	r0, [pc, #148]	; (80084ac <gpsThread+0x1e4>)
 8008416:	f00d fb21 	bl	8015a5c <pifGps_SetTimeout>
 800841a:	e005      	b.n	8008428 <gpsThread+0x160>
            }
            else {
                pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	4921      	ldr	r1, [pc, #132]	; (80084a8 <gpsThread+0x1e0>)
 8008422:	4823      	ldr	r0, [pc, #140]	; (80084b0 <gpsThread+0x1e8>)
 8008424:	f00d fb1a 	bl	8015a5c <pifGps_SetTimeout>
            }
            gpsData.errors++;
 8008428:	4b19      	ldr	r3, [pc, #100]	; (8008490 <gpsThread+0x1c8>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	3301      	adds	r3, #1
 800842e:	4a18      	ldr	r2, [pc, #96]	; (8008490 <gpsThread+0x1c8>)
 8008430:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 8008432:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <gpsThread+0x1dc>)
 8008434:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008438:	2b00      	cmp	r3, #0
 800843a:	d012      	beq.n	8008462 <gpsThread+0x19a>
                gpsData.baudrateIndex++;
 800843c:	4b14      	ldr	r3, [pc, #80]	; (8008490 <gpsThread+0x1c8>)
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	3301      	adds	r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <gpsThread+0x1c8>)
 8008446:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008448:	4b11      	ldr	r3, [pc, #68]	; (8008490 <gpsThread+0x1c8>)
 800844a:	785a      	ldrb	r2, [r3, #1]
 800844c:	4b19      	ldr	r3, [pc, #100]	; (80084b4 <gpsThread+0x1ec>)
 800844e:	fba3 1302 	umull	r1, r3, r3, r2
 8008452:	0899      	lsrs	r1, r3, #2
 8008454:	460b      	mov	r3, r1
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	b2da      	uxtb	r2, r3
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <gpsThread+0x1c8>)
 8008460:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <gpsThread+0x1cc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <gpsThread+0x1c8>)
 8008468:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 800846a:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <gpsThread+0x1f0>)
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 8008470:	4b12      	ldr	r3, [pc, #72]	; (80084bc <gpsThread+0x1f4>)
 8008472:	2200      	movs	r2, #0
 8008474:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 8008476:	2001      	movs	r0, #1
 8008478:	f7ff fba6 	bl	8007bc8 <gpsSetState>
            break;
 800847c:	e004      	b.n	8008488 <gpsThread+0x1c0>
                return;
 800847e:	bf00      	nop
 8008480:	e002      	b.n	8008488 <gpsThread+0x1c0>
                return;
 8008482:	bf00      	nop
 8008484:	e000      	b.n	8008488 <gpsThread+0x1c0>
                return;
 8008486:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	2000129c 	.word	0x2000129c
 8008494:	200020d8 	.word	0x200020d8
 8008498:	20000afc 	.word	0x20000afc
 800849c:	080279c4 	.word	0x080279c4
 80084a0:	20001330 	.word	0x20001330
 80084a4:	20000bb4 	.word	0x20000bb4
 80084a8:	20001b5c 	.word	0x20001b5c
 80084ac:	200012c0 	.word	0x200012c0
 80084b0:	20001340 	.word	0x20001340
 80084b4:	cccccccd 	.word	0xcccccccd
 80084b8:	20001a68 	.word	0x20001a68
 80084bc:	20001980 	.word	0x20001980

080084c0 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 80084c6:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <gpsPollSvinfo+0xb4>)
 80084c8:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d14d      	bne.n	800856c <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 80084d0:	4b29      	ldr	r3, [pc, #164]	; (8008578 <gpsPollSvinfo+0xb8>)
 80084d2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80084d6:	4b29      	ldr	r3, [pc, #164]	; (800857c <gpsPollSvinfo+0xbc>)
 80084d8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 80084da:	2300      	movs	r3, #0
 80084dc:	607b      	str	r3, [r7, #4]
 80084de:	e02a      	b.n	8008536 <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 80084e0:	4a25      	ldr	r2, [pc, #148]	; (8008578 <gpsPollSvinfo+0xb8>)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	3379      	adds	r3, #121	; 0x79
 80084e8:	7819      	ldrb	r1, [r3, #0]
 80084ea:	4a25      	ldr	r2, [pc, #148]	; (8008580 <gpsPollSvinfo+0xc0>)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4413      	add	r3, r2
 80084f0:	460a      	mov	r2, r1
 80084f2:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 80084f4:	4a20      	ldr	r2, [pc, #128]	; (8008578 <gpsPollSvinfo+0xb8>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	3389      	adds	r3, #137	; 0x89
 80084fc:	7819      	ldrb	r1, [r3, #0]
 80084fe:	4a21      	ldr	r2, [pc, #132]	; (8008584 <gpsPollSvinfo+0xc4>)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	460a      	mov	r2, r1
 8008506:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008508:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <gpsPollSvinfo+0xb8>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3399      	adds	r3, #153	; 0x99
 8008510:	7819      	ldrb	r1, [r3, #0]
 8008512:	4a1d      	ldr	r2, [pc, #116]	; (8008588 <gpsPollSvinfo+0xc8>)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4413      	add	r3, r2
 8008518:	460a      	mov	r2, r1
 800851a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 800851c:	4a16      	ldr	r2, [pc, #88]	; (8008578 <gpsPollSvinfo+0xb8>)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	33a9      	adds	r3, #169	; 0xa9
 8008524:	7819      	ldrb	r1, [r3, #0]
 8008526:	4a19      	ldr	r2, [pc, #100]	; (800858c <gpsPollSvinfo+0xcc>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4413      	add	r3, r2
 800852c:	460a      	mov	r2, r1
 800852e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3301      	adds	r3, #1
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	4b11      	ldr	r3, [pc, #68]	; (800857c <gpsPollSvinfo+0xbc>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4293      	cmp	r3, r2
 8008540:	dbce      	blt.n	80084e0 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 8008542:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <gpsPollSvinfo+0xb8>)
 8008544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008548:	4a11      	ldr	r2, [pc, #68]	; (8008590 <gpsPollSvinfo+0xd0>)
 800854a:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <gpsPollSvinfo+0xb8>)
 800854e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008552:	4a0f      	ldr	r2, [pc, #60]	; (8008590 <gpsPollSvinfo+0xd0>)
 8008554:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 8008556:	2300      	movs	r3, #0
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	2300      	movs	r3, #0
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	2300      	movs	r3, #0
 8008560:	2230      	movs	r2, #48	; 0x30
 8008562:	2101      	movs	r1, #1
 8008564:	4804      	ldr	r0, [pc, #16]	; (8008578 <gpsPollSvinfo+0xb8>)
 8008566:	f00e fe8b 	bl	8017280 <pifGpsUblox_SendUbxMsg>
 800856a:	e000      	b.n	800856e <gpsPollSvinfo+0xae>
        return;
 800856c:	bf00      	nop
}
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000bb4 	.word	0x20000bb4
 8008578:	20001330 	.word	0x20001330
 800857c:	20001a85 	.word	0x20001a85
 8008580:	20001a88 	.word	0x20001a88
 8008584:	20001aa8 	.word	0x20001aa8
 8008588:	20001ac8 	.word	0x20001ac8
 800858c:	20001ae8 	.word	0x20001ae8
 8008590:	20001b10 	.word	0x20001b10

08008594 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	ee07 3a90 	vmov	s15, r3
 80085a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	edd3 7a00 	vldr	s15, [r3]
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085b6:	ee17 3a90 	vmov	r3, s15
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	ed93 7a00 	vldr	s14, [r3]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80085ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	edd3 7a00 	vldr	s15, [r3]
 80085f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	edd3 7a00 	vldr	s15, [r3]
 8008608:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008612:	eef1 7a67 	vneg.f32	s15, s15
 8008616:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008624:	ee17 2a90 	vmov	r2, s15
 8008628:	ee16 1a90 	vmov	r1, s13
 800862c:	ee17 0a10 	vmov	r0, s14
 8008630:	f7fb fb3c 	bl	8003cac <constrain>
 8008634:	ee07 0a90 	vmov	s15, r0
 8008638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	edd3 7a00 	vldr	s15, [r3]
 8008648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800864c:	ee17 3a90 	vmov	r3, s15
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	ed93 7a00 	vldr	s14, [r3]
 800867e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	4618      	mov	r0, r3
 800868e:	f7f7 ff19 	bl	80004c4 <__aeabi_f2d>
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f7f7 ff12 	bl	80004c4 <__aeabi_f2d>
 80086a0:	4680      	mov	r8, r0
 80086a2:	4689      	mov	r9, r1
 80086a4:	4b36      	ldr	r3, [pc, #216]	; (8008780 <get_D+0x128>)
 80086a6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	ee17 0a90 	vmov	r0, s15
 80086b6:	f7f7 ff05 	bl	80004c4 <__aeabi_f2d>
 80086ba:	a32f      	add	r3, pc, #188	; (adr r3, 8008778 <get_D+0x120>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f7f7 ff58 	bl	8000574 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	492d      	ldr	r1, [pc, #180]	; (8008784 <get_D+0x12c>)
 80086ce:	f7f8 f87b 	bl	80007c8 <__aeabi_ddiv>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4692      	mov	sl, r2
 80086d8:	469b      	mov	fp, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7f7 fef0 	bl	80004c4 <__aeabi_f2d>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	f7f7 fd8c 	bl	8000208 <__adddf3>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 f866 	bl	80007c8 <__aeabi_ddiv>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4690      	mov	r8, r2
 8008702:	4699      	mov	r9, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	ed93 7a04 	vldr	s14, [r3, #16]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008714:	ee17 0a90 	vmov	r0, s15
 8008718:	f7f7 fed4 	bl	80004c4 <__aeabi_f2d>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	f7f7 ff26 	bl	8000574 <__aeabi_dmul>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4620      	mov	r0, r4
 800872e:	4629      	mov	r1, r5
 8008730:	f7f7 fd6a 	bl	8000208 <__adddf3>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4610      	mov	r0, r2
 800873a:	4619      	mov	r1, r3
 800873c:	f7f8 f9fc 	bl	8000b38 <__aeabi_d2f>
 8008740:	4602      	mov	r2, r0
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	ed93 7a02 	vldr	s14, [r3, #8]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008768:	ee17 3a90 	vmov	r3, s15
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008776:	bf00      	nop
 8008778:	54442d18 	.word	0x54442d18
 800877c:	401921fb 	.word	0x401921fb
 8008780:	20001120 	.word	0x20001120
 8008784:	3ff00000 	.word	0x3ff00000

08008788 <reset_PID>:

static void reset_PID(PID *pid)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	609a      	str	r2, [r3, #8]
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
	...

080087b4 <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b089      	sub	sp, #36	; 0x24
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80087bc:	4b84      	ldr	r3, [pc, #528]	; (80089d0 <taskGpsNewData+0x21c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a84      	ldr	r2, [pc, #528]	; (80089d4 <taskGpsNewData+0x220>)
 80087c2:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 80087c4:	2020      	movs	r0, #32
 80087c6:	f7fe fbbd 	bl	8006f44 <sensorsSet>
        if (GPS_update == 1)
 80087ca:	4b83      	ldr	r3, [pc, #524]	; (80089d8 <taskGpsNewData+0x224>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d103      	bne.n	80087da <taskGpsNewData+0x26>
            GPS_update = 0;
 80087d2:	4b81      	ldr	r3, [pc, #516]	; (80089d8 <taskGpsNewData+0x224>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	e002      	b.n	80087e0 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 80087da:	4b7f      	ldr	r3, [pc, #508]	; (80089d8 <taskGpsNewData+0x224>)
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 80087e0:	4b7e      	ldr	r3, [pc, #504]	; (80089dc <taskGpsNewData+0x228>)
 80087e2:	7adb      	ldrb	r3, [r3, #11]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 81ae 	beq.w	8008b46 <taskGpsNewData+0x392>
 80087ea:	4b7d      	ldr	r3, [pc, #500]	; (80089e0 <taskGpsNewData+0x22c>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	f240 81a9 	bls.w	8008b46 <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 80087f4:	4b79      	ldr	r3, [pc, #484]	; (80089dc <taskGpsNewData+0x228>)
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d106      	bne.n	800880a <taskGpsNewData+0x56>
 80087fc:	4b77      	ldr	r3, [pc, #476]	; (80089dc <taskGpsNewData+0x228>)
 80087fe:	7c1b      	ldrb	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008804:	4b75      	ldr	r3, [pc, #468]	; (80089dc <taskGpsNewData+0x228>)
 8008806:	2200      	movs	r2, #0
 8008808:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 800880a:	4b74      	ldr	r3, [pc, #464]	; (80089dc <taskGpsNewData+0x228>)
 800880c:	7b1b      	ldrb	r3, [r3, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <taskGpsNewData+0x6a>
 8008812:	4b72      	ldr	r3, [pc, #456]	; (80089dc <taskGpsNewData+0x228>)
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 800881a:	f000 f9c1 	bl	8008ba0 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 800881e:	4b71      	ldr	r3, [pc, #452]	; (80089e4 <taskGpsNewData+0x230>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	4b70      	ldr	r3, [pc, #448]	; (80089e8 <taskGpsNewData+0x234>)
 8008826:	fb83 1302 	smull	r1, r3, r3, r2
 800882a:	1059      	asrs	r1, r3, #1
 800882c:	17d3      	asrs	r3, r2, #31
 800882e:	1ac9      	subs	r1, r1, r3
 8008830:	460b      	mov	r3, r1
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	1ad1      	subs	r1, r2, r3
 8008838:	b2ca      	uxtb	r2, r1
 800883a:	4b6a      	ldr	r3, [pc, #424]	; (80089e4 <taskGpsNewData+0x230>)
 800883c:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	e09f      	b.n	8008984 <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 8008844:	4a69      	ldr	r2, [pc, #420]	; (80089ec <taskGpsNewData+0x238>)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800884c:	4968      	ldr	r1, [pc, #416]	; (80089f0 <taskGpsNewData+0x23c>)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 8008854:	4a66      	ldr	r2, [pc, #408]	; (80089f0 <taskGpsNewData+0x23c>)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885c:	4a65      	ldr	r2, [pc, #404]	; (80089f4 <taskGpsNewData+0x240>)
 800885e:	fb82 1203 	smull	r1, r2, r2, r3
 8008862:	1592      	asrs	r2, r2, #22
 8008864:	17db      	asrs	r3, r3, #31
 8008866:	1ad2      	subs	r2, r2, r3
 8008868:	4963      	ldr	r1, [pc, #396]	; (80089f8 <taskGpsNewData+0x244>)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008870:	4a5f      	ldr	r2, [pc, #380]	; (80089f0 <taskGpsNewData+0x23c>)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008878:	495f      	ldr	r1, [pc, #380]	; (80089f8 <taskGpsNewData+0x244>)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008880:	495e      	ldr	r1, [pc, #376]	; (80089fc <taskGpsNewData+0x248>)
 8008882:	fb01 f303 	mul.w	r3, r1, r3
 8008886:	4413      	add	r3, r2
 8008888:	4a5d      	ldr	r2, [pc, #372]	; (8008a00 <taskGpsNewData+0x24c>)
 800888a:	fb82 1203 	smull	r1, r2, r2, r3
 800888e:	1312      	asrs	r2, r2, #12
 8008890:	17db      	asrs	r3, r3, #31
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	b299      	uxth	r1, r3
 8008896:	4a5b      	ldr	r2, [pc, #364]	; (8008a04 <taskGpsNewData+0x250>)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 800889e:	4a5a      	ldr	r2, [pc, #360]	; (8008a08 <taskGpsNewData+0x254>)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088a6:	4b4f      	ldr	r3, [pc, #316]	; (80089e4 <taskGpsNewData+0x230>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	461c      	mov	r4, r3
 80088ac:	4857      	ldr	r0, [pc, #348]	; (8008a0c <taskGpsNewData+0x258>)
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	4423      	add	r3, r4
 80088b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088bc:	1aca      	subs	r2, r1, r3
 80088be:	4952      	ldr	r1, [pc, #328]	; (8008a08 <taskGpsNewData+0x254>)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 80088c6:	4a4a      	ldr	r2, [pc, #296]	; (80089f0 <taskGpsNewData+0x23c>)
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088ce:	494a      	ldr	r1, [pc, #296]	; (80089f8 <taskGpsNewData+0x244>)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088d6:	4949      	ldr	r1, [pc, #292]	; (80089fc <taskGpsNewData+0x248>)
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	4941      	ldr	r1, [pc, #260]	; (80089e4 <taskGpsNewData+0x230>)
 80088de:	7809      	ldrb	r1, [r1, #0]
 80088e0:	460c      	mov	r4, r1
 80088e2:	18d1      	adds	r1, r2, r3
 80088e4:	4849      	ldr	r0, [pc, #292]	; (8008a0c <taskGpsNewData+0x258>)
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	4423      	add	r3, r4
 80088f0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 80088f4:	4a44      	ldr	r2, [pc, #272]	; (8008a08 <taskGpsNewData+0x254>)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088fc:	4b39      	ldr	r3, [pc, #228]	; (80089e4 <taskGpsNewData+0x230>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	461c      	mov	r4, r3
 8008902:	4842      	ldr	r0, [pc, #264]	; (8008a0c <taskGpsNewData+0x258>)
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4613      	mov	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	4423      	add	r3, r4
 800890e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008912:	18ca      	adds	r2, r1, r3
 8008914:	493c      	ldr	r1, [pc, #240]	; (8008a08 <taskGpsNewData+0x254>)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 800891c:	4a3a      	ldr	r2, [pc, #232]	; (8008a08 <taskGpsNewData+0x254>)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008924:	4a30      	ldr	r2, [pc, #192]	; (80089e8 <taskGpsNewData+0x234>)
 8008926:	fb82 1203 	smull	r1, r2, r2, r3
 800892a:	1052      	asrs	r2, r2, #1
 800892c:	17db      	asrs	r3, r3, #31
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	4931      	ldr	r1, [pc, #196]	; (80089f8 <taskGpsNewData+0x244>)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008938:	4935      	ldr	r1, [pc, #212]	; (8008a10 <taskGpsNewData+0x25c>)
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	441a      	add	r2, r3
 8008940:	4934      	ldr	r1, [pc, #208]	; (8008a14 <taskGpsNewData+0x260>)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008948:	4b33      	ldr	r3, [pc, #204]	; (8008a18 <taskGpsNewData+0x264>)
 800894a:	f993 3000 	ldrsb.w	r3, [r3]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d115      	bne.n	800897e <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 8008952:	4a2c      	ldr	r2, [pc, #176]	; (8008a04 <taskGpsNewData+0x250>)
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d90f      	bls.n	800897e <taskGpsNewData+0x1ca>
 800895e:	4a29      	ldr	r2, [pc, #164]	; (8008a04 <taskGpsNewData+0x250>)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008966:	f240 32e6 	movw	r2, #998	; 0x3e6
 800896a:	4293      	cmp	r3, r2
 800896c:	d807      	bhi.n	800897e <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 800896e:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <taskGpsNewData+0x260>)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008976:	491d      	ldr	r1, [pc, #116]	; (80089ec <taskGpsNewData+0x238>)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	3301      	adds	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2b01      	cmp	r3, #1
 8008988:	f77f af5c 	ble.w	8008844 <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 800898c:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <taskGpsNewData+0x21c>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <taskGpsNewData+0x268>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800899e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008a20 <taskGpsNewData+0x26c>
 80089a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80089a6:	4b1f      	ldr	r3, [pc, #124]	; (8008a24 <taskGpsNewData+0x270>)
 80089a8:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 80089ac:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <taskGpsNewData+0x21c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1a      	ldr	r2, [pc, #104]	; (8008a1c <taskGpsNewData+0x268>)
 80089b2:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <taskGpsNewData+0x270>)
 80089b6:	edd3 7a00 	vldr	s15, [r3]
 80089ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c6:	d52f      	bpl.n	8008a28 <taskGpsNewData+0x274>
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <taskGpsNewData+0x270>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	e02e      	b.n	8008a2c <taskGpsNewData+0x278>
 80089ce:	bf00      	nop
 80089d0:	200020d8 	.word	0x200020d8
 80089d4:	2000129c 	.word	0x2000129c
 80089d8:	20001a72 	.word	0x20001a72
 80089dc:	20001980 	.word	0x20001980
 80089e0:	20001a68 	.word	0x20001a68
 80089e4:	20001696 	.word	0x20001696
 80089e8:	66666667 	.word	0x66666667
 80089ec:	20001a48 	.word	0x20001a48
 80089f0:	200016c8 	.word	0x200016c8
 80089f4:	6b5fca6b 	.word	0x6b5fca6b
 80089f8:	200016d8 	.word	0x200016d8
 80089fc:	ff676980 	.word	0xff676980
 8008a00:	68db8bad 	.word	0x68db8bad
 8008a04:	200016e0 	.word	0x200016e0
 8008a08:	200016c0 	.word	0x200016c0
 8008a0c:	20001698 	.word	0x20001698
 8008a10:	00989680 	.word	0x00989680
 8008a14:	200016d0 	.word	0x200016d0
 8008a18:	20001a84 	.word	0x20001a84
 8008a1c:	200016ec 	.word	0x200016ec
 8008a20:	447a0000 	.word	0x447a0000
 8008a24:	20001668 	.word	0x20001668
 8008a28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008a2c:	4a4a      	ldr	r2, [pc, #296]	; (8008b58 <taskGpsNewData+0x3a4>)
 8008a2e:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008a30:	f107 0308 	add.w	r3, r7, #8
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4b47      	ldr	r3, [pc, #284]	; (8008b5c <taskGpsNewData+0x3a8>)
 8008a3e:	4a48      	ldr	r2, [pc, #288]	; (8008b60 <taskGpsNewData+0x3ac>)
 8008a40:	4948      	ldr	r1, [pc, #288]	; (8008b64 <taskGpsNewData+0x3b0>)
 8008a42:	4849      	ldr	r0, [pc, #292]	; (8008b68 <taskGpsNewData+0x3b4>)
 8008a44:	f000 faec 	bl	8009020 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a48      	ldr	r2, [pc, #288]	; (8008b6c <taskGpsNewData+0x3b8>)
 8008a4c:	fb82 1203 	smull	r1, r2, r2, r3
 8008a50:	1152      	asrs	r2, r2, #5
 8008a52:	17db      	asrs	r3, r3, #31
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	4b45      	ldr	r3, [pc, #276]	; (8008b70 <taskGpsNewData+0x3bc>)
 8008a5a:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4a43      	ldr	r2, [pc, #268]	; (8008b6c <taskGpsNewData+0x3b8>)
 8008a60:	fb82 1203 	smull	r1, r2, r2, r3
 8008a64:	1152      	asrs	r2, r2, #5
 8008a66:	17db      	asrs	r3, r3, #31
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	b21a      	sxth	r2, r3
 8008a6c:	4b41      	ldr	r3, [pc, #260]	; (8008b74 <taskGpsNewData+0x3c0>)
 8008a6e:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008a70:	4b41      	ldr	r3, [pc, #260]	; (8008b78 <taskGpsNewData+0x3c4>)
 8008a72:	7b1b      	ldrb	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d105      	bne.n	8008a84 <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008a78:	4b3d      	ldr	r3, [pc, #244]	; (8008b70 <taskGpsNewData+0x3bc>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008a7e:	4b3d      	ldr	r3, [pc, #244]	; (8008b74 <taskGpsNewData+0x3c0>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008a84:	f000 fb3a 	bl	80090fc <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008a88:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <taskGpsNewData+0x3c4>)
 8008a8a:	7a1b      	ldrb	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d103      	bne.n	8008a98 <taskGpsNewData+0x2e4>
 8008a90:	4b39      	ldr	r3, [pc, #228]	; (8008b78 <taskGpsNewData+0x3c4>)
 8008a92:	79db      	ldrb	r3, [r3, #7]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d056      	beq.n	8008b46 <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008a98:	4b38      	ldr	r3, [pc, #224]	; (8008b7c <taskGpsNewData+0x3c8>)
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	4b38      	ldr	r3, [pc, #224]	; (8008b80 <taskGpsNewData+0x3cc>)
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4b38      	ldr	r3, [pc, #224]	; (8008b84 <taskGpsNewData+0x3d0>)
 8008aa2:	4a39      	ldr	r2, [pc, #228]	; (8008b88 <taskGpsNewData+0x3d4>)
 8008aa4:	492f      	ldr	r1, [pc, #188]	; (8008b64 <taskGpsNewData+0x3b0>)
 8008aa6:	4830      	ldr	r0, [pc, #192]	; (8008b68 <taskGpsNewData+0x3b4>)
 8008aa8:	f000 faba 	bl	8009020 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008aac:	4b2d      	ldr	r3, [pc, #180]	; (8008b64 <taskGpsNewData+0x3b0>)
 8008aae:	4a2e      	ldr	r2, [pc, #184]	; (8008b68 <taskGpsNewData+0x3b4>)
 8008ab0:	4934      	ldr	r1, [pc, #208]	; (8008b84 <taskGpsNewData+0x3d0>)
 8008ab2:	4835      	ldr	r0, [pc, #212]	; (8008b88 <taskGpsNewData+0x3d4>)
 8008ab4:	f000 fba4 	bl	8009200 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008ab8:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <taskGpsNewData+0x3c4>)
 8008aba:	7c1b      	ldrb	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008ac0:	4b32      	ldr	r3, [pc, #200]	; (8008b8c <taskGpsNewData+0x3d8>)
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008ac6:	4b31      	ldr	r3, [pc, #196]	; (8008b8c <taskGpsNewData+0x3d8>)
 8008ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d002      	beq.n	8008ad6 <taskGpsNewData+0x322>
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d003      	beq.n	8008adc <taskGpsNewData+0x328>
 8008ad4:	e03a      	b.n	8008b4c <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008ad6:	f000 fbbf 	bl	8009258 <GPS_calc_poshold>
                        break;
 8008ada:	e037      	b.n	8008b4c <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008adc:	4b2c      	ldr	r3, [pc, #176]	; (8008b90 <taskGpsNewData+0x3dc>)
 8008ade:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008ae2:	b21b      	sxth	r3, r3
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fdc4 	bl	8009674 <GPS_calc_desired_speed>
 8008aec:	4603      	mov	r3, r0
 8008aee:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fc67 	bl	80093c8 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008afa:	4b25      	ldr	r3, [pc, #148]	; (8008b90 <taskGpsNewData+0x3dc>)
 8008afc:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008b04:	4b23      	ldr	r3, [pc, #140]	; (8008b94 <taskGpsNewData+0x3e0>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <taskGpsNewData+0x3b8>)
 8008b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8008b0e:	1152      	asrs	r2, r2, #5
 8008b10:	17db      	asrs	r3, r3, #31
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	b21a      	sxth	r2, r3
 8008b16:	4b20      	ldr	r3, [pc, #128]	; (8008b98 <taskGpsNewData+0x3e4>)
 8008b18:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <taskGpsNewData+0x3dc>)
 8008b1c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008b20:	461a      	mov	r2, r3
 8008b22:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <taskGpsNewData+0x3cc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	da04      	bge.n	8008b34 <taskGpsNewData+0x380>
 8008b2a:	f000 fa59 	bl	8008fe0 <check_missed_wp>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008b34:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <taskGpsNewData+0x3d8>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008b3a:	4b18      	ldr	r3, [pc, #96]	; (8008b9c <taskGpsNewData+0x3e8>)
 8008b3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008b40:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <taskGpsNewData+0x3e4>)
 8008b42:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008b44:	e001      	b.n	8008b4a <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <taskGpsNewData+0x398>
                        break;
 8008b4a:	bf00      	nop
        }

    return 0;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd90      	pop	{r4, r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20001668 	.word	0x20001668
 8008b5c:	20001a54 	.word	0x20001a54
 8008b60:	20001a50 	.word	0x20001a50
 8008b64:	20001a4c 	.word	0x20001a4c
 8008b68:	20001a48 	.word	0x20001a48
 8008b6c:	51eb851f 	.word	0x51eb851f
 8008b70:	20001a6a 	.word	0x20001a6a
 8008b74:	20001a6c 	.word	0x20001a6c
 8008b78:	20001980 	.word	0x20001980
 8008b7c:	20001684 	.word	0x20001684
 8008b80:	20001690 	.word	0x20001690
 8008b84:	20001680 	.word	0x20001680
 8008b88:	2000167c 	.word	0x2000167c
 8008b8c:	20001a84 	.word	0x20001a84
 8008b90:	20001120 	.word	0x20001120
 8008b94:	200016e4 	.word	0x200016e4
 8008b98:	20001cae 	.word	0x20001cae
 8008b9c:	200016e8 	.word	0x200016e8

08008ba0 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008ba4:	4b11      	ldr	r3, [pc, #68]	; (8008bec <GPS_reset_home_position+0x4c>)
 8008ba6:	7adb      	ldrb	r3, [r3, #11]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01d      	beq.n	8008be8 <GPS_reset_home_position+0x48>
 8008bac:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <GPS_reset_home_position+0x50>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d919      	bls.n	8008be8 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <GPS_reset_home_position+0x54>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a0f      	ldr	r2, [pc, #60]	; (8008bf8 <GPS_reset_home_position+0x58>)
 8008bba:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <GPS_reset_home_position+0x54>)
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <GPS_reset_home_position+0x58>)
 8008bc2:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <GPS_reset_home_position+0x54>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 f981 	bl	8008ed0 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008bce:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <GPS_reset_home_position+0x5c>)
 8008bd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <GPS_reset_home_position+0x60>)
 8008bd6:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <GPS_reset_home_position+0x64>)
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <GPS_reset_home_position+0x58>)
 8008be0:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008be2:	4b02      	ldr	r3, [pc, #8]	; (8008bec <GPS_reset_home_position+0x4c>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	731a      	strb	r2, [r3, #12]
    }
}
 8008be8:	bf00      	nop
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20001980 	.word	0x20001980
 8008bf0:	20001a68 	.word	0x20001a68
 8008bf4:	20001a48 	.word	0x20001a48
 8008bf8:	20001a50 	.word	0x20001a50
 8008bfc:	20001cac 	.word	0x20001cac
 8008c00:	200016e8 	.word	0x200016e8
 8008c04:	20001a6e 	.word	0x20001a6e

08008c08 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008c0e:	2300      	movs	r3, #0
 8008c10:	607b      	str	r3, [r7, #4]
 8008c12:	e02f      	b.n	8008c74 <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008c14:	4a1e      	ldr	r2, [pc, #120]	; (8008c90 <GPS_reset_nav+0x88>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008c1e:	4a1d      	ldr	r2, [pc, #116]	; (8008c94 <GPS_reset_nav+0x8c>)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2100      	movs	r1, #0
 8008c24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008c28:	4a1b      	ldr	r2, [pc, #108]	; (8008c98 <GPS_reset_nav+0x90>)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4a17      	ldr	r2, [pc, #92]	; (8008c9c <GPS_reset_nav+0x94>)
 8008c3e:	4413      	add	r3, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fda1 	bl	8008788 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <GPS_reset_nav+0x98>)
 8008c52:	4413      	add	r3, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fd97 	bl	8008788 <reset_PID>
        reset_PID(&navPID[i]);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4a0f      	ldr	r2, [pc, #60]	; (8008ca4 <GPS_reset_nav+0x9c>)
 8008c66:	4413      	add	r3, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fd8d 	bl	8008788 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3301      	adds	r3, #1
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	ddcc      	ble.n	8008c14 <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <GPS_reset_nav+0xa0>)
 8008c7c:	7c1b      	ldrb	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008c82:	f7fe f9e5 	bl	8007050 <fw_nav_reset>

}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20001a74 	.word	0x20001a74
 8008c94:	20001a80 	.word	0x20001a80
 8008c98:	20001a7c 	.word	0x20001a7c
 8008c9c:	200015f0 	.word	0x200015f0
 8008ca0:	20001618 	.word	0x20001618
 8008ca4:	20001640 	.word	0x20001640
 8008ca8:	20001980 	.word	0x20001980

08008cac <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008cac:	b480      	push	{r7}
 8008cae:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008cb0:	4b50      	ldr	r3, [pc, #320]	; (8008df4 <gpsSetPIDs+0x148>)
 8008cb2:	795b      	ldrb	r3, [r3, #5]
 8008cb4:	ee07 3a90 	vmov	s15, r3
 8008cb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cbc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008df8 <gpsSetPIDs+0x14c>
 8008cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cc4:	4b4d      	ldr	r3, [pc, #308]	; (8008dfc <gpsSetPIDs+0x150>)
 8008cc6:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008cca:	4b4a      	ldr	r3, [pc, #296]	; (8008df4 <gpsSetPIDs+0x148>)
 8008ccc:	7bdb      	ldrb	r3, [r3, #15]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cd6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008df8 <gpsSetPIDs+0x14c>
 8008cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cde:	4b47      	ldr	r3, [pc, #284]	; (8008dfc <gpsSetPIDs+0x150>)
 8008ce0:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008ce4:	4b45      	ldr	r3, [pc, #276]	; (8008dfc <gpsSetPIDs+0x150>)
 8008ce6:	4a46      	ldr	r2, [pc, #280]	; (8008e00 <gpsSetPIDs+0x154>)
 8008ce8:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008cea:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <gpsSetPIDs+0x148>)
 8008cec:	799b      	ldrb	r3, [r3, #6]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cf6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008cfe:	4b41      	ldr	r3, [pc, #260]	; (8008e04 <gpsSetPIDs+0x158>)
 8008d00:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008d04:	4b3b      	ldr	r3, [pc, #236]	; (8008df4 <gpsSetPIDs+0x148>)
 8008d06:	7c1b      	ldrb	r3, [r3, #16]
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d10:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008df8 <gpsSetPIDs+0x14c>
 8008d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d18:	4b3a      	ldr	r3, [pc, #232]	; (8008e04 <gpsSetPIDs+0x158>)
 8008d1a:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008d1e:	4b35      	ldr	r3, [pc, #212]	; (8008df4 <gpsSetPIDs+0x148>)
 8008d20:	7e9b      	ldrb	r3, [r3, #26]
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d2a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008e08 <gpsSetPIDs+0x15c>
 8008d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d32:	4b34      	ldr	r3, [pc, #208]	; (8008e04 <gpsSetPIDs+0x158>)
 8008d34:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d38:	4b32      	ldr	r3, [pc, #200]	; (8008e04 <gpsSetPIDs+0x158>)
 8008d3a:	4a31      	ldr	r2, [pc, #196]	; (8008e00 <gpsSetPIDs+0x154>)
 8008d3c:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008d3e:	4b2d      	ldr	r3, [pc, #180]	; (8008df4 <gpsSetPIDs+0x148>)
 8008d40:	79db      	ldrb	r3, [r3, #7]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d4a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d52:	4b2e      	ldr	r3, [pc, #184]	; (8008e0c <gpsSetPIDs+0x160>)
 8008d54:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008d58:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <gpsSetPIDs+0x148>)
 8008d5a:	7c5b      	ldrb	r3, [r3, #17]
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d64:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008df8 <gpsSetPIDs+0x14c>
 8008d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d6c:	4b27      	ldr	r3, [pc, #156]	; (8008e0c <gpsSetPIDs+0x160>)
 8008d6e:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008d72:	4b20      	ldr	r3, [pc, #128]	; (8008df4 <gpsSetPIDs+0x148>)
 8008d74:	7edb      	ldrb	r3, [r3, #27]
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d7e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008e08 <gpsSetPIDs+0x15c>
 8008d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d86:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <gpsSetPIDs+0x160>)
 8008d88:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d8c:	4b1f      	ldr	r3, [pc, #124]	; (8008e0c <gpsSetPIDs+0x160>)
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <gpsSetPIDs+0x154>)
 8008d90:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008d92:	4b1f      	ldr	r3, [pc, #124]	; (8008e10 <gpsSetPIDs+0x164>)
 8008d94:	7c1b      	ldrb	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d026      	beq.n	8008de8 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008d9a:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <gpsSetPIDs+0x148>)
 8008d9c:	791b      	ldrb	r3, [r3, #4]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008da6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dae:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <gpsSetPIDs+0x168>)
 8008db0:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <gpsSetPIDs+0x148>)
 8008db6:	7b9b      	ldrb	r3, [r3, #14]
 8008db8:	ee07 3a90 	vmov	s15, r3
 8008dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dc0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008df8 <gpsSetPIDs+0x14c>
 8008dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <gpsSetPIDs+0x168>)
 8008dca:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <gpsSetPIDs+0x148>)
 8008dd0:	7e1b      	ldrb	r3, [r3, #24]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dda:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e08 <gpsSetPIDs+0x15c>
 8008dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008de2:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <gpsSetPIDs+0x168>)
 8008de4:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008de8:	bf00      	nop
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20001120 	.word	0x20001120
 8008df8:	42c80000 	.word	0x42c80000
 8008dfc:	200015b0 	.word	0x200015b0
 8008e00:	44fa0000 	.word	0x44fa0000
 8008e04:	200015c0 	.word	0x200015c0
 8008e08:	447a0000 	.word	0x447a0000
 8008e0c:	200015d0 	.word	0x200015d0
 8008e10:	20001980 	.word	0x20001980
 8008e14:	200015e0 	.word	0x200015e0

08008e18 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008e20:	2001      	movs	r0, #1
 8008e22:	f7f9 f8fb 	bl	800201c <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f00a fb47 	bl	80134bc <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f7f9 f8f4 	bl	800201c <actLed0State>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
    static bool state = false;
	PifGps* p_gps;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008e42:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <gpsSetPassthrough+0x78>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d002      	beq.n	8008e50 <gpsSetPassthrough+0x14>
        return -1;
 8008e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4e:	e02d      	b.n	8008eac <gpsSetPassthrough+0x70>

    actLed0State(OFF);
 8008e50:	2000      	movs	r0, #0
 8008e52:	f7f9 f8e3 	bl	800201c <actLed0State>
    actLed1State(OFF);
 8008e56:	2000      	movs	r0, #0
 8008e58:	f7f9 f90c 	bl	8002074 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008e5c:	4b16      	ldr	r3, [pc, #88]	; (8008eb8 <gpsSetPassthrough+0x7c>)
 8008e5e:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d120      	bne.n	8008ea8 <gpsSetPassthrough+0x6c>
		p_gps = (gpsInitData[gpsData.baudrateIndex].baudrate == 9600) ? &gps_nmea._gps : &gps_ublox._gps;
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <gpsSetPassthrough+0x78>)
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	4a14      	ldr	r2, [pc, #80]	; (8008ebc <gpsSetPassthrough+0x80>)
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	4413      	add	r3, r2
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8008e76:	d101      	bne.n	8008e7c <gpsSetPassthrough+0x40>
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <gpsSetPassthrough+0x84>)
 8008e7a:	e000      	b.n	8008e7e <gpsSetPassthrough+0x42>
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <gpsSetPassthrough+0x88>)
 8008e7e:	607b      	str	r3, [r7, #4]
        if (state) {
 8008e80:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <gpsSetPassthrough+0x8c>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <gpsSetPassthrough+0x5c>
            p_gps->evt_frame = NULL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
            state = false;
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <gpsSetPassthrough+0x8c>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
            return 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	e009      	b.n	8008eac <gpsSetPassthrough+0x70>
        }
        else {
            p_gps->evt_frame = _EvtPrintFrame;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a0c      	ldr	r2, [pc, #48]	; (8008ecc <gpsSetPassthrough+0x90>)
 8008e9c:	609a      	str	r2, [r3, #8]
            state = true;
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <gpsSetPassthrough+0x8c>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]
            return 1;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e001      	b.n	8008eac <gpsSetPassthrough+0x70>
        }
    }
    return -1;
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	2000129c 	.word	0x2000129c
 8008eb8:	20000bb4 	.word	0x20000bb4
 8008ebc:	080279c4 	.word	0x080279c4
 8008ec0:	200012c0 	.word	0x200012c0
 8008ec4:	20001340 	.word	0x20001340
 8008ec8:	200016f0 	.word	0x200016f0
 8008ecc:	08008e19 	.word	0x08008e19

08008ed0 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	dd05      	ble.n	8008ef8 <GPS_calc_longitude_scaling+0x28>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef6:	e006      	b.n	8008f06 <GPS_calc_longitude_scaling+0x36>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f02:	eef1 7a67 	vneg.f32	s15, s15
 8008f06:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008f34 <GPS_calc_longitude_scaling+0x64>
 8008f0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f0e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008f38 <GPS_calc_longitude_scaling+0x68>
 8008f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f16:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008f1a:	ed97 0a03 	vldr	s0, [r7, #12]
 8008f1e:	f019 facb 	bl	80224b8 <cosf>
 8008f22:	eef0 7a40 	vmov.f32	s15, s0
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <GPS_calc_longitude_scaling+0x6c>)
 8008f28:	edc3 7a00 	vstr	s15, [r3]
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	4b189680 	.word	0x4b189680
 8008f38:	3c8efa35 	.word	0x3c8efa35
 8008f3c:	20000028 	.word	0x20000028

08008f40 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <GPS_set_next_wp+0x74>)
 8008f50:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a17      	ldr	r2, [pc, #92]	; (8008fb4 <GPS_set_next_wp+0x74>)
 8008f58:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff ffb6 	bl	8008ed0 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008f64:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <GPS_set_next_wp+0x78>)
 8008f66:	7d1b      	ldrb	r3, [r3, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008f6c:	f7fe f8ac 	bl	80070c8 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008f70:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <GPS_set_next_wp+0x7c>)
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <GPS_set_next_wp+0x80>)
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <GPS_set_next_wp+0x84>)
 8008f7a:	4a0e      	ldr	r2, [pc, #56]	; (8008fb4 <GPS_set_next_wp+0x74>)
 8008f7c:	4912      	ldr	r1, [pc, #72]	; (8008fc8 <GPS_set_next_wp+0x88>)
 8008f7e:	4813      	ldr	r0, [pc, #76]	; (8008fcc <GPS_set_next_wp+0x8c>)
 8008f80:	f000 f84e 	bl	8009020 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008f84:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <GPS_set_next_wp+0x7c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a11      	ldr	r2, [pc, #68]	; (8008fd0 <GPS_set_next_wp+0x90>)
 8008f8a:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008f8c:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <GPS_set_next_wp+0x88>)
 8008f8e:	4a0f      	ldr	r2, [pc, #60]	; (8008fcc <GPS_set_next_wp+0x8c>)
 8008f90:	490c      	ldr	r1, [pc, #48]	; (8008fc4 <GPS_set_next_wp+0x84>)
 8008f92:	4808      	ldr	r0, [pc, #32]	; (8008fb4 <GPS_set_next_wp+0x74>)
 8008f94:	f000 f934 	bl	8009200 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008f98:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <GPS_set_next_wp+0x7c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a0d      	ldr	r2, [pc, #52]	; (8008fd4 <GPS_set_next_wp+0x94>)
 8008f9e:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008fa0:	4b0d      	ldr	r3, [pc, #52]	; (8008fd8 <GPS_set_next_wp+0x98>)
 8008fa2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008fa6:	b21a      	sxth	r2, r3
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <GPS_set_next_wp+0x9c>)
 8008faa:	801a      	strh	r2, [r3, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	2000167c 	.word	0x2000167c
 8008fb8:	20001980 	.word	0x20001980
 8008fbc:	20001684 	.word	0x20001684
 8008fc0:	20001690 	.word	0x20001690
 8008fc4:	20001680 	.word	0x20001680
 8008fc8:	20001a4c 	.word	0x20001a4c
 8008fcc:	20001a48 	.word	0x20001a48
 8008fd0:	200016e4 	.word	0x200016e4
 8008fd4:	20001688 	.word	0x20001688
 8008fd8:	20001120 	.word	0x20001120
 8008fdc:	20001694 	.word	0x20001694

08008fe0 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <check_missed_wp+0x38>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4b0c      	ldr	r3, [pc, #48]	; (800901c <check_missed_wp+0x3c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fb9a 	bl	800972c <wrap_18000>
 8008ff8:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfb8      	it	lt
 8009000:	425b      	neglt	r3, r3
 8009002:	f242 7210 	movw	r2, #10000	; 0x2710
 8009006:	4293      	cmp	r3, r2
 8009008:	bfcc      	ite	gt
 800900a:	2301      	movgt	r3, #1
 800900c:	2300      	movle	r3, #0
 800900e:	b2db      	uxtb	r3, r3
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20001684 	.word	0x20001684
 800901c:	20001688 	.word	0x20001688

08009020 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009040:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <GPS_distance_cm_bearing+0xcc>)
 8009058:	edd3 7a00 	vldr	s15, [r3]
 800905c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009060:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 8009064:	edd7 7a05 	vldr	s15, [r7, #20]
 8009068:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800906c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009078:	eeb0 0a67 	vmov.f32	s0, s15
 800907c:	f019 fb6c 	bl	8022758 <sqrtf>
 8009080:	eef0 7a40 	vmov.f32	s15, s0
 8009084:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80090f0 <GPS_distance_cm_bearing+0xd0>
 8009088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800908c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009090:	ee17 2a90 	vmov	r2, s15
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8009098:	edd7 7a05 	vldr	s15, [r7, #20]
 800909c:	eef1 7a67 	vneg.f32	s15, s15
 80090a0:	edd7 0a04 	vldr	s1, [r7, #16]
 80090a4:	eeb0 0a67 	vmov.f32	s0, s15
 80090a8:	f019 fafc 	bl	80226a4 <atan2f>
 80090ac:	eef0 7a40 	vmov.f32	s15, s0
 80090b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80090f4 <GPS_distance_cm_bearing+0xd4>
 80090b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80090f8 <GPS_distance_cm_bearing+0xd8>
 80090bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c4:	ee17 2a90 	vmov	r2, s15
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da06      	bge.n	80090e2 <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80090dc:	33a0      	adds	r3, #160	; 0xa0
 80090de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e0:	6013      	str	r3, [r2, #0]
}
 80090e2:	bf00      	nop
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000028 	.word	0x20000028
 80090f0:	3f8e7d2c 	.word	0x3f8e7d2c
 80090f4:	45b30ca0 	.word	0x45b30ca0
 80090f8:	460ca000 	.word	0x460ca000

080090fc <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 8009102:	4b38      	ldr	r3, [pc, #224]	; (80091e4 <GPS_calc_velocity+0xe8>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d05b      	beq.n	80091c2 <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 800910a:	4b37      	ldr	r3, [pc, #220]	; (80091e8 <GPS_calc_velocity+0xec>)
 800910c:	ed93 7a00 	vldr	s14, [r3]
 8009110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009118:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 800911c:	4b33      	ldr	r3, [pc, #204]	; (80091ec <GPS_calc_velocity+0xf0>)
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	4b33      	ldr	r3, [pc, #204]	; (80091f0 <GPS_calc_velocity+0xf4>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800912e:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <GPS_calc_velocity+0xf8>)
 8009130:	edd3 7a00 	vldr	s15, [r3]
 8009134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009138:	edd7 7a01 	vldr	s15, [r7, #4]
 800913c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009144:	ee17 3a90 	vmov	r3, s15
 8009148:	b21a      	sxth	r2, r3
 800914a:	4b2b      	ldr	r3, [pc, #172]	; (80091f8 <GPS_calc_velocity+0xfc>)
 800914c:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 800914e:	4b27      	ldr	r3, [pc, #156]	; (80091ec <GPS_calc_velocity+0xf0>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <GPS_calc_velocity+0xf4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	ee07 3a90 	vmov	s15, r3
 800915c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009160:	edd7 7a01 	vldr	s15, [r7, #4]
 8009164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800916c:	ee17 3a90 	vmov	r3, s15
 8009170:	b21a      	sxth	r2, r3
 8009172:	4b21      	ldr	r3, [pc, #132]	; (80091f8 <GPS_calc_velocity+0xfc>)
 8009174:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 8009176:	4b20      	ldr	r3, [pc, #128]	; (80091f8 <GPS_calc_velocity+0xfc>)
 8009178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800917c:	461a      	mov	r2, r3
 800917e:	4b1f      	ldr	r3, [pc, #124]	; (80091fc <GPS_calc_velocity+0x100>)
 8009180:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009184:	4413      	add	r3, r2
 8009186:	0fda      	lsrs	r2, r3, #31
 8009188:	4413      	add	r3, r2
 800918a:	105b      	asrs	r3, r3, #1
 800918c:	b21a      	sxth	r2, r3
 800918e:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <GPS_calc_velocity+0xfc>)
 8009190:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 8009192:	4b19      	ldr	r3, [pc, #100]	; (80091f8 <GPS_calc_velocity+0xfc>)
 8009194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009198:	461a      	mov	r2, r3
 800919a:	4b18      	ldr	r3, [pc, #96]	; (80091fc <GPS_calc_velocity+0x100>)
 800919c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a0:	4413      	add	r3, r2
 80091a2:	0fda      	lsrs	r2, r3, #31
 80091a4:	4413      	add	r3, r2
 80091a6:	105b      	asrs	r3, r3, #1
 80091a8:	b21a      	sxth	r2, r3
 80091aa:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <GPS_calc_velocity+0xfc>)
 80091ac:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <GPS_calc_velocity+0xfc>)
 80091b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <GPS_calc_velocity+0x100>)
 80091b6:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 80091b8:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <GPS_calc_velocity+0xfc>)
 80091ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80091be:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <GPS_calc_velocity+0x100>)
 80091c0:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 80091c2:	4b08      	ldr	r3, [pc, #32]	; (80091e4 <GPS_calc_velocity+0xe8>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 80091c8:	4b08      	ldr	r3, [pc, #32]	; (80091ec <GPS_calc_velocity+0xf0>)
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	4a08      	ldr	r2, [pc, #32]	; (80091f0 <GPS_calc_velocity+0xf4>)
 80091ce:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <GPS_calc_velocity+0xf0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a06      	ldr	r2, [pc, #24]	; (80091f0 <GPS_calc_velocity+0xf4>)
 80091d6:	6013      	str	r3, [r2, #0]
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	200016f1 	.word	0x200016f1
 80091e8:	20001668 	.word	0x20001668
 80091ec:	20001a48 	.word	0x20001a48
 80091f0:	200016f4 	.word	0x200016f4
 80091f4:	20000028 	.word	0x20000028
 80091f8:	2000166c 	.word	0x2000166c
 80091fc:	200016fc 	.word	0x200016fc

08009200 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <GPS_calc_location_error+0x50>)
 8009222:	edd3 7a00 	vldr	s15, [r3]
 8009226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800922e:	ee17 2a90 	vmov	r2, s15
 8009232:	4b08      	ldr	r3, [pc, #32]	; (8009254 <GPS_calc_location_error+0x54>)
 8009234:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	4a04      	ldr	r2, [pc, #16]	; (8009254 <GPS_calc_location_error+0x54>)
 8009242:	6013      	str	r3, [r2, #0]
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	20000028 	.word	0x20000028
 8009254:	20001674 	.word	0x20001674

08009258 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 800925e:	2300      	movs	r3, #0
 8009260:	60bb      	str	r3, [r7, #8]
 8009262:	e092      	b.n	800938a <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 8009264:	4a4d      	ldr	r2, [pc, #308]	; (800939c <GPS_calc_poshold+0x144>)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800926c:	494c      	ldr	r1, [pc, #304]	; (80093a0 <GPS_calc_poshold+0x148>)
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff f990 	bl	8008594 <get_P>
 8009274:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	b29a      	uxth	r2, r3
 800927a:	494a      	ldr	r1, [pc, #296]	; (80093a4 <GPS_calc_poshold+0x14c>)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8009282:	b29b      	uxth	r3, r3
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	b29b      	uxth	r3, r3
 8009288:	b219      	sxth	r1, r3
 800928a:	4a47      	ldr	r2, [pc, #284]	; (80093a8 <GPS_calc_poshold+0x150>)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 8009292:	4a45      	ldr	r2, [pc, #276]	; (80093a8 <GPS_calc_poshold+0x150>)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800929a:	4944      	ldr	r1, [pc, #272]	; (80093ac <GPS_calc_poshold+0x154>)
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff f979 	bl	8008594 <get_P>
 80092a2:	4603      	mov	r3, r0
 80092a4:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80092a6:	4a40      	ldr	r2, [pc, #256]	; (80093a8 <GPS_calc_poshold+0x150>)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092ae:	4619      	mov	r1, r3
 80092b0:	4a3a      	ldr	r2, [pc, #232]	; (800939c <GPS_calc_poshold+0x144>)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b8:	18c8      	adds	r0, r1, r3
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4a3a      	ldr	r2, [pc, #232]	; (80093b0 <GPS_calc_poshold+0x158>)
 80092c6:	441a      	add	r2, r3
 80092c8:	4b38      	ldr	r3, [pc, #224]	; (80093ac <GPS_calc_poshold+0x154>)
 80092ca:	493a      	ldr	r1, [pc, #232]	; (80093b4 <GPS_calc_poshold+0x15c>)
 80092cc:	f7ff f97b 	bl	80085c6 <get_I>
 80092d0:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4423      	add	r3, r4
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	b219      	sxth	r1, r3
 80092da:	4a37      	ldr	r2, [pc, #220]	; (80093b8 <GPS_calc_poshold+0x160>)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80092e2:	4a2e      	ldr	r2, [pc, #184]	; (800939c <GPS_calc_poshold+0x144>)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4a2e      	ldr	r2, [pc, #184]	; (80093b0 <GPS_calc_poshold+0x158>)
 80092f6:	441a      	add	r2, r3
 80092f8:	4b2c      	ldr	r3, [pc, #176]	; (80093ac <GPS_calc_poshold+0x154>)
 80092fa:	492e      	ldr	r1, [pc, #184]	; (80093b4 <GPS_calc_poshold+0x15c>)
 80092fc:	f7ff f9ac 	bl	8008658 <get_D>
 8009300:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 8009302:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009306:	492d      	ldr	r1, [pc, #180]	; (80093bc <GPS_calc_poshold+0x164>)
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7fa fccf 	bl	8003cac <constrain>
 800930e:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009310:	4a24      	ldr	r2, [pc, #144]	; (80093a4 <GPS_calc_poshold+0x14c>)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfb8      	it	lt
 800931c:	425b      	neglt	r3, r3
 800931e:	b29b      	uxth	r3, r3
 8009320:	2b31      	cmp	r3, #49	; 0x31
 8009322:	d801      	bhi.n	8009328 <GPS_calc_poshold+0xd0>
            d = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009328:	4a23      	ldr	r2, [pc, #140]	; (80093b8 <GPS_calc_poshold+0x160>)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009330:	b29a      	uxth	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	b29b      	uxth	r3, r3
 8009336:	4413      	add	r3, r2
 8009338:	b29b      	uxth	r3, r3
 800933a:	b219      	sxth	r1, r3
 800933c:	4a1e      	ldr	r2, [pc, #120]	; (80093b8 <GPS_calc_poshold+0x160>)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009344:	4a1c      	ldr	r2, [pc, #112]	; (80093b8 <GPS_calc_poshold+0x160>)
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800934c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009350:	491b      	ldr	r1, [pc, #108]	; (80093c0 <GPS_calc_poshold+0x168>)
 8009352:	4618      	mov	r0, r3
 8009354:	f7fa fcaa 	bl	8003cac <constrain>
 8009358:	4603      	mov	r3, r0
 800935a:	b219      	sxth	r1, r3
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <GPS_calc_poshold+0x160>)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 8009364:	4912      	ldr	r1, [pc, #72]	; (80093b0 <GPS_calc_poshold+0x158>)
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	4813      	ldr	r0, [pc, #76]	; (80093c4 <GPS_calc_poshold+0x16c>)
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4403      	add	r3, r0
 8009382:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3301      	adds	r3, #1
 8009388:	60bb      	str	r3, [r7, #8]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b01      	cmp	r3, #1
 800938e:	f77f af69 	ble.w	8009264 <GPS_calc_poshold+0xc>
    }
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	bd90      	pop	{r4, r7, pc}
 800939c:	20001674 	.word	0x20001674
 80093a0:	200015b0 	.word	0x200015b0
 80093a4:	2000166c 	.word	0x2000166c
 80093a8:	20001670 	.word	0x20001670
 80093ac:	200015c0 	.word	0x200015c0
 80093b0:	20001618 	.word	0x20001618
 80093b4:	20001668 	.word	0x20001668
 80093b8:	20001a7c 	.word	0x20001a7c
 80093bc:	fffff830 	.word	0xfffff830
 80093c0:	fffff448 	.word	0xfffff448
 80093c4:	20001640 	.word	0x20001640

080093c8 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 80093c8:	b590      	push	{r4, r7, lr}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80093d0:	f000 f8cc 	bl	800956c <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80093d4:	4b5a      	ldr	r3, [pc, #360]	; (8009540 <GPS_calc_nav_rate+0x178>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80093dc:	3328      	adds	r3, #40	; 0x28
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093e6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009544 <GPS_calc_nav_rate+0x17c>
 80093ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093ee:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 80093f2:	ed97 0a04 	vldr	s0, [r7, #16]
 80093f6:	f019 f85f 	bl	80224b8 <cosf>
 80093fa:	eef0 7a40 	vmov.f32	s15, s0
 80093fe:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 8009402:	ed97 0a04 	vldr	s0, [r7, #16]
 8009406:	f019 f8db 	bl	80225c0 <sinf>
 800940a:	eef0 7a40 	vmov.f32	s15, s0
 800940e:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 8009412:	2300      	movs	r3, #0
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e08a      	b.n	800952e <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	3318      	adds	r3, #24
 800941e:	443b      	add	r3, r7
 8009420:	3b10      	subs	r3, #16
 8009422:	ed93 7a00 	vldr	s14, [r3]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009434:	4a44      	ldr	r2, [pc, #272]	; (8009548 <GPS_calc_nav_rate+0x180>)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800944c:	ee17 3a90 	vmov	r3, s15
 8009450:	b219      	sxth	r1, r3
 8009452:	4a3e      	ldr	r2, [pc, #248]	; (800954c <GPS_calc_nav_rate+0x184>)
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 800945a:	4a3c      	ldr	r2, [pc, #240]	; (800954c <GPS_calc_nav_rate+0x184>)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009466:	493a      	ldr	r1, [pc, #232]	; (8009550 <GPS_calc_nav_rate+0x188>)
 8009468:	4618      	mov	r0, r3
 800946a:	f7fa fc1f 	bl	8003cac <constrain>
 800946e:	4603      	mov	r3, r0
 8009470:	b219      	sxth	r1, r3
 8009472:	4a36      	ldr	r2, [pc, #216]	; (800954c <GPS_calc_nav_rate+0x184>)
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 800947a:	4a34      	ldr	r2, [pc, #208]	; (800954c <GPS_calc_nav_rate+0x184>)
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009482:	4934      	ldr	r1, [pc, #208]	; (8009554 <GPS_calc_nav_rate+0x18c>)
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff f885 	bl	8008594 <get_P>
 800948a:	4603      	mov	r3, r0
 800948c:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 800948e:	4a2f      	ldr	r2, [pc, #188]	; (800954c <GPS_calc_nav_rate+0x184>)
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009496:	4618      	mov	r0, r3
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a2d      	ldr	r2, [pc, #180]	; (8009558 <GPS_calc_nav_rate+0x190>)
 80094a4:	441a      	add	r2, r3
 80094a6:	4b2b      	ldr	r3, [pc, #172]	; (8009554 <GPS_calc_nav_rate+0x18c>)
 80094a8:	492c      	ldr	r1, [pc, #176]	; (800955c <GPS_calc_nav_rate+0x194>)
 80094aa:	f7ff f88c 	bl	80085c6 <get_I>
 80094ae:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4423      	add	r3, r4
 80094b4:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 80094b6:	4a25      	ldr	r2, [pc, #148]	; (800954c <GPS_calc_nav_rate+0x184>)
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094be:	4618      	mov	r0, r3
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4a23      	ldr	r2, [pc, #140]	; (8009558 <GPS_calc_nav_rate+0x190>)
 80094cc:	441a      	add	r2, r3
 80094ce:	4b21      	ldr	r3, [pc, #132]	; (8009554 <GPS_calc_nav_rate+0x18c>)
 80094d0:	4922      	ldr	r1, [pc, #136]	; (800955c <GPS_calc_nav_rate+0x194>)
 80094d2:	f7ff f8c1 	bl	8008658 <get_D>
 80094d6:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80094d8:	b29b      	uxth	r3, r3
 80094da:	4423      	add	r3, r4
 80094dc:	b29b      	uxth	r3, r3
 80094de:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094e0:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <GPS_calc_nav_rate+0x198>)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 80094e8:	4a1d      	ldr	r2, [pc, #116]	; (8009560 <GPS_calc_nav_rate+0x198>)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80094f4:	491b      	ldr	r1, [pc, #108]	; (8009564 <GPS_calc_nav_rate+0x19c>)
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fa fbd8 	bl	8003cac <constrain>
 80094fc:	4603      	mov	r3, r0
 80094fe:	b219      	sxth	r1, r3
 8009500:	4a17      	ldr	r2, [pc, #92]	; (8009560 <GPS_calc_nav_rate+0x198>)
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009508:	4913      	ldr	r1, [pc, #76]	; (8009558 <GPS_calc_nav_rate+0x190>)
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	6819      	ldr	r1, [r3, #0]
 8009518:	4813      	ldr	r0, [pc, #76]	; (8009568 <GPS_calc_nav_rate+0x1a0>)
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4403      	add	r3, r0
 8009526:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	3301      	adds	r3, #1
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	f77f af71 	ble.w	8009418 <GPS_calc_nav_rate+0x50>
    }
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	371c      	adds	r7, #28
 800953c:	46bd      	mov	sp, r7
 800953e:	bd90      	pop	{r4, r7, pc}
 8009540:	200016e4 	.word	0x200016e4
 8009544:	393702d3 	.word	0x393702d3
 8009548:	2000166c 	.word	0x2000166c
 800954c:	20001670 	.word	0x20001670
 8009550:	fffffc18 	.word	0xfffffc18
 8009554:	200015d0 	.word	0x200015d0
 8009558:	20001640 	.word	0x20001640
 800955c:	20001668 	.word	0x20001668
 8009560:	20001a7c 	.word	0x20001a7c
 8009564:	fffff448 	.word	0xfffff448
 8009568:	20001618 	.word	0x20001618

0800956c <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 8009572:	4b38      	ldr	r3, [pc, #224]	; (8009654 <GPS_update_crosstrack+0xe8>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	4b38      	ldr	r3, [pc, #224]	; (8009658 <GPS_update_crosstrack+0xec>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f8d5 	bl	800972c <wrap_18000>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	dd10      	ble.n	80095aa <GPS_update_crosstrack+0x3e>
 8009588:	4b32      	ldr	r3, [pc, #200]	; (8009654 <GPS_update_crosstrack+0xe8>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	4b32      	ldr	r3, [pc, #200]	; (8009658 <GPS_update_crosstrack+0xec>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f8ca 	bl	800972c <wrap_18000>
 8009598:	4603      	mov	r3, r0
 800959a:	f241 1293 	movw	r2, #4499	; 0x1193
 800959e:	4293      	cmp	r3, r2
 80095a0:	bfd4      	ite	le
 80095a2:	2301      	movle	r3, #1
 80095a4:	2300      	movgt	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	e00e      	b.n	80095c8 <GPS_update_crosstrack+0x5c>
 80095aa:	4b2a      	ldr	r3, [pc, #168]	; (8009654 <GPS_update_crosstrack+0xe8>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b2a      	ldr	r3, [pc, #168]	; (8009658 <GPS_update_crosstrack+0xec>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 f8b9 	bl	800972c <wrap_18000>
 80095ba:	4603      	mov	r3, r0
 80095bc:	4a27      	ldr	r2, [pc, #156]	; (800965c <GPS_update_crosstrack+0xf0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	bfac      	ite	ge
 80095c2:	2301      	movge	r3, #1
 80095c4:	2300      	movlt	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d03b      	beq.n	8009644 <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 80095cc:	4b21      	ldr	r3, [pc, #132]	; (8009654 <GPS_update_crosstrack+0xe8>)
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	4b21      	ldr	r3, [pc, #132]	; (8009658 <GPS_update_crosstrack+0xec>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095de:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009660 <GPS_update_crosstrack+0xf4>
 80095e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095e6:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 80095ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80095ee:	f018 ffe7 	bl	80225c0 <sinf>
 80095f2:	eeb0 7a40 	vmov.f32	s14, s0
 80095f6:	4b1b      	ldr	r3, [pc, #108]	; (8009664 <GPS_update_crosstrack+0xf8>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800960a:	ee17 3a90 	vmov	r3, s15
 800960e:	b21a      	sxth	r2, r3
 8009610:	4b15      	ldr	r3, [pc, #84]	; (8009668 <GPS_update_crosstrack+0xfc>)
 8009612:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 8009614:	4b14      	ldr	r3, [pc, #80]	; (8009668 <GPS_update_crosstrack+0xfc>)
 8009616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800961a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800961e:	4913      	ldr	r1, [pc, #76]	; (800966c <GPS_update_crosstrack+0x100>)
 8009620:	4618      	mov	r0, r3
 8009622:	f7fa fb43 	bl	8003cac <constrain>
 8009626:	4602      	mov	r2, r0
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <GPS_update_crosstrack+0xe8>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4413      	add	r3, r2
 800962e:	4a10      	ldr	r2, [pc, #64]	; (8009670 <GPS_update_crosstrack+0x104>)
 8009630:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <GPS_update_crosstrack+0x104>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f898 	bl	800976c <wrap_36000>
 800963c:	4603      	mov	r3, r0
 800963e:	4a0c      	ldr	r2, [pc, #48]	; (8009670 <GPS_update_crosstrack+0x104>)
 8009640:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 8009642:	e003      	b.n	800964c <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 8009644:	4b03      	ldr	r3, [pc, #12]	; (8009654 <GPS_update_crosstrack+0xe8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <GPS_update_crosstrack+0x104>)
 800964a:	6013      	str	r3, [r2, #0]
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20001684 	.word	0x20001684
 8009658:	20001688 	.word	0x20001688
 800965c:	ffffee6d 	.word	0xffffee6d
 8009660:	393702d3 	.word	0x393702d3
 8009664:	20001690 	.word	0x20001690
 8009668:	2000168c 	.word	0x2000168c
 800966c:	fffff448 	.word	0xfffff448
 8009670:	200016e4 	.word	0x200016e4

08009674 <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	460a      	mov	r2, r1
 800967e:	80fb      	strh	r3, [r7, #6]
 8009680:	4613      	mov	r3, r2
 8009682:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 8009684:	797b      	ldrb	r3, [r7, #5]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00c      	beq.n	80096a4 <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 800968a:	4b23      	ldr	r3, [pc, #140]	; (8009718 <GPS_calc_desired_speed+0xa4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	0fda      	lsrs	r2, r3, #31
 8009690:	4413      	add	r3, r2
 8009692:	105b      	asrs	r3, r3, #1
 8009694:	461a      	mov	r2, r3
 8009696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800969a:	4293      	cmp	r3, r2
 800969c:	bfa8      	it	ge
 800969e:	4613      	movge	r3, r2
 80096a0:	80fb      	strh	r3, [r7, #6]
 80096a2:	e011      	b.n	80096c8 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 80096a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096a8:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <GPS_calc_desired_speed+0xa4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4293      	cmp	r3, r2
 80096ae:	bfa8      	it	ge
 80096b0:	4613      	movge	r3, r2
 80096b2:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 80096b4:	4b19      	ldr	r3, [pc, #100]	; (800971c <GPS_calc_desired_speed+0xa8>)
 80096b6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80096ba:	461a      	mov	r2, r3
 80096bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096c0:	4293      	cmp	r3, r2
 80096c2:	bfb8      	it	lt
 80096c4:	4613      	movlt	r3, r2
 80096c6:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 80096c8:	4b15      	ldr	r3, [pc, #84]	; (8009720 <GPS_calc_desired_speed+0xac>)
 80096ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	dd17      	ble.n	8009706 <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <GPS_calc_desired_speed+0xb0>)
 80096d8:	edd3 7a00 	vldr	s15, [r3]
 80096dc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009728 <GPS_calc_desired_speed+0xb4>
 80096e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096e8:	ee17 3a90 	vmov	r3, s15
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <GPS_calc_desired_speed+0xac>)
 80096f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	b21a      	sxth	r2, r3
 80096fc:	4b08      	ldr	r3, [pc, #32]	; (8009720 <GPS_calc_desired_speed+0xac>)
 80096fe:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <GPS_calc_desired_speed+0xac>)
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 8009706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	20001690 	.word	0x20001690
 800971c:	20001120 	.word	0x20001120
 8009720:	20001694 	.word	0x20001694
 8009724:	20001668 	.word	0x20001668
 8009728:	42c80000 	.word	0x42c80000

0800972c <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f244 6250 	movw	r2, #18000	; 0x4650
 800973a:	4293      	cmp	r3, r2
 800973c:	dd04      	ble.n	8009748 <wrap_18000+0x1c>
        err -= 36000;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009744:	3ba0      	subs	r3, #160	; 0xa0
 8009746:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a07      	ldr	r2, [pc, #28]	; (8009768 <wrap_18000+0x3c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	da04      	bge.n	800975a <wrap_18000+0x2e>
        err += 36000;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009756:	33a0      	adds	r3, #160	; 0xa0
 8009758:	607b      	str	r3, [r7, #4]
    return err;
 800975a:	687b      	ldr	r3, [r7, #4]
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	ffffb9b0 	.word	0xffffb9b0

0800976c <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800977a:	4293      	cmp	r3, r2
 800977c:	dd04      	ble.n	8009788 <wrap_36000+0x1c>
        deg -= 36000;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009784:	3ba0      	subs	r3, #160	; 0xa0
 8009786:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	da04      	bge.n	8009798 <wrap_36000+0x2c>
        deg += 36000;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009794:	33a0      	adds	r3, #160	; 0xa0
 8009796:	607b      	str	r3, [r7, #4]
    return deg;
 8009798:	687b      	ldr	r3, [r7, #4]
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	ed2d 8b02 	vpush	{d8}
 80097ae:	af00      	add	r7, sp, #0
    smallAngle = lrintf(acc_1G * cosf(RAD * cfg.small_angle));
 80097b0:	4b45      	ldr	r3, [pc, #276]	; (80098c8 <imuInit+0x120>)
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80097bc:	4b43      	ldr	r3, [pc, #268]	; (80098cc <imuInit+0x124>)
 80097be:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f6 fe6c 	bl	80004a0 <__aeabi_i2d>
 80097c8:	a339      	add	r3, pc, #228	; (adr r3, 80098b0 <imuInit+0x108>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f6 fed1 	bl	8000574 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4610      	mov	r0, r2
 80097d8:	4619      	mov	r1, r3
 80097da:	f7f7 f9ad 	bl	8000b38 <__aeabi_d2f>
 80097de:	4603      	mov	r3, r0
 80097e0:	ee00 3a10 	vmov	s0, r3
 80097e4:	f018 fe68 	bl	80224b8 <cosf>
 80097e8:	eef0 7a40 	vmov.f32	s15, s0
 80097ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 80097f0:	eeb0 0a67 	vmov.f32	s0, s15
 80097f4:	f018 fea4 	bl	8022540 <lrintf>
 80097f8:	4603      	mov	r3, r0
 80097fa:	b21a      	sxth	r2, r3
 80097fc:	4b34      	ldr	r3, [pc, #208]	; (80098d0 <imuInit+0x128>)
 80097fe:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / acc_1G / 10000.0f;
 8009800:	4b31      	ldr	r3, [pc, #196]	; (80098c8 <imuInit+0x120>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800980c:	eddf 6a31 	vldr	s13, [pc, #196]	; 80098d4 <imuInit+0x12c>
 8009810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009814:	eddf 6a30 	vldr	s13, [pc, #192]	; 80098d8 <imuInit+0x130>
 8009818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800981c:	4b2f      	ldr	r3, [pc, #188]	; (80098dc <imuInit+0x134>)
 800981e:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 8009822:	4b2a      	ldr	r3, [pc, #168]	; (80098cc <imuInit+0x124>)
 8009824:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009830:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80098e0 <imuInit+0x138>
 8009834:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009838:	ee16 0a90 	vmov	r0, s13
 800983c:	f7f6 fe42 	bl	80004c4 <__aeabi_f2d>
 8009840:	a31d      	add	r3, pc, #116	; (adr r3, 80098b8 <imuInit+0x110>)
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f7f6 fe95 	bl	8000574 <__aeabi_dmul>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4610      	mov	r0, r2
 8009850:	4619      	mov	r1, r3
 8009852:	f7f7 f971 	bl	8000b38 <__aeabi_d2f>
 8009856:	4603      	mov	r3, r0
 8009858:	4a22      	ldr	r2, [pc, #136]	; (80098e4 <imuInit+0x13c>)
 800985a:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 800985c:	4b1b      	ldr	r3, [pc, #108]	; (80098cc <imuInit+0x124>)
 800985e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009860:	4618      	mov	r0, r3
 8009862:	f7f6 fe2f 	bl	80004c4 <__aeabi_f2d>
 8009866:	a316      	add	r3, pc, #88	; (adr r3, 80098c0 <imuInit+0x118>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fe82 	bl	8000574 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	f04f 0000 	mov.w	r0, #0
 8009878:	491b      	ldr	r1, [pc, #108]	; (80098e8 <imuInit+0x140>)
 800987a:	f7f6 ffa5 	bl	80007c8 <__aeabi_ddiv>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4610      	mov	r0, r2
 8009884:	4619      	mov	r1, r3
 8009886:	f7f7 f957 	bl	8000b38 <__aeabi_d2f>
 800988a:	4603      	mov	r3, r0
 800988c:	4a17      	ldr	r2, [pc, #92]	; (80098ec <imuInit+0x144>)
 800988e:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 8009890:	2008      	movs	r0, #8
 8009892:	f7fd fb41 	bl	8006f18 <sensors>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <imuInit+0xf8>
        Mag_init();
 800989c:	f005 fa86 	bl	800edac <Mag_init>
#endif
}
 80098a0:	bf00      	nop
 80098a2:	46bd      	mov	sp, r7
 80098a4:	ecbd 8b02 	vpop	{d8}
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	f3af 8000 	nop.w
 80098b0:	a2529d39 	.word	0xa2529d39
 80098b4:	3f91df46 	.word	0x3f91df46
 80098b8:	907e593b 	.word	0x907e593b
 80098bc:	4081e7a9 	.word	0x4081e7a9
 80098c0:	54442d18 	.word	0x54442d18
 80098c4:	400921fb 	.word	0x400921fb
 80098c8:	2000005a 	.word	0x2000005a
 80098cc:	20001120 	.word	0x20001120
 80098d0:	20001734 	.word	0x20001734
 80098d4:	411ce80a 	.word	0x411ce80a
 80098d8:	461c4000 	.word	0x461c4000
 80098dc:	2000176c 	.word	0x2000176c
 80098e0:	44610000 	.word	0x44610000
 80098e4:	20001770 	.word	0x20001770
 80098e8:	3fe00000 	.word	0x3fe00000
 80098ec:	20001774 	.word	0x20001774

080098f0 <computeIMU>:

int computeIMU(int step)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d02c      	beq.n	8009958 <computeIMU+0x68>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b02      	cmp	r3, #2
 8009902:	dc2d      	bgt.n	8009960 <computeIMU+0x70>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <computeIMU+0x22>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d01a      	beq.n	8009946 <computeIMU+0x56>
 8009910:	e026      	b.n	8009960 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 8009912:	f005 fa37 	bl	800ed84 <Gyro_getADC>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d012      	beq.n	8009942 <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 800991c:	2002      	movs	r0, #2
 800991e:	f7fd fafb 	bl	8006f18 <sensors>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <computeIMU+0x3c>
 8009928:	2301      	movs	r3, #1
 800992a:	e043      	b.n	80099b4 <computeIMU+0xc4>

			accADC[X] = 0;
 800992c:	4b23      	ldr	r3, [pc, #140]	; (80099bc <computeIMU+0xcc>)
 800992e:	2200      	movs	r2, #0
 8009930:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 8009932:	4b22      	ldr	r3, [pc, #136]	; (80099bc <computeIMU+0xcc>)
 8009934:	2200      	movs	r2, #0
 8009936:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 8009938:	4b20      	ldr	r3, [pc, #128]	; (80099bc <computeIMU+0xcc>)
 800993a:	2200      	movs	r2, #0
 800993c:	809a      	strh	r2, [r3, #4]
			return 3;
 800993e:	2303      	movs	r3, #3
 8009940:	e038      	b.n	80099b4 <computeIMU+0xc4>
		}
		return step;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	e036      	b.n	80099b4 <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 8009946:	f005 f803 	bl	800e950 <ACC_getADC>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <computeIMU+0x64>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	e02f      	b.n	80099b4 <computeIMU+0xc4>
 8009954:	2302      	movs	r3, #2
 8009956:	e02d      	b.n	80099b4 <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 8009958:	f000 fbba 	bl	800a0d0 <getEstimatedAttitude>
		return 3;
 800995c:	2303      	movs	r3, #3
 800995e:	e029      	b.n	80099b4 <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 8009960:	4b17      	ldr	r3, [pc, #92]	; (80099c0 <computeIMU+0xd0>)
 8009962:	795b      	ldrb	r3, [r3, #5]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d115      	bne.n	8009994 <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 8009968:	4b16      	ldr	r3, [pc, #88]	; (80099c4 <computeIMU+0xd4>)
 800996a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <computeIMU+0xd8>)
 8009972:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8009976:	4413      	add	r3, r2
 8009978:	4a14      	ldr	r2, [pc, #80]	; (80099cc <computeIMU+0xdc>)
 800997a:	fb82 1203 	smull	r1, r2, r2, r3
 800997e:	17db      	asrs	r3, r3, #31
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	b21a      	sxth	r2, r3
 8009984:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <computeIMU+0xe0>)
 8009986:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 8009988:	4b11      	ldr	r3, [pc, #68]	; (80099d0 <computeIMU+0xe0>)
 800998a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <computeIMU+0xd4>)
 8009990:	801a      	strh	r2, [r3, #0]
 8009992:	e004      	b.n	800999e <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <computeIMU+0xd8>)
 8009996:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800999a:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <computeIMU+0xe0>)
 800999c:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 800999e:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <computeIMU+0xd8>)
 80099a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099a4:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <computeIMU+0xe0>)
 80099a6:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 80099a8:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <computeIMU+0xd8>)
 80099aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80099ae:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <computeIMU+0xe0>)
 80099b0:	805a      	strh	r2, [r3, #2]
	return 4;
 80099b2:	2304      	movs	r3, #4
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	20001708 	.word	0x20001708
 80099c0:	20000bb4 	.word	0x20000bb4
 80099c4:	200017a0 	.word	0x200017a0
 80099c8:	20001700 	.word	0x20001700
 80099cc:	55555556 	.word	0x55555556
 80099d0:	20001778 	.word	0x20001778

080099d4 <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	ed93 7a00 	vldr	s14, [r3]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	edd3 7a00 	vldr	s15, [r3]
 80099ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80099fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a16:	eeb0 0a67 	vmov.f32	s0, s15
 8009a1a:	f018 fe9d 	bl	8022758 <sqrtf>
 8009a1e:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009a22:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	d01d      	beq.n	8009a6c <normalizeV+0x98>
        dest->X = src->X / length;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	edd3 6a00 	vldr	s13, [r3]
 8009a36:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b098      	sub	sp, #96	; 0x60
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	edd3 7a00 	vldr	s15, [r3]
 8009a90:	eeb0 0a67 	vmov.f32	s0, s15
 8009a94:	f018 fd10 	bl	80224b8 <cosf>
 8009a98:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	edd3 7a00 	vldr	s15, [r3]
 8009aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8009aa6:	f018 fd8b 	bl	80225c0 <sinf>
 8009aaa:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	edd3 7a00 	vldr	s15, [r3]
 8009ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8009aba:	f018 fcfd 	bl	80224b8 <cosf>
 8009abe:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	edd3 7a00 	vldr	s15, [r3]
 8009aca:	eeb0 0a67 	vmov.f32	s0, s15
 8009ace:	f018 fd77 	bl	80225c0 <sinf>
 8009ad2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	edd3 7a00 	vldr	s15, [r3]
 8009ade:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae2:	f018 fce9 	bl	80224b8 <cosf>
 8009ae6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	3308      	adds	r3, #8
 8009aee:	edd3 7a00 	vldr	s15, [r3]
 8009af2:	eeb0 0a67 	vmov.f32	s0, s15
 8009af6:	f018 fd63 	bl	80225c0 <sinf>
 8009afa:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009afe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009b0e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009b1e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b22:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009b2e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009b32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009b3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b42:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009b4e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b52:	eeb1 7a67 	vneg.f32	s14, s15
 8009b56:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b64:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009b66:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009b6a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b72:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b7a:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009b7e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009b82:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b92:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009b96:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009b9a:	eeb1 7a67 	vneg.f32	s14, s15
 8009b9e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba6:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009baa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009bae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bbe:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009bc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009bc6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bd6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009bda:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009bde:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bf6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8009bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c06:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009c1c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c28:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c38:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009c4e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c5a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c6a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009c6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009c80:	bf00      	nop
 8009c82:	3760      	adds	r7, #96	; 0x60
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfb8      	it	lt
 8009c98:	425b      	neglt	r3, r3
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	dd02      	ble.n	8009ca6 <applyDeadband+0x1e>
        value = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	607b      	str	r3, [r7, #4]
 8009ca4:	e00e      	b.n	8009cc4 <applyDeadband+0x3c>
    } else if (value > 0) {
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dd04      	ble.n	8009cb6 <applyDeadband+0x2e>
        value -= deadband;
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	607b      	str	r3, [r7, #4]
 8009cb4:	e006      	b.n	8009cc4 <applyDeadband+0x3c>
    } else if (value < 0) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	da03      	bge.n	8009cc4 <applyDeadband+0x3c>
        value += deadband;
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009cc4:	687b      	ldr	r3, [r7, #4]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	0000      	movs	r0, r0
 8009cd4:	0000      	movs	r0, r0
	...

08009cd8 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	; 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009ce0:	f04f 0300 	mov.w	r3, #0
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf0:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009ef8 <acc_calc+0x220>
 8009cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cf8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009cfc:	4b7f      	ldr	r3, [pc, #508]	; (8009efc <acc_calc+0x224>)
 8009cfe:	edd3 7a00 	vldr	s15, [r3]
 8009d02:	eef1 7a67 	vneg.f32	s15, s15
 8009d06:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009d0a:	4b7c      	ldr	r3, [pc, #496]	; (8009efc <acc_calc+0x224>)
 8009d0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d10:	eef1 7a67 	vneg.f32	s15, s15
 8009d14:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009d18:	4b79      	ldr	r3, [pc, #484]	; (8009f00 <acc_calc+0x228>)
 8009d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d26:	eef1 7a67 	vneg.f32	s15, s15
 8009d2a:	ee17 3a90 	vmov	r3, s15
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7f6 fbc8 	bl	80004c4 <__aeabi_f2d>
 8009d34:	a36e      	add	r3, pc, #440	; (adr r3, 8009ef0 <acc_calc+0x218>)
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f7f6 fc1b 	bl	8000574 <__aeabi_dmul>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	f7f6 fef7 	bl	8000b38 <__aeabi_d2f>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009d4e:	4b6d      	ldr	r3, [pc, #436]	; (8009f04 <acc_calc+0x22c>)
 8009d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d54:	ee07 3a90 	vmov	s15, r3
 8009d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d5c:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009d60:	4b68      	ldr	r3, [pc, #416]	; (8009f04 <acc_calc+0x22c>)
 8009d62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d6e:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009d72:	4b64      	ldr	r3, [pc, #400]	; (8009f04 <acc_calc+0x22c>)
 8009d74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d80:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009d84:	f107 0218 	add.w	r2, r7, #24
 8009d88:	f107 030c 	add.w	r3, r7, #12
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fe70 	bl	8009a74 <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009d94:	4b5c      	ldr	r3, [pc, #368]	; (8009f08 <acc_calc+0x230>)
 8009d96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d131      	bne.n	8009e02 <acc_calc+0x12a>
        if (!f.ARMED) {
 8009d9e:	4b5b      	ldr	r3, [pc, #364]	; (8009f0c <acc_calc+0x234>)
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11c      	bne.n	8009de0 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009da6:	4b5a      	ldr	r3, [pc, #360]	; (8009f10 <acc_calc+0x238>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	da00      	bge.n	8009db0 <acc_calc+0xd8>
 8009dae:	333f      	adds	r3, #63	; 0x3f
 8009db0:	119b      	asrs	r3, r3, #6
 8009db2:	425b      	negs	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	4b56      	ldr	r3, [pc, #344]	; (8009f10 <acc_calc+0x238>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4413      	add	r3, r2
 8009dbc:	4a54      	ldr	r2, [pc, #336]	; (8009f10 <acc_calc+0x238>)
 8009dbe:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009dc0:	4b53      	ldr	r3, [pc, #332]	; (8009f10 <acc_calc+0x238>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dd8:	ee17 2a90 	vmov	r2, s15
 8009ddc:	4b4c      	ldr	r3, [pc, #304]	; (8009f10 <acc_calc+0x238>)
 8009dde:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009de0:	ed97 7a05 	vldr	s14, [r7, #20]
 8009de4:	4b4a      	ldr	r3, [pc, #296]	; (8009f10 <acc_calc+0x238>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da00      	bge.n	8009dee <acc_calc+0x116>
 8009dec:	333f      	adds	r3, #63	; 0x3f
 8009dee:	119b      	asrs	r3, r3, #6
 8009df0:	ee07 3a90 	vmov	s15, r3
 8009df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dfc:	edc7 7a05 	vstr	s15, [r7, #20]
 8009e00:	e00b      	b.n	8009e1a <acc_calc+0x142>
    } else
        accel_ned.V.Z -= acc_1G;
 8009e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e06:	4b43      	ldr	r3, [pc, #268]	; (8009f14 <acc_calc+0x23c>)
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e16:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009e1a:	4b3f      	ldr	r3, [pc, #252]	; (8009f18 <acc_calc+0x240>)
 8009e1c:	ed93 7a00 	vldr	s14, [r3]
 8009e20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e28:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e30:	edd7 6a05 	vldr	s13, [r7, #20]
 8009e34:	4b39      	ldr	r3, [pc, #228]	; (8009f1c <acc_calc+0x244>)
 8009e36:	edd3 7a00 	vldr	s15, [r3]
 8009e3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e42:	4b36      	ldr	r3, [pc, #216]	; (8009f1c <acc_calc+0x244>)
 8009e44:	edd3 7a00 	vldr	s15, [r3]
 8009e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e4c:	4b33      	ldr	r3, [pc, #204]	; (8009f1c <acc_calc+0x244>)
 8009e4e:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009e52:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e56:	eeb0 0a67 	vmov.f32	s0, s15
 8009e5a:	f018 fb71 	bl	8022540 <lrintf>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4a29      	ldr	r2, [pc, #164]	; (8009f08 <acc_calc+0x230>)
 8009e62:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff ff0d 	bl	8009c88 <applyDeadband>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	4b2b      	ldr	r3, [pc, #172]	; (8009f20 <acc_calc+0x248>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <acc_calc+0x248>)
 8009e78:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e82:	f018 fb5d 	bl	8022540 <lrintf>
 8009e86:	4603      	mov	r3, r0
 8009e88:	4a1f      	ldr	r2, [pc, #124]	; (8009f08 <acc_calc+0x230>)
 8009e8a:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009e8e:	4611      	mov	r1, r2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fef9 	bl	8009c88 <applyDeadband>
 8009e96:	4602      	mov	r2, r0
 8009e98:	4b21      	ldr	r3, [pc, #132]	; (8009f20 <acc_calc+0x248>)
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	4a20      	ldr	r2, [pc, #128]	; (8009f20 <acc_calc+0x248>)
 8009ea0:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009ea2:	4b1e      	ldr	r3, [pc, #120]	; (8009f1c <acc_calc+0x244>)
 8009ea4:	edd3 7a00 	vldr	s15, [r3]
 8009ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8009eac:	f018 fb48 	bl	8022540 <lrintf>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	4a15      	ldr	r2, [pc, #84]	; (8009f08 <acc_calc+0x230>)
 8009eb4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fee4 	bl	8009c88 <applyDeadband>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <acc_calc+0x248>)
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <acc_calc+0x248>)
 8009eca:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009ecc:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <acc_calc+0x24c>)
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	4a13      	ldr	r2, [pc, #76]	; (8009f24 <acc_calc+0x24c>)
 8009ed6:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009ed8:	4b13      	ldr	r3, [pc, #76]	; (8009f28 <acc_calc+0x250>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	4a12      	ldr	r2, [pc, #72]	; (8009f28 <acc_calc+0x250>)
 8009ee0:	6013      	str	r3, [r2, #0]
}
 8009ee2:	bf00      	nop
 8009ee4:	3728      	adds	r7, #40	; 0x28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w
 8009ef0:	a2529d39 	.word	0xa2529d39
 8009ef4:	3f91df46 	.word	0x3f91df46
 8009ef8:	358637bd 	.word	0x358637bd
 8009efc:	2000178c 	.word	0x2000178c
 8009f00:	20001cac 	.word	0x20001cac
 8009f04:	20001710 	.word	0x20001710
 8009f08:	20001120 	.word	0x20001120
 8009f0c:	20001980 	.word	0x20001980
 8009f10:	200017a4 	.word	0x200017a4
 8009f14:	2000005a 	.word	0x2000005a
 8009f18:	20001774 	.word	0x20001774
 8009f1c:	200017a8 	.word	0x200017a8
 8009f20:	20001720 	.word	0x20001720
 8009f24:	2000172c 	.word	0x2000172c
 8009f28:	20001730 	.word	0x20001730

08009f2c <accSum_reset>:

void accSum_reset(void)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009f30:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <accSum_reset+0x2c>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009f36:	4b08      	ldr	r3, [pc, #32]	; (8009f58 <accSum_reset+0x2c>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009f3c:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <accSum_reset+0x2c>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009f42:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <accSum_reset+0x30>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <accSum_reset+0x34>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]
}
 8009f4e:	bf00      	nop
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	20001720 	.word	0x20001720
 8009f5c:	20001730 	.word	0x20001730
 8009f60:	2000172c 	.word	0x2000172c
 8009f64:	00000000 	.word	0x00000000

08009f68 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b08a      	sub	sp, #40	; 0x28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009f70:	4b53      	ldr	r3, [pc, #332]	; (800a0c0 <calculateHeading+0x158>)
 8009f72:	edd3 7a00 	vldr	s15, [r3]
 8009f76:	eeb0 0a67 	vmov.f32	s0, s15
 8009f7a:	f018 fa9d 	bl	80224b8 <cosf>
 8009f7e:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009f82:	4b4f      	ldr	r3, [pc, #316]	; (800a0c0 <calculateHeading+0x158>)
 8009f84:	edd3 7a00 	vldr	s15, [r3]
 8009f88:	eeb0 0a67 	vmov.f32	s0, s15
 8009f8c:	f018 fb18 	bl	80225c0 <sinf>
 8009f90:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 8009f94:	4b4a      	ldr	r3, [pc, #296]	; (800a0c0 <calculateHeading+0x158>)
 8009f96:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f9e:	f018 fa8b 	bl	80224b8 <cosf>
 8009fa2:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 8009fa6:	4b46      	ldr	r3, [pc, #280]	; (800a0c0 <calculateHeading+0x158>)
 8009fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fac:	eeb0 0a67 	vmov.f32	s0, s15
 8009fb0:	f018 fb06 	bl	80225c0 <sinf>
 8009fb4:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	ed93 7a00 	vldr	s14, [r3]
 8009fbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8009fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8009fd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	edd3 6a02 	vldr	s13, [r3, #8]
 8009fe6:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009fee:	edd7 7a08 	vldr	s15, [r7, #32]
 8009ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ffa:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	ed93 7a01 	vldr	s14, [r3, #4]
 800a004:	edd7 7a08 	vldr	s15, [r7, #32]
 800a008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a012:	edd7 7a07 	vldr	s15, [r7, #28]
 800a016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a01a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a01e:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a022:	edd7 0a04 	vldr	s1, [r7, #16]
 800a026:	ed97 0a03 	vldr	s0, [r7, #12]
 800a02a:	f018 fb3b 	bl	80226a4 <atan2f>
 800a02e:	eef0 7a40 	vmov.f32	s15, s0
 800a032:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a0c4 <calculateHeading+0x15c>
 800a036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a03a:	ee17 0a90 	vmov	r0, s15
 800a03e:	f7f6 fa41 	bl	80004c4 <__aeabi_f2d>
 800a042:	a31d      	add	r3, pc, #116	; (adr r3, 800a0b8 <calculateHeading+0x150>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 fbbe 	bl	80007c8 <__aeabi_ddiv>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4614      	mov	r4, r2
 800a052:	461d      	mov	r5, r3
 800a054:	4b1c      	ldr	r3, [pc, #112]	; (800a0c8 <calculateHeading+0x160>)
 800a056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f6 fa33 	bl	80004c4 <__aeabi_f2d>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 f8cf 	bl	8000208 <__adddf3>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4610      	mov	r0, r2
 800a070:	4619      	mov	r1, r3
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	4b15      	ldr	r3, [pc, #84]	; (800a0cc <calculateHeading+0x164>)
 800a078:	f7f6 fba6 	bl	80007c8 <__aeabi_ddiv>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4610      	mov	r0, r2
 800a082:	4619      	mov	r1, r3
 800a084:	f7f6 fd58 	bl	8000b38 <__aeabi_d2f>
 800a088:	4603      	mov	r3, r0
 800a08a:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a08c:	ed97 0a02 	vldr	s0, [r7, #8]
 800a090:	f018 fa56 	bl	8022540 <lrintf>
 800a094:	4603      	mov	r3, r0
 800a096:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a098:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	da04      	bge.n	800a0aa <calculateHeading+0x142>
        head += 360;
 800a0a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a0aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3728      	adds	r7, #40	; 0x28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	54442d18 	.word	0x54442d18
 800a0bc:	400921fb 	.word	0x400921fb
 800a0c0:	2000178c 	.word	0x2000178c
 800a0c4:	44e10000 	.word	0x44e10000
 800a0c8:	20001cb8 	.word	0x20001cb8
 800a0cc:	40240000 	.word	0x40240000

0800a0d0 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	ed2d 8b02 	vpush	{d8}
 800a0d6:	b08a      	sub	sp, #40	; 0x28
 800a0d8:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a0de:	4bbc      	ldr	r3, [pc, #752]	; (800a3d0 <getEstimatedAttitude+0x300>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4798      	blx	r3
 800a0e4:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a0e6:	4bbb      	ldr	r3, [pc, #748]	; (800a3d4 <getEstimatedAttitude+0x304>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0fa:	4bb7      	ldr	r3, [pc, #732]	; (800a3d8 <getEstimatedAttitude+0x308>)
 800a0fc:	edd3 7a05 	vldr	s15, [r3, #20]
 800a100:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a104:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a108:	4ab2      	ldr	r2, [pc, #712]	; (800a3d4 <getEstimatedAttitude+0x304>)
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a10e:	2300      	movs	r3, #0
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
 800a112:	e074      	b.n	800a1fe <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a114:	4ab1      	ldr	r2, [pc, #708]	; (800a3dc <getEstimatedAttitude+0x30c>)
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a11c:	ee07 3a90 	vmov	s15, r3
 800a120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a124:	edd7 7a04 	vldr	s15, [r7, #16]
 800a128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	3328      	adds	r3, #40	; 0x28
 800a132:	443b      	add	r3, r7
 800a134:	3b28      	subs	r3, #40	; 0x28
 800a136:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a13a:	4ba9      	ldr	r3, [pc, #676]	; (800a3e0 <getEstimatedAttitude+0x310>)
 800a13c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a140:	2b00      	cmp	r3, #0
 800a142:	d043      	beq.n	800a1cc <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a144:	4aa7      	ldr	r2, [pc, #668]	; (800a3e4 <getEstimatedAttitude+0x314>)
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	ed93 7a00 	vldr	s14, [r3]
 800a150:	4ba3      	ldr	r3, [pc, #652]	; (800a3e0 <getEstimatedAttitude+0x310>)
 800a152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a15e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a162:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a16a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a16e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a172:	4a9d      	ldr	r2, [pc, #628]	; (800a3e8 <getEstimatedAttitude+0x318>)
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a182:	4b97      	ldr	r3, [pc, #604]	; (800a3e0 <getEstimatedAttitude+0x310>)
 800a184:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a190:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a194:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a19c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1a0:	4a90      	ldr	r2, [pc, #576]	; (800a3e4 <getEstimatedAttitude+0x314>)
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a1ac:	4a8d      	ldr	r2, [pc, #564]	; (800a3e4 <getEstimatedAttitude+0x314>)
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	edd3 7a00 	vldr	s15, [r3]
 800a1b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1bc:	ee17 3a90 	vmov	r3, s15
 800a1c0:	b219      	sxth	r1, r3
 800a1c2:	4a8a      	ldr	r2, [pc, #552]	; (800a3ec <getEstimatedAttitude+0x31c>)
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a1ca:	e007      	b.n	800a1dc <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a1cc:	4a86      	ldr	r2, [pc, #536]	; (800a3e8 <getEstimatedAttitude+0x318>)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a1d4:	4a85      	ldr	r2, [pc, #532]	; (800a3ec <getEstimatedAttitude+0x31c>)
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a1dc:	4a83      	ldr	r2, [pc, #524]	; (800a3ec <getEstimatedAttitude+0x31c>)
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4a81      	ldr	r2, [pc, #516]	; (800a3ec <getEstimatedAttitude+0x31c>)
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1ee:	fb01 f303 	mul.w	r3, r1, r3
 800a1f2:	6a3a      	ldr	r2, [r7, #32]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	2b02      	cmp	r3, #2
 800a202:	dd87      	ble.n	800a114 <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)acc_1G * acc_1G);
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	2264      	movs	r2, #100	; 0x64
 800a208:	fb03 f202 	mul.w	r2, r3, r2
 800a20c:	4b78      	ldr	r3, [pc, #480]	; (800a3f0 <getEstimatedAttitude+0x320>)
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	4b77      	ldr	r3, [pc, #476]	; (800a3f0 <getEstimatedAttitude+0x320>)
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	fb01 f303 	mul.w	r3, r1, r3
 800a21a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a21e:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a220:	463b      	mov	r3, r7
 800a222:	4619      	mov	r1, r3
 800a224:	4873      	ldr	r0, [pc, #460]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a226:	f7ff fc25 	bl	8009a74 <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	2b48      	cmp	r3, #72	; 0x48
 800a230:	d93c      	bls.n	800a2ac <getEstimatedAttitude+0x1dc>
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	b29b      	uxth	r3, r3
 800a236:	2b84      	cmp	r3, #132	; 0x84
 800a238:	d838      	bhi.n	800a2ac <getEstimatedAttitude+0x1dc>
        for (axis = 0; axis < 3; axis++)
 800a23a:	2300      	movs	r3, #0
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
 800a23e:	e032      	b.n	800a2a6 <getEstimatedAttitude+0x1d6>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a240:	4a6c      	ldr	r2, [pc, #432]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	ed93 7a00 	vldr	s14, [r3]
 800a24c:	4b6a      	ldr	r3, [pc, #424]	; (800a3f8 <getEstimatedAttitude+0x328>)
 800a24e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a25e:	4a63      	ldr	r2, [pc, #396]	; (800a3ec <getEstimatedAttitude+0x31c>)
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a26e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a272:	4b61      	ldr	r3, [pc, #388]	; (800a3f8 <getEstimatedAttitude+0x328>)
 800a274:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a284:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a288:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a28c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a294:	4a57      	ldr	r2, [pc, #348]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	ddc9      	ble.n	800a240 <getEstimatedAttitude+0x170>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a2ac:	4b51      	ldr	r3, [pc, #324]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a2ae:	ed93 7a02 	vldr	s14, [r3, #8]
 800a2b2:	4b52      	ldr	r3, [pc, #328]	; (800a3fc <getEstimatedAttitude+0x32c>)
 800a2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c8:	bfcc      	ite	gt
 800a2ca:	2301      	movgt	r3, #1
 800a2cc:	2300      	movle	r3, #0
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b4b      	ldr	r3, [pc, #300]	; (800a400 <getEstimatedAttitude+0x330>)
 800a2d4:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a2d6:	4b47      	ldr	r3, [pc, #284]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a2d8:	edd3 7a01 	vldr	s15, [r3, #4]
 800a2dc:	4b45      	ldr	r3, [pc, #276]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a2de:	ed93 7a02 	vldr	s14, [r3, #8]
 800a2e2:	eef0 0a47 	vmov.f32	s1, s14
 800a2e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ea:	f018 f9db 	bl	80226a4 <atan2f>
 800a2ee:	eef0 7a40 	vmov.f32	s15, s0
 800a2f2:	4b44      	ldr	r3, [pc, #272]	; (800a404 <getEstimatedAttitude+0x334>)
 800a2f4:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a2f8:	4b3e      	ldr	r3, [pc, #248]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a2fa:	edd3 7a00 	vldr	s15, [r3]
 800a2fe:	eeb1 8a67 	vneg.f32	s16, s15
 800a302:	4b3c      	ldr	r3, [pc, #240]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a304:	ed93 7a01 	vldr	s14, [r3, #4]
 800a308:	4b3a      	ldr	r3, [pc, #232]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a30a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a30e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a312:	4b38      	ldr	r3, [pc, #224]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a314:	edd3 6a02 	vldr	s13, [r3, #8]
 800a318:	4b36      	ldr	r3, [pc, #216]	; (800a3f4 <getEstimatedAttitude+0x324>)
 800a31a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a31e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a322:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a326:	eeb0 0a67 	vmov.f32	s0, s15
 800a32a:	f018 fa15 	bl	8022758 <sqrtf>
 800a32e:	eef0 7a40 	vmov.f32	s15, s0
 800a332:	eef0 0a67 	vmov.f32	s1, s15
 800a336:	eeb0 0a48 	vmov.f32	s0, s16
 800a33a:	f018 f9b3 	bl	80226a4 <atan2f>
 800a33e:	eef0 7a40 	vmov.f32	s15, s0
 800a342:	4b30      	ldr	r3, [pc, #192]	; (800a404 <getEstimatedAttitude+0x334>)
 800a344:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a348:	4b2e      	ldr	r3, [pc, #184]	; (800a404 <getEstimatedAttitude+0x334>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7f6 f8b9 	bl	80004c4 <__aeabi_f2d>
 800a352:	a31d      	add	r3, pc, #116	; (adr r3, 800a3c8 <getEstimatedAttitude+0x2f8>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f6 f90c 	bl	8000574 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4610      	mov	r0, r2
 800a362:	4619      	mov	r1, r3
 800a364:	f7f6 fbe8 	bl	8000b38 <__aeabi_d2f>
 800a368:	4603      	mov	r3, r0
 800a36a:	ee00 3a10 	vmov	s0, r3
 800a36e:	f018 f8e7 	bl	8022540 <lrintf>
 800a372:	4603      	mov	r3, r0
 800a374:	b21a      	sxth	r2, r3
 800a376:	4b24      	ldr	r3, [pc, #144]	; (800a408 <getEstimatedAttitude+0x338>)
 800a378:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a37a:	4b22      	ldr	r3, [pc, #136]	; (800a404 <getEstimatedAttitude+0x334>)
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f6 f8a0 	bl	80004c4 <__aeabi_f2d>
 800a384:	a310      	add	r3, pc, #64	; (adr r3, 800a3c8 <getEstimatedAttitude+0x2f8>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f6 f8f3 	bl	8000574 <__aeabi_dmul>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4610      	mov	r0, r2
 800a394:	4619      	mov	r1, r3
 800a396:	f7f6 fbcf 	bl	8000b38 <__aeabi_d2f>
 800a39a:	4603      	mov	r3, r0
 800a39c:	ee00 3a10 	vmov	s0, r3
 800a3a0:	f018 f8ce 	bl	8022540 <lrintf>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	b21a      	sxth	r2, r3
 800a3a8:	4b17      	ldr	r3, [pc, #92]	; (800a408 <getEstimatedAttitude+0x338>)
 800a3aa:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a3ac:	2008      	movs	r0, #8
 800a3ae:	f7fc fdb3 	bl	8006f18 <sensors>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d069      	beq.n	800a48c <getEstimatedAttitude+0x3bc>
        rotateV(&EstM.V, deltaGyroAngle);
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4813      	ldr	r0, [pc, #76]	; (800a40c <getEstimatedAttitude+0x33c>)
 800a3be:	f7ff fb59 	bl	8009a74 <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c6:	e056      	b.n	800a476 <getEstimatedAttitude+0x3a6>
 800a3c8:	907e593b 	.word	0x907e593b
 800a3cc:	4081e7a9 	.word	0x4081e7a9
 800a3d0:	200020e8 	.word	0x200020e8
 800a3d4:	200017ac 	.word	0x200017ac
 800a3d8:	20001cb8 	.word	0x20001cb8
 800a3dc:	20001700 	.word	0x20001700
 800a3e0:	20001120 	.word	0x20001120
 800a3e4:	200017b0 	.word	0x200017b0
 800a3e8:	20001708 	.word	0x20001708
 800a3ec:	20001710 	.word	0x20001710
 800a3f0:	2000005a 	.word	0x2000005a
 800a3f4:	20001794 	.word	0x20001794
 800a3f8:	20000bb4 	.word	0x20000bb4
 800a3fc:	20001734 	.word	0x20001734
 800a400:	20001980 	.word	0x20001980
 800a404:	2000178c 	.word	0x2000178c
 800a408:	20001788 	.word	0x20001788
 800a40c:	200017bc 	.word	0x200017bc
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a410:	4a69      	ldr	r2, [pc, #420]	; (800a5b8 <getEstimatedAttitude+0x4e8>)
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	ed93 7a00 	vldr	s14, [r3]
 800a41c:	4b67      	ldr	r3, [pc, #412]	; (800a5bc <getEstimatedAttitude+0x4ec>)
 800a41e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a42e:	4a64      	ldr	r2, [pc, #400]	; (800a5c0 <getEstimatedAttitude+0x4f0>)
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a43e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a442:	4b5e      	ldr	r3, [pc, #376]	; (800a5bc <getEstimatedAttitude+0x4ec>)
 800a444:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a448:	ee07 3a90 	vmov	s15, r3
 800a44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a454:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a458:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a45c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a464:	4a54      	ldr	r2, [pc, #336]	; (800a5b8 <getEstimatedAttitude+0x4e8>)
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	3301      	adds	r3, #1
 800a474:	627b      	str	r3, [r7, #36]	; 0x24
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	2b02      	cmp	r3, #2
 800a47a:	ddc9      	ble.n	800a410 <getEstimatedAttitude+0x340>
        heading = calculateHeading(&EstM);
 800a47c:	484e      	ldr	r0, [pc, #312]	; (800a5b8 <getEstimatedAttitude+0x4e8>)
 800a47e:	f7ff fd73 	bl	8009f68 <calculateHeading>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	4b4f      	ldr	r3, [pc, #316]	; (800a5c4 <getEstimatedAttitude+0x4f4>)
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	e00f      	b.n	800a4ac <getEstimatedAttitude+0x3dc>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a48c:	463b      	mov	r3, r7
 800a48e:	4619      	mov	r1, r3
 800a490:	484d      	ldr	r0, [pc, #308]	; (800a5c8 <getEstimatedAttitude+0x4f8>)
 800a492:	f7ff faef 	bl	8009a74 <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a496:	494c      	ldr	r1, [pc, #304]	; (800a5c8 <getEstimatedAttitude+0x4f8>)
 800a498:	484b      	ldr	r0, [pc, #300]	; (800a5c8 <getEstimatedAttitude+0x4f8>)
 800a49a:	f7ff fa9b 	bl	80099d4 <normalizeV>
        heading = calculateHeading(&EstN);
 800a49e:	484a      	ldr	r0, [pc, #296]	; (800a5c8 <getEstimatedAttitude+0x4f8>)
 800a4a0:	f7ff fd62 	bl	8009f68 <calculateHeading>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	4b46      	ldr	r3, [pc, #280]	; (800a5c4 <getEstimatedAttitude+0x4f4>)
 800a4aa:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a4ac:	6978      	ldr	r0, [r7, #20]
 800a4ae:	f7ff fc13 	bl	8009cd8 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a4b2:	4b46      	ldr	r3, [pc, #280]	; (800a5cc <getEstimatedAttitude+0x4fc>)
 800a4b4:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d072      	beq.n	800a5a2 <getEstimatedAttitude+0x4d2>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a4bc:	4b44      	ldr	r3, [pc, #272]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4be:	ed93 8a02 	vldr	s16, [r3, #8]
 800a4c2:	4b43      	ldr	r3, [pc, #268]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4c4:	ed93 7a00 	vldr	s14, [r3]
 800a4c8:	4b41      	ldr	r3, [pc, #260]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4ca:	edd3 7a00 	vldr	s15, [r3]
 800a4ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4d2:	4b3f      	ldr	r3, [pc, #252]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4d4:	edd3 6a01 	vldr	s13, [r3, #4]
 800a4d8:	4b3d      	ldr	r3, [pc, #244]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4da:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4e6:	4b3a      	ldr	r3, [pc, #232]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4e8:	edd3 6a02 	vldr	s13, [r3, #8]
 800a4ec:	4b38      	ldr	r3, [pc, #224]	; (800a5d0 <getEstimatedAttitude+0x500>)
 800a4ee:	edd3 7a02 	vldr	s15, [r3, #8]
 800a4f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4fa:	eeb0 0a67 	vmov.f32	s0, s15
 800a4fe:	f018 f92b 	bl	8022758 <sqrtf>
 800a502:	eeb0 7a40 	vmov.f32	s14, s0
 800a506:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a50a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a50e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a512:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a5d4 <getEstimatedAttitude+0x504>
 800a516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51e:	d803      	bhi.n	800a528 <getEstimatedAttitude+0x458>
            throttleAngleCorrection = 0;
 800a520:	4b2d      	ldr	r3, [pc, #180]	; (800a5d8 <getEstimatedAttitude+0x508>)
 800a522:	2200      	movs	r2, #0
 800a524:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a526:	e03c      	b.n	800a5a2 <getEstimatedAttitude+0x4d2>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a528:	ed97 0a03 	vldr	s0, [r7, #12]
 800a52c:	f018 f88e 	bl	802264c <acosf>
 800a530:	eeb0 7a40 	vmov.f32	s14, s0
 800a534:	4b29      	ldr	r3, [pc, #164]	; (800a5dc <getEstimatedAttitude+0x50c>)
 800a536:	edd3 7a00 	vldr	s15, [r3]
 800a53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53e:	eeb0 0a67 	vmov.f32	s0, s15
 800a542:	f017 fffd 	bl	8022540 <lrintf>
 800a546:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a54e:	dd02      	ble.n	800a556 <getEstimatedAttitude+0x486>
                deg = 900;
 800a550:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a554:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a556:	4b1d      	ldr	r3, [pc, #116]	; (800a5cc <getEstimatedAttitude+0x4fc>)
 800a558:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a564:	69f8      	ldr	r0, [r7, #28]
 800a566:	f7f5 ff9b 	bl	80004a0 <__aeabi_i2d>
 800a56a:	a311      	add	r3, pc, #68	; (adr r3, 800a5b0 <getEstimatedAttitude+0x4e0>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f6 f92a 	bl	80007c8 <__aeabi_ddiv>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4610      	mov	r0, r2
 800a57a:	4619      	mov	r1, r3
 800a57c:	f7f6 fadc 	bl	8000b38 <__aeabi_d2f>
 800a580:	4603      	mov	r3, r0
 800a582:	ee00 3a10 	vmov	s0, r3
 800a586:	f018 f81b 	bl	80225c0 <sinf>
 800a58a:	eef0 7a40 	vmov.f32	s15, s0
 800a58e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a592:	eeb0 0a67 	vmov.f32	s0, s15
 800a596:	f017 ffd3 	bl	8022540 <lrintf>
 800a59a:	4603      	mov	r3, r0
 800a59c:	b21a      	sxth	r2, r3
 800a59e:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <getEstimatedAttitude+0x508>)
 800a5a0:	801a      	strh	r2, [r3, #0]
}
 800a5a2:	bf00      	nop
 800a5a4:	3728      	adds	r7, #40	; 0x28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	ecbd 8b02 	vpop	{d8}
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	e50feba2 	.word	0xe50feba2
 800a5b4:	409616dd 	.word	0x409616dd
 800a5b8:	200017bc 	.word	0x200017bc
 800a5bc:	20000bb4 	.word	0x20000bb4
 800a5c0:	20001718 	.word	0x20001718
 800a5c4:	20001cac 	.word	0x20001cac
 800a5c8:	20000034 	.word	0x20000034
 800a5cc:	20001120 	.word	0x20001120
 800a5d0:	20001794 	.word	0x20001794
 800a5d4:	3c75c28f 	.word	0x3c75c28f
 800a5d8:	20001768 	.word	0x20001768
 800a5dc:	20001770 	.word	0x20001770

0800a5e0 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	; 0x38
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a5e8:	4b84      	ldr	r3, [pc, #528]	; (800a7fc <taskGetEstimatedAltitude+0x21c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4798      	blx	r3
 800a5ee:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a5f0:	4b83      	ldr	r3, [pc, #524]	; (800a800 <taskGetEstimatedAltitude+0x220>)
 800a5f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfb8      	it	lt
 800a5fa:	425b      	neglt	r3, r3
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	4b80      	ldr	r3, [pc, #512]	; (800a800 <taskGetEstimatedAltitude+0x220>)
 800a600:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a604:	2b00      	cmp	r3, #0
 800a606:	bfb8      	it	lt
 800a608:	425b      	neglt	r3, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	4293      	cmp	r3, r2
 800a60e:	bf38      	it	cc
 800a610:	4613      	movcc	r3, r2
 800a612:	b29b      	uxth	r3, r3
 800a614:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a616:	4b7b      	ldr	r3, [pc, #492]	; (800a804 <taskGetEstimatedAltitude+0x224>)
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a61c:	4b7a      	ldr	r3, [pc, #488]	; (800a808 <taskGetEstimatedAltitude+0x228>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a626:	4a78      	ldr	r2, [pc, #480]	; (800a808 <taskGetEstimatedAltitude+0x228>)
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a62c:	4b77      	ldr	r3, [pc, #476]	; (800a80c <taskGetEstimatedAltitude+0x22c>)
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d058      	beq.n	800a6e6 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a634:	4b76      	ldr	r3, [pc, #472]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	da00      	bge.n	800a63e <taskGetEstimatedAltitude+0x5e>
 800a63c:	3307      	adds	r3, #7
 800a63e:	10db      	asrs	r3, r3, #3
 800a640:	425b      	negs	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	4b72      	ldr	r3, [pc, #456]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4413      	add	r3, r2
 800a64a:	4a71      	ldr	r2, [pc, #452]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a64c:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a64e:	4b71      	ldr	r3, [pc, #452]	; (800a814 <taskGetEstimatedAltitude+0x234>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a71      	ldr	r2, [pc, #452]	; (800a818 <taskGetEstimatedAltitude+0x238>)
 800a654:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a658:	3a01      	subs	r2, #1
 800a65a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a65e:	4a6c      	ldr	r2, [pc, #432]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	4413      	add	r3, r2
 800a664:	461a      	mov	r2, r3
 800a666:	4b6a      	ldr	r3, [pc, #424]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a668:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a66a:	4b69      	ldr	r3, [pc, #420]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	da00      	bge.n	800a674 <taskGetEstimatedAltitude+0x94>
 800a672:	3307      	adds	r3, #7
 800a674:	10db      	asrs	r3, r3, #3
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a67e:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a81c <taskGetEstimatedAltitude+0x23c>
 800a682:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a686:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a820 <taskGetEstimatedAltitude+0x240>
 800a68a:	eeb0 0a47 	vmov.f32	s0, s14
 800a68e:	f018 f80b 	bl	80226a8 <powf>
 800a692:	eef0 7a40 	vmov.f32	s15, s0
 800a696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a69a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a69e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a824 <taskGetEstimatedAltitude+0x244>
 800a6a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6aa:	ee17 2a90 	vmov	r2, s15
 800a6ae:	4b5e      	ldr	r3, [pc, #376]	; (800a828 <taskGetEstimatedAltitude+0x248>)
 800a6b0:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a6b2:	4b5e      	ldr	r3, [pc, #376]	; (800a82c <taskGetEstimatedAltitude+0x24c>)
 800a6b4:	f04f 0200 	mov.w	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a6ba:	4b5d      	ldr	r3, [pc, #372]	; (800a830 <taskGetEstimatedAltitude+0x250>)
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a6c2:	4b52      	ldr	r3, [pc, #328]	; (800a80c <taskGetEstimatedAltitude+0x22c>)
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	4b50      	ldr	r3, [pc, #320]	; (800a80c <taskGetEstimatedAltitude+0x22c>)
 800a6cc:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a6ce:	4b4f      	ldr	r3, [pc, #316]	; (800a80c <taskGetEstimatedAltitude+0x22c>)
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d107      	bne.n	800a6e6 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a6d6:	4b4e      	ldr	r3, [pc, #312]	; (800a810 <taskGetEstimatedAltitude+0x230>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	4b53      	ldr	r3, [pc, #332]	; (800a828 <taskGetEstimatedAltitude+0x248>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4955      	ldr	r1, [pc, #340]	; (800a834 <taskGetEstimatedAltitude+0x254>)
 800a6e0:	2002      	movs	r0, #2
 800a6e2:	f008 ff79 	bl	80135d8 <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a6e6:	4b4b      	ldr	r3, [pc, #300]	; (800a814 <taskGetEstimatedAltitude+0x234>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a4b      	ldr	r2, [pc, #300]	; (800a818 <taskGetEstimatedAltitude+0x238>)
 800a6ec:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a6f0:	3a01      	subs	r2, #1
 800a6f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a81c <taskGetEstimatedAltitude+0x23c>
 800a702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a706:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a820 <taskGetEstimatedAltitude+0x240>
 800a70a:	eeb0 0a47 	vmov.f32	s0, s14
 800a70e:	f017 ffcb 	bl	80226a8 <powf>
 800a712:	eef0 7a40 	vmov.f32	s15, s0
 800a716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a71a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a71e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a824 <taskGetEstimatedAltitude+0x244>
 800a722:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a726:	eeb0 0a67 	vmov.f32	s0, s15
 800a72a:	f017 ff09 	bl	8022540 <lrintf>
 800a72e:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a730:	4b3d      	ldr	r3, [pc, #244]	; (800a828 <taskGetEstimatedAltitude+0x248>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a73a:	4b3f      	ldr	r3, [pc, #252]	; (800a838 <taskGetEstimatedAltitude+0x258>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a746:	4b34      	ldr	r3, [pc, #208]	; (800a818 <taskGetEstimatedAltitude+0x238>)
 800a748:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a75a:	4b2f      	ldr	r3, [pc, #188]	; (800a818 <taskGetEstimatedAltitude+0x238>)
 800a75c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a760:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a764:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a76c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a770:	eeb0 0a67 	vmov.f32	s0, s15
 800a774:	f017 fee4 	bl	8022540 <lrintf>
 800a778:	4603      	mov	r3, r0
 800a77a:	4a2f      	ldr	r2, [pc, #188]	; (800a838 <taskGetEstimatedAltitude+0x258>)
 800a77c:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a77e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a782:	2bfa      	cmp	r3, #250	; 0xfa
 800a784:	dc04      	bgt.n	800a790 <taskGetEstimatedAltitude+0x1b0>
 800a786:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <taskGetEstimatedAltitude+0x25c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78e:	d104      	bne.n	800a79a <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a790:	4b2b      	ldr	r3, [pc, #172]	; (800a840 <taskGetEstimatedAltitude+0x260>)
 800a792:	f04f 32ff 	mov.w	r2, #4294967295
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	e01b      	b.n	800a7d2 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a79a:	4b28      	ldr	r3, [pc, #160]	; (800a83c <taskGetEstimatedAltitude+0x25c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	ee07 3a90 	vmov	s15, r3
 800a7a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7a6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7b2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a844 <taskGetEstimatedAltitude+0x264>
 800a7b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7be:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a844 <taskGetEstimatedAltitude+0x264>
 800a7c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7ca:	ee17 2a90 	vmov	r2, s15
 800a7ce:	4b1c      	ldr	r3, [pc, #112]	; (800a840 <taskGetEstimatedAltitude+0x260>)
 800a7d0:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a7d2:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <taskGetEstimatedAltitude+0x260>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	dd38      	ble.n	800a84c <taskGetEstimatedAltitude+0x26c>
 800a7da:	4b19      	ldr	r3, [pc, #100]	; (800a840 <taskGetEstimatedAltitude+0x260>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2bc7      	cmp	r3, #199	; 0xc7
 800a7e0:	dc34      	bgt.n	800a84c <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <taskGetEstimatedAltitude+0x258>)
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	4b16      	ldr	r3, [pc, #88]	; (800a840 <taskGetEstimatedAltitude+0x260>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	4a16      	ldr	r2, [pc, #88]	; (800a848 <taskGetEstimatedAltitude+0x268>)
 800a7ee:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a7f0:	4b13      	ldr	r3, [pc, #76]	; (800a840 <taskGetEstimatedAltitude+0x260>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a10      	ldr	r2, [pc, #64]	; (800a838 <taskGetEstimatedAltitude+0x258>)
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	e064      	b.n	800a8c4 <taskGetEstimatedAltitude+0x2e4>
 800a7fa:	bf00      	nop
 800a7fc:	200020e8 	.word	0x200020e8
 800a800:	20001788 	.word	0x20001788
 800a804:	20001740 	.word	0x20001740
 800a808:	200017c8 	.word	0x200017c8
 800a80c:	20001ca8 	.word	0x20001ca8
 800a810:	200017cc 	.word	0x200017cc
 800a814:	20001738 	.word	0x20001738
 800a818:	20001120 	.word	0x20001120
 800a81c:	47c5e680 	.word	0x47c5e680
 800a820:	3e42dcb1 	.word	0x3e42dcb1
 800a824:	4a8748d0 	.word	0x4a8748d0
 800a828:	200017d0 	.word	0x200017d0
 800a82c:	200017d4 	.word	0x200017d4
 800a830:	200017d8 	.word	0x200017d8
 800a834:	0802643c 	.word	0x0802643c
 800a838:	2000173c 	.word	0x2000173c
 800a83c:	2000002c 	.word	0x2000002c
 800a840:	20000030 	.word	0x20000030
 800a844:	44610000 	.word	0x44610000
 800a848:	20001748 	.word	0x20001748
    } else {
        BaroAlt -= baroAlt_offset;
 800a84c:	4ba0      	ldr	r3, [pc, #640]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	4ba0      	ldr	r3, [pc, #640]	; (800aad4 <taskGetEstimatedAltitude+0x4f4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	4a9e      	ldr	r2, [pc, #632]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a858:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a85a:	4b9f      	ldr	r3, [pc, #636]	; (800aad8 <taskGetEstimatedAltitude+0x4f8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd30      	ble.n	800a8c4 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a862:	4b9d      	ldr	r3, [pc, #628]	; (800aad8 <taskGetEstimatedAltitude+0x4f8>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a86a:	ee07 3a90 	vmov	s15, r3
 800a86e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a872:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800aadc <taskGetEstimatedAltitude+0x4fc>
 800a876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a87a:	4b99      	ldr	r3, [pc, #612]	; (800aae0 <taskGetEstimatedAltitude+0x500>)
 800a87c:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a880:	4b95      	ldr	r3, [pc, #596]	; (800aad8 <taskGetEstimatedAltitude+0x4f8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a88c:	4b94      	ldr	r3, [pc, #592]	; (800aae0 <taskGetEstimatedAltitude+0x500>)
 800a88e:	edd3 7a00 	vldr	s15, [r3]
 800a892:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a896:	4b8e      	ldr	r3, [pc, #568]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8a2:	4b8f      	ldr	r3, [pc, #572]	; (800aae0 <taskGetEstimatedAltitude+0x500>)
 800a8a4:	edd3 7a00 	vldr	s15, [r3]
 800a8a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8bc:	ee17 2a90 	vmov	r2, s15
 800a8c0:	4b83      	ldr	r3, [pc, #524]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a8c2:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a8c4:	4b87      	ldr	r3, [pc, #540]	; (800aae4 <taskGetEstimatedAltitude+0x504>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800aae8 <taskGetEstimatedAltitude+0x508>
 800a8d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8d8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a8dc:	4b83      	ldr	r3, [pc, #524]	; (800aaec <taskGetEstimatedAltitude+0x50c>)
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	ee07 3a90 	vmov	s15, r3
 800a8e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8e8:	4b81      	ldr	r3, [pc, #516]	; (800aaf0 <taskGetEstimatedAltitude+0x510>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	ee07 3a90 	vmov	s15, r3
 800a8f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f8:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a8fc:	4b7d      	ldr	r3, [pc, #500]	; (800aaf4 <taskGetEstimatedAltitude+0x514>)
 800a8fe:	ed93 7a00 	vldr	s14, [r3]
 800a902:	edd7 7a07 	vldr	s15, [r7, #28]
 800a906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a90a:	4b76      	ldr	r3, [pc, #472]	; (800aae4 <taskGetEstimatedAltitude+0x504>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a91e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a922:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a926:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a92a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a92e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a932:	4b71      	ldr	r3, [pc, #452]	; (800aaf8 <taskGetEstimatedAltitude+0x518>)
 800a934:	edd3 6a00 	vldr	s13, [r3]
 800a938:	edd7 7a08 	vldr	s15, [r7, #32]
 800a93c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a940:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a944:	4b6d      	ldr	r3, [pc, #436]	; (800aafc <taskGetEstimatedAltitude+0x51c>)
 800a946:	edd3 7a00 	vldr	s15, [r3]
 800a94a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a94e:	4b6b      	ldr	r3, [pc, #428]	; (800aafc <taskGetEstimatedAltitude+0x51c>)
 800a950:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a954:	4b6a      	ldr	r3, [pc, #424]	; (800ab00 <taskGetEstimatedAltitude+0x520>)
 800a956:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a95a:	4b68      	ldr	r3, [pc, #416]	; (800aafc <taskGetEstimatedAltitude+0x51c>)
 800a95c:	edd3 7a00 	vldr	s15, [r3]
 800a960:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a964:	4b5a      	ldr	r3, [pc, #360]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	ee07 3a90 	vmov	s15, r3
 800a96c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a970:	4b63      	ldr	r3, [pc, #396]	; (800ab00 <taskGetEstimatedAltitude+0x520>)
 800a972:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a976:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a97a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a97e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a982:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a986:	4b5d      	ldr	r3, [pc, #372]	; (800aafc <taskGetEstimatedAltitude+0x51c>)
 800a988:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a98c:	4b52      	ldr	r3, [pc, #328]	; (800aad8 <taskGetEstimatedAltitude+0x4f8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	dd08      	ble.n	800a9a6 <taskGetEstimatedAltitude+0x3c6>
 800a994:	4b50      	ldr	r3, [pc, #320]	; (800aad8 <taskGetEstimatedAltitude+0x4f8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2bc7      	cmp	r3, #199	; 0xc7
 800a99a:	dc04      	bgt.n	800a9a6 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800a99c:	4b4c      	ldr	r3, [pc, #304]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a58      	ldr	r2, [pc, #352]	; (800ab04 <taskGetEstimatedAltitude+0x524>)
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	e008      	b.n	800a9b8 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800a9a6:	4b55      	ldr	r3, [pc, #340]	; (800aafc <taskGetEstimatedAltitude+0x51c>)
 800a9a8:	edd3 7a00 	vldr	s15, [r3]
 800a9ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9b0:	ee17 2a90 	vmov	r2, s15
 800a9b4:	4b53      	ldr	r3, [pc, #332]	; (800ab04 <taskGetEstimatedAltitude+0x524>)
 800a9b6:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800a9b8:	4b4f      	ldr	r3, [pc, #316]	; (800aaf8 <taskGetEstimatedAltitude+0x518>)
 800a9ba:	ed93 7a00 	vldr	s14, [r3]
 800a9be:	edd7 7a06 	vldr	s15, [r7, #24]
 800a9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9c6:	4b4c      	ldr	r3, [pc, #304]	; (800aaf8 <taskGetEstimatedAltitude+0x518>)
 800a9c8:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800a9cc:	f7ff faae 	bl	8009f2c <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800a9d0:	4b3f      	ldr	r3, [pc, #252]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	4b4c      	ldr	r3, [pc, #304]	; (800ab08 <taskGetEstimatedAltitude+0x528>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9e2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ab0c <taskGetEstimatedAltitude+0x52c>
 800a9e6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	ee07 3a90 	vmov	s15, r3
 800a9f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9fc:	ee17 3a90 	vmov	r3, s15
 800aa00:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800aa02:	4b33      	ldr	r3, [pc, #204]	; (800aad0 <taskGetEstimatedAltitude+0x4f0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a40      	ldr	r2, [pc, #256]	; (800ab08 <taskGetEstimatedAltitude+0x528>)
 800aa08:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800aa0a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa0e:	4940      	ldr	r1, [pc, #256]	; (800ab10 <taskGetEstimatedAltitude+0x530>)
 800aa10:	6978      	ldr	r0, [r7, #20]
 800aa12:	f7f9 f94b 	bl	8003cac <constrain>
 800aa16:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800aa18:	210a      	movs	r1, #10
 800aa1a:	6978      	ldr	r0, [r7, #20]
 800aa1c:	f7ff f934 	bl	8009c88 <applyDeadband>
 800aa20:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800aa22:	4b37      	ldr	r3, [pc, #220]	; (800ab00 <taskGetEstimatedAltitude+0x520>)
 800aa24:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800aa28:	4b33      	ldr	r3, [pc, #204]	; (800aaf8 <taskGetEstimatedAltitude+0x518>)
 800aa2a:	edd3 7a00 	vldr	s15, [r3]
 800aa2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aa3c:	4b30      	ldr	r3, [pc, #192]	; (800ab00 <taskGetEstimatedAltitude+0x520>)
 800aa3e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aa42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa46:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa52:	4b29      	ldr	r3, [pc, #164]	; (800aaf8 <taskGetEstimatedAltitude+0x518>)
 800aa54:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800aa58:	4b27      	ldr	r3, [pc, #156]	; (800aaf8 <taskGetEstimatedAltitude+0x518>)
 800aa5a:	edd3 7a00 	vldr	s15, [r3]
 800aa5e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa62:	f017 fd6d 	bl	8022540 <lrintf>
 800aa66:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800aa68:	2105      	movs	r1, #5
 800aa6a:	6938      	ldr	r0, [r7, #16]
 800aa6c:	f7ff f90c 	bl	8009c88 <applyDeadband>
 800aa70:	4603      	mov	r3, r0
 800aa72:	4a28      	ldr	r2, [pc, #160]	; (800ab14 <taskGetEstimatedAltitude+0x534>)
 800aa74:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aa76:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aa7a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aa7e:	f280 80b2 	bge.w	800abe6 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800aa82:	4b25      	ldr	r3, [pc, #148]	; (800ab18 <taskGetEstimatedAltitude+0x538>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d14e      	bne.n	800ab28 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800aa8a:	4b24      	ldr	r3, [pc, #144]	; (800ab1c <taskGetEstimatedAltitude+0x53c>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <taskGetEstimatedAltitude+0x524>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aa98:	4921      	ldr	r1, [pc, #132]	; (800ab20 <taskGetEstimatedAltitude+0x540>)
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f9 f906 	bl	8003cac <constrain>
 800aaa0:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800aaa2:	210a      	movs	r1, #10
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7ff f8ef 	bl	8009c88 <applyDeadband>
 800aaaa:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aaac:	4b14      	ldr	r3, [pc, #80]	; (800ab00 <taskGetEstimatedAltitude+0x520>)
 800aaae:	791b      	ldrb	r3, [r3, #4]
 800aab0:	461a      	mov	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	fb02 f303 	mul.w	r3, r2, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da00      	bge.n	800aabe <taskGetEstimatedAltitude+0x4de>
 800aabc:	337f      	adds	r3, #127	; 0x7f
 800aabe:	11db      	asrs	r3, r3, #7
 800aac0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aac4:	4917      	ldr	r1, [pc, #92]	; (800ab24 <taskGetEstimatedAltitude+0x544>)
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f9 f8f0 	bl	8003cac <constrain>
 800aacc:	6378      	str	r0, [r7, #52]	; 0x34
 800aace:	e02e      	b.n	800ab2e <taskGetEstimatedAltitude+0x54e>
 800aad0:	2000173c 	.word	0x2000173c
 800aad4:	20001748 	.word	0x20001748
 800aad8:	20000030 	.word	0x20000030
 800aadc:	42c80000 	.word	0x42c80000
 800aae0:	20001744 	.word	0x20001744
 800aae4:	2000172c 	.word	0x2000172c
 800aae8:	358637bd 	.word	0x358637bd
 800aaec:	20001720 	.word	0x20001720
 800aaf0:	20001730 	.word	0x20001730
 800aaf4:	2000176c 	.word	0x2000176c
 800aaf8:	200017d4 	.word	0x200017d4
 800aafc:	200017d8 	.word	0x200017d8
 800ab00:	20001120 	.word	0x20001120
 800ab04:	2000174c 	.word	0x2000174c
 800ab08:	200017dc 	.word	0x200017dc
 800ab0c:	49742400 	.word	0x49742400
 800ab10:	fffffa24 	.word	0xfffffa24
 800ab14:	20001764 	.word	0x20001764
 800ab18:	2000175c 	.word	0x2000175c
 800ab1c:	20001754 	.word	0x20001754
 800ab20:	fffffe0c 	.word	0xfffffe0c
 800ab24:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800ab28:	4b34      	ldr	r3, [pc, #208]	; (800abfc <taskGetEstimatedAltitude+0x61c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800ab2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800ab36:	4b32      	ldr	r3, [pc, #200]	; (800ac00 <taskGetEstimatedAltitude+0x620>)
 800ab38:	7a9b      	ldrb	r3, [r3, #10]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	fb02 f303 	mul.w	r3, r2, r3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da00      	bge.n	800ab48 <taskGetEstimatedAltitude+0x568>
 800ab46:	331f      	adds	r3, #31
 800ab48:	115b      	asrs	r3, r3, #5
 800ab4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab4e:	492d      	ldr	r1, [pc, #180]	; (800ac04 <taskGetEstimatedAltitude+0x624>)
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7f9 f8ab 	bl	8003cac <constrain>
 800ab56:	4603      	mov	r3, r0
 800ab58:	4a2b      	ldr	r2, [pc, #172]	; (800ac08 <taskGetEstimatedAltitude+0x628>)
 800ab5a:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800ab5c:	4b28      	ldr	r3, [pc, #160]	; (800ac00 <taskGetEstimatedAltitude+0x620>)
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
 800ab60:	461a      	mov	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	fb03 f202 	mul.w	r2, r3, r2
 800ab68:	4b28      	ldr	r3, [pc, #160]	; (800ac0c <taskGetEstimatedAltitude+0x62c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	4a27      	ldr	r2, [pc, #156]	; (800ac0c <taskGetEstimatedAltitude+0x62c>)
 800ab70:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800ab72:	4b26      	ldr	r3, [pc, #152]	; (800ac0c <taskGetEstimatedAltitude+0x62c>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a26      	ldr	r2, [pc, #152]	; (800ac10 <taskGetEstimatedAltitude+0x630>)
 800ab78:	4926      	ldr	r1, [pc, #152]	; (800ac14 <taskGetEstimatedAltitude+0x634>)
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7f9 f896 	bl	8003cac <constrain>
 800ab80:	4603      	mov	r3, r0
 800ab82:	4a22      	ldr	r2, [pc, #136]	; (800ac0c <taskGetEstimatedAltitude+0x62c>)
 800ab84:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800ab86:	4b21      	ldr	r3, [pc, #132]	; (800ac0c <taskGetEstimatedAltitude+0x62c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a23      	ldr	r2, [pc, #140]	; (800ac18 <taskGetEstimatedAltitude+0x638>)
 800ab8c:	fb82 1203 	smull	r1, r2, r2, r3
 800ab90:	10d2      	asrs	r2, r2, #3
 800ab92:	17db      	asrs	r3, r3, #31
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <taskGetEstimatedAltitude+0x628>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <taskGetEstimatedAltitude+0x628>)
 800ab9e:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800aba0:	4b17      	ldr	r3, [pc, #92]	; (800ac00 <taskGetEstimatedAltitude+0x620>)
 800aba2:	7f9b      	ldrb	r3, [r3, #30]
 800aba4:	ee07 3a90 	vmov	s15, r3
 800aba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <taskGetEstimatedAltitude+0x63c>)
 800abae:	edd3 6a00 	vldr	s13, [r3]
 800abb2:	edd7 7a07 	vldr	s15, [r7, #28]
 800abb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abbe:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ac20 <taskGetEstimatedAltitude+0x640>
 800abc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abca:	2296      	movs	r2, #150	; 0x96
 800abcc:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800abd0:	ee17 0a90 	vmov	r0, s15
 800abd4:	f7f9 f86a 	bl	8003cac <constrain>
 800abd8:	4602      	mov	r2, r0
 800abda:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <taskGetEstimatedAltitude+0x628>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	4a09      	ldr	r2, [pc, #36]	; (800ac08 <taskGetEstimatedAltitude+0x628>)
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	e002      	b.n	800abec <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800abe6:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <taskGetEstimatedAltitude+0x628>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800abec:	4a0b      	ldr	r2, [pc, #44]	; (800ac1c <taskGetEstimatedAltitude+0x63c>)
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	6013      	str	r3, [r2, #0]

    return 1;
 800abf2:	2301      	movs	r3, #1
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3738      	adds	r7, #56	; 0x38
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20001758 	.word	0x20001758
 800ac00:	20001120 	.word	0x20001120
 800ac04:	fffffed4 	.word	0xfffffed4
 800ac08:	20001750 	.word	0x20001750
 800ac0c:	20001760 	.word	0x20001760
 800ac10:	00190320 	.word	0x00190320
 800ac14:	ffe6fce0 	.word	0xffe6fce0
 800ac18:	003ff801 	.word	0x003ff801
 800ac1c:	200017e0 	.word	0x200017e0
 800ac20:	44000000 	.word	0x44000000

0800ac24 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ac2c:	4916      	ldr	r1, [pc, #88]	; (800ac88 <servoMiddle+0x64>)
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	440b      	add	r3, r1
 800ac3a:	33bc      	adds	r3, #188	; 0xbc
 800ac3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac40:	2b11      	cmp	r3, #17
 800ac42:	dc11      	bgt.n	800ac68 <servoMiddle+0x44>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b07      	cmp	r3, #7
 800ac48:	dc0e      	bgt.n	800ac68 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800ac4a:	490f      	ldr	r1, [pc, #60]	; (800ac88 <servoMiddle+0x64>)
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	440b      	add	r3, r1
 800ac58:	33bc      	adds	r3, #188	; 0xbc
 800ac5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <servoMiddle+0x68>)
 800ac62:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800ac66:	e009      	b.n	800ac7c <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800ac68:	4907      	ldr	r1, [pc, #28]	; (800ac88 <servoMiddle+0x64>)
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	440b      	add	r3, r1
 800ac76:	33bc      	adds	r3, #188	; 0xbc
 800ac78:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	20001120 	.word	0x20001120
 800ac8c:	200019bc 	.word	0x200019bc

0800ac90 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800ac9a:	490d      	ldr	r1, [pc, #52]	; (800acd0 <servoDirection+0x40>)
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	440b      	add	r3, r1
 800aca8:	33c0      	adds	r3, #192	; 0xc0
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	461a      	mov	r2, r3
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	fa42 f303 	asr.w	r3, r2, r3
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <servoDirection+0x32>
        return -1;
 800acbc:	f04f 33ff 	mov.w	r3, #4294967295
 800acc0:	e000      	b.n	800acc4 <servoDirection+0x34>
    else
        return 1;
 800acc2:	2301      	movs	r3, #1
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	20001120 	.word	0x20001120

0800acd4 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800acda:	4b1e      	ldr	r3, [pc, #120]	; (800ad54 <loadCustomServoMixer+0x80>)
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ace0:	2270      	movs	r2, #112	; 0x70
 800ace2:	2100      	movs	r1, #0
 800ace4:	481c      	ldr	r0, [pc, #112]	; (800ad58 <loadCustomServoMixer+0x84>)
 800ace6:	f017 f909 	bl	8021efc <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800acea:	2300      	movs	r3, #0
 800acec:	71fb      	strb	r3, [r7, #7]
 800acee:	e028      	b.n	800ad42 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800acf0:	79fa      	ldrb	r2, [r7, #7]
 800acf2:	491a      	ldr	r1, [pc, #104]	; (800ad5c <loadCustomServoMixer+0x88>)
 800acf4:	4613      	mov	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	1a9b      	subs	r3, r3, r2
 800acfa:	440b      	add	r3, r1
 800acfc:	33d2      	adds	r3, #210	; 0xd2
 800acfe:	f993 3000 	ldrsb.w	r3, [r3]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d021      	beq.n	800ad4a <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ad06:	79fa      	ldrb	r2, [r7, #7]
 800ad08:	79f9      	ldrb	r1, [r7, #7]
 800ad0a:	4813      	ldr	r0, [pc, #76]	; (800ad58 <loadCustomServoMixer+0x84>)
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	1a5b      	subs	r3, r3, r1
 800ad12:	4418      	add	r0, r3
 800ad14:	4911      	ldr	r1, [pc, #68]	; (800ad5c <loadCustomServoMixer+0x88>)
 800ad16:	4613      	mov	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ad22:	4603      	mov	r3, r0
 800ad24:	6811      	ldr	r1, [r2, #0]
 800ad26:	6019      	str	r1, [r3, #0]
 800ad28:	8891      	ldrh	r1, [r2, #4]
 800ad2a:	7992      	ldrb	r2, [r2, #6]
 800ad2c:	8099      	strh	r1, [r3, #4]
 800ad2e:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800ad30:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <loadCustomServoMixer+0x80>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	4b06      	ldr	r3, [pc, #24]	; (800ad54 <loadCustomServoMixer+0x80>)
 800ad3a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	71fb      	strb	r3, [r7, #7]
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	2b0f      	cmp	r3, #15
 800ad46:	d9d3      	bls.n	800acf0 <loadCustomServoMixer+0x1c>
    }
}
 800ad48:	e000      	b.n	800ad4c <loadCustomServoMixer+0x78>
            break;
 800ad4a:	bf00      	nop
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	200017e5 	.word	0x200017e5
 800ad58:	200018d8 	.word	0x200018d8
 800ad5c:	20000bb4 	.word	0x20000bb4

0800ad60 <mixerInit>:

void mixerInit(void)
{
 800ad60:	b590      	push	{r4, r7, lr}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800ad66:	4b8b      	ldr	r3, [pc, #556]	; (800af94 <mixerInit+0x234>)
 800ad68:	795b      	ldrb	r3, [r3, #5]
 800ad6a:	4a8b      	ldr	r2, [pc, #556]	; (800af98 <mixerInit+0x238>)
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	4413      	add	r3, r2
 800ad70:	785b      	ldrb	r3, [r3, #1]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bf14      	ite	ne
 800ad76:	2301      	movne	r3, #1
 800ad78:	2300      	moveq	r3, #0
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	4b87      	ldr	r3, [pc, #540]	; (800af9c <mixerInit+0x23c>)
 800ad7e:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800ad80:	2020      	movs	r0, #32
 800ad82:	f7fc f911 	bl	8006fa8 <feature>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <mixerInit+0x32>
        core.useServo = 1;
 800ad8c:	4b83      	ldr	r3, [pc, #524]	; (800af9c <mixerInit+0x23c>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800ad92:	4b80      	ldr	r3, [pc, #512]	; (800af94 <mixerInit+0x234>)
 800ad94:	795b      	ldrb	r3, [r3, #5]
 800ad96:	2b17      	cmp	r3, #23
 800ad98:	d128      	bne.n	800adec <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	e021      	b.n	800ade4 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800ada0:	4a7c      	ldr	r2, [pc, #496]	; (800af94 <mixerInit+0x234>)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3301      	adds	r3, #1
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	4413      	add	r3, r2
 800adaa:	edd3 7a00 	vldr	s15, [r3]
 800adae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb6:	d048      	beq.n	800ae4a <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800adb8:	4a79      	ldr	r2, [pc, #484]	; (800afa0 <mixerInit+0x240>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	18d1      	adds	r1, r2, r3
 800adc0:	4a74      	ldr	r2, [pc, #464]	; (800af94 <mixerInit+0x234>)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3301      	adds	r3, #1
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	4413      	add	r3, r2
 800adca:	460c      	mov	r4, r1
 800adcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800adce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800add2:	4b74      	ldr	r3, [pc, #464]	; (800afa4 <mixerInit+0x244>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	3301      	adds	r3, #1
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b72      	ldr	r3, [pc, #456]	; (800afa4 <mixerInit+0x244>)
 800addc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3301      	adds	r3, #1
 800ade2:	607b      	str	r3, [r7, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b0b      	cmp	r3, #11
 800ade8:	ddda      	ble.n	800ada0 <mixerInit+0x40>
 800adea:	e02f      	b.n	800ae4c <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800adec:	4b69      	ldr	r3, [pc, #420]	; (800af94 <mixerInit+0x234>)
 800adee:	795b      	ldrb	r3, [r3, #5]
 800adf0:	461a      	mov	r2, r3
 800adf2:	4b69      	ldr	r3, [pc, #420]	; (800af98 <mixerInit+0x238>)
 800adf4:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800adf8:	4b6a      	ldr	r3, [pc, #424]	; (800afa4 <mixerInit+0x244>)
 800adfa:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800adfc:	4b65      	ldr	r3, [pc, #404]	; (800af94 <mixerInit+0x234>)
 800adfe:	795b      	ldrb	r3, [r3, #5]
 800ae00:	4a65      	ldr	r2, [pc, #404]	; (800af98 <mixerInit+0x238>)
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	4413      	add	r3, r2
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01f      	beq.n	800ae4c <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	607b      	str	r3, [r7, #4]
 800ae10:	e014      	b.n	800ae3c <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ae12:	4b60      	ldr	r3, [pc, #384]	; (800af94 <mixerInit+0x234>)
 800ae14:	795b      	ldrb	r3, [r3, #5]
 800ae16:	4a60      	ldr	r2, [pc, #384]	; (800af98 <mixerInit+0x238>)
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	4413      	add	r3, r2
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	18d1      	adds	r1, r2, r3
 800ae24:	4a5e      	ldr	r2, [pc, #376]	; (800afa0 <mixerInit+0x240>)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	4413      	add	r3, r2
 800ae2c:	461c      	mov	r4, r3
 800ae2e:	460b      	mov	r3, r1
 800ae30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	4b59      	ldr	r3, [pc, #356]	; (800afa4 <mixerInit+0x244>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	dbe4      	blt.n	800ae12 <mixerInit+0xb2>
 800ae48:	e000      	b.n	800ae4c <mixerInit+0xec>
                break;
 800ae4a:	bf00      	nop
        }
    }

    if (core.useServo) {
 800ae4c:	4b53      	ldr	r3, [pc, #332]	; (800af9c <mixerInit+0x23c>)
 800ae4e:	7d5b      	ldrb	r3, [r3, #21]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d033      	beq.n	800aebc <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800ae54:	4b4f      	ldr	r3, [pc, #316]	; (800af94 <mixerInit+0x234>)
 800ae56:	795b      	ldrb	r3, [r3, #5]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	4b53      	ldr	r3, [pc, #332]	; (800afa8 <mixerInit+0x248>)
 800ae5c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae60:	4b52      	ldr	r3, [pc, #328]	; (800afac <mixerInit+0x24c>)
 800ae62:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800ae64:	4b4b      	ldr	r3, [pc, #300]	; (800af94 <mixerInit+0x234>)
 800ae66:	795b      	ldrb	r3, [r3, #5]
 800ae68:	4a4f      	ldr	r2, [pc, #316]	; (800afa8 <mixerInit+0x248>)
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d023      	beq.n	800aebc <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800ae74:	2300      	movs	r3, #0
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	e01a      	b.n	800aeb0 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800ae7a:	4b46      	ldr	r3, [pc, #280]	; (800af94 <mixerInit+0x234>)
 800ae7c:	795b      	ldrb	r3, [r3, #5]
 800ae7e:	4a4a      	ldr	r2, [pc, #296]	; (800afa8 <mixerInit+0x248>)
 800ae80:	00db      	lsls	r3, r3, #3
 800ae82:	4413      	add	r3, r2
 800ae84:	6859      	ldr	r1, [r3, #4]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	18c8      	adds	r0, r1, r3
 800ae90:	4947      	ldr	r1, [pc, #284]	; (800afb0 <mixerInit+0x250>)
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	1a9b      	subs	r3, r3, r2
 800ae9a:	440b      	add	r3, r1
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	6811      	ldr	r1, [r2, #0]
 800aea0:	6019      	str	r1, [r3, #0]
 800aea2:	8891      	ldrh	r1, [r2, #4]
 800aea4:	7992      	ldrb	r2, [r2, #6]
 800aea6:	8099      	strh	r1, [r3, #4]
 800aea8:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	3301      	adds	r3, #1
 800aeae:	607b      	str	r3, [r7, #4]
 800aeb0:	4b3e      	ldr	r3, [pc, #248]	; (800afac <mixerInit+0x24c>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	dbde      	blt.n	800ae7a <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800aebc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800aec0:	f7fc f872 	bl	8006fa8 <feature>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d045      	beq.n	800af56 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800aeca:	4b36      	ldr	r3, [pc, #216]	; (800afa4 <mixerInit+0x244>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d941      	bls.n	800af56 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800aed2:	2300      	movs	r3, #0
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	e038      	b.n	800af4a <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800aed8:	4a31      	ldr	r2, [pc, #196]	; (800afa0 <mixerInit+0x240>)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	4413      	add	r3, r2
 800aee0:	3308      	adds	r3, #8
 800aee2:	edd3 7a00 	vldr	s15, [r3]
 800aee6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aeea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aeee:	4a2c      	ldr	r2, [pc, #176]	; (800afa0 <mixerInit+0x240>)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	4413      	add	r3, r2
 800aef6:	3308      	adds	r3, #8
 800aef8:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800aefc:	4a28      	ldr	r2, [pc, #160]	; (800afa0 <mixerInit+0x240>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	011b      	lsls	r3, r3, #4
 800af02:	4413      	add	r3, r2
 800af04:	3304      	adds	r3, #4
 800af06:	edd3 7a00 	vldr	s15, [r3]
 800af0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af12:	4a23      	ldr	r2, [pc, #140]	; (800afa0 <mixerInit+0x240>)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	4413      	add	r3, r2
 800af1a:	3304      	adds	r3, #4
 800af1c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800af20:	4a1f      	ldr	r2, [pc, #124]	; (800afa0 <mixerInit+0x240>)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	4413      	add	r3, r2
 800af28:	330c      	adds	r3, #12
 800af2a:	edd3 7a00 	vldr	s15, [r3]
 800af2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af36:	4a1a      	ldr	r2, [pc, #104]	; (800afa0 <mixerInit+0x240>)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	011b      	lsls	r3, r3, #4
 800af3c:	4413      	add	r3, r2
 800af3e:	330c      	adds	r3, #12
 800af40:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3301      	adds	r3, #1
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	4b16      	ldr	r3, [pc, #88]	; (800afa4 <mixerInit+0x244>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4293      	cmp	r3, r2
 800af54:	dbc0      	blt.n	800aed8 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800af56:	4b0f      	ldr	r3, [pc, #60]	; (800af94 <mixerInit+0x234>)
 800af58:	795b      	ldrb	r3, [r3, #5]
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	d007      	beq.n	800af6e <mixerInit+0x20e>
 800af5e:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <mixerInit+0x234>)
 800af60:	795b      	ldrb	r3, [r3, #5]
 800af62:	2b0e      	cmp	r3, #14
 800af64:	d003      	beq.n	800af6e <mixerInit+0x20e>
 800af66:	4b0b      	ldr	r3, [pc, #44]	; (800af94 <mixerInit+0x234>)
 800af68:	795b      	ldrb	r3, [r3, #5]
 800af6a:	2b18      	cmp	r3, #24
 800af6c:	d109      	bne.n	800af82 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800af6e:	4b11      	ldr	r3, [pc, #68]	; (800afb4 <mixerInit+0x254>)
 800af70:	2201      	movs	r2, #1
 800af72:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800af74:	4b07      	ldr	r3, [pc, #28]	; (800af94 <mixerInit+0x234>)
 800af76:	795b      	ldrb	r3, [r3, #5]
 800af78:	2b18      	cmp	r3, #24
 800af7a:	d105      	bne.n	800af88 <mixerInit+0x228>
            loadCustomServoMixer();
 800af7c:	f7ff feaa 	bl	800acd4 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800af80:	e002      	b.n	800af88 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800af82:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <mixerInit+0x254>)
 800af84:	2200      	movs	r2, #0
 800af86:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800af88:	f000 f816 	bl	800afb8 <mixerResetMotors>
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	bd90      	pop	{r4, r7, pc}
 800af94:	20000bb4 	.word	0x20000bb4
 800af98:	08027f38 	.word	0x08027f38
 800af9c:	20000afc 	.word	0x20000afc
 800afa0:	20001818 	.word	0x20001818
 800afa4:	200017e4 	.word	0x200017e4
 800afa8:	080280a4 	.word	0x080280a4
 800afac:	200017e5 	.word	0x200017e5
 800afb0:	200018d8 	.word	0x200018d8
 800afb4:	20001980 	.word	0x20001980

0800afb8 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	607b      	str	r3, [r7, #4]
 800afc2:	e016      	b.n	800aff2 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800afc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800afc8:	f7fb ffee 	bl	8006fa8 <feature>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <mixerResetMotors+0x24>
 800afd2:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <mixerResetMotors+0x4c>)
 800afd4:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800afd8:	b21b      	sxth	r3, r3
 800afda:	e003      	b.n	800afe4 <mixerResetMotors+0x2c>
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <mixerResetMotors+0x4c>)
 800afde:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800afe2:	b21b      	sxth	r3, r3
 800afe4:	4908      	ldr	r1, [pc, #32]	; (800b008 <mixerResetMotors+0x50>)
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3301      	adds	r3, #1
 800aff0:	607b      	str	r3, [r7, #4]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b0b      	cmp	r3, #11
 800aff6:	dde5      	ble.n	800afc4 <mixerResetMotors+0xc>
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	20000bb4 	.word	0x20000bb4
 800b008:	20001800 	.word	0x20001800

0800b00c <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3301      	adds	r3, #1
 800b018:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
 800b01e:	e038      	b.n	800b092 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b020:	4934      	ldr	r1, [pc, #208]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	4613      	mov	r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	440b      	add	r3, r1
 800b02c:	33d6      	adds	r3, #214	; 0xd6
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	4930      	ldr	r1, [pc, #192]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4613      	mov	r3, r2
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	440b      	add	r3, r1
 800b03e:	33d2      	adds	r3, #210	; 0xd2
 800b040:	2200      	movs	r2, #0
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	492b      	ldr	r1, [pc, #172]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	4613      	mov	r3, r2
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	440b      	add	r3, r1
 800b050:	33d2      	adds	r3, #210	; 0xd2
 800b052:	f993 3000 	ldrsb.w	r3, [r3]
 800b056:	b2d8      	uxtb	r0, r3
 800b058:	4926      	ldr	r1, [pc, #152]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4613      	mov	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	440b      	add	r3, r1
 800b064:	33d1      	adds	r3, #209	; 0xd1
 800b066:	4602      	mov	r2, r0
 800b068:	701a      	strb	r2, [r3, #0]
 800b06a:	4922      	ldr	r1, [pc, #136]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4613      	mov	r3, r2
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	1a9b      	subs	r3, r3, r2
 800b074:	440b      	add	r3, r1
 800b076:	33d1      	adds	r3, #209	; 0xd1
 800b078:	7818      	ldrb	r0, [r3, #0]
 800b07a:	491e      	ldr	r1, [pc, #120]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4613      	mov	r3, r2
 800b080:	00db      	lsls	r3, r3, #3
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	440b      	add	r3, r1
 800b086:	33d0      	adds	r3, #208	; 0xd0
 800b088:	4602      	mov	r2, r0
 800b08a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b0f      	cmp	r3, #15
 800b096:	ddc3      	ble.n	800b020 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	e01a      	b.n	800b0d4 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b09e:	4a16      	ldr	r2, [pc, #88]	; (800b0f8 <servoMixerLoadMix+0xec>)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	4413      	add	r3, r2
 800b0a6:	6859      	ldr	r1, [r3, #4]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	18c8      	adds	r0, r1, r3
 800b0b2:	4910      	ldr	r1, [pc, #64]	; (800b0f4 <servoMixerLoadMix+0xe8>)
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	440b      	add	r3, r1
 800b0be:	33d0      	adds	r3, #208	; 0xd0
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	6811      	ldr	r1, [r2, #0]
 800b0c4:	6019      	str	r1, [r3, #0]
 800b0c6:	8891      	ldrh	r1, [r2, #4]
 800b0c8:	7992      	ldrb	r2, [r2, #6]
 800b0ca:	8099      	strh	r1, [r3, #4]
 800b0cc:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	4a08      	ldr	r2, [pc, #32]	; (800b0f8 <servoMixerLoadMix+0xec>)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	dbdc      	blt.n	800b09e <servoMixerLoadMix+0x92>
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	20000bb4 	.word	0x20000bb4
 800b0f8:	080280a4 	.word	0x080280a4

0800b0fc <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b0fc:	b490      	push	{r4, r7}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	e00a      	b.n	800b126 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b110:	4a1c      	ldr	r2, [pc, #112]	; (800b184 <mixerLoadMix+0x88>)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3301      	adds	r3, #1
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	4413      	add	r3, r2
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b0b      	cmp	r3, #11
 800b12a:	ddf1      	ble.n	800b110 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b12c:	4a16      	ldr	r2, [pc, #88]	; (800b188 <mixerLoadMix+0x8c>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	4413      	add	r3, r2
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01f      	beq.n	800b17a <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e014      	b.n	800b16a <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b140:	4a11      	ldr	r2, [pc, #68]	; (800b188 <mixerLoadMix+0x8c>)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	4413      	add	r3, r2
 800b148:	685a      	ldr	r2, [r3, #4]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	011b      	lsls	r3, r3, #4
 800b14e:	18d1      	adds	r1, r2, r3
 800b150:	4a0c      	ldr	r2, [pc, #48]	; (800b184 <mixerLoadMix+0x88>)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	011b      	lsls	r3, r3, #4
 800b158:	4413      	add	r3, r2
 800b15a:	461c      	mov	r4, r3
 800b15c:	460b      	mov	r3, r1
 800b15e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	4a07      	ldr	r2, [pc, #28]	; (800b188 <mixerLoadMix+0x8c>)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b172:	461a      	mov	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4293      	cmp	r3, r2
 800b178:	dbe2      	blt.n	800b140 <mixerLoadMix+0x44>
    }
}
 800b17a:	bf00      	nop
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bc90      	pop	{r4, r7}
 800b182:	4770      	bx	lr
 800b184:	20000bb4 	.word	0x20000bb4
 800b188:	08027f38 	.word	0x08027f38

0800b18c <writeServos>:

void writeServos(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b190:	4b95      	ldr	r3, [pc, #596]	; (800b3e8 <writeServos+0x25c>)
 800b192:	7d5b      	ldrb	r3, [r3, #21]
 800b194:	f083 0301 	eor.w	r3, r3, #1
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f040 811d 	bne.w	800b3da <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b1a0:	4b92      	ldr	r3, [pc, #584]	; (800b3ec <writeServos+0x260>)
 800b1a2:	795b      	ldrb	r3, [r3, #5]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	2b17      	cmp	r3, #23
 800b1a8:	f200 8100 	bhi.w	800b3ac <writeServos+0x220>
 800b1ac:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <writeServos+0x28>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b237 	.word	0x0800b237
 800b1b8:	0800b3ad 	.word	0x0800b3ad
 800b1bc:	0800b3ad 	.word	0x0800b3ad
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b277 	.word	0x0800b277
 800b1c8:	0800b3ad 	.word	0x0800b3ad
 800b1cc:	0800b3ad 	.word	0x0800b3ad
 800b1d0:	0800b2bb 	.word	0x0800b2bb
 800b1d4:	0800b3ad 	.word	0x0800b3ad
 800b1d8:	0800b3ad 	.word	0x0800b3ad
 800b1dc:	0800b3ad 	.word	0x0800b3ad
 800b1e0:	0800b3ad 	.word	0x0800b3ad
 800b1e4:	0800b3ad 	.word	0x0800b3ad
 800b1e8:	0800b2dd 	.word	0x0800b2dd
 800b1ec:	0800b3ad 	.word	0x0800b3ad
 800b1f0:	0800b3ad 	.word	0x0800b3ad
 800b1f4:	0800b3ad 	.word	0x0800b3ad
 800b1f8:	0800b3ad 	.word	0x0800b3ad
 800b1fc:	0800b3ad 	.word	0x0800b3ad
 800b200:	0800b299 	.word	0x0800b299
 800b204:	0800b2dd 	.word	0x0800b2dd
 800b208:	0800b3ad 	.word	0x0800b3ad
 800b20c:	0800b3ad 	.word	0x0800b3ad
 800b210:	0800b31f 	.word	0x0800b31f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b214:	4b76      	ldr	r3, [pc, #472]	; (800b3f0 <writeServos+0x264>)
 800b216:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	4619      	mov	r1, r3
 800b21e:	2000      	movs	r0, #0
 800b220:	f7f6 fe80 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b224:	4b72      	ldr	r3, [pc, #456]	; (800b3f0 <writeServos+0x264>)
 800b226:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4619      	mov	r1, r3
 800b22e:	2001      	movs	r0, #1
 800b230:	f7f6 fe78 	bl	8001f24 <actPwmWriteServo>
            break;
 800b234:	e0d6      	b.n	800b3e4 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b236:	4b6f      	ldr	r3, [pc, #444]	; (800b3f4 <writeServos+0x268>)
 800b238:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d008      	beq.n	800b252 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b240:	4b6b      	ldr	r3, [pc, #428]	; (800b3f0 <writeServos+0x264>)
 800b242:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b246:	b29b      	uxth	r3, r3
 800b248:	4619      	mov	r1, r3
 800b24a:	2000      	movs	r0, #0
 800b24c:	f7f6 fe6a 	bl	8001f24 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b250:	e0c8      	b.n	800b3e4 <writeServos+0x258>
                if (f.ARMED)
 800b252:	4b69      	ldr	r3, [pc, #420]	; (800b3f8 <writeServos+0x26c>)
 800b254:	785b      	ldrb	r3, [r3, #1]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d008      	beq.n	800b26c <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b25a:	4b65      	ldr	r3, [pc, #404]	; (800b3f0 <writeServos+0x264>)
 800b25c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b260:	b29b      	uxth	r3, r3
 800b262:	4619      	mov	r1, r3
 800b264:	2000      	movs	r0, #0
 800b266:	f7f6 fe5d 	bl	8001f24 <actPwmWriteServo>
            break;
 800b26a:	e0bb      	b.n	800b3e4 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b26c:	2100      	movs	r1, #0
 800b26e:	2000      	movs	r0, #0
 800b270:	f7f6 fe58 	bl	8001f24 <actPwmWriteServo>
            break;
 800b274:	e0b6      	b.n	800b3e4 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b276:	4b5e      	ldr	r3, [pc, #376]	; (800b3f0 <writeServos+0x264>)
 800b278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	4619      	mov	r1, r3
 800b280:	2000      	movs	r0, #0
 800b282:	f7f6 fe4f 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b286:	4b5a      	ldr	r3, [pc, #360]	; (800b3f0 <writeServos+0x264>)
 800b288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	4619      	mov	r1, r3
 800b290:	2001      	movs	r0, #1
 800b292:	f7f6 fe47 	bl	8001f24 <actPwmWriteServo>
            break;
 800b296:	e0a5      	b.n	800b3e4 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b298:	4b55      	ldr	r3, [pc, #340]	; (800b3f0 <writeServos+0x264>)
 800b29a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	f7f6 fe3e 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b2a8:	4b51      	ldr	r3, [pc, #324]	; (800b3f0 <writeServos+0x264>)
 800b2aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	f7f6 fe36 	bl	8001f24 <actPwmWriteServo>
            break;
 800b2b8:	e094      	b.n	800b3e4 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b2ba:	4b4d      	ldr	r3, [pc, #308]	; (800b3f0 <writeServos+0x264>)
 800b2bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7f6 fe2d 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b2ca:	4b49      	ldr	r3, [pc, #292]	; (800b3f0 <writeServos+0x264>)
 800b2cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f7f6 fe25 	bl	8001f24 <actPwmWriteServo>
            break;
 800b2da:	e083      	b.n	800b3e4 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b2dc:	4b44      	ldr	r3, [pc, #272]	; (800b3f0 <writeServos+0x264>)
 800b2de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	f7f6 fe1c 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b2ec:	4b40      	ldr	r3, [pc, #256]	; (800b3f0 <writeServos+0x264>)
 800b2ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	f7f6 fe14 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b2fc:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <writeServos+0x264>)
 800b2fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b302:	b29b      	uxth	r3, r3
 800b304:	4619      	mov	r1, r3
 800b306:	2002      	movs	r0, #2
 800b308:	f7f6 fe0c 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b30c:	4b38      	ldr	r3, [pc, #224]	; (800b3f0 <writeServos+0x264>)
 800b30e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b312:	b29b      	uxth	r3, r3
 800b314:	4619      	mov	r1, r3
 800b316:	2003      	movs	r0, #3
 800b318:	f7f6 fe04 	bl	8001f24 <actPwmWriteServo>
            break;
 800b31c:	e062      	b.n	800b3e4 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b31e:	4b34      	ldr	r3, [pc, #208]	; (800b3f0 <writeServos+0x264>)
 800b320:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b324:	b29b      	uxth	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	2000      	movs	r0, #0
 800b32a:	f7f6 fdfb 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b32e:	4b30      	ldr	r3, [pc, #192]	; (800b3f0 <writeServos+0x264>)
 800b330:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b334:	b29b      	uxth	r3, r3
 800b336:	4619      	mov	r1, r3
 800b338:	2001      	movs	r0, #1
 800b33a:	f7f6 fdf3 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b33e:	4b2c      	ldr	r3, [pc, #176]	; (800b3f0 <writeServos+0x264>)
 800b340:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b344:	b29b      	uxth	r3, r3
 800b346:	4619      	mov	r1, r3
 800b348:	2002      	movs	r0, #2
 800b34a:	f7f6 fdeb 	bl	8001f24 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b34e:	4b28      	ldr	r3, [pc, #160]	; (800b3f0 <writeServos+0x264>)
 800b350:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b354:	b29b      	uxth	r3, r3
 800b356:	4619      	mov	r1, r3
 800b358:	2003      	movs	r0, #3
 800b35a:	f7f6 fde3 	bl	8001f24 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b35e:	2001      	movs	r0, #1
 800b360:	f7fb fe22 	bl	8006fa8 <feature>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d039      	beq.n	800b3de <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b36a:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <writeServos+0x264>)
 800b36c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b370:	b29b      	uxth	r3, r3
 800b372:	4619      	mov	r1, r3
 800b374:	2004      	movs	r0, #4
 800b376:	f7f6 fdd5 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b37a:	4b1d      	ldr	r3, [pc, #116]	; (800b3f0 <writeServos+0x264>)
 800b37c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b380:	b29b      	uxth	r3, r3
 800b382:	4619      	mov	r1, r3
 800b384:	2005      	movs	r0, #5
 800b386:	f7f6 fdcd 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b38a:	4b19      	ldr	r3, [pc, #100]	; (800b3f0 <writeServos+0x264>)
 800b38c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b390:	b29b      	uxth	r3, r3
 800b392:	4619      	mov	r1, r3
 800b394:	2006      	movs	r0, #6
 800b396:	f7f6 fdc5 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b39a:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <writeServos+0x264>)
 800b39c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	2007      	movs	r0, #7
 800b3a6:	f7f6 fdbd 	bl	8001f24 <actPwmWriteServo>
            }
            break;
 800b3aa:	e018      	b.n	800b3de <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b3ac:	2020      	movs	r0, #32
 800b3ae:	f7fb fdfb 	bl	8006fa8 <feature>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d014      	beq.n	800b3e2 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <writeServos+0x264>)
 800b3ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	f7f6 fdae 	bl	8001f24 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b3c8:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <writeServos+0x264>)
 800b3ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	f7f6 fda6 	bl	8001f24 <actPwmWriteServo>
            }
            break;
 800b3d8:	e003      	b.n	800b3e2 <writeServos+0x256>
        return;
 800b3da:	bf00      	nop
 800b3dc:	e002      	b.n	800b3e4 <writeServos+0x258>
            break;
 800b3de:	bf00      	nop
 800b3e0:	e000      	b.n	800b3e4 <writeServos+0x258>
            break;
 800b3e2:	bf00      	nop
    }
}
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000afc 	.word	0x20000afc
 800b3ec:	20000bb4 	.word	0x20000bb4
 800b3f0:	20000040 	.word	0x20000040
 800b3f4:	20001120 	.word	0x20001120
 800b3f8:	20001980 	.word	0x20001980

0800b3fc <writeMotors>:

void writeMotors(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b402:	2300      	movs	r3, #0
 800b404:	71fb      	strb	r3, [r7, #7]
 800b406:	e00c      	b.n	800b422 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	4a0b      	ldr	r2, [pc, #44]	; (800b438 <writeMotors+0x3c>)
 800b40c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b410:	b29a      	uxth	r2, r3
 800b412:	79fb      	ldrb	r3, [r7, #7]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f7f6 fd68 	bl	8001eec <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b41c:	79fb      	ldrb	r3, [r7, #7]
 800b41e:	3301      	adds	r3, #1
 800b420:	71fb      	strb	r3, [r7, #7]
 800b422:	4b06      	ldr	r3, [pc, #24]	; (800b43c <writeMotors+0x40>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	79fa      	ldrb	r2, [r7, #7]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d3ed      	bcc.n	800b408 <writeMotors+0xc>
}
 800b42c:	bf00      	nop
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	200017e8 	.word	0x200017e8
 800b43c:	200017e4 	.word	0x200017e4

0800b440 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b440:	b590      	push	{r4, r7, lr}
 800b442:	b08b      	sub	sp, #44	; 0x2c
 800b444:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b446:	4bae      	ldr	r3, [pc, #696]	; (800b700 <servoMixer+0x2c0>)
 800b448:	7a9b      	ldrb	r3, [r3, #10]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00c      	beq.n	800b468 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b44e:	4bad      	ldr	r3, [pc, #692]	; (800b704 <servoMixer+0x2c4>)
 800b450:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b454:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b456:	4bab      	ldr	r3, [pc, #684]	; (800b704 <servoMixer+0x2c4>)
 800b458:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b45c:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b45e:	4ba9      	ldr	r3, [pc, #676]	; (800b704 <servoMixer+0x2c4>)
 800b460:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b464:	813b      	strh	r3, [r7, #8]
 800b466:	e00b      	b.n	800b480 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b468:	4ba7      	ldr	r3, [pc, #668]	; (800b708 <servoMixer+0x2c8>)
 800b46a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b46e:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b470:	4ba5      	ldr	r3, [pc, #660]	; (800b708 <servoMixer+0x2c8>)
 800b472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b476:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b478:	4ba3      	ldr	r3, [pc, #652]	; (800b708 <servoMixer+0x2c8>)
 800b47a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b47e:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b480:	4ba2      	ldr	r3, [pc, #648]	; (800b70c <servoMixer+0x2cc>)
 800b482:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b486:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b488:	4ba1      	ldr	r3, [pc, #644]	; (800b710 <servoMixer+0x2d0>)
 800b48a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b48e:	b29a      	uxth	r2, r3
 800b490:	4ba0      	ldr	r3, [pc, #640]	; (800b714 <servoMixer+0x2d4>)
 800b492:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	b29b      	uxth	r3, r3
 800b49a:	b21b      	sxth	r3, r3
 800b49c:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b49e:	4b9c      	ldr	r3, [pc, #624]	; (800b710 <servoMixer+0x2d0>)
 800b4a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	4b9b      	ldr	r3, [pc, #620]	; (800b714 <servoMixer+0x2d4>)
 800b4a8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	b21b      	sxth	r3, r3
 800b4b2:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b4b4:	4b96      	ldr	r3, [pc, #600]	; (800b710 <servoMixer+0x2d0>)
 800b4b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	4b95      	ldr	r3, [pc, #596]	; (800b714 <servoMixer+0x2d4>)
 800b4be:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	b21b      	sxth	r3, r3
 800b4c8:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b4ca:	4b91      	ldr	r3, [pc, #580]	; (800b710 <servoMixer+0x2d0>)
 800b4cc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	4b90      	ldr	r3, [pc, #576]	; (800b714 <servoMixer+0x2d4>)
 800b4d4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	b21b      	sxth	r3, r3
 800b4de:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b4e0:	4b8b      	ldr	r3, [pc, #556]	; (800b710 <servoMixer+0x2d0>)
 800b4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	4b8a      	ldr	r3, [pc, #552]	; (800b714 <servoMixer+0x2d4>)
 800b4ea:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	b21b      	sxth	r3, r3
 800b4f4:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b4f6:	4b86      	ldr	r3, [pc, #536]	; (800b710 <servoMixer+0x2d0>)
 800b4f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	4b85      	ldr	r3, [pc, #532]	; (800b714 <servoMixer+0x2d4>)
 800b500:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	b29b      	uxth	r3, r3
 800b508:	b21b      	sxth	r3, r3
 800b50a:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b50c:	4b80      	ldr	r3, [pc, #512]	; (800b710 <servoMixer+0x2d0>)
 800b50e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b512:	b29a      	uxth	r2, r3
 800b514:	4b7f      	ldr	r3, [pc, #508]	; (800b714 <servoMixer+0x2d4>)
 800b516:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	b21b      	sxth	r3, r3
 800b520:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b522:	4b7b      	ldr	r3, [pc, #492]	; (800b710 <servoMixer+0x2d0>)
 800b524:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b528:	b29a      	uxth	r2, r3
 800b52a:	4b7a      	ldr	r3, [pc, #488]	; (800b714 <servoMixer+0x2d4>)
 800b52c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	b29b      	uxth	r3, r3
 800b534:	b21b      	sxth	r3, r3
 800b536:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b538:	2300      	movs	r3, #0
 800b53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b53e:	e00a      	b.n	800b556 <servoMixer+0x116>
        servo[i] = 0;
 800b540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b544:	4a74      	ldr	r2, [pc, #464]	; (800b718 <servoMixer+0x2d8>)
 800b546:	2100      	movs	r1, #0
 800b548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b550:	3301      	adds	r3, #1
 800b552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b55a:	2b07      	cmp	r3, #7
 800b55c:	d9f0      	bls.n	800b540 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b55e:	2300      	movs	r3, #0
 800b560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b564:	e15f      	b.n	800b826 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b566:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b56a:	496c      	ldr	r1, [pc, #432]	; (800b71c <servoMixer+0x2dc>)
 800b56c:	4613      	mov	r3, r2
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	1a9b      	subs	r3, r3, r2
 800b572:	440b      	add	r3, r1
 800b574:	3306      	adds	r3, #6
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00e      	beq.n	800b59a <servoMixer+0x15a>
 800b57c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b580:	4966      	ldr	r1, [pc, #408]	; (800b71c <servoMixer+0x2dc>)
 800b582:	4613      	mov	r3, r2
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	1a9b      	subs	r3, r3, r2
 800b588:	440b      	add	r3, r1
 800b58a:	3306      	adds	r3, #6
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	3314      	adds	r3, #20
 800b590:	4a63      	ldr	r2, [pc, #396]	; (800b720 <servoMixer+0x2e0>)
 800b592:	5cd3      	ldrb	r3, [r2, r3]
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 813b 	beq.w	800b810 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b59a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b59e:	495f      	ldr	r1, [pc, #380]	; (800b71c <servoMixer+0x2dc>)
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	1a9b      	subs	r3, r3, r2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b5ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5b2:	495a      	ldr	r1, [pc, #360]	; (800b71c <servoMixer+0x2dc>)
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	1a9b      	subs	r3, r3, r2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3301      	adds	r3, #1
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b5c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b5c8:	4956      	ldr	r1, [pc, #344]	; (800b724 <servoMixer+0x2e4>)
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	440b      	add	r3, r1
 800b5d4:	33ba      	adds	r3, #186	; 0xba
 800b5d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5da:	b299      	uxth	r1, r3
 800b5dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b5e0:	4850      	ldr	r0, [pc, #320]	; (800b724 <servoMixer+0x2e4>)
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	4403      	add	r3, r0
 800b5ec:	33b8      	adds	r3, #184	; 0xb8
 800b5ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	1acb      	subs	r3, r1, r3
 800b5f6:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b5f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5fc:	4947      	ldr	r1, [pc, #284]	; (800b71c <servoMixer+0x2dc>)
 800b5fe:	4613      	mov	r3, r2
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	440b      	add	r3, r1
 800b606:	3304      	adds	r3, #4
 800b608:	f993 3000 	ldrsb.w	r3, [r3]
 800b60c:	461a      	mov	r2, r3
 800b60e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b610:	fb02 f303 	mul.w	r3, r2, r3
 800b614:	4a44      	ldr	r2, [pc, #272]	; (800b728 <servoMixer+0x2e8>)
 800b616:	fb82 1203 	smull	r1, r2, r2, r3
 800b61a:	1152      	asrs	r2, r2, #5
 800b61c:	17db      	asrs	r3, r3, #31
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	b29a      	uxth	r2, r3
 800b622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b624:	085b      	lsrs	r3, r3, #1
 800b626:	b29b      	uxth	r3, r3
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b62e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b632:	493a      	ldr	r1, [pc, #232]	; (800b71c <servoMixer+0x2dc>)
 800b634:	4613      	mov	r3, r2
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	1a9b      	subs	r3, r3, r2
 800b63a:	440b      	add	r3, r1
 800b63c:	3305      	adds	r3, #5
 800b63e:	f993 3000 	ldrsb.w	r3, [r3]
 800b642:	461a      	mov	r2, r3
 800b644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b646:	fb02 f303 	mul.w	r3, r2, r3
 800b64a:	4a37      	ldr	r2, [pc, #220]	; (800b728 <servoMixer+0x2e8>)
 800b64c:	fb82 1203 	smull	r1, r2, r2, r3
 800b650:	1152      	asrs	r2, r2, #5
 800b652:	17db      	asrs	r3, r3, #31
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	b29a      	uxth	r2, r3
 800b658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	b29b      	uxth	r3, r3
 800b662:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b664:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b668:	492c      	ldr	r1, [pc, #176]	; (800b71c <servoMixer+0x2dc>)
 800b66a:	4613      	mov	r3, r2
 800b66c:	00db      	lsls	r3, r3, #3
 800b66e:	1a9b      	subs	r3, r3, r2
 800b670:	440b      	add	r3, r1
 800b672:	3303      	adds	r3, #3
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10c      	bne.n	800b694 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b67a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b67e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	3328      	adds	r3, #40	; 0x28
 800b686:	443b      	add	r3, r7
 800b688:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b68c:	4b27      	ldr	r3, [pc, #156]	; (800b72c <servoMixer+0x2ec>)
 800b68e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b692:	e082      	b.n	800b79a <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b698:	4a24      	ldr	r2, [pc, #144]	; (800b72c <servoMixer+0x2ec>)
 800b69a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b69e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	3328      	adds	r3, #40	; 0x28
 800b6a6:	443b      	add	r3, r7
 800b6a8:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	da3f      	bge.n	800b730 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	4a1d      	ldr	r2, [pc, #116]	; (800b72c <servoMixer+0x2ec>)
 800b6b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6c0:	4916      	ldr	r1, [pc, #88]	; (800b71c <servoMixer+0x2dc>)
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	1a9b      	subs	r3, r3, r2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3303      	adds	r3, #3
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	4418      	add	r0, r3
 800b6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d4:	4a15      	ldr	r2, [pc, #84]	; (800b72c <servoMixer+0x2ec>)
 800b6d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	3328      	adds	r3, #40	; 0x28
 800b6e4:	443b      	add	r3, r7
 800b6e6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f7f8 fade 	bl	8003cac <constrain>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f6:	b211      	sxth	r1, r2
 800b6f8:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <servoMixer+0x2ec>)
 800b6fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b6fe:	e04c      	b.n	800b79a <servoMixer+0x35a>
 800b700:	20001980 	.word	0x20001980
 800b704:	200019e0 	.word	0x200019e0
 800b708:	20001a40 	.word	0x20001a40
 800b70c:	200017e8 	.word	0x200017e8
 800b710:	200019bc 	.word	0x200019bc
 800b714:	20000bb4 	.word	0x20000bb4
 800b718:	20000040 	.word	0x20000040
 800b71c:	200018d8 	.word	0x200018d8
 800b720:	20001a24 	.word	0x20001a24
 800b724:	20001120 	.word	0x20001120
 800b728:	51eb851f 	.word	0x51eb851f
 800b72c:	20001948 	.word	0x20001948
                else if (currentOutput[i] > input[from])
 800b730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b734:	4a63      	ldr	r2, [pc, #396]	; (800b8c4 <servoMixer+0x484>)
 800b736:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b73a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	3328      	adds	r3, #40	; 0x28
 800b742:	443b      	add	r3, r7
 800b744:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b748:	429a      	cmp	r2, r3
 800b74a:	dd26      	ble.n	800b79a <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b750:	4a5c      	ldr	r2, [pc, #368]	; (800b8c4 <servoMixer+0x484>)
 800b752:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b756:	4618      	mov	r0, r3
 800b758:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b75c:	495a      	ldr	r1, [pc, #360]	; (800b8c8 <servoMixer+0x488>)
 800b75e:	4613      	mov	r3, r2
 800b760:	00db      	lsls	r3, r3, #3
 800b762:	1a9b      	subs	r3, r3, r2
 800b764:	440b      	add	r3, r1
 800b766:	3303      	adds	r3, #3
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	1ac0      	subs	r0, r0, r3
 800b76c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	3328      	adds	r3, #40	; 0x28
 800b774:	443b      	add	r3, r7
 800b776:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b77a:	4619      	mov	r1, r3
 800b77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b780:	4a50      	ldr	r2, [pc, #320]	; (800b8c4 <servoMixer+0x484>)
 800b782:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b786:	461a      	mov	r2, r3
 800b788:	f7f8 fa90 	bl	8003cac <constrain>
 800b78c:	4602      	mov	r2, r0
 800b78e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b792:	b211      	sxth	r1, r2
 800b794:	4a4b      	ldr	r2, [pc, #300]	; (800b8c4 <servoMixer+0x484>)
 800b796:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b79a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b79e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fa73 	bl	800ac90 <servoDirection>
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b0:	4a44      	ldr	r2, [pc, #272]	; (800b8c4 <servoMixer+0x484>)
 800b7b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7bc:	4942      	ldr	r1, [pc, #264]	; (800b8c8 <servoMixer+0x488>)
 800b7be:	4613      	mov	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	440b      	add	r3, r1
 800b7c6:	3302      	adds	r3, #2
 800b7c8:	f993 3000 	ldrsb.w	r3, [r3]
 800b7cc:	fb00 f303 	mul.w	r3, r0, r3
 800b7d0:	4a3e      	ldr	r2, [pc, #248]	; (800b8cc <servoMixer+0x48c>)
 800b7d2:	fb82 1203 	smull	r1, r2, r2, r3
 800b7d6:	1152      	asrs	r2, r2, #5
 800b7d8:	17db      	asrs	r3, r3, #31
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b7e0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7f8 fa61 	bl	8003cac <constrain>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	fb03 f104 	mul.w	r1, r3, r4
 800b7f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7f4:	4a36      	ldr	r2, [pc, #216]	; (800b8d0 <servoMixer+0x490>)
 800b7f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	b28b      	uxth	r3, r1
 800b7fe:	4413      	add	r3, r2
 800b800:	b29a      	uxth	r2, r3
 800b802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b806:	b211      	sxth	r1, r2
 800b808:	4a31      	ldr	r2, [pc, #196]	; (800b8d0 <servoMixer+0x490>)
 800b80a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b80e:	e005      	b.n	800b81c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b814:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <servoMixer+0x484>)
 800b816:	2100      	movs	r1, #0
 800b818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b820:	3301      	adds	r3, #1
 800b822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b826:	4b2b      	ldr	r3, [pc, #172]	; (800b8d4 <servoMixer+0x494>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b82e:	429a      	cmp	r2, r3
 800b830:	f4ff ae99 	bcc.w	800b566 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b834:	2300      	movs	r3, #0
 800b836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b83a:	e039      	b.n	800b8b0 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b83c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b840:	4925      	ldr	r1, [pc, #148]	; (800b8d8 <servoMixer+0x498>)
 800b842:	4613      	mov	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	440b      	add	r3, r1
 800b84c:	33be      	adds	r3, #190	; 0xbe
 800b84e:	f993 3000 	ldrsb.w	r3, [r3]
 800b852:	4619      	mov	r1, r3
 800b854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b858:	4a1d      	ldr	r2, [pc, #116]	; (800b8d0 <servoMixer+0x490>)
 800b85a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b85e:	fb01 f303 	mul.w	r3, r1, r3
 800b862:	4a1a      	ldr	r2, [pc, #104]	; (800b8cc <servoMixer+0x48c>)
 800b864:	fb82 1203 	smull	r1, r2, r2, r3
 800b868:	1152      	asrs	r2, r2, #5
 800b86a:	17db      	asrs	r3, r3, #31
 800b86c:	1ad2      	subs	r2, r2, r3
 800b86e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b872:	b211      	sxth	r1, r2
 800b874:	4a16      	ldr	r2, [pc, #88]	; (800b8d0 <servoMixer+0x490>)
 800b876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b87a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b87e:	4618      	mov	r0, r3
 800b880:	f7ff f9d0 	bl	800ac24 <servoMiddle>
 800b884:	4603      	mov	r3, r0
 800b886:	4619      	mov	r1, r3
 800b888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b88c:	4a10      	ldr	r2, [pc, #64]	; (800b8d0 <servoMixer+0x490>)
 800b88e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b892:	b29a      	uxth	r2, r3
 800b894:	b28b      	uxth	r3, r1
 800b896:	4413      	add	r3, r2
 800b898:	b29a      	uxth	r2, r3
 800b89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b89e:	b211      	sxth	r1, r2
 800b8a0:	4a0b      	ldr	r2, [pc, #44]	; (800b8d0 <servoMixer+0x490>)
 800b8a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b4:	2b07      	cmp	r3, #7
 800b8b6:	d9c1      	bls.n	800b83c <servoMixer+0x3fc>
    }
}
 800b8b8:	bf00      	nop
 800b8ba:	bf00      	nop
 800b8bc:	372c      	adds	r7, #44	; 0x2c
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20001948 	.word	0x20001948
 800b8c8:	200018d8 	.word	0x200018d8
 800b8cc:	51eb851f 	.word	0x51eb851f
 800b8d0:	20000040 	.word	0x20000040
 800b8d4:	200017e5 	.word	0x200017e5
 800b8d8:	20001120 	.word	0x20001120

0800b8dc <mixTable>:

void mixTable(void)
{
 800b8dc:	b590      	push	{r4, r7, lr}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b8e2:	4b7e      	ldr	r3, [pc, #504]	; (800badc <mixTable+0x200>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d91d      	bls.n	800b926 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b8ea:	4b7d      	ldr	r3, [pc, #500]	; (800bae0 <mixTable+0x204>)
 800b8ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	4b7c      	ldr	r3, [pc, #496]	; (800bae4 <mixTable+0x208>)
 800b8f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfb8      	it	lt
 800b8fc:	425b      	neglt	r3, r3
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	461a      	mov	r2, r3
 800b902:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b906:	1a9b      	subs	r3, r3, r2
 800b908:	4a76      	ldr	r2, [pc, #472]	; (800bae4 <mixTable+0x208>)
 800b90a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b90e:	2a00      	cmp	r2, #0
 800b910:	bfb8      	it	lt
 800b912:	4252      	neglt	r2, r2
 800b914:	b292      	uxth	r2, r2
 800b916:	3264      	adds	r2, #100	; 0x64
 800b918:	4619      	mov	r1, r3
 800b91a:	f7f8 f9c7 	bl	8003cac <constrain>
 800b91e:	4603      	mov	r3, r0
 800b920:	b21a      	sxth	r2, r3
 800b922:	4b6f      	ldr	r3, [pc, #444]	; (800bae0 <mixTable+0x204>)
 800b924:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b926:	4b6d      	ldr	r3, [pc, #436]	; (800badc <mixTable+0x200>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	f240 809a 	bls.w	800ba64 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b930:	2300      	movs	r3, #0
 800b932:	60bb      	str	r3, [r7, #8]
 800b934:	e08f      	b.n	800ba56 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b936:	4b6b      	ldr	r3, [pc, #428]	; (800bae4 <mixTable+0x208>)
 800b938:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b93c:	ee07 3a90 	vmov	s15, r3
 800b940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b944:	4a68      	ldr	r2, [pc, #416]	; (800bae8 <mixTable+0x20c>)
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	edd3 7a00 	vldr	s15, [r3]
 800b950:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b954:	4b62      	ldr	r3, [pc, #392]	; (800bae0 <mixTable+0x204>)
 800b956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b95a:	ee07 3a90 	vmov	s15, r3
 800b95e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b962:	4a61      	ldr	r2, [pc, #388]	; (800bae8 <mixTable+0x20c>)
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	4413      	add	r3, r2
 800b96a:	3308      	adds	r3, #8
 800b96c:	edd3 7a00 	vldr	s15, [r3]
 800b970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b974:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b978:	4b59      	ldr	r3, [pc, #356]	; (800bae0 <mixTable+0x204>)
 800b97a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b986:	4a58      	ldr	r2, [pc, #352]	; (800bae8 <mixTable+0x20c>)
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	4413      	add	r3, r2
 800b98e:	3304      	adds	r3, #4
 800b990:	edd3 7a00 	vldr	s15, [r3]
 800b994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b99c:	4b53      	ldr	r3, [pc, #332]	; (800baec <mixTable+0x210>)
 800b99e:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800b9a2:	425b      	negs	r3, r3
 800b9a4:	4a4e      	ldr	r2, [pc, #312]	; (800bae0 <mixTable+0x204>)
 800b9a6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b9aa:	fb02 f303 	mul.w	r3, r2, r3
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9b6:	4a4c      	ldr	r2, [pc, #304]	; (800bae8 <mixTable+0x20c>)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	4413      	add	r3, r2
 800b9be:	330c      	adds	r3, #12
 800b9c0:	edd3 7a00 	vldr	s15, [r3]
 800b9c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9d0:	ee17 3a90 	vmov	r3, s15
 800b9d4:	b219      	sxth	r1, r3
 800b9d6:	4a46      	ldr	r2, [pc, #280]	; (800baf0 <mixTable+0x214>)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800b9de:	4b45      	ldr	r3, [pc, #276]	; (800baf4 <mixTable+0x218>)
 800b9e0:	7c1b      	ldrb	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d034      	beq.n	800ba50 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800b9e6:	4b41      	ldr	r3, [pc, #260]	; (800baec <mixTable+0x210>)
 800b9e8:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d028      	beq.n	800ba42 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800b9f0:	4b40      	ldr	r3, [pc, #256]	; (800baf4 <mixTable+0x218>)
 800b9f2:	7a9b      	ldrb	r3, [r3, #10]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d02b      	beq.n	800ba50 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800b9f8:	4b3a      	ldr	r3, [pc, #232]	; (800bae4 <mixTable+0x208>)
 800b9fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba06:	4b37      	ldr	r3, [pc, #220]	; (800bae4 <mixTable+0x208>)
 800ba08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba0c:	ee07 3a90 	vmov	s15, r3
 800ba10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ba22:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ba26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba32:	ee17 3a90 	vmov	r3, s15
 800ba36:	b219      	sxth	r1, r3
 800ba38:	4a2d      	ldr	r2, [pc, #180]	; (800baf0 <mixTable+0x214>)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800ba40:	e006      	b.n	800ba50 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800ba42:	4b28      	ldr	r3, [pc, #160]	; (800bae4 <mixTable+0x208>)
 800ba44:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800ba48:	4a29      	ldr	r2, [pc, #164]	; (800baf0 <mixTable+0x214>)
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	3301      	adds	r3, #1
 800ba54:	60bb      	str	r3, [r7, #8]
 800ba56:	4b21      	ldr	r3, [pc, #132]	; (800badc <mixTable+0x200>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	f4ff af69 	bcc.w	800b936 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800ba64:	4b24      	ldr	r3, [pc, #144]	; (800baf8 <mixTable+0x21c>)
 800ba66:	795b      	ldrb	r3, [r3, #5]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	2b17      	cmp	r3, #23
 800ba6c:	d87b      	bhi.n	800bb66 <mixTable+0x28a>
 800ba6e:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <mixTable+0x198>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800bad5 	.word	0x0800bad5
 800ba78:	0800bb67 	.word	0x0800bb67
 800ba7c:	0800bb67 	.word	0x0800bb67
 800ba80:	0800bad5 	.word	0x0800bad5
 800ba84:	0800bafd 	.word	0x0800bafd
 800ba88:	0800bb67 	.word	0x0800bb67
 800ba8c:	0800bb67 	.word	0x0800bb67
 800ba90:	0800bad5 	.word	0x0800bad5
 800ba94:	0800bb67 	.word	0x0800bb67
 800ba98:	0800bb67 	.word	0x0800bb67
 800ba9c:	0800bb67 	.word	0x0800bb67
 800baa0:	0800bb67 	.word	0x0800bb67
 800baa4:	0800bb67 	.word	0x0800bb67
 800baa8:	0800bad5 	.word	0x0800bad5
 800baac:	0800bb67 	.word	0x0800bb67
 800bab0:	0800bb67 	.word	0x0800bb67
 800bab4:	0800bb67 	.word	0x0800bb67
 800bab8:	0800bb67 	.word	0x0800bb67
 800babc:	0800bb67 	.word	0x0800bb67
 800bac0:	0800bad5 	.word	0x0800bad5
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800bb67 	.word	0x0800bb67
 800bacc:	0800bb67 	.word	0x0800bb67
 800bad0:	0800bad5 	.word	0x0800bad5
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bad4:	f7ff fcb4 	bl	800b440 <servoMixer>
            break;
 800bad8:	e045      	b.n	800bb66 <mixTable+0x28a>
 800bada:	bf00      	nop
 800badc:	200017e4 	.word	0x200017e4
 800bae0:	20001a40 	.word	0x20001a40
 800bae4:	200019e0 	.word	0x200019e0
 800bae8:	20001818 	.word	0x20001818
 800baec:	20001120 	.word	0x20001120
 800baf0:	200017e8 	.word	0x200017e8
 800baf4:	20001980 	.word	0x20001980
 800baf8:	20000bb4 	.word	0x20000bb4
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bafc:	4ba7      	ldr	r3, [pc, #668]	; (800bd9c <mixTable+0x4c0>)
 800bafe:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb02:	461a      	mov	r2, r3
 800bb04:	4ba6      	ldr	r3, [pc, #664]	; (800bda0 <mixTable+0x4c4>)
 800bb06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb0a:	fb02 f303 	mul.w	r3, r2, r3
 800bb0e:	4aa5      	ldr	r2, [pc, #660]	; (800bda4 <mixTable+0x4c8>)
 800bb10:	fb82 1203 	smull	r1, r2, r2, r3
 800bb14:	1112      	asrs	r2, r2, #4
 800bb16:	17db      	asrs	r3, r3, #31
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	b29c      	uxth	r4, r3
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	f7ff f881 	bl	800ac24 <servoMiddle>
 800bb22:	4603      	mov	r3, r0
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	4423      	add	r3, r4
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	b21a      	sxth	r2, r3
 800bb2c:	4b9e      	ldr	r3, [pc, #632]	; (800bda8 <mixTable+0x4cc>)
 800bb2e:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bb30:	4b9a      	ldr	r3, [pc, #616]	; (800bd9c <mixTable+0x4c0>)
 800bb32:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb36:	461a      	mov	r2, r3
 800bb38:	4b99      	ldr	r3, [pc, #612]	; (800bda0 <mixTable+0x4c4>)
 800bb3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb3e:	fb02 f303 	mul.w	r3, r2, r3
 800bb42:	4a98      	ldr	r2, [pc, #608]	; (800bda4 <mixTable+0x4c8>)
 800bb44:	fb82 1203 	smull	r1, r2, r2, r3
 800bb48:	1112      	asrs	r2, r2, #4
 800bb4a:	17db      	asrs	r3, r3, #31
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	b29c      	uxth	r4, r3
 800bb50:	2001      	movs	r0, #1
 800bb52:	f7ff f867 	bl	800ac24 <servoMiddle>
 800bb56:	4603      	mov	r3, r0
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	4423      	add	r3, r4
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	b21a      	sxth	r2, r3
 800bb60:	4b91      	ldr	r3, [pc, #580]	; (800bda8 <mixTable+0x4cc>)
 800bb62:	805a      	strh	r2, [r3, #2]
            break;
 800bb64:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bb66:	2020      	movs	r0, #32
 800bb68:	f7fb fa1e 	bl	8006fa8 <feature>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 80a3 	beq.w	800bcba <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bb74:	2000      	movs	r0, #0
 800bb76:	f7ff f855 	bl	800ac24 <servoMiddle>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b8a      	ldr	r3, [pc, #552]	; (800bda8 <mixTable+0x4cc>)
 800bb80:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bb82:	2001      	movs	r0, #1
 800bb84:	f7ff f84e 	bl	800ac24 <servoMiddle>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	4b86      	ldr	r3, [pc, #536]	; (800bda8 <mixTable+0x4cc>)
 800bb8e:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bb90:	4b86      	ldr	r3, [pc, #536]	; (800bdac <mixTable+0x4d0>)
 800bb92:	7a1b      	ldrb	r3, [r3, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8090 	beq.w	800bcba <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bb9a:	4b80      	ldr	r3, [pc, #512]	; (800bd9c <mixTable+0x4c0>)
 800bb9c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bba0:	f003 0302 	and.w	r3, r3, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d056      	beq.n	800bc56 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bba8:	4b7f      	ldr	r3, [pc, #508]	; (800bda8 <mixTable+0x4cc>)
 800bbaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	4b7a      	ldr	r3, [pc, #488]	; (800bd9c <mixTable+0x4c0>)
 800bbb2:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bbb6:	425b      	negs	r3, r3
 800bbb8:	4979      	ldr	r1, [pc, #484]	; (800bda0 <mixTable+0x4c4>)
 800bbba:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bbbe:	fb01 f303 	mul.w	r3, r1, r3
 800bbc2:	4978      	ldr	r1, [pc, #480]	; (800bda4 <mixTable+0x4c8>)
 800bbc4:	fb81 0103 	smull	r0, r1, r1, r3
 800bbc8:	1109      	asrs	r1, r1, #4
 800bbca:	17db      	asrs	r3, r3, #31
 800bbcc:	1acb      	subs	r3, r1, r3
 800bbce:	b299      	uxth	r1, r3
 800bbd0:	4b72      	ldr	r3, [pc, #456]	; (800bd9c <mixTable+0x4c0>)
 800bbd2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	4b71      	ldr	r3, [pc, #452]	; (800bda0 <mixTable+0x4c4>)
 800bbda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbde:	fb00 f303 	mul.w	r3, r0, r3
 800bbe2:	4870      	ldr	r0, [pc, #448]	; (800bda4 <mixTable+0x4c8>)
 800bbe4:	fb80 4003 	smull	r4, r0, r0, r3
 800bbe8:	1100      	asrs	r0, r0, #4
 800bbea:	17db      	asrs	r3, r3, #31
 800bbec:	1a1b      	subs	r3, r3, r0
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	440b      	add	r3, r1
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	b21a      	sxth	r2, r3
 800bbfa:	4b6b      	ldr	r3, [pc, #428]	; (800bda8 <mixTable+0x4cc>)
 800bbfc:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bbfe:	4b6a      	ldr	r3, [pc, #424]	; (800bda8 <mixTable+0x4cc>)
 800bc00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	4b65      	ldr	r3, [pc, #404]	; (800bd9c <mixTable+0x4c0>)
 800bc08:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc0c:	425b      	negs	r3, r3
 800bc0e:	4964      	ldr	r1, [pc, #400]	; (800bda0 <mixTable+0x4c4>)
 800bc10:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc14:	fb01 f303 	mul.w	r3, r1, r3
 800bc18:	4962      	ldr	r1, [pc, #392]	; (800bda4 <mixTable+0x4c8>)
 800bc1a:	fb81 0103 	smull	r0, r1, r1, r3
 800bc1e:	1109      	asrs	r1, r1, #4
 800bc20:	17db      	asrs	r3, r3, #31
 800bc22:	1acb      	subs	r3, r1, r3
 800bc24:	b299      	uxth	r1, r3
 800bc26:	4b5d      	ldr	r3, [pc, #372]	; (800bd9c <mixTable+0x4c0>)
 800bc28:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	4b5c      	ldr	r3, [pc, #368]	; (800bda0 <mixTable+0x4c4>)
 800bc30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc34:	fb00 f303 	mul.w	r3, r0, r3
 800bc38:	485a      	ldr	r0, [pc, #360]	; (800bda4 <mixTable+0x4c8>)
 800bc3a:	fb80 4003 	smull	r4, r0, r0, r3
 800bc3e:	1100      	asrs	r0, r0, #4
 800bc40:	17db      	asrs	r3, r3, #31
 800bc42:	1ac3      	subs	r3, r0, r3
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	440b      	add	r3, r1
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	4413      	add	r3, r2
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	b21a      	sxth	r2, r3
 800bc50:	4b55      	ldr	r3, [pc, #340]	; (800bda8 <mixTable+0x4cc>)
 800bc52:	805a      	strh	r2, [r3, #2]
 800bc54:	e031      	b.n	800bcba <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bc56:	4b54      	ldr	r3, [pc, #336]	; (800bda8 <mixTable+0x4cc>)
 800bc58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	4b4f      	ldr	r3, [pc, #316]	; (800bd9c <mixTable+0x4c0>)
 800bc60:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc64:	4619      	mov	r1, r3
 800bc66:	4b4e      	ldr	r3, [pc, #312]	; (800bda0 <mixTable+0x4c4>)
 800bc68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc6c:	fb01 f303 	mul.w	r3, r1, r3
 800bc70:	494c      	ldr	r1, [pc, #304]	; (800bda4 <mixTable+0x4c8>)
 800bc72:	fb81 0103 	smull	r0, r1, r1, r3
 800bc76:	1109      	asrs	r1, r1, #4
 800bc78:	17db      	asrs	r3, r3, #31
 800bc7a:	1acb      	subs	r3, r1, r3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4413      	add	r3, r2
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	b21a      	sxth	r2, r3
 800bc84:	4b48      	ldr	r3, [pc, #288]	; (800bda8 <mixTable+0x4cc>)
 800bc86:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bc88:	4b47      	ldr	r3, [pc, #284]	; (800bda8 <mixTable+0x4cc>)
 800bc8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	4b42      	ldr	r3, [pc, #264]	; (800bd9c <mixTable+0x4c0>)
 800bc92:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc96:	4619      	mov	r1, r3
 800bc98:	4b41      	ldr	r3, [pc, #260]	; (800bda0 <mixTable+0x4c4>)
 800bc9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc9e:	fb01 f303 	mul.w	r3, r1, r3
 800bca2:	4940      	ldr	r1, [pc, #256]	; (800bda4 <mixTable+0x4c8>)
 800bca4:	fb81 0103 	smull	r0, r1, r1, r3
 800bca8:	1109      	asrs	r1, r1, #4
 800bcaa:	17db      	asrs	r3, r3, #31
 800bcac:	1acb      	subs	r3, r1, r3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	4413      	add	r3, r2
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	4b3c      	ldr	r3, [pc, #240]	; (800bda8 <mixTable+0x4cc>)
 800bcb8:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	e026      	b.n	800bd0e <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bcc0:	4a39      	ldr	r2, [pc, #228]	; (800bda8 <mixTable+0x4cc>)
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	4934      	ldr	r1, [pc, #208]	; (800bd9c <mixTable+0x4c0>)
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	440b      	add	r3, r1
 800bcd8:	33b8      	adds	r3, #184	; 0xb8
 800bcda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcde:	461c      	mov	r4, r3
 800bce0:	492e      	ldr	r1, [pc, #184]	; (800bd9c <mixTable+0x4c0>)
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	440b      	add	r3, r1
 800bcee:	33ba      	adds	r3, #186	; 0xba
 800bcf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	f7f7 ffd8 	bl	8003cac <constrain>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	b219      	sxth	r1, r3
 800bd00:	4a29      	ldr	r2, [pc, #164]	; (800bda8 <mixTable+0x4cc>)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60bb      	str	r3, [r7, #8]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2b07      	cmp	r3, #7
 800bd12:	d9d5      	bls.n	800bcc0 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bd14:	4b21      	ldr	r3, [pc, #132]	; (800bd9c <mixTable+0x4c0>)
 800bd16:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd1a:	f003 0304 	and.w	r3, r3, #4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d01c      	beq.n	800bd5c <mixTable+0x480>
        int offset = core.numServos - 4;
 800bd22:	4b23      	ldr	r3, [pc, #140]	; (800bdb0 <mixTable+0x4d4>)
 800bd24:	7d9b      	ldrb	r3, [r3, #22]
 800bd26:	3b04      	subs	r3, #4
 800bd28:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60bb      	str	r3, [r7, #8]
 800bd2e:	e012      	b.n	800bd56 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	4413      	add	r3, r2
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	491c      	ldr	r1, [pc, #112]	; (800bdb4 <mixTable+0x4d8>)
 800bd42:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	f7f6 f8ea 	bl	8001f24 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	3301      	adds	r3, #1
 800bd54:	60bb      	str	r3, [r7, #8]
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d9e9      	bls.n	800bd30 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bd5c:	4b16      	ldr	r3, [pc, #88]	; (800bdb8 <mixTable+0x4dc>)
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bd62:	2301      	movs	r3, #1
 800bd64:	60bb      	str	r3, [r7, #8]
 800bd66:	e00f      	b.n	800bd88 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bd68:	4a13      	ldr	r2, [pc, #76]	; (800bdb8 <mixTable+0x4dc>)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd70:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	da04      	bge.n	800bd82 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bd78:	4a0f      	ldr	r2, [pc, #60]	; (800bdb8 <mixTable+0x4dc>)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd80:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	3301      	adds	r3, #1
 800bd86:	60bb      	str	r3, [r7, #8]
 800bd88:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <mixTable+0x4e0>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d3e9      	bcc.n	800bd68 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bd94:	2300      	movs	r3, #0
 800bd96:	60bb      	str	r3, [r7, #8]
 800bd98:	e0e8      	b.n	800bf6c <mixTable+0x690>
 800bd9a:	bf00      	nop
 800bd9c:	20001120 	.word	0x20001120
 800bda0:	20001788 	.word	0x20001788
 800bda4:	51eb851f 	.word	0x51eb851f
 800bda8:	20000040 	.word	0x20000040
 800bdac:	20001a24 	.word	0x20001a24
 800bdb0:	20000afc 	.word	0x20000afc
 800bdb4:	200019bc 	.word	0x200019bc
 800bdb8:	200017e8 	.word	0x200017e8
 800bdbc:	200017e4 	.word	0x200017e4
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800bdc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bdc4:	4a6f      	ldr	r2, [pc, #444]	; (800bf84 <mixTable+0x6a8>)
 800bdc6:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	dd15      	ble.n	800bdfa <mixTable+0x51e>
 800bdce:	4b6e      	ldr	r3, [pc, #440]	; (800bf88 <mixTable+0x6ac>)
 800bdd0:	7c1b      	ldrb	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d111      	bne.n	800bdfa <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800bdd6:	4a6d      	ldr	r2, [pc, #436]	; (800bf8c <mixTable+0x6b0>)
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	4b68      	ldr	r3, [pc, #416]	; (800bf84 <mixTable+0x6a8>)
 800bde2:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800bde6:	89fb      	ldrh	r3, [r7, #14]
 800bde8:	1acb      	subs	r3, r1, r3
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	4413      	add	r3, r2
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	b219      	sxth	r1, r3
 800bdf2:	4a66      	ldr	r2, [pc, #408]	; (800bf8c <mixTable+0x6b0>)
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800bdfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bdfe:	f7fb f8d3 	bl	8006fa8 <feature>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d060      	beq.n	800beca <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800be08:	4b61      	ldr	r3, [pc, #388]	; (800bf90 <mixTable+0x6b4>)
 800be0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be0e:	461a      	mov	r2, r3
 800be10:	4b5c      	ldr	r3, [pc, #368]	; (800bf84 <mixTable+0x6a8>)
 800be12:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800be16:	429a      	cmp	r2, r3
 800be18:	dd2b      	ble.n	800be72 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800be1a:	4a5c      	ldr	r2, [pc, #368]	; (800bf8c <mixTable+0x6b0>)
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be22:	4618      	mov	r0, r3
 800be24:	4b57      	ldr	r3, [pc, #348]	; (800bf84 <mixTable+0x6a8>)
 800be26:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800be2a:	4619      	mov	r1, r3
 800be2c:	4b55      	ldr	r3, [pc, #340]	; (800bf84 <mixTable+0x6a8>)
 800be2e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be32:	461a      	mov	r2, r3
 800be34:	f7f7 ff3a 	bl	8003cac <constrain>
 800be38:	4603      	mov	r3, r0
 800be3a:	b219      	sxth	r1, r3
 800be3c:	4a53      	ldr	r2, [pc, #332]	; (800bf8c <mixTable+0x6b0>)
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800be44:	4b4f      	ldr	r3, [pc, #316]	; (800bf84 <mixTable+0x6a8>)
 800be46:	795b      	ldrb	r3, [r3, #5]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d17d      	bne.n	800bf48 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800be4c:	4b51      	ldr	r3, [pc, #324]	; (800bf94 <mixTable+0x6b8>)
 800be4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800be52:	4618      	mov	r0, r3
 800be54:	4b50      	ldr	r3, [pc, #320]	; (800bf98 <mixTable+0x6bc>)
 800be56:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800be5a:	4619      	mov	r1, r3
 800be5c:	4b4e      	ldr	r3, [pc, #312]	; (800bf98 <mixTable+0x6bc>)
 800be5e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800be62:	461a      	mov	r2, r3
 800be64:	f7f7 ff22 	bl	8003cac <constrain>
 800be68:	4603      	mov	r3, r0
 800be6a:	b21a      	sxth	r2, r3
 800be6c:	4b49      	ldr	r3, [pc, #292]	; (800bf94 <mixTable+0x6b8>)
 800be6e:	815a      	strh	r2, [r3, #10]
 800be70:	e06a      	b.n	800bf48 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800be72:	4a46      	ldr	r2, [pc, #280]	; (800bf8c <mixTable+0x6b0>)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be7a:	4618      	mov	r0, r3
 800be7c:	4b41      	ldr	r3, [pc, #260]	; (800bf84 <mixTable+0x6a8>)
 800be7e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800be82:	4619      	mov	r1, r3
 800be84:	4b3f      	ldr	r3, [pc, #252]	; (800bf84 <mixTable+0x6a8>)
 800be86:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800be8a:	461a      	mov	r2, r3
 800be8c:	f7f7 ff0e 	bl	8003cac <constrain>
 800be90:	4603      	mov	r3, r0
 800be92:	b219      	sxth	r1, r3
 800be94:	4a3d      	ldr	r2, [pc, #244]	; (800bf8c <mixTable+0x6b0>)
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800be9c:	4b39      	ldr	r3, [pc, #228]	; (800bf84 <mixTable+0x6a8>)
 800be9e:	795b      	ldrb	r3, [r3, #5]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d151      	bne.n	800bf48 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bea4:	4b3b      	ldr	r3, [pc, #236]	; (800bf94 <mixTable+0x6b8>)
 800bea6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800beaa:	4618      	mov	r0, r3
 800beac:	4b3a      	ldr	r3, [pc, #232]	; (800bf98 <mixTable+0x6bc>)
 800beae:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800beb2:	4619      	mov	r1, r3
 800beb4:	4b38      	ldr	r3, [pc, #224]	; (800bf98 <mixTable+0x6bc>)
 800beb6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800beba:	461a      	mov	r2, r3
 800bebc:	f7f7 fef6 	bl	8003cac <constrain>
 800bec0:	4603      	mov	r3, r0
 800bec2:	b21a      	sxth	r2, r3
 800bec4:	4b33      	ldr	r3, [pc, #204]	; (800bf94 <mixTable+0x6b8>)
 800bec6:	815a      	strh	r2, [r3, #10]
 800bec8:	e03e      	b.n	800bf48 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800beca:	4a30      	ldr	r2, [pc, #192]	; (800bf8c <mixTable+0x6b0>)
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bed2:	4618      	mov	r0, r3
 800bed4:	4b2b      	ldr	r3, [pc, #172]	; (800bf84 <mixTable+0x6a8>)
 800bed6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800beda:	4619      	mov	r1, r3
 800bedc:	4b29      	ldr	r3, [pc, #164]	; (800bf84 <mixTable+0x6a8>)
 800bede:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bee2:	461a      	mov	r2, r3
 800bee4:	f7f7 fee2 	bl	8003cac <constrain>
 800bee8:	4603      	mov	r3, r0
 800beea:	b219      	sxth	r1, r3
 800beec:	4a27      	ldr	r2, [pc, #156]	; (800bf8c <mixTable+0x6b0>)
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800bef4:	4b26      	ldr	r3, [pc, #152]	; (800bf90 <mixTable+0x6b4>)
 800bef6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800befa:	461a      	mov	r2, r3
 800befc:	4b21      	ldr	r3, [pc, #132]	; (800bf84 <mixTable+0x6a8>)
 800befe:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800bf02:	429a      	cmp	r2, r3
 800bf04:	da1d      	bge.n	800bf42 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800bf06:	2010      	movs	r0, #16
 800bf08:	f7fb f84e 	bl	8006fa8 <feature>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f083 0301 	eor.w	r3, r3, #1
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d008      	beq.n	800bf2a <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800bf18:	4b1a      	ldr	r3, [pc, #104]	; (800bf84 <mixTable+0x6a8>)
 800bf1a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf1e:	b219      	sxth	r1, r3
 800bf20:	4a1a      	ldr	r2, [pc, #104]	; (800bf8c <mixTable+0x6b0>)
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bf28:	e00e      	b.n	800bf48 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800bf2a:	4b16      	ldr	r3, [pc, #88]	; (800bf84 <mixTable+0x6a8>)
 800bf2c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf30:	b219      	sxth	r1, r3
 800bf32:	4a16      	ldr	r2, [pc, #88]	; (800bf8c <mixTable+0x6b0>)
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800bf3a:	4b13      	ldr	r3, [pc, #76]	; (800bf88 <mixTable+0x6ac>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	745a      	strb	r2, [r3, #17]
 800bf40:	e002      	b.n	800bf48 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800bf42:	4b11      	ldr	r3, [pc, #68]	; (800bf88 <mixTable+0x6ac>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800bf48:	4b0f      	ldr	r3, [pc, #60]	; (800bf88 <mixTable+0x6ac>)
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bf50:	4a12      	ldr	r2, [pc, #72]	; (800bf9c <mixTable+0x6c0>)
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bf58:	4a0c      	ldr	r2, [pc, #48]	; (800bf8c <mixTable+0x6b0>)
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bf60:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <mixTable+0x6ac>)
 800bf62:	2201      	movs	r2, #1
 800bf64:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	60bb      	str	r3, [r7, #8]
 800bf6c:	4b0c      	ldr	r3, [pc, #48]	; (800bfa0 <mixTable+0x6c4>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4293      	cmp	r3, r2
 800bf76:	f4ff af23 	bcc.w	800bdc0 <mixTable+0x4e4>
        }
    }
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd90      	pop	{r4, r7, pc}
 800bf84:	20000bb4 	.word	0x20000bb4
 800bf88:	20001980 	.word	0x20001980
 800bf8c:	200017e8 	.word	0x200017e8
 800bf90:	200019bc 	.word	0x200019bc
 800bf94:	20000040 	.word	0x20000040
 800bf98:	20001120 	.word	0x20001120
 800bf9c:	20001800 	.word	0x20001800
 800bfa0:	200017e4 	.word	0x200017e4

0800bfa4 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	71bb      	strb	r3, [r7, #6]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73bb      	strb	r3, [r7, #14]
 800bfba:	e020      	b.n	800bffe <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
 800bfc0:	e013      	b.n	800bfea <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800bfc2:	f7f6 f841 	bl	8002048 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bfcc:	f7f6 f87e 	bl	80020cc <actBuzzerAction>
            pif_Delay1ms(wait);
 800bfd0:	79bb      	ldrb	r3, [r7, #6]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f005 fa7d 	bl	80114d4 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800bfda:	2100      	movs	r1, #0
 800bfdc:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bfe0:	f7f6 f874 	bl	80020cc <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	73fb      	strb	r3, [r7, #15]
 800bfea:	7bfa      	ldrb	r2, [r7, #15]
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d3e7      	bcc.n	800bfc2 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800bff2:	203c      	movs	r0, #60	; 0x3c
 800bff4:	f005 fa6e 	bl	80114d4 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	3301      	adds	r3, #1
 800bffc:	73bb      	strb	r3, [r7, #14]
 800bffe:	7bba      	ldrb	r2, [r7, #14]
 800c000:	797b      	ldrb	r3, [r7, #5]
 800c002:	429a      	cmp	r2, r3
 800c004:	d3da      	bcc.n	800bfbc <blinkLED+0x18>
    }
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <annexCode>:

void annexCode(void)
{
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b08b      	sub	sp, #44	; 0x2c
 800c014:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c016:	4b98      	ldr	r3, [pc, #608]	; (800c278 <annexCode+0x268>)
 800c018:	7c1b      	ldrb	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d12e      	bne.n	800c07c <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c01e:	4b97      	ldr	r3, [pc, #604]	; (800c27c <annexCode+0x26c>)
 800c020:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c024:	461a      	mov	r2, r3
 800c026:	4b96      	ldr	r3, [pc, #600]	; (800c280 <annexCode+0x270>)
 800c028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c02a:	429a      	cmp	r2, r3
 800c02c:	da02      	bge.n	800c034 <annexCode+0x24>
            prop2 = 100;
 800c02e:	2364      	movs	r3, #100	; 0x64
 800c030:	61bb      	str	r3, [r7, #24]
 800c032:	e07b      	b.n	800c12c <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c034:	4b91      	ldr	r3, [pc, #580]	; (800c27c <annexCode+0x26c>)
 800c036:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c03a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c03e:	da16      	bge.n	800c06e <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c040:	4b8f      	ldr	r3, [pc, #572]	; (800c280 <annexCode+0x270>)
 800c042:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c046:	461a      	mov	r2, r3
 800c048:	4b8c      	ldr	r3, [pc, #560]	; (800c27c <annexCode+0x26c>)
 800c04a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c04e:	4619      	mov	r1, r3
 800c050:	4b8b      	ldr	r3, [pc, #556]	; (800c280 <annexCode+0x270>)
 800c052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c054:	1acb      	subs	r3, r1, r3
 800c056:	fb03 f202 	mul.w	r2, r3, r2
 800c05a:	4b89      	ldr	r3, [pc, #548]	; (800c280 <annexCode+0x270>)
 800c05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c062:	fb92 f3f3 	sdiv	r3, r2, r3
 800c066:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c06a:	61bb      	str	r3, [r7, #24]
 800c06c:	e05e      	b.n	800c12c <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c06e:	4b84      	ldr	r3, [pc, #528]	; (800c280 <annexCode+0x270>)
 800c070:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c074:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	e057      	b.n	800c12c <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c07c:	2380      	movs	r3, #128	; 0x80
 800c07e:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c080:	4b7e      	ldr	r3, [pc, #504]	; (800c27c <annexCode+0x26c>)
 800c082:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c086:	461a      	mov	r2, r3
 800c088:	4b7d      	ldr	r3, [pc, #500]	; (800c280 <annexCode+0x270>)
 800c08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c08c:	429a      	cmp	r2, r3
 800c08e:	da02      	bge.n	800c096 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c090:	2380      	movs	r3, #128	; 0x80
 800c092:	61bb      	str	r3, [r7, #24]
 800c094:	e028      	b.n	800c0e8 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c096:	4b7b      	ldr	r3, [pc, #492]	; (800c284 <annexCode+0x274>)
 800c098:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c09c:	461a      	mov	r2, r3
 800c09e:	4b78      	ldr	r3, [pc, #480]	; (800c280 <annexCode+0x270>)
 800c0a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	dd1f      	ble.n	800c0e8 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c0a8:	4b76      	ldr	r3, [pc, #472]	; (800c284 <annexCode+0x274>)
 800c0aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c0b2:	da12      	bge.n	800c0da <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c0b4:	4b72      	ldr	r3, [pc, #456]	; (800c280 <annexCode+0x270>)
 800c0b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4b71      	ldr	r3, [pc, #452]	; (800c284 <annexCode+0x274>)
 800c0be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4b6e      	ldr	r3, [pc, #440]	; (800c280 <annexCode+0x270>)
 800c0c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0ca:	1acb      	subs	r3, r1, r3
 800c0cc:	fb02 f303 	mul.w	r3, r2, r3
 800c0d0:	125b      	asrs	r3, r3, #9
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	61bb      	str	r3, [r7, #24]
 800c0d8:	e006      	b.n	800c0e8 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c0da:	4b69      	ldr	r3, [pc, #420]	; (800c280 <annexCode+0x270>)
 800c0dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c0e8:	4b67      	ldr	r3, [pc, #412]	; (800c288 <annexCode+0x278>)
 800c0ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c0ee:	2b14      	cmp	r3, #20
 800c0f0:	dd12      	ble.n	800c118 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c0f2:	4b63      	ldr	r3, [pc, #396]	; (800c280 <annexCode+0x270>)
 800c0f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	4b64      	ldr	r3, [pc, #400]	; (800c28c <annexCode+0x27c>)
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	4619      	mov	r1, r3
 800c100:	4b61      	ldr	r3, [pc, #388]	; (800c288 <annexCode+0x278>)
 800c102:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c106:	428b      	cmp	r3, r1
 800c108:	bfa8      	it	ge
 800c10a:	460b      	movge	r3, r1
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	121b      	asrs	r3, r3, #8
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c118:	4b59      	ldr	r3, [pc, #356]	; (800c280 <annexCode+0x270>)
 800c11a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c11e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	4293      	cmp	r3, r2
 800c126:	bfb8      	it	lt
 800c128:	4613      	movlt	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c12c:	2300      	movs	r3, #0
 800c12e:	623b      	str	r3, [r7, #32]
 800c130:	e131      	b.n	800c396 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c132:	4a52      	ldr	r2, [pc, #328]	; (800c27c <annexCode+0x26c>)
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c13a:	461a      	mov	r2, r3
 800c13c:	4b54      	ldr	r3, [pc, #336]	; (800c290 <annexCode+0x280>)
 800c13e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c148:	dd18      	ble.n	800c17c <annexCode+0x16c>
 800c14a:	4a4c      	ldr	r2, [pc, #304]	; (800c27c <annexCode+0x26c>)
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c152:	461a      	mov	r2, r3
 800c154:	4b4e      	ldr	r3, [pc, #312]	; (800c290 <annexCode+0x280>)
 800c156:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c160:	da0c      	bge.n	800c17c <annexCode+0x16c>
 800c162:	4a46      	ldr	r2, [pc, #280]	; (800c27c <annexCode+0x26c>)
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c16a:	461a      	mov	r2, r3
 800c16c:	4b48      	ldr	r3, [pc, #288]	; (800c290 <annexCode+0x280>)
 800c16e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	bfb8      	it	lt
 800c178:	425b      	neglt	r3, r3
 800c17a:	e001      	b.n	800c180 <annexCode+0x170>
 800c17c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c182:	6a3b      	ldr	r3, [r7, #32]
 800c184:	2b02      	cmp	r3, #2
 800c186:	d063      	beq.n	800c250 <annexCode+0x240>
            if (cfg.deadband) {
 800c188:	4b3d      	ldr	r3, [pc, #244]	; (800c280 <annexCode+0x270>)
 800c18a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d010      	beq.n	800c1b4 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c192:	4b3b      	ldr	r3, [pc, #236]	; (800c280 <annexCode+0x270>)
 800c194:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c198:	461a      	mov	r2, r3
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	4293      	cmp	r3, r2
 800c19e:	dd07      	ble.n	800c1b0 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c1a0:	4b37      	ldr	r3, [pc, #220]	; (800c280 <annexCode+0x270>)
 800c1a2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	1a9b      	subs	r3, r3, r2
 800c1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ae:	e001      	b.n	800c1b4 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	4a37      	ldr	r2, [pc, #220]	; (800c294 <annexCode+0x284>)
 800c1b8:	fb82 1203 	smull	r1, r2, r2, r3
 800c1bc:	1152      	asrs	r2, r2, #5
 800c1be:	17db      	asrs	r3, r3, #31
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c1c4:	4a34      	ldr	r2, [pc, #208]	; (800c298 <annexCode+0x288>)
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c1d4:	fb03 f101 	mul.w	r1, r3, r1
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	440b      	add	r3, r1
 800c1dc:	6979      	ldr	r1, [r7, #20]
 800c1de:	3101      	adds	r1, #1
 800c1e0:	482d      	ldr	r0, [pc, #180]	; (800c298 <annexCode+0x288>)
 800c1e2:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	482b      	ldr	r0, [pc, #172]	; (800c298 <annexCode+0x288>)
 800c1ea:	6979      	ldr	r1, [r7, #20]
 800c1ec:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c1f0:	1a61      	subs	r1, r4, r1
 800c1f2:	fb01 f303 	mul.w	r3, r1, r3
 800c1f6:	4927      	ldr	r1, [pc, #156]	; (800c294 <annexCode+0x284>)
 800c1f8:	fb81 0103 	smull	r0, r1, r1, r3
 800c1fc:	1149      	asrs	r1, r1, #5
 800c1fe:	17db      	asrs	r3, r3, #31
 800c200:	1acb      	subs	r3, r1, r3
 800c202:	b29b      	uxth	r3, r3
 800c204:	4413      	add	r3, r2
 800c206:	b29b      	uxth	r3, r3
 800c208:	b219      	sxth	r1, r3
 800c20a:	4a1e      	ldr	r2, [pc, #120]	; (800c284 <annexCode+0x274>)
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c212:	4a1b      	ldr	r2, [pc, #108]	; (800c280 <annexCode+0x270>)
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	4413      	add	r3, r2
 800c218:	3323      	adds	r3, #35	; 0x23
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	fb02 f303 	mul.w	r3, r2, r3
 800c224:	4a1d      	ldr	r2, [pc, #116]	; (800c29c <annexCode+0x28c>)
 800c226:	fb82 1203 	smull	r1, r2, r2, r3
 800c22a:	1152      	asrs	r2, r2, #5
 800c22c:	17db      	asrs	r3, r3, #31
 800c22e:	1a9b      	subs	r3, r3, r2
 800c230:	3364      	adds	r3, #100	; 0x64
 800c232:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	b29b      	uxth	r3, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	fb02 f303 	mul.w	r3, r2, r3
 800c240:	4a14      	ldr	r2, [pc, #80]	; (800c294 <annexCode+0x284>)
 800c242:	fb82 1203 	smull	r1, r2, r2, r3
 800c246:	1152      	asrs	r2, r2, #5
 800c248:	17db      	asrs	r3, r3, #31
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	e04a      	b.n	800c2e6 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c250:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <annexCode+0x270>)
 800c252:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d024      	beq.n	800c2a4 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c25a:	4b09      	ldr	r3, [pc, #36]	; (800c280 <annexCode+0x270>)
 800c25c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c260:	461a      	mov	r2, r3
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	4293      	cmp	r3, r2
 800c266:	dd1b      	ble.n	800c2a0 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c268:	4b05      	ldr	r3, [pc, #20]	; (800c280 <annexCode+0x270>)
 800c26a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c26e:	461a      	mov	r2, r3
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	1a9b      	subs	r3, r3, r2
 800c274:	627b      	str	r3, [r7, #36]	; 0x24
 800c276:	e015      	b.n	800c2a4 <annexCode+0x294>
 800c278:	20001980 	.word	0x20001980
 800c27c:	200019bc 	.word	0x200019bc
 800c280:	20001120 	.word	0x20001120
 800c284:	200019e0 	.word	0x200019e0
 800c288:	20001788 	.word	0x20001788
 800c28c:	20000056 	.word	0x20000056
 800c290:	20000bb4 	.word	0x20000bb4
 800c294:	51eb851f 	.word	0x51eb851f
 800c298:	200019e8 	.word	0x200019e8
 800c29c:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c2a4:	4ba0      	ldr	r3, [pc, #640]	; (800c528 <annexCode+0x518>)
 800c2a6:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c2aa:	425b      	negs	r3, r3
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	fb12 f303 	smulbb	r3, r2, r3
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	b219      	sxth	r1, r3
 800c2ba:	4a9c      	ldr	r2, [pc, #624]	; (800c52c <annexCode+0x51c>)
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c2c2:	4b9b      	ldr	r3, [pc, #620]	; (800c530 <annexCode+0x520>)
 800c2c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	bfb8      	it	lt
 800c2d0:	425b      	neglt	r3, r3
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	4a97      	ldr	r2, [pc, #604]	; (800c534 <annexCode+0x524>)
 800c2d8:	fb82 1203 	smull	r1, r2, r2, r3
 800c2dc:	1152      	asrs	r2, r2, #5
 800c2de:	17db      	asrs	r3, r3, #31
 800c2e0:	1a9b      	subs	r3, r3, r2
 800c2e2:	3364      	adds	r3, #100	; 0x64
 800c2e4:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c2e6:	4a92      	ldr	r2, [pc, #584]	; (800c530 <annexCode+0x520>)
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	fb02 f303 	mul.w	r3, r2, r3
 800c2f8:	4a8f      	ldr	r2, [pc, #572]	; (800c538 <annexCode+0x528>)
 800c2fa:	fb82 1203 	smull	r1, r2, r2, r3
 800c2fe:	1152      	asrs	r2, r2, #5
 800c300:	17db      	asrs	r3, r3, #31
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	b2d9      	uxtb	r1, r3
 800c306:	4a8d      	ldr	r2, [pc, #564]	; (800c53c <annexCode+0x52c>)
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	4413      	add	r3, r2
 800c30c:	460a      	mov	r2, r1
 800c30e:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c310:	4a87      	ldr	r2, [pc, #540]	; (800c530 <annexCode+0x520>)
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	4413      	add	r3, r2
 800c316:	330b      	adds	r3, #11
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
 800c322:	4a85      	ldr	r2, [pc, #532]	; (800c538 <annexCode+0x528>)
 800c324:	fb82 1203 	smull	r1, r2, r2, r3
 800c328:	1152      	asrs	r2, r2, #5
 800c32a:	17db      	asrs	r3, r3, #31
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	b2d9      	uxtb	r1, r3
 800c330:	4a83      	ldr	r2, [pc, #524]	; (800c540 <annexCode+0x530>)
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	4413      	add	r3, r2
 800c336:	460a      	mov	r2, r1
 800c338:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c33a:	4a7d      	ldr	r2, [pc, #500]	; (800c530 <annexCode+0x520>)
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	4413      	add	r3, r2
 800c340:	3315      	adds	r3, #21
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	461a      	mov	r2, r3
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	fb02 f303 	mul.w	r3, r2, r3
 800c34c:	4a7a      	ldr	r2, [pc, #488]	; (800c538 <annexCode+0x528>)
 800c34e:	fb82 1203 	smull	r1, r2, r2, r3
 800c352:	1152      	asrs	r2, r2, #5
 800c354:	17db      	asrs	r3, r3, #31
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	b2d9      	uxtb	r1, r3
 800c35a:	4a7a      	ldr	r2, [pc, #488]	; (800c544 <annexCode+0x534>)
 800c35c:	6a3b      	ldr	r3, [r7, #32]
 800c35e:	4413      	add	r3, r2
 800c360:	460a      	mov	r2, r1
 800c362:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c364:	4a78      	ldr	r2, [pc, #480]	; (800c548 <annexCode+0x538>)
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c36c:	461a      	mov	r2, r3
 800c36e:	4b6e      	ldr	r3, [pc, #440]	; (800c528 <annexCode+0x518>)
 800c370:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c374:	429a      	cmp	r2, r3
 800c376:	da0b      	bge.n	800c390 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c378:	4a6c      	ldr	r2, [pc, #432]	; (800c52c <annexCode+0x51c>)
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c380:	b29b      	uxth	r3, r3
 800c382:	425b      	negs	r3, r3
 800c384:	b29b      	uxth	r3, r3
 800c386:	b219      	sxth	r1, r3
 800c388:	4a68      	ldr	r2, [pc, #416]	; (800c52c <annexCode+0x51c>)
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	3301      	adds	r3, #1
 800c394:	623b      	str	r3, [r7, #32]
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	2b02      	cmp	r3, #2
 800c39a:	f77f aeca 	ble.w	800c132 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c39e:	4b6a      	ldr	r3, [pc, #424]	; (800c548 <annexCode+0x538>)
 800c3a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	4b60      	ldr	r3, [pc, #384]	; (800c528 <annexCode+0x518>)
 800c3a8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	f7f7 fc7b 	bl	8003cac <constrain>
 800c3b6:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c3b8:	4b5b      	ldr	r3, [pc, #364]	; (800c528 <annexCode+0x518>)
 800c3ba:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c3be:	461a      	mov	r2, r3
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	1a9b      	subs	r3, r3, r2
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c3ca:	fb02 f303 	mul.w	r3, r2, r3
 800c3ce:	4a56      	ldr	r2, [pc, #344]	; (800c528 <annexCode+0x518>)
 800c3d0:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c3d4:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3dc:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e0:	4a55      	ldr	r2, [pc, #340]	; (800c538 <annexCode+0x528>)
 800c3e2:	fb82 1203 	smull	r1, r2, r2, r3
 800c3e6:	1152      	asrs	r2, r2, #5
 800c3e8:	17db      	asrs	r3, r3, #31
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c3ee:	4a57      	ldr	r2, [pc, #348]	; (800c54c <annexCode+0x53c>)
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c3fe:	fb03 f101 	mul.w	r1, r3, r1
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	440b      	add	r3, r1
 800c406:	6979      	ldr	r1, [r7, #20]
 800c408:	3101      	adds	r1, #1
 800c40a:	4850      	ldr	r0, [pc, #320]	; (800c54c <annexCode+0x53c>)
 800c40c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c410:	460c      	mov	r4, r1
 800c412:	484e      	ldr	r0, [pc, #312]	; (800c54c <annexCode+0x53c>)
 800c414:	6979      	ldr	r1, [r7, #20]
 800c416:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c41a:	1a61      	subs	r1, r4, r1
 800c41c:	fb01 f303 	mul.w	r3, r1, r3
 800c420:	4945      	ldr	r1, [pc, #276]	; (800c538 <annexCode+0x528>)
 800c422:	fb81 0103 	smull	r0, r1, r1, r3
 800c426:	1149      	asrs	r1, r1, #5
 800c428:	17db      	asrs	r3, r3, #31
 800c42a:	1acb      	subs	r3, r1, r3
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	4413      	add	r3, r2
 800c430:	b29b      	uxth	r3, r3
 800c432:	b21a      	sxth	r2, r3
 800c434:	4b3d      	ldr	r3, [pc, #244]	; (800c52c <annexCode+0x51c>)
 800c436:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c438:	4b45      	ldr	r3, [pc, #276]	; (800c550 <annexCode+0x540>)
 800c43a:	7a5b      	ldrb	r3, [r3, #9]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d06b      	beq.n	800c518 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c440:	4b44      	ldr	r3, [pc, #272]	; (800c554 <annexCode+0x544>)
 800c442:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c446:	461a      	mov	r2, r3
 800c448:	4b43      	ldr	r3, [pc, #268]	; (800c558 <annexCode+0x548>)
 800c44a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	4618      	mov	r0, r3
 800c452:	f7f4 f825 	bl	80004a0 <__aeabi_i2d>
 800c456:	a332      	add	r3, pc, #200	; (adr r3, 800c520 <annexCode+0x510>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	f7f4 f88a 	bl	8000574 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4610      	mov	r0, r2
 800c466:	4619      	mov	r1, r3
 800c468:	f04f 0200 	mov.w	r2, #0
 800c46c:	4b3b      	ldr	r3, [pc, #236]	; (800c55c <annexCode+0x54c>)
 800c46e:	f7f4 f9ab 	bl	80007c8 <__aeabi_ddiv>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4610      	mov	r0, r2
 800c478:	4619      	mov	r1, r3
 800c47a:	f7f4 fb5d 	bl	8000b38 <__aeabi_d2f>
 800c47e:	4603      	mov	r3, r0
 800c480:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c482:	ed97 0a04 	vldr	s0, [r7, #16]
 800c486:	f016 f817 	bl	80224b8 <cosf>
 800c48a:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c48e:	ed97 0a04 	vldr	s0, [r7, #16]
 800c492:	f016 f895 	bl	80225c0 <sinf>
 800c496:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c49a:	4b24      	ldr	r3, [pc, #144]	; (800c52c <annexCode+0x51c>)
 800c49c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4a0:	ee07 3a90 	vmov	s15, r3
 800c4a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4b0:	4b1e      	ldr	r3, [pc, #120]	; (800c52c <annexCode+0x51c>)
 800c4b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4b6:	ee07 3a90 	vmov	s15, r3
 800c4ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c4be:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ce:	ee17 3a90 	vmov	r3, s15
 800c4d2:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c4d4:	4b15      	ldr	r3, [pc, #84]	; (800c52c <annexCode+0x51c>)
 800c4d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4da:	ee07 3a90 	vmov	s15, r3
 800c4de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4ea:	4b10      	ldr	r3, [pc, #64]	; (800c52c <annexCode+0x51c>)
 800c4ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4f0:	ee07 3a90 	vmov	s15, r3
 800c4f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c4f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c500:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c508:	ee17 3a90 	vmov	r3, s15
 800c50c:	b21a      	sxth	r2, r3
 800c50e:	4b07      	ldr	r3, [pc, #28]	; (800c52c <annexCode+0x51c>)
 800c510:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c512:	4a06      	ldr	r2, [pc, #24]	; (800c52c <annexCode+0x51c>)
 800c514:	88fb      	ldrh	r3, [r7, #6]
 800c516:	8053      	strh	r3, [r2, #2]
    }
}
 800c518:	bf00      	nop
 800c51a:	372c      	adds	r7, #44	; 0x2c
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd90      	pop	{r4, r7, pc}
 800c520:	54442d18 	.word	0x54442d18
 800c524:	400921fb 	.word	0x400921fb
 800c528:	20000bb4 	.word	0x20000bb4
 800c52c:	200019e0 	.word	0x200019e0
 800c530:	20001120 	.word	0x20001120
 800c534:	10624dd3 	.word	0x10624dd3
 800c538:	51eb851f 	.word	0x51eb851f
 800c53c:	20001a18 	.word	0x20001a18
 800c540:	20001a1c 	.word	0x20001a1c
 800c544:	20001a20 	.word	0x20001a20
 800c548:	200019bc 	.word	0x200019bc
 800c54c:	200019f8 	.word	0x200019f8
 800c550:	20001980 	.word	0x20001980
 800c554:	20001cac 	.word	0x20001cac
 800c558:	200019a6 	.word	0x200019a6
 800c55c:	40668000 	.word	0x40668000

0800c560 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c564:	b082      	sub	sp, #8
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c56a:	2002      	movs	r0, #2
 800c56c:	f7fa fd1c 	bl	8006fa8 <feature>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	f000 80bb 	beq.w	800c6ee <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c578:	4b90      	ldr	r3, [pc, #576]	; (800c7bc <taskLedState+0x25c>)
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	461a      	mov	r2, r3
 800c57e:	4b90      	ldr	r3, [pc, #576]	; (800c7c0 <taskLedState+0x260>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4413      	add	r3, r2
 800c584:	4a8e      	ldr	r2, [pc, #568]	; (800c7c0 <taskLedState+0x260>)
 800c586:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c588:	4b8e      	ldr	r3, [pc, #568]	; (800c7c4 <taskLedState+0x264>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	3301      	adds	r3, #1
 800c58e:	b2da      	uxtb	r2, r3
 800c590:	4b8c      	ldr	r3, [pc, #560]	; (800c7c4 <taskLedState+0x264>)
 800c592:	701a      	strb	r2, [r3, #0]
 800c594:	4b8b      	ldr	r3, [pc, #556]	; (800c7c4 <taskLedState+0x264>)
 800c596:	781a      	ldrb	r2, [r3, #0]
 800c598:	4b8b      	ldr	r3, [pc, #556]	; (800c7c8 <taskLedState+0x268>)
 800c59a:	fba3 1302 	umull	r1, r3, r3, r2
 800c59e:	0899      	lsrs	r1, r3, #2
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	440b      	add	r3, r1
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 808b 	bne.w	800c6c8 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c5b2:	4b86      	ldr	r3, [pc, #536]	; (800c7cc <taskLedState+0x26c>)
 800c5b4:	ed93 7a00 	vldr	s14, [r3]
 800c5b8:	4b84      	ldr	r3, [pc, #528]	; (800c7cc <taskLedState+0x26c>)
 800c5ba:	edd3 6a00 	vldr	s13, [r3]
 800c5be:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c5c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c5c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5ca:	4b80      	ldr	r3, [pc, #512]	; (800c7cc <taskLedState+0x26c>)
 800c5cc:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c5d0:	f7f4 fe06 	bl	80011e0 <actGetBatteryVoltage>
 800c5d4:	eeb0 7a40 	vmov.f32	s14, s0
 800c5d8:	4b7d      	ldr	r3, [pc, #500]	; (800c7d0 <taskLedState+0x270>)
 800c5da:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ea:	4b78      	ldr	r3, [pc, #480]	; (800c7cc <taskLedState+0x26c>)
 800c5ec:	edd3 7a00 	vldr	s15, [r3]
 800c5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5f4:	4b75      	ldr	r3, [pc, #468]	; (800c7cc <taskLedState+0x26c>)
 800c5f6:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c5fa:	4b74      	ldr	r3, [pc, #464]	; (800c7cc <taskLedState+0x26c>)
 800c5fc:	ed93 7a00 	vldr	s14, [r3]
 800c600:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c60c:	ee17 3a90 	vmov	r3, s15
 800c610:	b29a      	uxth	r2, r3
 800c612:	4b70      	ldr	r3, [pc, #448]	; (800c7d4 <taskLedState+0x274>)
 800c614:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c616:	4b6e      	ldr	r3, [pc, #440]	; (800c7d0 <taskLedState+0x270>)
 800c618:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d053      	beq.n	800c6c8 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c620:	4b6d      	ldr	r3, [pc, #436]	; (800c7d8 <taskLedState+0x278>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	da00      	bge.n	800c62a <taskLedState+0xca>
 800c628:	3307      	adds	r3, #7
 800c62a:	10db      	asrs	r3, r3, #3
 800c62c:	425b      	negs	r3, r3
 800c62e:	461a      	mov	r2, r3
 800c630:	4b69      	ldr	r3, [pc, #420]	; (800c7d8 <taskLedState+0x278>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4413      	add	r3, r2
 800c636:	4a68      	ldr	r2, [pc, #416]	; (800c7d8 <taskLedState+0x278>)
 800c638:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c63a:	f7f4 fdef 	bl	800121c <actGetBatteryCurrent>
 800c63e:	4603      	mov	r3, r0
 800c640:	4a63      	ldr	r2, [pc, #396]	; (800c7d0 <taskLedState+0x270>)
 800c642:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c646:	1a9b      	subs	r3, r3, r2
 800c648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c64c:	fb02 f303 	mul.w	r3, r2, r3
 800c650:	4a5f      	ldr	r2, [pc, #380]	; (800c7d0 <taskLedState+0x270>)
 800c652:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c656:	fbb3 f3f2 	udiv	r3, r3, r2
 800c65a:	4a5f      	ldr	r2, [pc, #380]	; (800c7d8 <taskLedState+0x278>)
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	4413      	add	r3, r2
 800c660:	461a      	mov	r2, r3
 800c662:	4b5d      	ldr	r3, [pc, #372]	; (800c7d8 <taskLedState+0x278>)
 800c664:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c666:	4b5c      	ldr	r3, [pc, #368]	; (800c7d8 <taskLedState+0x278>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da00      	bge.n	800c670 <taskLedState+0x110>
 800c66e:	3307      	adds	r3, #7
 800c670:	10db      	asrs	r3, r3, #3
 800c672:	461a      	mov	r2, r3
 800c674:	4b59      	ldr	r3, [pc, #356]	; (800c7dc <taskLedState+0x27c>)
 800c676:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c678:	4b58      	ldr	r3, [pc, #352]	; (800c7dc <taskLedState+0x27c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a50      	ldr	r2, [pc, #320]	; (800c7c0 <taskLedState+0x260>)
 800c67e:	6812      	ldr	r2, [r2, #0]
 800c680:	fb02 f303 	mul.w	r3, r2, r3
 800c684:	4a56      	ldr	r2, [pc, #344]	; (800c7e0 <taskLedState+0x280>)
 800c686:	fb82 1203 	smull	r1, r2, r2, r3
 800c68a:	1192      	asrs	r2, r2, #6
 800c68c:	17db      	asrs	r3, r3, #31
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	17da      	asrs	r2, r3, #31
 800c692:	461c      	mov	r4, r3
 800c694:	4615      	mov	r5, r2
 800c696:	4b53      	ldr	r3, [pc, #332]	; (800c7e4 <taskLedState+0x284>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	eb14 0802 	adds.w	r8, r4, r2
 800c6a0:	eb45 0903 	adc.w	r9, r5, r3
 800c6a4:	4b4f      	ldr	r3, [pc, #316]	; (800c7e4 <taskLedState+0x284>)
 800c6a6:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c6aa:	4b4e      	ldr	r3, [pc, #312]	; (800c7e4 <taskLedState+0x284>)
 800c6ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6b0:	4a4d      	ldr	r2, [pc, #308]	; (800c7e8 <taskLedState+0x288>)
 800c6b2:	f04f 0300 	mov.w	r3, #0
 800c6b6:	f7f4 fb9d 	bl	8000df4 <__aeabi_ldivmod>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	4b4b      	ldr	r3, [pc, #300]	; (800c7ec <taskLedState+0x28c>)
 800c6c0:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c6c2:	4b3f      	ldr	r3, [pc, #252]	; (800c7c0 <taskLedState+0x260>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c6c8:	4b42      	ldr	r3, [pc, #264]	; (800c7d4 <taskLedState+0x274>)
 800c6ca:	881a      	ldrh	r2, [r3, #0]
 800c6cc:	4b48      	ldr	r3, [pc, #288]	; (800c7f0 <taskLedState+0x290>)
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d803      	bhi.n	800c6dc <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	f7f7 fc77 	bl	8003fc8 <buzzer>
 800c6da:	e008      	b.n	800c6ee <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c6dc:	4b3d      	ldr	r3, [pc, #244]	; (800c7d4 <taskLedState+0x274>)
 800c6de:	881a      	ldrh	r2, [r3, #0]
 800c6e0:	4b44      	ldr	r3, [pc, #272]	; (800c7f4 <taskLedState+0x294>)
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d802      	bhi.n	800c6ee <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c6e8:	2002      	movs	r0, #2
 800c6ea:	f7f7 fc6d 	bl	8003fc8 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c6ee:	f7f7 fd57 	bl	80041a0 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c6f2:	f004 fe01 	bl	80112f8 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c6f6:	4b40      	ldr	r3, [pc, #256]	; (800c7f8 <taskLedState+0x298>)
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d003      	beq.n	800c706 <taskLedState+0x1a6>
        sensor_set.gyro.temperature(&telemTemperature1);
 800c6fe:	4b3e      	ldr	r3, [pc, #248]	; (800c7f8 <taskLedState+0x298>)
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	483e      	ldr	r0, [pc, #248]	; (800c7fc <taskLedState+0x29c>)
 800c704:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c706:	4b3e      	ldr	r3, [pc, #248]	; (800c800 <taskLedState+0x2a0>)
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d005      	beq.n	800c71a <taskLedState+0x1ba>
 800c70e:	2002      	movs	r0, #2
 800c710:	f7fa fc02 	bl	8006f18 <sensors>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d103      	bne.n	800c722 <taskLedState+0x1c2>
 800c71a:	4b3a      	ldr	r3, [pc, #232]	; (800c804 <taskLedState+0x2a4>)
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <taskLedState+0x1c8>
        actLed0Toggle();
 800c722:	f7f5 fc91 	bl	8002048 <actLed0Toggle>
 800c726:	e00d      	b.n	800c744 <taskLedState+0x1e4>
    } else {
        if (f.ACC_CALIBRATED)
 800c728:	4b37      	ldr	r3, [pc, #220]	; (800c808 <taskLedState+0x2a8>)
 800c72a:	789b      	ldrb	r3, [r3, #2]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <taskLedState+0x1d6>
            actLed0State(OFF);
 800c730:	2000      	movs	r0, #0
 800c732:	f7f5 fc73 	bl	800201c <actLed0State>
        if (f.ARMED)
 800c736:	4b34      	ldr	r3, [pc, #208]	; (800c808 <taskLedState+0x2a8>)
 800c738:	785b      	ldrb	r3, [r3, #1]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <taskLedState+0x1e4>
            actLed0State(ON);
 800c73e:	2001      	movs	r0, #1
 800c740:	f7f5 fc6c 	bl	800201c <actLed0State>
        ledringState();
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c744:	4b31      	ldr	r3, [pc, #196]	; (800c80c <taskLedState+0x2ac>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d006      	beq.n	800c75a <taskLedState+0x1fa>
 800c74c:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <taskLedState+0x2ac>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	3b01      	subs	r3, #1
 800c752:	b2da      	uxtb	r2, r3
 800c754:	4b2d      	ldr	r3, [pc, #180]	; (800c80c <taskLedState+0x2ac>)
 800c756:	701a      	strb	r2, [r3, #0]
 800c758:	e00f      	b.n	800c77a <taskLedState+0x21a>
    else {
        if (!f.SMALL_ANGLE) {
 800c75a:	4b2b      	ldr	r3, [pc, #172]	; (800c808 <taskLedState+0x2a8>)
 800c75c:	7b5b      	ldrb	r3, [r3, #13]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d105      	bne.n	800c76e <taskLedState+0x20e>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c762:	4b29      	ldr	r3, [pc, #164]	; (800c808 <taskLedState+0x2a8>)
 800c764:	2200      	movs	r2, #0
 800c766:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c768:	f7f5 fc6e 	bl	8002048 <actLed0Toggle>
 800c76c:	e002      	b.n	800c774 <taskLedState+0x214>
        } else {
            f.ACC_CALIBRATED = 1;
 800c76e:	4b26      	ldr	r3, [pc, #152]	; (800c808 <taskLedState+0x2a8>)
 800c770:	2201      	movs	r2, #1
 800c772:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c774:	4b25      	ldr	r3, [pc, #148]	; (800c80c <taskLedState+0x2ac>)
 800c776:	2209      	movs	r2, #9
 800c778:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c77a:	2020      	movs	r0, #32
 800c77c:	f7fa fbcc 	bl	8006f18 <sensors>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d013      	beq.n	800c7ae <taskLedState+0x24e>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c786:	4b22      	ldr	r3, [pc, #136]	; (800c810 <taskLedState+0x2b0>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d006      	beq.n	800c79c <taskLedState+0x23c>
 800c78e:	4b20      	ldr	r3, [pc, #128]	; (800c810 <taskLedState+0x2b0>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	3b01      	subs	r3, #1
 800c794:	b2da      	uxtb	r2, r3
 800c796:	4b1e      	ldr	r3, [pc, #120]	; (800c810 <taskLedState+0x2b0>)
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	e008      	b.n	800c7ae <taskLedState+0x24e>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c79c:	4b1d      	ldr	r3, [pc, #116]	; (800c814 <taskLedState+0x2b4>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	d901      	bls.n	800c7a8 <taskLedState+0x248>
 800c7a4:	f7f5 fc7c 	bl	80020a0 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c7a8:	4b19      	ldr	r3, [pc, #100]	; (800c810 <taskLedState+0x2b0>)
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c7ba:	bf00      	nop
 800c7bc:	200019a4 	.word	0x200019a4
 800c7c0:	20001ba8 	.word	0x20001ba8
 800c7c4:	20001bac 	.word	0x20001bac
 800c7c8:	aaaaaaab 	.word	0xaaaaaaab
 800c7cc:	20001bb0 	.word	0x20001bb0
 800c7d0:	20000bb4 	.word	0x20000bb4
 800c7d4:	200019a8 	.word	0x200019a8
 800c7d8:	20001bb4 	.word	0x20001bb4
 800c7dc:	200019ac 	.word	0x200019ac
 800c7e0:	10624dd3 	.word	0x10624dd3
 800c7e4:	20001bb8 	.word	0x20001bb8
 800c7e8:	00057e40 	.word	0x00057e40
 800c7ec:	200019b0 	.word	0x200019b0
 800c7f0:	20001b28 	.word	0x20001b28
 800c7f4:	20001b26 	.word	0x20001b26
 800c7f8:	20001cb8 	.word	0x20001cb8
 800c7fc:	200019b4 	.word	0x200019b4
 800c800:	20001ca6 	.word	0x20001ca6
 800c804:	20001caa 	.word	0x20001caa
 800c808:	20001980 	.word	0x20001980
 800c80c:	20001bc0 	.word	0x20001bc0
 800c810:	20001bc1 	.word	0x20001bc1
 800c814:	20001a68 	.word	0x20001a68

0800c818 <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c822:	79fb      	ldrb	r3, [r7, #7]
 800c824:	4a05      	ldr	r2, [pc, #20]	; (800c83c <pwmReadRawRC+0x24>)
 800c826:	4413      	add	r3, r2
 800c828:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f5 fb87 	bl	8001f40 <actPwmRead>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	20000bb4 	.word	0x20000bb4

0800c840 <computeRC>:

void computeRC(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c846:	2008      	movs	r0, #8
 800c848:	f7fa fbae 	bl	8006fa8 <feature>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d019      	beq.n	800c886 <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c852:	2300      	movs	r3, #0
 800c854:	607b      	str	r3, [r7, #4]
 800c856:	e00e      	b.n	800c876 <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c858:	4b41      	ldr	r3, [pc, #260]	; (800c960 <computeRC+0x120>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	b2d2      	uxtb	r2, r2
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
 800c864:	4603      	mov	r3, r0
 800c866:	b219      	sxth	r1, r3
 800c868:	4a3e      	ldr	r2, [pc, #248]	; (800c964 <computeRC+0x124>)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3301      	adds	r3, #1
 800c874:	607b      	str	r3, [r7, #4]
 800c876:	4b3c      	ldr	r3, [pc, #240]	; (800c968 <computeRC+0x128>)
 800c878:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c87c:	461a      	mov	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4293      	cmp	r3, r2
 800c882:	dbe9      	blt.n	800c858 <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c884:	e068      	b.n	800c958 <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c886:	2300      	movs	r3, #0
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	e059      	b.n	800c940 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c88c:	4b34      	ldr	r3, [pc, #208]	; (800c960 <computeRC+0x120>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	4603      	mov	r3, r0
 800c89a:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c89c:	89fb      	ldrh	r3, [r7, #14]
 800c89e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d904      	bls.n	800c8b0 <computeRC+0x70>
 800c8a6:	89fb      	ldrh	r3, [r7, #14]
 800c8a8:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d903      	bls.n	800c8b8 <computeRC+0x78>
                capture = mcfg.midrc;
 800c8b0:	4b2d      	ldr	r3, [pc, #180]	; (800c968 <computeRC+0x128>)
 800c8b2:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c8b6:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c8b8:	4b2c      	ldr	r3, [pc, #176]	; (800c96c <computeRC+0x12c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	425a      	negs	r2, r3
 800c8be:	f003 0303 	and.w	r3, r3, #3
 800c8c2:	f002 0203 	and.w	r2, r2, #3
 800c8c6:	bf58      	it	pl
 800c8c8:	4253      	negpl	r3, r2
 800c8ca:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c8ce:	4928      	ldr	r1, [pc, #160]	; (800c970 <computeRC+0x130>)
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	0092      	lsls	r2, r2, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c8dc:	4a21      	ldr	r2, [pc, #132]	; (800c964 <computeRC+0x124>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60bb      	str	r3, [r7, #8]
 800c8ea:	e016      	b.n	800c91a <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c8ec:	4a1d      	ldr	r2, [pc, #116]	; (800c964 <computeRC+0x124>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	481e      	ldr	r0, [pc, #120]	; (800c970 <computeRC+0x130>)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	0099      	lsls	r1, r3, #2
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	440b      	add	r3, r1
 800c900:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c904:	b29b      	uxth	r3, r3
 800c906:	4413      	add	r3, r2
 800c908:	b29b      	uxth	r3, r3
 800c90a:	b219      	sxth	r1, r3
 800c90c:	4a15      	ldr	r2, [pc, #84]	; (800c964 <computeRC+0x124>)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	3301      	adds	r3, #1
 800c918:	60bb      	str	r3, [r7, #8]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	dde5      	ble.n	800c8ec <computeRC+0xac>
            rcData[chan] /= 4;
 800c920:	4a10      	ldr	r2, [pc, #64]	; (800c964 <computeRC+0x124>)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	da00      	bge.n	800c92e <computeRC+0xee>
 800c92c:	3303      	adds	r3, #3
 800c92e:	109b      	asrs	r3, r3, #2
 800c930:	b219      	sxth	r1, r3
 800c932:	4a0c      	ldr	r2, [pc, #48]	; (800c964 <computeRC+0x124>)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3301      	adds	r3, #1
 800c93e:	607b      	str	r3, [r7, #4]
 800c940:	4b09      	ldr	r3, [pc, #36]	; (800c968 <computeRC+0x128>)
 800c942:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c946:	461a      	mov	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4293      	cmp	r3, r2
 800c94c:	db9e      	blt.n	800c88c <computeRC+0x4c>
        rcAverageIndex++;
 800c94e:	4b07      	ldr	r3, [pc, #28]	; (800c96c <computeRC+0x12c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	4a05      	ldr	r2, [pc, #20]	; (800c96c <computeRC+0x12c>)
 800c956:	6013      	str	r3, [r2, #0]
}
 800c958:	bf00      	nop
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20001a14 	.word	0x20001a14
 800c964:	200019bc 	.word	0x200019bc
 800c968:	20000bb4 	.word	0x20000bb4
 800c96c:	20001bc4 	.word	0x20001bc4
 800c970:	20001bc8 	.word	0x20001bc8

0800c974 <mwArm>:

static void mwArm(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c978:	4b1b      	ldr	r3, [pc, #108]	; (800c9e8 <mwArm+0x74>)
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d126      	bne.n	800c9ce <mwArm+0x5a>
 800c980:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <mwArm+0x78>)
 800c982:	789b      	ldrb	r3, [r3, #2]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d022      	beq.n	800c9ce <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c988:	4b18      	ldr	r3, [pc, #96]	; (800c9ec <mwArm+0x78>)
 800c98a:	785b      	ldrb	r3, [r3, #1]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d128      	bne.n	800c9e2 <mwArm+0x6e>
            f.ARMED = 1;
 800c990:	4b16      	ldr	r3, [pc, #88]	; (800c9ec <mwArm+0x78>)
 800c992:	2201      	movs	r2, #1
 800c994:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800c996:	4b16      	ldr	r3, [pc, #88]	; (800c9f0 <mwArm+0x7c>)
 800c998:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c99c:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <mwArm+0x80>)
 800c99e:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800c9a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c9a4:	f7fa fb00 	bl	8006fa8 <feature>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00b      	beq.n	800c9c6 <mwArm+0x52>
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <mwArm+0x78>)
 800c9b0:	7adb      	ldrb	r3, [r3, #11]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d007      	beq.n	800c9c6 <mwArm+0x52>
 800c9b6:	4b10      	ldr	r3, [pc, #64]	; (800c9f8 <mwArm+0x84>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	d903      	bls.n	800c9c6 <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800c9be:	2007      	movs	r0, #7
 800c9c0:	f7f7 fb02 	bl	8003fc8 <buzzer>
        if (!f.ARMED) {         // arm now!
 800c9c4:	e00d      	b.n	800c9e2 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800c9c6:	2006      	movs	r0, #6
 800c9c8:	f7f7 fafe 	bl	8003fc8 <buzzer>
        if (!f.ARMED) {         // arm now!
 800c9cc:	e009      	b.n	800c9e2 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800c9ce:	4b07      	ldr	r3, [pc, #28]	; (800c9ec <mwArm+0x78>)
 800c9d0:	785b      	ldrb	r3, [r3, #1]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d105      	bne.n	800c9e2 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	21ff      	movs	r1, #255	; 0xff
 800c9da:	2002      	movs	r0, #2
 800c9dc:	f7ff fae2 	bl	800bfa4 <blinkLED>
    }
}
 800c9e0:	e7ff      	b.n	800c9e2 <mwArm+0x6e>
 800c9e2:	bf00      	nop
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20001caa 	.word	0x20001caa
 800c9ec:	20001980 	.word	0x20001980
 800c9f0:	20001cac 	.word	0x20001cac
 800c9f4:	200019a6 	.word	0x200019a6
 800c9f8:	20001a68 	.word	0x20001a68

0800c9fc <mwDisarm>:

static void mwDisarm(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ca00:	4b09      	ldr	r3, [pc, #36]	; (800ca28 <mwDisarm+0x2c>)
 800ca02:	785b      	ldrb	r3, [r3, #1]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00c      	beq.n	800ca22 <mwDisarm+0x26>
        f.ARMED = 0;
 800ca08:	4b07      	ldr	r3, [pc, #28]	; (800ca28 <mwDisarm+0x2c>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ca0e:	2005      	movs	r0, #5
 800ca10:	f7f7 fada 	bl	8003fc8 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <mwDisarm+0x30>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <mwDisarm+0x26>
            disarmTime = 0;
 800ca1c:	4b03      	ldr	r3, [pc, #12]	; (800ca2c <mwDisarm+0x30>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]
    }
}
 800ca22:	bf00      	nop
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20001980 	.word	0x20001980
 800ca2c:	20001b8c 	.word	0x20001b8c

0800ca30 <mwVario>:

static void mwVario(void)
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0

}
 800ca34:	bf00      	nop
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
	...

0800ca40 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08e      	sub	sp, #56	; 0x38
 800ca44:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800ca46:	2300      	movs	r3, #0
 800ca48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4e:	2300      	movs	r3, #0
 800ca50:	623b      	str	r3, [r7, #32]
 800ca52:	2300      	movs	r3, #0
 800ca54:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800ca56:	4b91      	ldr	r3, [pc, #580]	; (800cc9c <pidMultiWii+0x25c>)
 800ca58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfb8      	it	lt
 800ca60:	425b      	neglt	r3, r3
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	4b8d      	ldr	r3, [pc, #564]	; (800cc9c <pidMultiWii+0x25c>)
 800ca66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	bfb8      	it	lt
 800ca6e:	425b      	neglt	r3, r3
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	4293      	cmp	r3, r2
 800ca74:	bf38      	it	cc
 800ca76:	4613      	movcc	r3, r2
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca80:	e189      	b.n	800cd96 <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800ca82:	4b87      	ldr	r3, [pc, #540]	; (800cca0 <pidMultiWii+0x260>)
 800ca84:	78db      	ldrb	r3, [r3, #3]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d103      	bne.n	800ca92 <pidMultiWii+0x52>
 800ca8a:	4b85      	ldr	r3, [pc, #532]	; (800cca0 <pidMultiWii+0x260>)
 800ca8c:	791b      	ldrb	r3, [r3, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d060      	beq.n	800cb54 <pidMultiWii+0x114>
 800ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	dc5d      	bgt.n	800cb54 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800ca98:	4a80      	ldr	r2, [pc, #512]	; (800cc9c <pidMultiWii+0x25c>)
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	4980      	ldr	r1, [pc, #512]	; (800cca4 <pidMultiWii+0x264>)
 800caa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caa6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800caaa:	4413      	add	r3, r2
 800caac:	4a7e      	ldr	r2, [pc, #504]	; (800cca8 <pidMultiWii+0x268>)
 800caae:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cab2:	4251      	negs	r1, r2
 800cab4:	4a7c      	ldr	r2, [pc, #496]	; (800cca8 <pidMultiWii+0x268>)
 800cab6:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800caba:	4618      	mov	r0, r3
 800cabc:	f7f7 f8f6 	bl	8003cac <constrain>
 800cac0:	4602      	mov	r2, r0
 800cac2:	497a      	ldr	r1, [pc, #488]	; (800ccac <pidMultiWii+0x26c>)
 800cac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800caca:	1ad2      	subs	r2, r2, r3
 800cacc:	4978      	ldr	r1, [pc, #480]	; (800ccb0 <pidMultiWii+0x270>)
 800cace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad0:	3314      	adds	r3, #20
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	440b      	add	r3, r1
 800cad6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cada:	4413      	add	r3, r2
 800cadc:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cade:	4b74      	ldr	r3, [pc, #464]	; (800ccb0 <pidMultiWii+0x270>)
 800cae0:	7a1b      	ldrb	r3, [r3, #8]
 800cae2:	461a      	mov	r2, r3
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	fb02 f303 	mul.w	r3, r2, r3
 800caea:	4a72      	ldr	r2, [pc, #456]	; (800ccb4 <pidMultiWii+0x274>)
 800caec:	fb82 1203 	smull	r1, r2, r2, r3
 800caf0:	1152      	asrs	r2, r2, #5
 800caf2:	17db      	asrs	r3, r3, #31
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800caf8:	4b6d      	ldr	r3, [pc, #436]	; (800ccb0 <pidMultiWii+0x270>)
 800cafa:	7f1b      	ldrb	r3, [r3, #28]
 800cafc:	461a      	mov	r2, r3
 800cafe:	4613      	mov	r3, r2
 800cb00:	079b      	lsls	r3, r3, #30
 800cb02:	1a9b      	subs	r3, r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	1a99      	subs	r1, r3, r2
 800cb08:	4b69      	ldr	r3, [pc, #420]	; (800ccb0 <pidMultiWii+0x270>)
 800cb0a:	7f1b      	ldrb	r3, [r3, #28]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	461a      	mov	r2, r3
 800cb16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb18:	f7f7 f8c8 	bl	8003cac <constrain>
 800cb1c:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cb1e:	4a66      	ldr	r2, [pc, #408]	; (800ccb8 <pidMultiWii+0x278>)
 800cb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb2e:	4963      	ldr	r1, [pc, #396]	; (800ccbc <pidMultiWii+0x27c>)
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f7 f8bb 	bl	8003cac <constrain>
 800cb36:	4602      	mov	r2, r0
 800cb38:	495f      	ldr	r1, [pc, #380]	; (800ccb8 <pidMultiWii+0x278>)
 800cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cb40:	4a5d      	ldr	r2, [pc, #372]	; (800ccb8 <pidMultiWii+0x278>)
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb48:	4a59      	ldr	r2, [pc, #356]	; (800ccb0 <pidMultiWii+0x270>)
 800cb4a:	7c92      	ldrb	r2, [r2, #18]
 800cb4c:	fb02 f303 	mul.w	r3, r2, r3
 800cb50:	131b      	asrs	r3, r3, #12
 800cb52:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cb54:	4b52      	ldr	r3, [pc, #328]	; (800cca0 <pidMultiWii+0x260>)
 800cb56:	78db      	ldrb	r3, [r3, #3]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <pidMultiWii+0x12a>
 800cb5c:	4b50      	ldr	r3, [pc, #320]	; (800cca0 <pidMultiWii+0x260>)
 800cb5e:	791b      	ldrb	r3, [r3, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <pidMultiWii+0x12a>
 800cb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d15f      	bne.n	800cc2a <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cb6a:	4a4c      	ldr	r2, [pc, #304]	; (800cc9c <pidMultiWii+0x25c>)
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb72:	461a      	mov	r2, r3
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4a4c      	ldr	r2, [pc, #304]	; (800ccb0 <pidMultiWii+0x270>)
 800cb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb82:	4413      	add	r3, r2
 800cb84:	3301      	adds	r3, #1
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	fb91 f3f3 	sdiv	r3, r1, r3
 800cb8c:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cb8e:	4a4c      	ldr	r2, [pc, #304]	; (800ccc0 <pidMultiWii+0x280>)
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb96:	461a      	mov	r2, r3
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cb9e:	4a3f      	ldr	r2, [pc, #252]	; (800cc9c <pidMultiWii+0x25c>)
 800cba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cba6:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cba8:	4a46      	ldr	r2, [pc, #280]	; (800ccc4 <pidMultiWii+0x284>)
 800cbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cbb8:	4943      	ldr	r1, [pc, #268]	; (800ccc8 <pidMultiWii+0x288>)
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7f7 f876 	bl	8003cac <constrain>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	4940      	ldr	r1, [pc, #256]	; (800ccc4 <pidMultiWii+0x284>)
 800cbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cbca:	4a3d      	ldr	r2, [pc, #244]	; (800ccc0 <pidMultiWii+0x280>)
 800cbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bfb8      	it	lt
 800cbd6:	425b      	neglt	r3, r3
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cbde:	d80c      	bhi.n	800cbfa <pidMultiWii+0x1ba>
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d10e      	bne.n	800cc04 <pidMultiWii+0x1c4>
 800cbe6:	4a2d      	ldr	r2, [pc, #180]	; (800cc9c <pidMultiWii+0x25c>)
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	bfb8      	it	lt
 800cbf2:	425b      	neglt	r3, r3
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	2b64      	cmp	r3, #100	; 0x64
 800cbf8:	d904      	bls.n	800cc04 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cbfa:	4a32      	ldr	r2, [pc, #200]	; (800ccc4 <pidMultiWii+0x284>)
 800cbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfe:	2100      	movs	r1, #0
 800cc00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cc04:	4a2f      	ldr	r2, [pc, #188]	; (800ccc4 <pidMultiWii+0x284>)
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc0c:	4a2f      	ldr	r2, [pc, #188]	; (800cccc <pidMultiWii+0x28c>)
 800cc0e:	fb82 1203 	smull	r1, r2, r2, r3
 800cc12:	10d2      	asrs	r2, r2, #3
 800cc14:	17db      	asrs	r3, r3, #31
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	4925      	ldr	r1, [pc, #148]	; (800ccb0 <pidMultiWii+0x270>)
 800cc1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc1c:	440a      	add	r2, r1
 800cc1e:	320b      	adds	r2, #11
 800cc20:	7812      	ldrb	r2, [r2, #0]
 800cc22:	fb02 f303 	mul.w	r3, r2, r3
 800cc26:	119b      	asrs	r3, r3, #6
 800cc28:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cc2a:	4b1d      	ldr	r3, [pc, #116]	; (800cca0 <pidMultiWii+0x260>)
 800cc2c:	791b      	ldrb	r3, [r3, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d027      	beq.n	800cc82 <pidMultiWii+0x242>
 800cc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	dc24      	bgt.n	800cc82 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cc3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc40:	fb03 f202 	mul.w	r2, r3, r2
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	69b9      	ldr	r1, [r7, #24]
 800cc48:	fb01 f303 	mul.w	r3, r1, r3
 800cc4c:	4413      	add	r3, r2
 800cc4e:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <pidMultiWii+0x28c>)
 800cc50:	fb82 1203 	smull	r1, r2, r2, r3
 800cc54:	1152      	asrs	r2, r2, #5
 800cc56:	17db      	asrs	r3, r3, #31
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cc62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc64:	fb03 f202 	mul.w	r2, r3, r2
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	69b9      	ldr	r1, [r7, #24]
 800cc6c:	fb01 f303 	mul.w	r3, r1, r3
 800cc70:	4413      	add	r3, r2
 800cc72:	4a16      	ldr	r2, [pc, #88]	; (800cccc <pidMultiWii+0x28c>)
 800cc74:	fb82 1203 	smull	r1, r2, r2, r3
 800cc78:	1152      	asrs	r2, r2, #5
 800cc7a:	17db      	asrs	r3, r3, #31
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc80:	e02a      	b.n	800ccd8 <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800cc82:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <pidMultiWii+0x260>)
 800cc84:	78db      	ldrb	r3, [r3, #3]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d022      	beq.n	800ccd0 <pidMultiWii+0x290>
 800cc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	dc1f      	bgt.n	800ccd0 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc98:	e01e      	b.n	800ccd8 <pidMultiWii+0x298>
 800cc9a:	bf00      	nop
 800cc9c:	200019e0 	.word	0x200019e0
 800cca0:	20001980 	.word	0x20001980
 800cca4:	20001a74 	.word	0x20001a74
 800cca8:	20000bb4 	.word	0x20000bb4
 800ccac:	20001788 	.word	0x20001788
 800ccb0:	20001120 	.word	0x20001120
 800ccb4:	51eb851f 	.word	0x51eb851f
 800ccb8:	20001b9c 	.word	0x20001b9c
 800ccbc:	ffffd8f0 	.word	0xffffd8f0
 800ccc0:	20001778 	.word	0x20001778
 800ccc4:	20001b90 	.word	0x20001b90
 800ccc8:	ffffc180 	.word	0xffffc180
 800cccc:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800ccd8:	4a33      	ldr	r2, [pc, #204]	; (800cda8 <pidMultiWii+0x368>)
 800ccda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccdc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cce0:	4619      	mov	r1, r3
 800cce2:	4a32      	ldr	r2, [pc, #200]	; (800cdac <pidMultiWii+0x36c>)
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	4413      	add	r3, r2
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	fb01 f303 	mul.w	r3, r1, r3
 800ccee:	4a30      	ldr	r2, [pc, #192]	; (800cdb0 <pidMultiWii+0x370>)
 800ccf0:	fb82 1203 	smull	r1, r2, r2, r3
 800ccf4:	1152      	asrs	r2, r2, #5
 800ccf6:	17db      	asrs	r3, r3, #31
 800ccf8:	1a9b      	subs	r3, r3, r2
 800ccfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccfc:	4413      	add	r3, r2
 800ccfe:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cd00:	4a29      	ldr	r2, [pc, #164]	; (800cda8 <pidMultiWii+0x368>)
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	4a2a      	ldr	r2, [pc, #168]	; (800cdb4 <pidMultiWii+0x374>)
 800cd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd12:	1acb      	subs	r3, r1, r3
 800cd14:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cd16:	4a24      	ldr	r2, [pc, #144]	; (800cda8 <pidMultiWii+0x368>)
 800cd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cd1e:	4a25      	ldr	r2, [pc, #148]	; (800cdb4 <pidMultiWii+0x374>)
 800cd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cd26:	4a24      	ldr	r2, [pc, #144]	; (800cdb8 <pidMultiWii+0x378>)
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd2e:	4923      	ldr	r1, [pc, #140]	; (800cdbc <pidMultiWii+0x37c>)
 800cd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd36:	4413      	add	r3, r2
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cd3e:	4a1e      	ldr	r2, [pc, #120]	; (800cdb8 <pidMultiWii+0x378>)
 800cd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd46:	491d      	ldr	r1, [pc, #116]	; (800cdbc <pidMultiWii+0x37c>)
 800cd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cd4e:	491a      	ldr	r1, [pc, #104]	; (800cdb8 <pidMultiWii+0x378>)
 800cd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cd58:	4a19      	ldr	r2, [pc, #100]	; (800cdc0 <pidMultiWii+0x380>)
 800cd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5c:	4413      	add	r3, r2
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	fb02 f303 	mul.w	r3, r2, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	da00      	bge.n	800cd6e <pidMultiWii+0x32e>
 800cd6c:	331f      	adds	r3, #31
 800cd6e:	115b      	asrs	r3, r3, #5
 800cd70:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	4413      	add	r3, r2
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	b219      	sxth	r1, r3
 800cd88:	4a0e      	ldr	r2, [pc, #56]	; (800cdc4 <pidMultiWii+0x384>)
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	3301      	adds	r3, #1
 800cd94:	637b      	str	r3, [r7, #52]	; 0x34
 800cd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	f77f ae72 	ble.w	800ca82 <pidMultiWii+0x42>
    }
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	3738      	adds	r7, #56	; 0x38
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20001778 	.word	0x20001778
 800cdac:	20001a18 	.word	0x20001a18
 800cdb0:	66666667 	.word	0x66666667
 800cdb4:	20001c58 	.word	0x20001c58
 800cdb8:	20001c60 	.word	0x20001c60
 800cdbc:	20001c6c 	.word	0x20001c6c
 800cdc0:	20001a20 	.word	0x20001a20
 800cdc4:	20001a40 	.word	0x20001a40

0800cdc8 <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	; 0x28
 800cdcc:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdd6:	e0f2      	b.n	800cfbe <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d10b      	bne.n	800cdf6 <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800cdde:	4b7c      	ldr	r3, [pc, #496]	; (800cfd0 <pidRewrite+0x208>)
 800cde0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cde4:	331b      	adds	r3, #27
 800cde6:	4a7b      	ldr	r2, [pc, #492]	; (800cfd4 <pidRewrite+0x20c>)
 800cde8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cdec:	fb02 f303 	mul.w	r3, r2, r3
 800cdf0:	115b      	asrs	r3, r3, #5
 800cdf2:	623b      	str	r3, [r7, #32]
 800cdf4:	e053      	b.n	800ce9e <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800cdf6:	4a77      	ldr	r2, [pc, #476]	; (800cfd4 <pidRewrite+0x20c>)
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cdfe:	4619      	mov	r1, r3
 800ce00:	4a75      	ldr	r2, [pc, #468]	; (800cfd8 <pidRewrite+0x210>)
 800ce02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce08:	440b      	add	r3, r1
 800ce0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce0e:	4973      	ldr	r1, [pc, #460]	; (800cfdc <pidRewrite+0x214>)
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f6 ff4b 	bl	8003cac <constrain>
 800ce16:	4602      	mov	r2, r0
 800ce18:	4971      	ldr	r1, [pc, #452]	; (800cfe0 <pidRewrite+0x218>)
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ce20:	1ad2      	subs	r2, r2, r3
 800ce22:	496b      	ldr	r1, [pc, #428]	; (800cfd0 <pidRewrite+0x208>)
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	3314      	adds	r3, #20
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	440b      	add	r3, r1
 800ce2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce30:	4413      	add	r3, r2
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce3a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800ce3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce46:	ee17 3a90 	vmov	r3, s15
 800ce4a:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800ce4c:	4b65      	ldr	r3, [pc, #404]	; (800cfe4 <pidRewrite+0x21c>)
 800ce4e:	78db      	ldrb	r3, [r3, #3]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d11c      	bne.n	800ce8e <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800ce54:	4a5e      	ldr	r2, [pc, #376]	; (800cfd0 <pidRewrite+0x208>)
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	4413      	add	r3, r2
 800ce5a:	3323      	adds	r3, #35	; 0x23
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	331b      	adds	r3, #27
 800ce60:	495c      	ldr	r1, [pc, #368]	; (800cfd4 <pidRewrite+0x20c>)
 800ce62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce64:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ce68:	fb02 f303 	mul.w	r3, r2, r3
 800ce6c:	111b      	asrs	r3, r3, #4
 800ce6e:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800ce70:	4b5c      	ldr	r3, [pc, #368]	; (800cfe4 <pidRewrite+0x21c>)
 800ce72:	791b      	ldrb	r3, [r3, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d012      	beq.n	800ce9e <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800ce78:	4b55      	ldr	r3, [pc, #340]	; (800cfd0 <pidRewrite+0x208>)
 800ce7a:	7c9b      	ldrb	r3, [r3, #18]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	fb02 f303 	mul.w	r3, r2, r3
 800ce84:	121b      	asrs	r3, r3, #8
 800ce86:	6a3a      	ldr	r2, [r7, #32]
 800ce88:	4413      	add	r3, r2
 800ce8a:	623b      	str	r3, [r7, #32]
 800ce8c:	e007      	b.n	800ce9e <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800ce8e:	4b50      	ldr	r3, [pc, #320]	; (800cfd0 <pidRewrite+0x208>)
 800ce90:	7a1b      	ldrb	r3, [r3, #8]
 800ce92:	461a      	mov	r2, r3
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	fb02 f303 	mul.w	r3, r2, r3
 800ce9a:	111b      	asrs	r3, r3, #4
 800ce9c:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800ce9e:	4a52      	ldr	r2, [pc, #328]	; (800cfe8 <pidRewrite+0x220>)
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cea6:	461a      	mov	r2, r3
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	1a9b      	subs	r3, r3, r2
 800ceac:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800ceae:	4a48      	ldr	r2, [pc, #288]	; (800cfd0 <pidRewrite+0x208>)
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	4413      	add	r3, r2
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	fb02 f303 	mul.w	r3, r2, r3
 800cec0:	11db      	asrs	r3, r3, #7
 800cec2:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800cec4:	4a49      	ldr	r2, [pc, #292]	; (800cfec <pidRewrite+0x224>)
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cecc:	4b48      	ldr	r3, [pc, #288]	; (800cff0 <pidRewrite+0x228>)
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	4619      	mov	r1, r3
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	fb01 f303 	mul.w	r3, r1, r3
 800ced8:	12db      	asrs	r3, r3, #11
 800ceda:	483d      	ldr	r0, [pc, #244]	; (800cfd0 <pidRewrite+0x208>)
 800cedc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cede:	4401      	add	r1, r0
 800cee0:	310b      	adds	r1, #11
 800cee2:	7809      	ldrb	r1, [r1, #0]
 800cee4:	fb01 f303 	mul.w	r3, r1, r3
 800cee8:	441a      	add	r2, r3
 800ceea:	4940      	ldr	r1, [pc, #256]	; (800cfec <pidRewrite+0x224>)
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800cef2:	4a3e      	ldr	r2, [pc, #248]	; (800cfec <pidRewrite+0x224>)
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cefa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cefe:	493d      	ldr	r1, [pc, #244]	; (800cff4 <pidRewrite+0x22c>)
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7f6 fed3 	bl	8003cac <constrain>
 800cf06:	4602      	mov	r2, r0
 800cf08:	4938      	ldr	r1, [pc, #224]	; (800cfec <pidRewrite+0x224>)
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800cf10:	4a36      	ldr	r2, [pc, #216]	; (800cfec <pidRewrite+0x224>)
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf18:	135b      	asrs	r3, r3, #13
 800cf1a:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800cf1c:	4a36      	ldr	r2, [pc, #216]	; (800cff8 <pidRewrite+0x230>)
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf24:	69ba      	ldr	r2, [r7, #24]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800cf2a:	4933      	ldr	r1, [pc, #204]	; (800cff8 <pidRewrite+0x230>)
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	69ba      	ldr	r2, [r7, #24]
 800cf30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cf34:	4b2e      	ldr	r3, [pc, #184]	; (800cff0 <pidRewrite+0x228>)
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	091b      	lsrs	r3, r3, #4
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	461a      	mov	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
 800cf4e:	119b      	asrs	r3, r3, #6
 800cf50:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cf52:	4a2a      	ldr	r2, [pc, #168]	; (800cffc <pidRewrite+0x234>)
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf5a:	4929      	ldr	r1, [pc, #164]	; (800d000 <pidRewrite+0x238>)
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf62:	4413      	add	r3, r2
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cf6a:	4a24      	ldr	r2, [pc, #144]	; (800cffc <pidRewrite+0x234>)
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf72:	4923      	ldr	r1, [pc, #140]	; (800d000 <pidRewrite+0x238>)
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cf7a:	4920      	ldr	r1, [pc, #128]	; (800cffc <pidRewrite+0x234>)
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cf84:	4a12      	ldr	r2, [pc, #72]	; (800cfd0 <pidRewrite+0x208>)
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	4413      	add	r3, r2
 800cf8a:	3315      	adds	r3, #21
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	fb02 f303 	mul.w	r3, r2, r3
 800cf96:	121b      	asrs	r3, r3, #8
 800cf98:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	4413      	add	r3, r2
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	4413      	add	r3, r2
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	b219      	sxth	r1, r3
 800cfb0:	4a14      	ldr	r2, [pc, #80]	; (800d004 <pidRewrite+0x23c>)
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	3301      	adds	r3, #1
 800cfbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	f77f af09 	ble.w	800cdd8 <pidRewrite+0x10>
    }
}
 800cfc6:	bf00      	nop
 800cfc8:	bf00      	nop
 800cfca:	3728      	adds	r7, #40	; 0x28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20001120 	.word	0x20001120
 800cfd4:	200019e0 	.word	0x200019e0
 800cfd8:	20001a74 	.word	0x20001a74
 800cfdc:	fffffe0c 	.word	0xfffffe0c
 800cfe0:	20001788 	.word	0x20001788
 800cfe4:	20001980 	.word	0x20001980
 800cfe8:	20001778 	.word	0x20001778
 800cfec:	20001b90 	.word	0x20001b90
 800cff0:	200019a4 	.word	0x200019a4
 800cff4:	ffe00000 	.word	0xffe00000
 800cff8:	20001c78 	.word	0x20001c78
 800cffc:	20001c84 	.word	0x20001c84
 800d000:	20001c90 	.word	0x20001c90
 800d004:	20001a40 	.word	0x20001a40

0800d008 <setPIDController>:

void setPIDController(int type)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d003      	beq.n	800d01e <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d016:	4b07      	ldr	r3, [pc, #28]	; (800d034 <setPIDController+0x2c>)
 800d018:	4a07      	ldr	r2, [pc, #28]	; (800d038 <setPIDController+0x30>)
 800d01a:	601a      	str	r2, [r3, #0]
            break;
 800d01c:	e003      	b.n	800d026 <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <setPIDController+0x2c>)
 800d020:	4a06      	ldr	r2, [pc, #24]	; (800d03c <setPIDController+0x34>)
 800d022:	601a      	str	r2, [r3, #0]
            break;
 800d024:	bf00      	nop
    }
}
 800d026:	bf00      	nop
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	20000050 	.word	0x20000050
 800d038:	0800ca41 	.word	0x0800ca41
 800d03c:	0800cdc9 	.word	0x0800cdc9

0800d040 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)	// 50Hz
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d048:	2300      	movs	r3, #0
 800d04a:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d050:	2300      	movs	r3, #0
 800d052:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d054:	f7ff fbf4 	bl	800c840 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d058:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d05c:	f7f9 ffa4 	bl	8006fa8 <feature>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d005      	beq.n	800d072 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d066:	4b9d      	ldr	r3, [pc, #628]	; (800d2dc <taskComputeRc+0x29c>)
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d101      	bne.n	800d072 <taskComputeRc+0x32>
                mwDisarm();
 800d06e:	f7ff fcc5 	bl	800c9fc <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d072:	f001 fa03 	bl	800e47c <RSSI_getValue>
 800d076:	4603      	mov	r3, r0
 800d078:	461a      	mov	r2, r3
 800d07a:	4b99      	ldr	r3, [pc, #612]	; (800d2e0 <taskComputeRc+0x2a0>)
 800d07c:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d07e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d082:	f7f9 ff91 	bl	8006fa8 <feature>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <taskComputeRc+0x5a>
 800d08c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d090:	f7f9 ff8a 	bl	8006fa8 <feature>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d072      	beq.n	800d180 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d09a:	4b92      	ldr	r3, [pc, #584]	; (800d2e4 <taskComputeRc+0x2a4>)
 800d09c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4b91      	ldr	r3, [pc, #580]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d0a4:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	4299      	cmp	r1, r3
 800d0b2:	dd43      	ble.n	800d13c <taskComputeRc+0xfc>
 800d0b4:	4b8d      	ldr	r3, [pc, #564]	; (800d2ec <taskComputeRc+0x2ac>)
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d03f      	beq.n	800d13c <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	613b      	str	r3, [r7, #16]
 800d0c0:	e00a      	b.n	800d0d8 <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d0c2:	4b8b      	ldr	r3, [pc, #556]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d0c4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d0c8:	b219      	sxth	r1, r3
 800d0ca:	4a8a      	ldr	r2, [pc, #552]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	613b      	str	r3, [r7, #16]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	ddf1      	ble.n	800d0c2 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d0de:	4b82      	ldr	r3, [pc, #520]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d0e0:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d0e4:	b21a      	sxth	r2, r3
 800d0e6:	4b83      	ldr	r3, [pc, #524]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d0e8:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d0ea:	2003      	movs	r0, #3
 800d0ec:	f7f6 ff6c 	bl	8003fc8 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d0f0:	4b7c      	ldr	r3, [pc, #496]	; (800d2e4 <taskComputeRc+0x2a4>)
 800d0f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4b7b      	ldr	r3, [pc, #492]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d0fa:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0fe:	461a      	mov	r2, r3
 800d100:	4b79      	ldr	r3, [pc, #484]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d102:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d106:	441a      	add	r2, r3
 800d108:	4613      	mov	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	4299      	cmp	r1, r3
 800d110:	dd0b      	ble.n	800d12a <taskComputeRc+0xea>
 800d112:	4b76      	ldr	r3, [pc, #472]	; (800d2ec <taskComputeRc+0x2ac>)
 800d114:	7c9b      	ldrb	r3, [r3, #18]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d107      	bne.n	800d12a <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d11a:	f7ff fc6f 	bl	800c9fc <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d11e:	4b73      	ldr	r3, [pc, #460]	; (800d2ec <taskComputeRc+0x2ac>)
 800d120:	2200      	movs	r2, #0
 800d122:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d124:	2004      	movs	r0, #4
 800d126:	f7f6 ff4f 	bl	8003fc8 <buzzer>
                }
                failsafeEvents++;
 800d12a:	4b73      	ldr	r3, [pc, #460]	; (800d2f8 <taskComputeRc+0x2b8>)
 800d12c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d130:	b29b      	uxth	r3, r3
 800d132:	3301      	adds	r3, #1
 800d134:	b29b      	uxth	r3, r3
 800d136:	b21a      	sxth	r2, r3
 800d138:	4b6f      	ldr	r3, [pc, #444]	; (800d2f8 <taskComputeRc+0x2b8>)
 800d13a:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d13c:	4b69      	ldr	r3, [pc, #420]	; (800d2e4 <taskComputeRc+0x2a4>)
 800d13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d142:	4619      	mov	r1, r3
 800d144:	4b68      	ldr	r3, [pc, #416]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d146:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d14a:	461a      	mov	r2, r3
 800d14c:	4613      	mov	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	4299      	cmp	r1, r3
 800d154:	dd0b      	ble.n	800d16e <taskComputeRc+0x12e>
 800d156:	4b65      	ldr	r3, [pc, #404]	; (800d2ec <taskComputeRc+0x2ac>)
 800d158:	785b      	ldrb	r3, [r3, #1]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d107      	bne.n	800d16e <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d15e:	f7ff fc4d 	bl	800c9fc <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d162:	4b62      	ldr	r3, [pc, #392]	; (800d2ec <taskComputeRc+0x2ac>)
 800d164:	2200      	movs	r2, #0
 800d166:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d168:	2004      	movs	r0, #4
 800d16a:	f7f6 ff2d 	bl	8003fc8 <buzzer>
            }
            failsafeCnt++;
 800d16e:	4b5d      	ldr	r3, [pc, #372]	; (800d2e4 <taskComputeRc+0x2a4>)
 800d170:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d174:	b29b      	uxth	r3, r3
 800d176:	3301      	adds	r3, #1
 800d178:	b29b      	uxth	r3, r3
 800d17a:	b21a      	sxth	r2, r3
 800d17c:	4b59      	ldr	r3, [pc, #356]	; (800d2e4 <taskComputeRc+0x2a4>)
 800d17e:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d180:	2300      	movs	r3, #0
 800d182:	613b      	str	r3, [r7, #16]
 800d184:	e021      	b.n	800d1ca <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d186:	7dfb      	ldrb	r3, [r7, #23]
 800d188:	089b      	lsrs	r3, r3, #2
 800d18a:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d18c:	4a59      	ldr	r2, [pc, #356]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d194:	461a      	mov	r2, r3
 800d196:	4b56      	ldr	r3, [pc, #344]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d198:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d19c:	429a      	cmp	r2, r3
 800d19e:	dd03      	ble.n	800d1a8 <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
 800d1a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1a6:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d1a8:	4a52      	ldr	r2, [pc, #328]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	4b4f      	ldr	r3, [pc, #316]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d1b4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	da03      	bge.n	800d1c4 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
 800d1be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c2:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	613b      	str	r3, [r7, #16]
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	ddda      	ble.n	800d186 <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d1d0:	4b4a      	ldr	r3, [pc, #296]	; (800d2fc <taskComputeRc+0x2bc>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	7dfa      	ldrb	r2, [r7, #23]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d10a      	bne.n	800d1f0 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d1da:	4b49      	ldr	r3, [pc, #292]	; (800d300 <taskComputeRc+0x2c0>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	2bf9      	cmp	r3, #249	; 0xf9
 800d1e0:	d809      	bhi.n	800d1f6 <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d1e2:	4b47      	ldr	r3, [pc, #284]	; (800d300 <taskComputeRc+0x2c0>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	4b45      	ldr	r3, [pc, #276]	; (800d300 <taskComputeRc+0x2c0>)
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	e002      	b.n	800d1f6 <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d1f0:	4b43      	ldr	r3, [pc, #268]	; (800d300 <taskComputeRc+0x2c0>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d1f6:	4a41      	ldr	r2, [pc, #260]	; (800d2fc <taskComputeRc+0x2bc>)
 800d1f8:	7dfb      	ldrb	r3, [r7, #23]
 800d1fa:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d1fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d200:	f7f9 fed2 	bl	8006fa8 <feature>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d01e      	beq.n	800d248 <taskComputeRc+0x208>
 800d20a:	4b3a      	ldr	r3, [pc, #232]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d20c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d210:	461a      	mov	r2, r3
 800d212:	4b37      	ldr	r3, [pc, #220]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d214:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d218:	4619      	mov	r1, r3
 800d21a:	4b35      	ldr	r3, [pc, #212]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d21c:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d220:	1acb      	subs	r3, r1, r3
 800d222:	429a      	cmp	r2, r3
 800d224:	dd10      	ble.n	800d248 <taskComputeRc+0x208>
 800d226:	4b33      	ldr	r3, [pc, #204]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d228:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d22c:	461a      	mov	r2, r3
 800d22e:	4b30      	ldr	r3, [pc, #192]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d230:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d234:	4619      	mov	r1, r3
 800d236:	4b2e      	ldr	r3, [pc, #184]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d238:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d23c:	440b      	add	r3, r1
 800d23e:	429a      	cmp	r2, r3
 800d240:	da02      	bge.n	800d248 <taskComputeRc+0x208>
            isThrottleLow = true;
 800d242:	2301      	movs	r3, #1
 800d244:	72fb      	strb	r3, [r7, #11]
 800d246:	e014      	b.n	800d272 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d248:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d24c:	f7f9 feac 	bl	8006fa8 <feature>
 800d250:	4603      	mov	r3, r0
 800d252:	f083 0301 	eor.w	r3, r3, #1
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00a      	beq.n	800d272 <taskComputeRc+0x232>
 800d25c:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <taskComputeRc+0x2b4>)
 800d25e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d262:	461a      	mov	r2, r3
 800d264:	4b22      	ldr	r3, [pc, #136]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d266:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d26a:	429a      	cmp	r2, r3
 800d26c:	da01      	bge.n	800d272 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d26e:	2301      	movs	r3, #1
 800d270:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d272:	7afb      	ldrb	r3, [r7, #11]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d01c      	beq.n	800d2b2 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d278:	4b22      	ldr	r3, [pc, #136]	; (800d304 <taskComputeRc+0x2c4>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d27e:	4b21      	ldr	r3, [pc, #132]	; (800d304 <taskComputeRc+0x2c4>)
 800d280:	2200      	movs	r2, #0
 800d282:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d284:	4b1f      	ldr	r3, [pc, #124]	; (800d304 <taskComputeRc+0x2c4>)
 800d286:	2200      	movs	r2, #0
 800d288:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d28a:	4b1f      	ldr	r3, [pc, #124]	; (800d308 <taskComputeRc+0x2c8>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d290:	4b1d      	ldr	r3, [pc, #116]	; (800d308 <taskComputeRc+0x2c8>)
 800d292:	2200      	movs	r2, #0
 800d294:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d296:	4b14      	ldr	r3, [pc, #80]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d009      	beq.n	800d2b2 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d29e:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <taskComputeRc+0x29c>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <taskComputeRc+0x272>
 800d2a6:	4b11      	ldr	r3, [pc, #68]	; (800d2ec <taskComputeRc+0x2ac>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d001      	beq.n	800d2b2 <taskComputeRc+0x272>
                    mwArm();
 800d2ae:	f7ff fb61 	bl	800c974 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d2b2:	4b0d      	ldr	r3, [pc, #52]	; (800d2e8 <taskComputeRc+0x2a8>)
 800d2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d02d      	beq.n	800d316 <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d2ba:	4b08      	ldr	r3, [pc, #32]	; (800d2dc <taskComputeRc+0x29c>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d129      	bne.n	800d316 <taskComputeRc+0x2d6>
 800d2c2:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <taskComputeRc+0x2ac>)
 800d2c4:	785b      	ldrb	r3, [r3, #1]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d025      	beq.n	800d316 <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <taskComputeRc+0x2b0>)
 800d2cc:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d01b      	beq.n	800d30c <taskComputeRc+0x2cc>
                    mwDisarm();
 800d2d4:	f7ff fb92 	bl	800c9fc <mwDisarm>
 800d2d8:	e01d      	b.n	800d316 <taskComputeRc+0x2d6>
 800d2da:	bf00      	nop
 800d2dc:	20001a24 	.word	0x20001a24
 800d2e0:	20001a10 	.word	0x20001a10
 800d2e4:	200019b6 	.word	0x200019b6
 800d2e8:	20001120 	.word	0x20001120
 800d2ec:	20001980 	.word	0x20001980
 800d2f0:	20000bb4 	.word	0x20000bb4
 800d2f4:	200019bc 	.word	0x200019bc
 800d2f8:	200019b8 	.word	0x200019b8
 800d2fc:	20001c9c 	.word	0x20001c9c
 800d300:	20001c9d 	.word	0x20001c9d
 800d304:	20001b90 	.word	0x20001b90
 800d308:	20001b9c 	.word	0x20001b9c
                } else if (isThrottleLow) {
 800d30c:	7afb      	ldrb	r3, [r7, #11]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <taskComputeRc+0x2d6>
                    mwDisarm();
 800d312:	f7ff fb73 	bl	800c9fc <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d316:	4b82      	ldr	r3, [pc, #520]	; (800d520 <taskComputeRc+0x4e0>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b14      	cmp	r3, #20
 800d31c:	f040 8131 	bne.w	800d582 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d320:	4b80      	ldr	r3, [pc, #512]	; (800d524 <taskComputeRc+0x4e4>)
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d01c      	beq.n	800d362 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d328:	4b7f      	ldr	r3, [pc, #508]	; (800d528 <taskComputeRc+0x4e8>)
 800d32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d105      	bne.n	800d33c <taskComputeRc+0x2fc>
 800d330:	4b7e      	ldr	r3, [pc, #504]	; (800d52c <taskComputeRc+0x4ec>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b5f      	cmp	r3, #95	; 0x5f
 800d336:	d101      	bne.n	800d33c <taskComputeRc+0x2fc>
                    mwDisarm();
 800d338:	f7ff fb60 	bl	800c9fc <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d33c:	4b7c      	ldr	r3, [pc, #496]	; (800d530 <taskComputeRc+0x4f0>)
 800d33e:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 811d 	beq.w	800d582 <taskComputeRc+0x542>
 800d348:	4b77      	ldr	r3, [pc, #476]	; (800d528 <taskComputeRc+0x4e8>)
 800d34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f040 8118 	bne.w	800d582 <taskComputeRc+0x542>
 800d352:	4b76      	ldr	r3, [pc, #472]	; (800d52c <taskComputeRc+0x4ec>)
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	2b7d      	cmp	r3, #125	; 0x7d
 800d358:	f040 8113 	bne.w	800d582 <taskComputeRc+0x542>
                    mwDisarm();
 800d35c:	f7ff fb4e 	bl	800c9fc <mwDisarm>
 800d360:	e10f      	b.n	800d582 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d366:	4b71      	ldr	r3, [pc, #452]	; (800d52c <taskComputeRc+0x4ec>)
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	2b57      	cmp	r3, #87	; 0x57
 800d36c:	d122      	bne.n	800d3b4 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d36e:	4b71      	ldr	r3, [pc, #452]	; (800d534 <taskComputeRc+0x4f4>)
 800d370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d374:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d376:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d37a:	f7f9 fe15 	bl	8006fa8 <feature>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d384:	f7fb fc0c 	bl	8008ba0 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d388:	2004      	movs	r0, #4
 800d38a:	f7f9 fdc5 	bl	8006f18 <sensors>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d394:	4b68      	ldr	r3, [pc, #416]	; (800d538 <taskComputeRc+0x4f8>)
 800d396:	220a      	movs	r2, #10
 800d398:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d39a:	2008      	movs	r0, #8
 800d39c:	f7f9 fdbc 	bl	8006f18 <sensors>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f083 0301 	eor.w	r3, r3, #1
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d032      	beq.n	800d412 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d3ac:	4b63      	ldr	r3, [pc, #396]	; (800d53c <taskComputeRc+0x4fc>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	801a      	strh	r2, [r3, #0]
 800d3b2:	e02e      	b.n	800d412 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d3b4:	2004      	movs	r0, #4
 800d3b6:	f7f9 fdf7 	bl	8006fa8 <feature>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d028      	beq.n	800d412 <taskComputeRc+0x3d2>
 800d3c0:	4b5a      	ldr	r3, [pc, #360]	; (800d52c <taskComputeRc+0x4ec>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b5a      	cmp	r3, #90	; 0x5a
 800d3c6:	d124      	bne.n	800d412 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d3c8:	4b5d      	ldr	r3, [pc, #372]	; (800d540 <taskComputeRc+0x500>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d006      	beq.n	800d3de <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d3d0:	4b5b      	ldr	r3, [pc, #364]	; (800d540 <taskComputeRc+0x500>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d3d6:	4b5b      	ldr	r3, [pc, #364]	; (800d544 <taskComputeRc+0x504>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	701a      	strb	r2, [r3, #0]
 800d3dc:	e019      	b.n	800d412 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d3de:	4b5a      	ldr	r3, [pc, #360]	; (800d548 <taskComputeRc+0x508>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	bf14      	ite	ne
 800d3e6:	2301      	movne	r3, #1
 800d3e8:	2300      	moveq	r3, #0
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	f083 0301 	eor.w	r3, r3, #1
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	4b53      	ldr	r3, [pc, #332]	; (800d548 <taskComputeRc+0x508>)
 800d3fa:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d3fc:	4b52      	ldr	r3, [pc, #328]	; (800d548 <taskComputeRc+0x508>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d003      	beq.n	800d40c <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d404:	200a      	movs	r0, #10
 800d406:	f7f6 fddf 	bl	8003fc8 <buzzer>
 800d40a:	e002      	b.n	800d412 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d40c:	200b      	movs	r0, #11
 800d40e:	f7f6 fddb 	bl	8003fc8 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d412:	4b46      	ldr	r3, [pc, #280]	; (800d52c <taskComputeRc+0x4ec>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b5d      	cmp	r3, #93	; 0x5d
 800d418:	d102      	bne.n	800d420 <taskComputeRc+0x3e0>
                    i = 1;
 800d41a:	2301      	movs	r3, #1
 800d41c:	613b      	str	r3, [r7, #16]
 800d41e:	e00c      	b.n	800d43a <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d420:	4b42      	ldr	r3, [pc, #264]	; (800d52c <taskComputeRc+0x4ec>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b5b      	cmp	r3, #91	; 0x5b
 800d426:	d102      	bne.n	800d42e <taskComputeRc+0x3ee>
                    i = 2;
 800d428:	2302      	movs	r3, #2
 800d42a:	613b      	str	r3, [r7, #16]
 800d42c:	e005      	b.n	800d43a <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d42e:	4b3f      	ldr	r3, [pc, #252]	; (800d52c <taskComputeRc+0x4ec>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	2b5e      	cmp	r3, #94	; 0x5e
 800d434:	d101      	bne.n	800d43a <taskComputeRc+0x3fa>
                    i = 3;
 800d436:	2303      	movs	r3, #3
 800d438:	613b      	str	r3, [r7, #16]
                if (i) {
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d011      	beq.n	800d464 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	3b01      	subs	r3, #1
 800d446:	b2da      	uxtb	r2, r3
 800d448:	4b39      	ldr	r3, [pc, #228]	; (800d530 <taskComputeRc+0x4f0>)
 800d44a:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d44e:	2100      	movs	r1, #0
 800d450:	2000      	movs	r0, #0
 800d452:	f7f9 f9c7 	bl	80067e4 <writeEEPROM>
                    blinkLED(2, 40, i);
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	461a      	mov	r2, r3
 800d45c:	2128      	movs	r1, #40	; 0x28
 800d45e:	2002      	movs	r0, #2
 800d460:	f7fe fda0 	bl	800bfa4 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d464:	4b30      	ldr	r3, [pc, #192]	; (800d528 <taskComputeRc+0x4e8>)
 800d466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d106      	bne.n	800d47a <taskComputeRc+0x43a>
 800d46c:	4b2f      	ldr	r3, [pc, #188]	; (800d52c <taskComputeRc+0x4ec>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b6f      	cmp	r3, #111	; 0x6f
 800d472:	d102      	bne.n	800d47a <taskComputeRc+0x43a>
                    mwArm();
 800d474:	f7ff fa7e 	bl	800c974 <mwArm>
 800d478:	e01f      	b.n	800d4ba <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d47a:	4b2d      	ldr	r3, [pc, #180]	; (800d530 <taskComputeRc+0x4f0>)
 800d47c:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00a      	beq.n	800d49a <taskComputeRc+0x45a>
 800d484:	4b28      	ldr	r3, [pc, #160]	; (800d528 <taskComputeRc+0x4e8>)
 800d486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d106      	bne.n	800d49a <taskComputeRc+0x45a>
 800d48c:	4b27      	ldr	r3, [pc, #156]	; (800d52c <taskComputeRc+0x4ec>)
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	2b7e      	cmp	r3, #126	; 0x7e
 800d492:	d102      	bne.n	800d49a <taskComputeRc+0x45a>
                    mwArm();
 800d494:	f7ff fa6e 	bl	800c974 <mwArm>
 800d498:	e00f      	b.n	800d4ba <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d49a:	4b24      	ldr	r3, [pc, #144]	; (800d52c <taskComputeRc+0x4ec>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b97      	cmp	r3, #151	; 0x97
 800d4a0:	d104      	bne.n	800d4ac <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d4a2:	4b2a      	ldr	r3, [pc, #168]	; (800d54c <taskComputeRc+0x50c>)
 800d4a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d4a8:	801a      	strh	r2, [r3, #0]
 800d4aa:	e006      	b.n	800d4ba <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d4ac:	4b1f      	ldr	r3, [pc, #124]	; (800d52c <taskComputeRc+0x4ec>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2ba7      	cmp	r3, #167	; 0xa7
 800d4b2:	d102      	bne.n	800d4ba <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d4b4:	4b1b      	ldr	r3, [pc, #108]	; (800d524 <taskComputeRc+0x4e4>)
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d4be:	4b1b      	ldr	r3, [pc, #108]	; (800d52c <taskComputeRc+0x4ec>)
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2bbb      	cmp	r3, #187	; 0xbb
 800d4c4:	d10b      	bne.n	800d4de <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d4c6:	4b18      	ldr	r3, [pc, #96]	; (800d528 <taskComputeRc+0x4e8>)
 800d4c8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	3302      	adds	r3, #2
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	b21a      	sxth	r2, r3
 800d4d4:	4b14      	ldr	r3, [pc, #80]	; (800d528 <taskComputeRc+0x4e8>)
 800d4d6:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	613b      	str	r3, [r7, #16]
 800d4dc:	e047      	b.n	800d56e <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d4de:	4b13      	ldr	r3, [pc, #76]	; (800d52c <taskComputeRc+0x4ec>)
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2bb7      	cmp	r3, #183	; 0xb7
 800d4e4:	d10b      	bne.n	800d4fe <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d4e6:	4b10      	ldr	r3, [pc, #64]	; (800d528 <taskComputeRc+0x4e8>)
 800d4e8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	3b02      	subs	r3, #2
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	b21a      	sxth	r2, r3
 800d4f4:	4b0c      	ldr	r3, [pc, #48]	; (800d528 <taskComputeRc+0x4e8>)
 800d4f6:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	613b      	str	r3, [r7, #16]
 800d4fc:	e037      	b.n	800d56e <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d4fe:	4b0b      	ldr	r3, [pc, #44]	; (800d52c <taskComputeRc+0x4ec>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2bbe      	cmp	r3, #190	; 0xbe
 800d504:	d124      	bne.n	800d550 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d506:	4b08      	ldr	r3, [pc, #32]	; (800d528 <taskComputeRc+0x4e8>)
 800d508:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	3302      	adds	r3, #2
 800d510:	b29b      	uxth	r3, r3
 800d512:	b21a      	sxth	r2, r3
 800d514:	4b04      	ldr	r3, [pc, #16]	; (800d528 <taskComputeRc+0x4e8>)
 800d516:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d518:	2301      	movs	r3, #1
 800d51a:	613b      	str	r3, [r7, #16]
 800d51c:	e027      	b.n	800d56e <taskComputeRc+0x52e>
 800d51e:	bf00      	nop
 800d520:	20001c9d 	.word	0x20001c9d
 800d524:	20001980 	.word	0x20001980
 800d528:	20001120 	.word	0x20001120
 800d52c:	20001c9c 	.word	0x20001c9c
 800d530:	20000bb4 	.word	0x20000bb4
 800d534:	20001caa 	.word	0x20001caa
 800d538:	20001ca8 	.word	0x20001ca8
 800d53c:	20001cac 	.word	0x20001cac
 800d540:	20001b21 	.word	0x20001b21
 800d544:	20001b22 	.word	0x20001b22
 800d548:	20001b20 	.word	0x20001b20
 800d54c:	20001ca6 	.word	0x20001ca6
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d550:	4b9e      	ldr	r3, [pc, #632]	; (800d7cc <taskComputeRc+0x78c>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2bbd      	cmp	r3, #189	; 0xbd
 800d556:	d10a      	bne.n	800d56e <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d558:	4b9d      	ldr	r3, [pc, #628]	; (800d7d0 <taskComputeRc+0x790>)
 800d55a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d55e:	b29b      	uxth	r3, r3
 800d560:	3b02      	subs	r3, #2
 800d562:	b29b      	uxth	r3, r3
 800d564:	b21a      	sxth	r2, r3
 800d566:	4b9a      	ldr	r3, [pc, #616]	; (800d7d0 <taskComputeRc+0x790>)
 800d568:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d56a:	2301      	movs	r3, #1
 800d56c:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d574:	2101      	movs	r1, #1
 800d576:	2001      	movs	r0, #1
 800d578:	f7f9 f934 	bl	80067e4 <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d57c:	4b95      	ldr	r3, [pc, #596]	; (800d7d4 <taskComputeRc+0x794>)
 800d57e:	2200      	movs	r2, #0
 800d580:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d582:	2004      	movs	r0, #4
 800d584:	f7f9 fd10 	bl	8006fa8 <feature>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d041      	beq.n	800d612 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d58e:	4b92      	ldr	r3, [pc, #584]	; (800d7d8 <taskComputeRc+0x798>)
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d016      	beq.n	800d5c4 <taskComputeRc+0x584>
 800d596:	4b91      	ldr	r3, [pc, #580]	; (800d7dc <taskComputeRc+0x79c>)
 800d598:	785b      	ldrb	r3, [r3, #1]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d012      	beq.n	800d5c4 <taskComputeRc+0x584>
 800d59e:	4b90      	ldr	r3, [pc, #576]	; (800d7e0 <taskComputeRc+0x7a0>)
 800d5a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	4b8f      	ldr	r3, [pc, #572]	; (800d7e4 <taskComputeRc+0x7a4>)
 800d5a8:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	dd09      	ble.n	800d5c4 <taskComputeRc+0x584>
 800d5b0:	4b8d      	ldr	r3, [pc, #564]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d105      	bne.n	800d5c4 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d5b8:	4b8c      	ldr	r3, [pc, #560]	; (800d7ec <taskComputeRc+0x7ac>)
 800d5ba:	2232      	movs	r2, #50	; 0x32
 800d5bc:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d5be:	4b86      	ldr	r3, [pc, #536]	; (800d7d8 <taskComputeRc+0x798>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d5c4:	4b88      	ldr	r3, [pc, #544]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d5c6:	7c5b      	ldrb	r3, [r3, #17]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d014      	beq.n	800d5f6 <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d5cc:	4b88      	ldr	r3, [pc, #544]	; (800d7f0 <taskComputeRc+0x7b0>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f083 0301 	eor.w	r3, r3, #1
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d009      	beq.n	800d5ee <taskComputeRc+0x5ae>
 800d5da:	4b86      	ldr	r3, [pc, #536]	; (800d7f4 <taskComputeRc+0x7b4>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	f083 0301 	eor.w	r3, r3, #1
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d5e8:	4b80      	ldr	r3, [pc, #512]	; (800d7ec <taskComputeRc+0x7ac>)
 800d5ea:	2232      	movs	r2, #50	; 0x32
 800d5ec:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d5ee:	4b80      	ldr	r3, [pc, #512]	; (800d7f0 <taskComputeRc+0x7b0>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	701a      	strb	r2, [r3, #0]
 800d5f4:	e00d      	b.n	800d612 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d5f6:	4b7f      	ldr	r3, [pc, #508]	; (800d7f4 <taskComputeRc+0x7b4>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <taskComputeRc+0x5d2>
 800d5fe:	4b77      	ldr	r3, [pc, #476]	; (800d7dc <taskComputeRc+0x79c>)
 800d600:	785b      	ldrb	r3, [r3, #1]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d606:	4b7b      	ldr	r3, [pc, #492]	; (800d7f4 <taskComputeRc+0x7b4>)
 800d608:	2200      	movs	r2, #0
 800d60a:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d60c:	4b7a      	ldr	r3, [pc, #488]	; (800d7f8 <taskComputeRc+0x7b8>)
 800d60e:	2201      	movs	r2, #1
 800d610:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d612:	2300      	movs	r3, #0
 800d614:	613b      	str	r3, [r7, #16]
 800d616:	e04a      	b.n	800d6ae <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	3304      	adds	r3, #4
 800d61c:	4a70      	ldr	r2, [pc, #448]	; (800d7e0 <taskComputeRc+0x7a0>)
 800d61e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d622:	f240 5213 	movw	r2, #1299	; 0x513
 800d626:	4293      	cmp	r3, r2
 800d628:	bfd4      	ite	le
 800d62a:	2301      	movle	r3, #1
 800d62c:	2300      	movgt	r3, #0
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	4619      	mov	r1, r3
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	4613      	mov	r3, r2
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	4413      	add	r3, r2
 800d63a:	4099      	lsls	r1, r3
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	3304      	adds	r3, #4
 800d640:	4a67      	ldr	r2, [pc, #412]	; (800d7e0 <taskComputeRc+0x7a0>)
 800d642:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d646:	f240 5214 	movw	r2, #1300	; 0x514
 800d64a:	4293      	cmp	r3, r2
 800d64c:	dd0a      	ble.n	800d664 <taskComputeRc+0x624>
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	3304      	adds	r3, #4
 800d652:	4a63      	ldr	r2, [pc, #396]	; (800d7e0 <taskComputeRc+0x7a0>)
 800d654:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d658:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d65c:	4293      	cmp	r3, r2
 800d65e:	dc01      	bgt.n	800d664 <taskComputeRc+0x624>
 800d660:	2001      	movs	r0, #1
 800d662:	e000      	b.n	800d666 <taskComputeRc+0x626>
 800d664:	2000      	movs	r0, #0
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	4613      	mov	r3, r2
 800d66a:	005b      	lsls	r3, r3, #1
 800d66c:	4413      	add	r3, r2
 800d66e:	3301      	adds	r3, #1
 800d670:	fa00 f303 	lsl.w	r3, r0, r3
 800d674:	4319      	orrs	r1, r3
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	3304      	adds	r3, #4
 800d67a:	4a59      	ldr	r2, [pc, #356]	; (800d7e0 <taskComputeRc+0x7a0>)
 800d67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d680:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d684:	4293      	cmp	r3, r2
 800d686:	bfcc      	ite	gt
 800d688:	2301      	movgt	r3, #1
 800d68a:	2300      	movle	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	4618      	mov	r0, r3
 800d690:	693a      	ldr	r2, [r7, #16]
 800d692:	4613      	mov	r3, r2
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	4413      	add	r3, r2
 800d698:	3302      	adds	r3, #2
 800d69a:	fa00 f303 	lsl.w	r3, r0, r3
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	613b      	str	r3, [r7, #16]
 800d6ae:	4b53      	ldr	r3, [pc, #332]	; (800d7fc <taskComputeRc+0x7bc>)
 800d6b0:	7d1b      	ldrb	r3, [r3, #20]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	dbae      	blt.n	800d618 <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	613b      	str	r3, [r7, #16]
 800d6be:	e015      	b.n	800d6ec <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d6c0:	4a43      	ldr	r2, [pc, #268]	; (800d7d0 <taskComputeRc+0x790>)
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	3312      	adds	r3, #18
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	bf14      	ite	ne
 800d6d4:	2301      	movne	r3, #1
 800d6d6:	2300      	moveq	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4a42      	ldr	r2, [pc, #264]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	460a      	mov	r2, r1
 800d6e4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	613b      	str	r3, [r7, #16]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2b18      	cmp	r3, #24
 800d6f0:	dde6      	ble.n	800d6c0 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d6f2:	4b3d      	ldr	r3, [pc, #244]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d6f4:	7e1a      	ldrb	r2, [r3, #24]
 800d6f6:	4b39      	ldr	r3, [pc, #228]	; (800d7dc <taskComputeRc+0x79c>)
 800d6f8:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d6fa:	4b38      	ldr	r3, [pc, #224]	; (800d7dc <taskComputeRc+0x79c>)
 800d6fc:	7d1b      	ldrb	r3, [r3, #20]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d005      	beq.n	800d70e <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d702:	4b39      	ldr	r3, [pc, #228]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d704:	2201      	movs	r2, #1
 800d706:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d708:	4b37      	ldr	r3, [pc, #220]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d70a:	2201      	movs	r2, #1
 800d70c:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d70e:	4b36      	ldr	r3, [pc, #216]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d710:	785b      	ldrb	r3, [r3, #1]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10c      	bne.n	800d730 <taskComputeRc+0x6f0>
 800d716:	4b3a      	ldr	r3, [pc, #232]	; (800d800 <taskComputeRc+0x7c0>)
 800d718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d71c:	4619      	mov	r1, r3
 800d71e:	4b2c      	ldr	r3, [pc, #176]	; (800d7d0 <taskComputeRc+0x790>)
 800d720:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d724:	461a      	mov	r2, r3
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	4299      	cmp	r1, r3
 800d72e:	dd30      	ble.n	800d792 <taskComputeRc+0x752>
 800d730:	2002      	movs	r0, #2
 800d732:	f7f9 fbf1 	bl	8006f18 <sensors>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d02a      	beq.n	800d792 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d73c:	4b27      	ldr	r3, [pc, #156]	; (800d7dc <taskComputeRc+0x79c>)
 800d73e:	78db      	ldrb	r3, [r3, #3]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d108      	bne.n	800d756 <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d744:	4b2f      	ldr	r3, [pc, #188]	; (800d804 <taskComputeRc+0x7c4>)
 800d746:	2200      	movs	r2, #0
 800d748:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d74a:	4b2e      	ldr	r3, [pc, #184]	; (800d804 <taskComputeRc+0x7c4>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d750:	4b22      	ldr	r3, [pc, #136]	; (800d7dc <taskComputeRc+0x79c>)
 800d752:	2201      	movs	r2, #1
 800d754:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d756:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d75a:	f7f9 fc25 	bl	8006fa8 <feature>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d01d      	beq.n	800d7a0 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d764:	4b26      	ldr	r3, [pc, #152]	; (800d800 <taskComputeRc+0x7c0>)
 800d766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d76a:	4619      	mov	r1, r3
 800d76c:	4b18      	ldr	r3, [pc, #96]	; (800d7d0 <taskComputeRc+0x790>)
 800d76e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d772:	461a      	mov	r2, r3
 800d774:	4613      	mov	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	4413      	add	r3, r2
 800d77a:	4299      	cmp	r1, r3
 800d77c:	dd10      	ble.n	800d7a0 <taskComputeRc+0x760>
 800d77e:	2020      	movs	r0, #32
 800d780:	f7f9 fbca 	bl	8006f18 <sensors>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d78a:	4b14      	ldr	r3, [pc, #80]	; (800d7dc <taskComputeRc+0x79c>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d790:	e006      	b.n	800d7a0 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d792:	4b12      	ldr	r3, [pc, #72]	; (800d7dc <taskComputeRc+0x79c>)
 800d794:	2200      	movs	r2, #0
 800d796:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d798:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <taskComputeRc+0x79c>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	749a      	strb	r2, [r3, #18]
 800d79e:	e000      	b.n	800d7a2 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7a0:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d7a2:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <taskComputeRc+0x7a8>)
 800d7a4:	789b      	ldrb	r3, [r3, #2]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d02e      	beq.n	800d808 <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d7aa:	4b0c      	ldr	r3, [pc, #48]	; (800d7dc <taskComputeRc+0x79c>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <taskComputeRc+0x79c>)
 800d7b2:	791b      	ldrb	r3, [r3, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d12a      	bne.n	800d80e <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d7b8:	4b12      	ldr	r3, [pc, #72]	; (800d804 <taskComputeRc+0x7c4>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d7be:	4b11      	ldr	r3, [pc, #68]	; (800d804 <taskComputeRc+0x7c4>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d7c4:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <taskComputeRc+0x79c>)
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	711a      	strb	r2, [r3, #4]
 800d7ca:	e020      	b.n	800d80e <taskComputeRc+0x7ce>
 800d7cc:	20001c9c 	.word	0x20001c9c
 800d7d0:	20001120 	.word	0x20001120
 800d7d4:	20001c9d 	.word	0x20001c9d
 800d7d8:	20001b20 	.word	0x20001b20
 800d7dc:	20001980 	.word	0x20001980
 800d7e0:	200019bc 	.word	0x200019bc
 800d7e4:	20000bb4 	.word	0x20000bb4
 800d7e8:	20001a24 	.word	0x20001a24
 800d7ec:	20001b24 	.word	0x20001b24
 800d7f0:	20001b23 	.word	0x20001b23
 800d7f4:	20001b21 	.word	0x20001b21
 800d7f8:	20001b22 	.word	0x20001b22
 800d7fc:	20000afc 	.word	0x20000afc
 800d800:	200019b6 	.word	0x200019b6
 800d804:	20001b9c 	.word	0x20001b9c
            }
        } else {
            f.HORIZON_MODE = 0;
 800d808:	4b9c      	ldr	r3, [pc, #624]	; (800da7c <taskComputeRc+0xa3c>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d80e:	4b9c      	ldr	r3, [pc, #624]	; (800da80 <taskComputeRc+0xa40>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d816:	4b99      	ldr	r3, [pc, #612]	; (800da7c <taskComputeRc+0xa3c>)
 800d818:	2201      	movs	r2, #1
 800d81a:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d81c:	4b97      	ldr	r3, [pc, #604]	; (800da7c <taskComputeRc+0xa3c>)
 800d81e:	78db      	ldrb	r3, [r3, #3]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d103      	bne.n	800d82c <taskComputeRc+0x7ec>
 800d824:	4b95      	ldr	r3, [pc, #596]	; (800da7c <taskComputeRc+0xa3c>)
 800d826:	791b      	ldrb	r3, [r3, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d003      	beq.n	800d834 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d82c:	2001      	movs	r0, #1
 800d82e:	f7f4 fc21 	bl	8002074 <actLed1State>
 800d832:	e002      	b.n	800d83a <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d834:	2000      	movs	r0, #0
 800d836:	f7f4 fc1d 	bl	8002074 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d83a:	2004      	movs	r0, #4
 800d83c:	f7f9 fb6c 	bl	8006f18 <sensors>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d033      	beq.n	800d8ae <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d846:	4b8e      	ldr	r3, [pc, #568]	; (800da80 <taskComputeRc+0xa40>)
 800d848:	78db      	ldrb	r3, [r3, #3]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d016      	beq.n	800d87c <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d84e:	4b8b      	ldr	r3, [pc, #556]	; (800da7c <taskComputeRc+0xa3c>)
 800d850:	799b      	ldrb	r3, [r3, #6]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d115      	bne.n	800d882 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d856:	4b89      	ldr	r3, [pc, #548]	; (800da7c <taskComputeRc+0xa3c>)
 800d858:	2201      	movs	r2, #1
 800d85a:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d85c:	4b89      	ldr	r3, [pc, #548]	; (800da84 <taskComputeRc+0xa44>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a89      	ldr	r2, [pc, #548]	; (800da88 <taskComputeRc+0xa48>)
 800d862:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d864:	4b89      	ldr	r3, [pc, #548]	; (800da8c <taskComputeRc+0xa4c>)
 800d866:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d86a:	4b89      	ldr	r3, [pc, #548]	; (800da90 <taskComputeRc+0xa50>)
 800d86c:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d86e:	4b89      	ldr	r3, [pc, #548]	; (800da94 <taskComputeRc+0xa54>)
 800d870:	2200      	movs	r2, #0
 800d872:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d874:	4b88      	ldr	r3, [pc, #544]	; (800da98 <taskComputeRc+0xa58>)
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	e002      	b.n	800d882 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d87c:	4b7f      	ldr	r3, [pc, #508]	; (800da7c <taskComputeRc+0xa3c>)
 800d87e:	2200      	movs	r2, #0
 800d880:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d882:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d886:	f7f9 fb8f 	bl	8006fa8 <feature>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00e      	beq.n	800d8ae <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d890:	4b7b      	ldr	r3, [pc, #492]	; (800da80 <taskComputeRc+0xa40>)
 800d892:	791b      	ldrb	r3, [r3, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d007      	beq.n	800d8a8 <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d898:	4b78      	ldr	r3, [pc, #480]	; (800da7c <taskComputeRc+0xa3c>)
 800d89a:	7bdb      	ldrb	r3, [r3, #15]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d106      	bne.n	800d8ae <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d8a0:	4b76      	ldr	r3, [pc, #472]	; (800da7c <taskComputeRc+0xa3c>)
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	73da      	strb	r2, [r3, #15]
 800d8a6:	e002      	b.n	800d8ae <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d8a8:	4b74      	ldr	r3, [pc, #464]	; (800da7c <taskComputeRc+0xa3c>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d8ae:	2002      	movs	r0, #2
 800d8b0:	f7f9 fb32 	bl	8006f18 <sensors>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d105      	bne.n	800d8c6 <taskComputeRc+0x886>
 800d8ba:	2008      	movs	r0, #8
 800d8bc:	f7f9 fb2c 	bl	8006f18 <sensors>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d02b      	beq.n	800d91e <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d8c6:	4b6e      	ldr	r3, [pc, #440]	; (800da80 <taskComputeRc+0xa40>)
 800d8c8:	795b      	ldrb	r3, [r3, #5]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00c      	beq.n	800d8e8 <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d8ce:	4b6b      	ldr	r3, [pc, #428]	; (800da7c <taskComputeRc+0xa3c>)
 800d8d0:	795b      	ldrb	r3, [r3, #5]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10b      	bne.n	800d8ee <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d8d6:	4b69      	ldr	r3, [pc, #420]	; (800da7c <taskComputeRc+0xa3c>)
 800d8d8:	2201      	movs	r2, #1
 800d8da:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d8dc:	4b6f      	ldr	r3, [pc, #444]	; (800da9c <taskComputeRc+0xa5c>)
 800d8de:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d8e2:	4b6f      	ldr	r3, [pc, #444]	; (800daa0 <taskComputeRc+0xa60>)
 800d8e4:	801a      	strh	r2, [r3, #0]
 800d8e6:	e002      	b.n	800d8ee <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d8e8:	4b64      	ldr	r3, [pc, #400]	; (800da7c <taskComputeRc+0xa3c>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d8ee:	4b64      	ldr	r3, [pc, #400]	; (800da80 <taskComputeRc+0xa40>)
 800d8f0:	799b      	ldrb	r3, [r3, #6]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d8f6:	4b61      	ldr	r3, [pc, #388]	; (800da7c <taskComputeRc+0xa3c>)
 800d8f8:	7a5b      	ldrb	r3, [r3, #9]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d106      	bne.n	800d90c <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d8fe:	4b5f      	ldr	r3, [pc, #380]	; (800da7c <taskComputeRc+0xa3c>)
 800d900:	2201      	movs	r2, #1
 800d902:	725a      	strb	r2, [r3, #9]
 800d904:	e002      	b.n	800d90c <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d906:	4b5d      	ldr	r3, [pc, #372]	; (800da7c <taskComputeRc+0xa3c>)
 800d908:	2200      	movs	r2, #0
 800d90a:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d90c:	4b5c      	ldr	r3, [pc, #368]	; (800da80 <taskComputeRc+0xa40>)
 800d90e:	79db      	ldrb	r3, [r3, #7]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d914:	4b61      	ldr	r3, [pc, #388]	; (800da9c <taskComputeRc+0xa5c>)
 800d916:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d91a:	4b62      	ldr	r3, [pc, #392]	; (800daa4 <taskComputeRc+0xa64>)
 800d91c:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d91e:	2020      	movs	r0, #32
 800d920:	f7f9 fafa 	bl	8006f18 <sensors>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 809c 	beq.w	800da64 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d92c:	4b53      	ldr	r3, [pc, #332]	; (800da7c <taskComputeRc+0xa3c>)
 800d92e:	7adb      	ldrb	r3, [r3, #11]
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 808e 	beq.w	800da52 <taskComputeRc+0xa12>
 800d936:	4b5c      	ldr	r3, [pc, #368]	; (800daa8 <taskComputeRc+0xa68>)
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b04      	cmp	r3, #4
 800d93c:	f240 8089 	bls.w	800da52 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d940:	4b5a      	ldr	r3, [pc, #360]	; (800daac <taskComputeRc+0xa6c>)
 800d942:	f993 3000 	ldrsb.w	r3, [r3]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <taskComputeRc+0x920>
 800d94a:	4b4c      	ldr	r3, [pc, #304]	; (800da7c <taskComputeRc+0xa3c>)
 800d94c:	791b      	ldrb	r3, [r3, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <taskComputeRc+0x920>
 800d952:	4b4a      	ldr	r3, [pc, #296]	; (800da7c <taskComputeRc+0xa3c>)
 800d954:	78db      	ldrb	r3, [r3, #3]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d102      	bne.n	800d960 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d95a:	4b48      	ldr	r3, [pc, #288]	; (800da7c <taskComputeRc+0xa3c>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d960:	4b47      	ldr	r3, [pc, #284]	; (800da80 <taskComputeRc+0xa40>)
 800d962:	7a9b      	ldrb	r3, [r3, #10]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d103      	bne.n	800d970 <taskComputeRc+0x930>
 800d968:	4b44      	ldr	r3, [pc, #272]	; (800da7c <taskComputeRc+0xa3c>)
 800d96a:	7c9b      	ldrb	r3, [r3, #18]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01c      	beq.n	800d9aa <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d970:	4b42      	ldr	r3, [pc, #264]	; (800da7c <taskComputeRc+0xa3c>)
 800d972:	79db      	ldrb	r3, [r3, #7]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d168      	bne.n	800da4a <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d978:	4b40      	ldr	r3, [pc, #256]	; (800da7c <taskComputeRc+0xa3c>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d97e:	4b3f      	ldr	r3, [pc, #252]	; (800da7c <taskComputeRc+0xa3c>)
 800d980:	2200      	movs	r2, #0
 800d982:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d984:	4b4a      	ldr	r3, [pc, #296]	; (800dab0 <taskComputeRc+0xa70>)
 800d986:	2200      	movs	r2, #0
 800d988:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d98a:	494a      	ldr	r1, [pc, #296]	; (800dab4 <taskComputeRc+0xa74>)
 800d98c:	484a      	ldr	r0, [pc, #296]	; (800dab8 <taskComputeRc+0xa78>)
 800d98e:	f7fb fad7 	bl	8008f40 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d992:	4b46      	ldr	r3, [pc, #280]	; (800daac <taskComputeRc+0xa6c>)
 800d994:	2202      	movs	r2, #2
 800d996:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800d998:	4b48      	ldr	r3, [pc, #288]	; (800dabc <taskComputeRc+0xa7c>)
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	461a      	mov	r2, r3
 800d99e:	4b48      	ldr	r3, [pc, #288]	; (800dac0 <taskComputeRc+0xa80>)
 800d9a0:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800d9a2:	4b36      	ldr	r3, [pc, #216]	; (800da7c <taskComputeRc+0xa3c>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800d9a8:	e04f      	b.n	800da4a <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800d9aa:	4b34      	ldr	r3, [pc, #208]	; (800da7c <taskComputeRc+0xa3c>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800d9b0:	4b33      	ldr	r3, [pc, #204]	; (800da80 <taskComputeRc+0xa40>)
 800d9b2:	7adb      	ldrb	r3, [r3, #11]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d039      	beq.n	800da2c <taskComputeRc+0x9ec>
 800d9b8:	4b34      	ldr	r3, [pc, #208]	; (800da8c <taskComputeRc+0xa4c>)
 800d9ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfb8      	it	lt
 800d9c2:	425b      	neglt	r3, r3
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	4b3f      	ldr	r3, [pc, #252]	; (800dac4 <taskComputeRc+0xa84>)
 800d9c8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d22d      	bcs.n	800da2c <taskComputeRc+0x9ec>
 800d9d0:	4b2e      	ldr	r3, [pc, #184]	; (800da8c <taskComputeRc+0xa4c>)
 800d9d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	bfb8      	it	lt
 800d9da:	425b      	neglt	r3, r3
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	4b39      	ldr	r3, [pc, #228]	; (800dac4 <taskComputeRc+0xa84>)
 800d9e0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d221      	bcs.n	800da2c <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800d9e8:	4b24      	ldr	r3, [pc, #144]	; (800da7c <taskComputeRc+0xa3c>)
 800d9ea:	7a1b      	ldrb	r3, [r3, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d12c      	bne.n	800da4a <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800d9f0:	4b22      	ldr	r3, [pc, #136]	; (800da7c <taskComputeRc+0xa3c>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800d9f6:	4b2e      	ldr	r3, [pc, #184]	; (800dab0 <taskComputeRc+0xa70>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800d9fc:	4b32      	ldr	r3, [pc, #200]	; (800dac8 <taskComputeRc+0xa88>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a2f      	ldr	r2, [pc, #188]	; (800dac0 <taskComputeRc+0xa80>)
 800da02:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800da04:	4b30      	ldr	r3, [pc, #192]	; (800dac8 <taskComputeRc+0xa88>)
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	4a2d      	ldr	r2, [pc, #180]	; (800dac0 <taskComputeRc+0xa80>)
 800da0a:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800da0c:	492f      	ldr	r1, [pc, #188]	; (800dacc <taskComputeRc+0xa8c>)
 800da0e:	482c      	ldr	r0, [pc, #176]	; (800dac0 <taskComputeRc+0xa80>)
 800da10:	f7fb fa96 	bl	8008f40 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800da14:	4b25      	ldr	r3, [pc, #148]	; (800daac <taskComputeRc+0xa6c>)
 800da16:	2201      	movs	r2, #1
 800da18:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800da1a:	4b28      	ldr	r3, [pc, #160]	; (800dabc <taskComputeRc+0xa7c>)
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	461a      	mov	r2, r3
 800da20:	4b27      	ldr	r3, [pc, #156]	; (800dac0 <taskComputeRc+0xa80>)
 800da22:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800da24:	4b15      	ldr	r3, [pc, #84]	; (800da7c <taskComputeRc+0xa3c>)
 800da26:	2200      	movs	r2, #0
 800da28:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800da2a:	e00e      	b.n	800da4a <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800da2c:	4b13      	ldr	r3, [pc, #76]	; (800da7c <taskComputeRc+0xa3c>)
 800da2e:	2200      	movs	r2, #0
 800da30:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800da32:	4b1f      	ldr	r3, [pc, #124]	; (800dab0 <taskComputeRc+0xa70>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d107      	bne.n	800da4a <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800da3a:	4b1d      	ldr	r3, [pc, #116]	; (800dab0 <taskComputeRc+0xa70>)
 800da3c:	2201      	movs	r2, #1
 800da3e:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800da40:	f7fb f8e2 	bl	8008c08 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800da44:	4b0d      	ldr	r3, [pc, #52]	; (800da7c <taskComputeRc+0xa3c>)
 800da46:	2200      	movs	r2, #0
 800da48:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800da4a:	200c      	movs	r0, #12
 800da4c:	f7f6 fabc 	bl	8003fc8 <buzzer>
 800da50:	e008      	b.n	800da64 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <taskComputeRc+0xa3c>)
 800da54:	2200      	movs	r2, #0
 800da56:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800da58:	4b08      	ldr	r3, [pc, #32]	; (800da7c <taskComputeRc+0xa3c>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800da5e:	4b13      	ldr	r3, [pc, #76]	; (800daac <taskComputeRc+0xa6c>)
 800da60:	2200      	movs	r2, #0
 800da62:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <taskComputeRc+0xa40>)
 800da66:	7b1b      	ldrb	r3, [r3, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d031      	beq.n	800dad0 <taskComputeRc+0xa90>
 800da6c:	4b03      	ldr	r3, [pc, #12]	; (800da7c <taskComputeRc+0xa3c>)
 800da6e:	7c9b      	ldrb	r3, [r3, #18]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d12d      	bne.n	800dad0 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800da74:	4b01      	ldr	r3, [pc, #4]	; (800da7c <taskComputeRc+0xa3c>)
 800da76:	2201      	movs	r2, #1
 800da78:	729a      	strb	r2, [r3, #10]
 800da7a:	e02c      	b.n	800dad6 <taskComputeRc+0xa96>
 800da7c:	20001980 	.word	0x20001980
 800da80:	20001a24 	.word	0x20001a24
 800da84:	2000174c 	.word	0x2000174c
 800da88:	20001754 	.word	0x20001754
 800da8c:	200019e0 	.word	0x200019e0
 800da90:	20001ba4 	.word	0x20001ba4
 800da94:	20001760 	.word	0x20001760
 800da98:	20001750 	.word	0x20001750
 800da9c:	20001cac 	.word	0x20001cac
 800daa0:	20001cae 	.word	0x20001cae
 800daa4:	200019a6 	.word	0x200019a6
 800daa8:	20001a68 	.word	0x20001a68
 800daac:	20001a84 	.word	0x20001a84
 800dab0:	20000058 	.word	0x20000058
 800dab4:	20001a54 	.word	0x20001a54
 800dab8:	20001a50 	.word	0x20001a50
 800dabc:	20001a6e 	.word	0x20001a6e
 800dac0:	20001a5c 	.word	0x20001a5c
 800dac4:	20001120 	.word	0x20001120
 800dac8:	20001a48 	.word	0x20001a48
 800dacc:	20001a60 	.word	0x20001a60
        } else {
            f.PASSTHRU_MODE = 0;
 800dad0:	4b47      	ldr	r3, [pc, #284]	; (800dbf0 <taskComputeRc+0xbb0>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800dad6:	4b46      	ldr	r3, [pc, #280]	; (800dbf0 <taskComputeRc+0xbb0>)
 800dad8:	7c1b      	ldrb	r3, [r3, #16]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d047      	beq.n	800db6e <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800dade:	4b44      	ldr	r3, [pc, #272]	; (800dbf0 <taskComputeRc+0xbb0>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800dae4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dae8:	f7f9 fa5e 	bl	8006fa8 <feature>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d03d      	beq.n	800db6e <taskComputeRc+0xb2e>
 800daf2:	4b40      	ldr	r3, [pc, #256]	; (800dbf4 <taskComputeRc+0xbb4>)
 800daf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf8:	4619      	mov	r1, r3
 800dafa:	4b3f      	ldr	r3, [pc, #252]	; (800dbf8 <taskComputeRc+0xbb8>)
 800dafc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800db00:	461a      	mov	r2, r3
 800db02:	4613      	mov	r3, r2
 800db04:	005b      	lsls	r3, r3, #1
 800db06:	4413      	add	r3, r2
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	4299      	cmp	r1, r3
 800db0c:	dd2f      	ble.n	800db6e <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800db0e:	4b38      	ldr	r3, [pc, #224]	; (800dbf0 <taskComputeRc+0xbb0>)
 800db10:	2200      	movs	r2, #0
 800db12:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800db14:	4b36      	ldr	r3, [pc, #216]	; (800dbf0 <taskComputeRc+0xbb0>)
 800db16:	2201      	movs	r2, #1
 800db18:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800db1a:	2300      	movs	r3, #0
 800db1c:	613b      	str	r3, [r7, #16]
 800db1e:	e00a      	b.n	800db36 <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800db20:	4b36      	ldr	r3, [pc, #216]	; (800dbfc <taskComputeRc+0xbbc>)
 800db22:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db26:	b219      	sxth	r1, r3
 800db28:	4a35      	ldr	r2, [pc, #212]	; (800dc00 <taskComputeRc+0xbc0>)
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	3301      	adds	r3, #1
 800db34:	613b      	str	r3, [r7, #16]
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	ddf1      	ble.n	800db20 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800db3c:	4b2e      	ldr	r3, [pc, #184]	; (800dbf8 <taskComputeRc+0xbb8>)
 800db3e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800db42:	b21a      	sxth	r2, r3
 800db44:	4b2e      	ldr	r3, [pc, #184]	; (800dc00 <taskComputeRc+0xbc0>)
 800db46:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800db48:	4b29      	ldr	r3, [pc, #164]	; (800dbf0 <taskComputeRc+0xbb0>)
 800db4a:	7adb      	ldrb	r3, [r3, #11]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10e      	bne.n	800db6e <taskComputeRc+0xb2e>
 800db50:	4b2c      	ldr	r3, [pc, #176]	; (800dc04 <taskComputeRc+0xbc4>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	2b05      	cmp	r3, #5
 800db56:	d80a      	bhi.n	800db6e <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800db58:	4b25      	ldr	r3, [pc, #148]	; (800dbf0 <taskComputeRc+0xbb0>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800db5e:	4b27      	ldr	r3, [pc, #156]	; (800dbfc <taskComputeRc+0xbbc>)
 800db60:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800db64:	3b32      	subs	r3, #50	; 0x32
 800db66:	b29b      	uxth	r3, r3
 800db68:	b21a      	sxth	r2, r3
 800db6a:	4b25      	ldr	r3, [pc, #148]	; (800dc00 <taskComputeRc+0xbc0>)
 800db6c:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800db6e:	2010      	movs	r0, #16
 800db70:	f7f9 fa1a 	bl	8006fa8 <feature>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d035      	beq.n	800dbe6 <taskComputeRc+0xba6>
 800db7a:	4b1d      	ldr	r3, [pc, #116]	; (800dbf0 <taskComputeRc+0xbb0>)
 800db7c:	785b      	ldrb	r3, [r3, #1]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d031      	beq.n	800dbe6 <taskComputeRc+0xba6>
 800db82:	4b1b      	ldr	r3, [pc, #108]	; (800dbf0 <taskComputeRc+0xbb0>)
 800db84:	7c1b      	ldrb	r3, [r3, #16]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d12d      	bne.n	800dbe6 <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800db8a:	7afb      	ldrb	r3, [r7, #11]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d023      	beq.n	800dbd8 <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800db90:	4b1d      	ldr	r3, [pc, #116]	; (800dc08 <taskComputeRc+0xbc8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10e      	bne.n	800dbb6 <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800db98:	4b18      	ldr	r3, [pc, #96]	; (800dbfc <taskComputeRc+0xbbc>)
 800db9a:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800db9e:	461a      	mov	r2, r3
 800dba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dba4:	fb02 f303 	mul.w	r3, r2, r3
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4b18      	ldr	r3, [pc, #96]	; (800dc0c <taskComputeRc+0xbcc>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4413      	add	r3, r2
 800dbb0:	4a15      	ldr	r2, [pc, #84]	; (800dc08 <taskComputeRc+0xbc8>)
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	e00c      	b.n	800dbd0 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dbb6:	4b14      	ldr	r3, [pc, #80]	; (800dc08 <taskComputeRc+0xbc8>)
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	4b14      	ldr	r3, [pc, #80]	; (800dc0c <taskComputeRc+0xbcc>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d206      	bcs.n	800dbd0 <taskComputeRc+0xb90>
 800dbc2:	4b0e      	ldr	r3, [pc, #56]	; (800dbfc <taskComputeRc+0xbbc>)
 800dbc4:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d001      	beq.n	800dbd0 <taskComputeRc+0xb90>
                    mwDisarm();
 800dbcc:	f7fe ff16 	bl	800c9fc <mwDisarm>
                buzzer(BUZZER_ARMED);
 800dbd0:	2009      	movs	r0, #9
 800dbd2:	f7f6 f9f9 	bl	8003fc8 <buzzer>
 800dbd6:	e006      	b.n	800dbe6 <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800dbd8:	4b0b      	ldr	r3, [pc, #44]	; (800dc08 <taskComputeRc+0xbc8>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <taskComputeRc+0xba6>
                disarmTime = 0;
 800dbe0:	4b09      	ldr	r3, [pc, #36]	; (800dc08 <taskComputeRc+0xbc8>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3718      	adds	r7, #24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20001980 	.word	0x20001980
 800dbf4:	200019b6 	.word	0x200019b6
 800dbf8:	20001120 	.word	0x20001120
 800dbfc:	20000bb4 	.word	0x20000bb4
 800dc00:	200019bc 	.word	0x200019bc
 800dc04:	20001a68 	.word	0x20001a68
 800dc08:	20001b8c 	.word	0x20001b8c
 800dc0c:	200020d8 	.word	0x200020d8

0800dc10 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <taskLoop+0x60>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <taskLoop+0x16>
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d00f      	beq.n	800dc44 <taskLoop+0x34>
 800dc24:	e01f      	b.n	800dc66 <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800dc26:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <taskLoop+0x60>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	4a10      	ldr	r2, [pc, #64]	; (800dc70 <taskLoop+0x60>)
 800dc2e:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dc30:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dc34:	f7f9 f9b8 	bl	8006fa8 <feature>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <taskLoop+0x34>
				gpsThread();
 800dc3e:	f7fa fb43 	bl	80082c8 <gpsThread>
				break;
 800dc42:	e010      	b.n	800dc66 <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dc44:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <taskLoop+0x60>)
 800dc46:	2200      	movs	r2, #0
 800dc48:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dc4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dc4e:	f7f9 f9ab 	bl	8006fa8 <feature>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <taskLoop+0x54>
 800dc58:	4b06      	ldr	r3, [pc, #24]	; (800dc74 <taskLoop+0x64>)
 800dc5a:	7bdb      	ldrb	r3, [r3, #15]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <taskLoop+0x54>
				mwVario();
 800dc60:	f7fe fee6 	bl	800ca30 <mwVario>
			break;
 800dc64:	bf00      	nop
	}
    return 0;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20001ca0 	.word	0x20001ca0
 800dc74:	20001980 	.word	0x20001980

0800dc78 <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
	uint32_t current;
	static uint8_t step = 0;

    (void)p_task;

    switch (step) {
 800dc80:	4ba6      	ldr	r3, [pc, #664]	; (800df1c <taskComputeImu+0x2a4>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b06      	cmp	r3, #6
 800dc86:	f200 82cc 	bhi.w	800e222 <taskComputeImu+0x5aa>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <taskComputeImu+0x18>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dcad 	.word	0x0800dcad
 800dc94:	0800dcad 	.word	0x0800dcad
 800dc98:	0800dcad 	.word	0x0800dcad
 800dc9c:	0800dcad 	.word	0x0800dcad
 800dca0:	0800dcc7 	.word	0x0800dcc7
 800dca4:	0800dcf9 	.word	0x0800dcf9
 800dca8:	0800e209 	.word	0x0800e209
    case 0:
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800dcac:	4b9b      	ldr	r3, [pc, #620]	; (800df1c <taskComputeImu+0x2a4>)
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fb fe1d 	bl	80098f0 <computeIMU>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	4b98      	ldr	r3, [pc, #608]	; (800df1c <taskComputeImu+0x2a4>)
 800dcbc:	701a      	strb	r2, [r3, #0]
		p_task->immediate = TRUE;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	705a      	strb	r2, [r3, #1]
		break;
 800dcc4:	e2ad      	b.n	800e222 <taskComputeImu+0x5aa>

    case 4:
        // Measure loop rate just afer reading the sensors
        current = (*pif_act_timer1us)();
 800dcc6:	4b96      	ldr	r3, [pc, #600]	; (800df20 <taskComputeImu+0x2a8>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4798      	blx	r3
 800dccc:	60b8      	str	r0, [r7, #8]
        cycleTime = (int32_t)(current - previousTime);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	4b94      	ldr	r3, [pc, #592]	; (800df24 <taskComputeImu+0x2ac>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	4b92      	ldr	r3, [pc, #584]	; (800df28 <taskComputeImu+0x2b0>)
 800dcde:	801a      	strh	r2, [r3, #0]
        previousTime = current;
 800dce0:	4a90      	ldr	r2, [pc, #576]	; (800df24 <taskComputeImu+0x2ac>)
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	6013      	str	r3, [r2, #0]
        // non IMU critical, temeperatur
        annexCode();
 800dce6:	f7fe f993 	bl	800c010 <annexCode>
        step = 5;
 800dcea:	4b8c      	ldr	r3, [pc, #560]	; (800df1c <taskComputeImu+0x2a4>)
 800dcec:	2205      	movs	r2, #5
 800dcee:	701a      	strb	r2, [r3, #0]
		p_task->immediate = TRUE;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	705a      	strb	r2, [r3, #1]
    	break;
 800dcf6:	e294      	b.n	800e222 <taskComputeImu+0x5aa>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dcf8:	2008      	movs	r0, #8
 800dcfa:	f7f9 f90d 	bl	8006f18 <sensors>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d057      	beq.n	800ddb4 <taskComputeImu+0x13c>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd04:	4b89      	ldr	r3, [pc, #548]	; (800df2c <taskComputeImu+0x2b4>)
 800dd06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bfb8      	it	lt
 800dd0e:	425b      	neglt	r3, r3
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	2b45      	cmp	r3, #69	; 0x45
 800dd14:	d847      	bhi.n	800dda6 <taskComputeImu+0x12e>
 800dd16:	4b86      	ldr	r3, [pc, #536]	; (800df30 <taskComputeImu+0x2b8>)
 800dd18:	795b      	ldrb	r3, [r3, #5]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d043      	beq.n	800dda6 <taskComputeImu+0x12e>
                int16_t dif = heading - magHold;
 800dd1e:	4b85      	ldr	r3, [pc, #532]	; (800df34 <taskComputeImu+0x2bc>)
 800dd20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	4b84      	ldr	r3, [pc, #528]	; (800df38 <taskComputeImu+0x2c0>)
 800dd28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dd34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd38:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dd3c:	da04      	bge.n	800dd48 <taskComputeImu+0xd0>
                    dif += 360;
 800dd3e:	8afb      	ldrh	r3, [r7, #22]
 800dd40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dd48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd4c:	2bb3      	cmp	r3, #179	; 0xb3
 800dd4e:	dd04      	ble.n	800dd5a <taskComputeImu+0xe2>
                    dif -= 360;
 800dd50:	8afb      	ldrh	r3, [r7, #22]
 800dd52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800dd5a:	4b78      	ldr	r3, [pc, #480]	; (800df3c <taskComputeImu+0x2c4>)
 800dd5c:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800dd60:	425b      	negs	r3, r3
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	8afb      	ldrh	r3, [r7, #22]
 800dd66:	fb12 f303 	smulbb	r3, r2, r3
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dd6e:	4b70      	ldr	r3, [pc, #448]	; (800df30 <taskComputeImu+0x2b8>)
 800dd70:	7b5b      	ldrb	r3, [r3, #13]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d01d      	beq.n	800ddb2 <taskComputeImu+0x13a>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dd76:	4b6d      	ldr	r3, [pc, #436]	; (800df2c <taskComputeImu+0x2b4>)
 800dd78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd82:	496f      	ldr	r1, [pc, #444]	; (800df40 <taskComputeImu+0x2c8>)
 800dd84:	7a49      	ldrb	r1, [r1, #9]
 800dd86:	fb01 f303 	mul.w	r3, r1, r3
 800dd8a:	496e      	ldr	r1, [pc, #440]	; (800df44 <taskComputeImu+0x2cc>)
 800dd8c:	fb81 0103 	smull	r0, r1, r1, r3
 800dd90:	4419      	add	r1, r3
 800dd92:	1109      	asrs	r1, r1, #4
 800dd94:	17db      	asrs	r3, r3, #31
 800dd96:	1a5b      	subs	r3, r3, r1
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	4413      	add	r3, r2
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	b21a      	sxth	r2, r3
 800dda0:	4b62      	ldr	r3, [pc, #392]	; (800df2c <taskComputeImu+0x2b4>)
 800dda2:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dda4:	e005      	b.n	800ddb2 <taskComputeImu+0x13a>
            } else
                magHold = heading;
 800dda6:	4b63      	ldr	r3, [pc, #396]	; (800df34 <taskComputeImu+0x2bc>)
 800dda8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ddac:	4b62      	ldr	r3, [pc, #392]	; (800df38 <taskComputeImu+0x2c0>)
 800ddae:	801a      	strh	r2, [r3, #0]
 800ddb0:	e000      	b.n	800ddb4 <taskComputeImu+0x13c>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800ddb2:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800ddb4:	2004      	movs	r0, #4
 800ddb6:	f7f9 f8af 	bl	8006f18 <sensors>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 80e6 	beq.w	800df8e <taskComputeImu+0x316>
            if (f.BARO_MODE) {
 800ddc2:	4b5b      	ldr	r3, [pc, #364]	; (800df30 <taskComputeImu+0x2b8>)
 800ddc4:	799b      	ldrb	r3, [r3, #6]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 80e1 	beq.w	800df8e <taskComputeImu+0x316>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800ddcc:	4b58      	ldr	r3, [pc, #352]	; (800df30 <taskComputeImu+0x2b8>)
 800ddce:	7c1b      	ldrb	r3, [r3, #16]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f040 80c9 	bne.w	800df68 <taskComputeImu+0x2f0>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800ddd6:	4b5a      	ldr	r3, [pc, #360]	; (800df40 <taskComputeImu+0x2c8>)
 800ddd8:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d053      	beq.n	800de88 <taskComputeImu+0x210>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800dde0:	4b52      	ldr	r3, [pc, #328]	; (800df2c <taskComputeImu+0x2b4>)
 800dde2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dde6:	461a      	mov	r2, r3
 800dde8:	4b57      	ldr	r3, [pc, #348]	; (800df48 <taskComputeImu+0x2d0>)
 800ddea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfb8      	it	lt
 800ddf4:	425b      	neglt	r3, r3
 800ddf6:	4a52      	ldr	r2, [pc, #328]	; (800df40 <taskComputeImu+0x2c8>)
 800ddf8:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	dd22      	ble.n	800de46 <taskComputeImu+0x1ce>
                            errorVelocityI = 0;
 800de00:	4b52      	ldr	r3, [pc, #328]	; (800df4c <taskComputeImu+0x2d4>)
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de06:	4b52      	ldr	r3, [pc, #328]	; (800df50 <taskComputeImu+0x2d8>)
 800de08:	2201      	movs	r2, #1
 800de0a:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800de0c:	4b47      	ldr	r3, [pc, #284]	; (800df2c <taskComputeImu+0x2b4>)
 800de0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de12:	b29a      	uxth	r2, r3
 800de14:	4b45      	ldr	r3, [pc, #276]	; (800df2c <taskComputeImu+0x2b4>)
 800de16:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800de1a:	4b4b      	ldr	r3, [pc, #300]	; (800df48 <taskComputeImu+0x2d0>)
 800de1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de20:	4299      	cmp	r1, r3
 800de22:	dd06      	ble.n	800de32 <taskComputeImu+0x1ba>
 800de24:	4b46      	ldr	r3, [pc, #280]	; (800df40 <taskComputeImu+0x2c8>)
 800de26:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	425b      	negs	r3, r3
 800de2e:	b29b      	uxth	r3, r3
 800de30:	e003      	b.n	800de3a <taskComputeImu+0x1c2>
 800de32:	4b43      	ldr	r3, [pc, #268]	; (800df40 <taskComputeImu+0x2c8>)
 800de34:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de38:	b29b      	uxth	r3, r3
 800de3a:	4413      	add	r3, r2
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	b21a      	sxth	r2, r3
 800de40:	4b3a      	ldr	r3, [pc, #232]	; (800df2c <taskComputeImu+0x2b4>)
 800de42:	80da      	strh	r2, [r3, #6]
 800de44:	e0a3      	b.n	800df8e <taskComputeImu+0x316>
                        } else {
                            if (isAltHoldChanged) {
 800de46:	4b42      	ldr	r3, [pc, #264]	; (800df50 <taskComputeImu+0x2d8>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d006      	beq.n	800de5c <taskComputeImu+0x1e4>
                                AltHold = EstAlt;
 800de4e:	4b41      	ldr	r3, [pc, #260]	; (800df54 <taskComputeImu+0x2dc>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4a41      	ldr	r2, [pc, #260]	; (800df58 <taskComputeImu+0x2e0>)
 800de54:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800de56:	4b3e      	ldr	r3, [pc, #248]	; (800df50 <taskComputeImu+0x2d8>)
 800de58:	2200      	movs	r2, #0
 800de5a:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800de5c:	4b3a      	ldr	r3, [pc, #232]	; (800df48 <taskComputeImu+0x2d0>)
 800de5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de62:	461a      	mov	r2, r3
 800de64:	4b3d      	ldr	r3, [pc, #244]	; (800df5c <taskComputeImu+0x2e4>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4413      	add	r3, r2
 800de6a:	4a34      	ldr	r2, [pc, #208]	; (800df3c <taskComputeImu+0x2c4>)
 800de6c:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800de70:	4611      	mov	r1, r2
 800de72:	4a32      	ldr	r2, [pc, #200]	; (800df3c <taskComputeImu+0x2c4>)
 800de74:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800de78:	4618      	mov	r0, r3
 800de7a:	f7f5 ff17 	bl	8003cac <constrain>
 800de7e:	4603      	mov	r3, r0
 800de80:	b21a      	sxth	r2, r3
 800de82:	4b2a      	ldr	r3, [pc, #168]	; (800df2c <taskComputeImu+0x2b4>)
 800de84:	80da      	strh	r2, [r3, #6]
 800de86:	e082      	b.n	800df8e <taskComputeImu+0x316>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800de88:	4b28      	ldr	r3, [pc, #160]	; (800df2c <taskComputeImu+0x2b4>)
 800de8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de8e:	461a      	mov	r2, r3
 800de90:	4b2d      	ldr	r3, [pc, #180]	; (800df48 <taskComputeImu+0x2d0>)
 800de92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	bfb8      	it	lt
 800de9c:	425b      	neglt	r3, r3
 800de9e:	4a28      	ldr	r2, [pc, #160]	; (800df40 <taskComputeImu+0x2c8>)
 800dea0:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800dea4:	4293      	cmp	r3, r2
 800dea6:	dd14      	ble.n	800ded2 <taskComputeImu+0x25a>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800dea8:	4b20      	ldr	r3, [pc, #128]	; (800df2c <taskComputeImu+0x2b4>)
 800deaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800deae:	461a      	mov	r2, r3
 800deb0:	4b25      	ldr	r3, [pc, #148]	; (800df48 <taskComputeImu+0x2d0>)
 800deb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	0fda      	lsrs	r2, r3, #31
 800deba:	4413      	add	r3, r2
 800debc:	105b      	asrs	r3, r3, #1
 800debe:	461a      	mov	r2, r3
 800dec0:	4b27      	ldr	r3, [pc, #156]	; (800df60 <taskComputeImu+0x2e8>)
 800dec2:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800dec4:	4b27      	ldr	r3, [pc, #156]	; (800df64 <taskComputeImu+0x2ec>)
 800dec6:	2201      	movs	r2, #1
 800dec8:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800deca:	4b21      	ldr	r3, [pc, #132]	; (800df50 <taskComputeImu+0x2d8>)
 800decc:	2201      	movs	r2, #1
 800dece:	701a      	strb	r2, [r3, #0]
 800ded0:	e00d      	b.n	800deee <taskComputeImu+0x276>
                        } else if (isAltHoldChanged) {
 800ded2:	4b1f      	ldr	r3, [pc, #124]	; (800df50 <taskComputeImu+0x2d8>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d009      	beq.n	800deee <taskComputeImu+0x276>
                            AltHold = EstAlt;
 800deda:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <taskComputeImu+0x2dc>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a1e      	ldr	r2, [pc, #120]	; (800df58 <taskComputeImu+0x2e0>)
 800dee0:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800dee2:	4b20      	ldr	r3, [pc, #128]	; (800df64 <taskComputeImu+0x2ec>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800dee8:	4b19      	ldr	r3, [pc, #100]	; (800df50 <taskComputeImu+0x2d8>)
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800deee:	4b16      	ldr	r3, [pc, #88]	; (800df48 <taskComputeImu+0x2d0>)
 800def0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def4:	461a      	mov	r2, r3
 800def6:	4b19      	ldr	r3, [pc, #100]	; (800df5c <taskComputeImu+0x2e4>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4413      	add	r3, r2
 800defc:	4a0f      	ldr	r2, [pc, #60]	; (800df3c <taskComputeImu+0x2c4>)
 800defe:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800df02:	4611      	mov	r1, r2
 800df04:	4a0d      	ldr	r2, [pc, #52]	; (800df3c <taskComputeImu+0x2c4>)
 800df06:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7f5 fece 	bl	8003cac <constrain>
 800df10:	4603      	mov	r3, r0
 800df12:	b21a      	sxth	r2, r3
 800df14:	4b05      	ldr	r3, [pc, #20]	; (800df2c <taskComputeImu+0x2b4>)
 800df16:	80da      	strh	r2, [r3, #6]
 800df18:	e039      	b.n	800df8e <taskComputeImu+0x316>
 800df1a:	bf00      	nop
 800df1c:	20001ca4 	.word	0x20001ca4
 800df20:	200020e8 	.word	0x200020e8
 800df24:	200019a0 	.word	0x200019a0
 800df28:	200019a4 	.word	0x200019a4
 800df2c:	200019e0 	.word	0x200019e0
 800df30:	20001980 	.word	0x20001980
 800df34:	20001cac 	.word	0x20001cac
 800df38:	20001cae 	.word	0x20001cae
 800df3c:	20000bb4 	.word	0x20000bb4
 800df40:	20001120 	.word	0x20001120
 800df44:	88888889 	.word	0x88888889
 800df48:	20001ba4 	.word	0x20001ba4
 800df4c:	20001760 	.word	0x20001760
 800df50:	20001ca5 	.word	0x20001ca5
 800df54:	2000174c 	.word	0x2000174c
 800df58:	20001754 	.word	0x20001754
 800df5c:	20001750 	.word	0x20001750
 800df60:	20001758 	.word	0x20001758
 800df64:	2000175c 	.word	0x2000175c
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800df68:	4bb0      	ldr	r3, [pc, #704]	; (800e22c <taskComputeImu+0x5b4>)
 800df6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df6e:	b29a      	uxth	r2, r3
 800df70:	4baf      	ldr	r3, [pc, #700]	; (800e230 <taskComputeImu+0x5b8>)
 800df72:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800df76:	b299      	uxth	r1, r3
 800df78:	4bae      	ldr	r3, [pc, #696]	; (800e234 <taskComputeImu+0x5bc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	fb11 f303 	smulbb	r3, r1, r3
 800df82:	b29b      	uxth	r3, r3
 800df84:	4413      	add	r3, r2
 800df86:	b29b      	uxth	r3, r3
 800df88:	b21a      	sxth	r2, r3
 800df8a:	4ba8      	ldr	r3, [pc, #672]	; (800e22c <taskComputeImu+0x5b4>)
 800df8c:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800df8e:	4baa      	ldr	r3, [pc, #680]	; (800e238 <taskComputeImu+0x5c0>)
 800df90:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800df94:	2b00      	cmp	r3, #0
 800df96:	d014      	beq.n	800dfc2 <taskComputeImu+0x34a>
 800df98:	4ba8      	ldr	r3, [pc, #672]	; (800e23c <taskComputeImu+0x5c4>)
 800df9a:	78db      	ldrb	r3, [r3, #3]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d103      	bne.n	800dfa8 <taskComputeImu+0x330>
 800dfa0:	4ba6      	ldr	r3, [pc, #664]	; (800e23c <taskComputeImu+0x5c4>)
 800dfa2:	791b      	ldrb	r3, [r3, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00c      	beq.n	800dfc2 <taskComputeImu+0x34a>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800dfa8:	4ba0      	ldr	r3, [pc, #640]	; (800e22c <taskComputeImu+0x5b4>)
 800dfaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	4ba3      	ldr	r3, [pc, #652]	; (800e240 <taskComputeImu+0x5c8>)
 800dfb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	4413      	add	r3, r2
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	b21a      	sxth	r2, r3
 800dfbe:	4b9b      	ldr	r3, [pc, #620]	; (800e22c <taskComputeImu+0x5b4>)
 800dfc0:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800dfc2:	2020      	movs	r0, #32
 800dfc4:	f7f8 ffa8 	bl	8006f18 <sensors>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 8115 	beq.w	800e1fa <taskComputeImu+0x582>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800dfd0:	4b9a      	ldr	r3, [pc, #616]	; (800e23c <taskComputeImu+0x5c4>)
 800dfd2:	79db      	ldrb	r3, [r3, #7]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d104      	bne.n	800dfe2 <taskComputeImu+0x36a>
 800dfd8:	4b98      	ldr	r3, [pc, #608]	; (800e23c <taskComputeImu+0x5c4>)
 800dfda:	7a1b      	ldrb	r3, [r3, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f000 8103 	beq.w	800e1e8 <taskComputeImu+0x570>
 800dfe2:	4b96      	ldr	r3, [pc, #600]	; (800e23c <taskComputeImu+0x5c4>)
 800dfe4:	7b1b      	ldrb	r3, [r3, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f000 80fe 	beq.w	800e1e8 <taskComputeImu+0x570>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800dfec:	4b95      	ldr	r3, [pc, #596]	; (800e244 <taskComputeImu+0x5cc>)
 800dfee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dff2:	ee07 3a90 	vmov	s15, r3
 800dff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dffa:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e248 <taskComputeImu+0x5d0>
 800dffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e002:	eeb0 0a67 	vmov.f32	s0, s15
 800e006:	f014 fadb 	bl	80225c0 <sinf>
 800e00a:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e00e:	4b8d      	ldr	r3, [pc, #564]	; (800e244 <taskComputeImu+0x5cc>)
 800e010:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e014:	ee07 3a90 	vmov	s15, r3
 800e018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e01c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e248 <taskComputeImu+0x5d0>
 800e020:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e024:	eeb0 0a67 	vmov.f32	s0, s15
 800e028:	f014 fa46 	bl	80224b8 <cosf>
 800e02c:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800e030:	4b82      	ldr	r3, [pc, #520]	; (800e23c <taskComputeImu+0x5c4>)
 800e032:	7c1b      	ldrb	r3, [r3, #16]
 800e034:	2b00      	cmp	r3, #0
 800e036:	f040 80d4 	bne.w	800e1e2 <taskComputeImu+0x56a>
                    if (cfg.nav_slew_rate) {
 800e03a:	4b7f      	ldr	r3, [pc, #508]	; (800e238 <taskComputeImu+0x5c0>)
 800e03c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 8087 	beq.w	800e154 <taskComputeImu+0x4dc>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e046:	4b81      	ldr	r3, [pc, #516]	; (800e24c <taskComputeImu+0x5d4>)
 800e048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e04c:	461a      	mov	r2, r3
 800e04e:	4b80      	ldr	r3, [pc, #512]	; (800e250 <taskComputeImu+0x5d8>)
 800e050:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	4618      	mov	r0, r3
 800e058:	f7fb fb68 	bl	800972c <wrap_18000>
 800e05c:	4b76      	ldr	r3, [pc, #472]	; (800e238 <taskComputeImu+0x5c0>)
 800e05e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e062:	425b      	negs	r3, r3
 800e064:	4a74      	ldr	r2, [pc, #464]	; (800e238 <taskComputeImu+0x5c0>)
 800e066:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e06a:	4619      	mov	r1, r3
 800e06c:	f7f5 fe1e 	bl	8003cac <constrain>
 800e070:	4601      	mov	r1, r0
 800e072:	4b77      	ldr	r3, [pc, #476]	; (800e250 <taskComputeImu+0x5d8>)
 800e074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e078:	b29a      	uxth	r2, r3
 800e07a:	b28b      	uxth	r3, r1
 800e07c:	4413      	add	r3, r2
 800e07e:	b29b      	uxth	r3, r3
 800e080:	b21a      	sxth	r2, r3
 800e082:	4b73      	ldr	r3, [pc, #460]	; (800e250 <taskComputeImu+0x5d8>)
 800e084:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e086:	4b71      	ldr	r3, [pc, #452]	; (800e24c <taskComputeImu+0x5d4>)
 800e088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e08c:	461a      	mov	r2, r3
 800e08e:	4b70      	ldr	r3, [pc, #448]	; (800e250 <taskComputeImu+0x5d8>)
 800e090:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	4618      	mov	r0, r3
 800e098:	f7fb fb48 	bl	800972c <wrap_18000>
 800e09c:	4b66      	ldr	r3, [pc, #408]	; (800e238 <taskComputeImu+0x5c0>)
 800e09e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0a2:	425b      	negs	r3, r3
 800e0a4:	4a64      	ldr	r2, [pc, #400]	; (800e238 <taskComputeImu+0x5c0>)
 800e0a6:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	f7f5 fdfe 	bl	8003cac <constrain>
 800e0b0:	4601      	mov	r1, r0
 800e0b2:	4b67      	ldr	r3, [pc, #412]	; (800e250 <taskComputeImu+0x5d8>)
 800e0b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	b28b      	uxth	r3, r1
 800e0bc:	4413      	add	r3, r2
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	b21a      	sxth	r2, r3
 800e0c2:	4b63      	ldr	r3, [pc, #396]	; (800e250 <taskComputeImu+0x5d8>)
 800e0c4:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e0c6:	4b62      	ldr	r3, [pc, #392]	; (800e250 <taskComputeImu+0x5d8>)
 800e0c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0cc:	ee07 3a90 	vmov	s15, r3
 800e0d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0dc:	4b5c      	ldr	r3, [pc, #368]	; (800e250 <taskComputeImu+0x5d8>)
 800e0de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0e2:	ee07 3a90 	vmov	s15, r3
 800e0e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e0fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e0fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e102:	ee17 3a90 	vmov	r3, s15
 800e106:	b21a      	sxth	r2, r3
 800e108:	4b52      	ldr	r3, [pc, #328]	; (800e254 <taskComputeImu+0x5dc>)
 800e10a:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e10c:	4b50      	ldr	r3, [pc, #320]	; (800e250 <taskComputeImu+0x5d8>)
 800e10e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e112:	ee07 3a90 	vmov	s15, r3
 800e116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e11a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e11e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e122:	4b4b      	ldr	r3, [pc, #300]	; (800e250 <taskComputeImu+0x5d8>)
 800e124:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e128:	ee07 3a90 	vmov	s15, r3
 800e12c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e130:	edd7 7a03 	vldr	s15, [r7, #12]
 800e134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e13c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e148:	ee17 3a90 	vmov	r3, s15
 800e14c:	b21a      	sxth	r2, r3
 800e14e:	4b41      	ldr	r3, [pc, #260]	; (800e254 <taskComputeImu+0x5dc>)
 800e150:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e152:	e052      	b.n	800e1fa <taskComputeImu+0x582>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e154:	4b3d      	ldr	r3, [pc, #244]	; (800e24c <taskComputeImu+0x5d4>)
 800e156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e162:	edd7 7a03 	vldr	s15, [r7, #12]
 800e166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e16a:	4b38      	ldr	r3, [pc, #224]	; (800e24c <taskComputeImu+0x5d4>)
 800e16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e170:	ee07 3a90 	vmov	s15, r3
 800e174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e178:	edd7 7a04 	vldr	s15, [r7, #16]
 800e17c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e180:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e184:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e18c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e190:	ee17 3a90 	vmov	r3, s15
 800e194:	b21a      	sxth	r2, r3
 800e196:	4b2f      	ldr	r3, [pc, #188]	; (800e254 <taskComputeImu+0x5dc>)
 800e198:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e19a:	4b2c      	ldr	r3, [pc, #176]	; (800e24c <taskComputeImu+0x5d4>)
 800e19c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1a0:	ee07 3a90 	vmov	s15, r3
 800e1a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1b0:	4b26      	ldr	r3, [pc, #152]	; (800e24c <taskComputeImu+0x5d4>)
 800e1b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1b6:	ee07 3a90 	vmov	s15, r3
 800e1ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1be:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1ca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1d6:	ee17 3a90 	vmov	r3, s15
 800e1da:	b21a      	sxth	r2, r3
 800e1dc:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <taskComputeImu+0x5dc>)
 800e1de:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1e0:	e00b      	b.n	800e1fa <taskComputeImu+0x582>
                    }
                } else fw_nav();
 800e1e2:	f7f9 f813 	bl	800720c <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1e6:	e008      	b.n	800e1fa <taskComputeImu+0x582>
            } else {
                GPS_angle[ROLL] = 0;
 800e1e8:	4b1a      	ldr	r3, [pc, #104]	; (800e254 <taskComputeImu+0x5dc>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e1ee:	4b19      	ldr	r3, [pc, #100]	; (800e254 <taskComputeImu+0x5dc>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e1f4:	4b17      	ldr	r3, [pc, #92]	; (800e254 <taskComputeImu+0x5dc>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e1fa:	4b17      	ldr	r3, [pc, #92]	; (800e258 <taskComputeImu+0x5e0>)
 800e1fc:	2206      	movs	r2, #6
 800e1fe:	701a      	strb	r2, [r3, #0]
		p_task->immediate = TRUE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	705a      	strb	r2, [r3, #1]
    	break;
 800e206:	e00c      	b.n	800e222 <taskComputeImu+0x5aa>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e208:	4b14      	ldr	r3, [pc, #80]	; (800e25c <taskComputeImu+0x5e4>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4798      	blx	r3

        mixTable();
 800e20e:	f7fd fb65 	bl	800b8dc <mixTable>
        writeServos();
 800e212:	f7fc ffbb 	bl	800b18c <writeServos>
        writeMotors();
 800e216:	f7fd f8f1 	bl	800b3fc <writeMotors>
        step = 0;
 800e21a:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <taskComputeImu+0x5e0>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
    	break;
 800e220:	bf00      	nop
	}

    return 0;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	200019e0 	.word	0x200019e0
 800e230:	20000bb4 	.word	0x20000bb4
 800e234:	20001750 	.word	0x20001750
 800e238:	20001120 	.word	0x20001120
 800e23c:	20001980 	.word	0x20001980
 800e240:	20001768 	.word	0x20001768
 800e244:	20001cac 	.word	0x20001cac
 800e248:	3c8efa35 	.word	0x3c8efa35
 800e24c:	20001a7c 	.word	0x20001a7c
 800e250:	20001a80 	.word	0x20001a80
 800e254:	20001a74 	.word	0x20001a74
 800e258:	20001ca4 	.word	0x20001ca4
 800e25c:	20000050 	.word	0x20000050

0800e260 <mspFrameRecieve>:
{
    return rcData[chan];
}

void mspFrameRecieve(void)
{
 800e260:	b480      	push	{r7}
 800e262:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e264:	4b05      	ldr	r3, [pc, #20]	; (800e27c <mspFrameRecieve+0x1c>)
 800e266:	2200      	movs	r2, #0
 800e268:	801a      	strh	r2, [r3, #0]

    g_task_compute_rc->immediate = TRUE;
 800e26a:	4b05      	ldr	r3, [pc, #20]	; (800e280 <mspFrameRecieve+0x20>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2201      	movs	r2, #1
 800e270:	705a      	strb	r2, [r3, #1]
}
 800e272:	bf00      	nop
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr
 800e27c:	200019b6 	.word	0x200019b6
 800e280:	20001b84 	.word	0x20001b84

0800e284 <sensorsAutodetect>:
	.baro.hardware = NULL		// barometer access functions
};
PifImuSensor imu_sensor;

bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&imu_sensor);
 800e292:	4874      	ldr	r0, [pc, #464]	; (800e464 <sensorsAutodetect+0x1e0>)
 800e294:	f00a fab2 	bl	80187fc <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e298:	4b73      	ldr	r3, [pc, #460]	; (800e468 <sensorsAutodetect+0x1e4>)
 800e29a:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e29e:	4b72      	ldr	r3, [pc, #456]	; (800e468 <sensorsAutodetect+0x1e4>)
 800e2a0:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e2a4:	4b70      	ldr	r3, [pc, #448]	; (800e468 <sensorsAutodetect+0x1e4>)
 800e2a6:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e2aa:	486e      	ldr	r0, [pc, #440]	; (800e464 <sensorsAutodetect+0x1e0>)
 800e2ac:	f00a fab4 	bl	8018818 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e2b0:	4b6d      	ldr	r3, [pc, #436]	; (800e468 <sensorsAutodetect+0x1e4>)
 800e2b2:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e2b6:	4b6d      	ldr	r3, [pc, #436]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e2b8:	821a      	strh	r2, [r3, #16]

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e2ba:	e010      	b.n	800e2de <sensorsAutodetect+0x5a>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	6852      	ldr	r2, [r2, #4]
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	4869      	ldr	r0, [pc, #420]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e2c8:	4798      	blx	r3
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <sensorsAutodetect+0x54>
    	    sensorsSet(SENSOR_GYRO);
 800e2d0:	2001      	movs	r0, #1
 800e2d2:	f7f8 fe37 	bl	8006f44 <sensorsSet>
    		break;
 800e2d6:	e006      	b.n	800e2e6 <sensorsAutodetect+0x62>
    	}
    	gyroDetect++;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1ea      	bne.n	800e2bc <sensorsAutodetect+0x38>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e2e6:	4b61      	ldr	r3, [pc, #388]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <sensorsAutodetect+0x6e>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	e0b3      	b.n	800e45a <sensorsAutodetect+0x1d6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e2f2:	4b5e      	ldr	r3, [pc, #376]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <sensorsAutodetect+0x7e>
    	sensorsSet(SENSOR_ACC);
 800e2fa:	2002      	movs	r0, #2
 800e2fc:	f7f8 fe22 	bl	8006f44 <sensorsSet>
 800e300:	e018      	b.n	800e334 <sensorsAutodetect+0xb0>
    }
    else if (accDetect) {
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d015      	beq.n	800e334 <sensorsAutodetect+0xb0>
        while (accDetect->p_func) {
 800e308:	e010      	b.n	800e32c <sensorsAutodetect+0xa8>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	6852      	ldr	r2, [r2, #4]
 800e312:	4611      	mov	r1, r2
 800e314:	4855      	ldr	r0, [pc, #340]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e316:	4798      	blx	r3
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d003      	beq.n	800e326 <sensorsAutodetect+0xa2>
            	sensorsSet(SENSOR_ACC);
 800e31e:	2002      	movs	r0, #2
 800e320:	f7f8 fe10 	bl	8006f44 <sensorsSet>
        		break;
 800e324:	e006      	b.n	800e334 <sensorsAutodetect+0xb0>
        	}
        	accDetect++;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	3308      	adds	r3, #8
 800e32a:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1ea      	bne.n	800e30a <sensorsAutodetect+0x86>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e334:	4b4d      	ldr	r3, [pc, #308]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d003      	beq.n	800e344 <sensorsAutodetect+0xc0>
    	sensorsSet(SENSOR_BARO);
 800e33c:	2004      	movs	r0, #4
 800e33e:	f7f8 fe01 	bl	8006f44 <sensorsSet>
 800e342:	e018      	b.n	800e376 <sensorsAutodetect+0xf2>
    }
    else if (baroDetect) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d015      	beq.n	800e376 <sensorsAutodetect+0xf2>
		while (baroDetect->p_func) {
 800e34a:	e010      	b.n	800e36e <sensorsAutodetect+0xea>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	6852      	ldr	r2, [r2, #4]
 800e354:	4611      	mov	r1, r2
 800e356:	4845      	ldr	r0, [pc, #276]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e358:	4798      	blx	r3
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d003      	beq.n	800e368 <sensorsAutodetect+0xe4>
				sensorsSet(SENSOR_BARO);
 800e360:	2004      	movs	r0, #4
 800e362:	f7f8 fdef 	bl	8006f44 <sensorsSet>
				break;
 800e366:	e006      	b.n	800e376 <sensorsAutodetect+0xf2>
			}
			baroDetect++;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3308      	adds	r3, #8
 800e36c:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1ea      	bne.n	800e34c <sensorsAutodetect+0xc8>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e376:	2002      	movs	r0, #2
 800e378:	f7f8 fdce 	bl	8006f18 <sensors>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d006      	beq.n	800e390 <sensorsAutodetect+0x10c>
        sensor_set.acc.init(mcfg.acc_align);
 800e382:	4b3a      	ldr	r3, [pc, #232]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e384:	69db      	ldr	r3, [r3, #28]
 800e386:	4a38      	ldr	r2, [pc, #224]	; (800e468 <sensorsAutodetect+0x1e4>)
 800e388:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e38c:	4610      	mov	r0, r2
 800e38e:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(mcfg.gyro_align);
 800e390:	4b36      	ldr	r3, [pc, #216]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	4a34      	ldr	r2, [pc, #208]	; (800e468 <sensorsAutodetect+0x1e4>)
 800e396:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e39a:	4610      	mov	r0, r2
 800e39c:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e39e:	4b33      	ldr	r3, [pc, #204]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <sensorsAutodetect+0x12a>
    	sensorsSet(SENSOR_MAG);
 800e3a6:	2008      	movs	r0, #8
 800e3a8:	f7f8 fdcc 	bl	8006f44 <sensorsSet>
 800e3ac:	e018      	b.n	800e3e0 <sensorsAutodetect+0x15c>
    }
    else if (magDetect) {
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d015      	beq.n	800e3e0 <sensorsAutodetect+0x15c>
		while (magDetect->p_func) {
 800e3b4:	e010      	b.n	800e3d8 <sensorsAutodetect+0x154>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	6852      	ldr	r2, [r2, #4]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	482a      	ldr	r0, [pc, #168]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e3c2:	4798      	blx	r3
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <sensorsAutodetect+0x14e>
				sensorsSet(SENSOR_MAG);
 800e3ca:	2008      	movs	r0, #8
 800e3cc:	f7f8 fdba 	bl	8006f44 <sensorsSet>
				break;
 800e3d0:	e006      	b.n	800e3e0 <sensorsAutodetect+0x15c>
			}
			magDetect++;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1ea      	bne.n	800e3b6 <sensorsAutodetect+0x132>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e3e0:	4b23      	ldr	r3, [pc, #140]	; (800e470 <sensorsAutodetect+0x1ec>)
 800e3e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e3e6:	4a23      	ldr	r2, [pc, #140]	; (800e474 <sensorsAutodetect+0x1f0>)
 800e3e8:	fb82 1203 	smull	r1, r2, r2, r3
 800e3ec:	1152      	asrs	r2, r2, #5
 800e3ee:	17db      	asrs	r3, r3, #31
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e3f4:	4b1e      	ldr	r3, [pc, #120]	; (800e470 <sensorsAutodetect+0x1ec>)
 800e3f6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e3fa:	4a1e      	ldr	r2, [pc, #120]	; (800e474 <sensorsAutodetect+0x1f0>)
 800e3fc:	fb82 1203 	smull	r1, r2, r2, r3
 800e400:	1151      	asrs	r1, r2, #5
 800e402:	17da      	asrs	r2, r3, #31
 800e404:	1a8a      	subs	r2, r1, r2
 800e406:	2164      	movs	r1, #100	; 0x64
 800e408:	fb01 f202 	mul.w	r2, r1, r2
 800e40c:	1a9b      	subs	r3, r3, r2
 800e40e:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e410:	2008      	movs	r0, #8
 800e412:	f7f8 fd81 	bl	8006f18 <sensors>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d019      	beq.n	800e450 <sensorsAutodetect+0x1cc>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e41c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e420:	ee07 3a90 	vmov	s15, r3
 800e424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e428:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e42c:	ee07 3a90 	vmov	s15, r3
 800e430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e434:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e478 <sensorsAutodetect+0x1f4>
 800e438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e440:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e444:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e448:	4b08      	ldr	r3, [pc, #32]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e44a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 800e44e:	e003      	b.n	800e458 <sensorsAutodetect+0x1d4>
    else
        sensor_set.mag.declination = 0.0f;
 800e450:	4b06      	ldr	r3, [pc, #24]	; (800e46c <sensorsAutodetect+0x1e8>)
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	659a      	str	r2, [r3, #88]	; 0x58

    return true;
 800e458:	2301      	movs	r3, #1
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3718      	adds	r7, #24
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	20001d18 	.word	0x20001d18
 800e468:	20000bb4 	.word	0x20000bb4
 800e46c:	20001cb8 	.word	0x20001cb8
 800e470:	20001120 	.word	0x20001120
 800e474:	51eb851f 	.word	0x51eb851f
 800e478:	3c888889 	.word	0x3c888889

0800e47c <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e482:	2300      	movs	r3, #0
 800e484:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e486:	4b2a      	ldr	r3, [pc, #168]	; (800e530 <RSSI_getValue+0xb4>)
 800e488:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d029      	beq.n	800e4e4 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e490:	4b27      	ldr	r3, [pc, #156]	; (800e530 <RSSI_getValue+0xb4>)
 800e492:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e496:	3303      	adds	r3, #3
 800e498:	4a26      	ldr	r2, [pc, #152]	; (800e534 <RSSI_getValue+0xb8>)
 800e49a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e49e:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e4a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e4a8:	4a21      	ldr	r2, [pc, #132]	; (800e530 <RSSI_getValue+0xb4>)
 800e4aa:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7f5 fbfb 	bl	8003cac <constrain>
 800e4b6:	ee07 0a90 	vmov	s15, r0
 800e4ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e4be:	4b1c      	ldr	r3, [pc, #112]	; (800e530 <RSSI_getValue+0xb4>)
 800e4c0:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e4c4:	ee07 3a90 	vmov	s15, r3
 800e4c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4d0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e538 <RSSI_getValue+0xbc>
 800e4d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4dc:	ee17 3a90 	vmov	r3, s15
 800e4e0:	80fb      	strh	r3, [r7, #6]
 800e4e2:	e020      	b.n	800e526 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e4e4:	4b12      	ldr	r3, [pc, #72]	; (800e530 <RSSI_getValue+0xb4>)
 800e4e6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d01b      	beq.n	800e526 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e4ee:	2003      	movs	r0, #3
 800e4f0:	f7f2 fe64 	bl	80011bc <actGetAdcChannel>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	4b0d      	ldr	r3, [pc, #52]	; (800e530 <RSSI_getValue+0xb4>)
 800e4fa:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e4fe:	1ad2      	subs	r2, r2, r3
 800e500:	4613      	mov	r3, r2
 800e502:	029b      	lsls	r3, r3, #10
 800e504:	1a9b      	subs	r3, r3, r2
 800e506:	4a0a      	ldr	r2, [pc, #40]	; (800e530 <RSSI_getValue+0xb4>)
 800e508:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e50c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e510:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e512:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e516:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e51a:	2100      	movs	r1, #0
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7f5 fbc5 	bl	8003cac <constrain>
 800e522:	4603      	mov	r3, r0
 800e524:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e526:	88fb      	ldrh	r3, [r7, #6]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	20000bb4 	.word	0x20000bb4
 800e534:	200019bc 	.word	0x200019bc
 800e538:	447fc000 	.word	0x447fc000

0800e53c <batteryInit>:

void batteryInit(void)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e542:	f04f 0300 	mov.w	r3, #0
 800e546:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e548:	2300      	movs	r3, #0
 800e54a:	607b      	str	r3, [r7, #4]
 800e54c:	e018      	b.n	800e580 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e54e:	f7f2 fe47 	bl	80011e0 <actGetBatteryVoltage>
 800e552:	eeb0 7a40 	vmov.f32	s14, s0
 800e556:	4b35      	ldr	r3, [pc, #212]	; (800e62c <batteryInit+0xf0>)
 800e558:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e55c:	ee07 3a90 	vmov	s15, r3
 800e560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e568:	ed97 7a00 	vldr	s14, [r7]
 800e56c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e570:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e574:	200a      	movs	r0, #10
 800e576:	f002 ffad 	bl	80114d4 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3301      	adds	r3, #1
 800e57e:	607b      	str	r3, [r7, #4]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b1f      	cmp	r3, #31
 800e584:	d9e3      	bls.n	800e54e <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e586:	ed97 7a00 	vldr	s14, [r7]
 800e58a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e630 <batteryInit+0xf4>
 800e58e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e592:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e596:	edd7 7a00 	vldr	s15, [r7]
 800e59a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e59e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e5a2:	ee16 0a90 	vmov	r0, s13
 800e5a6:	f7f1 ff8d 	bl	80004c4 <__aeabi_f2d>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4921      	ldr	r1, [pc, #132]	; (800e634 <batteryInit+0xf8>)
 800e5b0:	2002      	movs	r0, #2
 800e5b2:	f005 f811 	bl	80135d8 <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	e014      	b.n	800e5e6 <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e5bc:	4b1b      	ldr	r3, [pc, #108]	; (800e62c <batteryInit+0xf0>)
 800e5be:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	fb02 f303 	mul.w	r3, r2, r3
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d2:	ed97 7a00 	vldr	s14, [r7]
 800e5d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5de:	d406      	bmi.n	800e5ee <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b07      	cmp	r3, #7
 800e5ea:	d9e7      	bls.n	800e5bc <batteryInit+0x80>
 800e5ec:	e000      	b.n	800e5f0 <batteryInit+0xb4>
            break;
 800e5ee:	bf00      	nop
    }
    batteryCellCount = i;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	b2da      	uxtb	r2, r3
 800e5f4:	4b10      	ldr	r3, [pc, #64]	; (800e638 <batteryInit+0xfc>)
 800e5f6:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e5f8:	4b0c      	ldr	r3, [pc, #48]	; (800e62c <batteryInit+0xf0>)
 800e5fa:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	b29b      	uxth	r3, r3
 800e604:	fb12 f303 	smulbb	r3, r2, r3
 800e608:	b29a      	uxth	r2, r3
 800e60a:	4b0c      	ldr	r3, [pc, #48]	; (800e63c <batteryInit+0x100>)
 800e60c:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e60e:	4b07      	ldr	r3, [pc, #28]	; (800e62c <batteryInit+0xf0>)
 800e610:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e614:	b29a      	uxth	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	b29b      	uxth	r3, r3
 800e61a:	fb12 f303 	smulbb	r3, r2, r3
 800e61e:	b29a      	uxth	r2, r3
 800e620:	4b07      	ldr	r3, [pc, #28]	; (800e640 <batteryInit+0x104>)
 800e622:	801a      	strh	r2, [r3, #0]
}
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	20000bb4 	.word	0x20000bb4
 800e630:	42000000 	.word	0x42000000
 800e634:	08026454 	.word	0x08026454
 800e638:	20000054 	.word	0x20000054
 800e63c:	20001b26 	.word	0x20001b26
 800e640:	20001b28 	.word	0x20001b28

0800e644 <ACC_Common>:

static void ACC_Common(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e64a:	4b4d      	ldr	r3, [pc, #308]	; (800e780 <ACC_Common+0x13c>)
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d06b      	beq.n	800e72a <ACC_Common+0xe6>
        for (axis = 0; axis < 3; axis++) {
 800e652:	2300      	movs	r3, #0
 800e654:	607b      	str	r3, [r7, #4]
 800e656:	e025      	b.n	800e6a4 <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e658:	4b49      	ldr	r3, [pc, #292]	; (800e780 <ACC_Common+0x13c>)
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e660:	d104      	bne.n	800e66c <ACC_Common+0x28>
                a[axis] = 0;
 800e662:	4a48      	ldr	r2, [pc, #288]	; (800e784 <ACC_Common+0x140>)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2100      	movs	r1, #0
 800e668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e66c:	4a45      	ldr	r2, [pc, #276]	; (800e784 <ACC_Common+0x140>)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e674:	4944      	ldr	r1, [pc, #272]	; (800e788 <ACC_Common+0x144>)
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e67c:	441a      	add	r2, r3
 800e67e:	4941      	ldr	r1, [pc, #260]	; (800e784 <ACC_Common+0x140>)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e686:	4a40      	ldr	r2, [pc, #256]	; (800e788 <ACC_Common+0x144>)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2100      	movs	r1, #0
 800e68c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e690:	4a3e      	ldr	r2, [pc, #248]	; (800e78c <ACC_Common+0x148>)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	33b4      	adds	r3, #180	; 0xb4
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	4413      	add	r3, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	607b      	str	r3, [r7, #4]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b02      	cmp	r3, #2
 800e6a8:	ddd6      	ble.n	800e658 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e6aa:	4b35      	ldr	r3, [pc, #212]	; (800e780 <ACC_Common+0x13c>)
 800e6ac:	881b      	ldrh	r3, [r3, #0]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d135      	bne.n	800e71e <ACC_Common+0xda>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e6b2:	4b34      	ldr	r3, [pc, #208]	; (800e784 <ACC_Common+0x140>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	33c8      	adds	r3, #200	; 0xc8
 800e6b8:	4a35      	ldr	r2, [pc, #212]	; (800e790 <ACC_Common+0x14c>)
 800e6ba:	fb82 1203 	smull	r1, r2, r2, r3
 800e6be:	11d2      	asrs	r2, r2, #7
 800e6c0:	17db      	asrs	r3, r3, #31
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	b21a      	sxth	r2, r3
 800e6c6:	4b31      	ldr	r3, [pc, #196]	; (800e78c <ACC_Common+0x148>)
 800e6c8:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e6cc:	4b2d      	ldr	r3, [pc, #180]	; (800e784 <ACC_Common+0x140>)
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	33c8      	adds	r3, #200	; 0xc8
 800e6d2:	4a2f      	ldr	r2, [pc, #188]	; (800e790 <ACC_Common+0x14c>)
 800e6d4:	fb82 1203 	smull	r1, r2, r2, r3
 800e6d8:	11d2      	asrs	r2, r2, #7
 800e6da:	17db      	asrs	r3, r3, #31
 800e6dc:	1ad3      	subs	r3, r2, r3
 800e6de:	b21a      	sxth	r2, r3
 800e6e0:	4b2a      	ldr	r3, [pc, #168]	; (800e78c <ACC_Common+0x148>)
 800e6e2:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - acc_1G;
 800e6e6:	4b27      	ldr	r3, [pc, #156]	; (800e784 <ACC_Common+0x140>)
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	33c8      	adds	r3, #200	; 0xc8
 800e6ec:	4a28      	ldr	r2, [pc, #160]	; (800e790 <ACC_Common+0x14c>)
 800e6ee:	fb82 1203 	smull	r1, r2, r2, r3
 800e6f2:	11d2      	asrs	r2, r2, #7
 800e6f4:	17db      	asrs	r3, r3, #31
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	4b26      	ldr	r3, [pc, #152]	; (800e794 <ACC_Common+0x150>)
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	b29b      	uxth	r3, r3
 800e702:	b21a      	sxth	r2, r3
 800e704:	4b21      	ldr	r3, [pc, #132]	; (800e78c <ACC_Common+0x148>)
 800e706:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e70a:	4b23      	ldr	r3, [pc, #140]	; (800e798 <ACC_Common+0x154>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e710:	4b21      	ldr	r3, [pc, #132]	; (800e798 <ACC_Common+0x154>)
 800e712:	2200      	movs	r2, #0
 800e714:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e716:	2101      	movs	r1, #1
 800e718:	2001      	movs	r0, #1
 800e71a:	f7f8 f863 	bl	80067e4 <writeEEPROM>
        }
        calibratingA--;
 800e71e:	4b18      	ldr	r3, [pc, #96]	; (800e780 <ACC_Common+0x13c>)
 800e720:	881b      	ldrh	r3, [r3, #0]
 800e722:	3b01      	subs	r3, #1
 800e724:	b29a      	uxth	r2, r3
 800e726:	4b16      	ldr	r3, [pc, #88]	; (800e780 <ACC_Common+0x13c>)
 800e728:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e72a:	2004      	movs	r0, #4
 800e72c:	f7f8 fc3c 	bl	8006fa8 <feature>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 80c9 	beq.w	800e8ca <ACC_Common+0x286>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e738:	4b18      	ldr	r3, [pc, #96]	; (800e79c <ACC_Common+0x158>)
 800e73a:	881b      	ldrh	r3, [r3, #0]
 800e73c:	2b32      	cmp	r3, #50	; 0x32
 800e73e:	d118      	bne.n	800e772 <ACC_Common+0x12e>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e740:	4b12      	ldr	r3, [pc, #72]	; (800e78c <ACC_Common+0x148>)
 800e742:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e746:	4b16      	ldr	r3, [pc, #88]	; (800e7a0 <ACC_Common+0x15c>)
 800e748:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e74a:	4b10      	ldr	r3, [pc, #64]	; (800e78c <ACC_Common+0x148>)
 800e74c:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e750:	4b13      	ldr	r3, [pc, #76]	; (800e7a0 <ACC_Common+0x15c>)
 800e752:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e754:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <ACC_Common+0x148>)
 800e756:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e75a:	4b11      	ldr	r3, [pc, #68]	; (800e7a0 <ACC_Common+0x15c>)
 800e75c:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e75e:	4b0e      	ldr	r3, [pc, #56]	; (800e798 <ACC_Common+0x154>)
 800e760:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e764:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <ACC_Common+0x160>)
 800e766:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e768:	4b0b      	ldr	r3, [pc, #44]	; (800e798 <ACC_Common+0x154>)
 800e76a:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e76e:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <ACC_Common+0x160>)
 800e770:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e772:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <ACC_Common+0x158>)
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d06d      	beq.n	800e856 <ACC_Common+0x212>
            for (axis = 0; axis < 3; axis++) {
 800e77a:	2300      	movs	r3, #0
 800e77c:	607b      	str	r3, [r7, #4]
 800e77e:	e038      	b.n	800e7f2 <ACC_Common+0x1ae>
 800e780:	20001ca6 	.word	0x20001ca6
 800e784:	20001d98 	.word	0x20001d98
 800e788:	20001708 	.word	0x20001708
 800e78c:	20000bb4 	.word	0x20000bb4
 800e790:	51eb851f 	.word	0x51eb851f
 800e794:	2000005a 	.word	0x2000005a
 800e798:	20001120 	.word	0x20001120
 800e79c:	20001b24 	.word	0x20001b24
 800e7a0:	20001da4 	.word	0x20001da4
 800e7a4:	20001dac 	.word	0x20001dac
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e7a8:	4b5d      	ldr	r3, [pc, #372]	; (800e920 <ACC_Common+0x2dc>)
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	2b32      	cmp	r3, #50	; 0x32
 800e7ae:	d104      	bne.n	800e7ba <ACC_Common+0x176>
                    b[axis] = 0;
 800e7b0:	4a5c      	ldr	r2, [pc, #368]	; (800e924 <ACC_Common+0x2e0>)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e7ba:	4a5a      	ldr	r2, [pc, #360]	; (800e924 <ACC_Common+0x2e0>)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7c2:	4959      	ldr	r1, [pc, #356]	; (800e928 <ACC_Common+0x2e4>)
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e7ca:	441a      	add	r2, r3
 800e7cc:	4955      	ldr	r1, [pc, #340]	; (800e924 <ACC_Common+0x2e0>)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e7d4:	4a54      	ldr	r2, [pc, #336]	; (800e928 <ACC_Common+0x2e4>)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2100      	movs	r1, #0
 800e7da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e7de:	4a53      	ldr	r2, [pc, #332]	; (800e92c <ACC_Common+0x2e8>)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	33b4      	adds	r3, #180	; 0xb4
 800e7e4:	005b      	lsls	r3, r3, #1
 800e7e6:	4413      	add	r3, r2
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	607b      	str	r3, [r7, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	ddd7      	ble.n	800e7a8 <ACC_Common+0x164>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e7f8:	4b49      	ldr	r3, [pc, #292]	; (800e920 <ACC_Common+0x2dc>)
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d124      	bne.n	800e84a <ACC_Common+0x206>
                AccInflightCalibrationActive = false;
 800e800:	4b4b      	ldr	r3, [pc, #300]	; (800e930 <ACC_Common+0x2ec>)
 800e802:	2200      	movs	r2, #0
 800e804:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e806:	4b4b      	ldr	r3, [pc, #300]	; (800e934 <ACC_Common+0x2f0>)
 800e808:	2201      	movs	r2, #1
 800e80a:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e80c:	200a      	movs	r0, #10
 800e80e:	f7f5 fbdb 	bl	8003fc8 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e812:	4b49      	ldr	r3, [pc, #292]	; (800e938 <ACC_Common+0x2f4>)
 800e814:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e818:	4b44      	ldr	r3, [pc, #272]	; (800e92c <ACC_Common+0x2e8>)
 800e81a:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e81e:	4b46      	ldr	r3, [pc, #280]	; (800e938 <ACC_Common+0x2f4>)
 800e820:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e824:	4b41      	ldr	r3, [pc, #260]	; (800e92c <ACC_Common+0x2e8>)
 800e826:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800e82a:	4b43      	ldr	r3, [pc, #268]	; (800e938 <ACC_Common+0x2f4>)
 800e82c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e830:	4b3e      	ldr	r3, [pc, #248]	; (800e92c <ACC_Common+0x2e8>)
 800e832:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800e836:	4b41      	ldr	r3, [pc, #260]	; (800e93c <ACC_Common+0x2f8>)
 800e838:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e83c:	4b40      	ldr	r3, [pc, #256]	; (800e940 <ACC_Common+0x2fc>)
 800e83e:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800e840:	4b3e      	ldr	r3, [pc, #248]	; (800e93c <ACC_Common+0x2f8>)
 800e842:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e846:	4b3e      	ldr	r3, [pc, #248]	; (800e940 <ACC_Common+0x2fc>)
 800e848:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800e84a:	4b35      	ldr	r3, [pc, #212]	; (800e920 <ACC_Common+0x2dc>)
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	3b01      	subs	r3, #1
 800e850:	b29a      	uxth	r2, r3
 800e852:	4b33      	ldr	r3, [pc, #204]	; (800e920 <ACC_Common+0x2dc>)
 800e854:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800e856:	4b3b      	ldr	r3, [pc, #236]	; (800e944 <ACC_Common+0x300>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d035      	beq.n	800e8ca <ACC_Common+0x286>
            AccInflightCalibrationSavetoEEProm = false;
 800e85e:	4b39      	ldr	r3, [pc, #228]	; (800e944 <ACC_Common+0x300>)
 800e860:	2200      	movs	r2, #0
 800e862:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800e864:	4b2f      	ldr	r3, [pc, #188]	; (800e924 <ACC_Common+0x2e0>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a37      	ldr	r2, [pc, #220]	; (800e948 <ACC_Common+0x304>)
 800e86a:	fb82 1203 	smull	r1, r2, r2, r3
 800e86e:	1112      	asrs	r2, r2, #4
 800e870:	17db      	asrs	r3, r3, #31
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	b21a      	sxth	r2, r3
 800e876:	4b2d      	ldr	r3, [pc, #180]	; (800e92c <ACC_Common+0x2e8>)
 800e878:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800e87c:	4b29      	ldr	r3, [pc, #164]	; (800e924 <ACC_Common+0x2e0>)
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	4a31      	ldr	r2, [pc, #196]	; (800e948 <ACC_Common+0x304>)
 800e882:	fb82 1203 	smull	r1, r2, r2, r3
 800e886:	1112      	asrs	r2, r2, #4
 800e888:	17db      	asrs	r3, r3, #31
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	b21a      	sxth	r2, r3
 800e88e:	4b27      	ldr	r3, [pc, #156]	; (800e92c <ACC_Common+0x2e8>)
 800e890:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - acc_1G;    // for nunchuk 200=1G
 800e894:	4b23      	ldr	r3, [pc, #140]	; (800e924 <ACC_Common+0x2e0>)
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	4a2b      	ldr	r2, [pc, #172]	; (800e948 <ACC_Common+0x304>)
 800e89a:	fb82 1203 	smull	r1, r2, r2, r3
 800e89e:	1112      	asrs	r2, r2, #4
 800e8a0:	17db      	asrs	r3, r3, #31
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	4b29      	ldr	r3, [pc, #164]	; (800e94c <ACC_Common+0x308>)
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	b21a      	sxth	r2, r3
 800e8b0:	4b1e      	ldr	r3, [pc, #120]	; (800e92c <ACC_Common+0x2e8>)
 800e8b2:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e8b6:	4b22      	ldr	r3, [pc, #136]	; (800e940 <ACC_Common+0x2fc>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e8bc:	4b20      	ldr	r3, [pc, #128]	; (800e940 <ACC_Common+0x2fc>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	f7f7 ff8d 	bl	80067e4 <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800e8ca:	4b17      	ldr	r3, [pc, #92]	; (800e928 <ACC_Common+0x2e4>)
 800e8cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	4b16      	ldr	r3, [pc, #88]	; (800e92c <ACC_Common+0x2e8>)
 800e8d4:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	b21a      	sxth	r2, r3
 800e8e0:	4b11      	ldr	r3, [pc, #68]	; (800e928 <ACC_Common+0x2e4>)
 800e8e2:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800e8e4:	4b10      	ldr	r3, [pc, #64]	; (800e928 <ACC_Common+0x2e4>)
 800e8e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	4b0f      	ldr	r3, [pc, #60]	; (800e92c <ACC_Common+0x2e8>)
 800e8ee:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	b21a      	sxth	r2, r3
 800e8fa:	4b0b      	ldr	r3, [pc, #44]	; (800e928 <ACC_Common+0x2e4>)
 800e8fc:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800e8fe:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <ACC_Common+0x2e4>)
 800e900:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e904:	b29a      	uxth	r2, r3
 800e906:	4b09      	ldr	r3, [pc, #36]	; (800e92c <ACC_Common+0x2e8>)
 800e908:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	b29b      	uxth	r3, r3
 800e912:	b21a      	sxth	r2, r3
 800e914:	4b04      	ldr	r3, [pc, #16]	; (800e928 <ACC_Common+0x2e4>)
 800e916:	809a      	strh	r2, [r3, #4]
}
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	20001b24 	.word	0x20001b24
 800e924:	20001db0 	.word	0x20001db0
 800e928:	20001708 	.word	0x20001708
 800e92c:	20000bb4 	.word	0x20000bb4
 800e930:	20001b23 	.word	0x20001b23
 800e934:	20001b21 	.word	0x20001b21
 800e938:	20001da4 	.word	0x20001da4
 800e93c:	20001dac 	.word	0x20001dac
 800e940:	20001120 	.word	0x20001120
 800e944:	20001b22 	.word	0x20001b22
 800e948:	51eb851f 	.word	0x51eb851f
 800e94c:	2000005a 	.word	0x2000005a

0800e950 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(accADC)) {
 800e954:	4b06      	ldr	r3, [pc, #24]	; (800e970 <ACC_getADC+0x20>)
 800e956:	6a1b      	ldr	r3, [r3, #32]
 800e958:	4806      	ldr	r0, [pc, #24]	; (800e974 <ACC_getADC+0x24>)
 800e95a:	4798      	blx	r3
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <ACC_getADC+0x1a>
    	ACC_Common();
 800e962:	f7ff fe6f 	bl	800e644 <ACC_Common>
    	return TRUE;
 800e966:	2301      	movs	r3, #1
 800e968:	e000      	b.n	800e96c <ACC_getADC+0x1c>
    }
	return FALSE;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	20001cb8 	.word	0x20001cb8
 800e974:	20001708 	.word	0x20001708

0800e978 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800e97e:	4b18      	ldr	r3, [pc, #96]	; (800e9e0 <Baro_Common+0x68>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3301      	adds	r3, #1
 800e984:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800e986:	4b17      	ldr	r3, [pc, #92]	; (800e9e4 <Baro_Common+0x6c>)
 800e988:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e98c:	461a      	mov	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4293      	cmp	r3, r2
 800e992:	db01      	blt.n	800e998 <Baro_Common+0x20>
        indexplus1 = 0;
 800e994:	2300      	movs	r3, #0
 800e996:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800e998:	4b11      	ldr	r3, [pc, #68]	; (800e9e0 <Baro_Common+0x68>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a12      	ldr	r2, [pc, #72]	; (800e9e8 <Baro_Common+0x70>)
 800e99e:	6812      	ldr	r2, [r2, #0]
 800e9a0:	4912      	ldr	r1, [pc, #72]	; (800e9ec <Baro_Common+0x74>)
 800e9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800e9a6:	4b0e      	ldr	r3, [pc, #56]	; (800e9e0 <Baro_Common+0x68>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4a10      	ldr	r2, [pc, #64]	; (800e9ec <Baro_Common+0x74>)
 800e9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	4b0f      	ldr	r3, [pc, #60]	; (800e9f0 <Baro_Common+0x78>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	4a0d      	ldr	r2, [pc, #52]	; (800e9f0 <Baro_Common+0x78>)
 800e9ba:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800e9bc:	4b0c      	ldr	r3, [pc, #48]	; (800e9f0 <Baro_Common+0x78>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	490a      	ldr	r1, [pc, #40]	; (800e9ec <Baro_Common+0x74>)
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e9c8:	1a9b      	subs	r3, r3, r2
 800e9ca:	4a09      	ldr	r2, [pc, #36]	; (800e9f0 <Baro_Common+0x78>)
 800e9cc:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800e9ce:	4a04      	ldr	r2, [pc, #16]	; (800e9e0 <Baro_Common+0x68>)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6013      	str	r3, [r2, #0]
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	20001dbc 	.word	0x20001dbc
 800e9e4:	20001120 	.word	0x20001120
 800e9e8:	20001cb0 	.word	0x20001cb0
 800e9ec:	20001dc0 	.word	0x20001dc0
 800e9f0:	20001738 	.word	0x20001738

0800e9f4 <evtBaroRead>:

void evtBaroRead(int32_t pressure, float temperature)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	ed87 0a00 	vstr	s0, [r7]
    baroPressure = pressure;
 800ea00:	4a0c      	ldr	r2, [pc, #48]	; (800ea34 <evtBaroRead+0x40>)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6013      	str	r3, [r2, #0]
    baroTemperature = temperature * 100;
 800ea06:	edd7 7a00 	vldr	s15, [r7]
 800ea0a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ea38 <evtBaroRead+0x44>
 800ea0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea16:	ee17 2a90 	vmov	r2, s15
 800ea1a:	4b08      	ldr	r3, [pc, #32]	; (800ea3c <evtBaroRead+0x48>)
 800ea1c:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800ea1e:	f7ff ffab 	bl	800e978 <Baro_Common>
    sensor_set.baro.p_b_task->immediate = TRUE;
 800ea22:	4b07      	ldr	r3, [pc, #28]	; (800ea40 <evtBaroRead+0x4c>)
 800ea24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea26:	2201      	movs	r2, #1
 800ea28:	705a      	strb	r2, [r3, #1]
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	20001cb0 	.word	0x20001cb0
 800ea38:	42c80000 	.word	0x42c80000
 800ea3c:	20001cb4 	.word	0x20001cb4
 800ea40:	20001cb8 	.word	0x20001cb8

0800ea44 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	611a      	str	r2, [r3, #16]
}
 800ea52:	bf00      	nop
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b083      	sub	sp, #12
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d10b      	bne.n	800ea94 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	605a      	str	r2, [r3, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685a      	ldr	r2, [r3, #4]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f04f 0200 	mov.w	r2, #0
 800ea90:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800ea92:	e036      	b.n	800eb02 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	ed93 7a00 	vldr	s14, [r3]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	edd3 7a00 	vldr	s15, [r3]
 800eaa0:	edd7 6a00 	vldr	s13, [r7]
 800eaa4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	ee07 3a90 	vmov	s15, r3
 800eab0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eab4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800eab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	ed93 7a02 	vldr	s14, [r3, #8]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	edd3 7a00 	vldr	s15, [r3]
 800eace:	edd7 6a00 	vldr	s13, [r7]
 800ead2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	edd3 7a01 	vldr	s15, [r3, #4]
 800eadc:	ed97 6a00 	vldr	s12, [r7]
 800eae0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800eae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68da      	ldr	r2, [r3, #12]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	609a      	str	r2, [r3, #8]
}
 800eb02:	bf00      	nop
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
	...

0800eb10 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	dd0c      	ble.n	800eb3a <devVariance+0x2a>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	ee07 3a90 	vmov	s15, r3
 800eb30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eb34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eb38:	e001      	b.n	800eb3e <devVariance+0x2e>
 800eb3a:	eddf 6a05 	vldr	s13, [pc, #20]	; 800eb50 <devVariance+0x40>
 800eb3e:	eef0 7a66 	vmov.f32	s15, s13
}
 800eb42:	eeb0 0a67 	vmov.f32	s0, s15
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	00000000 	.word	0x00000000

0800eb54 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff ffd7 	bl	800eb10 <devVariance>
 800eb62:	eef0 7a40 	vmov.f32	s15, s0
 800eb66:	eeb0 0a67 	vmov.f32	s0, s15
 800eb6a:	f013 fdf5 	bl	8022758 <sqrtf>
 800eb6e:	eef0 7a40 	vmov.f32	s15, s0
}
 800eb72:	eeb0 0a67 	vmov.f32	s0, s15
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <GYRO_Common>:

static void GYRO_Common(void)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800eb82:	4b75      	ldr	r3, [pc, #468]	; (800ed58 <GYRO_Common+0x1dc>)
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f000 80c6 	beq.w	800ed18 <GYRO_Common+0x19c>
        for (axis = 0; axis < 3; axis++) {
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	607b      	str	r3, [r7, #4]
 800eb90:	e0a3      	b.n	800ecda <GYRO_Common+0x15e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800eb92:	4b71      	ldr	r3, [pc, #452]	; (800ed58 <GYRO_Common+0x1dc>)
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb9a:	d10e      	bne.n	800ebba <GYRO_Common+0x3e>
                g[axis] = 0;
 800eb9c:	4a6f      	ldr	r2, [pc, #444]	; (800ed5c <GYRO_Common+0x1e0>)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2100      	movs	r1, #0
 800eba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	009b      	lsls	r3, r3, #2
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4a6b      	ldr	r2, [pc, #428]	; (800ed60 <GYRO_Common+0x1e4>)
 800ebb2:	4413      	add	r3, r2
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7ff ff45 	bl	800ea44 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800ebba:	4a68      	ldr	r2, [pc, #416]	; (800ed5c <GYRO_Common+0x1e0>)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebc2:	4968      	ldr	r1, [pc, #416]	; (800ed64 <GYRO_Common+0x1e8>)
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ebca:	441a      	add	r2, r3
 800ebcc:	4963      	ldr	r1, [pc, #396]	; (800ed5c <GYRO_Common+0x1e0>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4a60      	ldr	r2, [pc, #384]	; (800ed60 <GYRO_Common+0x1e4>)
 800ebe0:	441a      	add	r2, r3
 800ebe2:	4960      	ldr	r1, [pc, #384]	; (800ed64 <GYRO_Common+0x1e8>)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ebea:	ee07 3a90 	vmov	s15, r3
 800ebee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebf2:	eeb0 0a67 	vmov.f32	s0, s15
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	f7ff ff31 	bl	800ea5e <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ebfc:	4a59      	ldr	r2, [pc, #356]	; (800ed64 <GYRO_Common+0x1e8>)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2100      	movs	r1, #0
 800ec02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ec06:	4a58      	ldr	r2, [pc, #352]	; (800ed68 <GYRO_Common+0x1ec>)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ec10:	4b51      	ldr	r3, [pc, #324]	; (800ed58 <GYRO_Common+0x1dc>)
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d15d      	bne.n	800ecd4 <GYRO_Common+0x158>
                float dev = devStandardDeviation(&var[axis]);
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4a4f      	ldr	r2, [pc, #316]	; (800ed60 <GYRO_Common+0x1e4>)
 800ec24:	4413      	add	r3, r2
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7ff ff94 	bl	800eb54 <devStandardDeviation>
 800ec2c:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ec30:	4b4e      	ldr	r3, [pc, #312]	; (800ed6c <GYRO_Common+0x1f0>)
 800ec32:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d036      	beq.n	800eca8 <GYRO_Common+0x12c>
 800ec3a:	4b4c      	ldr	r3, [pc, #304]	; (800ed6c <GYRO_Common+0x1f0>)
 800ec3c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ec40:	ee07 3a90 	vmov	s15, r3
 800ec44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec48:	ed97 7a00 	vldr	s14, [r7]
 800ec4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec54:	dd28      	ble.n	800eca8 <GYRO_Common+0x12c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ec56:	6838      	ldr	r0, [r7, #0]
 800ec58:	f7f1 fc34 	bl	80004c4 <__aeabi_f2d>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4942      	ldr	r1, [pc, #264]	; (800ed6c <GYRO_Common+0x1f0>)
 800ec62:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ec66:	9102      	str	r1, [sp, #8]
 800ec68:	e9cd 2300 	strd	r2, r3, [sp]
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	4940      	ldr	r1, [pc, #256]	; (800ed70 <GYRO_Common+0x1f4>)
 800ec70:	2002      	movs	r0, #2
 800ec72:	f004 fcb1 	bl	80135d8 <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ec76:	4b38      	ldr	r3, [pc, #224]	; (800ed58 <GYRO_Common+0x1dc>)
 800ec78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec7c:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ec7e:	4838      	ldr	r0, [pc, #224]	; (800ed60 <GYRO_Common+0x1e4>)
 800ec80:	f7ff fee0 	bl	800ea44 <devClear>
                    devClear(&var[1]);
 800ec84:	483b      	ldr	r0, [pc, #236]	; (800ed74 <GYRO_Common+0x1f8>)
 800ec86:	f7ff fedd 	bl	800ea44 <devClear>
                    devClear(&var[2]);
 800ec8a:	483b      	ldr	r0, [pc, #236]	; (800ed78 <GYRO_Common+0x1fc>)
 800ec8c:	f7ff feda 	bl	800ea44 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ec90:	4b32      	ldr	r3, [pc, #200]	; (800ed5c <GYRO_Common+0x1e0>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	609a      	str	r2, [r3, #8]
 800ec96:	4b31      	ldr	r3, [pc, #196]	; (800ed5c <GYRO_Common+0x1e0>)
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	4a30      	ldr	r2, [pc, #192]	; (800ed5c <GYRO_Common+0x1e0>)
 800ec9c:	6053      	str	r3, [r2, #4]
 800ec9e:	4b2f      	ldr	r3, [pc, #188]	; (800ed5c <GYRO_Common+0x1e0>)
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	4a2e      	ldr	r2, [pc, #184]	; (800ed5c <GYRO_Common+0x1e0>)
 800eca4:	6013      	str	r3, [r2, #0]
                    continue;
 800eca6:	e015      	b.n	800ecd4 <GYRO_Common+0x158>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800eca8:	4a2c      	ldr	r2, [pc, #176]	; (800ed5c <GYRO_Common+0x1e0>)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ecb4:	4a31      	ldr	r2, [pc, #196]	; (800ed7c <GYRO_Common+0x200>)
 800ecb6:	fb82 1203 	smull	r1, r2, r2, r3
 800ecba:	1192      	asrs	r2, r2, #6
 800ecbc:	17db      	asrs	r3, r3, #31
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	b219      	sxth	r1, r3
 800ecc2:	4a29      	ldr	r2, [pc, #164]	; (800ed68 <GYRO_Common+0x1ec>)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800ecca:	2201      	movs	r2, #1
 800eccc:	210f      	movs	r1, #15
 800ecce:	200a      	movs	r0, #10
 800ecd0:	f7fd f968 	bl	800bfa4 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	607b      	str	r3, [r7, #4]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	f77f af58 	ble.w	800eb92 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800ece2:	4b1d      	ldr	r3, [pc, #116]	; (800ed58 <GYRO_Common+0x1dc>)
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	4b1b      	ldr	r3, [pc, #108]	; (800ed58 <GYRO_Common+0x1dc>)
 800ecec:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800ecee:	4b1a      	ldr	r3, [pc, #104]	; (800ed58 <GYRO_Common+0x1dc>)
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d110      	bne.n	800ed18 <GYRO_Common+0x19c>
 800ecf6:	4b1c      	ldr	r3, [pc, #112]	; (800ed68 <GYRO_Common+0x1ec>)
 800ecf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	4b1a      	ldr	r3, [pc, #104]	; (800ed68 <GYRO_Common+0x1ec>)
 800ed00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed04:	4619      	mov	r1, r3
 800ed06:	4b18      	ldr	r3, [pc, #96]	; (800ed68 <GYRO_Common+0x1ec>)
 800ed08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	460b      	mov	r3, r1
 800ed10:	491b      	ldr	r1, [pc, #108]	; (800ed80 <GYRO_Common+0x204>)
 800ed12:	2002      	movs	r0, #2
 800ed14:	f004 fc60 	bl	80135d8 <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800ed18:	2300      	movs	r3, #0
 800ed1a:	607b      	str	r3, [r7, #4]
 800ed1c:	e013      	b.n	800ed46 <GYRO_Common+0x1ca>
        gyroADC[axis] -= gyroZero[axis];
 800ed1e:	4a11      	ldr	r2, [pc, #68]	; (800ed64 <GYRO_Common+0x1e8>)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	490f      	ldr	r1, [pc, #60]	; (800ed68 <GYRO_Common+0x1ec>)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	b219      	sxth	r1, r3
 800ed38:	4a0a      	ldr	r2, [pc, #40]	; (800ed64 <GYRO_Common+0x1e8>)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	3301      	adds	r3, #1
 800ed44:	607b      	str	r3, [r7, #4]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	dde8      	ble.n	800ed1e <GYRO_Common+0x1a2>
}
 800ed4c:	bf00      	nop
 800ed4e:	bf00      	nop
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20001caa 	.word	0x20001caa
 800ed5c:	20001e80 	.word	0x20001e80
 800ed60:	20001e8c 	.word	0x20001e8c
 800ed64:	20001700 	.word	0x20001700
 800ed68:	20001780 	.word	0x20001780
 800ed6c:	20000bb4 	.word	0x20000bb4
 800ed70:	08026464 	.word	0x08026464
 800ed74:	20001ea0 	.word	0x20001ea0
 800ed78:	20001eb4 	.word	0x20001eb4
 800ed7c:	10624dd3 	.word	0x10624dd3
 800ed80:	0802647c 	.word	0x0802647c

0800ed84 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(gyroADC)) {
 800ed88:	4b06      	ldr	r3, [pc, #24]	; (800eda4 <Gyro_getADC+0x20>)
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	4806      	ldr	r0, [pc, #24]	; (800eda8 <Gyro_getADC+0x24>)
 800ed8e:	4798      	blx	r3
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d003      	beq.n	800ed9e <Gyro_getADC+0x1a>
    	GYRO_Common();
 800ed96:	f7ff fef1 	bl	800eb7c <GYRO_Common>
    	return TRUE;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <Gyro_getADC+0x1c>
    }
    return FALSE;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	20001cb8 	.word	0x20001cb8
 800eda8:	20001700 	.word	0x20001700

0800edac <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800edb0:	2001      	movs	r0, #1
 800edb2:	f7f3 f95f 	bl	8002074 <actLed1State>
    if (!sensor_set.mag.init(mcfg.mag_align)) {
 800edb6:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <Mag_init+0x3c>)
 800edb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edba:	4a0c      	ldr	r2, [pc, #48]	; (800edec <Mag_init+0x40>)
 800edbc:	f892 2155 	ldrb.w	r2, [r2, #341]	; 0x155
 800edc0:	4610      	mov	r0, r2
 800edc2:	4798      	blx	r3
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <Mag_init+0x2c>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800edca:	4b09      	ldr	r3, [pc, #36]	; (800edf0 <Mag_init+0x44>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	4908      	ldr	r1, [pc, #32]	; (800edf4 <Mag_init+0x48>)
 800edd2:	2002      	movs	r0, #2
 800edd4:	f004 fc00 	bl	80135d8 <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800edd8:	2000      	movs	r0, #0
 800edda:	f7f3 f94b 	bl	8002074 <actLed1State>
    magInit = 1;
 800edde:	4b06      	ldr	r3, [pc, #24]	; (800edf8 <Mag_init+0x4c>)
 800ede0:	2201      	movs	r2, #1
 800ede2:	701a      	strb	r2, [r3, #0]
}
 800ede4:	bf00      	nop
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	20001cb8 	.word	0x20001cb8
 800edec:	20000bb4 	.word	0x20000bb4
 800edf0:	200020c9 	.word	0x200020c9
 800edf4:	08026490 	.word	0x08026490
 800edf8:	20001d90 	.word	0x20001d90

0800edfc <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(magADC)) {
 800ee04:	4b64      	ldr	r3, [pc, #400]	; (800ef98 <taskMagGetAdc+0x19c>)
 800ee06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee08:	4864      	ldr	r0, [pc, #400]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ee0a:	4798      	blx	r3
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d104      	bne.n	800ee1c <taskMagGetAdc+0x20>
    	p_task->immediate = TRUE;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2201      	movs	r2, #1
 800ee16:	705a      	strb	r2, [r3, #1]
    	return 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	e0b8      	b.n	800ef8e <taskMagGetAdc+0x192>
    }

    if (f.CALIBRATE_MAG) {
 800ee1c:	4b60      	ldr	r3, [pc, #384]	; (800efa0 <taskMagGetAdc+0x1a4>)
 800ee1e:	7b9b      	ldrb	r3, [r3, #14]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d027      	beq.n	800ee74 <taskMagGetAdc+0x78>
        tCal = (*pif_act_timer1us)();
 800ee24:	4b5f      	ldr	r3, [pc, #380]	; (800efa4 <taskMagGetAdc+0x1a8>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4798      	blx	r3
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	4a5e      	ldr	r2, [pc, #376]	; (800efa8 <taskMagGetAdc+0x1ac>)
 800ee2e:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800ee30:	2300      	movs	r3, #0
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	e018      	b.n	800ee68 <taskMagGetAdc+0x6c>
            mcfg.magZero[axis] = 0;
 800ee36:	4a5d      	ldr	r2, [pc, #372]	; (800efac <taskMagGetAdc+0x1b0>)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	33b8      	adds	r3, #184	; 0xb8
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800ee42:	4a56      	ldr	r2, [pc, #344]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ee4a:	4a59      	ldr	r2, [pc, #356]	; (800efb0 <taskMagGetAdc+0x1b4>)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800ee52:	4a52      	ldr	r2, [pc, #328]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ee5a:	4a56      	ldr	r2, [pc, #344]	; (800efb4 <taskMagGetAdc+0x1b8>)
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	d9e3      	bls.n	800ee36 <taskMagGetAdc+0x3a>
        }
        f.CALIBRATE_MAG = 0;
 800ee6e:	4b4c      	ldr	r3, [pc, #304]	; (800efa0 <taskMagGetAdc+0x1a4>)
 800ee70:	2200      	movs	r2, #0
 800ee72:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800ee74:	4b50      	ldr	r3, [pc, #320]	; (800efb8 <taskMagGetAdc+0x1bc>)
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d026      	beq.n	800eeca <taskMagGetAdc+0xce>
        magADC[X] -= mcfg.magZero[X];
 800ee7c:	4b47      	ldr	r3, [pc, #284]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ee7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	4b49      	ldr	r3, [pc, #292]	; (800efac <taskMagGetAdc+0x1b0>)
 800ee86:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	b21a      	sxth	r2, r3
 800ee92:	4b42      	ldr	r3, [pc, #264]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ee94:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800ee96:	4b41      	ldr	r3, [pc, #260]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ee98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	4b43      	ldr	r3, [pc, #268]	; (800efac <taskMagGetAdc+0x1b0>)
 800eea0:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	b21a      	sxth	r2, r3
 800eeac:	4b3b      	ldr	r3, [pc, #236]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800eeae:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800eeb0:	4b3a      	ldr	r3, [pc, #232]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800eeb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	4b3c      	ldr	r3, [pc, #240]	; (800efac <taskMagGetAdc+0x1b0>)
 800eeba:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	b21a      	sxth	r2, r3
 800eec6:	4b35      	ldr	r3, [pc, #212]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800eec8:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800eeca:	4b37      	ldr	r3, [pc, #220]	; (800efa8 <taskMagGetAdc+0x1ac>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d05c      	beq.n	800ef8c <taskMagGetAdc+0x190>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800eed2:	4b34      	ldr	r3, [pc, #208]	; (800efa4 <taskMagGetAdc+0x1a8>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4798      	blx	r3
 800eed8:	4602      	mov	r2, r0
 800eeda:	4b33      	ldr	r3, [pc, #204]	; (800efa8 <taskMagGetAdc+0x1ac>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	4a36      	ldr	r2, [pc, #216]	; (800efbc <taskMagGetAdc+0x1c0>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d82f      	bhi.n	800ef46 <taskMagGetAdc+0x14a>
            actLed0Toggle();
 800eee6:	f7f3 f8af 	bl	8002048 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800eeea:	2300      	movs	r3, #0
 800eeec:	60fb      	str	r3, [r7, #12]
 800eeee:	e026      	b.n	800ef3e <taskMagGetAdc+0x142>
                if (magADC[axis] < magZeroTempMin[axis])
 800eef0:	4a2a      	ldr	r2, [pc, #168]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800eef8:	492d      	ldr	r1, [pc, #180]	; (800efb0 <taskMagGetAdc+0x1b4>)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	da07      	bge.n	800ef14 <taskMagGetAdc+0x118>
                    magZeroTempMin[axis] = magADC[axis];
 800ef04:	4a25      	ldr	r2, [pc, #148]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ef0c:	4a28      	ldr	r2, [pc, #160]	; (800efb0 <taskMagGetAdc+0x1b4>)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800ef14:	4a21      	ldr	r2, [pc, #132]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800ef1c:	4925      	ldr	r1, [pc, #148]	; (800efb4 <taskMagGetAdc+0x1b8>)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	dd07      	ble.n	800ef38 <taskMagGetAdc+0x13c>
                    magZeroTempMax[axis] = magADC[axis];
 800ef28:	4a1c      	ldr	r2, [pc, #112]	; (800ef9c <taskMagGetAdc+0x1a0>)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ef30:	4a20      	ldr	r2, [pc, #128]	; (800efb4 <taskMagGetAdc+0x1b8>)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d9d5      	bls.n	800eef0 <taskMagGetAdc+0xf4>
 800ef44:	e022      	b.n	800ef8c <taskMagGetAdc+0x190>
            }
        } else {
            tCal = 0;
 800ef46:	4b18      	ldr	r3, [pc, #96]	; (800efa8 <taskMagGetAdc+0x1ac>)
 800ef48:	2200      	movs	r2, #0
 800ef4a:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	60fb      	str	r3, [r7, #12]
 800ef50:	e015      	b.n	800ef7e <taskMagGetAdc+0x182>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800ef52:	4a17      	ldr	r2, [pc, #92]	; (800efb0 <taskMagGetAdc+0x1b4>)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	4a15      	ldr	r2, [pc, #84]	; (800efb4 <taskMagGetAdc+0x1b8>)
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ef64:	440b      	add	r3, r1
 800ef66:	0fda      	lsrs	r2, r3, #31
 800ef68:	4413      	add	r3, r2
 800ef6a:	105b      	asrs	r3, r3, #1
 800ef6c:	b219      	sxth	r1, r3
 800ef6e:	4a0f      	ldr	r2, [pc, #60]	; (800efac <taskMagGetAdc+0x1b0>)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	33b8      	adds	r3, #184	; 0xb8
 800ef74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d9e6      	bls.n	800ef52 <taskMagGetAdc+0x156>
            writeEEPROM(1, true);
 800ef84:	2101      	movs	r1, #1
 800ef86:	2001      	movs	r0, #1
 800ef88:	f7f7 fc2c 	bl	80067e4 <writeEEPROM>
        }
    }
    return 0;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	20001cb8 	.word	0x20001cb8
 800ef9c:	20001718 	.word	0x20001718
 800efa0:	20001980 	.word	0x20001980
 800efa4:	200020e8 	.word	0x200020e8
 800efa8:	20001ec8 	.word	0x20001ec8
 800efac:	20000bb4 	.word	0x20000bb4
 800efb0:	20001ecc 	.word	0x20001ecc
 800efb4:	20001ed4 	.word	0x20001ed4
 800efb8:	20001d90 	.word	0x20001d90
 800efbc:	01c9c37f 	.word	0x01c9c37f

0800efc0 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800efce:	dd02      	ble.n	800efd6 <getSonarDistance+0x16>
		distance = -1;
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295
 800efd4:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800efd6:	4a0d      	ldr	r2, [pc, #52]	; (800f00c <getSonarDistance+0x4c>)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800efdc:	4b0c      	ldr	r3, [pc, #48]	; (800f010 <getSonarDistance+0x50>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f1 fa5d 	bl	80004a0 <__aeabi_i2d>
 800efe6:	f04f 0200 	mov.w	r2, #0
 800efea:	4b0a      	ldr	r3, [pc, #40]	; (800f014 <getSonarDistance+0x54>)
 800efec:	f7f1 fbec 	bl	80007c8 <__aeabi_ddiv>
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4610      	mov	r0, r2
 800eff6:	4619      	mov	r1, r3
 800eff8:	f7f1 fd9e 	bl	8000b38 <__aeabi_d2f>
 800effc:	4603      	mov	r3, r0
 800effe:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f002:	eeb0 0a67 	vmov.f32	s0, s15
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	2000002c 	.word	0x2000002c
 800f010:	20001cb4 	.word	0x20001cb4
 800f014:	40590000 	.word	0x40590000

0800f018 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f020:	4b15      	ldr	r3, [pc, #84]	; (800f078 <getSonarDistanceFilter+0x60>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	1d3a      	adds	r2, r7, #4
 800f026:	4611      	mov	r1, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f006 f839 	bl	80150a0 <pifNoiseFilter_Process>
 800f02e:	4603      	mov	r3, r0
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f03a:	dd02      	ble.n	800f042 <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f03c:	f04f 33ff 	mov.w	r3, #4294967295
 800f040:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4a0d      	ldr	r2, [pc, #52]	; (800f07c <getSonarDistanceFilter+0x64>)
 800f046:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f048:	4b0d      	ldr	r3, [pc, #52]	; (800f080 <getSonarDistanceFilter+0x68>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7f1 fa27 	bl	80004a0 <__aeabi_i2d>
 800f052:	f04f 0200 	mov.w	r2, #0
 800f056:	4b0b      	ldr	r3, [pc, #44]	; (800f084 <getSonarDistanceFilter+0x6c>)
 800f058:	f7f1 fbb6 	bl	80007c8 <__aeabi_ddiv>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4610      	mov	r0, r2
 800f062:	4619      	mov	r1, r3
 800f064:	f7f1 fd68 	bl	8000b38 <__aeabi_d2f>
 800f068:	4603      	mov	r3, r0
 800f06a:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f06e:	eeb0 0a67 	vmov.f32	s0, s15
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20001d94 	.word	0x20001d94
 800f07c:	2000002c 	.word	0x2000002c
 800f080:	20001cb4 	.word	0x20001cb4
 800f084:	40590000 	.word	0x40590000

0800f088 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	460b      	mov	r3, r1
 800f092:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f094:	78fb      	ldrb	r3, [r7, #3]
 800f096:	2b01      	cmp	r3, #1
 800f098:	d002      	beq.n	800f0a0 <Sonar_init+0x18>
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d00b      	beq.n	800f0b6 <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f09e:	e01e      	b.n	800f0de <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f0a0:	2105      	movs	r1, #5
 800f0a2:	4820      	ldr	r0, [pc, #128]	; (800f124 <Sonar_init+0x9c>)
 800f0a4:	f006 f9ac 	bl	8015400 <pifNoiseFilterInt32_Init>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d014      	beq.n	800f0d8 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f0ae:	4b1e      	ldr	r3, [pc, #120]	; (800f128 <Sonar_init+0xa0>)
 800f0b0:	4a1c      	ldr	r2, [pc, #112]	; (800f124 <Sonar_init+0x9c>)
 800f0b2:	601a      	str	r2, [r3, #0]
		break;
 800f0b4:	e010      	b.n	800f0d8 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f0b6:	2107      	movs	r1, #7
 800f0b8:	481a      	ldr	r0, [pc, #104]	; (800f124 <Sonar_init+0x9c>)
 800f0ba:	f006 f9a1 	bl	8015400 <pifNoiseFilterInt32_Init>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00b      	beq.n	800f0dc <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f0c4:	4817      	ldr	r0, [pc, #92]	; (800f124 <Sonar_init+0x9c>)
 800f0c6:	f006 f9db 	bl	8015480 <pifNoiseFilterInt32_SetNoiseCancel>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d005      	beq.n	800f0dc <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f0d0:	4b15      	ldr	r3, [pc, #84]	; (800f128 <Sonar_init+0xa0>)
 800f0d2:	4a14      	ldr	r2, [pc, #80]	; (800f124 <Sonar_init+0x9c>)
 800f0d4:	601a      	str	r2, [r3, #0]
		break;
 800f0d6:	e001      	b.n	800f0dc <Sonar_init+0x54>
		break;
 800f0d8:	bf00      	nop
 800f0da:	e000      	b.n	800f0de <Sonar_init+0x56>
		break;
 800f0dc:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f0de:	4b12      	ldr	r3, [pc, #72]	; (800f128 <Sonar_init+0xa0>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d007      	beq.n	800f0f6 <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4910      	ldr	r1, [pc, #64]	; (800f12c <Sonar_init+0xa4>)
 800f0ea:	203c      	movs	r0, #60	; 0x3c
 800f0ec:	4798      	blx	r3
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d107      	bne.n	800f104 <Sonar_init+0x7c>
 800f0f4:	e013      	b.n	800f11e <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	490d      	ldr	r1, [pc, #52]	; (800f130 <Sonar_init+0xa8>)
 800f0fa:	203c      	movs	r0, #60	; 0x3c
 800f0fc:	4798      	blx	r3
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00b      	beq.n	800f11c <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f104:	2010      	movs	r0, #16
 800f106:	f7f7 ff1d 	bl	8006f44 <sensorsSet>
    sonarDistance = -1;
 800f10a:	4b0a      	ldr	r3, [pc, #40]	; (800f134 <Sonar_init+0xac>)
 800f10c:	f04f 32ff 	mov.w	r2, #4294967295
 800f110:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f112:	4909      	ldr	r1, [pc, #36]	; (800f138 <Sonar_init+0xb0>)
 800f114:	2002      	movs	r0, #2
 800f116:	f004 f9d1 	bl	80134bc <pifLog_Print>
 800f11a:	e000      	b.n	800f11e <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f11c:	bf00      	nop
#endif
}
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	20001edc 	.word	0x20001edc
 800f128:	20001d94 	.word	0x20001d94
 800f12c:	0800f019 	.word	0x0800f019
 800f130:	0800efc1 	.word	0x0800efc1
 800f134:	2000002c 	.word	0x2000002c
 800f138:	080264a0 	.word	0x080264a0

0800f13c <_Read8>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data);

static uint8_t _Read8(mspPortState_t* p_port)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
	uint8_t data = p_port->p_rx_packet[0];
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	73fb      	strb	r3, [r7, #15]
	p_port->p_rx_packet++;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f150:	1c5a      	adds	r2, r3, #1
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3714      	adds	r7, #20
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <_Read16>:

static uint16_t _Read16(mspPortState_t* p_port)
{
 800f164:	b480      	push	{r7}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
	uint16_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	b29a      	uxth	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f178:	3301      	adds	r3, #1
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	021b      	lsls	r3, r3, #8
 800f180:	b29b      	uxth	r3, r3
 800f182:	4413      	add	r3, r2
 800f184:	81fb      	strh	r3, [r7, #14]
	p_port->p_rx_packet += 2;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f18a:	1c9a      	adds	r2, r3, #2
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f190:	89fb      	ldrh	r3, [r7, #14]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr

0800f19e <_Read32>:

static uint16_t _Read32(mspPortState_t* p_port)
{
 800f19e:	b480      	push	{r7}
 800f1a0:	b085      	sub	sp, #20
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	021b      	lsls	r3, r3, #8
 800f1b8:	4413      	add	r3, r2
 800f1ba:	461a      	mov	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c0:	3302      	adds	r3, #2
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	041b      	lsls	r3, r3, #16
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1c6:	441a      	add	r2, r3
			((uint32_t)p_port->p_rx_packet[2] << 16) + ((uint32_t)p_port->p_rx_packet[3] << 24);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1cc:	3303      	adds	r3, #3
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	061b      	lsls	r3, r3, #24
	uint32_t data = p_port->p_rx_packet[0] + (p_port->p_rx_packet[1] << 8) +
 800f1d2:	4413      	add	r3, r2
 800f1d4:	60fb      	str	r3, [r7, #12]
	p_port->p_rx_packet += 4;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	651a      	str	r2, [r3, #80]	; 0x50
	return data;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	b29b      	uxth	r3, r3
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3714      	adds	r7, #20
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <_Serialize8>:

static void _Serialize8(mspPortState_t* p_port, uint8_t a)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	70fb      	strb	r3, [r7, #3]
    p_port->p_tx_packet[0] = a;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f202:	78fa      	ldrb	r2, [r7, #3]
 800f204:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet++;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f20c:	1c5a      	adds	r2, r3, #1
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f214:	bf00      	nop
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <_Serialize16>:

static void _Serialize16(mspPortState_t* p_port, int16_t a)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	807b      	strh	r3, [r7, #2]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f232:	887a      	ldrh	r2, [r7, #2]
 800f234:	b2d2      	uxtb	r2, r2
 800f236:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f238:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f23c:	121b      	asrs	r3, r3, #8
 800f23e:	b21a      	sxth	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f246:	3301      	adds	r3, #1
 800f248:	b2d2      	uxtb	r2, r2
 800f24a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 2;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f252:	1c9a      	adds	r2, r3, #2
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f25a:	bf00      	nop
 800f25c:	370c      	adds	r7, #12
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <_Serialize32>:

static void _Serialize32(mspPortState_t* p_port, uint32_t a)
{
 800f266:	b480      	push	{r7}
 800f268:	b083      	sub	sp, #12
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	6039      	str	r1, [r7, #0]
    p_port->p_tx_packet[0] = a & 0xFF;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	b2d2      	uxtb	r2, r2
 800f27a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[1] = (a >> 8) & 0xFF;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	0a1a      	lsrs	r2, r3, #8
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f286:	3301      	adds	r3, #1
 800f288:	b2d2      	uxtb	r2, r2
 800f28a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[2] = (a >> 16) & 0xFF;
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	0c1a      	lsrs	r2, r3, #16
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f296:	3302      	adds	r3, #2
 800f298:	b2d2      	uxtb	r2, r2
 800f29a:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet[3] = (a >> 24) & 0xFF;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	0e1a      	lsrs	r2, r3, #24
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2a6:	3303      	adds	r3, #3
 800f2a8:	b2d2      	uxtb	r2, r2
 800f2aa:	701a      	strb	r2, [r3, #0]
    p_port->p_tx_packet += 4;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2b2:	1d1a      	adds	r2, r3, #4
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800f2ba:	bf00      	nop
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <_SerializeStruct>:

static void _SerializeStruct(mspPortState_t* p_port, uint8_t *cb, uint8_t siz)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b085      	sub	sp, #20
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	60f8      	str	r0, [r7, #12]
 800f2ce:	60b9      	str	r1, [r7, #8]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	71fb      	strb	r3, [r7, #7]
    while (siz--)
 800f2d4:	e00b      	b.n	800f2ee <_SerializeStruct+0x28>
        *p_port->p_tx_packet++ = *cb++;
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	1c53      	adds	r3, r2, #1
 800f2da:	60bb      	str	r3, [r7, #8]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f2e2:	1c58      	adds	r0, r3, #1
 800f2e4:	68f9      	ldr	r1, [r7, #12]
 800f2e6:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f2ea:	7812      	ldrb	r2, [r2, #0]
 800f2ec:	701a      	strb	r2, [r3, #0]
    while (siz--)
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	1e5a      	subs	r2, r3, #1
 800f2f2:	71fa      	strb	r2, [r7, #7]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1ee      	bne.n	800f2d6 <_SerializeStruct+0x10>
}
 800f2f8:	bf00      	nop
 800f2fa:	bf00      	nop
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <_SerializeNames>:

static void _SerializeNames(mspPortState_t* p_port, const char *s)
{
 800f306:	b480      	push	{r7}
 800f308:	b085      	sub	sp, #20
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
 800f30e:	6039      	str	r1, [r7, #0]
    const char *c;
    for (c = s; *c; c++)
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	e00c      	b.n	800f330 <_SerializeNames+0x2a>
        *p_port->p_tx_packet++ = *c;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f31c:	1c59      	adds	r1, r3, #1
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	7812      	ldrb	r2, [r2, #0]
 800f328:	701a      	strb	r2, [r3, #0]
    for (c = s; *c; c++)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	3301      	adds	r3, #1
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1ee      	bne.n	800f316 <_SerializeNames+0x10>
}
 800f338:	bf00      	nop
 800f33a:	bf00      	nop
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr
	...

0800f348 <_SerializeBoxNamesReply>:

static int _SerializeBoxNamesReply(mspPortState_t* p_port)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b088      	sub	sp, #32
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
    int i, idx, j, flag = 1, count = 0, len;
 800f350:	2301      	movs	r3, #1
 800f352:	617b      	str	r3, [r7, #20]
 800f354:	2300      	movs	r3, #0
 800f356:	613b      	str	r3, [r7, #16]

reset:
    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f358:	2300      	movs	r3, #0
 800f35a:	61fb      	str	r3, [r7, #28]
 800f35c:	e03b      	b.n	800f3d6 <_SerializeBoxNamesReply+0x8e>
        idx = availableBoxes[i];
 800f35e:	4a26      	ldr	r2, [pc, #152]	; (800f3f8 <_SerializeBoxNamesReply+0xb0>)
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	4413      	add	r3, r2
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	60fb      	str	r3, [r7, #12]
        len = strlen(boxes[idx].boxName);
 800f368:	4924      	ldr	r1, [pc, #144]	; (800f3fc <_SerializeBoxNamesReply+0xb4>)
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	4613      	mov	r3, r2
 800f36e:	005b      	lsls	r3, r3, #1
 800f370:	4413      	add	r3, r2
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	440b      	add	r3, r1
 800f376:	3304      	adds	r3, #4
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7f0 ff36 	bl	80001ec <strlen>
 800f380:	4603      	mov	r3, r0
 800f382:	60bb      	str	r3, [r7, #8]
        if (flag) {
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d004      	beq.n	800f394 <_SerializeBoxNamesReply+0x4c>
            count += len;
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	4413      	add	r3, r2
 800f390:	613b      	str	r3, [r7, #16]
 800f392:	e01d      	b.n	800f3d0 <_SerializeBoxNamesReply+0x88>
        } else {
            for (j = 0; j < len; j++)
 800f394:	2300      	movs	r3, #0
 800f396:	61bb      	str	r3, [r7, #24]
 800f398:	e016      	b.n	800f3c8 <_SerializeBoxNamesReply+0x80>
                *p_port->p_tx_packet++ = boxes[idx].boxName[j];
 800f39a:	4918      	ldr	r1, [pc, #96]	; (800f3fc <_SerializeBoxNamesReply+0xb4>)
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	440b      	add	r3, r1
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	441a      	add	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f3b6:	1c58      	adds	r0, r3, #1
 800f3b8:	6879      	ldr	r1, [r7, #4]
 800f3ba:	f8c1 00d4 	str.w	r0, [r1, #212]	; 0xd4
 800f3be:	7812      	ldrb	r2, [r2, #0]
 800f3c0:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < len; j++)
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	61bb      	str	r3, [r7, #24]
 800f3c8:	69ba      	ldr	r2, [r7, #24]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	dbe4      	blt.n	800f39a <_SerializeBoxNamesReply+0x52>
    for (i = 0; i < numberBoxItems; i++) {
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	61fb      	str	r3, [r7, #28]
 800f3d6:	4b0a      	ldr	r3, [pc, #40]	; (800f400 <_SerializeBoxNamesReply+0xb8>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	dbbd      	blt.n	800f35e <_SerializeBoxNamesReply+0x16>
        }
    }

    if (flag) {
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <_SerializeBoxNamesReply+0xa6>
        flag = 0;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	617b      	str	r3, [r7, #20]
        goto reset;
 800f3ec:	e7b4      	b.n	800f358 <_SerializeBoxNamesReply+0x10>
    }
    return count;
 800f3ee:	693b      	ldr	r3, [r7, #16]
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3720      	adds	r7, #32
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20001efc 	.word	0x20001efc
 800f3fc:	0802816c 	.word	0x0802816c
 800f400:	20001f15 	.word	0x20001f15

0800f404 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	4603      	mov	r3, r0
 800f40c:	6039      	str	r1, [r7, #0]
 800f40e:	71fb      	strb	r3, [r7, #7]
 800f410:	4613      	mov	r3, r2
 800f412:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX);
 800f414:	79fb      	ldrb	r3, [r7, #7]
 800f416:	2203      	movs	r2, #3
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7f2 ffe4 	bl	80023e8 <uartOpen>
 800f420:	4603      	mov	r3, r0
 800f422:	4a92      	ldr	r2, [pc, #584]	; (800f66c <serialInit+0x268>)
 800f424:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f426:	4b91      	ldr	r3, [pc, #580]	; (800f66c <serialInit+0x268>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a91      	ldr	r2, [pc, #580]	; (800f670 <serialInit+0x26c>)
 800f42c:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f42e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f432:	4990      	ldr	r1, [pc, #576]	; (800f674 <serialInit+0x270>)
 800f434:	4890      	ldr	r0, [pc, #576]	; (800f678 <serialInit+0x274>)
 800f436:	f008 f931 	bl	801769c <pifMsp_Init>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 810f 	beq.w	800f660 <serialInit+0x25c>
    ports[0].pif_msp.evt_receive = evtMspReceive;
 800f442:	4b8b      	ldr	r3, [pc, #556]	; (800f670 <serialInit+0x26c>)
 800f444:	4a8d      	ldr	r2, [pc, #564]	; (800f67c <serialInit+0x278>)
 800f446:	605a      	str	r2, [r3, #4]
    ports[0].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f448:	4b89      	ldr	r3, [pc, #548]	; (800f670 <serialInit+0x26c>)
 800f44a:	4a8d      	ldr	r2, [pc, #564]	; (800f680 <serialInit+0x27c>)
 800f44c:	609a      	str	r2, [r3, #8]
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f44e:	4b87      	ldr	r3, [pc, #540]	; (800f66c <serialInit+0x268>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3304      	adds	r3, #4
 800f454:	4619      	mov	r1, r3
 800f456:	4888      	ldr	r0, [pc, #544]	; (800f678 <serialInit+0x274>)
 800f458:	f008 f9ae 	bl	80177b8 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f45c:	4b83      	ldr	r3, [pc, #524]	; (800f66c <serialInit+0x268>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	3304      	adds	r3, #4
 800f462:	4618      	mov	r0, r3
 800f464:	f7f3 f8f2 	bl	800264c <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f468:	79bb      	ldrb	r3, [r7, #6]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d02c      	beq.n	800f4c8 <serialInit+0xc4>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX);
 800f46e:	79bb      	ldrb	r3, [r7, #6]
 800f470:	2203      	movs	r2, #3
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f7f2 ffb7 	bl	80023e8 <uartOpen>
 800f47a:	4603      	mov	r3, r0
 800f47c:	4a7b      	ldr	r2, [pc, #492]	; (800f66c <serialInit+0x268>)
 800f47e:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f480:	4b7a      	ldr	r3, [pc, #488]	; (800f66c <serialInit+0x268>)
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	4a7a      	ldr	r2, [pc, #488]	; (800f670 <serialInit+0x26c>)
 800f486:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f48a:	f240 1211 	movw	r2, #273	; 0x111
 800f48e:	4979      	ldr	r1, [pc, #484]	; (800f674 <serialInit+0x270>)
 800f490:	487c      	ldr	r0, [pc, #496]	; (800f684 <serialInit+0x280>)
 800f492:	f008 f903 	bl	801769c <pifMsp_Init>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 80e3 	beq.w	800f664 <serialInit+0x260>
        ports[1].pif_msp.evt_receive = evtMspReceive;
 800f49e:	4b74      	ldr	r3, [pc, #464]	; (800f670 <serialInit+0x26c>)
 800f4a0:	4a76      	ldr	r2, [pc, #472]	; (800f67c <serialInit+0x278>)
 800f4a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        ports[1].pif_msp.evt_other_packet = evtMspOtherPacket;
 800f4a6:	4b72      	ldr	r3, [pc, #456]	; (800f670 <serialInit+0x26c>)
 800f4a8:	4a75      	ldr	r2, [pc, #468]	; (800f680 <serialInit+0x27c>)
 800f4aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f4ae:	4b6f      	ldr	r3, [pc, #444]	; (800f66c <serialInit+0x268>)
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4873      	ldr	r0, [pc, #460]	; (800f684 <serialInit+0x280>)
 800f4b8:	f008 f97e 	bl	80177b8 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f4bc:	4b6b      	ldr	r3, [pc, #428]	; (800f66c <serialInit+0x268>)
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	3304      	adds	r3, #4
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7f3 f8c2 	bl	800264c <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f4c8:	2219      	movs	r2, #25
 800f4ca:	21ff      	movs	r1, #255	; 0xff
 800f4cc:	486e      	ldr	r0, [pc, #440]	; (800f688 <serialInit+0x284>)
 800f4ce:	f012 fd15 	bl	8021efc <memset>

    idx = 0;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	1c5a      	adds	r2, r3, #1
 800f4da:	60fa      	str	r2, [r7, #12]
 800f4dc:	4a6a      	ldr	r2, [pc, #424]	; (800f688 <serialInit+0x284>)
 800f4de:	2100      	movs	r1, #0
 800f4e0:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f4e2:	2002      	movs	r0, #2
 800f4e4:	f7f7 fd18 	bl	8006f18 <sensors>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00b      	beq.n	800f506 <serialInit+0x102>
        availableBoxes[idx++] = BOXANGLE;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	60fa      	str	r2, [r7, #12]
 800f4f4:	4a64      	ldr	r2, [pc, #400]	; (800f688 <serialInit+0x284>)
 800f4f6:	2101      	movs	r1, #1
 800f4f8:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	60fa      	str	r2, [r7, #12]
 800f500:	4a61      	ldr	r2, [pc, #388]	; (800f688 <serialInit+0x284>)
 800f502:	2102      	movs	r1, #2
 800f504:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f506:	2004      	movs	r0, #4
 800f508:	f7f7 fd06 	bl	8006f18 <sensors>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d012      	beq.n	800f538 <serialInit+0x134>
        availableBoxes[idx++] = BOXBARO;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	1c5a      	adds	r2, r3, #1
 800f516:	60fa      	str	r2, [r7, #12]
 800f518:	4a5b      	ldr	r2, [pc, #364]	; (800f688 <serialInit+0x284>)
 800f51a:	2103      	movs	r1, #3
 800f51c:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f51e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f522:	f7f7 fd41 	bl	8006fa8 <feature>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d005      	beq.n	800f538 <serialInit+0x134>
            availableBoxes[idx++] = BOXVARIO;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	60fa      	str	r2, [r7, #12]
 800f532:	4a55      	ldr	r2, [pc, #340]	; (800f688 <serialInit+0x284>)
 800f534:	2104      	movs	r1, #4
 800f536:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f538:	2002      	movs	r0, #2
 800f53a:	f7f7 fced 	bl	8006f18 <sensors>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <serialInit+0x14c>
 800f544:	2008      	movs	r0, #8
 800f546:	f7f7 fce7 	bl	8006f18 <sensors>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d011      	beq.n	800f574 <serialInit+0x170>
        availableBoxes[idx++] = BOXMAG;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	60fa      	str	r2, [r7, #12]
 800f556:	4a4c      	ldr	r2, [pc, #304]	; (800f688 <serialInit+0x284>)
 800f558:	2105      	movs	r1, #5
 800f55a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	60fa      	str	r2, [r7, #12]
 800f562:	4a49      	ldr	r2, [pc, #292]	; (800f688 <serialInit+0x284>)
 800f564:	2106      	movs	r1, #6
 800f566:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	60fa      	str	r2, [r7, #12]
 800f56e:	4a46      	ldr	r2, [pc, #280]	; (800f688 <serialInit+0x284>)
 800f570:	2107      	movs	r1, #7
 800f572:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f574:	2020      	movs	r0, #32
 800f576:	f7f7 fd17 	bl	8006fa8 <feature>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d005      	beq.n	800f58c <serialInit+0x188>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	60fa      	str	r2, [r7, #12]
 800f586:	4a40      	ldr	r2, [pc, #256]	; (800f688 <serialInit+0x284>)
 800f588:	2108      	movs	r1, #8
 800f58a:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f58c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f590:	f7f7 fd0a 	bl	8006fa8 <feature>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00b      	beq.n	800f5b2 <serialInit+0x1ae>
        availableBoxes[idx++] = BOXGPSHOME;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	1c5a      	adds	r2, r3, #1
 800f59e:	60fa      	str	r2, [r7, #12]
 800f5a0:	4a39      	ldr	r2, [pc, #228]	; (800f688 <serialInit+0x284>)
 800f5a2:	210a      	movs	r1, #10
 800f5a4:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	60fa      	str	r2, [r7, #12]
 800f5ac:	4a36      	ldr	r2, [pc, #216]	; (800f688 <serialInit+0x284>)
 800f5ae:	210b      	movs	r1, #11
 800f5b0:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f5b2:	4b36      	ldr	r3, [pc, #216]	; (800f68c <serialInit+0x288>)
 800f5b4:	7c1b      	ldrb	r3, [r3, #16]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00b      	beq.n	800f5d2 <serialInit+0x1ce>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	60fa      	str	r2, [r7, #12]
 800f5c0:	4a31      	ldr	r2, [pc, #196]	; (800f688 <serialInit+0x284>)
 800f5c2:	210c      	movs	r1, #12
 800f5c4:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	60fa      	str	r2, [r7, #12]
 800f5cc:	4a2e      	ldr	r2, [pc, #184]	; (800f688 <serialInit+0x284>)
 800f5ce:	2118      	movs	r1, #24
 800f5d0:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	60fa      	str	r2, [r7, #12]
 800f5d8:	4a2b      	ldr	r2, [pc, #172]	; (800f688 <serialInit+0x284>)
 800f5da:	210d      	movs	r1, #13
 800f5dc:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f5de:	2004      	movs	r0, #4
 800f5e0:	f7f7 fce2 	bl	8006fa8 <feature>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d005      	beq.n	800f5f6 <serialInit+0x1f2>
        availableBoxes[idx++] = BOXCALIB;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	60fa      	str	r2, [r7, #12]
 800f5f0:	4a25      	ldr	r2, [pc, #148]	; (800f688 <serialInit+0x284>)
 800f5f2:	2111      	movs	r1, #17
 800f5f4:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	60fa      	str	r2, [r7, #12]
 800f5fc:	4a22      	ldr	r2, [pc, #136]	; (800f688 <serialInit+0x284>)
 800f5fe:	2113      	movs	r1, #19
 800f600:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f602:	4b23      	ldr	r3, [pc, #140]	; (800f690 <serialInit+0x28c>)
 800f604:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f608:	2b00      	cmp	r3, #0
 800f60a:	bf14      	ite	ne
 800f60c:	2301      	movne	r3, #1
 800f60e:	2300      	moveq	r3, #0
 800f610:	b2db      	uxtb	r3, r3
 800f612:	4618      	mov	r0, r3
 800f614:	f7f7 fcc8 	bl	8006fa8 <feature>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d005      	beq.n	800f62a <serialInit+0x226>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	60fa      	str	r2, [r7, #12]
 800f624:	4a18      	ldr	r2, [pc, #96]	; (800f688 <serialInit+0x284>)
 800f626:	2114      	movs	r1, #20
 800f628:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f62a:	4b19      	ldr	r3, [pc, #100]	; (800f690 <serialInit+0x28c>)
 800f62c:	795b      	ldrb	r3, [r3, #5]
 800f62e:	2b18      	cmp	r3, #24
 800f630:	d111      	bne.n	800f656 <serialInit+0x252>
        availableBoxes[idx++] = BOXSERVO1;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	60fa      	str	r2, [r7, #12]
 800f638:	4a13      	ldr	r2, [pc, #76]	; (800f688 <serialInit+0x284>)
 800f63a:	2115      	movs	r1, #21
 800f63c:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	60fa      	str	r2, [r7, #12]
 800f644:	4a10      	ldr	r2, [pc, #64]	; (800f688 <serialInit+0x284>)
 800f646:	2116      	movs	r1, #22
 800f648:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	60fa      	str	r2, [r7, #12]
 800f650:	4a0d      	ldr	r2, [pc, #52]	; (800f688 <serialInit+0x284>)
 800f652:	2117      	movs	r1, #23
 800f654:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	4b0e      	ldr	r3, [pc, #56]	; (800f694 <serialInit+0x290>)
 800f65c:	701a      	strb	r2, [r3, #0]
 800f65e:	e002      	b.n	800f666 <serialInit+0x262>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f660:	bf00      	nop
 800f662:	e000      	b.n	800f666 <serialInit+0x262>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f664:	bf00      	nop
}
 800f666:	3710      	adds	r7, #16
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	20000afc 	.word	0x20000afc
 800f670:	20001f18 	.word	0x20001f18
 800f674:	20001b5c 	.word	0x20001b5c
 800f678:	20001f1c 	.word	0x20001f1c
 800f67c:	0800f699 	.word	0x0800f699
 800f680:	080112ad 	.word	0x080112ad
 800f684:	20001ff4 	.word	0x20001ff4
 800f688:	20001efc 	.word	0x20001efc
 800f68c:	20001980 	.word	0x20001980
 800f690:	20000bb4 	.word	0x20000bb4
 800f694:	20001f15 	.word	0x20001f15

0800f698 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet)
{
 800f698:	b590      	push	{r4, r7, lr}
 800f69a:	b091      	sub	sp, #68	; 0x44
 800f69c:	af02      	add	r7, sp, #8
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f6ae:	4be7      	ldr	r3, [pc, #924]	; (800fa4c <evtMspReceive+0x3b4>)
 800f6b0:	61fb      	str	r3, [r7, #28]
    mspPortState_t* p_port = &ports[PIF_ID_MSP_2_IDX(p_owner->_id)];
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	891b      	ldrh	r3, [r3, #8]
 800f6b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f6ba:	22d8      	movs	r2, #216	; 0xd8
 800f6bc:	fb02 f303 	mul.w	r3, r2, r3
 800f6c0:	4ae3      	ldr	r2, [pc, #908]	; (800fa50 <evtMspReceive+0x3b8>)
 800f6c2:	4413      	add	r3, r2
 800f6c4:	61bb      	str	r3, [r7, #24]

    p_port->p_rx_packet = p_packet->p_data;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	651a      	str	r2, [r3, #80]	; 0x50
    p_port->p_tx_packet = p_port->tx_packet;
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    switch (p_packet->command) {
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	3b40      	subs	r3, #64	; 0x40
 800f6e0:	2bbe      	cmp	r3, #190	; 0xbe
 800f6e2:	f201 85d3 	bhi.w	801128c <evtMspReceive+0x1bf4>
 800f6e6:	a201      	add	r2, pc, #4	; (adr r2, 800f6ec <evtMspReceive+0x54>)
 800f6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ec:	080111c5 	.word	0x080111c5
 800f6f0:	080111fd 	.word	0x080111fd
 800f6f4:	080110dd 	.word	0x080110dd
 800f6f8:	08010f59 	.word	0x08010f59
 800f6fc:	08011235 	.word	0x08011235
 800f700:	08011249 	.word	0x08011249
 800f704:	0801128d 	.word	0x0801128d
 800f708:	0801128d 	.word	0x0801128d
 800f70c:	0801128d 	.word	0x0801128d
 800f710:	0801128d 	.word	0x0801128d
 800f714:	0801128d 	.word	0x0801128d
 800f718:	0801128d 	.word	0x0801128d
 800f71c:	0801128d 	.word	0x0801128d
 800f720:	0801128d 	.word	0x0801128d
 800f724:	0801128d 	.word	0x0801128d
 800f728:	0801128d 	.word	0x0801128d
 800f72c:	0801128d 	.word	0x0801128d
 800f730:	0801128d 	.word	0x0801128d
 800f734:	0801128d 	.word	0x0801128d
 800f738:	0801128d 	.word	0x0801128d
 800f73c:	0801128d 	.word	0x0801128d
 800f740:	0801128d 	.word	0x0801128d
 800f744:	0801128d 	.word	0x0801128d
 800f748:	0801128d 	.word	0x0801128d
 800f74c:	0801128d 	.word	0x0801128d
 800f750:	0801128d 	.word	0x0801128d
 800f754:	0801128d 	.word	0x0801128d
 800f758:	0801128d 	.word	0x0801128d
 800f75c:	0801128d 	.word	0x0801128d
 800f760:	0801128d 	.word	0x0801128d
 800f764:	0801128d 	.word	0x0801128d
 800f768:	0801128d 	.word	0x0801128d
 800f76c:	0801128d 	.word	0x0801128d
 800f770:	0801128d 	.word	0x0801128d
 800f774:	0801128d 	.word	0x0801128d
 800f778:	0801128d 	.word	0x0801128d
 800f77c:	0800fdff 	.word	0x0800fdff
 800f780:	0800fe37 	.word	0x0800fe37
 800f784:	0800ffd5 	.word	0x0800ffd5
 800f788:	080100b9 	.word	0x080100b9
 800f78c:	080105c5 	.word	0x080105c5
 800f790:	080105e3 	.word	0x080105e3
 800f794:	08010629 	.word	0x08010629
 800f798:	08010697 	.word	0x08010697
 800f79c:	080106d9 	.word	0x080106d9
 800f7a0:	0801071d 	.word	0x0801071d
 800f7a4:	0801074b 	.word	0x0801074b
 800f7a8:	0801080b 	.word	0x0801080b
 800f7ac:	0801087f 	.word	0x0801087f
 800f7b0:	08010975 	.word	0x08010975
 800f7b4:	08010a61 	.word	0x08010a61
 800f7b8:	08010b69 	.word	0x08010b69
 800f7bc:	080109c5 	.word	0x080109c5
 800f7c0:	08010959 	.word	0x08010959
 800f7c4:	08010bbf 	.word	0x08010bbf
 800f7c8:	080109e5 	.word	0x080109e5
 800f7cc:	080100d7 	.word	0x080100d7
 800f7d0:	0801128d 	.word	0x0801128d
 800f7d4:	0801128d 	.word	0x0801128d
 800f7d8:	0801041f 	.word	0x0801041f
 800f7dc:	0801128d 	.word	0x0801128d
 800f7e0:	0801128d 	.word	0x0801128d
 800f7e4:	0801128d 	.word	0x0801128d
 800f7e8:	0801128d 	.word	0x0801128d
 800f7ec:	0801128d 	.word	0x0801128d
 800f7f0:	0801128d 	.word	0x0801128d
 800f7f4:	0801128d 	.word	0x0801128d
 800f7f8:	0801128d 	.word	0x0801128d
 800f7fc:	0801128d 	.word	0x0801128d
 800f800:	0801128d 	.word	0x0801128d
 800f804:	0801128d 	.word	0x0801128d
 800f808:	0801128d 	.word	0x0801128d
 800f80c:	0801128d 	.word	0x0801128d
 800f810:	0801128d 	.word	0x0801128d
 800f814:	0801128d 	.word	0x0801128d
 800f818:	0801128d 	.word	0x0801128d
 800f81c:	0801128d 	.word	0x0801128d
 800f820:	0801128d 	.word	0x0801128d
 800f824:	0801128d 	.word	0x0801128d
 800f828:	0801128d 	.word	0x0801128d
 800f82c:	0801128d 	.word	0x0801128d
 800f830:	0801128d 	.word	0x0801128d
 800f834:	0801128d 	.word	0x0801128d
 800f838:	0801128d 	.word	0x0801128d
 800f83c:	0801128d 	.word	0x0801128d
 800f840:	0801128d 	.word	0x0801128d
 800f844:	0801128d 	.word	0x0801128d
 800f848:	0801128d 	.word	0x0801128d
 800f84c:	0801128d 	.word	0x0801128d
 800f850:	0801128d 	.word	0x0801128d
 800f854:	0801128d 	.word	0x0801128d
 800f858:	0801128d 	.word	0x0801128d
 800f85c:	0801128d 	.word	0x0801128d
 800f860:	0801128d 	.word	0x0801128d
 800f864:	0801128d 	.word	0x0801128d
 800f868:	0801128d 	.word	0x0801128d
 800f86c:	08010df7 	.word	0x08010df7
 800f870:	0801128d 	.word	0x0801128d
 800f874:	0801128d 	.word	0x0801128d
 800f878:	0801128d 	.word	0x0801128d
 800f87c:	08010e2d 	.word	0x08010e2d
 800f880:	0801128d 	.word	0x0801128d
 800f884:	08010eed 	.word	0x08010eed
 800f888:	0801128d 	.word	0x0801128d
 800f88c:	0801128d 	.word	0x0801128d
 800f890:	0801128d 	.word	0x0801128d
 800f894:	0801128d 	.word	0x0801128d
 800f898:	0801128d 	.word	0x0801128d
 800f89c:	0801128d 	.word	0x0801128d
 800f8a0:	0801128d 	.word	0x0801128d
 800f8a4:	0801128d 	.word	0x0801128d
 800f8a8:	0801128d 	.word	0x0801128d
 800f8ac:	0801128d 	.word	0x0801128d
 800f8b0:	0801128d 	.word	0x0801128d
 800f8b4:	0801128d 	.word	0x0801128d
 800f8b8:	0801128d 	.word	0x0801128d
 800f8bc:	0801128d 	.word	0x0801128d
 800f8c0:	0801128d 	.word	0x0801128d
 800f8c4:	0801128d 	.word	0x0801128d
 800f8c8:	0801128d 	.word	0x0801128d
 800f8cc:	0801128d 	.word	0x0801128d
 800f8d0:	0801128d 	.word	0x0801128d
 800f8d4:	0801128d 	.word	0x0801128d
 800f8d8:	0801128d 	.word	0x0801128d
 800f8dc:	0801128d 	.word	0x0801128d
 800f8e0:	0801128d 	.word	0x0801128d
 800f8e4:	0801128d 	.word	0x0801128d
 800f8e8:	0801128d 	.word	0x0801128d
 800f8ec:	0801128d 	.word	0x0801128d
 800f8f0:	0801128d 	.word	0x0801128d
 800f8f4:	0801128d 	.word	0x0801128d
 800f8f8:	0801128d 	.word	0x0801128d
 800f8fc:	0801128d 	.word	0x0801128d
 800f900:	0801128d 	.word	0x0801128d
 800f904:	0801128d 	.word	0x0801128d
 800f908:	0801128d 	.word	0x0801128d
 800f90c:	0800f9e9 	.word	0x0800f9e9
 800f910:	0800fa5d 	.word	0x0800fa5d
 800f914:	0800facf 	.word	0x0800facf
 800f918:	0800fb65 	.word	0x0800fb65
 800f91c:	0800fba9 	.word	0x0800fba9
 800f920:	08010cff 	.word	0x08010cff
 800f924:	08010d1d 	.word	0x08010d1d
 800f928:	0800fc1d 	.word	0x0800fc1d
 800f92c:	08010ce3 	.word	0x08010ce3
 800f930:	08010c43 	.word	0x08010c43
 800f934:	0800fd9f 	.word	0x0800fd9f
 800f938:	0800fde1 	.word	0x0800fde1
 800f93c:	0801018b 	.word	0x0801018b
 800f940:	0801128d 	.word	0x0801128d
 800f944:	0800fd3f 	.word	0x0800fd3f
 800f948:	0801128d 	.word	0x0801128d
 800f94c:	080104f7 	.word	0x080104f7
 800f950:	0801128d 	.word	0x0801128d
 800f954:	0801128d 	.word	0x0801128d
 800f958:	0801128d 	.word	0x0801128d
 800f95c:	0801128d 	.word	0x0801128d
 800f960:	0801128d 	.word	0x0801128d
 800f964:	0801128d 	.word	0x0801128d
 800f968:	0801128d 	.word	0x0801128d
 800f96c:	0801128d 	.word	0x0801128d
 800f970:	0801128d 	.word	0x0801128d
 800f974:	0801128d 	.word	0x0801128d
 800f978:	0801128d 	.word	0x0801128d
 800f97c:	0801128d 	.word	0x0801128d
 800f980:	0801128d 	.word	0x0801128d
 800f984:	0801128d 	.word	0x0801128d
 800f988:	0801128d 	.word	0x0801128d
 800f98c:	0801128d 	.word	0x0801128d
 800f990:	0801128d 	.word	0x0801128d
 800f994:	0801128d 	.word	0x0801128d
 800f998:	0801128d 	.word	0x0801128d
 800f99c:	0801128d 	.word	0x0801128d
 800f9a0:	0801128d 	.word	0x0801128d
 800f9a4:	0801128d 	.word	0x0801128d
 800f9a8:	0800fa21 	.word	0x0800fa21
 800f9ac:	08010dc9 	.word	0x08010dc9
 800f9b0:	08010243 	.word	0x08010243
 800f9b4:	08010335 	.word	0x08010335
 800f9b8:	0801128d 	.word	0x0801128d
 800f9bc:	0801128d 	.word	0x0801128d
 800f9c0:	0801128d 	.word	0x0801128d
 800f9c4:	0801128d 	.word	0x0801128d
 800f9c8:	0801128d 	.word	0x0801128d
 800f9cc:	0801128d 	.word	0x0801128d
 800f9d0:	0801128d 	.word	0x0801128d
 800f9d4:	08010d39 	.word	0x08010d39
 800f9d8:	0801128d 	.word	0x0801128d
 800f9dc:	0801128d 	.word	0x0801128d
 800f9e0:	0801128d 	.word	0x0801128d
 800f9e4:	08010d61 	.word	0x08010d61
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ec:	e00b      	b.n	800fa06 <evtMspReceive+0x36e>
            rcData[i] = _Read16(p_port);
 800f9ee:	69b8      	ldr	r0, [r7, #24]
 800f9f0:	f7ff fbb8 	bl	800f164 <_Read16>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	b219      	sxth	r1, r3
 800f9f8:	4a16      	ldr	r2, [pc, #88]	; (800fa54 <evtMspReceive+0x3bc>)
 800f9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa02:	3301      	adds	r3, #1
 800fa04:	637b      	str	r3, [r7, #52]	; 0x34
 800fa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa08:	2b07      	cmp	r3, #7
 800fa0a:	d9f0      	bls.n	800f9ee <evtMspReceive+0x356>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	2200      	movs	r2, #0
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f007 fef6 	bl	8017804 <pifMsp_MakeAnswer>
        mspFrameRecieve();
 800fa18:	f7fe fc22 	bl	800e260 <mspFrameRecieve>
        break;
 800fa1c:	f001 bc3b 	b.w	8011296 <evtMspReceive+0x1bfe>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = _Read16(p_port);
 800fa20:	69b8      	ldr	r0, [r7, #24]
 800fa22:	f7ff fb9f 	bl	800f164 <_Read16>
 800fa26:	4603      	mov	r3, r0
 800fa28:	b21a      	sxth	r2, r3
 800fa2a:	4b0b      	ldr	r3, [pc, #44]	; (800fa58 <evtMspReceive+0x3c0>)
 800fa2c:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = _Read16(p_port);
 800fa2e:	69b8      	ldr	r0, [r7, #24]
 800fa30:	f7ff fb98 	bl	800f164 <_Read16>
 800fa34:	4603      	mov	r3, r0
 800fa36:	b21a      	sxth	r2, r3
 800fa38:	4b07      	ldr	r3, [pc, #28]	; (800fa58 <evtMspReceive+0x3c0>)
 800fa3a:	859a      	strh	r2, [r3, #44]	; 0x2c
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	2200      	movs	r2, #0
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f007 fede 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fa48:	f001 bc25 	b.w	8011296 <evtMspReceive+0x1bfe>
 800fa4c:	080265ac 	.word	0x080265ac
 800fa50:	20001f18 	.word	0x20001f18
 800fa54:	200019bc 	.word	0x200019bc
 800fa58:	20001120 	.word	0x20001120

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = _Read8(p_port);
 800fa5c:	69b8      	ldr	r0, [r7, #24]
 800fa5e:	f7ff fb6d 	bl	800f13c <_Read8>
 800fa62:	4603      	mov	r3, r0
 800fa64:	461a      	mov	r2, r3
 800fa66:	4bb7      	ldr	r3, [pc, #732]	; (800fd44 <evtMspReceive+0x6ac>)
 800fa68:	72da      	strb	r2, [r3, #11]
        GPS_numSat = _Read8(p_port);
 800fa6a:	69b8      	ldr	r0, [r7, #24]
 800fa6c:	f7ff fb66 	bl	800f13c <_Read8>
 800fa70:	4603      	mov	r3, r0
 800fa72:	461a      	mov	r2, r3
 800fa74:	4bb4      	ldr	r3, [pc, #720]	; (800fd48 <evtMspReceive+0x6b0>)
 800fa76:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = _Read32(p_port);
 800fa78:	69b8      	ldr	r0, [r7, #24]
 800fa7a:	f7ff fb90 	bl	800f19e <_Read32>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	461a      	mov	r2, r3
 800fa82:	4bb2      	ldr	r3, [pc, #712]	; (800fd4c <evtMspReceive+0x6b4>)
 800fa84:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = _Read32(p_port);
 800fa86:	69b8      	ldr	r0, [r7, #24]
 800fa88:	f7ff fb89 	bl	800f19e <_Read32>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	461a      	mov	r2, r3
 800fa90:	4bae      	ldr	r3, [pc, #696]	; (800fd4c <evtMspReceive+0x6b4>)
 800fa92:	605a      	str	r2, [r3, #4]
        GPS_altitude = _Read16(p_port);
 800fa94:	69b8      	ldr	r0, [r7, #24]
 800fa96:	f7ff fb65 	bl	800f164 <_Read16>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4bac      	ldr	r3, [pc, #688]	; (800fd50 <evtMspReceive+0x6b8>)
 800faa0:	801a      	strh	r2, [r3, #0]
        GPS_speed = _Read16(p_port);
 800faa2:	69b8      	ldr	r0, [r7, #24]
 800faa4:	f7ff fb5e 	bl	800f164 <_Read16>
 800faa8:	4603      	mov	r3, r0
 800faaa:	461a      	mov	r2, r3
 800faac:	4ba9      	ldr	r3, [pc, #676]	; (800fd54 <evtMspReceive+0x6bc>)
 800faae:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800fab0:	4ba9      	ldr	r3, [pc, #676]	; (800fd58 <evtMspReceive+0x6c0>)
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f043 0302 	orr.w	r3, r3, #2
 800fab8:	b2da      	uxtb	r2, r3
 800faba:	4ba7      	ldr	r3, [pc, #668]	; (800fd58 <evtMspReceive+0x6c0>)
 800fabc:	701a      	strb	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fabe:	2300      	movs	r3, #0
 800fac0:	2200      	movs	r2, #0
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f007 fe9d 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800faca:	f001 bbe4 	b.w	8011296 <evtMspReceive+0x1bfe>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800face:	2300      	movs	r3, #0
 800fad0:	637b      	str	r3, [r7, #52]	; 0x34
 800fad2:	e03c      	b.n	800fb4e <evtMspReceive+0x4b6>
            cfg.P8[i] = _Read8(p_port);
 800fad4:	69b8      	ldr	r0, [r7, #24]
 800fad6:	f7ff fb31 	bl	800f13c <_Read8>
 800fada:	4603      	mov	r3, r0
 800fadc:	4619      	mov	r1, r3
 800fade:	4a9f      	ldr	r2, [pc, #636]	; (800fd5c <evtMspReceive+0x6c4>)
 800fae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae2:	4413      	add	r3, r2
 800fae4:	3301      	adds	r3, #1
 800fae6:	460a      	mov	r2, r1
 800fae8:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = _Read8(p_port);
 800faea:	69b8      	ldr	r0, [r7, #24]
 800faec:	f7ff fb26 	bl	800f13c <_Read8>
 800faf0:	4603      	mov	r3, r0
 800faf2:	4619      	mov	r1, r3
 800faf4:	4a99      	ldr	r2, [pc, #612]	; (800fd5c <evtMspReceive+0x6c4>)
 800faf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf8:	4413      	add	r3, r2
 800fafa:	330b      	adds	r3, #11
 800fafc:	460a      	mov	r2, r1
 800fafe:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = _Read8(p_port);
 800fb00:	69b8      	ldr	r0, [r7, #24]
 800fb02:	f7ff fb1b 	bl	800f13c <_Read8>
 800fb06:	4603      	mov	r3, r0
 800fb08:	4619      	mov	r1, r3
 800fb0a:	4a94      	ldr	r2, [pc, #592]	; (800fd5c <evtMspReceive+0x6c4>)
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0e:	4413      	add	r3, r2
 800fb10:	3315      	adds	r3, #21
 800fb12:	460a      	mov	r2, r1
 800fb14:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800fb16:	4a91      	ldr	r2, [pc, #580]	; (800fd5c <evtMspReceive+0x6c4>)
 800fb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1a:	4413      	add	r3, r2
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	4618      	mov	r0, r3
 800fb22:	4a8e      	ldr	r2, [pc, #568]	; (800fd5c <evtMspReceive+0x6c4>)
 800fb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb26:	4413      	add	r3, r2
 800fb28:	330b      	adds	r3, #11
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	4a8b      	ldr	r2, [pc, #556]	; (800fd5c <evtMspReceive+0x6c4>)
 800fb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb32:	4413      	add	r3, r2
 800fb34:	3315      	adds	r3, #21
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	9100      	str	r1, [sp, #0]
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb40:	4987      	ldr	r1, [pc, #540]	; (800fd60 <evtMspReceive+0x6c8>)
 800fb42:	2002      	movs	r0, #2
 800fb44:	f003 fd48 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800fb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb50:	2b09      	cmp	r3, #9
 800fb52:	d9bf      	bls.n	800fad4 <evtMspReceive+0x43c>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fb54:	2300      	movs	r3, #0
 800fb56:	2200      	movs	r2, #0
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f007 fe52 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fb60:	f001 bb99 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fb64:	2300      	movs	r3, #0
 800fb66:	637b      	str	r3, [r7, #52]	; 0x34
 800fb68:	e010      	b.n	800fb8c <evtMspReceive+0x4f4>
            cfg.activate[availableBoxes[i]] = _Read16(p_port);
 800fb6a:	69b8      	ldr	r0, [r7, #24]
 800fb6c:	f7ff fafa 	bl	800f164 <_Read16>
 800fb70:	4603      	mov	r3, r0
 800fb72:	4619      	mov	r1, r3
 800fb74:	4a7b      	ldr	r2, [pc, #492]	; (800fd64 <evtMspReceive+0x6cc>)
 800fb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb78:	4413      	add	r3, r2
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	4a77      	ldr	r2, [pc, #476]	; (800fd5c <evtMspReceive+0x6c4>)
 800fb7e:	3312      	adds	r3, #18
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb88:	3301      	adds	r3, #1
 800fb8a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb8c:	4b76      	ldr	r3, [pc, #472]	; (800fd68 <evtMspReceive+0x6d0>)
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	461a      	mov	r2, r3
 800fb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d3e8      	bcc.n	800fb6a <evtMspReceive+0x4d2>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fb98:	2300      	movs	r3, #0
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f007 fe30 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fba4:	f001 bb77 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = _Read8(p_port);
 800fba8:	69b8      	ldr	r0, [r7, #24]
 800fbaa:	f7ff fac7 	bl	800f13c <_Read8>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4b6a      	ldr	r3, [pc, #424]	; (800fd5c <evtMspReceive+0x6c4>)
 800fbb4:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = _Read8(p_port);
 800fbb6:	69b8      	ldr	r0, [r7, #24]
 800fbb8:	f7ff fac0 	bl	800f13c <_Read8>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	4b66      	ldr	r3, [pc, #408]	; (800fd5c <evtMspReceive+0x6c4>)
 800fbc2:	f883 2020 	strb.w	r2, [r3, #32]
        _Read8(p_port); // Legacy pitch-roll rate, read but not set.
 800fbc6:	69b8      	ldr	r0, [r7, #24]
 800fbc8:	f7ff fab8 	bl	800f13c <_Read8>
        cfg.yawRate = _Read8(p_port);
 800fbcc:	69b8      	ldr	r0, [r7, #24]
 800fbce:	f7ff fab5 	bl	800f13c <_Read8>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	4b61      	ldr	r3, [pc, #388]	; (800fd5c <evtMspReceive+0x6c4>)
 800fbd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = _Read8(p_port);
 800fbdc:	69b8      	ldr	r0, [r7, #24]
 800fbde:	f7ff faad 	bl	800f13c <_Read8>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	4b5d      	ldr	r3, [pc, #372]	; (800fd5c <evtMspReceive+0x6c4>)
 800fbe8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = _Read8(p_port);
 800fbec:	69b8      	ldr	r0, [r7, #24]
 800fbee:	f7ff faa5 	bl	800f13c <_Read8>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	4b59      	ldr	r3, [pc, #356]	; (800fd5c <evtMspReceive+0x6c4>)
 800fbf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = _Read8(p_port);
 800fbfc:	69b8      	ldr	r0, [r7, #24]
 800fbfe:	f7ff fa9d 	bl	800f13c <_Read8>
 800fc02:	4603      	mov	r3, r0
 800fc04:	461a      	mov	r2, r3
 800fc06:	4b55      	ldr	r3, [pc, #340]	; (800fd5c <evtMspReceive+0x6c4>)
 800fc08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	2200      	movs	r2, #0
 800fc10:	6839      	ldr	r1, [r7, #0]
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f007 fdf6 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fc18:	f001 bb3d 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_MISC:
        tmp = _Read16(p_port);
 800fc1c:	69b8      	ldr	r0, [r7, #24]
 800fc1e:	f7ff faa1 	bl	800f164 <_Read16>
 800fc22:	4603      	mov	r3, r0
 800fc24:	613b      	str	r3, [r7, #16]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc2c:	d208      	bcs.n	800fc40 <evtMspReceive+0x5a8>
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fc34:	d904      	bls.n	800fc40 <evtMspReceive+0x5a8>
            mcfg.midrc = tmp;
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	b29a      	uxth	r2, r3
 800fc3a:	4b4c      	ldr	r3, [pc, #304]	; (800fd6c <evtMspReceive+0x6d4>)
 800fc3c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = _Read16(p_port);
 800fc40:	69b8      	ldr	r0, [r7, #24]
 800fc42:	f7ff fa8f 	bl	800f164 <_Read16>
 800fc46:	4603      	mov	r3, r0
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4b48      	ldr	r3, [pc, #288]	; (800fd6c <evtMspReceive+0x6d4>)
 800fc4c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = _Read16(p_port);
 800fc50:	69b8      	ldr	r0, [r7, #24]
 800fc52:	f7ff fa87 	bl	800f164 <_Read16>
 800fc56:	4603      	mov	r3, r0
 800fc58:	461a      	mov	r2, r3
 800fc5a:	4b44      	ldr	r3, [pc, #272]	; (800fd6c <evtMspReceive+0x6d4>)
 800fc5c:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = _Read16(p_port);
 800fc60:	69b8      	ldr	r0, [r7, #24]
 800fc62:	f7ff fa7f 	bl	800f164 <_Read16>
 800fc66:	4603      	mov	r3, r0
 800fc68:	461a      	mov	r2, r3
 800fc6a:	4b40      	ldr	r3, [pc, #256]	; (800fd6c <evtMspReceive+0x6d4>)
 800fc6c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = _Read16(p_port);
 800fc70:	69b8      	ldr	r0, [r7, #24]
 800fc72:	f7ff fa77 	bl	800f164 <_Read16>
 800fc76:	4603      	mov	r3, r0
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b38      	ldr	r3, [pc, #224]	; (800fd5c <evtMspReceive+0x6c4>)
 800fc7c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = _Read8(p_port);
 800fc80:	69b8      	ldr	r0, [r7, #24]
 800fc82:	f7ff fa5b 	bl	800f13c <_Read8>
 800fc86:	4603      	mov	r3, r0
 800fc88:	461a      	mov	r2, r3
 800fc8a:	4b38      	ldr	r3, [pc, #224]	; (800fd6c <evtMspReceive+0x6d4>)
 800fc8c:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = _Read8(p_port);
 800fc90:	69b8      	ldr	r0, [r7, #24]
 800fc92:	f7ff fa53 	bl	800f13c <_Read8>
 800fc96:	4603      	mov	r3, r0
 800fc98:	b25a      	sxtb	r2, r3
 800fc9a:	4b34      	ldr	r3, [pc, #208]	; (800fd6c <evtMspReceive+0x6d4>)
 800fc9c:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = _Read8(p_port);
 800fca0:	69b8      	ldr	r0, [r7, #24]
 800fca2:	f7ff fa4b 	bl	800f13c <_Read8>
 800fca6:	4603      	mov	r3, r0
 800fca8:	b25a      	sxtb	r2, r3
 800fcaa:	4b30      	ldr	r3, [pc, #192]	; (800fd6c <evtMspReceive+0x6d4>)
 800fcac:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = _Read8(p_port);
 800fcb0:	69b8      	ldr	r0, [r7, #24]
 800fcb2:	f7ff fa43 	bl	800f13c <_Read8>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4b2c      	ldr	r3, [pc, #176]	; (800fd6c <evtMspReceive+0x6d4>)
 800fcbc:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = _Read8(p_port);
 800fcc0:	69b8      	ldr	r0, [r7, #24]
 800fcc2:	f7ff fa3b 	bl	800f13c <_Read8>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	461a      	mov	r2, r3
 800fcca:	4b28      	ldr	r3, [pc, #160]	; (800fd6c <evtMspReceive+0x6d4>)
 800fccc:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        _Read8(p_port);
 800fcd0:	69b8      	ldr	r0, [r7, #24]
 800fcd2:	f7ff fa33 	bl	800f13c <_Read8>
        cfg.mag_declination = _Read16(p_port) * 10;
 800fcd6:	69b8      	ldr	r0, [r7, #24]
 800fcd8:	f7ff fa44 	bl	800f164 <_Read16>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	461a      	mov	r2, r3
 800fce0:	0092      	lsls	r2, r2, #2
 800fce2:	4413      	add	r3, r2
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	b21a      	sxth	r2, r3
 800fcea:	4b1c      	ldr	r3, [pc, #112]	; (800fd5c <evtMspReceive+0x6c4>)
 800fcec:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = _Read8(p_port);           // actual vbatscale as intended
 800fcee:	69b8      	ldr	r0, [r7, #24]
 800fcf0:	f7ff fa24 	bl	800f13c <_Read8>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4b1c      	ldr	r3, [pc, #112]	; (800fd6c <evtMspReceive+0x6d4>)
 800fcfa:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = _Read8(p_port);  // vbatlevel_warn1 in MWC2.3 GUI
 800fcfe:	69b8      	ldr	r0, [r7, #24]
 800fd00:	f7ff fa1c 	bl	800f13c <_Read8>
 800fd04:	4603      	mov	r3, r0
 800fd06:	461a      	mov	r2, r3
 800fd08:	4b18      	ldr	r3, [pc, #96]	; (800fd6c <evtMspReceive+0x6d4>)
 800fd0a:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = _Read8(p_port);  // vbatlevel_warn2 in MWC2.3 GUI
 800fd0e:	69b8      	ldr	r0, [r7, #24]
 800fd10:	f7ff fa14 	bl	800f13c <_Read8>
 800fd14:	4603      	mov	r3, r0
 800fd16:	461a      	mov	r2, r3
 800fd18:	4b14      	ldr	r3, [pc, #80]	; (800fd6c <evtMspReceive+0x6d4>)
 800fd1a:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = _Read8(p_port); // vbatlevel when buzzer starts to alert
 800fd1e:	69b8      	ldr	r0, [r7, #24]
 800fd20:	f7ff fa0c 	bl	800f13c <_Read8>
 800fd24:	4603      	mov	r3, r0
 800fd26:	461a      	mov	r2, r3
 800fd28:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <evtMspReceive+0x6d4>)
 800fd2a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd2e:	2300      	movs	r3, #0
 800fd30:	2200      	movs	r2, #0
 800fd32:	6839      	ldr	r1, [r7, #0]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f007 fd65 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fd3a:	f001 baac 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fd3e:	2300      	movs	r3, #0
 800fd40:	637b      	str	r3, [r7, #52]	; 0x34
 800fd42:	e021      	b.n	800fd88 <evtMspReceive+0x6f0>
 800fd44:	20001980 	.word	0x20001980
 800fd48:	20001a68 	.word	0x20001a68
 800fd4c:	20001a48 	.word	0x20001a48
 800fd50:	20001a6e 	.word	0x20001a6e
 800fd54:	20001a70 	.word	0x20001a70
 800fd58:	20001a72 	.word	0x20001a72
 800fd5c:	20001120 	.word	0x20001120
 800fd60:	080265b8 	.word	0x080265b8
 800fd64:	20001efc 	.word	0x20001efc
 800fd68:	20001f15 	.word	0x20001f15
 800fd6c:	20000bb4 	.word	0x20000bb4
            motor_disarmed[i] = _Read16(p_port);
 800fd70:	69b8      	ldr	r0, [r7, #24]
 800fd72:	f7ff f9f7 	bl	800f164 <_Read16>
 800fd76:	4603      	mov	r3, r0
 800fd78:	b219      	sxth	r1, r3
 800fd7a:	4aa6      	ldr	r2, [pc, #664]	; (8010014 <evtMspReceive+0x97c>)
 800fd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd84:	3301      	adds	r3, #1
 800fd86:	637b      	str	r3, [r7, #52]	; 0x34
 800fd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8a:	2b07      	cmp	r3, #7
 800fd8c:	d9f0      	bls.n	800fd70 <evtMspReceive+0x6d8>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fd8e:	2300      	movs	r3, #0
 800fd90:	2200      	movs	r2, #0
 800fd92:	6839      	ldr	r1, [r7, #0]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f007 fd35 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fd9a:	f001 ba7c 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fd9e:	4b9e      	ldr	r3, [pc, #632]	; (8010018 <evtMspReceive+0x980>)
 800fda0:	785b      	ldrb	r3, [r3, #1]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d114      	bne.n	800fdd0 <evtMspReceive+0x738>
            mcfg.current_profile = _Read8(p_port);
 800fda6:	69b8      	ldr	r0, [r7, #24]
 800fda8:	f7ff f9c8 	bl	800f13c <_Read8>
 800fdac:	4603      	mov	r3, r0
 800fdae:	461a      	mov	r2, r3
 800fdb0:	4b9a      	ldr	r3, [pc, #616]	; (801001c <evtMspReceive+0x984>)
 800fdb2:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fdb6:	4b99      	ldr	r3, [pc, #612]	; (801001c <evtMspReceive+0x984>)
 800fdb8:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d903      	bls.n	800fdc8 <evtMspReceive+0x730>
                mcfg.current_profile = 0;
 800fdc0:	4b96      	ldr	r3, [pc, #600]	; (801001c <evtMspReceive+0x984>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fdc8:	2100      	movs	r1, #0
 800fdca:	2000      	movs	r0, #0
 800fdcc:	f7f6 fd0a 	bl	80067e4 <writeEEPROM>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	6839      	ldr	r1, [r7, #0]
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f007 fd14 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fddc:	f001 ba5b 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_HEAD:
        magHold = _Read16(p_port);
 800fde0:	69b8      	ldr	r0, [r7, #24]
 800fde2:	f7ff f9bf 	bl	800f164 <_Read16>
 800fde6:	4603      	mov	r3, r0
 800fde8:	b21a      	sxth	r2, r3
 800fdea:	4b8d      	ldr	r3, [pc, #564]	; (8010020 <evtMspReceive+0x988>)
 800fdec:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 800fdee:	2300      	movs	r3, #0
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	6839      	ldr	r1, [r7, #0]
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f007 fd05 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fdfa:	f001 ba4c 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_IDENT:
        _Serialize8(p_port, VERSION);                    // multiwii version
 800fdfe:	21e7      	movs	r1, #231	; 0xe7
 800fe00:	69b8      	ldr	r0, [r7, #24]
 800fe02:	f7ff f9f5 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.mixerConfiguration);    // type of multicopter
 800fe06:	4b85      	ldr	r3, [pc, #532]	; (801001c <evtMspReceive+0x984>)
 800fe08:	795b      	ldrb	r3, [r3, #5]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	69b8      	ldr	r0, [r7, #24]
 800fe0e:	f7ff f9ef 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fe12:	2104      	movs	r1, #4
 800fe14:	69b8      	ldr	r0, [r7, #24]
 800fe16:	f7ff f9eb 	bl	800f1f0 <_Serialize8>
        _Serialize32(p_port, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fe1a:	4982      	ldr	r1, [pc, #520]	; (8010024 <evtMspReceive+0x98c>)
 800fe1c:	69b8      	ldr	r0, [r7, #24]
 800fe1e:	f7ff fa22 	bl	800f266 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800fe28:	2307      	movs	r3, #7
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f007 fce9 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800fe32:	f001 ba30 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_STATUS:
        _Serialize16(p_port, cycleTime);
 800fe36:	4b7c      	ldr	r3, [pc, #496]	; (8010028 <evtMspReceive+0x990>)
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	b21b      	sxth	r3, r3
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	69b8      	ldr	r0, [r7, #24]
 800fe40:	f7ff f9ee 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, g_i2c_port.error_count);
 800fe44:	4b79      	ldr	r3, [pc, #484]	; (801002c <evtMspReceive+0x994>)
 800fe46:	881b      	ldrh	r3, [r3, #0]
 800fe48:	b21b      	sxth	r3, r3
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	69b8      	ldr	r0, [r7, #24]
 800fe4e:	f7ff f9e7 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fe52:	2002      	movs	r0, #2
 800fe54:	f7f7 f860 	bl	8006f18 <sensors>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	b21c      	sxth	r4, r3
 800fe5c:	2004      	movs	r0, #4
 800fe5e:	f7f7 f85b 	bl	8006f18 <sensors>
 800fe62:	4603      	mov	r3, r0
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	b21b      	sxth	r3, r3
 800fe68:	4323      	orrs	r3, r4
 800fe6a:	b21c      	sxth	r4, r3
 800fe6c:	2008      	movs	r0, #8
 800fe6e:	f7f7 f853 	bl	8006f18 <sensors>
 800fe72:	4603      	mov	r3, r0
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	b21b      	sxth	r3, r3
 800fe78:	4323      	orrs	r3, r4
 800fe7a:	b21c      	sxth	r4, r3
 800fe7c:	2020      	movs	r0, #32
 800fe7e:	f7f7 f84b 	bl	8006f18 <sensors>
 800fe82:	4603      	mov	r3, r0
 800fe84:	00db      	lsls	r3, r3, #3
 800fe86:	b21b      	sxth	r3, r3
 800fe88:	4323      	orrs	r3, r4
 800fe8a:	b21c      	sxth	r4, r3
 800fe8c:	2010      	movs	r0, #16
 800fe8e:	f7f7 f843 	bl	8006f18 <sensors>
 800fe92:	4603      	mov	r3, r0
 800fe94:	011b      	lsls	r3, r3, #4
 800fe96:	b21b      	sxth	r3, r3
 800fe98:	4323      	orrs	r3, r4
 800fe9a:	b21b      	sxth	r3, r3
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	69b8      	ldr	r0, [r7, #24]
 800fea0:	f7ff f9be 	bl	800f220 <_Serialize16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fea4:	2300      	movs	r3, #0
 800fea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fea8:	4b5b      	ldr	r3, [pc, #364]	; (8010018 <evtMspReceive+0x980>)
 800feaa:	78db      	ldrb	r3, [r3, #3]
 800feac:	005a      	lsls	r2, r3, #1
 800feae:	4b5a      	ldr	r3, [pc, #360]	; (8010018 <evtMspReceive+0x980>)
 800feb0:	791b      	ldrb	r3, [r3, #4]
 800feb2:	009b      	lsls	r3, r3, #2
 800feb4:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800feb6:	4b58      	ldr	r3, [pc, #352]	; (8010018 <evtMspReceive+0x980>)
 800feb8:	799b      	ldrb	r3, [r3, #6]
 800feba:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800febc:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800febe:	4b56      	ldr	r3, [pc, #344]	; (8010018 <evtMspReceive+0x980>)
 800fec0:	795b      	ldrb	r3, [r3, #5]
 800fec2:	015b      	lsls	r3, r3, #5
 800fec4:	431a      	orrs	r2, r3
 800fec6:	4b54      	ldr	r3, [pc, #336]	; (8010018 <evtMspReceive+0x980>)
 800fec8:	7a5b      	ldrb	r3, [r3, #9]
 800feca:	019b      	lsls	r3, r3, #6
 800fecc:	431a      	orrs	r2, r3
 800fece:	4b58      	ldr	r3, [pc, #352]	; (8010030 <evtMspReceive+0x998>)
 800fed0:	79db      	ldrb	r3, [r3, #7]
 800fed2:	01db      	lsls	r3, r3, #7
 800fed4:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fed6:	4b56      	ldr	r3, [pc, #344]	; (8010030 <evtMspReceive+0x998>)
 800fed8:	7a1b      	ldrb	r3, [r3, #8]
 800feda:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fedc:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fede:	4b54      	ldr	r3, [pc, #336]	; (8010030 <evtMspReceive+0x998>)
 800fee0:	7a5b      	ldrb	r3, [r3, #9]
 800fee2:	025b      	lsls	r3, r3, #9
 800fee4:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fee6:	4b4c      	ldr	r3, [pc, #304]	; (8010018 <evtMspReceive+0x980>)
 800fee8:	79db      	ldrb	r3, [r3, #7]
 800feea:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800feec:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800feee:	4b4a      	ldr	r3, [pc, #296]	; (8010018 <evtMspReceive+0x980>)
 800fef0:	7a1b      	ldrb	r3, [r3, #8]
 800fef2:	02db      	lsls	r3, r3, #11
 800fef4:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fef6:	4b48      	ldr	r3, [pc, #288]	; (8010018 <evtMspReceive+0x980>)
 800fef8:	7d1b      	ldrb	r3, [r3, #20]
 800fefa:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fefc:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fefe:	4b46      	ldr	r3, [pc, #280]	; (8010018 <evtMspReceive+0x980>)
 800ff00:	7a9b      	ldrb	r3, [r3, #10]
 800ff02:	031b      	lsls	r3, r3, #12
 800ff04:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800ff06:	4b4a      	ldr	r3, [pc, #296]	; (8010030 <evtMspReceive+0x998>)
 800ff08:	7b5b      	ldrb	r3, [r3, #13]
 800ff0a:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800ff0c:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800ff0e:	4b48      	ldr	r3, [pc, #288]	; (8010030 <evtMspReceive+0x998>)
 800ff10:	7b9b      	ldrb	r3, [r3, #14]
 800ff12:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800ff14:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800ff16:	4b46      	ldr	r3, [pc, #280]	; (8010030 <evtMspReceive+0x998>)
 800ff18:	7c1b      	ldrb	r3, [r3, #16]
 800ff1a:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800ff1c:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800ff1e:	4b44      	ldr	r3, [pc, #272]	; (8010030 <evtMspReceive+0x998>)
 800ff20:	791b      	ldrb	r3, [r3, #4]
 800ff22:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800ff24:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800ff26:	4b42      	ldr	r3, [pc, #264]	; (8010030 <evtMspReceive+0x998>)
 800ff28:	7c5b      	ldrb	r3, [r3, #17]
 800ff2a:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800ff2c:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800ff2e:	4b40      	ldr	r3, [pc, #256]	; (8010030 <evtMspReceive+0x998>)
 800ff30:	7c9b      	ldrb	r3, [r3, #18]
 800ff32:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800ff34:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800ff36:	4b3e      	ldr	r3, [pc, #248]	; (8010030 <evtMspReceive+0x998>)
 800ff38:	7cdb      	ldrb	r3, [r3, #19]
 800ff3a:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800ff3c:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800ff3e:	4b3c      	ldr	r3, [pc, #240]	; (8010030 <evtMspReceive+0x998>)
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
 800ff42:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800ff44:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800ff46:	4b3a      	ldr	r3, [pc, #232]	; (8010030 <evtMspReceive+0x998>)
 800ff48:	7d5b      	ldrb	r3, [r3, #21]
 800ff4a:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800ff4c:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800ff4e:	4b38      	ldr	r3, [pc, #224]	; (8010030 <evtMspReceive+0x998>)
 800ff50:	7d9b      	ldrb	r3, [r3, #22]
 800ff52:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800ff54:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800ff56:	4b36      	ldr	r3, [pc, #216]	; (8010030 <evtMspReceive+0x998>)
 800ff58:	7ddb      	ldrb	r3, [r3, #23]
 800ff5a:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800ff5c:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800ff5e:	4a2e      	ldr	r2, [pc, #184]	; (8010018 <evtMspReceive+0x980>)
 800ff60:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800ff62:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800ff64:	613b      	str	r3, [r7, #16]
        for (i = 0; i < numberBoxItems; i++) {
 800ff66:	2300      	movs	r3, #0
 800ff68:	637b      	str	r3, [r7, #52]	; 0x34
 800ff6a:	e018      	b.n	800ff9e <evtMspReceive+0x906>
            int flag = (tmp & (1 << availableBoxes[i]));
 800ff6c:	4a31      	ldr	r2, [pc, #196]	; (8010034 <evtMspReceive+0x99c>)
 800ff6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff70:	4413      	add	r3, r2
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	461a      	mov	r2, r3
 800ff76:	2301      	movs	r3, #1
 800ff78:	4093      	lsls	r3, r2
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	4013      	ands	r3, r2
 800ff80:	60fb      	str	r3, [r7, #12]
            if (flag)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d007      	beq.n	800ff98 <evtMspReceive+0x900>
                junk |= 1 << i;
 800ff88:	2201      	movs	r2, #1
 800ff8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff90:	461a      	mov	r2, r3
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	4313      	orrs	r3, r2
 800ff96:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800ff98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff9e:	4b26      	ldr	r3, [pc, #152]	; (8010038 <evtMspReceive+0x9a0>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d3e0      	bcc.n	800ff6c <evtMspReceive+0x8d4>
        }
        _Serialize32(p_port, junk);
 800ffaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffac:	69b8      	ldr	r0, [r7, #24]
 800ffae:	f7ff f95a 	bl	800f266 <_Serialize32>
        _Serialize8(p_port, mcfg.current_profile);
 800ffb2:	4b1a      	ldr	r3, [pc, #104]	; (801001c <evtMspReceive+0x984>)
 800ffb4:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800ffb8:	4619      	mov	r1, r3
 800ffba:	69b8      	ldr	r0, [r7, #24]
 800ffbc:	f7ff f918 	bl	800f1f0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11);
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ffc6:	230b      	movs	r3, #11
 800ffc8:	6839      	ldr	r1, [r7, #0]
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f007 fc1a 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 800ffd0:	f001 b961 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (acc_1G > 1024) {
 800ffd4:	4b19      	ldr	r3, [pc, #100]	; (801003c <evtMspReceive+0x9a4>)
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffdc:	d916      	bls.n	801000c <evtMspReceive+0x974>
            for (i = 0; i < 3; i++)
 800ffde:	2300      	movs	r3, #0
 800ffe0:	637b      	str	r3, [r7, #52]	; 0x34
 800ffe2:	e00f      	b.n	8010004 <evtMspReceive+0x96c>
                _Serialize16(p_port, accSmooth[i] / 8);
 800ffe4:	4a16      	ldr	r2, [pc, #88]	; (8010040 <evtMspReceive+0x9a8>)
 800ffe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	da00      	bge.n	800fff2 <evtMspReceive+0x95a>
 800fff0:	3307      	adds	r3, #7
 800fff2:	10db      	asrs	r3, r3, #3
 800fff4:	b21b      	sxth	r3, r3
 800fff6:	4619      	mov	r1, r3
 800fff8:	69b8      	ldr	r0, [r7, #24]
 800fffa:	f7ff f911 	bl	800f220 <_Serialize16>
            for (i = 0; i < 3; i++)
 800fffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010000:	3301      	adds	r3, #1
 8010002:	637b      	str	r3, [r7, #52]	; 0x34
 8010004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010006:	2b02      	cmp	r3, #2
 8010008:	d9ec      	bls.n	800ffe4 <evtMspReceive+0x94c>
 801000a:	e029      	b.n	8010060 <evtMspReceive+0x9c8>
        } else {
            for (i = 0; i < 3; i++)
 801000c:	2300      	movs	r3, #0
 801000e:	637b      	str	r3, [r7, #52]	; 0x34
 8010010:	e023      	b.n	801005a <evtMspReceive+0x9c2>
 8010012:	bf00      	nop
 8010014:	20001800 	.word	0x20001800
 8010018:	20001980 	.word	0x20001980
 801001c:	20000bb4 	.word	0x20000bb4
 8010020:	20001cae 	.word	0x20001cae
 8010024:	c000000c 	.word	0xc000000c
 8010028:	200019a4 	.word	0x200019a4
 801002c:	20001b2c 	.word	0x20001b2c
 8010030:	20001a24 	.word	0x20001a24
 8010034:	20001efc 	.word	0x20001efc
 8010038:	20001f15 	.word	0x20001f15
 801003c:	2000005a 	.word	0x2000005a
 8010040:	20001710 	.word	0x20001710
                _Serialize16(p_port, accSmooth[i]);
 8010044:	4ab5      	ldr	r2, [pc, #724]	; (801031c <evtMspReceive+0xc84>)
 8010046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010048:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801004c:	4619      	mov	r1, r3
 801004e:	69b8      	ldr	r0, [r7, #24]
 8010050:	f7ff f8e6 	bl	800f220 <_Serialize16>
            for (i = 0; i < 3; i++)
 8010054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010056:	3301      	adds	r3, #1
 8010058:	637b      	str	r3, [r7, #52]	; 0x34
 801005a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005c:	2b02      	cmp	r3, #2
 801005e:	d9f1      	bls.n	8010044 <evtMspReceive+0x9ac>
        }
        for (i = 0; i < 3; i++)
 8010060:	2300      	movs	r3, #0
 8010062:	637b      	str	r3, [r7, #52]	; 0x34
 8010064:	e00a      	b.n	801007c <evtMspReceive+0x9e4>
            _Serialize16(p_port, gyroData[i]);
 8010066:	4aae      	ldr	r2, [pc, #696]	; (8010320 <evtMspReceive+0xc88>)
 8010068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801006a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801006e:	4619      	mov	r1, r3
 8010070:	69b8      	ldr	r0, [r7, #24]
 8010072:	f7ff f8d5 	bl	800f220 <_Serialize16>
        for (i = 0; i < 3; i++)
 8010076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010078:	3301      	adds	r3, #1
 801007a:	637b      	str	r3, [r7, #52]	; 0x34
 801007c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007e:	2b02      	cmp	r3, #2
 8010080:	d9f1      	bls.n	8010066 <evtMspReceive+0x9ce>
        for (i = 0; i < 3; i++)
 8010082:	2300      	movs	r3, #0
 8010084:	637b      	str	r3, [r7, #52]	; 0x34
 8010086:	e00a      	b.n	801009e <evtMspReceive+0xa06>
            _Serialize16(p_port, magADC[i]);
 8010088:	4aa6      	ldr	r2, [pc, #664]	; (8010324 <evtMspReceive+0xc8c>)
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010090:	4619      	mov	r1, r3
 8010092:	69b8      	ldr	r0, [r7, #24]
 8010094:	f7ff f8c4 	bl	800f220 <_Serialize16>
        for (i = 0; i < 3; i++)
 8010098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009a:	3301      	adds	r3, #1
 801009c:	637b      	str	r3, [r7, #52]	; 0x34
 801009e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a0:	2b02      	cmp	r3, #2
 80100a2:	d9f1      	bls.n	8010088 <evtMspReceive+0x9f0>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80100aa:	2312      	movs	r3, #18
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f007 fba8 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80100b4:	f001 b8ef 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SERVO:
        _SerializeStruct(p_port, (uint8_t *)&servo, 16);
 80100b8:	2210      	movs	r2, #16
 80100ba:	499b      	ldr	r1, [pc, #620]	; (8010328 <evtMspReceive+0xc90>)
 80100bc:	69b8      	ldr	r0, [r7, #24]
 80100be:	f7ff f902 	bl	800f2c6 <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80100c8:	2310      	movs	r3, #16
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f007 fb99 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80100d2:	f001 b8e0 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 80100d6:	2300      	movs	r3, #0
 80100d8:	637b      	str	r3, [r7, #52]	; 0x34
 80100da:	e049      	b.n	8010170 <evtMspReceive+0xad8>
            _Serialize16(p_port, cfg.servoConf[i].min);
 80100dc:	4993      	ldr	r1, [pc, #588]	; (801032c <evtMspReceive+0xc94>)
 80100de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e0:	4613      	mov	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4413      	add	r3, r2
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	440b      	add	r3, r1
 80100ea:	33b8      	adds	r3, #184	; 0xb8
 80100ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100f0:	4619      	mov	r1, r3
 80100f2:	69b8      	ldr	r0, [r7, #24]
 80100f4:	f7ff f894 	bl	800f220 <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].max);
 80100f8:	498c      	ldr	r1, [pc, #560]	; (801032c <evtMspReceive+0xc94>)
 80100fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	440b      	add	r3, r1
 8010106:	33ba      	adds	r3, #186	; 0xba
 8010108:	f9b3 3000 	ldrsh.w	r3, [r3]
 801010c:	4619      	mov	r1, r3
 801010e:	69b8      	ldr	r0, [r7, #24]
 8010110:	f7ff f886 	bl	800f220 <_Serialize16>
            _Serialize16(p_port, cfg.servoConf[i].middle);
 8010114:	4985      	ldr	r1, [pc, #532]	; (801032c <evtMspReceive+0xc94>)
 8010116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010118:	4613      	mov	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	4413      	add	r3, r2
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	440b      	add	r3, r1
 8010122:	33bc      	adds	r3, #188	; 0xbc
 8010124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010128:	4619      	mov	r1, r3
 801012a:	69b8      	ldr	r0, [r7, #24]
 801012c:	f7ff f878 	bl	800f220 <_Serialize16>
            _Serialize8(p_port, cfg.servoConf[i].rate);
 8010130:	497e      	ldr	r1, [pc, #504]	; (801032c <evtMspReceive+0xc94>)
 8010132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010134:	4613      	mov	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	4413      	add	r3, r2
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	440b      	add	r3, r1
 801013e:	33be      	adds	r3, #190	; 0xbe
 8010140:	f993 3000 	ldrsb.w	r3, [r3]
 8010144:	b2db      	uxtb	r3, r3
 8010146:	4619      	mov	r1, r3
 8010148:	69b8      	ldr	r0, [r7, #24]
 801014a:	f7ff f851 	bl	800f1f0 <_Serialize8>
            _Serialize16(p_port, cfg.servoConf[i].direction);
 801014e:	4977      	ldr	r1, [pc, #476]	; (801032c <evtMspReceive+0xc94>)
 8010150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010152:	4613      	mov	r3, r2
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	4413      	add	r3, r2
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	440b      	add	r3, r1
 801015c:	33c0      	adds	r3, #192	; 0xc0
 801015e:	881b      	ldrh	r3, [r3, #0]
 8010160:	b21b      	sxth	r3, r3
 8010162:	4619      	mov	r1, r3
 8010164:	69b8      	ldr	r0, [r7, #24]
 8010166:	f7ff f85b 	bl	800f220 <_Serialize16>
        for (i = 0; i < MAX_SERVOS; i++) {
 801016a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801016c:	3301      	adds	r3, #1
 801016e:	637b      	str	r3, [r7, #52]	; 0x34
 8010170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010172:	2b07      	cmp	r3, #7
 8010174:	d9b2      	bls.n	80100dc <evtMspReceive+0xa44>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVOS * 9);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801017c:	2348      	movs	r3, #72	; 0x48
 801017e:	6839      	ldr	r1, [r7, #0]
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f007 fb3f 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010186:	f001 b886 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_SERVO_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 801018a:	2300      	movs	r3, #0
 801018c:	2200      	movs	r2, #0
 801018e:	6839      	ldr	r1, [r7, #0]
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f007 fb37 	bl	8017804 <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVOS; i++) {
 8010196:	2300      	movs	r3, #0
 8010198:	637b      	str	r3, [r7, #52]	; 0x34
 801019a:	e04d      	b.n	8010238 <evtMspReceive+0xba0>
            cfg.servoConf[i].min = _Read16(p_port);
 801019c:	69b8      	ldr	r0, [r7, #24]
 801019e:	f7fe ffe1 	bl	800f164 <_Read16>
 80101a2:	4603      	mov	r3, r0
 80101a4:	b218      	sxth	r0, r3
 80101a6:	4961      	ldr	r1, [pc, #388]	; (801032c <evtMspReceive+0xc94>)
 80101a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101aa:	4613      	mov	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	4413      	add	r3, r2
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	440b      	add	r3, r1
 80101b4:	33b8      	adds	r3, #184	; 0xb8
 80101b6:	4602      	mov	r2, r0
 80101b8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = _Read16(p_port);
 80101ba:	69b8      	ldr	r0, [r7, #24]
 80101bc:	f7fe ffd2 	bl	800f164 <_Read16>
 80101c0:	4603      	mov	r3, r0
 80101c2:	b218      	sxth	r0, r3
 80101c4:	4959      	ldr	r1, [pc, #356]	; (801032c <evtMspReceive+0xc94>)
 80101c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101c8:	4613      	mov	r3, r2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4413      	add	r3, r2
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	440b      	add	r3, r1
 80101d2:	33ba      	adds	r3, #186	; 0xba
 80101d4:	4602      	mov	r2, r0
 80101d6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = _Read16(p_port);
 80101d8:	69b8      	ldr	r0, [r7, #24]
 80101da:	f7fe ffc3 	bl	800f164 <_Read16>
 80101de:	4603      	mov	r3, r0
 80101e0:	b218      	sxth	r0, r3
 80101e2:	4952      	ldr	r1, [pc, #328]	; (801032c <evtMspReceive+0xc94>)
 80101e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101e6:	4613      	mov	r3, r2
 80101e8:	009b      	lsls	r3, r3, #2
 80101ea:	4413      	add	r3, r2
 80101ec:	005b      	lsls	r3, r3, #1
 80101ee:	440b      	add	r3, r1
 80101f0:	33bc      	adds	r3, #188	; 0xbc
 80101f2:	4602      	mov	r2, r0
 80101f4:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = _Read8(p_port);
 80101f6:	69b8      	ldr	r0, [r7, #24]
 80101f8:	f7fe ffa0 	bl	800f13c <_Read8>
 80101fc:	4603      	mov	r3, r0
 80101fe:	b258      	sxtb	r0, r3
 8010200:	494a      	ldr	r1, [pc, #296]	; (801032c <evtMspReceive+0xc94>)
 8010202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010204:	4613      	mov	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4413      	add	r3, r2
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	440b      	add	r3, r1
 801020e:	33be      	adds	r3, #190	; 0xbe
 8010210:	4602      	mov	r2, r0
 8010212:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = _Read16(p_port);
 8010214:	69b8      	ldr	r0, [r7, #24]
 8010216:	f7fe ffa5 	bl	800f164 <_Read16>
 801021a:	4603      	mov	r3, r0
 801021c:	4618      	mov	r0, r3
 801021e:	4943      	ldr	r1, [pc, #268]	; (801032c <evtMspReceive+0xc94>)
 8010220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010222:	4613      	mov	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	4413      	add	r3, r2
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	440b      	add	r3, r1
 801022c:	33c0      	adds	r3, #192	; 0xc0
 801022e:	4602      	mov	r2, r0
 8010230:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	3301      	adds	r3, #1
 8010236:	637b      	str	r3, [r7, #52]	; 0x34
 8010238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801023a:	2b07      	cmp	r3, #7
 801023c:	d9ae      	bls.n	801019c <evtMspReceive+0xb04>
        }
        break;
 801023e:	f001 b82a 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010242:	2300      	movs	r3, #0
 8010244:	637b      	str	r3, [r7, #52]	; 0x34
 8010246:	e05c      	b.n	8010302 <evtMspReceive+0xc6a>
            _Serialize8(p_port, mcfg.customServoMixer[i].targetChannel);
 8010248:	4939      	ldr	r1, [pc, #228]	; (8010330 <evtMspReceive+0xc98>)
 801024a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801024c:	4613      	mov	r3, r2
 801024e:	00db      	lsls	r3, r3, #3
 8010250:	1a9b      	subs	r3, r3, r2
 8010252:	440b      	add	r3, r1
 8010254:	33d0      	adds	r3, #208	; 0xd0
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	4619      	mov	r1, r3
 801025a:	69b8      	ldr	r0, [r7, #24]
 801025c:	f7fe ffc8 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].fromChannel);
 8010260:	4933      	ldr	r1, [pc, #204]	; (8010330 <evtMspReceive+0xc98>)
 8010262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010264:	4613      	mov	r3, r2
 8010266:	00db      	lsls	r3, r3, #3
 8010268:	1a9b      	subs	r3, r3, r2
 801026a:	440b      	add	r3, r1
 801026c:	33d1      	adds	r3, #209	; 0xd1
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	4619      	mov	r1, r3
 8010272:	69b8      	ldr	r0, [r7, #24]
 8010274:	f7fe ffbc 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].rate);
 8010278:	492d      	ldr	r1, [pc, #180]	; (8010330 <evtMspReceive+0xc98>)
 801027a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801027c:	4613      	mov	r3, r2
 801027e:	00db      	lsls	r3, r3, #3
 8010280:	1a9b      	subs	r3, r3, r2
 8010282:	440b      	add	r3, r1
 8010284:	33d2      	adds	r3, #210	; 0xd2
 8010286:	f993 3000 	ldrsb.w	r3, [r3]
 801028a:	b2db      	uxtb	r3, r3
 801028c:	4619      	mov	r1, r3
 801028e:	69b8      	ldr	r0, [r7, #24]
 8010290:	f7fe ffae 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].speed);
 8010294:	4926      	ldr	r1, [pc, #152]	; (8010330 <evtMspReceive+0xc98>)
 8010296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010298:	4613      	mov	r3, r2
 801029a:	00db      	lsls	r3, r3, #3
 801029c:	1a9b      	subs	r3, r3, r2
 801029e:	440b      	add	r3, r1
 80102a0:	33d3      	adds	r3, #211	; 0xd3
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	4619      	mov	r1, r3
 80102a6:	69b8      	ldr	r0, [r7, #24]
 80102a8:	f7fe ffa2 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].min);
 80102ac:	4920      	ldr	r1, [pc, #128]	; (8010330 <evtMspReceive+0xc98>)
 80102ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b0:	4613      	mov	r3, r2
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	1a9b      	subs	r3, r3, r2
 80102b6:	440b      	add	r3, r1
 80102b8:	33d4      	adds	r3, #212	; 0xd4
 80102ba:	f993 3000 	ldrsb.w	r3, [r3]
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	4619      	mov	r1, r3
 80102c2:	69b8      	ldr	r0, [r7, #24]
 80102c4:	f7fe ff94 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].max);
 80102c8:	4919      	ldr	r1, [pc, #100]	; (8010330 <evtMspReceive+0xc98>)
 80102ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102cc:	4613      	mov	r3, r2
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	1a9b      	subs	r3, r3, r2
 80102d2:	440b      	add	r3, r1
 80102d4:	33d5      	adds	r3, #213	; 0xd5
 80102d6:	f993 3000 	ldrsb.w	r3, [r3]
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	4619      	mov	r1, r3
 80102de:	69b8      	ldr	r0, [r7, #24]
 80102e0:	f7fe ff86 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, mcfg.customServoMixer[i].box);
 80102e4:	4912      	ldr	r1, [pc, #72]	; (8010330 <evtMspReceive+0xc98>)
 80102e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102e8:	4613      	mov	r3, r2
 80102ea:	00db      	lsls	r3, r3, #3
 80102ec:	1a9b      	subs	r3, r3, r2
 80102ee:	440b      	add	r3, r1
 80102f0:	33d6      	adds	r3, #214	; 0xd6
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	4619      	mov	r1, r3
 80102f6:	69b8      	ldr	r0, [r7, #24]
 80102f8:	f7fe ff7a 	bl	800f1f0 <_Serialize8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80102fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fe:	3301      	adds	r3, #1
 8010300:	637b      	str	r3, [r7, #52]	; 0x34
 8010302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010304:	2b0f      	cmp	r3, #15
 8010306:	d99f      	bls.n	8010248 <evtMspReceive+0xbb0>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERVO_RULES * sizeof(servoMixer_t));
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801030e:	2370      	movs	r3, #112	; 0x70
 8010310:	6839      	ldr	r1, [r7, #0]
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f007 fa76 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010318:	f000 bfbd 	b.w	8011296 <evtMspReceive+0x1bfe>
 801031c:	20001710 	.word	0x20001710
 8010320:	20001778 	.word	0x20001778
 8010324:	20001718 	.word	0x20001718
 8010328:	20000040 	.word	0x20000040
 801032c:	20001120 	.word	0x20001120
 8010330:	20000bb4 	.word	0x20000bb4

    case MSP_SET_SERVOMIX_CONF:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010334:	2300      	movs	r3, #0
 8010336:	2200      	movs	r2, #0
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f007 fa62 	bl	8017804 <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010340:	2300      	movs	r3, #0
 8010342:	637b      	str	r3, [r7, #52]	; 0x34
 8010344:	e064      	b.n	8010410 <evtMspReceive+0xd78>
            mcfg.customServoMixer[i].targetChannel = _Read8(p_port);
 8010346:	69b8      	ldr	r0, [r7, #24]
 8010348:	f7fe fef8 	bl	800f13c <_Read8>
 801034c:	4603      	mov	r3, r0
 801034e:	4618      	mov	r0, r3
 8010350:	49b1      	ldr	r1, [pc, #708]	; (8010618 <evtMspReceive+0xf80>)
 8010352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010354:	4613      	mov	r3, r2
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	1a9b      	subs	r3, r3, r2
 801035a:	440b      	add	r3, r1
 801035c:	33d0      	adds	r3, #208	; 0xd0
 801035e:	4602      	mov	r2, r0
 8010360:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = _Read8(p_port);
 8010362:	69b8      	ldr	r0, [r7, #24]
 8010364:	f7fe feea 	bl	800f13c <_Read8>
 8010368:	4603      	mov	r3, r0
 801036a:	4618      	mov	r0, r3
 801036c:	49aa      	ldr	r1, [pc, #680]	; (8010618 <evtMspReceive+0xf80>)
 801036e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010370:	4613      	mov	r3, r2
 8010372:	00db      	lsls	r3, r3, #3
 8010374:	1a9b      	subs	r3, r3, r2
 8010376:	440b      	add	r3, r1
 8010378:	33d1      	adds	r3, #209	; 0xd1
 801037a:	4602      	mov	r2, r0
 801037c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = _Read8(p_port);
 801037e:	69b8      	ldr	r0, [r7, #24]
 8010380:	f7fe fedc 	bl	800f13c <_Read8>
 8010384:	4603      	mov	r3, r0
 8010386:	b258      	sxtb	r0, r3
 8010388:	49a3      	ldr	r1, [pc, #652]	; (8010618 <evtMspReceive+0xf80>)
 801038a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801038c:	4613      	mov	r3, r2
 801038e:	00db      	lsls	r3, r3, #3
 8010390:	1a9b      	subs	r3, r3, r2
 8010392:	440b      	add	r3, r1
 8010394:	33d2      	adds	r3, #210	; 0xd2
 8010396:	4602      	mov	r2, r0
 8010398:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = _Read8(p_port);
 801039a:	69b8      	ldr	r0, [r7, #24]
 801039c:	f7fe fece 	bl	800f13c <_Read8>
 80103a0:	4603      	mov	r3, r0
 80103a2:	4618      	mov	r0, r3
 80103a4:	499c      	ldr	r1, [pc, #624]	; (8010618 <evtMspReceive+0xf80>)
 80103a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103a8:	4613      	mov	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	1a9b      	subs	r3, r3, r2
 80103ae:	440b      	add	r3, r1
 80103b0:	33d3      	adds	r3, #211	; 0xd3
 80103b2:	4602      	mov	r2, r0
 80103b4:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = _Read8(p_port);
 80103b6:	69b8      	ldr	r0, [r7, #24]
 80103b8:	f7fe fec0 	bl	800f13c <_Read8>
 80103bc:	4603      	mov	r3, r0
 80103be:	b258      	sxtb	r0, r3
 80103c0:	4995      	ldr	r1, [pc, #596]	; (8010618 <evtMspReceive+0xf80>)
 80103c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c4:	4613      	mov	r3, r2
 80103c6:	00db      	lsls	r3, r3, #3
 80103c8:	1a9b      	subs	r3, r3, r2
 80103ca:	440b      	add	r3, r1
 80103cc:	33d4      	adds	r3, #212	; 0xd4
 80103ce:	4602      	mov	r2, r0
 80103d0:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = _Read8(p_port);
 80103d2:	69b8      	ldr	r0, [r7, #24]
 80103d4:	f7fe feb2 	bl	800f13c <_Read8>
 80103d8:	4603      	mov	r3, r0
 80103da:	b258      	sxtb	r0, r3
 80103dc:	498e      	ldr	r1, [pc, #568]	; (8010618 <evtMspReceive+0xf80>)
 80103de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103e0:	4613      	mov	r3, r2
 80103e2:	00db      	lsls	r3, r3, #3
 80103e4:	1a9b      	subs	r3, r3, r2
 80103e6:	440b      	add	r3, r1
 80103e8:	33d5      	adds	r3, #213	; 0xd5
 80103ea:	4602      	mov	r2, r0
 80103ec:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = _Read8(p_port);
 80103ee:	69b8      	ldr	r0, [r7, #24]
 80103f0:	f7fe fea4 	bl	800f13c <_Read8>
 80103f4:	4603      	mov	r3, r0
 80103f6:	4618      	mov	r0, r3
 80103f8:	4987      	ldr	r1, [pc, #540]	; (8010618 <evtMspReceive+0xf80>)
 80103fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103fc:	4613      	mov	r3, r2
 80103fe:	00db      	lsls	r3, r3, #3
 8010400:	1a9b      	subs	r3, r3, r2
 8010402:	440b      	add	r3, r1
 8010404:	33d6      	adds	r3, #214	; 0xd6
 8010406:	4602      	mov	r2, r0
 8010408:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801040a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040c:	3301      	adds	r3, #1
 801040e:	637b      	str	r3, [r7, #52]	; 0x34
 8010410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010412:	2b0f      	cmp	r3, #15
 8010414:	d997      	bls.n	8010346 <evtMspReceive+0xcae>
        }
        loadCustomServoMixer();
 8010416:	f7fa fc5d 	bl	800acd4 <loadCustomServoMixer>
        break;
 801041a:	f000 bf3c 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_FW_CONFIG:
        _Serialize8(p_port, mcfg.fw_althold_dir);
 801041e:	4b7e      	ldr	r3, [pc, #504]	; (8010618 <evtMspReceive+0xf80>)
 8010420:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 8010424:	b2db      	uxtb	r3, r3
 8010426:	4619      	mov	r1, r3
 8010428:	69b8      	ldr	r0, [r7, #24]
 801042a:	f7fe fee1 	bl	800f1f0 <_Serialize8>
        // _Serialize8(p_port, cfg.fw_vector_thrust); // Future Gui setting?
        _Serialize16(p_port, cfg.fw_gps_maxcorr);
 801042e:	4b7b      	ldr	r3, [pc, #492]	; (801061c <evtMspReceive+0xf84>)
 8010430:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8010434:	4619      	mov	r1, r3
 8010436:	69b8      	ldr	r0, [r7, #24]
 8010438:	f7fe fef2 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_rudder);
 801043c:	4b77      	ldr	r3, [pc, #476]	; (801061c <evtMspReceive+0xf84>)
 801043e:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8010442:	4619      	mov	r1, r3
 8010444:	69b8      	ldr	r0, [r7, #24]
 8010446:	f7fe feeb 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxclimb);
 801044a:	4b74      	ldr	r3, [pc, #464]	; (801061c <evtMspReceive+0xf84>)
 801044c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8010450:	4619      	mov	r1, r3
 8010452:	69b8      	ldr	r0, [r7, #24]
 8010454:	f7fe fee4 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_gps_maxdive);
 8010458:	4b70      	ldr	r3, [pc, #448]	; (801061c <evtMspReceive+0xf84>)
 801045a:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 801045e:	4619      	mov	r1, r3
 8010460:	69b8      	ldr	r0, [r7, #24]
 8010462:	f7fe fedd 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_climb_throttle);
 8010466:	4b6d      	ldr	r3, [pc, #436]	; (801061c <evtMspReceive+0xf84>)
 8010468:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 801046c:	b21b      	sxth	r3, r3
 801046e:	4619      	mov	r1, r3
 8010470:	69b8      	ldr	r0, [r7, #24]
 8010472:	f7fe fed5 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_cruise_throttle);
 8010476:	4b69      	ldr	r3, [pc, #420]	; (801061c <evtMspReceive+0xf84>)
 8010478:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 801047c:	b21b      	sxth	r3, r3
 801047e:	4619      	mov	r1, r3
 8010480:	69b8      	ldr	r0, [r7, #24]
 8010482:	f7fe fecd 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_idle_throttle);
 8010486:	4b65      	ldr	r3, [pc, #404]	; (801061c <evtMspReceive+0xf84>)
 8010488:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 801048c:	b21b      	sxth	r3, r3
 801048e:	4619      	mov	r1, r3
 8010490:	69b8      	ldr	r0, [r7, #24]
 8010492:	f7fe fec5 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.fw_scaler_throttle);
 8010496:	4b61      	ldr	r3, [pc, #388]	; (801061c <evtMspReceive+0xf84>)
 8010498:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 801049c:	b21b      	sxth	r3, r3
 801049e:	4619      	mov	r1, r3
 80104a0:	69b8      	ldr	r0, [r7, #24]
 80104a2:	f7fe febd 	bl	800f220 <_Serialize16>
        _Serialize32(p_port, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 80104a6:	4b5d      	ldr	r3, [pc, #372]	; (801061c <evtMspReceive+0xf84>)
 80104a8:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80104ac:	4619      	mov	r1, r3
 80104ae:	69b8      	ldr	r0, [r7, #24]
 80104b0:	f7fe fed9 	bl	800f266 <_Serialize32>
        _Serialize8(p_port, cfg.fw_rth_alt);
 80104b4:	4b59      	ldr	r3, [pc, #356]	; (801061c <evtMspReceive+0xf84>)
 80104b6:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80104ba:	4619      	mov	r1, r3
 80104bc:	69b8      	ldr	r0, [r7, #24]
 80104be:	f7fe fe97 	bl	800f1f0 <_Serialize8>
        // next added for future use
        _Serialize32(p_port, 0);
 80104c2:	2100      	movs	r1, #0
 80104c4:	69b8      	ldr	r0, [r7, #24]
 80104c6:	f7fe fece 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, 0);
 80104ca:	2100      	movs	r1, #0
 80104cc:	69b8      	ldr	r0, [r7, #24]
 80104ce:	f7fe feca 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, 0);
 80104d2:	2100      	movs	r1, #0
 80104d4:	69b8      	ldr	r0, [r7, #24]
 80104d6:	f7fe fec6 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, 0);
 80104da:	2100      	movs	r1, #0
 80104dc:	69b8      	ldr	r0, [r7, #24]
 80104de:	f7fe fec2 	bl	800f266 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 38);
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80104e8:	2326      	movs	r3, #38	; 0x26
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f007 f989 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80104f2:	f000 bed0 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_FW_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80104f6:	2300      	movs	r3, #0
 80104f8:	2200      	movs	r2, #0
 80104fa:	6839      	ldr	r1, [r7, #0]
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f007 f981 	bl	8017804 <pifMsp_MakeAnswer>
        mcfg.fw_althold_dir = _Read8(p_port);
 8010502:	69b8      	ldr	r0, [r7, #24]
 8010504:	f7fe fe1a 	bl	800f13c <_Read8>
 8010508:	4603      	mov	r3, r0
 801050a:	b25a      	sxtb	r2, r3
 801050c:	4b42      	ldr	r3, [pc, #264]	; (8010618 <evtMspReceive+0xf80>)
 801050e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = _Read8(p_port); // Future Gui setting?
        cfg.fw_gps_maxcorr = _Read16(p_port);
 8010512:	69b8      	ldr	r0, [r7, #24]
 8010514:	f7fe fe26 	bl	800f164 <_Read16>
 8010518:	4603      	mov	r3, r0
 801051a:	b21a      	sxth	r2, r3
 801051c:	4b3f      	ldr	r3, [pc, #252]	; (801061c <evtMspReceive+0xf84>)
 801051e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = _Read16(p_port);
 8010522:	69b8      	ldr	r0, [r7, #24]
 8010524:	f7fe fe1e 	bl	800f164 <_Read16>
 8010528:	4603      	mov	r3, r0
 801052a:	b21a      	sxth	r2, r3
 801052c:	4b3b      	ldr	r3, [pc, #236]	; (801061c <evtMspReceive+0xf84>)
 801052e:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = _Read16(p_port);
 8010532:	69b8      	ldr	r0, [r7, #24]
 8010534:	f7fe fe16 	bl	800f164 <_Read16>
 8010538:	4603      	mov	r3, r0
 801053a:	b21a      	sxth	r2, r3
 801053c:	4b37      	ldr	r3, [pc, #220]	; (801061c <evtMspReceive+0xf84>)
 801053e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = _Read16(p_port);
 8010542:	69b8      	ldr	r0, [r7, #24]
 8010544:	f7fe fe0e 	bl	800f164 <_Read16>
 8010548:	4603      	mov	r3, r0
 801054a:	b21a      	sxth	r2, r3
 801054c:	4b33      	ldr	r3, [pc, #204]	; (801061c <evtMspReceive+0xf84>)
 801054e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = _Read16(p_port);
 8010552:	69b8      	ldr	r0, [r7, #24]
 8010554:	f7fe fe06 	bl	800f164 <_Read16>
 8010558:	4603      	mov	r3, r0
 801055a:	461a      	mov	r2, r3
 801055c:	4b2f      	ldr	r3, [pc, #188]	; (801061c <evtMspReceive+0xf84>)
 801055e:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = _Read16(p_port);
 8010562:	69b8      	ldr	r0, [r7, #24]
 8010564:	f7fe fdfe 	bl	800f164 <_Read16>
 8010568:	4603      	mov	r3, r0
 801056a:	461a      	mov	r2, r3
 801056c:	4b2b      	ldr	r3, [pc, #172]	; (801061c <evtMspReceive+0xf84>)
 801056e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = _Read16(p_port);
 8010572:	69b8      	ldr	r0, [r7, #24]
 8010574:	f7fe fdf6 	bl	800f164 <_Read16>
 8010578:	4603      	mov	r3, r0
 801057a:	461a      	mov	r2, r3
 801057c:	4b27      	ldr	r3, [pc, #156]	; (801061c <evtMspReceive+0xf84>)
 801057e:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = _Read16(p_port);
 8010582:	69b8      	ldr	r0, [r7, #24]
 8010584:	f7fe fdee 	bl	800f164 <_Read16>
 8010588:	4603      	mov	r3, r0
 801058a:	461a      	mov	r2, r3
 801058c:	4b23      	ldr	r3, [pc, #140]	; (801061c <evtMspReceive+0xf84>)
 801058e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = _Read32(p_port);// Wrong when using float in MSP!... Change to _Read8
        _Read32(p_port); // Just read and skip
 8010592:	69b8      	ldr	r0, [r7, #24]
 8010594:	f7fe fe03 	bl	800f19e <_Read32>
        cfg.fw_rth_alt = _Read8(p_port);
 8010598:	69b8      	ldr	r0, [r7, #24]
 801059a:	f7fe fdcf 	bl	800f13c <_Read8>
 801059e:	4603      	mov	r3, r0
 80105a0:	461a      	mov	r2, r3
 80105a2:	4b1e      	ldr	r3, [pc, #120]	; (801061c <evtMspReceive+0xf84>)
 80105a4:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        _Read32(p_port);
 80105a8:	69b8      	ldr	r0, [r7, #24]
 80105aa:	f7fe fdf8 	bl	800f19e <_Read32>
        _Read32(p_port);
 80105ae:	69b8      	ldr	r0, [r7, #24]
 80105b0:	f7fe fdf5 	bl	800f19e <_Read32>
        _Read32(p_port);
 80105b4:	69b8      	ldr	r0, [r7, #24]
 80105b6:	f7fe fdf2 	bl	800f19e <_Read32>
        _Read32(p_port);
 80105ba:	69b8      	ldr	r0, [r7, #24]
 80105bc:	f7fe fdef 	bl	800f19e <_Read32>
        break;
 80105c0:	f000 be69 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_MOTOR:
        _SerializeStruct(p_port, (uint8_t *)&motor, 16);
 80105c4:	2210      	movs	r2, #16
 80105c6:	4916      	ldr	r1, [pc, #88]	; (8010620 <evtMspReceive+0xf88>)
 80105c8:	69b8      	ldr	r0, [r7, #24]
 80105ca:	f7fe fe7c 	bl	800f2c6 <_SerializeStruct>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80105d4:	2310      	movs	r3, #16
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f007 f913 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80105de:	f000 be5a 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80105e2:	2300      	movs	r3, #0
 80105e4:	637b      	str	r3, [r7, #52]	; 0x34
 80105e6:	e00a      	b.n	80105fe <evtMspReceive+0xf66>
            _Serialize16(p_port, rcData[i]);
 80105e8:	4a0e      	ldr	r2, [pc, #56]	; (8010624 <evtMspReceive+0xf8c>)
 80105ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80105f0:	4619      	mov	r1, r3
 80105f2:	69b8      	ldr	r0, [r7, #24]
 80105f4:	f7fe fe14 	bl	800f220 <_Serialize16>
        for (i = 0; i < 8; i++)
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	3301      	adds	r3, #1
 80105fc:	637b      	str	r3, [r7, #52]	; 0x34
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	2b07      	cmp	r3, #7
 8010602:	d9f1      	bls.n	80105e8 <evtMspReceive+0xf50>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801060a:	2310      	movs	r3, #16
 801060c:	6839      	ldr	r1, [r7, #0]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f007 f8f8 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010614:	f000 be3f 	b.w	8011296 <evtMspReceive+0x1bfe>
 8010618:	20000bb4 	.word	0x20000bb4
 801061c:	20001120 	.word	0x20001120
 8010620:	200017e8 	.word	0x200017e8
 8010624:	200019bc 	.word	0x200019bc

    case MSP_RAW_GPS:
        _Serialize8(p_port, f.GPS_FIX);
 8010628:	4b96      	ldr	r3, [pc, #600]	; (8010884 <evtMspReceive+0x11ec>)
 801062a:	7adb      	ldrb	r3, [r3, #11]
 801062c:	4619      	mov	r1, r3
 801062e:	69b8      	ldr	r0, [r7, #24]
 8010630:	f7fe fdde 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, GPS_numSat);
 8010634:	4b94      	ldr	r3, [pc, #592]	; (8010888 <evtMspReceive+0x11f0>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	4619      	mov	r1, r3
 801063a:	69b8      	ldr	r0, [r7, #24]
 801063c:	f7fe fdd8 	bl	800f1f0 <_Serialize8>
        _Serialize32(p_port, GPS_coord[LAT]);
 8010640:	4b92      	ldr	r3, [pc, #584]	; (801088c <evtMspReceive+0x11f4>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4619      	mov	r1, r3
 8010646:	69b8      	ldr	r0, [r7, #24]
 8010648:	f7fe fe0d 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, GPS_coord[LON]);
 801064c:	4b8f      	ldr	r3, [pc, #572]	; (801088c <evtMspReceive+0x11f4>)
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	4619      	mov	r1, r3
 8010652:	69b8      	ldr	r0, [r7, #24]
 8010654:	f7fe fe07 	bl	800f266 <_Serialize32>
        _Serialize16(p_port, GPS_altitude);
 8010658:	4b8d      	ldr	r3, [pc, #564]	; (8010890 <evtMspReceive+0x11f8>)
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	b21b      	sxth	r3, r3
 801065e:	4619      	mov	r1, r3
 8010660:	69b8      	ldr	r0, [r7, #24]
 8010662:	f7fe fddd 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, GPS_speed);
 8010666:	4b8b      	ldr	r3, [pc, #556]	; (8010894 <evtMspReceive+0x11fc>)
 8010668:	881b      	ldrh	r3, [r3, #0]
 801066a:	b21b      	sxth	r3, r3
 801066c:	4619      	mov	r1, r3
 801066e:	69b8      	ldr	r0, [r7, #24]
 8010670:	f7fe fdd6 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, GPS_ground_course);
 8010674:	4b88      	ldr	r3, [pc, #544]	; (8010898 <evtMspReceive+0x1200>)
 8010676:	881b      	ldrh	r3, [r3, #0]
 8010678:	b21b      	sxth	r3, r3
 801067a:	4619      	mov	r1, r3
 801067c:	69b8      	ldr	r0, [r7, #24]
 801067e:	f7fe fdcf 	bl	800f220 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010688:	2310      	movs	r3, #16
 801068a:	6839      	ldr	r1, [r7, #0]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f007 f8b9 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010692:	f000 be00 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_COMP_GPS:
        _Serialize16(p_port, GPS_distanceToHome);
 8010696:	4b81      	ldr	r3, [pc, #516]	; (801089c <evtMspReceive+0x1204>)
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	b21b      	sxth	r3, r3
 801069c:	4619      	mov	r1, r3
 801069e:	69b8      	ldr	r0, [r7, #24]
 80106a0:	f7fe fdbe 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, GPS_directionToHome);
 80106a4:	4b7e      	ldr	r3, [pc, #504]	; (80108a0 <evtMspReceive+0x1208>)
 80106a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106aa:	4619      	mov	r1, r3
 80106ac:	69b8      	ldr	r0, [r7, #24]
 80106ae:	f7fe fdb7 	bl	800f220 <_Serialize16>
        _Serialize8(p_port, GPS_update & 1);
 80106b2:	4b7c      	ldr	r3, [pc, #496]	; (80108a4 <evtMspReceive+0x120c>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	f003 0301 	and.w	r3, r3, #1
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	4619      	mov	r1, r3
 80106be:	69b8      	ldr	r0, [r7, #24]
 80106c0:	f7fe fd96 	bl	800f1f0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 5);
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80106ca:	2305      	movs	r3, #5
 80106cc:	6839      	ldr	r1, [r7, #0]
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f007 f898 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80106d4:	f000 bddf 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 80106d8:	2300      	movs	r3, #0
 80106da:	637b      	str	r3, [r7, #52]	; 0x34
 80106dc:	e00a      	b.n	80106f4 <evtMspReceive+0x105c>
            _Serialize16(p_port, angle[i]);
 80106de:	4a72      	ldr	r2, [pc, #456]	; (80108a8 <evtMspReceive+0x1210>)
 80106e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80106e6:	4619      	mov	r1, r3
 80106e8:	69b8      	ldr	r0, [r7, #24]
 80106ea:	f7fe fd99 	bl	800f220 <_Serialize16>
        for (i = 0; i < 2; i++)
 80106ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f0:	3301      	adds	r3, #1
 80106f2:	637b      	str	r3, [r7, #52]	; 0x34
 80106f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d9f1      	bls.n	80106de <evtMspReceive+0x1046>
        _Serialize16(p_port, heading);
 80106fa:	4b6c      	ldr	r3, [pc, #432]	; (80108ac <evtMspReceive+0x1214>)
 80106fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010700:	4619      	mov	r1, r3
 8010702:	69b8      	ldr	r0, [r7, #24]
 8010704:	f7fe fd8c 	bl	800f220 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801070e:	2306      	movs	r3, #6
 8010710:	6839      	ldr	r1, [r7, #0]
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f007 f876 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010718:	f000 bdbd 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_ALTITUDE:
        _Serialize32(p_port, EstAlt);
 801071c:	4b64      	ldr	r3, [pc, #400]	; (80108b0 <evtMspReceive+0x1218>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4619      	mov	r1, r3
 8010722:	69b8      	ldr	r0, [r7, #24]
 8010724:	f7fe fd9f 	bl	800f266 <_Serialize32>
        _Serialize16(p_port, vario);
 8010728:	4b62      	ldr	r3, [pc, #392]	; (80108b4 <evtMspReceive+0x121c>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	b21b      	sxth	r3, r3
 801072e:	4619      	mov	r1, r3
 8010730:	69b8      	ldr	r0, [r7, #24]
 8010732:	f7fe fd75 	bl	800f220 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 6);
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801073c:	2306      	movs	r3, #6
 801073e:	6839      	ldr	r1, [r7, #0]
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f007 f85f 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010746:	f000 bda6 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_ANALOG:
        _Serialize8(p_port, (uint8_t)constrain((int16_t)vbat, 0, 255));
 801074a:	4b5b      	ldr	r3, [pc, #364]	; (80108b8 <evtMspReceive+0x1220>)
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	b21b      	sxth	r3, r3
 8010750:	22ff      	movs	r2, #255	; 0xff
 8010752:	2100      	movs	r1, #0
 8010754:	4618      	mov	r0, r3
 8010756:	f7f3 faa9 	bl	8003cac <constrain>
 801075a:	4603      	mov	r3, r0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	4619      	mov	r1, r3
 8010760:	69b8      	ldr	r0, [r7, #24]
 8010762:	f7fe fd45 	bl	800f1f0 <_Serialize8>
        _Serialize16(p_port, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010766:	4b55      	ldr	r3, [pc, #340]	; (80108bc <evtMspReceive+0x1224>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801076e:	2100      	movs	r1, #0
 8010770:	4618      	mov	r0, r3
 8010772:	f7f3 fa9b 	bl	8003cac <constrain>
 8010776:	4603      	mov	r3, r0
 8010778:	b21b      	sxth	r3, r3
 801077a:	4619      	mov	r1, r3
 801077c:	69b8      	ldr	r0, [r7, #24]
 801077e:	f7fe fd4f 	bl	800f220 <_Serialize16>
//        _Serialize16(p_port, rssi);
        _Serialize16(p_port, pif_performance._use_rate * 10);
 8010782:	4b4f      	ldr	r3, [pc, #316]	; (80108c0 <evtMspReceive+0x1228>)
 8010784:	791b      	ldrb	r3, [r3, #4]
 8010786:	b29b      	uxth	r3, r3
 8010788:	461a      	mov	r2, r3
 801078a:	0092      	lsls	r2, r2, #2
 801078c:	4413      	add	r3, r2
 801078e:	005b      	lsls	r3, r3, #1
 8010790:	b29b      	uxth	r3, r3
 8010792:	b21b      	sxth	r3, r3
 8010794:	4619      	mov	r1, r3
 8010796:	69b8      	ldr	r0, [r7, #24]
 8010798:	f7fe fd42 	bl	800f220 <_Serialize16>
        if (mcfg.multiwiicurrentoutput)
 801079c:	4b49      	ldr	r3, [pc, #292]	; (80108c4 <evtMspReceive+0x122c>)
 801079e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d016      	beq.n	80107d4 <evtMspReceive+0x113c>
            _Serialize16(p_port, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 80107a6:	4b48      	ldr	r3, [pc, #288]	; (80108c8 <evtMspReceive+0x1230>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80107ae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80107b2:	4613      	mov	r3, r2
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	4413      	add	r3, r2
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107be:	2100      	movs	r1, #0
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f3 fa73 	bl	8003cac <constrain>
 80107c6:	4603      	mov	r3, r0
 80107c8:	b21b      	sxth	r3, r3
 80107ca:	4619      	mov	r1, r3
 80107cc:	69b8      	ldr	r0, [r7, #24]
 80107ce:	f7fe fd27 	bl	800f220 <_Serialize16>
 80107d2:	e010      	b.n	80107f6 <evtMspReceive+0x115e>
        else
            _Serialize16(p_port, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 80107d4:	4b3c      	ldr	r3, [pc, #240]	; (80108c8 <evtMspReceive+0x1230>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	bfb8      	it	lt
 80107dc:	425b      	neglt	r3, r3
 80107de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107e2:	2100      	movs	r1, #0
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7f3 fa61 	bl	8003cac <constrain>
 80107ea:	4603      	mov	r3, r0
 80107ec:	b21b      	sxth	r3, r3
 80107ee:	4619      	mov	r1, r3
 80107f0:	69b8      	ldr	r0, [r7, #24]
 80107f2:	f7fe fd15 	bl	800f220 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80107fc:	2307      	movs	r3, #7
 80107fe:	6839      	ldr	r1, [r7, #0]
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f006 ffff 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010806:	f000 bd46 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_RC_TUNING:
        _Serialize8(p_port, cfg.rcRate8);
 801080a:	4b30      	ldr	r3, [pc, #192]	; (80108cc <evtMspReceive+0x1234>)
 801080c:	7fdb      	ldrb	r3, [r3, #31]
 801080e:	4619      	mov	r1, r3
 8010810:	69b8      	ldr	r0, [r7, #24]
 8010812:	f7fe fced 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.rcExpo8);
 8010816:	4b2d      	ldr	r3, [pc, #180]	; (80108cc <evtMspReceive+0x1234>)
 8010818:	f893 3020 	ldrb.w	r3, [r3, #32]
 801081c:	4619      	mov	r1, r3
 801081e:	69b8      	ldr	r0, [r7, #24]
 8010820:	f7fe fce6 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[0]); // here for legacy support
 8010824:	4b29      	ldr	r3, [pc, #164]	; (80108cc <evtMspReceive+0x1234>)
 8010826:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801082a:	4619      	mov	r1, r3
 801082c:	69b8      	ldr	r0, [r7, #24]
 801082e:	f7fe fcdf 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.yawRate);
 8010832:	4b26      	ldr	r3, [pc, #152]	; (80108cc <evtMspReceive+0x1234>)
 8010834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010838:	4619      	mov	r1, r3
 801083a:	69b8      	ldr	r0, [r7, #24]
 801083c:	f7fe fcd8 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.dynThrPID);
 8010840:	4b22      	ldr	r3, [pc, #136]	; (80108cc <evtMspReceive+0x1234>)
 8010842:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8010846:	4619      	mov	r1, r3
 8010848:	69b8      	ldr	r0, [r7, #24]
 801084a:	f7fe fcd1 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.thrMid8);
 801084e:	4b1f      	ldr	r3, [pc, #124]	; (80108cc <evtMspReceive+0x1234>)
 8010850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010854:	4619      	mov	r1, r3
 8010856:	69b8      	ldr	r0, [r7, #24]
 8010858:	f7fe fcca 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.thrExpo8);
 801085c:	4b1b      	ldr	r3, [pc, #108]	; (80108cc <evtMspReceive+0x1234>)
 801085e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010862:	4619      	mov	r1, r3
 8010864:	69b8      	ldr	r0, [r7, #24]
 8010866:	f7fe fcc3 	bl	800f1f0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 7);
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010870:	2307      	movs	r3, #7
 8010872:	6839      	ldr	r1, [r7, #0]
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f006 ffc5 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 801087a:	f000 bd0c 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 801087e:	2300      	movs	r3, #0
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
 8010882:	e05c      	b.n	801093e <evtMspReceive+0x12a6>
 8010884:	20001980 	.word	0x20001980
 8010888:	20001a68 	.word	0x20001a68
 801088c:	20001a48 	.word	0x20001a48
 8010890:	20001a6e 	.word	0x20001a6e
 8010894:	20001a70 	.word	0x20001a70
 8010898:	20001a7a 	.word	0x20001a7a
 801089c:	20001a6a 	.word	0x20001a6a
 80108a0:	20001a6c 	.word	0x20001a6c
 80108a4:	20001a72 	.word	0x20001a72
 80108a8:	20001788 	.word	0x20001788
 80108ac:	20001cac 	.word	0x20001cac
 80108b0:	2000174c 	.word	0x2000174c
 80108b4:	20001764 	.word	0x20001764
 80108b8:	200019a8 	.word	0x200019a8
 80108bc:	200019b0 	.word	0x200019b0
 80108c0:	200020dc 	.word	0x200020dc
 80108c4:	20000bb4 	.word	0x20000bb4
 80108c8:	200019ac 	.word	0x200019ac
 80108cc:	20001120 	.word	0x20001120
            _Serialize8(p_port, cfg.P8[i]);
 80108d0:	4aa7      	ldr	r2, [pc, #668]	; (8010b70 <evtMspReceive+0x14d8>)
 80108d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d4:	4413      	add	r3, r2
 80108d6:	3301      	adds	r3, #1
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	4619      	mov	r1, r3
 80108dc:	69b8      	ldr	r0, [r7, #24]
 80108de:	f7fe fc87 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, cfg.I8[i]);
 80108e2:	4aa3      	ldr	r2, [pc, #652]	; (8010b70 <evtMspReceive+0x14d8>)
 80108e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e6:	4413      	add	r3, r2
 80108e8:	330b      	adds	r3, #11
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	4619      	mov	r1, r3
 80108ee:	69b8      	ldr	r0, [r7, #24]
 80108f0:	f7fe fc7e 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, cfg.D8[i]);
 80108f4:	4a9e      	ldr	r2, [pc, #632]	; (8010b70 <evtMspReceive+0x14d8>)
 80108f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f8:	4413      	add	r3, r2
 80108fa:	3315      	adds	r3, #21
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	4619      	mov	r1, r3
 8010900:	69b8      	ldr	r0, [r7, #24]
 8010902:	f7fe fc75 	bl	800f1f0 <_Serialize8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 8010906:	4a9a      	ldr	r2, [pc, #616]	; (8010b70 <evtMspReceive+0x14d8>)
 8010908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090a:	4413      	add	r3, r2
 801090c:	3301      	adds	r3, #1
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	4618      	mov	r0, r3
 8010912:	4a97      	ldr	r2, [pc, #604]	; (8010b70 <evtMspReceive+0x14d8>)
 8010914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010916:	4413      	add	r3, r2
 8010918:	330b      	adds	r3, #11
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	4619      	mov	r1, r3
 801091e:	4a94      	ldr	r2, [pc, #592]	; (8010b70 <evtMspReceive+0x14d8>)
 8010920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010922:	4413      	add	r3, r2
 8010924:	3315      	adds	r3, #21
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	9301      	str	r3, [sp, #4]
 801092a:	9100      	str	r1, [sp, #0]
 801092c:	4603      	mov	r3, r0
 801092e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010930:	4990      	ldr	r1, [pc, #576]	; (8010b74 <evtMspReceive+0x14dc>)
 8010932:	2002      	movs	r0, #2
 8010934:	f002 fe50 	bl	80135d8 <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 8010938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093a:	3301      	adds	r3, #1
 801093c:	637b      	str	r3, [r7, #52]	; 0x34
 801093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010940:	2b09      	cmp	r3, #9
 8010942:	d9c5      	bls.n	80108d0 <evtMspReceive+0x1238>
#endif
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 3 * PIDITEMS);
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801094a:	231e      	movs	r3, #30
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f006 ff58 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010954:	f000 bc9f 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_PIDNAMES:
        _SerializeNames(p_port, pidnames);
 8010958:	4987      	ldr	r1, [pc, #540]	; (8010b78 <evtMspReceive+0x14e0>)
 801095a:	69b8      	ldr	r0, [r7, #24]
 801095c:	f7fe fcd3 	bl	800f306 <_SerializeNames>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, sizeof(pidnames) - 1);
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010966:	232f      	movs	r3, #47	; 0x2f
 8010968:	6839      	ldr	r1, [r7, #0]
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f006 ff4a 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010970:	f000 bc91 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 8010974:	2300      	movs	r3, #0
 8010976:	637b      	str	r3, [r7, #52]	; 0x34
 8010978:	e010      	b.n	801099c <evtMspReceive+0x1304>
            _Serialize16(p_port, cfg.activate[availableBoxes[i]]);
 801097a:	4a80      	ldr	r2, [pc, #512]	; (8010b7c <evtMspReceive+0x14e4>)
 801097c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097e:	4413      	add	r3, r2
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	4a7b      	ldr	r2, [pc, #492]	; (8010b70 <evtMspReceive+0x14d8>)
 8010984:	3312      	adds	r3, #18
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	b21b      	sxth	r3, r3
 801098e:	4619      	mov	r1, r3
 8010990:	69b8      	ldr	r0, [r7, #24]
 8010992:	f7fe fc45 	bl	800f220 <_Serialize16>
        for (i = 0; i < numberBoxItems; i++)
 8010996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010998:	3301      	adds	r3, #1
 801099a:	637b      	str	r3, [r7, #52]	; 0x34
 801099c:	4b78      	ldr	r3, [pc, #480]	; (8010b80 <evtMspReceive+0x14e8>)
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	461a      	mov	r2, r3
 80109a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d3e8      	bcc.n	801097a <evtMspReceive+0x12e2>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * numberBoxItems);
 80109a8:	69bb      	ldr	r3, [r7, #24]
 80109aa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80109ae:	4b74      	ldr	r3, [pc, #464]	; (8010b80 <evtMspReceive+0x14e8>)
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	005b      	lsls	r3, r3, #1
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	6839      	ldr	r1, [r7, #0]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f006 ff22 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80109c0:	f000 bc69 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_BOXNAMES:
        tmp = _SerializeBoxNamesReply(p_port);
 80109c4:	69b8      	ldr	r0, [r7, #24]
 80109c6:	f7fe fcbf 	bl	800f348 <_SerializeBoxNamesReply>
 80109ca:	4603      	mov	r3, r0
 80109cc:	613b      	str	r3, [r7, #16]
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, tmp);
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	6839      	ldr	r1, [r7, #0]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f006 ff12 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80109e0:	f000 bc59 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 80109e4:	2300      	movs	r3, #0
 80109e6:	637b      	str	r3, [r7, #52]	; 0x34
 80109e8:	e028      	b.n	8010a3c <evtMspReceive+0x13a4>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80109ea:	2300      	movs	r3, #0
 80109ec:	633b      	str	r3, [r7, #48]	; 0x30
 80109ee:	e01f      	b.n	8010a30 <evtMspReceive+0x1398>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80109f0:	4964      	ldr	r1, [pc, #400]	; (8010b84 <evtMspReceive+0x14ec>)
 80109f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109f4:	4613      	mov	r3, r2
 80109f6:	005b      	lsls	r3, r3, #1
 80109f8:	4413      	add	r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	440b      	add	r3, r1
 80109fe:	3308      	adds	r3, #8
 8010a00:	781a      	ldrb	r2, [r3, #0]
 8010a02:	495e      	ldr	r1, [pc, #376]	; (8010b7c <evtMspReceive+0x14e4>)
 8010a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a06:	440b      	add	r3, r1
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d10d      	bne.n	8010a2a <evtMspReceive+0x1392>
                    _Serialize8(p_port, boxes[j].permanentId);
 8010a0e:	495d      	ldr	r1, [pc, #372]	; (8010b84 <evtMspReceive+0x14ec>)
 8010a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a12:	4613      	mov	r3, r2
 8010a14:	005b      	lsls	r3, r3, #1
 8010a16:	4413      	add	r3, r2
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	440b      	add	r3, r1
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	4619      	mov	r1, r3
 8010a22:	69b8      	ldr	r0, [r7, #24]
 8010a24:	f7fe fbe4 	bl	800f1f0 <_Serialize8>
                    break;
 8010a28:	e005      	b.n	8010a36 <evtMspReceive+0x139e>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a32:	2b18      	cmp	r3, #24
 8010a34:	d9dc      	bls.n	80109f0 <evtMspReceive+0x1358>
        for (i = 0; i < numberBoxItems; i++) {
 8010a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a38:	3301      	adds	r3, #1
 8010a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a3c:	4b50      	ldr	r3, [pc, #320]	; (8010b80 <evtMspReceive+0x14e8>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d3d0      	bcc.n	80109ea <evtMspReceive+0x1352>
                }
            }
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, numberBoxItems);
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010a4e:	4b4c      	ldr	r3, [pc, #304]	; (8010b80 <evtMspReceive+0x14e8>)
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	6839      	ldr	r1, [r7, #0]
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f006 fed4 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010a5c:	f000 bc1b 	b.w	8011296 <evtMspReceive+0x1bfe>

    case MSP_MISC:
        _Serialize16(p_port, mcfg.midrc);
 8010a60:	4b49      	ldr	r3, [pc, #292]	; (8010b88 <evtMspReceive+0x14f0>)
 8010a62:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010a66:	b21b      	sxth	r3, r3
 8010a68:	4619      	mov	r1, r3
 8010a6a:	69b8      	ldr	r0, [r7, #24]
 8010a6c:	f7fe fbd8 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.minthrottle);
 8010a70:	4b45      	ldr	r3, [pc, #276]	; (8010b88 <evtMspReceive+0x14f0>)
 8010a72:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8010a76:	b21b      	sxth	r3, r3
 8010a78:	4619      	mov	r1, r3
 8010a7a:	69b8      	ldr	r0, [r7, #24]
 8010a7c:	f7fe fbd0 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.maxthrottle);
 8010a80:	4b41      	ldr	r3, [pc, #260]	; (8010b88 <evtMspReceive+0x14f0>)
 8010a82:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8010a86:	b21b      	sxth	r3, r3
 8010a88:	4619      	mov	r1, r3
 8010a8a:	69b8      	ldr	r0, [r7, #24]
 8010a8c:	f7fe fbc8 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.mincommand);
 8010a90:	4b3d      	ldr	r3, [pc, #244]	; (8010b88 <evtMspReceive+0x14f0>)
 8010a92:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010a96:	b21b      	sxth	r3, r3
 8010a98:	4619      	mov	r1, r3
 8010a9a:	69b8      	ldr	r0, [r7, #24]
 8010a9c:	f7fe fbc0 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.failsafe_throttle);
 8010aa0:	4b33      	ldr	r3, [pc, #204]	; (8010b70 <evtMspReceive+0x14d8>)
 8010aa2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010aa6:	b21b      	sxth	r3, r3
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	69b8      	ldr	r0, [r7, #24]
 8010aac:	f7fe fbb8 	bl	800f220 <_Serialize16>
        _Serialize8(p_port, mcfg.gps_type);
 8010ab0:	4b35      	ldr	r3, [pc, #212]	; (8010b88 <evtMspReceive+0x14f0>)
 8010ab2:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	69b8      	ldr	r0, [r7, #24]
 8010aba:	f7fe fb99 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.gps_baudrate);
 8010abe:	4b32      	ldr	r3, [pc, #200]	; (8010b88 <evtMspReceive+0x14f0>)
 8010ac0:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	69b8      	ldr	r0, [r7, #24]
 8010aca:	f7fe fb91 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.gps_ubx_sbas);
 8010ace:	4b2e      	ldr	r3, [pc, #184]	; (8010b88 <evtMspReceive+0x14f0>)
 8010ad0:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	69b8      	ldr	r0, [r7, #24]
 8010ada:	f7fe fb89 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.multiwiicurrentoutput);
 8010ade:	4b2a      	ldr	r3, [pc, #168]	; (8010b88 <evtMspReceive+0x14f0>)
 8010ae0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	69b8      	ldr	r0, [r7, #24]
 8010ae8:	f7fe fb82 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.rssi_aux_channel);
 8010aec:	4b26      	ldr	r3, [pc, #152]	; (8010b88 <evtMspReceive+0x14f0>)
 8010aee:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010af2:	4619      	mov	r1, r3
 8010af4:	69b8      	ldr	r0, [r7, #24]
 8010af6:	f7fe fb7b 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, 0);
 8010afa:	2100      	movs	r1, #0
 8010afc:	69b8      	ldr	r0, [r7, #24]
 8010afe:	f7fe fb77 	bl	800f1f0 <_Serialize8>
        _Serialize16(p_port, cfg.mag_declination / 10); // TODO check this shit
 8010b02:	4b1b      	ldr	r3, [pc, #108]	; (8010b70 <evtMspReceive+0x14d8>)
 8010b04:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8010b08:	4a20      	ldr	r2, [pc, #128]	; (8010b8c <evtMspReceive+0x14f4>)
 8010b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8010b0e:	1092      	asrs	r2, r2, #2
 8010b10:	17db      	asrs	r3, r3, #31
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	b21b      	sxth	r3, r3
 8010b16:	4619      	mov	r1, r3
 8010b18:	69b8      	ldr	r0, [r7, #24]
 8010b1a:	f7fe fb81 	bl	800f220 <_Serialize16>
        _Serialize8(p_port, mcfg.vbatscale);
 8010b1e:	4b1a      	ldr	r3, [pc, #104]	; (8010b88 <evtMspReceive+0x14f0>)
 8010b20:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010b24:	4619      	mov	r1, r3
 8010b26:	69b8      	ldr	r0, [r7, #24]
 8010b28:	f7fe fb62 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmincellvoltage);
 8010b2c:	4b16      	ldr	r3, [pc, #88]	; (8010b88 <evtMspReceive+0x14f0>)
 8010b2e:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010b32:	4619      	mov	r1, r3
 8010b34:	69b8      	ldr	r0, [r7, #24]
 8010b36:	f7fe fb5b 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatmaxcellvoltage);
 8010b3a:	4b13      	ldr	r3, [pc, #76]	; (8010b88 <evtMspReceive+0x14f0>)
 8010b3c:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010b40:	4619      	mov	r1, r3
 8010b42:	69b8      	ldr	r0, [r7, #24]
 8010b44:	f7fe fb54 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.vbatwarningcellvoltage);
 8010b48:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <evtMspReceive+0x14f0>)
 8010b4a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010b4e:	4619      	mov	r1, r3
 8010b50:	69b8      	ldr	r0, [r7, #24]
 8010b52:	f7fe fb4d 	bl	800f1f0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 2 * 6 + 4 + 2 + 4);
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010b5c:	2316      	movs	r3, #22
 8010b5e:	6839      	ldr	r1, [r7, #0]
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f006 fe4f 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010b66:	e396      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010b68:	2300      	movs	r3, #0
 8010b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8010b6c:	e01b      	b.n	8010ba6 <evtMspReceive+0x150e>
 8010b6e:	bf00      	nop
 8010b70:	20001120 	.word	0x20001120
 8010b74:	080265d0 	.word	0x080265d0
 8010b78:	080282a4 	.word	0x080282a4
 8010b7c:	20001efc 	.word	0x20001efc
 8010b80:	20001f15 	.word	0x20001f15
 8010b84:	0802816c 	.word	0x0802816c
 8010b88:	20000bb4 	.word	0x20000bb4
 8010b8c:	66666667 	.word	0x66666667
            _Serialize8(p_port, i + 1);
 8010b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	3301      	adds	r3, #1
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	4619      	mov	r1, r3
 8010b9a:	69b8      	ldr	r0, [r7, #24]
 8010b9c:	f7fe fb28 	bl	800f1f0 <_Serialize8>
        for (i = 0; i < 8; i++)
 8010ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8010ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ba8:	2b07      	cmp	r3, #7
 8010baa:	d9f1      	bls.n	8010b90 <evtMspReceive+0x14f8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010bb2:	2308      	movs	r3, #8
 8010bb4:	6839      	ldr	r1, [r7, #0]
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f006 fe24 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010bbc:	e36b      	b.n	8011296 <evtMspReceive+0x1bfe>

#ifdef GPS
    case MSP_WP:
        wp_no = _Read8(p_port);    // get the wp number
 8010bbe:	69b8      	ldr	r0, [r7, #24]
 8010bc0:	f7fe fabc 	bl	800f13c <_Read8>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	75fb      	strb	r3, [r7, #23]
        if (wp_no == 0) {
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <evtMspReceive+0x1544>
            lat = GPS_home[LAT];
 8010bce:	4b9c      	ldr	r3, [pc, #624]	; (8010e40 <evtMspReceive+0x17a8>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010bd4:	4b9a      	ldr	r3, [pc, #616]	; (8010e40 <evtMspReceive+0x17a8>)
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bda:	e008      	b.n	8010bee <evtMspReceive+0x1556>
        } else if (wp_no == 16) {
 8010bdc:	7dfb      	ldrb	r3, [r7, #23]
 8010bde:	2b10      	cmp	r3, #16
 8010be0:	d105      	bne.n	8010bee <evtMspReceive+0x1556>
            lat = GPS_hold[LAT];
 8010be2:	4b98      	ldr	r3, [pc, #608]	; (8010e44 <evtMspReceive+0x17ac>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010be8:	4b96      	ldr	r3, [pc, #600]	; (8010e44 <evtMspReceive+0x17ac>)
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	627b      	str	r3, [r7, #36]	; 0x24
        }
        _Serialize8(p_port, wp_no);
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	69b8      	ldr	r0, [r7, #24]
 8010bf4:	f7fe fafc 	bl	800f1f0 <_Serialize8>
        _Serialize32(p_port, lat);
 8010bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	69b8      	ldr	r0, [r7, #24]
 8010bfe:	f7fe fb32 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, lon);
 8010c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c04:	4619      	mov	r1, r3
 8010c06:	69b8      	ldr	r0, [r7, #24]
 8010c08:	f7fe fb2d 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 8010c0c:	4b8e      	ldr	r3, [pc, #568]	; (8010e48 <evtMspReceive+0x17b0>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4619      	mov	r1, r3
 8010c12:	69b8      	ldr	r0, [r7, #24]
 8010c14:	f7fe fb27 	bl	800f266 <_Serialize32>
        _Serialize16(p_port, 0);                 // heading  will come here (deg)
 8010c18:	2100      	movs	r1, #0
 8010c1a:	69b8      	ldr	r0, [r7, #24]
 8010c1c:	f7fe fb00 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, 0);                 // time to stay (ms) will come here
 8010c20:	2100      	movs	r1, #0
 8010c22:	69b8      	ldr	r0, [r7, #24]
 8010c24:	f7fe fafc 	bl	800f220 <_Serialize16>
        _Serialize8(p_port, 0);                  // nav flag will come here
 8010c28:	2100      	movs	r1, #0
 8010c2a:	69b8      	ldr	r0, [r7, #24]
 8010c2c:	f7fe fae0 	bl	800f1f0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 18);
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010c36:	2312      	movs	r3, #18
 8010c38:	6839      	ldr	r1, [r7, #0]
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f006 fde2 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010c40:	e329      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_WP:
        wp_no = _Read8(p_port);    //get the wp number
 8010c42:	69b8      	ldr	r0, [r7, #24]
 8010c44:	f7fe fa7a 	bl	800f13c <_Read8>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	75fb      	strb	r3, [r7, #23]
        lat = _Read32(p_port);
 8010c4c:	69b8      	ldr	r0, [r7, #24]
 8010c4e:	f7fe faa6 	bl	800f19e <_Read32>
 8010c52:	4603      	mov	r3, r0
 8010c54:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = _Read32(p_port);
 8010c56:	69b8      	ldr	r0, [r7, #24]
 8010c58:	f7fe faa1 	bl	800f19e <_Read32>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	627b      	str	r3, [r7, #36]	; 0x24
        alt = _Read32(p_port);     // to set altitude (cm)
 8010c60:	69b8      	ldr	r0, [r7, #24]
 8010c62:	f7fe fa9c 	bl	800f19e <_Read32>
 8010c66:	4603      	mov	r3, r0
 8010c68:	623b      	str	r3, [r7, #32]
        _Read16(p_port);           // future: to set heading (deg)
 8010c6a:	69b8      	ldr	r0, [r7, #24]
 8010c6c:	f7fe fa7a 	bl	800f164 <_Read16>
        _Read16(p_port);           // future: to set time to stay (ms)
 8010c70:	69b8      	ldr	r0, [r7, #24]
 8010c72:	f7fe fa77 	bl	800f164 <_Read16>
        _Read8(p_port);            // future: to set nav flag
 8010c76:	69b8      	ldr	r0, [r7, #24]
 8010c78:	f7fe fa60 	bl	800f13c <_Read8>
        if (wp_no == 0) {
 8010c7c:	7dfb      	ldrb	r3, [r7, #23]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d112      	bne.n	8010ca8 <evtMspReceive+0x1610>
            GPS_home[LAT] = lat;
 8010c82:	4a6f      	ldr	r2, [pc, #444]	; (8010e40 <evtMspReceive+0x17a8>)
 8010c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c86:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 8010c88:	4a6d      	ldr	r2, [pc, #436]	; (8010e40 <evtMspReceive+0x17a8>)
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8c:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010c8e:	4b6f      	ldr	r3, [pc, #444]	; (8010e4c <evtMspReceive+0x17b4>)
 8010c90:	2200      	movs	r2, #0
 8010c92:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010c94:	4b6d      	ldr	r3, [pc, #436]	; (8010e4c <evtMspReceive+0x17b4>)
 8010c96:	2201      	movs	r2, #1
 8010c98:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010c9a:	6a3b      	ldr	r3, [r7, #32]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d019      	beq.n	8010cd4 <evtMspReceive+0x163c>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010ca0:	4a69      	ldr	r2, [pc, #420]	; (8010e48 <evtMspReceive+0x17b0>)
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	e015      	b.n	8010cd4 <evtMspReceive+0x163c>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010ca8:	7dfb      	ldrb	r3, [r7, #23]
 8010caa:	2b10      	cmp	r3, #16
 8010cac:	d112      	bne.n	8010cd4 <evtMspReceive+0x163c>
            GPS_hold[LAT] = lat;
 8010cae:	4a65      	ldr	r2, [pc, #404]	; (8010e44 <evtMspReceive+0x17ac>)
 8010cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb2:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010cb4:	4a63      	ldr	r2, [pc, #396]	; (8010e44 <evtMspReceive+0x17ac>)
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb8:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <evtMspReceive+0x162e>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010cc0:	4a61      	ldr	r2, [pc, #388]	; (8010e48 <evtMspReceive+0x17b0>)
 8010cc2:	6a3b      	ldr	r3, [r7, #32]
 8010cc4:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010cc6:	4b62      	ldr	r3, [pc, #392]	; (8010e50 <evtMspReceive+0x17b8>)
 8010cc8:	2202      	movs	r2, #2
 8010cca:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 8010ccc:	4961      	ldr	r1, [pc, #388]	; (8010e54 <evtMspReceive+0x17bc>)
 8010cce:	485d      	ldr	r0, [pc, #372]	; (8010e44 <evtMspReceive+0x17ac>)
 8010cd0:	f7f8 f936 	bl	8008f40 <GPS_set_next_wp>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	6839      	ldr	r1, [r7, #0]
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f006 fd92 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010ce0:	e2d9      	b.n	8011296 <evtMspReceive+0x1bfe>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010ce2:	4b5a      	ldr	r3, [pc, #360]	; (8010e4c <evtMspReceive+0x17b4>)
 8010ce4:	785b      	ldrb	r3, [r3, #1]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d102      	bne.n	8010cf0 <evtMspReceive+0x1658>
            checkFirstTime(true);
 8010cea:	2001      	movs	r0, #1
 8010cec:	f7f5 fdfc 	bl	80068e8 <checkFirstTime>
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	6839      	ldr	r1, [r7, #0]
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f006 fd84 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010cfc:	e2cb      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 8010cfe:	4b53      	ldr	r3, [pc, #332]	; (8010e4c <evtMspReceive+0x17b4>)
 8010d00:	785b      	ldrb	r3, [r3, #1]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d103      	bne.n	8010d0e <evtMspReceive+0x1676>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010d06:	4b54      	ldr	r3, [pc, #336]	; (8010e58 <evtMspReceive+0x17c0>)
 8010d08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010d0c:	801a      	strh	r2, [r3, #0]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d0e:	2300      	movs	r3, #0
 8010d10:	2200      	movs	r2, #0
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f006 fd75 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010d1a:	e2bc      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 8010d1c:	4b4b      	ldr	r3, [pc, #300]	; (8010e4c <evtMspReceive+0x17b4>)
 8010d1e:	785b      	ldrb	r3, [r3, #1]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d102      	bne.n	8010d2a <evtMspReceive+0x1692>
            f.CALIBRATE_MAG = 1;
 8010d24:	4b49      	ldr	r3, [pc, #292]	; (8010e4c <evtMspReceive+0x17b4>)
 8010d26:	2201      	movs	r2, #1
 8010d28:	739a      	strb	r2, [r3, #14]
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	6839      	ldr	r1, [r7, #0]
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f006 fd67 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010d36:	e2ae      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010d38:	4b44      	ldr	r3, [pc, #272]	; (8010e4c <evtMspReceive+0x17b4>)
 8010d3a:	785b      	ldrb	r3, [r3, #1]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d004      	beq.n	8010d4a <evtMspReceive+0x16b2>
            pifMsp_MakeError(p_owner, p_packet);
 8010d40:	6839      	ldr	r1, [r7, #0]
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f006 fdda 	bl	80178fc <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
        }
        break;
 8010d48:	e2a5      	b.n	8011296 <evtMspReceive+0x1bfe>
            writeEEPROM(0, true);
 8010d4a:	2101      	movs	r1, #1
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	f7f5 fd49 	bl	80067e4 <writeEEPROM>
            pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010d52:	2300      	movs	r3, #0
 8010d54:	2200      	movs	r2, #0
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f006 fd53 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010d5e:	e29a      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010d60:	4b3e      	ldr	r3, [pc, #248]	; (8010e5c <evtMspReceive+0x17c4>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a3e      	ldr	r2, [pc, #248]	; (8010e60 <evtMspReceive+0x17c8>)
 8010d66:	fba2 2303 	umull	r2, r3, r2, r3
 8010d6a:	0c9b      	lsrs	r3, r3, #18
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	461a      	mov	r2, r3
 8010d70:	0152      	lsls	r2, r2, #5
 8010d72:	1ad2      	subs	r2, r2, r3
 8010d74:	0092      	lsls	r2, r2, #2
 8010d76:	4413      	add	r3, r2
 8010d78:	00db      	lsls	r3, r3, #3
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	4b39      	ldr	r3, [pc, #228]	; (8010e64 <evtMspReceive+0x17cc>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4937      	ldr	r1, [pc, #220]	; (8010e60 <evtMspReceive+0x17c8>)
 8010d82:	fba1 1303 	umull	r1, r3, r1, r3
 8010d86:	0c9b      	lsrs	r3, r3, #18
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4413      	add	r3, r2
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	b21a      	sxth	r2, r3
 8010d90:	4b35      	ldr	r3, [pc, #212]	; (8010e68 <evtMspReceive+0x17d0>)
 8010d92:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010d94:	2300      	movs	r3, #0
 8010d96:	637b      	str	r3, [r7, #52]	; 0x34
 8010d98:	e00a      	b.n	8010db0 <evtMspReceive+0x1718>
            _Serialize16(p_port, debug[i]);      // 4 variables are here for general monitoring purpose
 8010d9a:	4a33      	ldr	r2, [pc, #204]	; (8010e68 <evtMspReceive+0x17d0>)
 8010d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010da2:	4619      	mov	r1, r3
 8010da4:	69b8      	ldr	r0, [r7, #24]
 8010da6:	f7fe fa3b 	bl	800f220 <_Serialize16>
        for (i = 0; i < 4; i++)
 8010daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dac:	3301      	adds	r3, #1
 8010dae:	637b      	str	r3, [r7, #52]	; 0x34
 8010db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d9f1      	bls.n	8010d9a <evtMspReceive+0x1702>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 8);
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	6839      	ldr	r1, [r7, #0]
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f006 fd1f 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010dc6:	e266      	b.n	8011296 <evtMspReceive+0x1bfe>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        _Serialize16(p_port, cfg.angleTrim[PITCH]);
 8010dc8:	4b28      	ldr	r3, [pc, #160]	; (8010e6c <evtMspReceive+0x17d4>)
 8010dca:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010dce:	4619      	mov	r1, r3
 8010dd0:	69b8      	ldr	r0, [r7, #24]
 8010dd2:	f7fe fa25 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, cfg.angleTrim[ROLL]);
 8010dd6:	4b25      	ldr	r3, [pc, #148]	; (8010e6c <evtMspReceive+0x17d4>)
 8010dd8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010ddc:	4619      	mov	r1, r3
 8010dde:	69b8      	ldr	r0, [r7, #24]
 8010de0:	f7fe fa1e 	bl	800f220 <_Serialize16>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 4);
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010dea:	2304      	movs	r3, #4
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f006 fd08 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010df4:	e24f      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_UID:
        _Serialize32(p_port, g_unique_id[0]);
 8010df6:	4b1e      	ldr	r3, [pc, #120]	; (8010e70 <evtMspReceive+0x17d8>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	69b8      	ldr	r0, [r7, #24]
 8010dfe:	f7fe fa32 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, g_unique_id[1]);
 8010e02:	4b1b      	ldr	r3, [pc, #108]	; (8010e70 <evtMspReceive+0x17d8>)
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	4619      	mov	r1, r3
 8010e08:	69b8      	ldr	r0, [r7, #24]
 8010e0a:	f7fe fa2c 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, g_unique_id[2]);
 8010e0e:	4b18      	ldr	r3, [pc, #96]	; (8010e70 <evtMspReceive+0x17d8>)
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	4619      	mov	r1, r3
 8010e14:	69b8      	ldr	r0, [r7, #24]
 8010e16:	f7fe fa26 	bl	800f266 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 12);
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010e20:	230c      	movs	r3, #12
 8010e22:	6839      	ldr	r1, [r7, #0]
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f006 fced 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010e2a:	e234      	b.n	8011296 <evtMspReceive+0x1bfe>

#ifdef GPS
    case MSP_GPSSVINFO:
        _Serialize8(p_port, GPS_numCh);
 8010e2c:	4b11      	ldr	r3, [pc, #68]	; (8010e74 <evtMspReceive+0x17dc>)
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	4619      	mov	r1, r3
 8010e32:	69b8      	ldr	r0, [r7, #24]
 8010e34:	f7fe f9dc 	bl	800f1f0 <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8010e38:	2300      	movs	r3, #0
 8010e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e3c:	e03f      	b.n	8010ebe <evtMspReceive+0x1826>
 8010e3e:	bf00      	nop
 8010e40:	20001a50 	.word	0x20001a50
 8010e44:	20001a5c 	.word	0x20001a5c
 8010e48:	20001754 	.word	0x20001754
 8010e4c:	20001980 	.word	0x20001980
 8010e50:	20001a84 	.word	0x20001a84
 8010e54:	20001a60 	.word	0x20001a60
 8010e58:	20001ca6 	.word	0x20001ca6
 8010e5c:	2000196c 	.word	0x2000196c
 8010e60:	431bde83 	.word	0x431bde83
 8010e64:	20001970 	.word	0x20001970
 8010e68:	20001998 	.word	0x20001998
 8010e6c:	20001120 	.word	0x20001120
 8010e70:	20001974 	.word	0x20001974
 8010e74:	20001a85 	.word	0x20001a85
            _Serialize8(p_port, GPS_svinfo_chn[i]);
 8010e78:	4a8c      	ldr	r2, [pc, #560]	; (80110ac <evtMspReceive+0x1a14>)
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7c:	4413      	add	r3, r2
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	4619      	mov	r1, r3
 8010e82:	69b8      	ldr	r0, [r7, #24]
 8010e84:	f7fe f9b4 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_svid[i]);
 8010e88:	4a89      	ldr	r2, [pc, #548]	; (80110b0 <evtMspReceive+0x1a18>)
 8010e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e8c:	4413      	add	r3, r2
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	4619      	mov	r1, r3
 8010e92:	69b8      	ldr	r0, [r7, #24]
 8010e94:	f7fe f9ac 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_quality[i]);
 8010e98:	4a86      	ldr	r2, [pc, #536]	; (80110b4 <evtMspReceive+0x1a1c>)
 8010e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9c:	4413      	add	r3, r2
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	69b8      	ldr	r0, [r7, #24]
 8010ea4:	f7fe f9a4 	bl	800f1f0 <_Serialize8>
            _Serialize8(p_port, GPS_svinfo_cno[i]);
 8010ea8:	4a83      	ldr	r2, [pc, #524]	; (80110b8 <evtMspReceive+0x1a20>)
 8010eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eac:	4413      	add	r3, r2
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	69b8      	ldr	r0, [r7, #24]
 8010eb4:	f7fe f99c 	bl	800f1f0 <_Serialize8>
        for (i = 0; i < GPS_numCh; i++) {
 8010eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eba:	3301      	adds	r3, #1
 8010ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8010ebe:	4b7f      	ldr	r3, [pc, #508]	; (80110bc <evtMspReceive+0x1a24>)
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d3d6      	bcc.n	8010e78 <evtMspReceive+0x17e0>
        }
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + (GPS_numCh * 4));
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010ed0:	4b7a      	ldr	r3, [pc, #488]	; (80110bc <evtMspReceive+0x1a24>)
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	3301      	adds	r3, #1
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	6839      	ldr	r1, [r7, #0]
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f006 fc8f 	bl	8017804 <pifMsp_MakeAnswer>
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010ee6:	f7f7 faeb 	bl	80084c0 <gpsPollSvinfo>
        break;
 8010eea:	e1d4      	b.n	8011296 <evtMspReceive+0x1bfe>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010eec:	2020      	movs	r0, #32
 8010eee:	f7f6 f813 	bl	8006f18 <sensors>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d012      	beq.n	8010f1e <evtMspReceive+0x1886>
            _Serialize32(p_port, GPS_update_rate[1] - GPS_update_rate[0]);
 8010ef8:	4b71      	ldr	r3, [pc, #452]	; (80110c0 <evtMspReceive+0x1a28>)
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	4b70      	ldr	r3, [pc, #448]	; (80110c0 <evtMspReceive+0x1a28>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	4619      	mov	r1, r3
 8010f04:	69b8      	ldr	r0, [r7, #24]
 8010f06:	f7fe f9ae 	bl	800f266 <_Serialize32>
            _Serialize32(p_port, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010f0a:	4b6e      	ldr	r3, [pc, #440]	; (80110c4 <evtMspReceive+0x1a2c>)
 8010f0c:	685a      	ldr	r2, [r3, #4]
 8010f0e:	4b6d      	ldr	r3, [pc, #436]	; (80110c4 <evtMspReceive+0x1a2c>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	4619      	mov	r1, r3
 8010f16:	69b8      	ldr	r0, [r7, #24]
 8010f18:	f7fe f9a5 	bl	800f266 <_Serialize32>
 8010f1c:	e007      	b.n	8010f2e <evtMspReceive+0x1896>
        } else {
            _Serialize32(p_port, 0);
 8010f1e:	2100      	movs	r1, #0
 8010f20:	69b8      	ldr	r0, [r7, #24]
 8010f22:	f7fe f9a0 	bl	800f266 <_Serialize32>
            _Serialize32(p_port, 0);
 8010f26:	2100      	movs	r1, #0
 8010f28:	69b8      	ldr	r0, [r7, #24]
 8010f2a:	f7fe f99c 	bl	800f266 <_Serialize32>
        }
        _Serialize32(p_port, GPS_HorizontalAcc);
 8010f2e:	4b66      	ldr	r3, [pc, #408]	; (80110c8 <evtMspReceive+0x1a30>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4619      	mov	r1, r3
 8010f34:	69b8      	ldr	r0, [r7, #24]
 8010f36:	f7fe f996 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, GPS_VerticalAcc);
 8010f3a:	4b64      	ldr	r3, [pc, #400]	; (80110cc <evtMspReceive+0x1a34>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	69b8      	ldr	r0, [r7, #24]
 8010f42:	f7fe f990 	bl	800f266 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 16);
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8010f4c:	2310      	movs	r3, #16
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f006 fc57 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 8010f56:	e19e      	b.n	8011296 <evtMspReceive+0x1bfe>
#endif  // GPS

    case MSP_SET_CONFIG:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8010f58:	2300      	movs	r3, #0
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f006 fc50 	bl	8017804 <pifMsp_MakeAnswer>
        mcfg.mixerConfiguration = _Read8(p_port); // multitype
 8010f64:	69b8      	ldr	r0, [r7, #24]
 8010f66:	f7fe f8e9 	bl	800f13c <_Read8>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4b58      	ldr	r3, [pc, #352]	; (80110d0 <evtMspReceive+0x1a38>)
 8010f70:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010f72:	f7f6 f855 	bl	8007020 <featureClearAll>
        featureSet(_Read32(p_port)); // features bitmap
 8010f76:	69b8      	ldr	r0, [r7, #24]
 8010f78:	f7fe f911 	bl	800f19e <_Read32>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f6 f828 	bl	8006fd4 <featureSet>
        mcfg.serialrx_type = _Read8(p_port); // serialrx_type
 8010f84:	69b8      	ldr	r0, [r7, #24]
 8010f86:	f7fe f8d9 	bl	800f13c <_Read8>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	4b50      	ldr	r3, [pc, #320]	; (80110d0 <evtMspReceive+0x1a38>)
 8010f90:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = _Read16(p_port); // board_align_roll
 8010f94:	69b8      	ldr	r0, [r7, #24]
 8010f96:	f7fe f8e5 	bl	800f164 <_Read16>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	b21a      	sxth	r2, r3
 8010f9e:	4b4c      	ldr	r3, [pc, #304]	; (80110d0 <evtMspReceive+0x1a38>)
 8010fa0:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = _Read16(p_port); // board_align_pitch
 8010fa4:	69b8      	ldr	r0, [r7, #24]
 8010fa6:	f7fe f8dd 	bl	800f164 <_Read16>
 8010faa:	4603      	mov	r3, r0
 8010fac:	b21a      	sxth	r2, r3
 8010fae:	4b48      	ldr	r3, [pc, #288]	; (80110d0 <evtMspReceive+0x1a38>)
 8010fb0:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = _Read16(p_port); // board_align_yaw
 8010fb4:	69b8      	ldr	r0, [r7, #24]
 8010fb6:	f7fe f8d5 	bl	800f164 <_Read16>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	b21a      	sxth	r2, r3
 8010fbe:	4b44      	ldr	r3, [pc, #272]	; (80110d0 <evtMspReceive+0x1a38>)
 8010fc0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = _Read16(p_port);
 8010fc4:	69b8      	ldr	r0, [r7, #24]
 8010fc6:	f7fe f8cd 	bl	800f164 <_Read16>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	461a      	mov	r2, r3
 8010fce:	4b40      	ldr	r3, [pc, #256]	; (80110d0 <evtMspReceive+0x1a38>)
 8010fd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = _Read16(p_port);
 8010fd4:	69b8      	ldr	r0, [r7, #24]
 8010fd6:	f7fe f8c5 	bl	800f164 <_Read16>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b3c      	ldr	r3, [pc, #240]	; (80110d0 <evtMspReceive+0x1a38>)
 8010fe0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = _Read16(p_port);
 8010fe4:	69b8      	ldr	r0, [r7, #24]
 8010fe6:	f7fe f8bd 	bl	800f164 <_Read16>
 8010fea:	4603      	mov	r3, r0
 8010fec:	461a      	mov	r2, r3
 8010fee:	4b38      	ldr	r3, [pc, #224]	; (80110d0 <evtMspReceive+0x1a38>)
 8010ff0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = _Read8(p_port);
 8010ff4:	69b8      	ldr	r0, [r7, #24]
 8010ff6:	f7fe f8a1 	bl	800f13c <_Read8>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	4b35      	ldr	r3, [pc, #212]	; (80110d4 <evtMspReceive+0x1a3c>)
 8011000:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = _Read8(p_port);
 8011004:	69b8      	ldr	r0, [r7, #24]
 8011006:	f7fe f899 	bl	800f13c <_Read8>
 801100a:	4603      	mov	r3, r0
 801100c:	461a      	mov	r2, r3
 801100e:	4b31      	ldr	r3, [pc, #196]	; (80110d4 <evtMspReceive+0x1a3c>)
 8011010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = _Read8(p_port);
 8011014:	69b8      	ldr	r0, [r7, #24]
 8011016:	f7fe f891 	bl	800f13c <_Read8>
 801101a:	4603      	mov	r3, r0
 801101c:	461a      	mov	r2, r3
 801101e:	4b2c      	ldr	r3, [pc, #176]	; (80110d0 <evtMspReceive+0x1a38>)
 8011020:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = _Read8(p_port);
 8011024:	69b8      	ldr	r0, [r7, #24]
 8011026:	f7fe f889 	bl	800f13c <_Read8>
 801102a:	4603      	mov	r3, r0
 801102c:	461a      	mov	r2, r3
 801102e:	4b29      	ldr	r3, [pc, #164]	; (80110d4 <evtMspReceive+0x1a3c>)
 8011030:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = _Read16(p_port);
 8011034:	69b8      	ldr	r0, [r7, #24]
 8011036:	f7fe f895 	bl	800f164 <_Read16>
 801103a:	4603      	mov	r3, r0
 801103c:	613b      	str	r3, [r7, #16]
        if (tmp != mcfg.looptime) {
 801103e:	4b24      	ldr	r3, [pc, #144]	; (80110d0 <evtMspReceive+0x1a38>)
 8011040:	899b      	ldrh	r3, [r3, #12]
 8011042:	461a      	mov	r2, r3
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	4293      	cmp	r3, r2
 8011048:	d026      	beq.n	8011098 <evtMspReceive+0x1a00>
            if (mcfg.looptime && tmp) {
 801104a:	4b21      	ldr	r3, [pc, #132]	; (80110d0 <evtMspReceive+0x1a38>)
 801104c:	899b      	ldrh	r3, [r3, #12]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00b      	beq.n	801106a <evtMspReceive+0x19d2>
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d008      	beq.n	801106a <evtMspReceive+0x19d2>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8011058:	4b1f      	ldr	r3, [pc, #124]	; (80110d8 <evtMspReceive+0x1a40>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	b292      	uxth	r2, r2
 8011060:	4611      	mov	r1, r2
 8011062:	4618      	mov	r0, r3
 8011064:	f003 fbf8 	bl	8014858 <pifTask_ChangePeriod>
 8011068:	e012      	b.n	8011090 <evtMspReceive+0x19f8>
            }
            else {
                if (tmp) {
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d008      	beq.n	8011082 <evtMspReceive+0x19ea>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8011070:	4b19      	ldr	r3, [pc, #100]	; (80110d8 <evtMspReceive+0x1a40>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	b292      	uxth	r2, r2
 8011078:	2103      	movs	r1, #3
 801107a:	4618      	mov	r0, r3
 801107c:	f003 fbbe 	bl	80147fc <pifTask_ChangeMode>
 8011080:	e006      	b.n	8011090 <evtMspReceive+0x19f8>
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8011082:	4b15      	ldr	r3, [pc, #84]	; (80110d8 <evtMspReceive+0x1a40>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2264      	movs	r2, #100	; 0x64
 8011088:	2101      	movs	r1, #1
 801108a:	4618      	mov	r0, r3
 801108c:	f003 fbb6 	bl	80147fc <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b0e      	ldr	r3, [pc, #56]	; (80110d0 <evtMspReceive+0x1a38>)
 8011096:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = _Read8(p_port);
 8011098:	69b8      	ldr	r0, [r7, #24]
 801109a:	f7fe f84f 	bl	800f13c <_Read8>
 801109e:	4603      	mov	r3, r0
 80110a0:	461a      	mov	r2, r3
 80110a2:	4b0c      	ldr	r3, [pc, #48]	; (80110d4 <evtMspReceive+0x1a3c>)
 80110a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 80110a8:	e0f5      	b.n	8011296 <evtMspReceive+0x1bfe>
 80110aa:	bf00      	nop
 80110ac:	20001a88 	.word	0x20001a88
 80110b0:	20001aa8 	.word	0x20001aa8
 80110b4:	20001ac8 	.word	0x20001ac8
 80110b8:	20001ae8 	.word	0x20001ae8
 80110bc:	20001a85 	.word	0x20001a85
 80110c0:	20001b08 	.word	0x20001b08
 80110c4:	20001b10 	.word	0x20001b10
 80110c8:	20001b18 	.word	0x20001b18
 80110cc:	20001b1c 	.word	0x20001b1c
 80110d0:	20000bb4 	.word	0x20000bb4
 80110d4:	20001120 	.word	0x20001120
 80110d8:	20001b80 	.word	0x20001b80

    case MSP_CONFIG:
        _Serialize8(p_port, mcfg.mixerConfiguration);
 80110dc:	4b70      	ldr	r3, [pc, #448]	; (80112a0 <evtMspReceive+0x1c08>)
 80110de:	795b      	ldrb	r3, [r3, #5]
 80110e0:	4619      	mov	r1, r3
 80110e2:	69b8      	ldr	r0, [r7, #24]
 80110e4:	f7fe f884 	bl	800f1f0 <_Serialize8>
        _Serialize32(p_port, featureMask());
 80110e8:	f7f5 ffa6 	bl	8007038 <featureMask>
 80110ec:	4603      	mov	r3, r0
 80110ee:	4619      	mov	r1, r3
 80110f0:	69b8      	ldr	r0, [r7, #24]
 80110f2:	f7fe f8b8 	bl	800f266 <_Serialize32>
        _Serialize8(p_port, mcfg.serialrx_type);
 80110f6:	4b6a      	ldr	r3, [pc, #424]	; (80112a0 <evtMspReceive+0x1c08>)
 80110f8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80110fc:	4619      	mov	r1, r3
 80110fe:	69b8      	ldr	r0, [r7, #24]
 8011100:	f7fe f876 	bl	800f1f0 <_Serialize8>
        _Serialize16(p_port, mcfg.board_align_roll);
 8011104:	4b66      	ldr	r3, [pc, #408]	; (80112a0 <evtMspReceive+0x1c08>)
 8011106:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 801110a:	4619      	mov	r1, r3
 801110c:	69b8      	ldr	r0, [r7, #24]
 801110e:	f7fe f887 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_pitch);
 8011112:	4b63      	ldr	r3, [pc, #396]	; (80112a0 <evtMspReceive+0x1c08>)
 8011114:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8011118:	4619      	mov	r1, r3
 801111a:	69b8      	ldr	r0, [r7, #24]
 801111c:	f7fe f880 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.board_align_yaw);
 8011120:	4b5f      	ldr	r3, [pc, #380]	; (80112a0 <evtMspReceive+0x1c08>)
 8011122:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8011126:	4619      	mov	r1, r3
 8011128:	69b8      	ldr	r0, [r7, #24]
 801112a:	f7fe f879 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.currentscale);
 801112e:	4b5c      	ldr	r3, [pc, #368]	; (80112a0 <evtMspReceive+0x1c08>)
 8011130:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8011134:	b21b      	sxth	r3, r3
 8011136:	4619      	mov	r1, r3
 8011138:	69b8      	ldr	r0, [r7, #24]
 801113a:	f7fe f871 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.currentoffset);
 801113e:	4b58      	ldr	r3, [pc, #352]	; (80112a0 <evtMspReceive+0x1c08>)
 8011140:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8011144:	b21b      	sxth	r3, r3
 8011146:	4619      	mov	r1, r3
 8011148:	69b8      	ldr	r0, [r7, #24]
 801114a:	f7fe f869 	bl	800f220 <_Serialize16>
        _Serialize16(p_port, mcfg.motor_pwm_rate);
 801114e:	4b54      	ldr	r3, [pc, #336]	; (80112a0 <evtMspReceive+0x1c08>)
 8011150:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8011154:	b21b      	sxth	r3, r3
 8011156:	4619      	mov	r1, r3
 8011158:	69b8      	ldr	r0, [r7, #24]
 801115a:	f7fe f861 	bl	800f220 <_Serialize16>
        _Serialize8(p_port, cfg.rollPitchRate[0]);
 801115e:	4b51      	ldr	r3, [pc, #324]	; (80112a4 <evtMspReceive+0x1c0c>)
 8011160:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011164:	4619      	mov	r1, r3
 8011166:	69b8      	ldr	r0, [r7, #24]
 8011168:	f7fe f842 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.rollPitchRate[1]);
 801116c:	4b4d      	ldr	r3, [pc, #308]	; (80112a4 <evtMspReceive+0x1c0c>)
 801116e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011172:	4619      	mov	r1, r3
 8011174:	69b8      	ldr	r0, [r7, #24]
 8011176:	f7fe f83b 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, mcfg.power_adc_channel);
 801117a:	4b49      	ldr	r3, [pc, #292]	; (80112a0 <evtMspReceive+0x1c08>)
 801117c:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8011180:	4619      	mov	r1, r3
 8011182:	69b8      	ldr	r0, [r7, #24]
 8011184:	f7fe f834 	bl	800f1f0 <_Serialize8>
        _Serialize8(p_port, cfg.small_angle);
 8011188:	4b46      	ldr	r3, [pc, #280]	; (80112a4 <evtMspReceive+0x1c0c>)
 801118a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801118e:	4619      	mov	r1, r3
 8011190:	69b8      	ldr	r0, [r7, #24]
 8011192:	f7fe f82d 	bl	800f1f0 <_Serialize8>
        _Serialize16(p_port, mcfg.looptime);
 8011196:	4b42      	ldr	r3, [pc, #264]	; (80112a0 <evtMspReceive+0x1c08>)
 8011198:	899b      	ldrh	r3, [r3, #12]
 801119a:	b21b      	sxth	r3, r3
 801119c:	4619      	mov	r1, r3
 801119e:	69b8      	ldr	r0, [r7, #24]
 80111a0:	f7fe f83e 	bl	800f220 <_Serialize16>
        _Serialize8(p_port, cfg.locked_in);
 80111a4:	4b3f      	ldr	r3, [pc, #252]	; (80112a4 <evtMspReceive+0x1c0c>)
 80111a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111aa:	4619      	mov	r1, r3
 80111ac:	69b8      	ldr	r0, [r7, #24]
 80111ae:	f7fe f81f 	bl	800f1f0 <_Serialize8>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 1 + 4 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 2 + 1);
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80111b8:	2319      	movs	r3, #25
 80111ba:	6839      	ldr	r1, [r7, #0]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f006 fb21 	bl	8017804 <pifMsp_MakeAnswer>
        /// ???
        break;
 80111c2:	e068      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111c4:	2300      	movs	r3, #0
 80111c6:	637b      	str	r3, [r7, #52]	; 0x34
 80111c8:	e00c      	b.n	80111e4 <evtMspReceive+0x1b4c>
            _Serialize8(p_port, mcfg.rcmap[i]);
 80111ca:	4a35      	ldr	r2, [pc, #212]	; (80112a0 <evtMspReceive+0x1c08>)
 80111cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ce:	4413      	add	r3, r2
 80111d0:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	4619      	mov	r1, r3
 80111d8:	69b8      	ldr	r0, [r7, #24]
 80111da:	f7fe f809 	bl	800f1f0 <_Serialize8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 80111de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e0:	3301      	adds	r3, #1
 80111e2:	637b      	str	r3, [r7, #52]	; 0x34
 80111e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111e6:	2b07      	cmp	r3, #7
 80111e8:	d9ef      	bls.n	80111ca <evtMspReceive+0x1b32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, MAX_SERIAL_INPUTS);
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80111f0:	2308      	movs	r3, #8
 80111f2:	6839      	ldr	r1, [r7, #0]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f006 fb05 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 80111fa:	e04c      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_SET_RCMAP:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 80111fc:	2300      	movs	r3, #0
 80111fe:	2200      	movs	r2, #0
 8011200:	6839      	ldr	r1, [r7, #0]
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f006 fafe 	bl	8017804 <pifMsp_MakeAnswer>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8011208:	2300      	movs	r3, #0
 801120a:	637b      	str	r3, [r7, #52]	; 0x34
 801120c:	e00e      	b.n	801122c <evtMspReceive+0x1b94>
            mcfg.rcmap[i] = _Read8(p_port);
 801120e:	69b8      	ldr	r0, [r7, #24]
 8011210:	f7fd ff94 	bl	800f13c <_Read8>
 8011214:	4603      	mov	r3, r0
 8011216:	4619      	mov	r1, r3
 8011218:	4a21      	ldr	r2, [pc, #132]	; (80112a0 <evtMspReceive+0x1c08>)
 801121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121c:	4413      	add	r3, r2
 801121e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8011222:	460a      	mov	r2, r1
 8011224:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8011226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011228:	3301      	adds	r3, #1
 801122a:	637b      	str	r3, [r7, #52]	; 0x34
 801122c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122e:	2b07      	cmp	r3, #7
 8011230:	d9ed      	bls.n	801120e <evtMspReceive+0x1b76>
        break;
 8011232:	e030      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_REBOOT:
        pifMsp_MakeAnswer(p_owner, p_packet, NULL, 0);
 8011234:	2300      	movs	r3, #0
 8011236:	2200      	movs	r2, #0
 8011238:	6839      	ldr	r1, [r7, #0]
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f006 fae2 	bl	8017804 <pifMsp_MakeAnswer>
        pendReboot = true;
 8011240:	4b19      	ldr	r3, [pc, #100]	; (80112a8 <evtMspReceive+0x1c10>)
 8011242:	2201      	movs	r2, #1
 8011244:	701a      	strb	r2, [r3, #0]
        break;
 8011246:	e026      	b.n	8011296 <evtMspReceive+0x1bfe>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8011248:	2300      	movs	r3, #0
 801124a:	637b      	str	r3, [r7, #52]	; 0x34
 801124c:	e00a      	b.n	8011264 <evtMspReceive+0x1bcc>
            _Serialize8(p_port, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 801124e:	69fa      	ldr	r2, [r7, #28]
 8011250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011252:	4413      	add	r3, r2
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	4619      	mov	r1, r3
 8011258:	69b8      	ldr	r0, [r7, #24]
 801125a:	f7fd ffc9 	bl	800f1f0 <_Serialize8>
        for (i = 0; i < 11; i++)
 801125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011260:	3301      	adds	r3, #1
 8011262:	637b      	str	r3, [r7, #52]	; 0x34
 8011264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011266:	2b0a      	cmp	r3, #10
 8011268:	d9f1      	bls.n	801124e <evtMspReceive+0x1bb6>
        _Serialize32(p_port, 0); // future exp
 801126a:	2100      	movs	r1, #0
 801126c:	69b8      	ldr	r0, [r7, #24]
 801126e:	f7fd fffa 	bl	800f266 <_Serialize32>
        _Serialize32(p_port, 0); // future exp
 8011272:	2100      	movs	r1, #0
 8011274:	69b8      	ldr	r0, [r7, #24]
 8011276:	f7fd fff6 	bl	800f266 <_Serialize32>
        pifMsp_MakeAnswer(p_owner, p_packet, p_port->tx_packet, 11 + 4 + 4);
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8011280:	2313      	movs	r3, #19
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f006 fabd 	bl	8017804 <pifMsp_MakeAnswer>
        break;
 801128a:	e004      	b.n	8011296 <evtMspReceive+0x1bfe>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 801128c:	6839      	ldr	r1, [r7, #0]
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f006 fb34 	bl	80178fc <pifMsp_MakeError>
        break;
 8011294:	bf00      	nop
    }
}
 8011296:	bf00      	nop
 8011298:	373c      	adds	r7, #60	; 0x3c
 801129a:	46bd      	mov	sp, r7
 801129c:	bd90      	pop	{r4, r7, pc}
 801129e:	bf00      	nop
 80112a0:	20000bb4 	.word	0x20000bb4
 80112a4:	20001120 	.word	0x20001120
 80112a8:	20001f16 	.word	0x20001f16

080112ac <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	460b      	mov	r3, r1
 80112b6:	70fb      	strb	r3, [r7, #3]
    (void)p_owner;

    if (f.ARMED) return;
 80112b8:	4b0c      	ldr	r3, [pc, #48]	; (80112ec <evtMspOtherPacket+0x40>)
 80112ba:	785b      	ldrb	r3, [r3, #1]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d110      	bne.n	80112e2 <evtMspOtherPacket+0x36>

    if (data == '#')
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	2b23      	cmp	r3, #35	; 0x23
 80112c4:	d103      	bne.n	80112ce <evtMspOtherPacket+0x22>
        s_change_cli = TRUE;
 80112c6:	4b0a      	ldr	r3, [pc, #40]	; (80112f0 <evtMspOtherPacket+0x44>)
 80112c8:	2201      	movs	r2, #1
 80112ca:	701a      	strb	r2, [r3, #0]
 80112cc:	e00a      	b.n	80112e4 <evtMspOtherPacket+0x38>
    else if (data == mcfg.reboot_character)
 80112ce:	4b09      	ldr	r3, [pc, #36]	; (80112f4 <evtMspOtherPacket+0x48>)
 80112d0:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 80112d4:	78fa      	ldrb	r2, [r7, #3]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d104      	bne.n	80112e4 <evtMspOtherPacket+0x38>
        systemReset(true);      // reboot to bootloader
 80112da:	2001      	movs	r0, #1
 80112dc:	f7f0 fe82 	bl	8001fe4 <systemReset>
 80112e0:	e000      	b.n	80112e4 <evtMspOtherPacket+0x38>
    if (f.ARMED) return;
 80112e2:	bf00      	nop
}
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	20001980 	.word	0x20001980
 80112f0:	200020c8 	.word	0x200020c8
 80112f4:	20000bb4 	.word	0x20000bb4

080112f8 <serialCom>:

void serialCom(void)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 80112fc:	4b0c      	ldr	r3, [pc, #48]	; (8011330 <serialCom+0x38>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00b      	beq.n	801131c <serialCom+0x24>
        s_change_cli = FALSE;
 8011304:	4b0a      	ldr	r3, [pc, #40]	; (8011330 <serialCom+0x38>)
 8011306:	2200      	movs	r2, #0
 8011308:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 801130a:	480a      	ldr	r0, [pc, #40]	; (8011334 <serialCom+0x3c>)
 801130c:	f006 fa6a 	bl	80177e4 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8011310:	4b09      	ldr	r3, [pc, #36]	; (8011338 <serialCom+0x40>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	3304      	adds	r3, #4
 8011316:	4618      	mov	r0, r3
 8011318:	f7f5 f870 	bl	80063fc <cliInit>
    };

    if (pendReboot)
 801131c:	4b07      	ldr	r3, [pc, #28]	; (801133c <serialCom+0x44>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d002      	beq.n	801132a <serialCom+0x32>
        systemReset(false); // noreturn
 8011324:	2000      	movs	r0, #0
 8011326:	f7f0 fe5d 	bl	8001fe4 <systemReset>
}
 801132a:	bf00      	nop
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	200020c8 	.word	0x200020c8
 8011334:	20001f1c 	.word	0x20001f1c
 8011338:	20000afc 	.word	0x20000afc
 801133c:	20001f16 	.word	0x20001f16

08011340 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8011348:	4a07      	ldr	r2, [pc, #28]	; (8011368 <pif_Init+0x28>)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 801134e:	4b07      	ldr	r3, [pc, #28]	; (801136c <pif_Init+0x2c>)
 8011350:	2201      	movs	r2, #1
 8011352:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011354:	4b05      	ldr	r3, [pc, #20]	; (801136c <pif_Init+0x2c>)
 8011356:	2201      	movs	r2, #1
 8011358:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 801135a:	bf00      	nop
 801135c:	370c      	adds	r7, #12
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	200020e8 	.word	0x200020e8
 801136c:	200020d0 	.word	0x200020d0

08011370 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 8011376:	4b51      	ldr	r3, [pc, #324]	; (80114bc <pif_sigTimer1ms+0x14c>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	3301      	adds	r3, #1
 801137c:	4a4f      	ldr	r2, [pc, #316]	; (80114bc <pif_sigTimer1ms+0x14c>)
 801137e:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8011380:	4b4f      	ldr	r3, [pc, #316]	; (80114c0 <pif_sigTimer1ms+0x150>)
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	b29b      	uxth	r3, r3
 8011386:	3301      	adds	r3, #1
 8011388:	b29a      	uxth	r2, r3
 801138a:	4b4d      	ldr	r3, [pc, #308]	; (80114c0 <pif_sigTimer1ms+0x150>)
 801138c:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 801138e:	4b4c      	ldr	r3, [pc, #304]	; (80114c0 <pif_sigTimer1ms+0x150>)
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	b29b      	uxth	r3, r3
 8011394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011398:	f0c0 8089 	bcc.w	80114ae <pif_sigTimer1ms+0x13e>
        pif_timer1ms = 0;
 801139c:	4b48      	ldr	r3, [pc, #288]	; (80114c0 <pif_sigTimer1ms+0x150>)
 801139e:	2200      	movs	r2, #0
 80113a0:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 80113a2:	4b48      	ldr	r3, [pc, #288]	; (80114c4 <pif_sigTimer1ms+0x154>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	3301      	adds	r3, #1
 80113a8:	4a46      	ldr	r2, [pc, #280]	; (80114c4 <pif_sigTimer1ms+0x154>)
 80113aa:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 80113ac:	4b46      	ldr	r3, [pc, #280]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113ae:	795b      	ldrb	r3, [r3, #5]
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	3301      	adds	r3, #1
 80113b4:	b2da      	uxtb	r2, r3
 80113b6:	4b44      	ldr	r3, [pc, #272]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113b8:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 80113ba:	4b43      	ldr	r3, [pc, #268]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113bc:	795b      	ldrb	r3, [r3, #5]
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	2b3b      	cmp	r3, #59	; 0x3b
 80113c2:	d96d      	bls.n	80114a0 <pif_sigTimer1ms+0x130>
    		pif_datetime.second = 0;
 80113c4:	4b40      	ldr	r3, [pc, #256]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113c6:	2200      	movs	r2, #0
 80113c8:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 80113ca:	4b3f      	ldr	r3, [pc, #252]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113cc:	791b      	ldrb	r3, [r3, #4]
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	3301      	adds	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	4b3c      	ldr	r3, [pc, #240]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113d6:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 80113d8:	4b3b      	ldr	r3, [pc, #236]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113da:	791b      	ldrb	r3, [r3, #4]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	2b3b      	cmp	r3, #59	; 0x3b
 80113e0:	d95b      	bls.n	801149a <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 80113e2:	4b39      	ldr	r3, [pc, #228]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80113e8:	4b37      	ldr	r3, [pc, #220]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113ea:	78db      	ldrb	r3, [r3, #3]
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	3301      	adds	r3, #1
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	4b35      	ldr	r3, [pc, #212]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113f4:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 80113f6:	4b34      	ldr	r3, [pc, #208]	; (80114c8 <pif_sigTimer1ms+0x158>)
 80113f8:	78db      	ldrb	r3, [r3, #3]
 80113fa:	b2db      	uxtb	r3, r3
 80113fc:	2b17      	cmp	r3, #23
 80113fe:	d94c      	bls.n	801149a <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 8011400:	4b31      	ldr	r3, [pc, #196]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011402:	2200      	movs	r2, #0
 8011404:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 8011406:	4b30      	ldr	r3, [pc, #192]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011408:	789b      	ldrb	r3, [r3, #2]
 801140a:	b2db      	uxtb	r3, r3
 801140c:	3301      	adds	r3, #1
 801140e:	b2da      	uxtb	r2, r3
 8011410:	4b2d      	ldr	r3, [pc, #180]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011412:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 8011414:	4b2c      	ldr	r3, [pc, #176]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011416:	785b      	ldrb	r3, [r3, #1]
 8011418:	b2db      	uxtb	r3, r3
 801141a:	3b01      	subs	r3, #1
 801141c:	4a2b      	ldr	r2, [pc, #172]	; (80114cc <pif_sigTimer1ms+0x15c>)
 801141e:	5cd3      	ldrb	r3, [r2, r3]
 8011420:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 8011422:	4b29      	ldr	r3, [pc, #164]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011424:	785b      	ldrb	r3, [r3, #1]
 8011426:	b2db      	uxtb	r3, r3
 8011428:	2b02      	cmp	r3, #2
 801142a:	d117      	bne.n	801145c <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 801142c:	4b26      	ldr	r3, [pc, #152]	; (80114c8 <pif_sigTimer1ms+0x158>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	b2db      	uxtb	r3, r3
 8011432:	b29b      	uxth	r3, r3
 8011434:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8011438:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 801143a:	88bb      	ldrh	r3, [r7, #4]
 801143c:	2b03      	cmp	r3, #3
 801143e:	d80d      	bhi.n	801145c <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 8011440:	88bb      	ldrh	r3, [r7, #4]
 8011442:	2b63      	cmp	r3, #99	; 0x63
 8011444:	d807      	bhi.n	8011456 <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 8011446:	88bb      	ldrh	r3, [r7, #4]
 8011448:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801144c:	d206      	bcs.n	801145c <pif_sigTimer1ms+0xec>
 801144e:	79fb      	ldrb	r3, [r7, #7]
 8011450:	3301      	adds	r3, #1
 8011452:	71fb      	strb	r3, [r7, #7]
 8011454:	e002      	b.n	801145c <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	3301      	adds	r3, #1
 801145a:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 801145c:	4b1a      	ldr	r3, [pc, #104]	; (80114c8 <pif_sigTimer1ms+0x158>)
 801145e:	789b      	ldrb	r3, [r3, #2]
 8011460:	b2db      	uxtb	r3, r3
 8011462:	79fa      	ldrb	r2, [r7, #7]
 8011464:	429a      	cmp	r2, r3
 8011466:	d218      	bcs.n	801149a <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 8011468:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <pif_sigTimer1ms+0x158>)
 801146a:	2201      	movs	r2, #1
 801146c:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 801146e:	4b16      	ldr	r3, [pc, #88]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011470:	785b      	ldrb	r3, [r3, #1]
 8011472:	b2db      	uxtb	r3, r3
 8011474:	3301      	adds	r3, #1
 8011476:	b2da      	uxtb	r2, r3
 8011478:	4b13      	ldr	r3, [pc, #76]	; (80114c8 <pif_sigTimer1ms+0x158>)
 801147a:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 801147c:	4b12      	ldr	r3, [pc, #72]	; (80114c8 <pif_sigTimer1ms+0x158>)
 801147e:	785b      	ldrb	r3, [r3, #1]
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b0c      	cmp	r3, #12
 8011484:	d909      	bls.n	801149a <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 8011486:	4b10      	ldr	r3, [pc, #64]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011488:	2201      	movs	r2, #1
 801148a:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 801148c:	4b0e      	ldr	r3, [pc, #56]	; (80114c8 <pif_sigTimer1ms+0x158>)
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	b2db      	uxtb	r3, r3
 8011492:	3301      	adds	r3, #1
 8011494:	b2da      	uxtb	r2, r3
 8011496:	4b0c      	ldr	r3, [pc, #48]	; (80114c8 <pif_sigTimer1ms+0x158>)
 8011498:	701a      	strb	r2, [r3, #0]
    					}
    				}
    			}
    		}

        	pif_performance.__state = 2;
 801149a:	4b0d      	ldr	r3, [pc, #52]	; (80114d0 <pif_sigTimer1ms+0x160>)
 801149c:	2202      	movs	r2, #2
 801149e:	715a      	strb	r2, [r3, #5]
    	}

    	if (!pif_performance.__state) pif_performance.__state = 1;
 80114a0:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <pif_sigTimer1ms+0x160>)
 80114a2:	795b      	ldrb	r3, [r3, #5]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d102      	bne.n	80114ae <pif_sigTimer1ms+0x13e>
 80114a8:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <pif_sigTimer1ms+0x160>)
 80114aa:	2201      	movs	r2, #1
 80114ac:	715a      	strb	r2, [r3, #5]
    }
}
 80114ae:	bf00      	nop
 80114b0:	370c      	adds	r7, #12
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop
 80114bc:	200020d8 	.word	0x200020d8
 80114c0:	200020ca 	.word	0x200020ca
 80114c4:	200020cc 	.word	0x200020cc
 80114c8:	200020d0 	.word	0x200020d0
 80114cc:	080282d4 	.word	0x080282d4
 80114d0:	200020dc 	.word	0x200020dc

080114d4 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b085      	sub	sp, #20
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80114de:	4b0a      	ldr	r3, [pc, #40]	; (8011508 <pif_Delay1ms+0x34>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80114e4:	4b08      	ldr	r3, [pc, #32]	; (8011508 <pif_Delay1ms+0x34>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	1ad3      	subs	r3, r2, r3
 80114f0:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80114f2:	897a      	ldrh	r2, [r7, #10]
 80114f4:	88fb      	ldrh	r3, [r7, #6]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d3f4      	bcc.n	80114e4 <pif_Delay1ms+0x10>
}
 80114fa:	bf00      	nop
 80114fc:	bf00      	nop
 80114fe:	3714      	adds	r7, #20
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr
 8011508:	200020d8 	.word	0x200020d8

0801150c <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	4603      	mov	r3, r0
 8011514:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 8011516:	4b0b      	ldr	r3, [pc, #44]	; (8011544 <pif_Delay1us+0x38>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4798      	blx	r3
 801151c:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 801151e:	4b09      	ldr	r3, [pc, #36]	; (8011544 <pif_Delay1us+0x38>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4798      	blx	r3
 8011524:	4603      	mov	r3, r0
 8011526:	b29a      	uxth	r2, r3
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	b29b      	uxth	r3, r3
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 8011530:	897a      	ldrh	r2, [r7, #10]
 8011532:	88fb      	ldrh	r3, [r7, #6]
 8011534:	429a      	cmp	r2, r3
 8011536:	d3f2      	bcc.n	801151e <pif_Delay1us+0x12>
}
 8011538:	bf00      	nop
 801153a:	bf00      	nop
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	200020e8 	.word	0x200020e8

08011548 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011548:	b480      	push	{r7}
 801154a:	b089      	sub	sp, #36	; 0x24
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	4613      	mov	r3, r2
 8011554:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 801155a:	88fb      	ldrh	r3, [r7, #6]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d01b      	beq.n	8011598 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011560:	88fb      	ldrh	r3, [r7, #6]
 8011562:	3b01      	subs	r3, #1
 8011564:	61fb      	str	r3, [r7, #28]
 8011566:	e013      	b.n	8011590 <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	fa22 f303 	lsr.w	r3, r2, r3
 8011570:	b2db      	uxtb	r3, r3
 8011572:	f003 0301 	and.w	r3, r3, #1
 8011576:	b2da      	uxtb	r2, r3
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	1c59      	adds	r1, r3, #1
 801157c:	61b9      	str	r1, [r7, #24]
 801157e:	4619      	mov	r1, r3
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	440b      	add	r3, r1
 8011584:	3230      	adds	r2, #48	; 0x30
 8011586:	b2d2      	uxtb	r2, r2
 8011588:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	3b01      	subs	r3, #1
 801158e:	61fb      	str	r3, [r7, #28]
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	2b00      	cmp	r3, #0
 8011594:	dae8      	bge.n	8011568 <pif_BinToString+0x20>
 8011596:	e030      	b.n	80115fa <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d025      	beq.n	80115ea <pif_BinToString+0xa2>
    	first = TRUE;
 801159e:	2301      	movs	r3, #1
 80115a0:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80115a2:	231f      	movs	r3, #31
 80115a4:	61fb      	str	r3, [r7, #28]
 80115a6:	e01c      	b.n	80115e2 <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 80115a8:	68ba      	ldr	r2, [r7, #8]
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	fa22 f303 	lsr.w	r3, r2, r3
 80115b0:	f003 0301 	and.w	r3, r3, #1
 80115b4:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 80115b6:	7dfb      	ldrb	r3, [r7, #23]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d002      	beq.n	80115c2 <pif_BinToString+0x7a>
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00c      	beq.n	80115dc <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	b2da      	uxtb	r2, r3
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	1c59      	adds	r1, r3, #1
 80115ca:	61b9      	str	r1, [r7, #24]
 80115cc:	4619      	mov	r1, r3
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	440b      	add	r3, r1
 80115d2:	3230      	adds	r2, #48	; 0x30
 80115d4:	b2d2      	uxtb	r2, r2
 80115d6:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80115d8:	2300      	movs	r3, #0
 80115da:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	3b01      	subs	r3, #1
 80115e0:	61fb      	str	r3, [r7, #28]
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	dadf      	bge.n	80115a8 <pif_BinToString+0x60>
 80115e8:	e007      	b.n	80115fa <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	1c5a      	adds	r2, r3, #1
 80115ee:	61ba      	str	r2, [r7, #24]
 80115f0:	461a      	mov	r2, r3
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	4413      	add	r3, r2
 80115f6:	2230      	movs	r2, #48	; 0x30
 80115f8:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80115fa:	69bb      	ldr	r3, [r7, #24]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3724      	adds	r7, #36	; 0x24
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011608:	b480      	push	{r7}
 801160a:	b08d      	sub	sp, #52	; 0x34
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	4613      	mov	r3, r2
 8011614:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 8011616:	2300      	movs	r3, #0
 8011618:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8011626:	4a43      	ldr	r2, [pc, #268]	; (8011734 <pif_DecToString+0x12c>)
 8011628:	f107 0314 	add.w	r3, r7, #20
 801162c:	ca07      	ldmia	r2, {r0, r1, r2}
 801162e:	c303      	stmia	r3!, {r0, r1}
 8011630:	801a      	strh	r2, [r3, #0]
 8011632:	3302      	adds	r3, #2
 8011634:	0c12      	lsrs	r2, r2, #16
 8011636:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 801163c:	6a3b      	ldr	r3, [r7, #32]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d05e      	beq.n	8011700 <pif_DecToString+0xf8>
        while (tmp_val) {
 8011642:	e02c      	b.n	801169e <pif_DecToString+0x96>
        	exp_cnt++;
 8011644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011646:	3301      	adds	r3, #1
 8011648:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 801164a:	6a3b      	ldr	r3, [r7, #32]
 801164c:	2b09      	cmp	r3, #9
 801164e:	d914      	bls.n	801167a <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 8011650:	6a39      	ldr	r1, [r7, #32]
 8011652:	4b39      	ldr	r3, [pc, #228]	; (8011738 <pif_DecToString+0x130>)
 8011654:	fba3 2301 	umull	r2, r3, r3, r1
 8011658:	08da      	lsrs	r2, r3, #3
 801165a:	4613      	mov	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4413      	add	r3, r2
 8011660:	005b      	lsls	r3, r3, #1
 8011662:	1aca      	subs	r2, r1, r3
 8011664:	b2d2      	uxtb	r2, r2
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	1c59      	adds	r1, r3, #1
 801166a:	6279      	str	r1, [r7, #36]	; 0x24
 801166c:	3230      	adds	r2, #48	; 0x30
 801166e:	b2d2      	uxtb	r2, r2
 8011670:	3330      	adds	r3, #48	; 0x30
 8011672:	443b      	add	r3, r7
 8011674:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011678:	e00b      	b.n	8011692 <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	b2da      	uxtb	r2, r3
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	1c59      	adds	r1, r3, #1
 8011682:	6279      	str	r1, [r7, #36]	; 0x24
 8011684:	3230      	adds	r2, #48	; 0x30
 8011686:	b2d2      	uxtb	r2, r2
 8011688:	3330      	adds	r3, #48	; 0x30
 801168a:	443b      	add	r3, r7
 801168c:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 8011690:	e008      	b.n	80116a4 <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 8011692:	6a3b      	ldr	r3, [r7, #32]
 8011694:	4a28      	ldr	r2, [pc, #160]	; (8011738 <pif_DecToString+0x130>)
 8011696:	fba2 2303 	umull	r2, r3, r2, r3
 801169a:	08db      	lsrs	r3, r3, #3
 801169c:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d1cf      	bne.n	8011644 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 80116a4:	88fb      	ldrh	r3, [r7, #6]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d026      	beq.n	80116f8 <pif_DecToString+0xf0>
 80116aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80116ac:	88fb      	ldrh	r3, [r7, #6]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d222      	bcs.n	80116f8 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 80116b2:	88fa      	ldrh	r2, [r7, #6]
 80116b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80116ba:	e00a      	b.n	80116d2 <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 80116bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80116c2:	461a      	mov	r2, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	4413      	add	r3, r2
 80116c8:	2230      	movs	r2, #48	; 0x30
 80116ca:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 80116cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116ce:	3b01      	subs	r3, #1
 80116d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80116d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d1f1      	bne.n	80116bc <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 80116d8:	e00e      	b.n	80116f8 <pif_DecToString+0xf0>
            idx_inv--;
 80116da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116dc:	3b01      	subs	r3, #1
 80116de:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 80116e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e2:	1c5a      	adds	r2, r3, #1
 80116e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80116e6:	461a      	mov	r2, r3
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	4413      	add	r3, r2
 80116ec:	f107 0114 	add.w	r1, r7, #20
 80116f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116f2:	440a      	add	r2, r1
 80116f4:	7812      	ldrb	r2, [r2, #0]
 80116f6:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1ed      	bne.n	80116da <pif_DecToString+0xd2>
 80116fe:	e012      	b.n	8011726 <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 8011700:	88fb      	ldrh	r3, [r7, #6]
 8011702:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 8011704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	62ba      	str	r2, [r7, #40]	; 0x28
 801170a:	461a      	mov	r2, r3
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	4413      	add	r3, r2
 8011710:	2230      	movs	r2, #48	; 0x30
 8011712:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 8011714:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011716:	2b00      	cmp	r3, #0
 8011718:	d002      	beq.n	8011720 <pif_DecToString+0x118>
 801171a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801171c:	3b01      	subs	r3, #1
 801171e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 8011720:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1ee      	bne.n	8011704 <pif_DecToString+0xfc>
    }
    return idx;
 8011726:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011728:	4618      	mov	r0, r3
 801172a:	3734      	adds	r7, #52	; 0x34
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	08026640 	.word	0x08026640
 8011738:	cccccccd 	.word	0xcccccccd

0801173c <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 801173c:	b480      	push	{r7}
 801173e:	b08b      	sub	sp, #44	; 0x2c
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	4611      	mov	r1, r2
 8011748:	461a      	mov	r2, r3
 801174a:	460b      	mov	r3, r1
 801174c:	80fb      	strh	r3, [r7, #6]
 801174e:	4613      	mov	r3, r2
 8011750:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 8011756:	797b      	ldrb	r3, [r7, #5]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <pif_HexToString+0x26>
 801175c:	4b2f      	ldr	r3, [pc, #188]	; (801181c <pif_HexToString+0xe0>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	e001      	b.n	8011766 <pif_HexToString+0x2a>
 8011762:	4b2f      	ldr	r3, [pc, #188]	; (8011820 <pif_HexToString+0xe4>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011768:	88fb      	ldrh	r3, [r7, #6]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d01d      	beq.n	80117aa <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 801176e:	88fb      	ldrh	r3, [r7, #6]
 8011770:	3b01      	subs	r3, #1
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	627b      	str	r3, [r7, #36]	; 0x24
 8011776:	e014      	b.n	80117a2 <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177c:	fa22 f303 	lsr.w	r3, r2, r3
 8011780:	f003 030f 	and.w	r3, r3, #15
 8011784:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011786:	69ba      	ldr	r2, [r7, #24]
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	441a      	add	r2, r3
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	1c59      	adds	r1, r3, #1
 8011790:	6239      	str	r1, [r7, #32]
 8011792:	4619      	mov	r1, r3
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	440b      	add	r3, r1
 8011798:	7812      	ldrb	r2, [r2, #0]
 801179a:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 801179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179e:	3b04      	subs	r3, #4
 80117a0:	627b      	str	r3, [r7, #36]	; 0x24
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	dae7      	bge.n	8011778 <pif_HexToString+0x3c>
 80117a8:	e030      	b.n	801180c <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d025      	beq.n	80117fc <pif_HexToString+0xc0>
    	first = TRUE;
 80117b0:	2301      	movs	r3, #1
 80117b2:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80117b4:	231c      	movs	r3, #28
 80117b6:	627b      	str	r3, [r7, #36]	; 0x24
 80117b8:	e01c      	b.n	80117f4 <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 80117ba:	68ba      	ldr	r2, [r7, #8]
 80117bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117be:	fa22 f303 	lsr.w	r3, r2, r3
 80117c2:	f003 030f 	and.w	r3, r3, #15
 80117c6:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 80117c8:	7ffb      	ldrb	r3, [r7, #31]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d002      	beq.n	80117d4 <pif_HexToString+0x98>
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00c      	beq.n	80117ee <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 80117d4:	69ba      	ldr	r2, [r7, #24]
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	441a      	add	r2, r3
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	1c59      	adds	r1, r3, #1
 80117de:	6239      	str	r1, [r7, #32]
 80117e0:	4619      	mov	r1, r3
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	440b      	add	r3, r1
 80117e6:	7812      	ldrb	r2, [r2, #0]
 80117e8:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80117ea:	2300      	movs	r3, #0
 80117ec:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80117ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f0:	3b04      	subs	r3, #4
 80117f2:	627b      	str	r3, [r7, #36]	; 0x24
 80117f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	dadf      	bge.n	80117ba <pif_HexToString+0x7e>
 80117fa:	e007      	b.n	801180c <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80117fc:	6a3b      	ldr	r3, [r7, #32]
 80117fe:	1c5a      	adds	r2, r3, #1
 8011800:	623a      	str	r2, [r7, #32]
 8011802:	461a      	mov	r2, r3
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	4413      	add	r3, r2
 8011808:	2230      	movs	r2, #48	; 0x30
 801180a:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 801180c:	6a3b      	ldr	r3, [r7, #32]
}
 801180e:	4618      	mov	r0, r3
 8011810:	372c      	adds	r7, #44	; 0x2c
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr
 801181a:	bf00      	nop
 801181c:	20000060 	.word	0x20000060
 8011820:	20000064 	.word	0x20000064

08011824 <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 8011824:	b5b0      	push	{r4, r5, r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	ed87 0b00 	vstr	d0, [r7]
 8011830:	460b      	mov	r3, r1
 8011832:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 8011834:	2300      	movs	r3, #0
 8011836:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011838:	f04f 0200 	mov.w	r2, #0
 801183c:	f04f 0300 	mov.w	r3, #0
 8011840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011844:	f7ef f908 	bl	8000a58 <__aeabi_dcmplt>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00d      	beq.n	801186a <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 801184e:	8abb      	ldrh	r3, [r7, #20]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	82ba      	strh	r2, [r7, #20]
 8011854:	461a      	mov	r2, r3
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	4413      	add	r3, r2
 801185a:	222d      	movs	r2, #45	; 0x2d
 801185c:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 801185e:	683c      	ldr	r4, [r7, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8011866:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 801186a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801186e:	f7ef f943 	bl	8000af8 <__aeabi_d2uiz>
 8011872:	4603      	mov	r3, r0
 8011874:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 8011876:	8abb      	ldrh	r3, [r7, #20]
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4413      	add	r3, r2
 801187c:	2200      	movs	r2, #0
 801187e:	6939      	ldr	r1, [r7, #16]
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff fec1 	bl	8011608 <pif_DecToString>
 8011886:	4603      	mov	r3, r0
 8011888:	b29a      	uxth	r2, r3
 801188a:	8abb      	ldrh	r3, [r7, #20]
 801188c:	4413      	add	r3, r2
 801188e:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 8011890:	8abb      	ldrh	r3, [r7, #20]
 8011892:	1c5a      	adds	r2, r3, #1
 8011894:	82ba      	strh	r2, [r7, #20]
 8011896:	461a      	mov	r2, r3
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	4413      	add	r3, r2
 801189c:	222e      	movs	r2, #46	; 0x2e
 801189e:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 80118a0:	897b      	ldrh	r3, [r7, #10]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d101      	bne.n	80118aa <pif_FloatToString+0x86>
 80118a6:	2306      	movs	r3, #6
 80118a8:	817b      	strh	r3, [r7, #10]
	value -= num;
 80118aa:	6938      	ldr	r0, [r7, #16]
 80118ac:	f7ee fde8 	bl	8000480 <__aeabi_ui2d>
 80118b0:	4602      	mov	r2, r0
 80118b2:	460b      	mov	r3, r1
 80118b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118b8:	f7ee fca4 	bl	8000204 <__aeabi_dsub>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 80118c4:	2300      	movs	r3, #0
 80118c6:	82fb      	strh	r3, [r7, #22]
 80118c8:	e00d      	b.n	80118e6 <pif_FloatToString+0xc2>
 80118ca:	f04f 0200 	mov.w	r2, #0
 80118ce:	4b13      	ldr	r3, [pc, #76]	; (801191c <pif_FloatToString+0xf8>)
 80118d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118d4:	f7ee fe4e 	bl	8000574 <__aeabi_dmul>
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	e9c7 2300 	strd	r2, r3, [r7]
 80118e0:	8afb      	ldrh	r3, [r7, #22]
 80118e2:	3301      	adds	r3, #1
 80118e4:	82fb      	strh	r3, [r7, #22]
 80118e6:	8afa      	ldrh	r2, [r7, #22]
 80118e8:	897b      	ldrh	r3, [r7, #10]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d3ed      	bcc.n	80118ca <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 80118ee:	8abb      	ldrh	r3, [r7, #20]
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	18d4      	adds	r4, r2, r3
 80118f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118f8:	f7ef f8fe 	bl	8000af8 <__aeabi_d2uiz>
 80118fc:	4601      	mov	r1, r0
 80118fe:	897b      	ldrh	r3, [r7, #10]
 8011900:	461a      	mov	r2, r3
 8011902:	4620      	mov	r0, r4
 8011904:	f7ff fe80 	bl	8011608 <pif_DecToString>
 8011908:	4603      	mov	r3, r0
 801190a:	b29a      	uxth	r2, r3
 801190c:	8abb      	ldrh	r3, [r7, #20]
 801190e:	4413      	add	r3, r2
 8011910:	82bb      	strh	r3, [r7, #20]
    return idx;
 8011912:	8abb      	ldrh	r3, [r7, #20]
}
 8011914:	4618      	mov	r0, r3
 8011916:	3718      	adds	r7, #24
 8011918:	46bd      	mov	sp, r7
 801191a:	bdb0      	pop	{r4, r5, r7, pc}
 801191c:	40240000 	.word	0x40240000

08011920 <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b08c      	sub	sp, #48	; 0x30
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 801192c:	2300      	movs	r3, #0
 801192e:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 8011930:	e242      	b.n	8011db8 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b25      	cmp	r3, #37	; 0x25
 8011938:	f040 8230 	bne.w	8011d9c <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 801193c:	2300      	movs	r3, #0
 801193e:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 8011940:	2300      	movs	r3, #0
 8011942:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	3301      	adds	r3, #1
 801194a:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	3b25      	subs	r3, #37	; 0x25
 8011952:	2b53      	cmp	r3, #83	; 0x53
 8011954:	f200 822d 	bhi.w	8011db2 <pif_PrintFormat+0x492>
 8011958:	a201      	add	r2, pc, #4	; (adr r2, 8011960 <pif_PrintFormat+0x40>)
 801195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801195e:	bf00      	nop
 8011960:	08011d8b 	.word	0x08011d8b
 8011964:	08011db3 	.word	0x08011db3
 8011968:	08011db3 	.word	0x08011db3
 801196c:	08011db3 	.word	0x08011db3
 8011970:	08011db3 	.word	0x08011db3
 8011974:	08011db3 	.word	0x08011db3
 8011978:	08011db3 	.word	0x08011db3
 801197c:	08011db3 	.word	0x08011db3
 8011980:	08011db3 	.word	0x08011db3
 8011984:	08011db3 	.word	0x08011db3
 8011988:	08011db3 	.word	0x08011db3
 801198c:	08011ab1 	.word	0x08011ab1
 8011990:	08011ab1 	.word	0x08011ab1
 8011994:	08011ab1 	.word	0x08011ab1
 8011998:	08011ab1 	.word	0x08011ab1
 801199c:	08011ab1 	.word	0x08011ab1
 80119a0:	08011ab1 	.word	0x08011ab1
 80119a4:	08011ab1 	.word	0x08011ab1
 80119a8:	08011ab1 	.word	0x08011ab1
 80119ac:	08011ab1 	.word	0x08011ab1
 80119b0:	08011ab1 	.word	0x08011ab1
 80119b4:	08011db3 	.word	0x08011db3
 80119b8:	08011db3 	.word	0x08011db3
 80119bc:	08011db3 	.word	0x08011db3
 80119c0:	08011db3 	.word	0x08011db3
 80119c4:	08011db3 	.word	0x08011db3
 80119c8:	08011db3 	.word	0x08011db3
 80119cc:	08011db3 	.word	0x08011db3
 80119d0:	08011db3 	.word	0x08011db3
 80119d4:	08011db3 	.word	0x08011db3
 80119d8:	08011db3 	.word	0x08011db3
 80119dc:	08011db3 	.word	0x08011db3
 80119e0:	08011db3 	.word	0x08011db3
 80119e4:	08011db3 	.word	0x08011db3
 80119e8:	08011db3 	.word	0x08011db3
 80119ec:	08011db3 	.word	0x08011db3
 80119f0:	08011db3 	.word	0x08011db3
 80119f4:	08011db3 	.word	0x08011db3
 80119f8:	08011db3 	.word	0x08011db3
 80119fc:	08011db3 	.word	0x08011db3
 8011a00:	08011db3 	.word	0x08011db3
 8011a04:	08011db3 	.word	0x08011db3
 8011a08:	08011db3 	.word	0x08011db3
 8011a0c:	08011db3 	.word	0x08011db3
 8011a10:	08011db3 	.word	0x08011db3
 8011a14:	08011db3 	.word	0x08011db3
 8011a18:	08011db3 	.word	0x08011db3
 8011a1c:	08011db3 	.word	0x08011db3
 8011a20:	08011db3 	.word	0x08011db3
 8011a24:	08011db3 	.word	0x08011db3
 8011a28:	08011db3 	.word	0x08011db3
 8011a2c:	08011c87 	.word	0x08011c87
 8011a30:	08011db3 	.word	0x08011db3
 8011a34:	08011db3 	.word	0x08011db3
 8011a38:	08011db3 	.word	0x08011db3
 8011a3c:	08011db3 	.word	0x08011db3
 8011a40:	08011db3 	.word	0x08011db3
 8011a44:	08011db3 	.word	0x08011db3
 8011a48:	08011db3 	.word	0x08011db3
 8011a4c:	08011db3 	.word	0x08011db3
 8011a50:	08011db3 	.word	0x08011db3
 8011a54:	08011ad7 	.word	0x08011ad7
 8011a58:	08011d6d 	.word	0x08011d6d
 8011a5c:	08011b2f 	.word	0x08011b2f
 8011a60:	08011db3 	.word	0x08011db3
 8011a64:	08011cdf 	.word	0x08011cdf
 8011a68:	08011db3 	.word	0x08011db3
 8011a6c:	08011db3 	.word	0x08011db3
 8011a70:	08011b2f 	.word	0x08011b2f
 8011a74:	08011db3 	.word	0x08011db3
 8011a78:	08011db3 	.word	0x08011db3
 8011a7c:	08011acf 	.word	0x08011acf
 8011a80:	08011db3 	.word	0x08011db3
 8011a84:	08011db3 	.word	0x08011db3
 8011a88:	08011db3 	.word	0x08011db3
 8011a8c:	08011db3 	.word	0x08011db3
 8011a90:	08011db3 	.word	0x08011db3
 8011a94:	08011db3 	.word	0x08011db3
 8011a98:	08011d15 	.word	0x08011d15
 8011a9c:	08011db3 	.word	0x08011db3
 8011aa0:	08011bd7 	.word	0x08011bd7
 8011aa4:	08011db3 	.word	0x08011db3
 8011aa8:	08011db3 	.word	0x08011db3
 8011aac:	08011c2f 	.word	0x08011c2f
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 8011ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	0092      	lsls	r2, r2, #2
 8011ab6:	4413      	add	r3, r2
 8011ab8:	005b      	lsls	r3, r3, #1
 8011aba:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ac4:	4413      	add	r3, r2
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	3b30      	subs	r3, #48	; 0x30
 8011aca:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011acc:	e73b      	b.n	8011946 <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011ad4:	e737      	b.n	8011946 <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011ad6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d013      	beq.n	8011b06 <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	1d19      	adds	r1, r3, #4
 8011ae4:	68ba      	ldr	r2, [r7, #8]
 8011ae6:	6011      	str	r1, [r2, #0]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011aec:	6a3b      	ldr	r3, [r7, #32]
 8011aee:	68fa      	ldr	r2, [r7, #12]
 8011af0:	4413      	add	r3, r2
 8011af2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011af4:	6979      	ldr	r1, [r7, #20]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7ff fd26 	bl	8011548 <pif_BinToString>
 8011afc:	4602      	mov	r2, r0
 8011afe:	6a3b      	ldr	r3, [r7, #32]
 8011b00:	4413      	add	r3, r2
 8011b02:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011b04:	e155      	b.n	8011db2 <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	1d19      	adds	r1, r3, #4
 8011b0c:	68ba      	ldr	r2, [r7, #8]
 8011b0e:	6011      	str	r1, [r2, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 8011b14:	6a3b      	ldr	r3, [r7, #32]
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	4413      	add	r3, r2
 8011b1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b1c:	69b9      	ldr	r1, [r7, #24]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7ff fd12 	bl	8011548 <pif_BinToString>
 8011b24:	4602      	mov	r2, r0
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	4413      	add	r3, r2
 8011b2a:	623b      	str	r3, [r7, #32]
                    break;
 8011b2c:	e141      	b.n	8011db2 <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 8011b2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d027      	beq.n	8011b86 <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	1d19      	adds	r1, r3, #4
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	6011      	str	r1, [r2, #0]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	da10      	bge.n	8011b6c <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011b4a:	6a3b      	ldr	r3, [r7, #32]
 8011b4c:	1c5a      	adds	r2, r3, #1
 8011b4e:	623a      	str	r2, [r7, #32]
 8011b50:	461a      	mov	r2, r3
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	4413      	add	r3, r2
 8011b56:	222d      	movs	r2, #45	; 0x2d
 8011b58:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5c:	425b      	negs	r3, r3
 8011b5e:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 8011b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d002      	beq.n	8011b6c <pif_PrintFormat+0x24c>
 8011b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011b6c:	6a3b      	ldr	r3, [r7, #32]
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	4413      	add	r3, r2
 8011b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7ff fd46 	bl	8011608 <pif_DecToString>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	6a3b      	ldr	r3, [r7, #32]
 8011b80:	4413      	add	r3, r2
 8011b82:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011b84:	e115      	b.n	8011db2 <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	1d19      	adds	r1, r3, #4
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	6011      	str	r1, [r2, #0]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	da10      	bge.n	8011bbc <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	1c5a      	adds	r2, r3, #1
 8011b9e:	623a      	str	r2, [r7, #32]
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	222d      	movs	r2, #45	; 0x2d
 8011ba8:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bac:	425b      	negs	r3, r3
 8011bae:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 8011bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d002      	beq.n	8011bbc <pif_PrintFormat+0x29c>
 8011bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	68fa      	ldr	r2, [r7, #12]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff fd1e 	bl	8011608 <pif_DecToString>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	6a3b      	ldr	r3, [r7, #32]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	623b      	str	r3, [r7, #32]
                    break;
 8011bd4:	e0ed      	b.n	8011db2 <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011bd6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d013      	beq.n	8011c06 <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	1d19      	adds	r1, r3, #4
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	6011      	str	r1, [r2, #0]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011bec:	6a3b      	ldr	r3, [r7, #32]
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bf4:	6979      	ldr	r1, [r7, #20]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7ff fd06 	bl	8011608 <pif_DecToString>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	4413      	add	r3, r2
 8011c02:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011c04:	e0d5      	b.n	8011db2 <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	1d19      	adds	r1, r3, #4
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	6011      	str	r1, [r2, #0]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 8011c14:	6a3b      	ldr	r3, [r7, #32]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	4413      	add	r3, r2
 8011c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c1c:	69b9      	ldr	r1, [r7, #24]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7ff fcf2 	bl	8011608 <pif_DecToString>
 8011c24:	4602      	mov	r2, r0
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	4413      	add	r3, r2
 8011c2a:	623b      	str	r3, [r7, #32]
                    break;
 8011c2c:	e0c1      	b.n	8011db2 <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011c2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d013      	beq.n	8011c5e <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	1d19      	adds	r1, r3, #4
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	6011      	str	r1, [r2, #0]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	18d0      	adds	r0, r2, r3
 8011c4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	6979      	ldr	r1, [r7, #20]
 8011c50:	f7ff fd74 	bl	801173c <pif_HexToString>
 8011c54:	4602      	mov	r2, r0
 8011c56:	6a3b      	ldr	r3, [r7, #32]
 8011c58:	4413      	add	r3, r2
 8011c5a:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8011c5c:	e0a9      	b.n	8011db2 <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	1d19      	adds	r1, r3, #4
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	6011      	str	r1, [r2, #0]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8011c6c:	6a3b      	ldr	r3, [r7, #32]
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	18d0      	adds	r0, r2, r3
 8011c72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011c74:	2300      	movs	r3, #0
 8011c76:	69b9      	ldr	r1, [r7, #24]
 8011c78:	f7ff fd60 	bl	801173c <pif_HexToString>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	4413      	add	r3, r2
 8011c82:	623b      	str	r3, [r7, #32]
                    break;
 8011c84:	e095      	b.n	8011db2 <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011c86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d013      	beq.n	8011cb6 <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	1d19      	adds	r1, r3, #4
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	6011      	str	r1, [r2, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	68fa      	ldr	r2, [r7, #12]
 8011ca0:	18d0      	adds	r0, r2, r3
 8011ca2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	6979      	ldr	r1, [r7, #20]
 8011ca8:	f7ff fd48 	bl	801173c <pif_HexToString>
 8011cac:	4602      	mov	r2, r0
 8011cae:	6a3b      	ldr	r3, [r7, #32]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011cb4:	e07d      	b.n	8011db2 <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	1d19      	adds	r1, r3, #4
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	6011      	str	r1, [r2, #0]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	18d0      	adds	r0, r2, r3
 8011cca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ccc:	2301      	movs	r3, #1
 8011cce:	69b9      	ldr	r1, [r7, #24]
 8011cd0:	f7ff fd34 	bl	801173c <pif_HexToString>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
 8011cd8:	4413      	add	r3, r2
 8011cda:	623b      	str	r3, [r7, #32]
                    break;
 8011cdc:	e069      	b.n	8011db2 <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	18d0      	adds	r0, r2, r3
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	3307      	adds	r3, #7
 8011cea:	f023 0307 	bic.w	r3, r3, #7
 8011cee:	f103 0108 	add.w	r1, r3, #8
 8011cf2:	68ba      	ldr	r2, [r7, #8]
 8011cf4:	6011      	str	r1, [r2, #0]
 8011cf6:	ed93 7b00 	vldr	d7, [r3]
 8011cfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	eeb0 0a47 	vmov.f32	s0, s14
 8011d02:	eef0 0a67 	vmov.f32	s1, s15
 8011d06:	f7ff fd8d 	bl	8011824 <pif_FloatToString>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	6a3b      	ldr	r3, [r7, #32]
 8011d0e:	4413      	add	r3, r2
 8011d10:	623b      	str	r3, [r7, #32]
                    break;
 8011d12:	e04e      	b.n	8011db2 <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	1d19      	adds	r1, r3, #4
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	6011      	str	r1, [r2, #0]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d043      	beq.n	8011db0 <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 8011d28:	6938      	ldr	r0, [r7, #16]
 8011d2a:	f7ee fa5f 	bl	80001ec <strlen>
 8011d2e:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8011d30:	6a3a      	ldr	r2, [r7, #32]
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	4413      	add	r3, r2
 8011d36:	2b4e      	cmp	r3, #78	; 0x4e
 8011d38:	d807      	bhi.n	8011d4a <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 8011d3a:	6a3b      	ldr	r3, [r7, #32]
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	4413      	add	r3, r2
 8011d40:	6939      	ldr	r1, [r7, #16]
 8011d42:	4618      	mov	r0, r3
 8011d44:	f010 fa1e 	bl	8022184 <strcpy>
 8011d48:	e00b      	b.n	8011d62 <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8011d4a:	6a3b      	ldr	r3, [r7, #32]
 8011d4c:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8011d50:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	4413      	add	r3, r2
 8011d58:	69fa      	ldr	r2, [r7, #28]
 8011d5a:	6939      	ldr	r1, [r7, #16]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f010 fa3b 	bl	80221d8 <strncpy>
						}
						offset += size;
 8011d62:	6a3a      	ldr	r2, [r7, #32]
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	4413      	add	r3, r2
 8011d68:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8011d6a:	e021      	b.n	8011db0 <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	1d19      	adds	r1, r3, #4
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	6011      	str	r1, [r2, #0]
 8011d76:	6819      	ldr	r1, [r3, #0]
 8011d78:	6a3b      	ldr	r3, [r7, #32]
 8011d7a:	1c5a      	adds	r2, r3, #1
 8011d7c:	623a      	str	r2, [r7, #32]
 8011d7e:	461a      	mov	r2, r3
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	4413      	add	r3, r2
 8011d84:	b2ca      	uxtb	r2, r1
 8011d86:	701a      	strb	r2, [r3, #0]
                    break;
 8011d88:	e013      	b.n	8011db2 <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011d8a:	6a3b      	ldr	r3, [r7, #32]
 8011d8c:	1c5a      	adds	r2, r3, #1
 8011d8e:	623a      	str	r2, [r7, #32]
 8011d90:	461a      	mov	r2, r3
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	4413      	add	r3, r2
 8011d96:	2225      	movs	r2, #37	; 0x25
 8011d98:	701a      	strb	r2, [r3, #0]
                    break;
 8011d9a:	e00a      	b.n	8011db2 <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011d9c:	6a3b      	ldr	r3, [r7, #32]
 8011d9e:	1c5a      	adds	r2, r3, #1
 8011da0:	623a      	str	r2, [r7, #32]
 8011da2:	461a      	mov	r2, r3
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	4413      	add	r3, r2
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	7812      	ldrb	r2, [r2, #0]
 8011dac:	701a      	strb	r2, [r3, #0]
 8011dae:	e000      	b.n	8011db2 <pif_PrintFormat+0x492>
                    break;
 8011db0:	bf00      	nop
        }
        p_format = p_format + 1;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	3301      	adds	r3, #1
 8011db6:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	f47f adb8 	bne.w	8011932 <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	2200      	movs	r2, #0
 8011dca:	701a      	strb	r2, [r3, #0]
}
 8011dcc:	bf00      	nop
 8011dce:	3730      	adds	r7, #48	; 0x30
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011dd4:	b40e      	push	{r1, r2, r3}
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b085      	sub	sp, #20
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011dde:	f107 0320 	add.w	r3, r7, #32
 8011de2:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011de4:	f107 030c 	add.w	r3, r7, #12
 8011de8:	69fa      	ldr	r2, [r7, #28]
 8011dea:	4619      	mov	r1, r3
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7ff fd97 	bl	8011920 <pif_PrintFormat>
	va_end(data);
}
 8011df2:	bf00      	nop
 8011df4:	3714      	adds	r7, #20
 8011df6:	46bd      	mov	sp, r7
 8011df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011dfc:	b003      	add	sp, #12
 8011dfe:	4770      	bx	lr

08011e00 <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b085      	sub	sp, #20
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	4603      	mov	r3, r0
 8011e08:	460a      	mov	r2, r1
 8011e0a:	80fb      	strh	r3, [r7, #6]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011e10:	797b      	ldrb	r3, [r7, #5]
 8011e12:	021b      	lsls	r3, r3, #8
 8011e14:	b21a      	sxth	r2, r3
 8011e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e1a:	4053      	eors	r3, r2
 8011e1c:	b21b      	sxth	r3, r3
 8011e1e:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011e20:	2300      	movs	r3, #0
 8011e22:	81fb      	strh	r3, [r7, #14]
 8011e24:	e013      	b.n	8011e4e <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	da09      	bge.n	8011e42 <pifCrc16_Add+0x42>
 8011e2e:	88fb      	ldrh	r3, [r7, #6]
 8011e30:	005b      	lsls	r3, r3, #1
 8011e32:	b21b      	sxth	r3, r3
 8011e34:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011e38:	f083 0301 	eor.w	r3, r3, #1
 8011e3c:	b21b      	sxth	r3, r3
 8011e3e:	80fb      	strh	r3, [r7, #6]
 8011e40:	e002      	b.n	8011e48 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011e42:	88fb      	ldrh	r3, [r7, #6]
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011e48:	89fb      	ldrh	r3, [r7, #14]
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	81fb      	strh	r3, [r7, #14]
 8011e4e:	89fb      	ldrh	r3, [r7, #14]
 8011e50:	2b07      	cmp	r3, #7
 8011e52:	d9e8      	bls.n	8011e26 <pifCrc16_Add+0x26>
    }
	return crc;
 8011e54:	88fb      	ldrh	r3, [r7, #6]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3714      	adds	r7, #20
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b084      	sub	sp, #16
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011e72:	2300      	movs	r3, #0
 8011e74:	81fb      	strh	r3, [r7, #14]
 8011e76:	e00d      	b.n	8011e94 <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011e78:	89fb      	ldrh	r3, [r7, #14]
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	781a      	ldrb	r2, [r3, #0]
 8011e80:	89bb      	ldrh	r3, [r7, #12]
 8011e82:	4611      	mov	r1, r2
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7ff ffbb 	bl	8011e00 <pifCrc16_Add>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011e8e:	89fb      	ldrh	r3, [r7, #14]
 8011e90:	3301      	adds	r3, #1
 8011e92:	81fb      	strh	r3, [r7, #14]
 8011e94:	89fa      	ldrh	r2, [r7, #14]
 8011e96:	887b      	ldrh	r3, [r7, #2]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d3ed      	bcc.n	8011e78 <pifCrc16+0x16>
	}
	return crc;
 8011e9c:	89bb      	ldrh	r3, [r7, #12]
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}

08011ea6 <pifCheckXor>:
	}
	return sum;
}

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011ea6:	b480      	push	{r7}
 8011ea8:	b085      	sub	sp, #20
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
 8011eae:	460b      	mov	r3, r1
 8011eb0:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	81fb      	strh	r3, [r7, #14]
 8011eba:	e009      	b.n	8011ed0 <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011ebc:	89fb      	ldrh	r3, [r7, #14]
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	781a      	ldrb	r2, [r3, #0]
 8011ec4:	7b7b      	ldrb	r3, [r7, #13]
 8011ec6:	4053      	eors	r3, r2
 8011ec8:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011eca:	89fb      	ldrh	r3, [r7, #14]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	81fb      	strh	r3, [r7, #14]
 8011ed0:	89fa      	ldrh	r2, [r7, #14]
 8011ed2:	887b      	ldrh	r3, [r7, #2]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d3f1      	bcc.n	8011ebc <pifCheckXor+0x16>
	}
	return xor;
 8011ed8:	7b7b      	ldrb	r3, [r7, #13]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b082      	sub	sp, #8
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	6839      	ldr	r1, [r7, #0]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f002 f88e 	bl	8014018 <pifRingBuffer_GetByte>
 8011efc:	4603      	mov	r3, r0
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3708      	adds	r7, #8
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011f06:	b580      	push	{r7, lr}
 8011f08:	b086      	sub	sp, #24
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	60f8      	str	r0, [r7, #12]
 8011f0e:	60b9      	str	r1, [r7, #8]
 8011f10:	4613      	mov	r3, r2
 8011f12:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	695b      	ldr	r3, [r3, #20]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f001 ff70 	bl	8013dfe <pifRingBuffer_GetRemainSize>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011f22:	8afb      	ldrh	r3, [r7, #22]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d101      	bne.n	8011f2c <_actSendData+0x26>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	e012      	b.n	8011f52 <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011f2c:	88fa      	ldrh	r2, [r7, #6]
 8011f2e:	8afb      	ldrh	r3, [r7, #22]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d901      	bls.n	8011f38 <_actSendData+0x32>
 8011f34:	8afb      	ldrh	r3, [r7, #22]
 8011f36:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	695b      	ldr	r3, [r3, #20]
 8011f3c:	88fa      	ldrh	r2, [r7, #6]
 8011f3e:	68b9      	ldr	r1, [r7, #8]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f001 ffd1 	bl	8013ee8 <pifRingBuffer_PutData>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <_actSendData+0x4a>
		return size;
 8011f4c:	88fb      	ldrh	r3, [r7, #6]
 8011f4e:	e000      	b.n	8011f52 <_actSendData+0x4c>
	}
	return 0;
 8011f50:	2300      	movs	r3, #0
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3718      	adds	r7, #24
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
	...

08011f5c <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d008      	beq.n	8011f7e <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	6a10      	ldr	r0, [r2, #32]
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	6892      	ldr	r2, [r2, #8]
 8011f78:	4611      	mov	r1, r2
 8011f7a:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011f7c:	e025      	b.n	8011fca <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	695b      	ldr	r3, [r3, #20]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d021      	beq.n	8011fca <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	6a12      	ldr	r2, [r2, #32]
 8011f8e:	4911      	ldr	r1, [pc, #68]	; (8011fd4 <_sendData+0x78>)
 8011f90:	4610      	mov	r0, r2
 8011f92:	4798      	blx	r3
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d017      	beq.n	8011fca <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d112      	bne.n	8011fca <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d00a      	beq.n	8011fca <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	4798      	blx	r3
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d103      	bne.n	8011fca <_sendData+0x6e>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011fca:	bf00      	nop
 8011fcc:	3708      	adds	r7, #8
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	08011f07 	.word	0x08011f07

08011fd8 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d104      	bne.n	8011ff4 <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011fea:	4b0e      	ldr	r3, [pc, #56]	; (8012024 <pifComm_Init+0x4c>)
 8011fec:	2201      	movs	r2, #1
 8011fee:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	e012      	b.n	801201a <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011ff4:	2230      	movs	r2, #48	; 0x30
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f00f ff7f 	bl	8021efc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011ffe:	887b      	ldrh	r3, [r7, #2]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d106      	bne.n	8012012 <pifComm_Init+0x3a>
 8012004:	4b08      	ldr	r3, [pc, #32]	; (8012028 <pifComm_Init+0x50>)
 8012006:	881b      	ldrh	r3, [r3, #0]
 8012008:	1c5a      	adds	r2, r3, #1
 801200a:	b291      	uxth	r1, r2
 801200c:	4a06      	ldr	r2, [pc, #24]	; (8012028 <pifComm_Init+0x50>)
 801200e:	8011      	strh	r1, [r2, #0]
 8012010:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	887a      	ldrh	r2, [r7, #2]
 8012016:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8012018:	2301      	movs	r3, #1
}
 801201a:	4618      	mov	r0, r3
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
 8012022:	bf00      	nop
 8012024:	200020c9 	.word	0x200020c9
 8012028:	2000005c 	.word	0x2000005c

0801202c <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	69db      	ldr	r3, [r3, #28]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d007      	beq.n	801204c <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	69db      	ldr	r3, [r3, #28]
 8012040:	4618      	mov	r0, r3
 8012042:	f002 fcb1 	bl	80149a8 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	699b      	ldr	r3, [r3, #24]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d004      	beq.n	801205e <pifComm_Clear+0x32>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	3318      	adds	r3, #24
 8012058:	4618      	mov	r0, r3
 801205a:	f001 fdbd 	bl	8013bd8 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	695b      	ldr	r3, [r3, #20]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d004      	beq.n	8012070 <pifComm_Clear+0x44>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	3314      	adds	r3, #20
 801206a:	4618      	mov	r0, r3
 801206c:	f001 fdb4 	bl	8013bd8 <pifRingBuffer_Destroy>
}
 8012070:	bf00      	nop
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	460b      	mov	r3, r1
 8012082:	807b      	strh	r3, [r7, #2]
 8012084:	4613      	mov	r3, r2
 8012086:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8012088:	887b      	ldrh	r3, [r7, #2]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d104      	bne.n	8012098 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 801208e:	4b1a      	ldr	r3, [pc, #104]	; (80120f8 <pifComm_AllocRxBuffer+0x80>)
 8012090:	2201      	movs	r2, #1
 8012092:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8012094:	2300      	movs	r3, #0
 8012096:	e02a      	b.n	80120ee <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8012098:	887b      	ldrh	r3, [r7, #2]
 801209a:	4619      	mov	r1, r3
 801209c:	2000      	movs	r0, #0
 801209e:	f001 fd6f 	bl	8013b80 <pifRingBuffer_CreateHeap>
 80120a2:	4602      	mov	r2, r0
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	699b      	ldr	r3, [r3, #24]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d101      	bne.n	80120b4 <pifComm_AllocRxBuffer+0x3c>
 80120b0:	2300      	movs	r3, #0
 80120b2:	e01c      	b.n	80120ee <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 80120b4:	787b      	ldrb	r3, [r7, #1]
 80120b6:	2b64      	cmp	r3, #100	; 0x64
 80120b8:	d901      	bls.n	80120be <pifComm_AllocRxBuffer+0x46>
 80120ba:	2364      	movs	r3, #100	; 0x64
 80120bc:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 80120be:	887b      	ldrh	r3, [r7, #2]
 80120c0:	2264      	movs	r2, #100	; 0x64
 80120c2:	fb03 f202 	mul.w	r2, r3, r2
 80120c6:	787b      	ldrb	r3, [r7, #1]
 80120c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d102      	bne.n	80120e0 <pifComm_AllocRxBuffer+0x68>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2201      	movs	r2, #1
 80120de:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	4905      	ldr	r1, [pc, #20]	; (80120fc <pifComm_AllocRxBuffer+0x84>)
 80120e6:	4618      	mov	r0, r3
 80120e8:	f001 fdf1 	bl	8013cce <pifRingBuffer_SetName>
    return TRUE;
 80120ec:	2301      	movs	r3, #1
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	200020c9 	.word	0x200020c9
 80120fc:	0802664c 	.word	0x0802664c

08012100 <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	460b      	mov	r3, r1
 801210a:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 801210c:	887b      	ldrh	r3, [r7, #2]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d104      	bne.n	801211c <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 8012112:	4b0f      	ldr	r3, [pc, #60]	; (8012150 <pifComm_AllocTxBuffer+0x50>)
 8012114:	2201      	movs	r2, #1
 8012116:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012118:	2300      	movs	r3, #0
 801211a:	e014      	b.n	8012146 <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 801211c:	887b      	ldrh	r3, [r7, #2]
 801211e:	4619      	mov	r1, r3
 8012120:	2000      	movs	r0, #0
 8012122:	f001 fd2d 	bl	8013b80 <pifRingBuffer_CreateHeap>
 8012126:	4602      	mov	r2, r0
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	695b      	ldr	r3, [r3, #20]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <pifComm_AllocTxBuffer+0x38>
 8012134:	2300      	movs	r3, #0
 8012136:	e006      	b.n	8012146 <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	695b      	ldr	r3, [r3, #20]
 801213c:	4905      	ldr	r1, [pc, #20]	; (8012154 <pifComm_AllocTxBuffer+0x54>)
 801213e:	4618      	mov	r0, r3
 8012140:	f001 fdc5 	bl	8013cce <pifRingBuffer_SetName>
	return TRUE;
 8012144:	2301      	movs	r3, #1
}
 8012146:	4618      	mov	r0, r3
 8012148:	3708      	adds	r7, #8
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	200020c9 	.word	0x200020c9
 8012154:	08026650 	.word	0x08026650

08012158 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8012158:	b480      	push	{r7}
 801215a:	b085      	sub	sp, #20
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
 8012164:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	687a      	ldr	r2, [r7, #4]
 8012170:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	683a      	ldr	r2, [r7, #0]
 8012176:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012178:	bf00      	nop
 801217a:	3714      	adds	r7, #20
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801219e:	bf00      	nop
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b082      	sub	sp, #8
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
 80121b2:	460b      	mov	r3, r1
 80121b4:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	699b      	ldr	r3, [r3, #24]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d101      	bne.n	80121c2 <pifComm_PutRxByte+0x18>
 80121be:	2300      	movs	r3, #0
 80121c0:	e01b      	b.n	80121fa <pifComm_PutRxByte+0x50>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	699b      	ldr	r3, [r3, #24]
 80121c6:	78fa      	ldrb	r2, [r7, #3]
 80121c8:	4611      	mov	r1, r2
 80121ca:	4618      	mov	r0, r3
 80121cc:	f001 fe58 	bl	8013e80 <pifRingBuffer_PutByte>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d101      	bne.n	80121da <pifComm_PutRxByte+0x30>
 80121d6:	2300      	movs	r3, #0
 80121d8:	e00f      	b.n	80121fa <pifComm_PutRxByte+0x50>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) p_owner->_p_task->immediate = TRUE;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	699b      	ldr	r3, [r3, #24]
 80121de:	4618      	mov	r0, r3
 80121e0:	f001 fdc2 	bl	8013d68 <pifRingBuffer_GetFillSize>
 80121e4:	4603      	mov	r3, r0
 80121e6:	461a      	mov	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d303      	bcc.n	80121f8 <pifComm_PutRxByte+0x4e>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	69db      	ldr	r3, [r3, #28]
 80121f4:	2201      	movs	r2, #1
 80121f6:	705a      	strb	r2, [r3, #1]
	return TRUE;
 80121f8:	2301      	movs	r3, #1
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b086      	sub	sp, #24
 8012206:	af00      	add	r7, sp, #0
 8012208:	60f8      	str	r0, [r7, #12]
 801220a:	60b9      	str	r1, [r7, #8]
 801220c:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	695b      	ldr	r3, [r3, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d101      	bne.n	801221a <pifComm_StartGetTxData+0x18>
 8012216:	2300      	movs	r3, #0
 8012218:	e027      	b.n	801226a <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	695b      	ldr	r3, [r3, #20]
 801221e:	4618      	mov	r0, r3
 8012220:	f001 fd8f 	bl	8013d42 <pifRingBuffer_IsEmpty>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <pifComm_StartGetTxData+0x2c>
 801222a:	2302      	movs	r3, #2
 801222c:	e01d      	b.n	801226a <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	695b      	ldr	r3, [r3, #20]
 8012232:	2100      	movs	r1, #0
 8012234:	4618      	mov	r0, r3
 8012236:	f001 fd58 	bl	8013cea <pifRingBuffer_GetTailPointer>
 801223a:	4602      	mov	r2, r0
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	695b      	ldr	r3, [r3, #20]
 8012244:	2100      	movs	r1, #0
 8012246:	4618      	mov	r0, r3
 8012248:	f001 fdb0 	bl	8013dac <pifRingBuffer_GetLinerSize>
 801224c:	4603      	mov	r3, r0
 801224e:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	881b      	ldrh	r3, [r3, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d004      	beq.n	8012262 <pifComm_StartGetTxData+0x60>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	881b      	ldrh	r3, [r3, #0]
 801225c:	8afa      	ldrh	r2, [r7, #22]
 801225e:	429a      	cmp	r2, r3
 8012260:	d802      	bhi.n	8012268 <pifComm_StartGetTxData+0x66>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	8afa      	ldrh	r2, [r7, #22]
 8012266:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8012268:	2301      	movs	r3, #1
}
 801226a:	4618      	mov	r0, r3
 801226c:	3718      	adds	r7, #24
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b082      	sub	sp, #8
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	460b      	mov	r3, r1
 801227c:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	695b      	ldr	r3, [r3, #20]
 8012282:	887a      	ldrh	r2, [r7, #2]
 8012284:	4611      	mov	r1, r2
 8012286:	4618      	mov	r0, r3
 8012288:	f001 ff37 	bl	80140fa <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	695b      	ldr	r3, [r3, #20]
 8012290:	4618      	mov	r0, r3
 8012292:	f001 fd56 	bl	8013d42 <pifRingBuffer_IsEmpty>
 8012296:	4603      	mov	r3, r0
 8012298:	005b      	lsls	r3, r3, #1
 801229a:	b2db      	uxtb	r3, r3
}
 801229c:	4618      	mov	r0, r3
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2200      	movs	r2, #0
 80122b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	p_owner->_p_task->immediate = TRUE;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	2201      	movs	r2, #1
 80122ba:	705a      	strb	r2, [r3, #1]
}
 80122bc:	bf00      	nop
 80122be:	370c      	adds	r7, #12
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr

080122c8 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d017      	beq.n	801230e <_doTask+0x46>
		if (p_owner->act_receive_data) {
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d008      	beq.n	80122f8 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	6a10      	ldr	r0, [r2, #32]
 80122ee:	68fa      	ldr	r2, [r7, #12]
 80122f0:	6852      	ldr	r2, [r2, #4]
 80122f2:	4611      	mov	r1, r2
 80122f4:	4798      	blx	r3
 80122f6:	e00a      	b.n	801230e <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	699b      	ldr	r3, [r3, #24]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d006      	beq.n	801230e <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012304:	68fa      	ldr	r2, [r7, #12]
 8012306:	6a12      	ldr	r2, [r2, #32]
 8012308:	4907      	ldr	r1, [pc, #28]	; (8012328 <_doTask+0x60>)
 801230a:	4610      	mov	r0, r2
 801230c:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012312:	2b00      	cmp	r3, #0
 8012314:	d002      	beq.n	801231c <_doTask+0x54>
 8012316:	68f8      	ldr	r0, [r7, #12]
 8012318:	f7ff fe20 	bl	8011f5c <_sendData>
	return 0;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	08011ee7 	.word	0x08011ee7

0801232c <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af02      	add	r7, sp, #8
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	4608      	mov	r0, r1
 8012336:	4611      	mov	r1, r2
 8012338:	461a      	mov	r2, r3
 801233a:	4603      	mov	r3, r0
 801233c:	70fb      	strb	r3, [r7, #3]
 801233e:	460b      	mov	r3, r1
 8012340:	803b      	strh	r3, [r7, #0]
 8012342:	4613      	mov	r3, r2
 8012344:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 8012346:	8839      	ldrh	r1, [r7, #0]
 8012348:	78f8      	ldrb	r0, [r7, #3]
 801234a:	78bb      	ldrb	r3, [r7, #2]
 801234c:	9300      	str	r3, [sp, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4a05      	ldr	r2, [pc, #20]	; (8012368 <pifComm_AttachTask+0x3c>)
 8012352:	f002 fac5 	bl	80148e0 <pifTaskManager_Add>
 8012356:	4602      	mov	r2, r0
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	61da      	str	r2, [r3, #28]
	return p_owner->_p_task;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	69db      	ldr	r3, [r3, #28]
}
 8012360:	4618      	mov	r0, r3
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	080122c9 	.word	0x080122c9

0801236c <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	4608      	mov	r0, r1
 8012376:	4611      	mov	r1, r2
 8012378:	461a      	mov	r2, r3
 801237a:	4603      	mov	r3, r0
 801237c:	817b      	strh	r3, [r7, #10]
 801237e:	460b      	mov	r3, r1
 8012380:	727b      	strb	r3, [r7, #9]
 8012382:	4613      	mov	r3, r2
 8012384:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d005      	beq.n	8012398 <pifI2cPort_Init+0x2c>
 801238c:	7a7b      	ldrb	r3, [r7, #9]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d002      	beq.n	8012398 <pifI2cPort_Init+0x2c>
 8012392:	88fb      	ldrh	r3, [r7, #6]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d104      	bne.n	80123a2 <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 8012398:	4b17      	ldr	r3, [pc, #92]	; (80123f8 <pifI2cPort_Init+0x8c>)
 801239a:	2201      	movs	r2, #1
 801239c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801239e:	2300      	movs	r3, #0
 80123a0:	e025      	b.n	80123ee <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80123a2:	2230      	movs	r2, #48	; 0x30
 80123a4:	2100      	movs	r1, #0
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f00f fda8 	bl	8021efc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80123ac:	897b      	ldrh	r3, [r7, #10]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d106      	bne.n	80123c0 <pifI2cPort_Init+0x54>
 80123b2:	4b12      	ldr	r3, [pc, #72]	; (80123fc <pifI2cPort_Init+0x90>)
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	1c5a      	adds	r2, r3, #1
 80123b8:	b291      	uxth	r1, r2
 80123ba:	4a10      	ldr	r2, [pc, #64]	; (80123fc <pifI2cPort_Init+0x90>)
 80123bc:	8011      	strh	r1, [r2, #0]
 80123be:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	897a      	ldrh	r2, [r7, #10]
 80123c4:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	88fa      	ldrh	r2, [r7, #6]
 80123ca:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	3310      	adds	r3, #16
 80123d0:	7a7a      	ldrb	r2, [r7, #9]
 80123d2:	2108      	movs	r1, #8
 80123d4:	4618      	mov	r0, r3
 80123d6:	f000 fac5 	bl	8012964 <pifFixList_Init>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <pifI2cPort_Init+0x78>
    return TRUE;
 80123e0:	2301      	movs	r3, #1
 80123e2:	e004      	b.n	80123ee <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 80123e4:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	f000 f80a 	bl	8012400 <pifI2cPort_Clear>
	return FALSE;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	200020c9 	.word	0x200020c9
 80123fc:	2000005c 	.word	0x2000005c

08012400 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	3310      	adds	r3, #16
 801240c:	2100      	movs	r1, #0
 801240e:	4618      	mov	r0, r3
 8012410:	f000 fb08 	bl	8012a24 <pifFixList_Clear>
}
 8012414:	bf00      	nop
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d104      	bne.n	8012434 <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 801242a:	4b0d      	ldr	r3, [pc, #52]	; (8012460 <pifI2cPort_AddDevice+0x44>)
 801242c:	2201      	movs	r2, #1
 801242e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012430:	2300      	movs	r3, #0
 8012432:	e011      	b.n	8012458 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	3310      	adds	r3, #16
 8012438:	4618      	mov	r0, r3
 801243a:	f000 fb26 	bl	8012a8a <pifFixList_AddFirst>
 801243e:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d101      	bne.n	801244a <pifI2cPort_AddDevice+0x2e>
 8012446:	2300      	movs	r3, #0
 8012448:	e006      	b.n	8012458 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	220a      	movs	r2, #10
 8012454:	705a      	strb	r2, [r3, #1]
    return p_device;
 8012456:	68fb      	ldr	r3, [r7, #12]
}
 8012458:	4618      	mov	r0, r3
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	200020c9 	.word	0x200020c9

08012464 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
	if (p_device) {
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d007      	beq.n	8012484 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	3310      	adds	r3, #16
 8012478:	6839      	ldr	r1, [r7, #0]
 801247a:	4618      	mov	r0, r3
 801247c:	f000 fb39 	bl	8012af2 <pifFixList_Remove>
		p_device = NULL;
 8012480:	2300      	movs	r3, #0
 8012482:	603b      	str	r3, [r7, #0]
	}
}
 8012484:	bf00      	nop
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 801248c:	b5b0      	push	{r4, r5, r7, lr}
 801248e:	b08c      	sub	sp, #48	; 0x30
 8012490:	af02      	add	r7, sp, #8
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	603b      	str	r3, [r7, #0]
 8012498:	4613      	mov	r3, r2
 801249a:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d101      	bne.n	80124ae <pifI2cDevice_Read+0x22>
 80124aa:	2300      	movs	r3, #0
 80124ac:	e08e      	b.n	80125cc <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d00f      	beq.n	80124d6 <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	4613      	mov	r3, r2
 80124c8:	2262      	movs	r2, #98	; 0x62
 80124ca:	4942      	ldr	r1, [pc, #264]	; (80125d4 <pifI2cDevice_Read+0x148>)
 80124cc:	2002      	movs	r0, #2
 80124ce:	f001 f883 	bl	80135d8 <pifLog_Printf>
#endif
		return FALSE;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e07a      	b.n	80125cc <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2201      	movs	r2, #1
 80124e0:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 80124e6:	e048      	b.n	801257a <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124ec:	461a      	mov	r2, r3
 80124ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f0:	4293      	cmp	r3, r2
 80124f2:	bf28      	it	cs
 80124f4:	4613      	movcs	r3, r2
 80124f6:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	685c      	ldr	r4, [r3, #4]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	7818      	ldrb	r0, [r3, #0]
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012504:	18d1      	adds	r1, r2, r3
 8012506:	683a      	ldr	r2, [r7, #0]
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	18d5      	adds	r5, r2, r3
 801250c:	7efb      	ldrb	r3, [r7, #27]
 801250e:	b29b      	uxth	r3, r3
 8012510:	79fa      	ldrb	r2, [r7, #7]
 8012512:	9300      	str	r3, [sp, #0]
 8012514:	462b      	mov	r3, r5
 8012516:	47a0      	blx	r4
 8012518:	4603      	mov	r3, r0
 801251a:	2b02      	cmp	r3, #2
 801251c:	d021      	beq.n	8012562 <pifI2cDevice_Read+0xd6>
 801251e:	2b02      	cmp	r3, #2
 8012520:	dc23      	bgt.n	801256a <pifI2cDevice_Read+0xde>
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <pifI2cDevice_Read+0x9e>
 8012526:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012528:	e01f      	b.n	801256a <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 801252a:	4b2b      	ldr	r3, [pc, #172]	; (80125d8 <pifI2cDevice_Read+0x14c>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012530:	e00a      	b.n	8012548 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012532:	4b29      	ldr	r3, [pc, #164]	; (80125d8 <pifI2cDevice_Read+0x14c>)
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	1ad3      	subs	r3, r2, r3
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	7852      	ldrb	r2, [r2, #1]
 801253e:	4293      	cmp	r3, r2
 8012540:	d902      	bls.n	8012548 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 8012542:	2372      	movs	r3, #114	; 0x72
 8012544:	623b      	str	r3, [r7, #32]
					goto fail;
 8012546:	e023      	b.n	8012590 <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	789b      	ldrb	r3, [r3, #2]
 801254c:	b2db      	uxtb	r3, r3
 801254e:	2b01      	cmp	r3, #1
 8012550:	d0ef      	beq.n	8012532 <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	789b      	ldrb	r3, [r3, #2]
 8012556:	b2db      	uxtb	r3, r3
 8012558:	2b03      	cmp	r3, #3
 801255a:	d105      	bne.n	8012568 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 801255c:	2379      	movs	r3, #121	; 0x79
 801255e:	623b      	str	r3, [r7, #32]
				goto fail;
 8012560:	e016      	b.n	8012590 <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 8012562:	2384      	movs	r3, #132	; 0x84
 8012564:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 8012566:	e013      	b.n	8012590 <pifI2cDevice_Read+0x104>
			break;
 8012568:	bf00      	nop
		}
		ptr += len;
 801256a:	7efb      	ldrb	r3, [r7, #27]
 801256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801256e:	4413      	add	r3, r2
 8012570:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 8012572:	7efb      	ldrb	r3, [r7, #27]
 8012574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 801257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257c:	2b00      	cmp	r3, #0
 801257e:	d1b3      	bne.n	80124e8 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	2200      	movs	r2, #0
 8012584:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2200      	movs	r2, #0
 801258a:	709a      	strb	r2, [r3, #2]
	return TRUE;
 801258c:	2301      	movs	r3, #1
 801258e:	e01d      	b.n	80125cc <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	461a      	mov	r2, r3
 8012596:	4b11      	ldr	r3, [pc, #68]	; (80125dc <pifI2cDevice_Read+0x150>)
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	9301      	str	r3, [sp, #4]
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	4613      	mov	r3, r2
 80125a2:	6a3a      	ldr	r2, [r7, #32]
 80125a4:	490e      	ldr	r1, [pc, #56]	; (80125e0 <pifI2cDevice_Read+0x154>)
 80125a6:	2004      	movs	r0, #4
 80125a8:	f001 f816 	bl	80135d8 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	2200      	movs	r2, #0
 80125b0:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2200      	movs	r2, #0
 80125c2:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80125c4:	4b05      	ldr	r3, [pc, #20]	; (80125dc <pifI2cDevice_Read+0x150>)
 80125c6:	220a      	movs	r2, #10
 80125c8:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80125ca:	2300      	movs	r3, #0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3728      	adds	r7, #40	; 0x28
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bdb0      	pop	{r4, r5, r7, pc}
 80125d4:	08026684 	.word	0x08026684
 80125d8:	200020d8 	.word	0x200020d8
 80125dc:	200020c9 	.word	0x200020c9
 80125e0:	080266a4 	.word	0x080266a4

080125e4 <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b086      	sub	sp, #24
 80125e8:	af02      	add	r7, sp, #8
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	460b      	mov	r3, r1
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 80125f2:	7af9      	ldrb	r1, [r7, #11]
 80125f4:	2301      	movs	r3, #1
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2201      	movs	r2, #1
 80125fc:	68f8      	ldr	r0, [r7, #12]
 80125fe:	f7ff ff45 	bl	801248c <pifI2cDevice_Read>
 8012602:	4603      	mov	r3, r0
}
 8012604:	4618      	mov	r0, r3
 8012606:	3710      	adds	r7, #16
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b088      	sub	sp, #32
 8012610:	af02      	add	r7, sp, #8
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	460b      	mov	r3, r1
 8012616:	607a      	str	r2, [r7, #4]
 8012618:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 801261a:	7af9      	ldrb	r1, [r7, #11]
 801261c:	f107 0314 	add.w	r3, r7, #20
 8012620:	2202      	movs	r2, #2
 8012622:	9200      	str	r2, [sp, #0]
 8012624:	2201      	movs	r2, #1
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ff ff30 	bl	801248c <pifI2cDevice_Read>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <pifI2cDevice_ReadRegWord+0x2a>
 8012632:	2300      	movs	r3, #0
 8012634:	e00a      	b.n	801264c <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 8012636:	7d3b      	ldrb	r3, [r7, #20]
 8012638:	b29b      	uxth	r3, r3
 801263a:	021b      	lsls	r3, r3, #8
 801263c:	b29a      	uxth	r2, r3
 801263e:	7d7b      	ldrb	r3, [r7, #21]
 8012640:	b29b      	uxth	r3, r3
 8012642:	4413      	add	r3, r2
 8012644:	b29a      	uxth	r2, r3
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	801a      	strh	r2, [r3, #0]
	return TRUE;
 801264a:	2301      	movs	r3, #1
}
 801264c:	4618      	mov	r0, r3
 801264e:	3718      	adds	r7, #24
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b086      	sub	sp, #24
 8012658:	af02      	add	r7, sp, #8
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	607a      	str	r2, [r7, #4]
 801265e:	603b      	str	r3, [r7, #0]
 8012660:	460b      	mov	r3, r1
 8012662:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 8012664:	7af9      	ldrb	r1, [r7, #11]
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2201      	movs	r2, #1
 801266e:	68f8      	ldr	r0, [r7, #12]
 8012670:	f7ff ff0c 	bl	801248c <pifI2cDevice_Read>
 8012674:	4603      	mov	r3, r0
}
 8012676:	4618      	mov	r0, r3
 8012678:	3710      	adds	r7, #16
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 801267e:	b580      	push	{r7, lr}
 8012680:	b088      	sub	sp, #32
 8012682:	af02      	add	r7, sp, #8
 8012684:	60f8      	str	r0, [r7, #12]
 8012686:	607b      	str	r3, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	72fb      	strb	r3, [r7, #11]
 801268c:	4613      	mov	r3, r2
 801268e:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 8012690:	893b      	ldrh	r3, [r7, #8]
 8012692:	0a1b      	lsrs	r3, r3, #8
 8012694:	b29b      	uxth	r3, r3
 8012696:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 8012698:	893b      	ldrh	r3, [r7, #8]
 801269a:	b2db      	uxtb	r3, r3
 801269c:	2201      	movs	r2, #1
 801269e:	fa02 f303 	lsl.w	r3, r2, r3
 80126a2:	b2db      	uxtb	r3, r3
 80126a4:	3b01      	subs	r3, #1
 80126a6:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80126a8:	7af9      	ldrb	r1, [r7, #11]
 80126aa:	f107 0315 	add.w	r3, r7, #21
 80126ae:	2201      	movs	r2, #1
 80126b0:	9200      	str	r2, [sp, #0]
 80126b2:	2201      	movs	r2, #1
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	f7ff fee9 	bl	801248c <pifI2cDevice_Read>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d101      	bne.n	80126c4 <pifI2cDevice_ReadRegBit8+0x46>
 80126c0:	2300      	movs	r3, #0
 80126c2:	e00d      	b.n	80126e0 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80126c4:	7d7b      	ldrb	r3, [r7, #21]
 80126c6:	461a      	mov	r2, r3
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	fa42 f303 	asr.w	r3, r2, r3
 80126ce:	b25a      	sxtb	r2, r3
 80126d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80126d4:	4013      	ands	r3, r2
 80126d6:	b25b      	sxtb	r3, r3
 80126d8:	b2da      	uxtb	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80126de:	2301      	movs	r3, #1
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3718      	adds	r7, #24
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80126e8:	b5b0      	push	{r4, r5, r7, lr}
 80126ea:	b08c      	sub	sp, #48	; 0x30
 80126ec:	af02      	add	r7, sp, #8
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	60b9      	str	r1, [r7, #8]
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	4613      	mov	r3, r2
 80126f6:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	685b      	ldr	r3, [r3, #4]
 80126fc:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d101      	bne.n	801270a <pifI2cDevice_Write+0x22>
 8012706:	2300      	movs	r3, #0
 8012708:	e08e      	b.n	8012828 <pifI2cDevice_Write+0x140>
	if (p_port->__use_device) {
 801270a:	69fb      	ldr	r3, [r7, #28]
 801270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270e:	2b00      	cmp	r3, #0
 8012710:	d00f      	beq.n	8012732 <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	461a      	mov	r2, r3
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	b2db      	uxtb	r3, r3
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	4613      	mov	r3, r2
 8012724:	22d3      	movs	r2, #211	; 0xd3
 8012726:	4942      	ldr	r1, [pc, #264]	; (8012830 <pifI2cDevice_Write+0x148>)
 8012728:	2002      	movs	r0, #2
 801272a:	f000 ff55 	bl	80135d8 <pifLog_Printf>
#endif
		return FALSE;
 801272e:	2300      	movs	r3, #0
 8012730:	e07a      	b.n	8012828 <pifI2cDevice_Write+0x140>
	}

	p_port->__use_device = p_owner;
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	68fa      	ldr	r2, [r7, #12]
 8012736:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2201      	movs	r2, #1
 801273c:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 8012742:	e048      	b.n	80127d6 <pifI2cDevice_Write+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012748:	461a      	mov	r2, r3
 801274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274c:	4293      	cmp	r3, r2
 801274e:	bf28      	it	cs
 8012750:	4613      	movcs	r3, r2
 8012752:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	689c      	ldr	r4, [r3, #8]
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	7818      	ldrb	r0, [r3, #0]
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012760:	18d1      	adds	r1, r2, r3
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012766:	18d5      	adds	r5, r2, r3
 8012768:	7efb      	ldrb	r3, [r7, #27]
 801276a:	b29b      	uxth	r3, r3
 801276c:	79fa      	ldrb	r2, [r7, #7]
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	462b      	mov	r3, r5
 8012772:	47a0      	blx	r4
 8012774:	4603      	mov	r3, r0
 8012776:	2b02      	cmp	r3, #2
 8012778:	d021      	beq.n	80127be <pifI2cDevice_Write+0xd6>
 801277a:	2b02      	cmp	r3, #2
 801277c:	dc23      	bgt.n	80127c6 <pifI2cDevice_Write+0xde>
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <pifI2cDevice_Write+0x9e>
 8012782:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012784:	e01f      	b.n	80127c6 <pifI2cDevice_Write+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012786:	4b2b      	ldr	r3, [pc, #172]	; (8012834 <pifI2cDevice_Write+0x14c>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 801278c:	e00a      	b.n	80127a4 <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801278e:	4b29      	ldr	r3, [pc, #164]	; (8012834 <pifI2cDevice_Write+0x14c>)
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	1ad3      	subs	r3, r2, r3
 8012796:	68fa      	ldr	r2, [r7, #12]
 8012798:	7852      	ldrb	r2, [r2, #1]
 801279a:	4293      	cmp	r3, r2
 801279c:	d902      	bls.n	80127a4 <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 801279e:	23e3      	movs	r3, #227	; 0xe3
 80127a0:	623b      	str	r3, [r7, #32]
					goto fail;
 80127a2:	e023      	b.n	80127ec <pifI2cDevice_Write+0x104>
			while (p_owner->_state == IS_RUN) {
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	789b      	ldrb	r3, [r3, #2]
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	d0ef      	beq.n	801278e <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	789b      	ldrb	r3, [r3, #2]
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b03      	cmp	r3, #3
 80127b6:	d105      	bne.n	80127c4 <pifI2cDevice_Write+0xdc>
				line = __LINE__;
 80127b8:	23ea      	movs	r3, #234	; 0xea
 80127ba:	623b      	str	r3, [r7, #32]
				goto fail;
 80127bc:	e016      	b.n	80127ec <pifI2cDevice_Write+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 80127be:	23f5      	movs	r3, #245	; 0xf5
 80127c0:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80127c2:	e013      	b.n	80127ec <pifI2cDevice_Write+0x104>
			break;
 80127c4:	bf00      	nop
		}
		ptr += len;
 80127c6:	7efb      	ldrb	r3, [r7, #27]
 80127c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ca:	4413      	add	r3, r2
 80127cc:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80127ce:	7efb      	ldrb	r3, [r7, #27]
 80127d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80127d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1b3      	bne.n	8012744 <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	2200      	movs	r2, #0
 80127e0:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2200      	movs	r2, #0
 80127e6:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80127e8:	2301      	movs	r3, #1
 80127ea:	e01d      	b.n	8012828 <pifI2cDevice_Write+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	461a      	mov	r2, r3
 80127f2:	4b11      	ldr	r3, [pc, #68]	; (8012838 <pifI2cDevice_Write+0x150>)
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	9301      	str	r3, [sp, #4]
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	9300      	str	r3, [sp, #0]
 80127fc:	4613      	mov	r3, r2
 80127fe:	6a3a      	ldr	r2, [r7, #32]
 8012800:	490e      	ldr	r1, [pc, #56]	; (801283c <pifI2cDevice_Write+0x154>)
 8012802:	2004      	movs	r0, #4
 8012804:	f000 fee8 	bl	80135d8 <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	2200      	movs	r2, #0
 801280c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	881b      	ldrh	r3, [r3, #0]
 8012812:	3301      	adds	r3, #1
 8012814:	b29a      	uxth	r2, r3
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2200      	movs	r2, #0
 801281e:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 8012820:	4b05      	ldr	r3, [pc, #20]	; (8012838 <pifI2cDevice_Write+0x150>)
 8012822:	220a      	movs	r2, #10
 8012824:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	3728      	adds	r7, #40	; 0x28
 801282c:	46bd      	mov	sp, r7
 801282e:	bdb0      	pop	{r4, r5, r7, pc}
 8012830:	080266c0 	.word	0x080266c0
 8012834:	200020d8 	.word	0x200020d8
 8012838:	200020c9 	.word	0x200020c9
 801283c:	080266e0 	.word	0x080266e0

08012840 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af02      	add	r7, sp, #8
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	460b      	mov	r3, r1
 801284a:	70fb      	strb	r3, [r7, #3]
 801284c:	4613      	mov	r3, r2
 801284e:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012850:	78f9      	ldrb	r1, [r7, #3]
 8012852:	1cbb      	adds	r3, r7, #2
 8012854:	2201      	movs	r2, #1
 8012856:	9200      	str	r2, [sp, #0]
 8012858:	2201      	movs	r2, #1
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7ff ff44 	bl	80126e8 <pifI2cDevice_Write>
 8012860:	4603      	mov	r3, r0
}
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
	...

0801286c <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af02      	add	r7, sp, #8
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	4608      	mov	r0, r1
 8012876:	4611      	mov	r1, r2
 8012878:	461a      	mov	r2, r3
 801287a:	4603      	mov	r3, r0
 801287c:	70fb      	strb	r3, [r7, #3]
 801287e:	460b      	mov	r3, r1
 8012880:	803b      	strh	r3, [r7, #0]
 8012882:	4613      	mov	r3, r2
 8012884:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012886:	883b      	ldrh	r3, [r7, #0]
 8012888:	0a1b      	lsrs	r3, r3, #8
 801288a:	b29b      	uxth	r3, r3
 801288c:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 801288e:	883b      	ldrh	r3, [r7, #0]
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2201      	movs	r2, #1
 8012894:	fa02 f303 	lsl.w	r3, r2, r3
 8012898:	b2db      	uxtb	r3, r3
 801289a:	3b01      	subs	r3, #1
 801289c:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 801289e:	78ba      	ldrb	r2, [r7, #2]
 80128a0:	7bbb      	ldrb	r3, [r7, #14]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d904      	bls.n	80128b0 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 80128a6:	4b21      	ldr	r3, [pc, #132]	; (801292c <pifI2cDevice_WriteRegBit8+0xc0>)
 80128a8:	2206      	movs	r2, #6
 80128aa:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80128ac:	2300      	movs	r3, #0
 80128ae:	e039      	b.n	8012924 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 80128b0:	78f9      	ldrb	r1, [r7, #3]
 80128b2:	f107 030c 	add.w	r3, r7, #12
 80128b6:	2201      	movs	r2, #1
 80128b8:	9200      	str	r2, [sp, #0]
 80128ba:	2201      	movs	r2, #1
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7ff fde5 	bl	801248c <pifI2cDevice_Read>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d101      	bne.n	80128cc <pifI2cDevice_WriteRegBit8+0x60>
 80128c8:	2300      	movs	r3, #0
 80128ca:	e02b      	b.n	8012924 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 80128cc:	7b3b      	ldrb	r3, [r7, #12]
 80128ce:	461a      	mov	r2, r3
 80128d0:	7bfb      	ldrb	r3, [r7, #15]
 80128d2:	411a      	asrs	r2, r3
 80128d4:	7bbb      	ldrb	r3, [r7, #14]
 80128d6:	401a      	ands	r2, r3
 80128d8:	78bb      	ldrb	r3, [r7, #2]
 80128da:	429a      	cmp	r2, r3
 80128dc:	d021      	beq.n	8012922 <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 80128de:	7bba      	ldrb	r2, [r7, #14]
 80128e0:	7bfb      	ldrb	r3, [r7, #15]
 80128e2:	fa02 f303 	lsl.w	r3, r2, r3
 80128e6:	b25b      	sxtb	r3, r3
 80128e8:	43db      	mvns	r3, r3
 80128ea:	b25a      	sxtb	r2, r3
 80128ec:	7b3b      	ldrb	r3, [r7, #12]
 80128ee:	b25b      	sxtb	r3, r3
 80128f0:	4013      	ands	r3, r2
 80128f2:	b25a      	sxtb	r2, r3
 80128f4:	78b9      	ldrb	r1, [r7, #2]
 80128f6:	7bfb      	ldrb	r3, [r7, #15]
 80128f8:	fa01 f303 	lsl.w	r3, r1, r3
 80128fc:	b25b      	sxtb	r3, r3
 80128fe:	4313      	orrs	r3, r2
 8012900:	b25b      	sxtb	r3, r3
 8012902:	b2db      	uxtb	r3, r3
 8012904:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012906:	78f9      	ldrb	r1, [r7, #3]
 8012908:	f107 030d 	add.w	r3, r7, #13
 801290c:	2201      	movs	r2, #1
 801290e:	9200      	str	r2, [sp, #0]
 8012910:	2201      	movs	r2, #1
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7ff fee8 	bl	80126e8 <pifI2cDevice_Write>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d101      	bne.n	8012922 <pifI2cDevice_WriteRegBit8+0xb6>
 801291e:	2300      	movs	r3, #0
 8012920:	e000      	b.n	8012924 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 8012922:	2301      	movs	r3, #1
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}
 801292c:	200020c9 	.word	0x200020c9

08012930 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	460b      	mov	r3, r1
 801293a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012940:	2b00      	cmp	r3, #0
 8012942:	d009      	beq.n	8012958 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012944:	78fb      	ldrb	r3, [r7, #3]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d001      	beq.n	801294e <pifI2cPort_sigEndTransfer+0x1e>
 801294a:	2202      	movs	r2, #2
 801294c:	e000      	b.n	8012950 <pifI2cPort_sigEndTransfer+0x20>
 801294e:	2203      	movs	r2, #3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012954:	709a      	strb	r2, [r3, #2]
 8012956:	e000      	b.n	801295a <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012958:	bf00      	nop
}
 801295a:	370c      	adds	r7, #12
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr

08012964 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b088      	sub	sp, #32
 8012968:	af00      	add	r7, sp, #0
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d005      	beq.n	8012982 <pifFixList_Init+0x1e>
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d002      	beq.n	8012982 <pifFixList_Init+0x1e>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d104      	bne.n	801298c <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012982:	4b27      	ldr	r3, [pc, #156]	; (8012a20 <pifFixList_Init+0xbc>)
 8012984:	2201      	movs	r2, #1
 8012986:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012988:	2300      	movs	r3, #0
 801298a:	e045      	b.n	8012a18 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	3308      	adds	r3, #8
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	4611      	mov	r1, r2
 8012994:	4618      	mov	r0, r3
 8012996:	f00f fa61 	bl	8021e5c <calloc>
 801299a:	4603      	mov	r3, r0
 801299c:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d033      	beq.n	8012a0c <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	69fa      	ldr	r2, [r7, #28]
 80129a8:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	68ba      	ldr	r2, [r7, #8]
 80129ae:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2200      	movs	r2, #0
 80129ba:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2200      	movs	r2, #0
 80129c0:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	69ba      	ldr	r2, [r7, #24]
 80129cc:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 80129ce:	2301      	movs	r3, #1
 80129d0:	617b      	str	r3, [r7, #20]
 80129d2:	e00f      	b.n	80129f4 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	3308      	adds	r3, #8
 80129d8:	69fa      	ldr	r2, [r7, #28]
 80129da:	4413      	add	r3, r2
 80129dc:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 80129de:	69bb      	ldr	r3, [r7, #24]
 80129e0:	69fa      	ldr	r2, [r7, #28]
 80129e2:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	2200      	movs	r2, #0
 80129e8:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	3301      	adds	r3, #1
 80129f2:	617b      	str	r3, [r7, #20]
 80129f4:	697a      	ldr	r2, [r7, #20]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	dbeb      	blt.n	80129d4 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	2200      	movs	r2, #0
 8012a00:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	2200      	movs	r2, #0
 8012a06:	605a      	str	r2, [r3, #4]

	return TRUE;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e005      	b.n	8012a18 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 8012a0c:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 8012a0e:	2100      	movs	r1, #0
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f000 f807 	bl	8012a24 <pifFixList_Clear>
	return FALSE;
 8012a16:	2300      	movs	r3, #0
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3720      	adds	r7, #32
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	200020c9 	.word	0x200020c9

08012a24 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d01f      	beq.n	8012a76 <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d014      	beq.n	8012a66 <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	691b      	ldr	r3, [r3, #16]
 8012a40:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012a42:	e00d      	b.n	8012a60 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f103 0208 	add.w	r2, r3, #8
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	4610      	mov	r0, r2
 8012a4e:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d002      	beq.n	8012a5c <pifFixList_Clear+0x38>
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	e000      	b.n	8012a5e <pifFixList_Clear+0x3a>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d1ee      	bne.n	8012a44 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f00f fa30 	bl	8021ed0 <free>
		p_owner->p_node = NULL;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	605a      	str	r2, [r3, #4]
}
 8012a82:	bf00      	nop
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b084      	sub	sp, #16
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	695b      	ldr	r3, [r3, #20]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d101      	bne.n	8012a9e <pifFixList_AddFirst+0x14>
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	e025      	b.n	8012aea <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	695b      	ldr	r3, [r3, #20]
 8012aa2:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	691a      	ldr	r2, [r3, #16]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	691b      	ldr	r3, [r3, #16]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d003      	beq.n	8012ac4 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	68fa      	ldr	r2, [r7, #12]
 8012ac2:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	68fa      	ldr	r2, [r7, #12]
 8012ac8:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	689b      	ldr	r3, [r3, #8]
 8012ace:	1c5a      	adds	r2, r3, #1
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	68b8      	ldr	r0, [r7, #8]
 8012ae4:	f00f fa0a 	bl	8021efc <memset>
    return p;
 8012ae8:	68bb      	ldr	r3, [r7, #8]
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3710      	adds	r7, #16
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}

08012af2 <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 8012af2:	b480      	push	{r7}
 8012af4:	b085      	sub	sp, #20
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	6078      	str	r0, [r7, #4]
 8012afa:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	3b08      	subs	r3, #8
 8012b00:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d005      	beq.n	8012b16 <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	6812      	ldr	r2, [r2, #0]
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	e003      	b.n	8012b1e <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d004      	beq.n	8012b30 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	68fa      	ldr	r2, [r7, #12]
 8012b2c:	6852      	ldr	r2, [r2, #4]
 8012b2e:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	695a      	ldr	r2, [r3, #20]
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	1e5a      	subs	r2, r3, #1
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	609a      	str	r2, [r3, #8]
}
 8012b4e:	bf00      	nop
 8012b50:	3714      	adds	r7, #20
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr

08012b5a <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 8012b5a:	b480      	push	{r7}
 8012b5c:	b083      	sub	sp, #12
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	689b      	ldr	r3, [r3, #8]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr

08012b72 <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012b72:	b480      	push	{r7}
 8012b74:	b083      	sub	sp, #12
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	691b      	ldr	r3, [r3, #16]
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	370c      	adds	r7, #12
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr

08012b8a <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 8012b8a:	b480      	push	{r7}
 8012b8c:	b083      	sub	sp, #12
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d002      	beq.n	8012b9e <pifFixList_Next+0x14>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	e000      	b.n	8012ba0 <pifFixList_Next+0x16>
 8012b9e:	2300      	movs	r3, #0
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <_cmdHelp>:
		{ NULL, NULL, NULL }
};


static int _cmdHelp(int argc, char *argv[])
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
    int i;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available PIF commands:\n");
 8012bb6:	492d      	ldr	r1, [pc, #180]	; (8012c6c <_cmdHelp+0xc0>)
 8012bb8:	2000      	movs	r0, #0
 8012bba:	f000 fc7f 	bl	80134bc <pifLog_Print>
    i = 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 8012bc2:	e018      	b.n	8012bf6 <_cmdHelp+0x4a>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", c_cmd_table[i].p_name, c_cmd_table[i].p_help);
 8012bc4:	492a      	ldr	r1, [pc, #168]	; (8012c70 <_cmdHelp+0xc4>)
 8012bc6:	68fa      	ldr	r2, [r7, #12]
 8012bc8:	4613      	mov	r3, r2
 8012bca:	005b      	lsls	r3, r3, #1
 8012bcc:	4413      	add	r3, r2
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	440b      	add	r3, r1
 8012bd2:	6819      	ldr	r1, [r3, #0]
 8012bd4:	4826      	ldr	r0, [pc, #152]	; (8012c70 <_cmdHelp+0xc4>)
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	4413      	add	r3, r2
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4403      	add	r3, r0
 8012be2:	3308      	adds	r3, #8
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	460a      	mov	r2, r1
 8012be8:	4922      	ldr	r1, [pc, #136]	; (8012c74 <_cmdHelp+0xc8>)
 8012bea:	2000      	movs	r0, #0
 8012bec:	f000 fcf4 	bl	80135d8 <pifLog_Printf>
        i++;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	60fb      	str	r3, [r7, #12]
    while (c_cmd_table[i].p_name) {
 8012bf6:	491e      	ldr	r1, [pc, #120]	; (8012c70 <_cmdHelp+0xc4>)
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	440b      	add	r3, r1
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1dc      	bne.n	8012bc4 <_cmdHelp+0x18>
    }

    pifLog_Print(LT_NONE, "\nAvailable user commands:\n");
 8012c0a:	491b      	ldr	r1, [pc, #108]	; (8012c78 <_cmdHelp+0xcc>)
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	f000 fc55 	bl	80134bc <pifLog_Print>
    i = 0;
 8012c12:	2300      	movs	r3, #0
 8012c14:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8012c16:	e019      	b.n	8012c4c <_cmdHelp+0xa0>
        pifLog_Printf(LT_NONE, "  %s\t%s\n", s_log.p_cmd_table[1][i].p_name, s_log.p_cmd_table[1][i].p_help);
 8012c18:	4b18      	ldr	r3, [pc, #96]	; (8012c7c <_cmdHelp+0xd0>)
 8012c1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	005b      	lsls	r3, r3, #1
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	440b      	add	r3, r1
 8012c28:	6818      	ldr	r0, [r3, #0]
 8012c2a:	4b14      	ldr	r3, [pc, #80]	; (8012c7c <_cmdHelp+0xd0>)
 8012c2c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	4613      	mov	r3, r2
 8012c32:	005b      	lsls	r3, r3, #1
 8012c34:	4413      	add	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	440b      	add	r3, r1
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	490d      	ldr	r1, [pc, #52]	; (8012c74 <_cmdHelp+0xc8>)
 8012c40:	2000      	movs	r0, #0
 8012c42:	f000 fcc9 	bl	80135d8 <pifLog_Printf>
        i++;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	60fb      	str	r3, [r7, #12]
    while (s_log.p_cmd_table[1][i].p_name) {
 8012c4c:	4b0b      	ldr	r3, [pc, #44]	; (8012c7c <_cmdHelp+0xd0>)
 8012c4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	4613      	mov	r3, r2
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	009b      	lsls	r3, r3, #2
 8012c5a:	440b      	add	r3, r1
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1da      	bne.n	8012c18 <_cmdHelp+0x6c>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8012c62:	2300      	movs	r3, #0
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	080267a4 	.word	0x080267a4
 8012c70:	08028314 	.word	0x08028314
 8012c74:	080267c0 	.word	0x080267c0
 8012c78:	080267cc 	.word	0x080267cc
 8012c7c:	200020f0 	.word	0x200020f0

08012c80 <_cmdPrintVersion>:

static int _cmdPrintVersion(int argc, char* argv[])
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af02      	add	r7, sp, #8
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 8012c8a:	4b07      	ldr	r3, [pc, #28]	; (8012ca8 <_cmdPrintVersion+0x28>)
 8012c8c:	9301      	str	r3, [sp, #4]
 8012c8e:	2300      	movs	r3, #0
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	2301      	movs	r3, #1
 8012c94:	2200      	movs	r2, #0
 8012c96:	4905      	ldr	r1, [pc, #20]	; (8012cac <_cmdPrintVersion+0x2c>)
 8012c98:	2000      	movs	r0, #0
 8012c9a:	f000 fc9d 	bl	80135d8 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8012c9e:	2300      	movs	r3, #0
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	08026804 	.word	0x08026804
 8012cac:	080267e8 	.word	0x080267e8

08012cb0 <_cmdSetStatus>:

static int _cmdSetStatus(int argc, char* argv[])
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af02      	add	r7, sp, #8
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 1) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d137      	bne.n	8012d30 <_cmdSetStatus+0x80>
	   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifTaskManager_Count());
 8012cc0:	f001 feaa 	bl	8014a18 <pifTaskManager_Count>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	494a      	ldr	r1, [pc, #296]	; (8012df4 <_cmdSetStatus+0x144>)
 8012cca:	2000      	movs	r0, #0
 8012ccc:	f000 fc84 	bl	80135d8 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012cd0:	4b49      	ldr	r3, [pc, #292]	; (8012df8 <_cmdSetStatus+0x148>)
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	4949      	ldr	r1, [pc, #292]	; (8012dfc <_cmdSetStatus+0x14c>)
 8012cd8:	2000      	movs	r0, #0
 8012cda:	f000 fc7d 	bl	80135d8 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012cde:	4948      	ldr	r1, [pc, #288]	; (8012e00 <_cmdSetStatus+0x150>)
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	f000 fc79 	bl	80135d8 <pifLog_Printf>
	   	i = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012cea:	e019      	b.n	8012d20 <_cmdSetStatus+0x70>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012cec:	4a45      	ldr	r2, [pc, #276]	; (8012e04 <_cmdSetStatus+0x154>)
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012cf4:	4a43      	ldr	r2, [pc, #268]	; (8012e04 <_cmdSetStatus+0x154>)
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	00db      	lsls	r3, r3, #3
 8012cfa:	4413      	add	r3, r2
 8012cfc:	6858      	ldr	r0, [r3, #4]
 8012cfe:	4b42      	ldr	r3, [pc, #264]	; (8012e08 <_cmdSetStatus+0x158>)
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	fa22 f303 	lsr.w	r3, r2, r3
 8012d08:	f003 0301 	and.w	r3, r3, #1
 8012d0c:	9300      	str	r3, [sp, #0]
 8012d0e:	4603      	mov	r3, r0
 8012d10:	460a      	mov	r2, r1
 8012d12:	493e      	ldr	r1, [pc, #248]	; (8012e0c <_cmdSetStatus+0x15c>)
 8012d14:	2000      	movs	r0, #0
 8012d16:	f000 fc5f 	bl	80135d8 <pifLog_Printf>
			i++;
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d20:	4a38      	ldr	r2, [pc, #224]	; (8012e04 <_cmdSetStatus+0x154>)
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d1df      	bne.n	8012cec <_cmdSetStatus+0x3c>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	e05d      	b.n	8012dec <_cmdSetStatus+0x13c>
	}
	else if (argc > 2) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2b02      	cmp	r3, #2
 8012d34:	dd58      	ble.n	8012de8 <_cmdSetStatus+0x138>
		switch (argv[2][0]) {
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	3308      	adds	r3, #8
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	2b74      	cmp	r3, #116	; 0x74
 8012d40:	d015      	beq.n	8012d6e <_cmdSetStatus+0xbe>
 8012d42:	2b74      	cmp	r3, #116	; 0x74
 8012d44:	dc16      	bgt.n	8012d74 <_cmdSetStatus+0xc4>
 8012d46:	2b66      	cmp	r3, #102	; 0x66
 8012d48:	d00e      	beq.n	8012d68 <_cmdSetStatus+0xb8>
 8012d4a:	2b66      	cmp	r3, #102	; 0x66
 8012d4c:	dc12      	bgt.n	8012d74 <_cmdSetStatus+0xc4>
 8012d4e:	2b54      	cmp	r3, #84	; 0x54
 8012d50:	d00d      	beq.n	8012d6e <_cmdSetStatus+0xbe>
 8012d52:	2b54      	cmp	r3, #84	; 0x54
 8012d54:	dc0e      	bgt.n	8012d74 <_cmdSetStatus+0xc4>
 8012d56:	2b46      	cmp	r3, #70	; 0x46
 8012d58:	d006      	beq.n	8012d68 <_cmdSetStatus+0xb8>
 8012d5a:	2b46      	cmp	r3, #70	; 0x46
 8012d5c:	dc0a      	bgt.n	8012d74 <_cmdSetStatus+0xc4>
 8012d5e:	2b30      	cmp	r3, #48	; 0x30
 8012d60:	d002      	beq.n	8012d68 <_cmdSetStatus+0xb8>
 8012d62:	2b31      	cmp	r3, #49	; 0x31
 8012d64:	d003      	beq.n	8012d6e <_cmdSetStatus+0xbe>
 8012d66:	e005      	b.n	8012d74 <_cmdSetStatus+0xc4>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	73fb      	strb	r3, [r7, #15]
			break;
 8012d6c:	e005      	b.n	8012d7a <_cmdSetStatus+0xca>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	73fb      	strb	r3, [r7, #15]
			break;
 8012d72:	e002      	b.n	8012d7a <_cmdSetStatus+0xca>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012d74:	f06f 0303 	mvn.w	r3, #3
 8012d78:	e038      	b.n	8012dec <_cmdSetStatus+0x13c>
		}
		i = 0;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012d7e:	e02a      	b.n	8012dd6 <_cmdSetStatus+0x126>
			if (!strcmp(argv[1], c_log_flags[i].p_command)) {
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	3304      	adds	r3, #4
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	491f      	ldr	r1, [pc, #124]	; (8012e04 <_cmdSetStatus+0x154>)
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	00db      	lsls	r3, r3, #3
 8012d8c:	440b      	add	r3, r1
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	4619      	mov	r1, r3
 8012d92:	4610      	mov	r0, r2
 8012d94:	f7ed fa20 	bl	80001d8 <strcmp>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d118      	bne.n	8012dd0 <_cmdSetStatus+0x120>
				if (value) {
 8012d9e:	7bfb      	ldrb	r3, [r7, #15]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d009      	beq.n	8012db8 <_cmdSetStatus+0x108>
					pif_log_flag.all |= 1L << i;
 8012da4:	4b18      	ldr	r3, [pc, #96]	; (8012e08 <_cmdSetStatus+0x158>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2101      	movs	r1, #1
 8012daa:	68ba      	ldr	r2, [r7, #8]
 8012dac:	fa01 f202 	lsl.w	r2, r1, r2
 8012db0:	4313      	orrs	r3, r2
 8012db2:	4a15      	ldr	r2, [pc, #84]	; (8012e08 <_cmdSetStatus+0x158>)
 8012db4:	6013      	str	r3, [r2, #0]
 8012db6:	e009      	b.n	8012dcc <_cmdSetStatus+0x11c>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012db8:	4b13      	ldr	r3, [pc, #76]	; (8012e08 <_cmdSetStatus+0x158>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2101      	movs	r1, #1
 8012dbe:	68ba      	ldr	r2, [r7, #8]
 8012dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8012dc4:	43d2      	mvns	r2, r2
 8012dc6:	4013      	ands	r3, r2
 8012dc8:	4a0f      	ldr	r2, [pc, #60]	; (8012e08 <_cmdSetStatus+0x158>)
 8012dca:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e00d      	b.n	8012dec <_cmdSetStatus+0x13c>
			}
			i++;
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012dd6:	4a0b      	ldr	r2, [pc, #44]	; (8012e04 <_cmdSetStatus+0x154>)
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d1ce      	bne.n	8012d80 <_cmdSetStatus+0xd0>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012de2:	f06f 0303 	mvn.w	r3, #3
 8012de6:	e001      	b.n	8012dec <_cmdSetStatus+0x13c>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012de8:	f06f 0302 	mvn.w	r3, #2
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3710      	adds	r7, #16
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	08026810 	.word	0x08026810
 8012df8:	200020c9 	.word	0x200020c9
 8012dfc:	08026820 	.word	0x08026820
 8012e00:	0802682c 	.word	0x0802682c
 8012e04:	080282e0 	.word	0x080282e0
 8012e08:	200020ec 	.word	0x200020ec
 8012e0c:	08026834 	.word	0x08026834

08012e10 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
    char tmp_char;
    BOOL str_get_done_flag = FALSE;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	73fb      	strb	r3, [r7, #15]
    static BOOL last_cr = FALSE;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012e1e:	e0b5      	b.n	8012f8c <_getDebugString+0x17c>
        switch (tmp_char) {
 8012e20:	7bbb      	ldrb	r3, [r7, #14]
 8012e22:	3b08      	subs	r3, #8
 8012e24:	2b13      	cmp	r3, #19
 8012e26:	d866      	bhi.n	8012ef6 <_getDebugString+0xe6>
 8012e28:	a201      	add	r2, pc, #4	; (adr r2, 8012e30 <_getDebugString+0x20>)
 8012e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e2e:	bf00      	nop
 8012e30:	08012e81 	.word	0x08012e81
 8012e34:	08012ef7 	.word	0x08012ef7
 8012e38:	08012edb 	.word	0x08012edb
 8012e3c:	08012ef7 	.word	0x08012ef7
 8012e40:	08012ef7 	.word	0x08012ef7
 8012e44:	08012ecf 	.word	0x08012ecf
 8012e48:	08012ef7 	.word	0x08012ef7
 8012e4c:	08012ef7 	.word	0x08012ef7
 8012e50:	08012ef7 	.word	0x08012ef7
 8012e54:	08012ef7 	.word	0x08012ef7
 8012e58:	08012ef7 	.word	0x08012ef7
 8012e5c:	08012ef7 	.word	0x08012ef7
 8012e60:	08012ef7 	.word	0x08012ef7
 8012e64:	08012ef7 	.word	0x08012ef7
 8012e68:	08012ef7 	.word	0x08012ef7
 8012e6c:	08012ef7 	.word	0x08012ef7
 8012e70:	08012ef7 	.word	0x08012ef7
 8012e74:	08012ef7 	.word	0x08012ef7
 8012e78:	08012ef7 	.word	0x08012ef7
 8012e7c:	08012ef1 	.word	0x08012ef1
        case '\b':
            if (p_owner->char_idx > 0) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d062      	beq.n	8012f50 <_getDebugString+0x140>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8012e8a:	e004      	b.n	8012e96 <_getDebugString+0x86>
            		if (!pifTaskManager_Yield()) break;
 8012e8c:	f001 fe40 	bl	8014b10 <pifTaskManager_Yield>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d009      	beq.n	8012eaa <_getDebugString+0x9a>
            	while (!pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b")) {
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e9a:	4944      	ldr	r1, [pc, #272]	; (8012fac <_getDebugString+0x19c>)
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f001 f86d 	bl	8013f7c <pifRingBuffer_PutString>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d0f1      	beq.n	8012e8c <_getDebugString+0x7c>
 8012ea8:	e000      	b.n	8012eac <_getDebugString+0x9c>
            		if (!pifTaskManager_Yield()) break;
 8012eaa:	bf00      	nop
            	}
                p_owner->char_idx--;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eb2:	3b01      	subs	r3, #1
 8012eb4:	b2da      	uxtb	r2, r3
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012ec6:	4413      	add	r3, r2
 8012ec8:	2200      	movs	r2, #0
 8012eca:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ecc:	e040      	b.n	8012f50 <_getDebugString+0x140>

        case '\r':
        	last_cr = TRUE;
 8012ece:	4b38      	ldr	r3, [pc, #224]	; (8012fb0 <_getDebugString+0x1a0>)
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	701a      	strb	r2, [r3, #0]
            str_get_done_flag = TRUE;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	73fb      	strb	r3, [r7, #15]
            break;
 8012ed8:	e03d      	b.n	8012f56 <_getDebugString+0x146>

        case '\n':
            if (last_cr == TRUE) {
 8012eda:	4b35      	ldr	r3, [pc, #212]	; (8012fb0 <_getDebugString+0x1a0>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d103      	bne.n	8012eea <_getDebugString+0xda>
            	last_cr = FALSE;
 8012ee2:	4b33      	ldr	r3, [pc, #204]	; (8012fb0 <_getDebugString+0x1a0>)
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	701a      	strb	r2, [r3, #0]
            }
            else {
            	str_get_done_flag = TRUE;
            }
            break;
 8012ee8:	e035      	b.n	8012f56 <_getDebugString+0x146>
            	str_get_done_flag = TRUE;
 8012eea:	2301      	movs	r3, #1
 8012eec:	73fb      	strb	r3, [r7, #15]
            break;
 8012eee:	e032      	b.n	8012f56 <_getDebugString+0x146>

        case 0x1b:  // ESC-Key pressed
            str_get_done_flag = TRUE;
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	73fb      	strb	r3, [r7, #15]
            break;
 8012ef4:	e02f      	b.n	8012f56 <_getDebugString+0x146>

        default:
            if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012efc:	461a      	mov	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f04:	3b03      	subs	r3, #3
 8012f06:	429a      	cmp	r2, r3
 8012f08:	da24      	bge.n	8012f54 <_getDebugString+0x144>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8012f0a:	e004      	b.n	8012f16 <_getDebugString+0x106>
                	if (!pifTaskManager_Yield()) break;
 8012f0c:	f001 fe00 	bl	8014b10 <pifTaskManager_Yield>
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00a      	beq.n	8012f2c <_getDebugString+0x11c>
                while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char)) {
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f1a:	7bba      	ldrb	r2, [r7, #14]
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f000 ffae 	bl	8013e80 <pifRingBuffer_PutByte>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d0f0      	beq.n	8012f0c <_getDebugString+0xfc>
 8012f2a:	e000      	b.n	8012f2e <_getDebugString+0x11e>
                	if (!pifTaskManager_Yield()) break;
 8012f2c:	bf00      	nop
                }
                p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f38:	4413      	add	r3, r2
 8012f3a:	7bba      	ldrb	r2, [r7, #14]
 8012f3c:	701a      	strb	r2, [r3, #0]
                p_owner->char_idx++;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f44:	3301      	adds	r3, #1
 8012f46:	b2da      	uxtb	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            }
            break;
 8012f4e:	e001      	b.n	8012f54 <_getDebugString+0x144>
            break;
 8012f50:	bf00      	nop
 8012f52:	e000      	b.n	8012f56 <_getDebugString+0x146>
            break;
 8012f54:	bf00      	nop
        }

        if (str_get_done_flag == TRUE) {
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d117      	bne.n	8012f8c <_getDebugString+0x17c>
        	p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f66:	4413      	add	r3, r2
 8012f68:	2200      	movs	r2, #0
 8012f6a:	701a      	strb	r2, [r3, #0]
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8012f6c:	e005      	b.n	8012f7a <_getDebugString+0x16a>
        		if (!pifTaskManager_Yield()) break;
 8012f6e:	f001 fdcf 	bl	8014b10 <pifTaskManager_Yield>
 8012f72:	4603      	mov	r3, r0
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d100      	bne.n	8012f7a <_getDebugString+0x16a>
 8012f78:	e008      	b.n	8012f8c <_getDebugString+0x17c>
        	while (!pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n')) {
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f7e:	210a      	movs	r1, #10
 8012f80:	4618      	mov	r0, r3
 8012f82:	f000 ff7d 	bl	8013e80 <pifRingBuffer_PutByte>
 8012f86:	4603      	mov	r3, r0
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d0f0      	beq.n	8012f6e <_getDebugString+0x15e>
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a1a      	ldr	r2, [r3, #32]
 8012f90:	f107 010e 	add.w	r1, r7, #14
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	4610      	mov	r0, r2
 8012f98:	4798      	blx	r3
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f47f af3f 	bne.w	8012e20 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8012fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	08026844 	.word	0x08026844
 8012fb0:	20002154 	.word	0x20002154

08012fb4 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b088      	sub	sp, #32
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	76fb      	strb	r3, [r7, #27]
    argc = 0;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	617b      	str	r3, [r7, #20]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fc8:	61fb      	str	r3, [r7, #28]

    while (*p_tmp_cmd) {
 8012fca:	e022      	b.n	8013012 <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	2b20      	cmp	r3, #32
 8012fd2:	d105      	bne.n	8012fe0 <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	76fb      	strb	r3, [r7, #27]
 8012fde:	e015      	b.n	801300c <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012fe0:	7efb      	ldrb	r3, [r7, #27]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d012      	beq.n	801300c <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	2b07      	cmp	r3, #7
 8012fea:	d80c      	bhi.n	8013006 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012fec:	687a      	ldr	r2, [r7, #4]
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	330c      	adds	r3, #12
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	69fa      	ldr	r2, [r7, #28]
 8012ff8:	605a      	str	r2, [r3, #4]
                	argc++;
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	617b      	str	r3, [r7, #20]
                    find_arg = FALSE;
 8013000:	2300      	movs	r3, #0
 8013002:	76fb      	strb	r3, [r7, #27]
 8013004:	e002      	b.n	801300c <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8013006:	f06f 0301 	mvn.w	r3, #1
 801300a:	e038      	b.n	801307e <_processDebugCmd+0xca>
                }
            }
        }

        p_tmp_cmd++;
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	3301      	adds	r3, #1
 8013010:	61fb      	str	r3, [r7, #28]
    while (*p_tmp_cmd) {
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d1d8      	bne.n	8012fcc <_processDebugCmd+0x18>
    }

    if (argc) {
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d02d      	beq.n	801307c <_processDebugCmd+0xc8>
    	for (int i = 0; i < 2; i++) {
 8013020:	2300      	movs	r3, #0
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	e024      	b.n	8013070 <_processDebugCmd+0xbc>
    		p_cmd_entry = p_owner->p_cmd_table[i];
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	68fa      	ldr	r2, [r7, #12]
 801302a:	3216      	adds	r2, #22
 801302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013030:	613b      	str	r3, [r7, #16]
            while (p_cmd_entry->p_name) {
 8013032:	e016      	b.n	8013062 <_processDebugCmd+0xae>
                if (!strcmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	4619      	mov	r1, r3
 801303e:	4610      	mov	r0, r2
 8013040:	f7ed f8ca 	bl	80001d8 <strcmp>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d108      	bne.n	801305c <_processDebugCmd+0xa8>
                    return p_cmd_entry->processor(argc, p_owner->p_argv);
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	6978      	ldr	r0, [r7, #20]
 8013050:	687a      	ldr	r2, [r7, #4]
 8013052:	3234      	adds	r2, #52	; 0x34
 8013054:	4611      	mov	r1, r2
 8013056:	4798      	blx	r3
 8013058:	4603      	mov	r3, r0
 801305a:	e010      	b.n	801307e <_processDebugCmd+0xca>
                }

                p_cmd_entry++;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	330c      	adds	r3, #12
 8013060:	613b      	str	r3, [r7, #16]
            while (p_cmd_entry->p_name) {
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1e4      	bne.n	8013034 <_processDebugCmd+0x80>
    	for (int i = 0; i < 2; i++) {
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	3301      	adds	r3, #1
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2b01      	cmp	r3, #1
 8013074:	ddd7      	ble.n	8013026 <_processDebugCmd+0x72>
            }
    	}
        return PIF_LOG_CMD_BAD_CMD;
 8013076:	f04f 33ff 	mov.w	r3, #4294967295
 801307a:	e000      	b.n	801307e <_processDebugCmd+0xca>
    }
    return PIF_LOG_CMD_NO_ERROR;
 801307c:	2300      	movs	r3, #0
}
 801307e:	4618      	mov	r0, r3
 8013080:	3720      	adds	r7, #32
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}

08013086 <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8013086:	b580      	push	{r7, lr}
 8013088:	b084      	sub	sp, #16
 801308a:	af00      	add	r7, sp, #0
 801308c:	6078      	str	r0, [r7, #4]
 801308e:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801309a:	2b00      	cmp	r3, #0
 801309c:	d10e      	bne.n	80130bc <_evtParsing+0x36>
        if (_getDebugString(p_owner, act_receive_data)) {
 801309e:	6839      	ldr	r1, [r7, #0]
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f7ff feb5 	bl	8012e10 <_getDebugString>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d007      	beq.n	80130bc <_evtParsing+0x36>
        	p_owner->cmd_done = TRUE;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2201      	movs	r2, #1
 80130b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	p_owner->p_task->immediate = TRUE;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130b8:	2201      	movs	r2, #1
 80130ba:	705a      	strb	r2, [r3, #1]
        }
    }
}
 80130bc:	bf00      	nop
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b08e      	sub	sp, #56	; 0x38
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 80130cc:	2300      	movs	r3, #0
 80130ce:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	if (s_log.cmd_done == TRUE) {
 80130d0:	4b55      	ldr	r3, [pc, #340]	; (8013228 <_doTask+0x164>)
 80130d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	f040 8093 	bne.w	8013202 <_doTask+0x13e>
		status = _processDebugCmd(&s_log);
 80130dc:	4852      	ldr	r0, [pc, #328]	; (8013228 <_doTask+0x164>)
 80130de:	f7ff ff69 	bl	8012fb4 <_processDebugCmd>
 80130e2:	6338      	str	r0, [r7, #48]	; 0x30

	    while (s_log.char_idx) {
 80130e4:	e00f      	b.n	8013106 <_doTask+0x42>
	    	s_log.p_rx_buffer[s_log.char_idx] = 0;
 80130e6:	4b50      	ldr	r3, [pc, #320]	; (8013228 <_doTask+0x164>)
 80130e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ea:	4a4f      	ldr	r2, [pc, #316]	; (8013228 <_doTask+0x164>)
 80130ec:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80130f0:	4413      	add	r3, r2
 80130f2:	2200      	movs	r2, #0
 80130f4:	701a      	strb	r2, [r3, #0]
	    	s_log.char_idx--;
 80130f6:	4b4c      	ldr	r3, [pc, #304]	; (8013228 <_doTask+0x164>)
 80130f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130fc:	3b01      	subs	r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	4b49      	ldr	r3, [pc, #292]	; (8013228 <_doTask+0x164>)
 8013102:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	    while (s_log.char_idx) {
 8013106:	4b48      	ldr	r3, [pc, #288]	; (8013228 <_doTask+0x164>)
 8013108:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801310c:	2b00      	cmp	r3, #0
 801310e:	d1ea      	bne.n	80130e6 <_doTask+0x22>
	    }

	    for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8013110:	2300      	movs	r3, #0
 8013112:	637b      	str	r3, [r7, #52]	; 0x34
 8013114:	e009      	b.n	801312a <_doTask+0x66>
	    	s_log.p_argv[i] = 0;
 8013116:	4a44      	ldr	r2, [pc, #272]	; (8013228 <_doTask+0x164>)
 8013118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311a:	330c      	adds	r3, #12
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	4413      	add	r3, r2
 8013120:	2200      	movs	r2, #0
 8013122:	605a      	str	r2, [r3, #4]
	    for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8013124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013126:	3301      	adds	r3, #1
 8013128:	637b      	str	r3, [r7, #52]	; 0x34
 801312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312c:	2b07      	cmp	r3, #7
 801312e:	ddf2      	ble.n	8013116 <_doTask+0x52>
	    }

	    // Handle the case of bad command.
	    if (status == PIF_LOG_CMD_BAD_CMD) {
 8013130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013136:	d10f      	bne.n	8013158 <_doTask+0x94>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n")) {
 8013138:	e004      	b.n	8013144 <_doTask+0x80>
	    		if (!pifTaskManager_Yield()) break;
 801313a:	f001 fce9 	bl	8014b10 <pifTaskManager_Yield>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d04d      	beq.n	80131e0 <_doTask+0x11c>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n")) {
 8013144:	4b38      	ldr	r3, [pc, #224]	; (8013228 <_doTask+0x164>)
 8013146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013148:	4938      	ldr	r1, [pc, #224]	; (801322c <_doTask+0x168>)
 801314a:	4618      	mov	r0, r3
 801314c:	f000 ff16 	bl	8013f7c <pifRingBuffer_PutString>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d0f1      	beq.n	801313a <_doTask+0x76>
 8013156:	e04a      	b.n	80131ee <_doTask+0x12a>
	    	}
	    }

	    // Handle the case of too many arguments.
	    else if (status == PIF_LOG_CMD_TOO_MANY_ARGS) {
 8013158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315a:	f113 0f02 	cmn.w	r3, #2
 801315e:	d10f      	bne.n	8013180 <_doTask+0xbc>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n")) {
 8013160:	e004      	b.n	801316c <_doTask+0xa8>
	    		if (!pifTaskManager_Yield()) break;
 8013162:	f001 fcd5 	bl	8014b10 <pifTaskManager_Yield>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d03b      	beq.n	80131e4 <_doTask+0x120>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments for command!\n")) {
 801316c:	4b2e      	ldr	r3, [pc, #184]	; (8013228 <_doTask+0x164>)
 801316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013170:	492f      	ldr	r1, [pc, #188]	; (8013230 <_doTask+0x16c>)
 8013172:	4618      	mov	r0, r3
 8013174:	f000 ff02 	bl	8013f7c <pifRingBuffer_PutString>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d0f1      	beq.n	8013162 <_doTask+0x9e>
 801317e:	e036      	b.n	80131ee <_doTask+0x12a>
	    	}
	    }

	    // Handle the case of too few arguments.
	    else if (status == PIF_LOG_CMD_TOO_FEW_ARGS) {
 8013180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013182:	f113 0f03 	cmn.w	r3, #3
 8013186:	d10f      	bne.n	80131a8 <_doTask+0xe4>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n")) {
 8013188:	e004      	b.n	8013194 <_doTask+0xd0>
	    		if (!pifTaskManager_Yield()) break;
 801318a:	f001 fcc1 	bl	8014b10 <pifTaskManager_Yield>
 801318e:	4603      	mov	r3, r0
 8013190:	2b00      	cmp	r3, #0
 8013192:	d029      	beq.n	80131e8 <_doTask+0x124>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments for command!\n")) {
 8013194:	4b24      	ldr	r3, [pc, #144]	; (8013228 <_doTask+0x164>)
 8013196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013198:	4926      	ldr	r1, [pc, #152]	; (8013234 <_doTask+0x170>)
 801319a:	4618      	mov	r0, r3
 801319c:	f000 feee 	bl	8013f7c <pifRingBuffer_PutString>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0f1      	beq.n	801318a <_doTask+0xc6>
 80131a6:	e022      	b.n	80131ee <_doTask+0x12a>
	    	}
	    }

	    // Otherwise the command was executed.  Print the error
	    // code if one was returned.
	    else if (status != PIF_LOG_CMD_NO_ERROR) {
 80131a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d01f      	beq.n	80131ee <_doTask+0x12a>
	    	pif_Printf(msg, "Command returned error code: %d\n", status);
 80131ae:	f107 0308 	add.w	r3, r7, #8
 80131b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131b4:	4920      	ldr	r1, [pc, #128]	; (8013238 <_doTask+0x174>)
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fe fe0c 	bl	8011dd4 <pif_Printf>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, msg)) {
 80131bc:	e004      	b.n	80131c8 <_doTask+0x104>
	    		if (!pifTaskManager_Yield()) break;
 80131be:	f001 fca7 	bl	8014b10 <pifTaskManager_Yield>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d011      	beq.n	80131ec <_doTask+0x128>
	    	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, msg)) {
 80131c8:	4b17      	ldr	r3, [pc, #92]	; (8013228 <_doTask+0x164>)
 80131ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131cc:	f107 0208 	add.w	r2, r7, #8
 80131d0:	4611      	mov	r1, r2
 80131d2:	4618      	mov	r0, r3
 80131d4:	f000 fed2 	bl	8013f7c <pifRingBuffer_PutString>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d0ef      	beq.n	80131be <_doTask+0xfa>
 80131de:	e006      	b.n	80131ee <_doTask+0x12a>
	    		if (!pifTaskManager_Yield()) break;
 80131e0:	bf00      	nop
 80131e2:	e004      	b.n	80131ee <_doTask+0x12a>
	    		if (!pifTaskManager_Yield()) break;
 80131e4:	bf00      	nop
 80131e6:	e002      	b.n	80131ee <_doTask+0x12a>
	    		if (!pifTaskManager_Yield()) break;
 80131e8:	bf00      	nop
 80131ea:	e000      	b.n	80131ee <_doTask+0x12a>
	    		if (!pifTaskManager_Yield()) break;
 80131ec:	bf00      	nop
	    	}
	    }

		s_log.cmd_done = FALSE;
 80131ee:	4b0e      	ldr	r3, [pc, #56]	; (8013228 <_doTask+0x164>)
 80131f0:	2200      	movs	r2, #0
 80131f2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt)) {
 80131f6:	e004      	b.n	8013202 <_doTask+0x13e>
		if (!pifTaskManager_Yield()) break;
 80131f8:	f001 fc8a 	bl	8014b10 <pifTaskManager_Yield>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d00b      	beq.n	801321a <_doTask+0x156>
	while (!pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt)) {
 8013202:	4b09      	ldr	r3, [pc, #36]	; (8013228 <_doTask+0x164>)
 8013204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013206:	4a08      	ldr	r2, [pc, #32]	; (8013228 <_doTask+0x164>)
 8013208:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801320a:	4611      	mov	r1, r2
 801320c:	4618      	mov	r0, r3
 801320e:	f000 feb5 	bl	8013f7c <pifRingBuffer_PutString>
 8013212:	4603      	mov	r3, r0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0ef      	beq.n	80131f8 <_doTask+0x134>
 8013218:	e000      	b.n	801321c <_doTask+0x158>
		if (!pifTaskManager_Yield()) break;
 801321a:	bf00      	nop
	}

	return 0;
 801321c:	2300      	movs	r3, #0
}
 801321e:	4618      	mov	r0, r3
 8013220:	3738      	adds	r7, #56	; 0x38
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	200020f0 	.word	0x200020f0
 801322c:	08026848 	.word	0x08026848
 8013230:	08026860 	.word	0x08026860
 8013234:	08026884 	.word	0x08026884
 8013238:	080268a4 	.word	0x080268a4

0801323c <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 801323c:	b5b0      	push	{r4, r5, r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801324e:	4618      	mov	r0, r3
 8013250:	f000 fd77 	bl	8013d42 <pifRingBuffer_IsEmpty>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d11f      	bne.n	801329a <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	6a1c      	ldr	r4, [r3, #32]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013262:	2100      	movs	r1, #0
 8013264:	4618      	mov	r0, r3
 8013266:	f000 fd40 	bl	8013cea <pifRingBuffer_GetTailPointer>
 801326a:	4605      	mov	r5, r0
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013270:	2100      	movs	r1, #0
 8013272:	4618      	mov	r0, r3
 8013274:	f000 fd9a 	bl	8013dac <pifRingBuffer_GetLinerSize>
 8013278:	4603      	mov	r3, r0
 801327a:	461a      	mov	r2, r3
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	4629      	mov	r1, r5
 8013280:	4620      	mov	r0, r4
 8013282:	4798      	blx	r3
 8013284:	4603      	mov	r3, r0
 8013286:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328c:	897a      	ldrh	r2, [r7, #10]
 801328e:	4611      	mov	r1, r2
 8013290:	4618      	mov	r0, r3
 8013292:	f000 ff32 	bl	80140fa <pifRingBuffer_Remove>
		return TRUE;
 8013296:	2301      	movs	r3, #1
 8013298:	e000      	b.n	801329c <_evtSending+0x60>
	}
	return FALSE;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bdb0      	pop	{r4, r5, r7, pc}

080132a4 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	460b      	mov	r3, r1
 80132ae:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 80132b0:	78fb      	ldrb	r3, [r7, #3]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d109      	bne.n	80132ca <_printLog+0x26>
 80132b6:	4813      	ldr	r0, [pc, #76]	; (8013304 <_printLog+0x60>)
 80132b8:	f000 fd32 	bl	8013d20 <pifRingBuffer_IsBuffer>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d003      	beq.n	80132ca <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 80132c2:	6879      	ldr	r1, [r7, #4]
 80132c4:	480f      	ldr	r0, [pc, #60]	; (8013304 <_printLog+0x60>)
 80132c6:	f000 fe59 	bl	8013f7c <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 80132ca:	4b0f      	ldr	r3, [pc, #60]	; (8013308 <_printLog+0x64>)
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d108      	bne.n	80132e4 <_printLog+0x40>
 80132d2:	78fb      	ldrb	r3, [r7, #3]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d010      	beq.n	80132fa <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80132d8:	e004      	b.n	80132e4 <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 80132da:	f001 fc19 	bl	8014b10 <pifTaskManager_Yield>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d009      	beq.n	80132f8 <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80132e4:	4b08      	ldr	r3, [pc, #32]	; (8013308 <_printLog+0x64>)
 80132e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e8:	6879      	ldr	r1, [r7, #4]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f000 fe46 	bl	8013f7c <pifRingBuffer_PutString>
 80132f0:	4603      	mov	r3, r0
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d0f1      	beq.n	80132da <_printLog+0x36>
        }
	}
}
 80132f6:	e000      	b.n	80132fa <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 80132f8:	bf00      	nop
}
 80132fa:	bf00      	nop
 80132fc:	3708      	adds	r7, #8
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	200020f4 	.word	0x200020f4
 8013308:	200020f0 	.word	0x200020f0

0801330c <_printTime>:

static void _printTime()
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
	int offset = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	607a      	str	r2, [r7, #4]
 801331c:	4a35      	ldr	r2, [pc, #212]	; (80133f4 <_printTime+0xe8>)
 801331e:	210a      	movs	r1, #10
 8013320:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	4a33      	ldr	r2, [pc, #204]	; (80133f4 <_printTime+0xe8>)
 8013326:	4413      	add	r3, r2
 8013328:	4a33      	ldr	r2, [pc, #204]	; (80133f8 <_printTime+0xec>)
 801332a:	7952      	ldrb	r2, [r2, #5]
 801332c:	b2d2      	uxtb	r2, r2
 801332e:	4611      	mov	r1, r2
 8013330:	2202      	movs	r2, #2
 8013332:	4618      	mov	r0, r3
 8013334:	f7fe f968 	bl	8011608 <pif_DecToString>
 8013338:	4602      	mov	r2, r0
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4413      	add	r3, r2
 801333e:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	1c5a      	adds	r2, r3, #1
 8013344:	607a      	str	r2, [r7, #4]
 8013346:	4a2b      	ldr	r2, [pc, #172]	; (80133f4 <_printTime+0xe8>)
 8013348:	212e      	movs	r1, #46	; 0x2e
 801334a:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4a29      	ldr	r2, [pc, #164]	; (80133f4 <_printTime+0xe8>)
 8013350:	4413      	add	r3, r2
 8013352:	4a2a      	ldr	r2, [pc, #168]	; (80133fc <_printTime+0xf0>)
 8013354:	8812      	ldrh	r2, [r2, #0]
 8013356:	b292      	uxth	r2, r2
 8013358:	4611      	mov	r1, r2
 801335a:	2203      	movs	r2, #3
 801335c:	4618      	mov	r0, r3
 801335e:	f7fe f953 	bl	8011608 <pif_DecToString>
 8013362:	4602      	mov	r2, r0
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4413      	add	r3, r2
 8013368:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	1c5a      	adds	r2, r3, #1
 801336e:	607a      	str	r2, [r7, #4]
 8013370:	4a20      	ldr	r2, [pc, #128]	; (80133f4 <_printTime+0xe8>)
 8013372:	2120      	movs	r1, #32
 8013374:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	1c5a      	adds	r2, r3, #1
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	4a1d      	ldr	r2, [pc, #116]	; (80133f4 <_printTime+0xe8>)
 801337e:	2154      	movs	r1, #84	; 0x54
 8013380:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	1c5a      	adds	r2, r3, #1
 8013386:	607a      	str	r2, [r7, #4]
 8013388:	4a1a      	ldr	r2, [pc, #104]	; (80133f4 <_printTime+0xe8>)
 801338a:	2120      	movs	r1, #32
 801338c:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	4a18      	ldr	r2, [pc, #96]	; (80133f4 <_printTime+0xe8>)
 8013392:	4413      	add	r3, r2
 8013394:	4a18      	ldr	r2, [pc, #96]	; (80133f8 <_printTime+0xec>)
 8013396:	78d2      	ldrb	r2, [r2, #3]
 8013398:	b2d2      	uxtb	r2, r2
 801339a:	4611      	mov	r1, r2
 801339c:	2202      	movs	r2, #2
 801339e:	4618      	mov	r0, r3
 80133a0:	f7fe f932 	bl	8011608 <pif_DecToString>
 80133a4:	4602      	mov	r2, r0
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	4413      	add	r3, r2
 80133aa:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	1c5a      	adds	r2, r3, #1
 80133b0:	607a      	str	r2, [r7, #4]
 80133b2:	4a10      	ldr	r2, [pc, #64]	; (80133f4 <_printTime+0xe8>)
 80133b4:	213a      	movs	r1, #58	; 0x3a
 80133b6:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	4a0e      	ldr	r2, [pc, #56]	; (80133f4 <_printTime+0xe8>)
 80133bc:	4413      	add	r3, r2
 80133be:	4a0e      	ldr	r2, [pc, #56]	; (80133f8 <_printTime+0xec>)
 80133c0:	7912      	ldrb	r2, [r2, #4]
 80133c2:	b2d2      	uxtb	r2, r2
 80133c4:	4611      	mov	r1, r2
 80133c6:	2202      	movs	r2, #2
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fe f91d 	bl	8011608 <pif_DecToString>
 80133ce:	4602      	mov	r2, r0
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	4413      	add	r3, r2
 80133d4:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	1c5a      	adds	r2, r3, #1
 80133da:	607a      	str	r2, [r7, #4]
 80133dc:	4a05      	ldr	r2, [pc, #20]	; (80133f4 <_printTime+0xe8>)
 80133de:	2120      	movs	r1, #32
 80133e0:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 80133e2:	2100      	movs	r1, #0
 80133e4:	4803      	ldr	r0, [pc, #12]	; (80133f4 <_printTime+0xe8>)
 80133e6:	f7ff ff5d 	bl	80132a4 <_printLog>
}
 80133ea:	bf00      	nop
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	20002158 	.word	0x20002158
 80133f8:	200020d0 	.word	0x200020d0
 80133fc:	200020ca 	.word	0x200020ca

08013400 <pifLog_Init>:

BOOL pifLog_Init()
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 8013406:	2264      	movs	r2, #100	; 0x64
 8013408:	2100      	movs	r1, #0
 801340a:	480d      	ldr	r0, [pc, #52]	; (8013440 <pifLog_Init+0x40>)
 801340c:	f00e fd76 	bl	8021efc <memset>

	s_log.enable = TRUE;
 8013410:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <pifLog_Init+0x40>)
 8013412:	2201      	movs	r2, #1
 8013414:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, &s_log, FALSE);
 8013416:	2300      	movs	r3, #0
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	4b09      	ldr	r3, [pc, #36]	; (8013440 <pifLog_Init+0x40>)
 801341c:	4a09      	ldr	r2, [pc, #36]	; (8013444 <pifLog_Init+0x44>)
 801341e:	2101      	movs	r1, #1
 8013420:	2002      	movs	r0, #2
 8013422:	f001 fa5d 	bl	80148e0 <pifTaskManager_Add>
 8013426:	4603      	mov	r3, r0
 8013428:	4a05      	ldr	r2, [pc, #20]	; (8013440 <pifLog_Init+0x40>)
 801342a:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 801342c:	4b04      	ldr	r3, [pc, #16]	; (8013440 <pifLog_Init+0x40>)
 801342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013430:	2b00      	cmp	r3, #0
 8013432:	d101      	bne.n	8013438 <pifLog_Init+0x38>
 8013434:	2300      	movs	r3, #0
 8013436:	e000      	b.n	801343a <pifLog_Init+0x3a>
#endif
   	return TRUE;
 8013438:	2301      	movs	r3, #1
}
 801343a:	4618      	mov	r0, r3
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	200020f0 	.word	0x200020f0
 8013444:	080130c5 	.word	0x080130c5

08013448 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d002      	beq.n	801345e <pifLog_UseCommand+0x16>
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d104      	bne.n	8013468 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 801345e:	4b14      	ldr	r3, [pc, #80]	; (80134b0 <pifLog_UseCommand+0x68>)
 8013460:	2201      	movs	r2, #1
 8013462:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013464:	2300      	movs	r3, #0
 8013466:	e01e      	b.n	80134a6 <pifLog_UseCommand+0x5e>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013468:	2120      	movs	r1, #32
 801346a:	2001      	movs	r0, #1
 801346c:	f00e fcf6 	bl	8021e5c <calloc>
 8013470:	4603      	mov	r3, r0
 8013472:	461a      	mov	r2, r3
 8013474:	4b0f      	ldr	r3, [pc, #60]	; (80134b4 <pifLog_UseCommand+0x6c>)
 8013476:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013478:	4b0e      	ldr	r3, [pc, #56]	; (80134b4 <pifLog_UseCommand+0x6c>)
 801347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801347c:	2b00      	cmp	r3, #0
 801347e:	d104      	bne.n	801348a <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 8013480:	4b0b      	ldr	r3, [pc, #44]	; (80134b0 <pifLog_UseCommand+0x68>)
 8013482:	2203      	movs	r2, #3
 8013484:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013486:	2300      	movs	r3, #0
 8013488:	e00d      	b.n	80134a6 <pifLog_UseCommand+0x5e>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 801348a:	4b0a      	ldr	r3, [pc, #40]	; (80134b4 <pifLog_UseCommand+0x6c>)
 801348c:	2220      	movs	r2, #32
 801348e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table[0] = c_cmd_table;
 8013492:	4b08      	ldr	r3, [pc, #32]	; (80134b4 <pifLog_UseCommand+0x6c>)
 8013494:	4a08      	ldr	r2, [pc, #32]	; (80134b8 <pifLog_UseCommand+0x70>)
 8013496:	659a      	str	r2, [r3, #88]	; 0x58
    s_log.p_cmd_table[1] = p_cmd_table;
 8013498:	4a06      	ldr	r2, [pc, #24]	; (80134b4 <pifLog_UseCommand+0x6c>)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	65d3      	str	r3, [r2, #92]	; 0x5c
    s_log.p_prompt = p_prompt;
 801349e:	4a05      	ldr	r2, [pc, #20]	; (80134b4 <pifLog_UseCommand+0x6c>)
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	6613      	str	r3, [r2, #96]	; 0x60
    return TRUE;
 80134a4:	2301      	movs	r3, #1
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	200020c9 	.word	0x200020c9
 80134b4:	200020f0 	.word	0x200020f0
 80134b8:	08028314 	.word	0x08028314

080134bc <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b098      	sub	sp, #96	; 0x60
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	4603      	mov	r3, r0
 80134c4:	6039      	str	r1, [r7, #0]
 80134c6:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 80134c8:	2300      	movs	r3, #0
 80134ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 80134cc:	79fb      	ldrb	r3, [r7, #7]
 80134ce:	2b01      	cmp	r3, #1
 80134d0:	d96b      	bls.n	80135aa <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 80134d2:	4b3d      	ldr	r3, [pc, #244]	; (80135c8 <pifLog_Print+0x10c>)
 80134d4:	791b      	ldrb	r3, [r3, #4]
 80134d6:	b2da      	uxtb	r2, r3
 80134d8:	4b3c      	ldr	r3, [pc, #240]	; (80135cc <pifLog_Print+0x110>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	429a      	cmp	r2, r3
 80134de:	d006      	beq.n	80134ee <pifLog_Print+0x32>
        	_printTime();
 80134e0:	f7ff ff14 	bl	801330c <_printTime>
        	s_minute = pif_datetime.minute;
 80134e4:	4b38      	ldr	r3, [pc, #224]	; (80135c8 <pifLog_Print+0x10c>)
 80134e6:	791b      	ldrb	r3, [r3, #4]
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	4b38      	ldr	r3, [pc, #224]	; (80135cc <pifLog_Print+0x110>)
 80134ec:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80134ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134f0:	1c5a      	adds	r2, r3, #1
 80134f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134f4:	3360      	adds	r3, #96	; 0x60
 80134f6:	443b      	add	r3, r7
 80134f8:	220a      	movs	r2, #10
 80134fa:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80134fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013500:	f107 020c 	add.w	r2, r7, #12
 8013504:	4413      	add	r3, r2
 8013506:	4a30      	ldr	r2, [pc, #192]	; (80135c8 <pifLog_Print+0x10c>)
 8013508:	7952      	ldrb	r2, [r2, #5]
 801350a:	b2d2      	uxtb	r2, r2
 801350c:	4611      	mov	r1, r2
 801350e:	2202      	movs	r2, #2
 8013510:	4618      	mov	r0, r3
 8013512:	f7fe f879 	bl	8011608 <pif_DecToString>
 8013516:	4602      	mov	r2, r0
 8013518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801351a:	4413      	add	r3, r2
 801351c:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 801351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013520:	1c5a      	adds	r2, r3, #1
 8013522:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013524:	3360      	adds	r3, #96	; 0x60
 8013526:	443b      	add	r3, r7
 8013528:	222e      	movs	r2, #46	; 0x2e
 801352a:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 801352e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013530:	f107 020c 	add.w	r2, r7, #12
 8013534:	4413      	add	r3, r2
 8013536:	4a26      	ldr	r2, [pc, #152]	; (80135d0 <pifLog_Print+0x114>)
 8013538:	8812      	ldrh	r2, [r2, #0]
 801353a:	b292      	uxth	r2, r2
 801353c:	4611      	mov	r1, r2
 801353e:	2203      	movs	r2, #3
 8013540:	4618      	mov	r0, r3
 8013542:	f7fe f861 	bl	8011608 <pif_DecToString>
 8013546:	4602      	mov	r2, r0
 8013548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801354a:	4413      	add	r3, r2
 801354c:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 801354e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013550:	1c5a      	adds	r2, r3, #1
 8013552:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013554:	3360      	adds	r3, #96	; 0x60
 8013556:	443b      	add	r3, r7
 8013558:	2220      	movs	r2, #32
 801355a:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 801355e:	79fb      	ldrb	r3, [r7, #7]
 8013560:	1e9a      	subs	r2, r3, #2
 8013562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013564:	1c59      	adds	r1, r3, #1
 8013566:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013568:	491a      	ldr	r1, [pc, #104]	; (80135d4 <pifLog_Print+0x118>)
 801356a:	5c8a      	ldrb	r2, [r1, r2]
 801356c:	3360      	adds	r3, #96	; 0x60
 801356e:	443b      	add	r3, r7
 8013570:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013576:	1c5a      	adds	r2, r3, #1
 8013578:	65fa      	str	r2, [r7, #92]	; 0x5c
 801357a:	3360      	adds	r3, #96	; 0x60
 801357c:	443b      	add	r3, r7
 801357e:	2220      	movs	r2, #32
 8013580:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013584:	f107 020c 	add.w	r2, r7, #12
 8013588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801358a:	4413      	add	r3, r2
 801358c:	2200      	movs	r2, #0
 801358e:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 8013590:	79fb      	ldrb	r3, [r7, #7]
 8013592:	2b01      	cmp	r3, #1
 8013594:	bf0c      	ite	eq
 8013596:	2301      	moveq	r3, #1
 8013598:	2300      	movne	r3, #0
 801359a:	b2db      	uxtb	r3, r3
 801359c:	461a      	mov	r2, r3
 801359e:	f107 030c 	add.w	r3, r7, #12
 80135a2:	4611      	mov	r1, r2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7ff fe7d 	bl	80132a4 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 80135aa:	79fb      	ldrb	r3, [r7, #7]
 80135ac:	2b01      	cmp	r3, #1
 80135ae:	bf0c      	ite	eq
 80135b0:	2301      	moveq	r3, #1
 80135b2:	2300      	movne	r3, #0
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	4619      	mov	r1, r3
 80135b8:	6838      	ldr	r0, [r7, #0]
 80135ba:	f7ff fe73 	bl	80132a4 <_printLog>
}
 80135be:	bf00      	nop
 80135c0:	3760      	adds	r7, #96	; 0x60
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	200020d0 	.word	0x200020d0
 80135cc:	20000068 	.word	0x20000068
 80135d0:	200020ca 	.word	0x200020ca
 80135d4:	08028310 	.word	0x08028310

080135d8 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 80135d8:	b40e      	push	{r1, r2, r3}
 80135da:	b580      	push	{r7, lr}
 80135dc:	b09b      	sub	sp, #108	; 0x6c
 80135de:	af00      	add	r7, sp, #0
 80135e0:	4603      	mov	r3, r0
 80135e2:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 80135e4:	2300      	movs	r3, #0
 80135e6:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d958      	bls.n	80136a0 <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 80135ee:	4b3d      	ldr	r3, [pc, #244]	; (80136e4 <pifLog_Printf+0x10c>)
 80135f0:	791b      	ldrb	r3, [r3, #4]
 80135f2:	b2da      	uxtb	r2, r3
 80135f4:	4b3c      	ldr	r3, [pc, #240]	; (80136e8 <pifLog_Printf+0x110>)
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d006      	beq.n	801360a <pifLog_Printf+0x32>
        	_printTime();
 80135fc:	f7ff fe86 	bl	801330c <_printTime>
        	s_minute = pif_datetime.minute;
 8013600:	4b38      	ldr	r3, [pc, #224]	; (80136e4 <pifLog_Printf+0x10c>)
 8013602:	791b      	ldrb	r3, [r3, #4]
 8013604:	b2da      	uxtb	r2, r3
 8013606:	4b38      	ldr	r3, [pc, #224]	; (80136e8 <pifLog_Printf+0x110>)
 8013608:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 801360a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801360c:	1c5a      	adds	r2, r3, #1
 801360e:	667a      	str	r2, [r7, #100]	; 0x64
 8013610:	3368      	adds	r3, #104	; 0x68
 8013612:	443b      	add	r3, r7
 8013614:	220a      	movs	r2, #10
 8013616:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 801361a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801361c:	f107 020c 	add.w	r2, r7, #12
 8013620:	4413      	add	r3, r2
 8013622:	4a30      	ldr	r2, [pc, #192]	; (80136e4 <pifLog_Printf+0x10c>)
 8013624:	7952      	ldrb	r2, [r2, #5]
 8013626:	b2d2      	uxtb	r2, r2
 8013628:	4611      	mov	r1, r2
 801362a:	2202      	movs	r2, #2
 801362c:	4618      	mov	r0, r3
 801362e:	f7fd ffeb 	bl	8011608 <pif_DecToString>
 8013632:	4602      	mov	r2, r0
 8013634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013636:	4413      	add	r3, r2
 8013638:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 801363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801363c:	1c5a      	adds	r2, r3, #1
 801363e:	667a      	str	r2, [r7, #100]	; 0x64
 8013640:	3368      	adds	r3, #104	; 0x68
 8013642:	443b      	add	r3, r7
 8013644:	222e      	movs	r2, #46	; 0x2e
 8013646:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 801364a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801364c:	f107 020c 	add.w	r2, r7, #12
 8013650:	4413      	add	r3, r2
 8013652:	4a26      	ldr	r2, [pc, #152]	; (80136ec <pifLog_Printf+0x114>)
 8013654:	8812      	ldrh	r2, [r2, #0]
 8013656:	b292      	uxth	r2, r2
 8013658:	4611      	mov	r1, r2
 801365a:	2203      	movs	r2, #3
 801365c:	4618      	mov	r0, r3
 801365e:	f7fd ffd3 	bl	8011608 <pif_DecToString>
 8013662:	4602      	mov	r2, r0
 8013664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013666:	4413      	add	r3, r2
 8013668:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 801366a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801366c:	1c5a      	adds	r2, r3, #1
 801366e:	667a      	str	r2, [r7, #100]	; 0x64
 8013670:	3368      	adds	r3, #104	; 0x68
 8013672:	443b      	add	r3, r7
 8013674:	2220      	movs	r2, #32
 8013676:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 801367a:	79fb      	ldrb	r3, [r7, #7]
 801367c:	1e9a      	subs	r2, r3, #2
 801367e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013680:	1c59      	adds	r1, r3, #1
 8013682:	6679      	str	r1, [r7, #100]	; 0x64
 8013684:	491a      	ldr	r1, [pc, #104]	; (80136f0 <pifLog_Printf+0x118>)
 8013686:	5c8a      	ldrb	r2, [r1, r2]
 8013688:	3368      	adds	r3, #104	; 0x68
 801368a:	443b      	add	r3, r7
 801368c:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 8013690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	667a      	str	r2, [r7, #100]	; 0x64
 8013696:	3368      	adds	r3, #104	; 0x68
 8013698:	443b      	add	r3, r7
 801369a:	2220      	movs	r2, #32
 801369c:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 80136a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80136a4:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 80136a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80136a8:	f107 020c 	add.w	r2, r7, #12
 80136ac:	4413      	add	r3, r2
 80136ae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80136b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fe f933 	bl	8011920 <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 80136ba:	79fb      	ldrb	r3, [r7, #7]
 80136bc:	2b01      	cmp	r3, #1
 80136be:	bf0c      	ite	eq
 80136c0:	2301      	moveq	r3, #1
 80136c2:	2300      	movne	r3, #0
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	461a      	mov	r2, r3
 80136c8:	f107 030c 	add.w	r3, r7, #12
 80136cc:	4611      	mov	r1, r2
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7ff fde8 	bl	80132a4 <_printLog>
}
 80136d4:	bf00      	nop
 80136d6:	376c      	adds	r7, #108	; 0x6c
 80136d8:	46bd      	mov	sp, r7
 80136da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80136de:	b003      	add	sp, #12
 80136e0:	4770      	bx	lr
 80136e2:	bf00      	nop
 80136e4:	200020d0 	.word	0x200020d0
 80136e8:	20000068 	.word	0x20000068
 80136ec:	200020ca 	.word	0x200020ca
 80136f0:	08028310 	.word	0x08028310

080136f4 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 80136fc:	2150      	movs	r1, #80	; 0x50
 80136fe:	2000      	movs	r0, #0
 8013700:	f000 fa3e 	bl	8013b80 <pifRingBuffer_CreateHeap>
 8013704:	4603      	mov	r3, r0
 8013706:	4a0b      	ldr	r2, [pc, #44]	; (8013734 <pifLog_AttachComm+0x40>)
 8013708:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 801370a:	4b0a      	ldr	r3, [pc, #40]	; (8013734 <pifLog_AttachComm+0x40>)
 801370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801370e:	2b00      	cmp	r3, #0
 8013710:	d101      	bne.n	8013716 <pifLog_AttachComm+0x22>
 8013712:	2300      	movs	r3, #0
 8013714:	e009      	b.n	801372a <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 8013716:	4a07      	ldr	r2, [pc, #28]	; (8013734 <pifLog_AttachComm+0x40>)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 801371c:	4b06      	ldr	r3, [pc, #24]	; (8013738 <pifLog_AttachComm+0x44>)
 801371e:	4a07      	ldr	r2, [pc, #28]	; (801373c <pifLog_AttachComm+0x48>)
 8013720:	4904      	ldr	r1, [pc, #16]	; (8013734 <pifLog_AttachComm+0x40>)
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f7fe fd18 	bl	8012158 <pifComm_AttachClient>
    return TRUE;
 8013728:	2301      	movs	r3, #1
}
 801372a:	4618      	mov	r0, r3
 801372c:	3708      	adds	r7, #8
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	200020f0 	.word	0x200020f0
 8013738:	0801323d 	.word	0x0801323d
 801373c:	08013087 	.word	0x08013087

08013740 <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 8013740:	b580      	push	{r7, lr}
 8013742:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 8013744:	4b06      	ldr	r3, [pc, #24]	; (8013760 <pifLog_DetachComm+0x20>)
 8013746:	6a1b      	ldr	r3, [r3, #32]
 8013748:	4618      	mov	r0, r3
 801374a:	f7fe fd1b 	bl	8012184 <pifComm_DetachClient>
	s_log.p_comm = NULL;
 801374e:	4b04      	ldr	r3, [pc, #16]	; (8013760 <pifLog_DetachComm+0x20>)
 8013750:	2200      	movs	r2, #0
 8013752:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 8013754:	4803      	ldr	r0, [pc, #12]	; (8013764 <pifLog_DetachComm+0x24>)
 8013756:	f000 fa3f 	bl	8013bd8 <pifRingBuffer_Destroy>
}
 801375a:	bf00      	nop
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	200020f0 	.word	0x200020f0
 8013764:	20002114 	.word	0x20002114

08013768 <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 8013768:	b580      	push	{r7, lr}
 801376a:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 801376c:	e008      	b.n	8013780 <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 801376e:	4b0a      	ldr	r3, [pc, #40]	; (8013798 <pifLog_SendAndExit+0x30>)
 8013770:	6a1b      	ldr	r3, [r3, #32]
 8013772:	69db      	ldr	r3, [r3, #28]
 8013774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013776:	4a08      	ldr	r2, [pc, #32]	; (8013798 <pifLog_SendAndExit+0x30>)
 8013778:	6a12      	ldr	r2, [r2, #32]
 801377a:	69d2      	ldr	r2, [r2, #28]
 801377c:	4610      	mov	r0, r2
 801377e:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013780:	4b05      	ldr	r3, [pc, #20]	; (8013798 <pifLog_SendAndExit+0x30>)
 8013782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013784:	4618      	mov	r0, r3
 8013786:	f000 faef 	bl	8013d68 <pifRingBuffer_GetFillSize>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d1ee      	bne.n	801376e <pifLog_SendAndExit+0x6>
	}
}
 8013790:	bf00      	nop
 8013792:	bf00      	nop
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	200020f0 	.word	0x200020f0

0801379c <_calcuratePositionModulation>:
	static PifDList s_cs_list;
#endif


static BOOL _calcuratePositionModulation(PifPulse* p_owner, uint16_t diff)
{
 801379c:	b480      	push	{r7}
 801379e:	b085      	sub	sp, #20
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	460b      	mov	r3, r1
 80137a6:	807b      	strh	r3, [r7, #2]
	BOOL rtn = FALSE;
 80137a8:	2300      	movs	r3, #0
 80137aa:	73fb      	strb	r3, [r7, #15]

	if (diff < p_owner->__threshold_1us) {
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80137b2:	887a      	ldrh	r2, [r7, #2]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d23f      	bcs.n	8013838 <_calcuratePositionModulation+0x9c>
		p_owner->_channel++;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	3301      	adds	r3, #1
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	b25a      	sxtb	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	71da      	strb	r2, [r3, #7]
		if (p_owner->_channel < p_owner->__channel_count) {
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137d0:	461a      	mov	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137d8:	429a      	cmp	r2, r3
 80137da:	da30      	bge.n	801383e <_calcuratePositionModulation+0xa2>
			if (p_owner->__valid_range[3].check) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80137e2:	f003 0301 	and.w	r3, r3, #1
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d019      	beq.n	8013820 <_calcuratePositionModulation+0x84>
				if (diff >= p_owner->__valid_range[3].min && diff <= p_owner->__valid_range[3].max) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80137f0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	461a      	mov	r2, r3
 80137f8:	887b      	ldrh	r3, [r7, #2]
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d31f      	bcc.n	801383e <_calcuratePositionModulation+0xa2>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013802:	887a      	ldrh	r2, [r7, #2]
 8013804:	429a      	cmp	r2, r3
 8013806:	d81a      	bhi.n	801383e <_calcuratePositionModulation+0xa2>
					p_owner->__p_position[p_owner->_channel] = diff;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8013812:	005b      	lsls	r3, r3, #1
 8013814:	4413      	add	r3, r2
 8013816:	887a      	ldrh	r2, [r7, #2]
 8013818:	801a      	strh	r2, [r3, #0]
					rtn = TRUE;
 801381a:	2301      	movs	r3, #1
 801381c:	73fb      	strb	r3, [r7, #15]
 801381e:	e00e      	b.n	801383e <_calcuratePositionModulation+0xa2>
				}
			}
			else {
				p_owner->__p_position[p_owner->_channel] = diff;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	4413      	add	r3, r2
 801382e:	887a      	ldrh	r2, [r7, #2]
 8013830:	801a      	strh	r2, [r3, #0]
				rtn = TRUE;
 8013832:	2301      	movs	r3, #1
 8013834:	73fb      	strb	r3, [r7, #15]
 8013836:	e002      	b.n	801383e <_calcuratePositionModulation+0xa2>
			}
		}
	}
	else {
		p_owner->_channel = -1;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	22ff      	movs	r2, #255	; 0xff
 801383c:	71da      	strb	r2, [r3, #7]
	}
	return rtn;
 801383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3714      	adds	r7, #20
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <pifPulse_Init>:
}

#endif	// __PIF_COLLECT_SIGNAL__

BOOL pifPulse_Init(PifPulse* p_owner, PifId id)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
 8013854:	460b      	mov	r3, r1
 8013856:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d104      	bne.n	8013868 <pifPulse_Init+0x1c>
        pif_error = E_INVALID_PARAM;
 801385e:	4b0e      	ldr	r3, [pc, #56]	; (8013898 <pifPulse_Init+0x4c>)
 8013860:	2201      	movs	r2, #1
 8013862:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8013864:	2300      	movs	r3, #0
 8013866:	e012      	b.n	801388e <pifPulse_Init+0x42>
    }

	memset(p_owner, 0, sizeof(PifPulse));
 8013868:	224c      	movs	r2, #76	; 0x4c
 801386a:	2100      	movs	r1, #0
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f00e fb45 	bl	8021efc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8013872:	887b      	ldrh	r3, [r7, #2]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d106      	bne.n	8013886 <pifPulse_Init+0x3a>
 8013878:	4b08      	ldr	r3, [pc, #32]	; (801389c <pifPulse_Init+0x50>)
 801387a:	881b      	ldrh	r3, [r3, #0]
 801387c:	1c5a      	adds	r2, r3, #1
 801387e:	b291      	uxth	r1, r2
 8013880:	4a06      	ldr	r2, [pc, #24]	; (801389c <pifPulse_Init+0x50>)
 8013882:	8011      	strh	r1, [r2, #0]
 8013884:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	887a      	ldrh	r2, [r7, #2]
 801388a:	809a      	strh	r2, [r3, #4]
	PifPulseColSig* p_colsig = pifDList_AddLast(&s_cs_list, sizeof(PifPulseColSig));
	if (!p_colsig) goto fail;
	p_colsig->p_owner = p_owner;
	p_owner->__p_colsig = p_colsig;
#endif
    return TRUE;
 801388c:	2301      	movs	r3, #1
#ifdef __PIF_COLLECT_SIGNAL__
fail:
	pifPulse_Clear(p_owner);
    return FALSE;
#endif
}
 801388e:	4618      	mov	r0, r3
 8013890:	3708      	adds	r7, #8
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	200020c9 	.word	0x200020c9
 801389c:	2000005c 	.word	0x2000005c

080138a0 <pifPulse_SetPositionMode>:
{
	p_owner->_measure_mode &= ~measure_mode;
}

BOOL pifPulse_SetPositionMode(PifPulse* p_owner, uint8_t channel_count, uint16_t threshold_1us, uint16_t* p_value)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b085      	sub	sp, #20
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	607b      	str	r3, [r7, #4]
 80138aa:	460b      	mov	r3, r1
 80138ac:	72fb      	strb	r3, [r7, #11]
 80138ae:	4613      	mov	r3, r2
 80138b0:	813b      	strh	r3, [r7, #8]
    if (p_owner->_measure_mode & PIF_PMM_EDGE_MASK) {
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	799b      	ldrb	r3, [r3, #6]
 80138b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d004      	beq.n	80138c8 <pifPulse_SetPositionMode+0x28>
		pif_error = E_INVALID_PARAM;
 80138be:	4b0f      	ldr	r3, [pc, #60]	; (80138fc <pifPulse_SetPositionMode+0x5c>)
 80138c0:	2201      	movs	r2, #1
 80138c2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80138c4:	2300      	movs	r3, #0
 80138c6:	e012      	b.n	80138ee <pifPulse_SetPositionMode+0x4e>
    }

	p_owner->__channel_count = channel_count;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	7afa      	ldrb	r2, [r7, #11]
 80138cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    p_owner->__threshold_1us = threshold_1us;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	893a      	ldrh	r2, [r7, #8]
 80138d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_owner->__p_position = p_value;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	645a      	str	r2, [r3, #68]	; 0x44
    p_owner->_measure_mode |= PIF_PMM_TICK_POSITION;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	799b      	ldrb	r3, [r3, #6]
 80138e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138e6:	b2da      	uxtb	r2, r3
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	719a      	strb	r2, [r3, #6]
    return TRUE;
 80138ec:	2301      	movs	r3, #1
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3714      	adds	r7, #20
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop
 80138fc:	200020c9 	.word	0x200020c9

08013900 <pifPulse_SetValidRange>:

BOOL pifPulse_SetValidRange(PifPulse* p_owner, uint8_t measure_mode, uint32_t min, uint32_t max)
{
 8013900:	b480      	push	{r7}
 8013902:	b087      	sub	sp, #28
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	607a      	str	r2, [r7, #4]
 801390a:	603b      	str	r3, [r7, #0]
 801390c:	460b      	mov	r3, r1
 801390e:	72fb      	strb	r3, [r7, #11]
	int index = -1;
 8013910:	f04f 33ff 	mov.w	r3, #4294967295
 8013914:	617b      	str	r3, [r7, #20]

	switch (measure_mode) {
 8013916:	7afb      	ldrb	r3, [r7, #11]
 8013918:	2b40      	cmp	r3, #64	; 0x40
 801391a:	d013      	beq.n	8013944 <pifPulse_SetValidRange+0x44>
 801391c:	2b40      	cmp	r3, #64	; 0x40
 801391e:	dc14      	bgt.n	801394a <pifPulse_SetValidRange+0x4a>
 8013920:	2b20      	cmp	r3, #32
 8013922:	d00c      	beq.n	801393e <pifPulse_SetValidRange+0x3e>
 8013924:	2b20      	cmp	r3, #32
 8013926:	dc10      	bgt.n	801394a <pifPulse_SetValidRange+0x4a>
 8013928:	2b01      	cmp	r3, #1
 801392a:	d002      	beq.n	8013932 <pifPulse_SetValidRange+0x32>
 801392c:	2b10      	cmp	r3, #16
 801392e:	d003      	beq.n	8013938 <pifPulse_SetValidRange+0x38>
 8013930:	e00b      	b.n	801394a <pifPulse_SetValidRange+0x4a>
	case PIF_PMM_COMMON_PERIOD:
		index = 0;
 8013932:	2300      	movs	r3, #0
 8013934:	617b      	str	r3, [r7, #20]
		break;
 8013936:	e008      	b.n	801394a <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_EDGE_LOW_WIDTH:
		index = 1;
 8013938:	2301      	movs	r3, #1
 801393a:	617b      	str	r3, [r7, #20]
		break;
 801393c:	e005      	b.n	801394a <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_EDGE_HIGH_WIDTH:
		index = 2;
 801393e:	2302      	movs	r3, #2
 8013940:	617b      	str	r3, [r7, #20]
		break;
 8013942:	e002      	b.n	801394a <pifPulse_SetValidRange+0x4a>

	case PIF_PMM_TICK_POSITION:
		index = 3;
 8013944:	2303      	movs	r3, #3
 8013946:	617b      	str	r3, [r7, #20]
		break;
 8013948:	bf00      	nop
	}
	if (index < 0) {
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	2b00      	cmp	r3, #0
 801394e:	da04      	bge.n	801395a <pifPulse_SetValidRange+0x5a>
		pif_error = E_INVALID_PARAM;
 8013950:	4b15      	ldr	r3, [pc, #84]	; (80139a8 <pifPulse_SetValidRange+0xa8>)
 8013952:	2201      	movs	r2, #1
 8013954:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013956:	2300      	movs	r3, #0
 8013958:	e01f      	b.n	801399a <pifPulse_SetValidRange+0x9a>
	}
	p_owner->__valid_range[index].check = TRUE;
 801395a:	68fa      	ldr	r2, [r7, #12]
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	330a      	adds	r3, #10
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	4413      	add	r3, r2
 8013964:	791a      	ldrb	r2, [r3, #4]
 8013966:	f042 0201 	orr.w	r2, r2, #1
 801396a:	711a      	strb	r2, [r3, #4]
	p_owner->__valid_range[index].min = min;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013972:	b299      	uxth	r1, r3
 8013974:	68fa      	ldr	r2, [r7, #12]
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	330a      	adds	r3, #10
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	4413      	add	r3, r2
 801397e:	889a      	ldrh	r2, [r3, #4]
 8013980:	f361 024f 	bfi	r2, r1, #1, #15
 8013984:	809a      	strh	r2, [r3, #4]
	p_owner->__valid_range[index].max = max;
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	b299      	uxth	r1, r3
 801398a:	68fa      	ldr	r2, [r7, #12]
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	330a      	adds	r3, #10
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	4413      	add	r3, r2
 8013994:	460a      	mov	r2, r1
 8013996:	80da      	strh	r2, [r3, #6]
	return TRUE;
 8013998:	2301      	movs	r3, #1
}
 801399a:	4618      	mov	r0, r3
 801399c:	371c      	adds	r7, #28
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop
 80139a8:	200020c9 	.word	0x200020c9

080139ac <pifPulse_sigTick>:

	return rtn;
}

uint8_t pifPulse_sigTick(PifPulse* p_owner, uint32_t time_us)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
	uint8_t rtn = 0;
 80139b6:	2300      	movs	r3, #0
 80139b8:	73fb      	strb	r3, [r7, #15]

	p_owner->__data[p_owner->__ptr].falling = time_us;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	3301      	adds	r3, #1
 80139c4:	00db      	lsls	r3, r3, #3
 80139c6:	4413      	add	r3, r2
 80139c8:	683a      	ldr	r2, [r7, #0]
 80139ca:	605a      	str	r2, [r3, #4]
	if (p_owner->_measure_mode & PIF_PMM_COMMON_COUNT) {
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	799b      	ldrb	r3, [r3, #6]
 80139d0:	f003 0302 	and.w	r3, r3, #2
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d004      	beq.n	80139e2 <pifPulse_sigTick+0x36>
		p_owner->falling_count++;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	1c5a      	adds	r2, r3, #1
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	601a      	str	r2, [r3, #0]
	}
	if (p_owner->_measure_mode & PIF_PMM_TICK_POSITION) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	799b      	ldrb	r3, [r3, #6]
 80139e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d01f      	beq.n	8013a2e <pifPulse_sigTick+0x82>
		rtn |= _calcuratePositionModulation(p_owner, p_owner->__data[p_owner->__ptr].falling - p_owner->__data[p_owner->__last_ptr].falling) << 4;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	3301      	adds	r3, #1
 80139f8:	00db      	lsls	r3, r3, #3
 80139fa:	4413      	add	r3, r2
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013a06:	6879      	ldr	r1, [r7, #4]
 8013a08:	3301      	adds	r3, #1
 8013a0a:	00db      	lsls	r3, r3, #3
 8013a0c:	440b      	add	r3, r1
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	1ad3      	subs	r3, r2, r3
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4619      	mov	r1, r3
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff febf 	bl	801379c <_calcuratePositionModulation>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	011b      	lsls	r3, r3, #4
 8013a22:	b25a      	sxtb	r2, r3
 8013a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	b25b      	sxtb	r3, r3
 8013a2c:	73fb      	strb	r3, [r7, #15]
	}
	p_owner->__last_ptr = p_owner->__ptr;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_PULSE_DATA_MASK;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a40:	3301      	adds	r3, #1
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	f003 0303 	and.w	r3, r3, #3
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if (p_owner->__count < PIF_PULSE_DATA_SIZE) p_owner->__count++;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013a56:	2b03      	cmp	r3, #3
 8013a58:	d807      	bhi.n	8013a6a <pifPulse_sigTick+0xbe>
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013a60:	3301      	adds	r3, #1
 8013a62:	b2da      	uxtb	r2, r3
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (p_owner->__evt.tick) {
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d005      	beq.n	8013a7e <pifPulse_sigTick+0xd2>
		(*p_owner->__evt.tick)(p_owner->__p_issuer);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013a7a:	4610      	mov	r0, r2
 8013a7c:	4798      	blx	r3
	}

	return rtn;
 8013a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3710      	adds	r7, #16
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	460b      	mov	r3, r1
 8013a92:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	791b      	ldrb	r3, [r3, #4]
 8013a98:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d002      	beq.n	8013aa8 <_chopOff+0x20>
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d02e      	beq.n	8013b04 <_chopOff+0x7c>
 8013aa6:	e065      	b.n	8013b74 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	8adb      	ldrh	r3, [r3, #22]
 8013ab0:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 8013ab2:	e021      	b.n	8013af8 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	691a      	ldr	r2, [r3, #16]
 8013ab8:	89bb      	ldrh	r3, [r7, #12]
 8013aba:	4413      	add	r3, r2
 8013abc:	781a      	ldrb	r2, [r3, #0]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	7e9b      	ldrb	r3, [r3, #26]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d108      	bne.n	8013ad8 <_chopOff+0x50>
				if (size > count) {
 8013ac6:	89fa      	ldrh	r2, [r7, #14]
 8013ac8:	887b      	ldrh	r3, [r7, #2]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d904      	bls.n	8013ad8 <_chopOff+0x50>
					p_owner->__tail = tail;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	89ba      	ldrh	r2, [r7, #12]
 8013ad2:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	e04e      	b.n	8013b76 <_chopOff+0xee>
				}
			}
			tail++;
 8013ad8:	89bb      	ldrh	r3, [r7, #12]
 8013ada:	3301      	adds	r3, #1
 8013adc:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	891b      	ldrh	r3, [r3, #8]
 8013ae2:	89ba      	ldrh	r2, [r7, #12]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d304      	bcc.n	8013af2 <_chopOff+0x6a>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	891b      	ldrh	r3, [r3, #8]
 8013aec:	89ba      	ldrh	r2, [r7, #12]
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	81bb      	strh	r3, [r7, #12]
			size++;
 8013af2:	89fb      	ldrh	r3, [r7, #14]
 8013af4:	3301      	adds	r3, #1
 8013af6:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	8a9b      	ldrh	r3, [r3, #20]
 8013afc:	89ba      	ldrh	r2, [r7, #12]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d1d8      	bne.n	8013ab4 <_chopOff+0x2c>
		}
		break;
 8013b02:	e037      	b.n	8013b74 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f000 f92f 	bl	8013d68 <pifRingBuffer_GetFillSize>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	8b5b      	ldrh	r3, [r3, #26]
 8013b12:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013b14:	e004      	b.n	8013b20 <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	8b5a      	ldrh	r2, [r3, #26]
 8013b1a:	89fb      	ldrh	r3, [r7, #14]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013b20:	887a      	ldrh	r2, [r7, #2]
 8013b22:	89fb      	ldrh	r3, [r7, #14]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d8f6      	bhi.n	8013b16 <_chopOff+0x8e>
		}
		if (size < length) {
 8013b28:	89fa      	ldrh	r2, [r7, #14]
 8013b2a:	897b      	ldrh	r3, [r7, #10]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d216      	bcs.n	8013b5e <_chopOff+0xd6>
			p_owner->__tail += size;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	8ada      	ldrh	r2, [r3, #22]
 8013b34:	89fb      	ldrh	r3, [r7, #14]
 8013b36:	4413      	add	r3, r2
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	8ada      	ldrh	r2, [r3, #22]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	891b      	ldrh	r3, [r3, #8]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d307      	bcc.n	8013b5a <_chopOff+0xd2>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8ada      	ldrh	r2, [r3, #22]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	891b      	ldrh	r3, [r3, #8]
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e00b      	b.n	8013b76 <_chopOff+0xee>
		}
		else if (count <= length) {
 8013b5e:	887a      	ldrh	r2, [r7, #2]
 8013b60:	897b      	ldrh	r3, [r7, #10]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d805      	bhi.n	8013b72 <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8a9a      	ldrh	r2, [r3, #20]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e001      	b.n	8013b76 <_chopOff+0xee>
		}
		break;
 8013b72:	bf00      	nop
	}
	return FALSE;
 8013b74:	2300      	movs	r3, #0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
	...

08013b80 <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b084      	sub	sp, #16
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	4603      	mov	r3, r0
 8013b88:	460a      	mov	r2, r1
 8013b8a:	80fb      	strh	r3, [r7, #6]
 8013b8c:	4613      	mov	r3, r2
 8013b8e:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013b90:	201c      	movs	r0, #28
 8013b92:	f00e f995 	bl	8021ec0 <malloc>
 8013b96:	4603      	mov	r3, r0
 8013b98:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d104      	bne.n	8013baa <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013ba0:	4b0c      	ldr	r3, [pc, #48]	; (8013bd4 <pifRingBuffer_CreateHeap+0x54>)
 8013ba2:	2203      	movs	r2, #3
 8013ba4:	701a      	strb	r2, [r3, #0]
		return NULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	e010      	b.n	8013bcc <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	88ba      	ldrh	r2, [r7, #4]
 8013bae:	88f9      	ldrh	r1, [r7, #6]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 f829 	bl	8013c08 <pifRingBuffer_InitHeap>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d106      	bne.n	8013bca <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013bbc:	f107 030c 	add.w	r3, r7, #12
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f000 f809 	bl	8013bd8 <pifRingBuffer_Destroy>
		return NULL;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	e000      	b.n	8013bcc <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 8013bca:	68fb      	ldr	r3, [r7, #12]
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3710      	adds	r7, #16
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	200020c9 	.word	0x200020c9

08013bd8 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d00c      	beq.n	8013c00 <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	4618      	mov	r0, r3
 8013bec:	f000 f854 	bl	8013c98 <pifRingBuffer_Clear>
		free(*pp_owner);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f00e f96b 	bl	8021ed0 <free>
		*pp_owner = NULL;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	601a      	str	r2, [r3, #0]
	}
}
 8013c00:	bf00      	nop
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	460b      	mov	r3, r1
 8013c12:	807b      	strh	r3, [r7, #2]
 8013c14:	4613      	mov	r3, r2
 8013c16:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d002      	beq.n	8013c24 <pifRingBuffer_InitHeap+0x1c>
 8013c1e:	883b      	ldrh	r3, [r7, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d104      	bne.n	8013c2e <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013c24:	4b1a      	ldr	r3, [pc, #104]	; (8013c90 <pifRingBuffer_InitHeap+0x88>)
 8013c26:	2201      	movs	r2, #1
 8013c28:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	e02b      	b.n	8013c86 <pifRingBuffer_InitHeap+0x7e>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013c2e:	221c      	movs	r2, #28
 8013c30:	2100      	movs	r1, #0
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f00e f962 	bl	8021efc <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013c38:	883b      	ldrh	r3, [r7, #0]
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	2001      	movs	r0, #1
 8013c3e:	f00e f90d 	bl	8021e5c <calloc>
 8013c42:	4603      	mov	r3, r0
 8013c44:	461a      	mov	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	691b      	ldr	r3, [r3, #16]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d108      	bne.n	8013c64 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 8013c52:	4b0f      	ldr	r3, [pc, #60]	; (8013c90 <pifRingBuffer_InitHeap+0x88>)
 8013c54:	2203      	movs	r2, #3
 8013c56:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013c58:	bf00      	nop
	p_owner->_id = id;
    p_owner->_size = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 f81c 	bl	8013c98 <pifRingBuffer_Clear>
    return FALSE;
 8013c60:	2300      	movs	r3, #0
 8013c62:	e010      	b.n	8013c86 <pifRingBuffer_InitHeap+0x7e>
	if (id == PIF_ID_AUTO) id = pif_id++;
 8013c64:	887b      	ldrh	r3, [r7, #2]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <pifRingBuffer_InitHeap+0x70>
 8013c6a:	4b0a      	ldr	r3, [pc, #40]	; (8013c94 <pifRingBuffer_InitHeap+0x8c>)
 8013c6c:	881b      	ldrh	r3, [r3, #0]
 8013c6e:	1c5a      	adds	r2, r3, #1
 8013c70:	b291      	uxth	r1, r2
 8013c72:	4a08      	ldr	r2, [pc, #32]	; (8013c94 <pifRingBuffer_InitHeap+0x8c>)
 8013c74:	8011      	strh	r1, [r2, #0]
 8013c76:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	887a      	ldrh	r2, [r7, #2]
 8013c7c:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	883a      	ldrh	r2, [r7, #0]
 8013c82:	811a      	strh	r2, [r3, #8]
    return TRUE;
 8013c84:	2301      	movs	r3, #1
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	200020c9 	.word	0x200020c9
 8013c94:	2000005c 	.word	0x2000005c

08013c98 <pifRingBuffer_Clear>:
    p_owner->_size = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	791b      	ldrb	r3, [r3, #4]
 8013ca4:	f003 0301 	and.w	r3, r3, #1
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d108      	bne.n	8013cc0 <pifRingBuffer_Clear+0x28>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	691b      	ldr	r3, [r3, #16]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d004      	beq.n	8013cc0 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	691b      	ldr	r3, [r3, #16]
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f00e f908 	bl	8021ed0 <free>
    }
    p_owner->__p_buffer = NULL;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	611a      	str	r2, [r3, #16]
}
 8013cc6:	bf00      	nop
 8013cc8:	3708      	adds	r7, #8
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8013cce:	b480      	push	{r7}
 8013cd0:	b083      	sub	sp, #12
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
 8013cd6:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	60da      	str	r2, [r3, #12]
}
 8013cde:	bf00      	nop
 8013ce0:	370c      	adds	r7, #12
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce8:	4770      	bx	lr

08013cea <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8013cea:	b480      	push	{r7}
 8013cec:	b083      	sub	sp, #12
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6919      	ldr	r1, [r3, #16]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	8adb      	ldrh	r3, [r3, #22]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	887b      	ldrh	r3, [r7, #2]
 8013d02:	4413      	add	r3, r2
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	8912      	ldrh	r2, [r2, #8]
 8013d08:	fb93 f0f2 	sdiv	r0, r3, r2
 8013d0c:	fb00 f202 	mul.w	r2, r0, r2
 8013d10:	1a9b      	subs	r3, r3, r2
 8013d12:	440b      	add	r3, r1
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	bf14      	ite	ne
 8013d30:	2301      	movne	r3, #1
 8013d32:	2300      	moveq	r3, #0
 8013d34:	b2db      	uxtb	r3, r3
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	370c      	adds	r7, #12
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr

08013d42 <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013d42:	b480      	push	{r7}
 8013d44:	b083      	sub	sp, #12
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8a9a      	ldrh	r2, [r3, #20]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	8adb      	ldrh	r3, [r3, #22]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	bf0c      	ite	eq
 8013d56:	2301      	moveq	r3, #1
 8013d58:	2300      	movne	r3, #0
 8013d5a:	b2db      	uxtb	r3, r3
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b085      	sub	sp, #20
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	8a9a      	ldrh	r2, [r3, #20]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	8adb      	ldrh	r3, [r3, #22]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d306      	bcc.n	8013d8a <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	8a9a      	ldrh	r2, [r3, #20]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	8adb      	ldrh	r3, [r3, #22]
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	81fb      	strh	r3, [r7, #14]
 8013d88:	e009      	b.n	8013d9e <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	891a      	ldrh	r2, [r3, #8]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	8adb      	ldrh	r3, [r3, #22]
 8013d92:	1ad3      	subs	r3, r2, r3
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	8a9b      	ldrh	r3, [r3, #20]
 8013d9a:	4413      	add	r3, r2
 8013d9c:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 8013d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3714      	adds	r7, #20
 8013da4:	46bd      	mov	sp, r7
 8013da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013daa:	4770      	bx	lr

08013dac <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b085      	sub	sp, #20
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	460b      	mov	r3, r1
 8013db6:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	8adb      	ldrh	r3, [r3, #22]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	887b      	ldrh	r3, [r7, #2]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	8912      	ldrh	r2, [r2, #8]
 8013dc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8013dca:	fb01 f202 	mul.w	r2, r1, r2
 8013dce:	1a9b      	subs	r3, r3, r2
 8013dd0:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8a9b      	ldrh	r3, [r3, #20]
 8013dd6:	89fa      	ldrh	r2, [r7, #14]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d805      	bhi.n	8013de8 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8a9a      	ldrh	r2, [r3, #20]
 8013de0:	89fb      	ldrh	r3, [r7, #14]
 8013de2:	1ad3      	subs	r3, r2, r3
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	e004      	b.n	8013df2 <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	891a      	ldrh	r2, [r3, #8]
 8013dec:	89fb      	ldrh	r3, [r7, #14]
 8013dee:	1ad3      	subs	r3, r2, r3
 8013df0:	b29b      	uxth	r3, r3
    }
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3714      	adds	r7, #20
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr

08013dfe <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013dfe:	b480      	push	{r7}
 8013e00:	b085      	sub	sp, #20
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	8a9a      	ldrh	r2, [r3, #20]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8adb      	ldrh	r3, [r3, #22]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d206      	bcs.n	8013e20 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	8ada      	ldrh	r2, [r3, #22]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	8a9b      	ldrh	r3, [r3, #20]
 8013e1a:	1ad3      	subs	r3, r2, r3
 8013e1c:	81fb      	strh	r3, [r7, #14]
 8013e1e:	e009      	b.n	8013e34 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	891a      	ldrh	r2, [r3, #8]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	8a9b      	ldrh	r3, [r3, #20]
 8013e28:	1ad3      	subs	r3, r2, r3
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8adb      	ldrh	r3, [r3, #22]
 8013e30:	4413      	add	r3, r2
 8013e32:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013e34:	89fb      	ldrh	r3, [r7, #14]
 8013e36:	3b01      	subs	r3, #1
 8013e38:	b29b      	uxth	r3, r3
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <pifRingBuffer_BackupHead>:

void pifRingBuffer_BackupHead(PifRingBuffer* p_owner)
{
 8013e46:	b480      	push	{r7}
 8013e48:	b083      	sub	sp, #12
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->__head;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	8a9a      	ldrh	r2, [r3, #20]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	831a      	strh	r2, [r3, #24]
}
 8013e56:	bf00      	nop
 8013e58:	370c      	adds	r7, #12
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e60:	4770      	bx	lr

08013e62 <pifRingBuffer_RestoreHead>:

void pifRingBuffer_RestoreHead(PifRingBuffer* p_owner)
{
 8013e62:	b480      	push	{r7}
 8013e64:	b083      	sub	sp, #12
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	8b1a      	ldrh	r2, [r3, #24]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	829a      	strh	r2, [r3, #20]
}
 8013e72:	bf00      	nop
 8013e74:	370c      	adds	r7, #12
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr
	...

08013e80 <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	8a9b      	ldrh	r3, [r3, #20]
 8013e90:	3301      	adds	r3, #1
 8013e92:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	891b      	ldrh	r3, [r3, #8]
 8013e98:	89fa      	ldrh	r2, [r7, #14]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d301      	bcc.n	8013ea2 <pifRingBuffer_PutByte+0x22>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	8adb      	ldrh	r3, [r3, #22]
 8013ea6:	89fa      	ldrh	r2, [r7, #14]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d10b      	bne.n	8013ec4 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013eac:	2101      	movs	r1, #1
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f7ff fdea 	bl	8013a88 <_chopOff>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d104      	bne.n	8013ec4 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013eba:	4b0a      	ldr	r3, [pc, #40]	; (8013ee4 <pifRingBuffer_PutByte+0x64>)
 8013ebc:	2204      	movs	r2, #4
 8013ebe:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	e00a      	b.n	8013eda <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	8a92      	ldrh	r2, [r2, #20]
 8013ecc:	4413      	add	r3, r2
 8013ece:	78fa      	ldrb	r2, [r7, #3]
 8013ed0:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	89fa      	ldrh	r2, [r7, #14]
 8013ed6:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013ed8:	2301      	movs	r3, #1
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	200020c9 	.word	0x200020c9

08013ee8 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b086      	sub	sp, #24
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	4613      	mov	r3, r2
 8013ef4:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	f7ff ff81 	bl	8013dfe <pifRingBuffer_GetRemainSize>
 8013efc:	4603      	mov	r3, r0
 8013efe:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013f00:	88fa      	ldrh	r2, [r7, #6]
 8013f02:	8abb      	ldrh	r3, [r7, #20]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d90f      	bls.n	8013f28 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013f08:	88fa      	ldrh	r2, [r7, #6]
 8013f0a:	8abb      	ldrh	r3, [r7, #20]
 8013f0c:	1ad3      	subs	r3, r2, r3
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	4619      	mov	r1, r3
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f7ff fdb8 	bl	8013a88 <_chopOff>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d104      	bne.n	8013f28 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013f1e:	4b16      	ldr	r3, [pc, #88]	; (8013f78 <pifRingBuffer_PutData+0x90>)
 8013f20:	2204      	movs	r2, #4
 8013f22:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013f24:	2300      	movs	r3, #0
 8013f26:	e023      	b.n	8013f70 <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013f28:	2300      	movs	r3, #0
 8013f2a:	82fb      	strh	r3, [r7, #22]
 8013f2c:	e01b      	b.n	8013f66 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013f2e:	8afb      	ldrh	r3, [r7, #22]
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	441a      	add	r2, r3
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	691b      	ldr	r3, [r3, #16]
 8013f38:	68f9      	ldr	r1, [r7, #12]
 8013f3a:	8a89      	ldrh	r1, [r1, #20]
 8013f3c:	440b      	add	r3, r1
 8013f3e:	7812      	ldrb	r2, [r2, #0]
 8013f40:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	8a9b      	ldrh	r3, [r3, #20]
 8013f46:	3301      	adds	r3, #1
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	8a9a      	ldrh	r2, [r3, #20]
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	891b      	ldrh	r3, [r3, #8]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d302      	bcc.n	8013f60 <pifRingBuffer_PutData+0x78>
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013f60:	8afb      	ldrh	r3, [r7, #22]
 8013f62:	3301      	adds	r3, #1
 8013f64:	82fb      	strh	r3, [r7, #22]
 8013f66:	8afa      	ldrh	r2, [r7, #22]
 8013f68:	88fb      	ldrh	r3, [r7, #6]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d3df      	bcc.n	8013f2e <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013f6e:	2301      	movs	r3, #1
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3718      	adds	r7, #24
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	200020c9 	.word	0x200020c9

08013f7c <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7ff ff39 	bl	8013dfe <pifRingBuffer_GetRemainSize>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013f90:	6838      	ldr	r0, [r7, #0]
 8013f92:	f7ec f92b 	bl	80001ec <strlen>
 8013f96:	4603      	mov	r3, r0
 8013f98:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013f9a:	897a      	ldrh	r2, [r7, #10]
 8013f9c:	89bb      	ldrh	r3, [r7, #12]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d90f      	bls.n	8013fc2 <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013fa2:	897a      	ldrh	r2, [r7, #10]
 8013fa4:	89bb      	ldrh	r3, [r7, #12]
 8013fa6:	1ad3      	subs	r3, r2, r3
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	4619      	mov	r1, r3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7ff fd6b 	bl	8013a88 <_chopOff>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d104      	bne.n	8013fc2 <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013fb8:	4b16      	ldr	r3, [pc, #88]	; (8014014 <pifRingBuffer_PutString+0x98>)
 8013fba:	2204      	movs	r2, #4
 8013fbc:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	e023      	b.n	801400a <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	81fb      	strh	r3, [r7, #14]
 8013fc6:	e01b      	b.n	8014000 <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013fc8:	89fb      	ldrh	r3, [r7, #14]
 8013fca:	683a      	ldr	r2, [r7, #0]
 8013fcc:	441a      	add	r2, r3
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	691b      	ldr	r3, [r3, #16]
 8013fd2:	6879      	ldr	r1, [r7, #4]
 8013fd4:	8a89      	ldrh	r1, [r1, #20]
 8013fd6:	440b      	add	r3, r1
 8013fd8:	7812      	ldrb	r2, [r2, #0]
 8013fda:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	8a9b      	ldrh	r3, [r3, #20]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	b29a      	uxth	r2, r3
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	8a9a      	ldrh	r2, [r3, #20]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	891b      	ldrh	r3, [r3, #8]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d302      	bcc.n	8013ffa <pifRingBuffer_PutString+0x7e>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013ffa:	89fb      	ldrh	r3, [r7, #14]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	81fb      	strh	r3, [r7, #14]
 8014000:	89fa      	ldrh	r2, [r7, #14]
 8014002:	897b      	ldrh	r3, [r7, #10]
 8014004:	429a      	cmp	r2, r3
 8014006:	d3df      	bcc.n	8013fc8 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8014008:	2301      	movs	r3, #1
}
 801400a:	4618      	mov	r0, r3
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
 8014012:	bf00      	nop
 8014014:	200020c9 	.word	0x200020c9

08014018 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	8ada      	ldrh	r2, [r3, #22]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	8a9b      	ldrh	r3, [r3, #20]
 801402a:	429a      	cmp	r2, r3
 801402c:	d101      	bne.n	8014032 <pifRingBuffer_GetByte+0x1a>
 801402e:	2300      	movs	r3, #0
 8014030:	e017      	b.n	8014062 <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	691b      	ldr	r3, [r3, #16]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	8ad2      	ldrh	r2, [r2, #22]
 801403a:	4413      	add	r3, r2
 801403c:	781a      	ldrb	r2, [r3, #0]
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	8adb      	ldrh	r3, [r3, #22]
 8014046:	3301      	adds	r3, #1
 8014048:	b29a      	uxth	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	8ada      	ldrh	r2, [r3, #22]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	891b      	ldrh	r3, [r3, #8]
 8014056:	429a      	cmp	r2, r3
 8014058:	d302      	bcc.n	8014060 <pifRingBuffer_GetByte+0x48>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2200      	movs	r2, #0
 801405e:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8014060:	2301      	movs	r3, #1
}
 8014062:	4618      	mov	r0, r3
 8014064:	370c      	adds	r7, #12
 8014066:	46bd      	mov	sp, r7
 8014068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406c:	4770      	bx	lr

0801406e <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 801406e:	b480      	push	{r7}
 8014070:	b087      	sub	sp, #28
 8014072:	af00      	add	r7, sp, #0
 8014074:	60f8      	str	r0, [r7, #12]
 8014076:	607a      	str	r2, [r7, #4]
 8014078:	461a      	mov	r2, r3
 801407a:	460b      	mov	r3, r1
 801407c:	817b      	strh	r3, [r7, #10]
 801407e:	4613      	mov	r3, r2
 8014080:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	8ada      	ldrh	r2, [r3, #22]
 8014086:	893b      	ldrh	r3, [r7, #8]
 8014088:	4413      	add	r3, r2
 801408a:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	891b      	ldrh	r3, [r3, #8]
 8014090:	8afa      	ldrh	r2, [r7, #22]
 8014092:	429a      	cmp	r2, r3
 8014094:	d304      	bcc.n	80140a0 <pifRingBuffer_CopyToArray+0x32>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	891b      	ldrh	r3, [r3, #8]
 801409a:	8afa      	ldrh	r2, [r7, #22]
 801409c:	1ad3      	subs	r3, r2, r3
 801409e:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 80140a0:	2300      	movs	r3, #0
 80140a2:	82bb      	strh	r3, [r7, #20]
 80140a4:	e01e      	b.n	80140e4 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	691a      	ldr	r2, [r3, #16]
 80140aa:	8afb      	ldrh	r3, [r7, #22]
 80140ac:	441a      	add	r2, r3
 80140ae:	8abb      	ldrh	r3, [r7, #20]
 80140b0:	68f9      	ldr	r1, [r7, #12]
 80140b2:	440b      	add	r3, r1
 80140b4:	7812      	ldrb	r2, [r2, #0]
 80140b6:	701a      	strb	r2, [r3, #0]
		tail++;
 80140b8:	8afb      	ldrh	r3, [r7, #22]
 80140ba:	3301      	adds	r3, #1
 80140bc:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	891b      	ldrh	r3, [r3, #8]
 80140c2:	8afa      	ldrh	r2, [r7, #22]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d301      	bcc.n	80140cc <pifRingBuffer_CopyToArray+0x5e>
 80140c8:	2300      	movs	r3, #0
 80140ca:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	8a9b      	ldrh	r3, [r3, #20]
 80140d0:	8afa      	ldrh	r2, [r7, #22]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d103      	bne.n	80140de <pifRingBuffer_CopyToArray+0x70>
 80140d6:	8abb      	ldrh	r3, [r7, #20]
 80140d8:	3301      	adds	r3, #1
 80140da:	b29b      	uxth	r3, r3
 80140dc:	e007      	b.n	80140ee <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 80140de:	8abb      	ldrh	r3, [r7, #20]
 80140e0:	3301      	adds	r3, #1
 80140e2:	82bb      	strh	r3, [r7, #20]
 80140e4:	8aba      	ldrh	r2, [r7, #20]
 80140e6:	897b      	ldrh	r3, [r7, #10]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d3dc      	bcc.n	80140a6 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 80140ec:	897b      	ldrh	r3, [r7, #10]
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	371c      	adds	r7, #28
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b084      	sub	sp, #16
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	460b      	mov	r3, r1
 8014104:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f7ff fe2e 	bl	8013d68 <pifRingBuffer_GetFillSize>
 801410c:	4603      	mov	r3, r0
 801410e:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8014110:	887a      	ldrh	r2, [r7, #2]
 8014112:	89fb      	ldrh	r3, [r7, #14]
 8014114:	429a      	cmp	r2, r3
 8014116:	d304      	bcc.n	8014122 <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	8a9a      	ldrh	r2, [r3, #20]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8014120:	e00e      	b.n	8014140 <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	8adb      	ldrh	r3, [r3, #22]
 8014126:	461a      	mov	r2, r3
 8014128:	887b      	ldrh	r3, [r7, #2]
 801412a:	4413      	add	r3, r2
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	8912      	ldrh	r2, [r2, #8]
 8014130:	fb93 f1f2 	sdiv	r1, r3, r2
 8014134:	fb01 f202 	mul.w	r2, r1, r2
 8014138:	1a9b      	subs	r3, r3, r2
 801413a:	b29a      	uxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	82da      	strh	r2, [r3, #22]
}
 8014140:	bf00      	nop
 8014142:	3710      	adds	r7, #16
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8014148:	b480      	push	{r7}
 801414a:	b089      	sub	sp, #36	; 0x24
 801414c:	af00      	add	r7, sp, #0
 801414e:	4603      	mov	r3, r0
 8014150:	6039      	str	r1, [r7, #0]
 8014152:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8014154:	f04f 33ff 	mov.w	r3, #4294967295
 8014158:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801415a:	2300      	movs	r3, #0
 801415c:	61bb      	str	r3, [r7, #24]
 801415e:	e00f      	b.n	8014180 <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8014160:	2201      	movs	r2, #1
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	fa02 f303 	lsl.w	r3, r2, r3
 8014168:	461a      	mov	r2, r3
 801416a:	4b34      	ldr	r3, [pc, #208]	; (801423c <_setTable+0xf4>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	4013      	ands	r3, r2
 8014170:	2b00      	cmp	r3, #0
 8014172:	d102      	bne.n	801417a <_setTable+0x32>
			num = i;
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	617b      	str	r3, [r7, #20]
			break;
 8014178:	e005      	b.n	8014186 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 801417a:	69bb      	ldr	r3, [r7, #24]
 801417c:	3301      	adds	r3, #1
 801417e:	61bb      	str	r3, [r7, #24]
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	2b1f      	cmp	r3, #31
 8014184:	ddec      	ble.n	8014160 <_setTable+0x18>
		}
	}
	if (num == -1) {
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801418c:	d105      	bne.n	801419a <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 801418e:	4b2c      	ldr	r3, [pc, #176]	; (8014240 <_setTable+0xf8>)
 8014190:	2204      	movs	r2, #4
 8014192:	701a      	strb	r2, [r3, #0]
		return -1;
 8014194:	f04f 33ff 	mov.w	r3, #4294967295
 8014198:	e04a      	b.n	8014230 <_setTable+0xe8>
	}
	bit = 1 << num;
 801419a:	2201      	movs	r2, #1
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	fa02 f303 	lsl.w	r3, r2, r3
 80141a2:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 80141a4:	4b25      	ldr	r3, [pc, #148]	; (801423c <_setTable+0xf4>)
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	4313      	orrs	r3, r2
 80141ac:	4a23      	ldr	r2, [pc, #140]	; (801423c <_setTable+0xf4>)
 80141ae:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 80141b0:	88fb      	ldrh	r3, [r7, #6]
 80141b2:	015b      	lsls	r3, r3, #5
 80141b4:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 80141b6:	4a23      	ldr	r2, [pc, #140]	; (8014244 <_setTable+0xfc>)
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80141be:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	2b64      	cmp	r3, #100	; 0x64
 80141c4:	d930      	bls.n	8014228 <_setTable+0xe0>
		index = 100 * base;
 80141c6:	4b20      	ldr	r3, [pc, #128]	; (8014248 <_setTable+0x100>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2264      	movs	r2, #100	; 0x64
 80141cc:	fb02 f303 	mul.w	r3, r2, r3
 80141d0:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 80141d2:	2300      	movs	r3, #0
 80141d4:	61bb      	str	r3, [r7, #24]
 80141d6:	e017      	b.n	8014208 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	4a1c      	ldr	r2, [pc, #112]	; (801424c <_setTable+0x104>)
 80141dc:	fba2 2303 	umull	r2, r3, r2, r3
 80141e0:	095b      	lsrs	r3, r3, #5
 80141e2:	f003 021f 	and.w	r2, r3, #31
 80141e6:	491a      	ldr	r1, [pc, #104]	; (8014250 <_setTable+0x108>)
 80141e8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80141ec:	f003 031f 	and.w	r3, r3, #31
 80141f0:	693a      	ldr	r2, [r7, #16]
 80141f2:	430a      	orrs	r2, r1
 80141f4:	4916      	ldr	r1, [pc, #88]	; (8014250 <_setTable+0x108>)
 80141f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 80141fa:	69fa      	ldr	r2, [r7, #28]
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	4413      	add	r3, r2
 8014200:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	3301      	adds	r3, #1
 8014206:	61bb      	str	r3, [r7, #24]
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	4a10      	ldr	r2, [pc, #64]	; (801424c <_setTable+0x104>)
 801420c:	fb82 1203 	smull	r1, r2, r2, r3
 8014210:	1152      	asrs	r2, r2, #5
 8014212:	17db      	asrs	r3, r3, #31
 8014214:	1ad3      	subs	r3, r2, r3
 8014216:	69ba      	ldr	r2, [r7, #24]
 8014218:	429a      	cmp	r2, r3
 801421a:	dbdd      	blt.n	80141d8 <_setTable+0x90>
		}
		base++;
 801421c:	4b0a      	ldr	r3, [pc, #40]	; (8014248 <_setTable+0x100>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	3301      	adds	r3, #1
 8014222:	4a09      	ldr	r2, [pc, #36]	; (8014248 <_setTable+0x100>)
 8014224:	6013      	str	r3, [r2, #0]
 8014226:	e002      	b.n	801422e <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	2201      	movs	r2, #1
 801422c:	701a      	strb	r2, [r3, #0]
	}
	return num;
 801422e:	697b      	ldr	r3, [r7, #20]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3724      	adds	r7, #36	; 0x24
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr
 801423c:	200021a4 	.word	0x200021a4
 8014240:	200020c9 	.word	0x200020c9
 8014244:	0004e200 	.word	0x0004e200
 8014248:	20002234 	.word	0x20002234
 801424c:	51eb851f 	.word	0x51eb851f
 8014250:	200021a8 	.word	0x200021a8

08014254 <_resetTable>:

static void _resetTable(int number)
{
 8014254:	b480      	push	{r7}
 8014256:	b085      	sub	sp, #20
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 801425c:	2201      	movs	r2, #1
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	fa02 f303 	lsl.w	r3, r2, r3
 8014264:	43db      	mvns	r3, r3
 8014266:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014268:	2300      	movs	r3, #0
 801426a:	60fb      	str	r3, [r7, #12]
 801426c:	e00c      	b.n	8014288 <_resetTable+0x34>
		s_table[i] &= mask;
 801426e:	4a0e      	ldr	r2, [pc, #56]	; (80142a8 <_resetTable+0x54>)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	401a      	ands	r2, r3
 801427a:	490b      	ldr	r1, [pc, #44]	; (80142a8 <_resetTable+0x54>)
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	3301      	adds	r3, #1
 8014286:	60fb      	str	r3, [r7, #12]
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	2b1f      	cmp	r3, #31
 801428c:	ddef      	ble.n	801426e <_resetTable+0x1a>
	}
	s_table_number &= mask;
 801428e:	4b07      	ldr	r3, [pc, #28]	; (80142ac <_resetTable+0x58>)
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	4013      	ands	r3, r2
 8014296:	4a05      	ldr	r2, [pc, #20]	; (80142ac <_resetTable+0x58>)
 8014298:	6013      	str	r3, [r2, #0]
}
 801429a:	bf00      	nop
 801429c:	3714      	adds	r7, #20
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	200021a8 	.word	0x200021a8
 80142ac:	200021a4 	.word	0x200021a4

080142b0 <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b085      	sub	sp, #20
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	8c1b      	ldrh	r3, [r3, #32]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d010      	beq.n	80142e2 <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 80142c0:	4b0b      	ldr	r3, [pc, #44]	; (80142f0 <_processingAlways+0x40>)
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	69db      	ldr	r3, [r3, #28]
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	8c1b      	ldrh	r3, [r3, #32]
 80142d0:	461a      	mov	r2, r3
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	4293      	cmp	r3, r2
 80142d6:	d302      	bcc.n	80142de <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	841a      	strh	r2, [r3, #32]
		}
		return NULL;
 80142de:	2300      	movs	r3, #0
 80142e0:	e000      	b.n	80142e4 <_processingAlways+0x34>
	}
	return p_owner;
 80142e2:	687b      	ldr	r3, [r7, #4]
}
 80142e4:	4618      	mov	r0, r3
 80142e6:	3714      	adds	r7, #20
 80142e8:	46bd      	mov	sp, r7
 80142ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ee:	4770      	bx	lr
 80142f0:	200020d8 	.word	0x200020d8

080142f4 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 80142fc:	4b0c      	ldr	r3, [pc, #48]	; (8014330 <_processingPeriodUs+0x3c>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4798      	blx	r3
 8014302:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	69db      	ldr	r3, [r3, #28]
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	1ad3      	subs	r3, r2, r3
 801430c:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	891b      	ldrh	r3, [r3, #8]
 8014312:	461a      	mov	r2, r3
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	4293      	cmp	r3, r2
 8014318:	d304      	bcc.n	8014324 <_processingPeriodUs+0x30>
		p_owner->__pretime = current;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	68fa      	ldr	r2, [r7, #12]
 801431e:	61da      	str	r2, [r3, #28]
		return p_owner;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	e000      	b.n	8014326 <_processingPeriodUs+0x32>
	}
	return NULL;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	200020e8 	.word	0x200020e8

08014334 <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 8014334:	b480      	push	{r7}
 8014336:	b085      	sub	sp, #20
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 801433c:	4b0c      	ldr	r3, [pc, #48]	; (8014370 <_processingPeriodMs+0x3c>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	69db      	ldr	r3, [r3, #28]
 8014346:	68fa      	ldr	r2, [r7, #12]
 8014348:	1ad3      	subs	r3, r2, r3
 801434a:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	891b      	ldrh	r3, [r3, #8]
 8014350:	461a      	mov	r2, r3
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	4293      	cmp	r3, r2
 8014356:	d304      	bcc.n	8014362 <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	68fa      	ldr	r2, [r7, #12]
 801435c:	61da      	str	r2, [r3, #28]
		return p_owner;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	e000      	b.n	8014364 <_processingPeriodMs+0x30>
	}
	return NULL;
 8014362:	2300      	movs	r3, #0
}
 8014364:	4618      	mov	r0, r3
 8014366:	3714      	adds	r7, #20
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr
 8014370:	200020d8 	.word	0x200020d8
 8014374:	00000000 	.word	0x00000000

08014378 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	8c1b      	ldrh	r3, [r3, #32]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d00f      	beq.n	80143a8 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014388:	4b29      	ldr	r3, [pc, #164]	; (8014430 <_processingRatio+0xb8>)
 801438a:	681a      	ldr	r2, [r3, #0]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	69db      	ldr	r3, [r3, #28]
 8014390:	1ad3      	subs	r3, r2, r3
 8014392:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	8c1b      	ldrh	r3, [r3, #32]
 8014398:	461a      	mov	r2, r3
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	4293      	cmp	r3, r2
 801439e:	d33b      	bcc.n	8014418 <_processingRatio+0xa0>
			p_owner->__delay_ms = 0;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	841a      	strh	r2, [r3, #32]
 80143a6:	e037      	b.n	8014418 <_processingRatio+0xa0>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 80143a8:	4b22      	ldr	r3, [pc, #136]	; (8014434 <_processingRatio+0xbc>)
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	461a      	mov	r2, r3
 80143ae:	4b22      	ldr	r3, [pc, #136]	; (8014438 <_processingRatio+0xc0>)
 80143b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	6952      	ldr	r2, [r2, #20]
 80143b8:	2101      	movs	r1, #1
 80143ba:	fa01 f202 	lsl.w	r2, r1, r2
 80143be:	4013      	ands	r3, r2
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d029      	beq.n	8014418 <_processingRatio+0xa0>
#ifdef __PIF_DEBUG__
		time = pif_timer1sec;
 80143c4:	4b1d      	ldr	r3, [pc, #116]	; (801443c <_processingRatio+0xc4>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 80143ca:	4b1d      	ldr	r3, [pc, #116]	; (8014440 <_processingRatio+0xc8>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	68fa      	ldr	r2, [r7, #12]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d01a      	beq.n	801440a <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d8:	4618      	mov	r0, r3
 80143da:	f7ec f851 	bl	8000480 <__aeabi_ui2d>
 80143de:	4602      	mov	r2, r0
 80143e0:	460b      	mov	r3, r1
 80143e2:	a111      	add	r1, pc, #68	; (adr r1, 8014428 <_processingRatio+0xb0>)
 80143e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143e8:	f7ec f9ee 	bl	80007c8 <__aeabi_ddiv>
 80143ec:	4602      	mov	r2, r0
 80143ee:	460b      	mov	r3, r1
 80143f0:	4610      	mov	r0, r2
 80143f2:	4619      	mov	r1, r3
 80143f4:	f7ec fba0 	bl	8000b38 <__aeabi_d2f>
 80143f8:	4602      	mov	r2, r0
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__count = 0;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2200      	movs	r2, #0
 8014402:	625a      	str	r2, [r3, #36]	; 0x24
			pretime = time;
 8014404:	4a0e      	ldr	r2, [pc, #56]	; (8014440 <_processingRatio+0xc8>)
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	6013      	str	r3, [r2, #0]
		}
		p_owner->__count++;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801440e:	1c5a      	adds	r2, r3, #1
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	625a      	str	r2, [r3, #36]	; 0x24
#endif
		return p_owner;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	e000      	b.n	801441a <_processingRatio+0xa2>
	}
	return NULL;
 8014418:	2300      	movs	r3, #0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	f3af 8000 	nop.w
 8014428:	00000000 	.word	0x00000000
 801442c:	412e8480 	.word	0x412e8480
 8014430:	200020d8 	.word	0x200020d8
 8014434:	20002228 	.word	0x20002228
 8014438:	200021a8 	.word	0x200021a8
 801443c:	200020cc 	.word	0x200020cc
 8014440:	20002238 	.word	0x20002238

08014444 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	460b      	mov	r3, r1
 801444e:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	2b05      	cmp	r3, #5
 8014456:	d83a      	bhi.n	80144ce <_checkParam+0x8a>
 8014458:	a201      	add	r2, pc, #4	; (adr r2, 8014460 <_checkParam+0x1c>)
 801445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801445e:	bf00      	nop
 8014460:	08014479 	.word	0x08014479
 8014464:	080144cf 	.word	0x080144cf
 8014468:	0801449d 	.word	0x0801449d
 801446c:	080144ad 	.word	0x080144ad
 8014470:	0801449d 	.word	0x0801449d
 8014474:	080144ad 	.word	0x080144ad
    case TM_RATIO:
    	if (!period || period > 100) {
 8014478:	887b      	ldrh	r3, [r7, #2]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d002      	beq.n	8014484 <_checkParam+0x40>
 801447e:	887b      	ldrh	r3, [r7, #2]
 8014480:	2b64      	cmp	r3, #100	; 0x64
 8014482:	d904      	bls.n	801448e <_checkParam+0x4a>
    		pif_error = E_INVALID_PARAM;
 8014484:	4b19      	ldr	r3, [pc, #100]	; (80144ec <_checkParam+0xa8>)
 8014486:	2201      	movs	r2, #1
 8014488:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 801448a:	2300      	movs	r3, #0
 801448c:	e027      	b.n	80144de <_checkParam+0x9a>
    	}
    	else if (period == 100) {
 801448e:	887b      	ldrh	r3, [r7, #2]
 8014490:	2b64      	cmp	r3, #100	; 0x64
 8014492:	d11e      	bne.n	80144d2 <_checkParam+0x8e>
    		*p_mode = TM_ALWAYS;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2201      	movs	r2, #1
 8014498:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 801449a:	e01a      	b.n	80144d2 <_checkParam+0x8e>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    	if (!period) {
 801449c:	887b      	ldrh	r3, [r7, #2]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d119      	bne.n	80144d6 <_checkParam+0x92>
    		pif_error = E_INVALID_PARAM;
 80144a2:	4b12      	ldr	r3, [pc, #72]	; (80144ec <_checkParam+0xa8>)
 80144a4:	2201      	movs	r2, #1
 80144a6:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	e018      	b.n	80144de <_checkParam+0x9a>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 80144ac:	887b      	ldrh	r3, [r7, #2]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d104      	bne.n	80144bc <_checkParam+0x78>
    		pif_error = E_INVALID_PARAM;
 80144b2:	4b0e      	ldr	r3, [pc, #56]	; (80144ec <_checkParam+0xa8>)
 80144b4:	2201      	movs	r2, #1
 80144b6:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80144b8:	2300      	movs	r3, #0
 80144ba:	e010      	b.n	80144de <_checkParam+0x9a>
    	}

    	if (!pif_act_timer1us) {
 80144bc:	4b0c      	ldr	r3, [pc, #48]	; (80144f0 <_checkParam+0xac>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d10a      	bne.n	80144da <_checkParam+0x96>
    		pif_error = E_CANNOT_USE;
 80144c4:	4b09      	ldr	r3, [pc, #36]	; (80144ec <_checkParam+0xa8>)
 80144c6:	2209      	movs	r2, #9
 80144c8:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 80144ca:	2300      	movs	r3, #0
 80144cc:	e007      	b.n	80144de <_checkParam+0x9a>
        }
    	break;
    	
    default:
    	break;
 80144ce:	bf00      	nop
 80144d0:	e004      	b.n	80144dc <_checkParam+0x98>
    	break;
 80144d2:	bf00      	nop
 80144d4:	e002      	b.n	80144dc <_checkParam+0x98>
    	break;
 80144d6:	bf00      	nop
 80144d8:	e000      	b.n	80144dc <_checkParam+0x98>
    	break;
 80144da:	bf00      	nop
    }
	return TRUE;
 80144dc:	2301      	movs	r3, #1
}
 80144de:	4618      	mov	r0, r3
 80144e0:	370c      	adds	r7, #12
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr
 80144ea:	bf00      	nop
 80144ec:	200020c9 	.word	0x200020c9
 80144f0:	200020e8 	.word	0x200020e8

080144f4 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b084      	sub	sp, #16
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	460b      	mov	r3, r1
 80144fe:	70fb      	strb	r3, [r7, #3]
 8014500:	4613      	mov	r3, r2
 8014502:	803b      	strh	r3, [r7, #0]
	int num = -1;
 8014504:	f04f 33ff 	mov.w	r3, #4294967295
 8014508:	60fb      	str	r3, [r7, #12]

    switch (mode) {
 801450a:	78fb      	ldrb	r3, [r7, #3]
 801450c:	2b06      	cmp	r3, #6
 801450e:	d848      	bhi.n	80145a2 <_setParam+0xae>
 8014510:	a201      	add	r2, pc, #4	; (adr r2, 8014518 <_setParam+0x24>)
 8014512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014516:	bf00      	nop
 8014518:	08014535 	.word	0x08014535
 801451c:	08014567 	.word	0x08014567
 8014520:	08014573 	.word	0x08014573
 8014524:	08014583 	.word	0x08014583
 8014528:	08014573 	.word	0x08014573
 801452c:	08014583 	.word	0x08014583
 8014530:	08014597 	.word	0x08014597
    case TM_RATIO:
    	num = _setTable(period, &mode);
 8014534:	1cfa      	adds	r2, r7, #3
 8014536:	883b      	ldrh	r3, [r7, #0]
 8014538:	4611      	mov	r1, r2
 801453a:	4618      	mov	r0, r3
 801453c:	f7ff fe04 	bl	8014148 <_setTable>
 8014540:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014548:	d101      	bne.n	801454e <_setParam+0x5a>
 801454a:	2300      	movs	r3, #0
 801454c:	e031      	b.n	80145b2 <_setParam+0xbe>
    	if (mode == TM_ALWAYS) period = 100;
 801454e:	78fb      	ldrb	r3, [r7, #3]
 8014550:	2b01      	cmp	r3, #1
 8014552:	d101      	bne.n	8014558 <_setParam+0x64>
 8014554:	2364      	movs	r3, #100	; 0x64
 8014556:	803b      	strh	r3, [r7, #0]
    	p_owner->__table_number = num;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	68fa      	ldr	r2, [r7, #12]
 801455c:	615a      	str	r2, [r3, #20]
    	p_owner->__processing = _processingRatio;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	4a16      	ldr	r2, [pc, #88]	; (80145bc <_setParam+0xc8>)
 8014562:	611a      	str	r2, [r3, #16]
    	break;
 8014564:	e01e      	b.n	80145a4 <_setParam+0xb0>

    case TM_ALWAYS:
    	period = 100;
 8014566:	2364      	movs	r3, #100	; 0x64
 8014568:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	4a14      	ldr	r2, [pc, #80]	; (80145c0 <_setParam+0xcc>)
 801456e:	611a      	str	r2, [r3, #16]
    	break;
 8014570:	e018      	b.n	80145a4 <_setParam+0xb0>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 8014572:	4b14      	ldr	r3, [pc, #80]	; (80145c4 <_setParam+0xd0>)
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingPeriodMs;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	4a12      	ldr	r2, [pc, #72]	; (80145c8 <_setParam+0xd4>)
 801457e:	611a      	str	r2, [r3, #16]
    	break;
 8014580:	e010      	b.n	80145a4 <_setParam+0xb0>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 8014582:	4b12      	ldr	r3, [pc, #72]	; (80145cc <_setParam+0xd8>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	4798      	blx	r3
 8014588:	4602      	mov	r2, r0
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	61da      	str	r2, [r3, #28]
    	p_owner->__processing = _processingPeriodUs;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4a0f      	ldr	r2, [pc, #60]	; (80145d0 <_setParam+0xdc>)
 8014592:	611a      	str	r2, [r3, #16]
    	break;
 8014594:	e006      	b.n	80145a4 <_setParam+0xb0>

    case TM_NEED:
    	period = 0;
 8014596:	2300      	movs	r3, #0
 8014598:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2200      	movs	r2, #0
 801459e:	611a      	str	r2, [r3, #16]
    	break;
 80145a0:	e000      	b.n	80145a4 <_setParam+0xb0>

    default:
    	break;
 80145a2:	bf00      	nop
    }

    p_owner->_mode = mode;
 80145a4:	78fa      	ldrb	r2, [r7, #3]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	719a      	strb	r2, [r3, #6]
    p_owner->_period = period;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	883a      	ldrh	r2, [r7, #0]
 80145ae:	811a      	strh	r2, [r3, #8]
	return TRUE;
 80145b0:	2301      	movs	r3, #1
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3710      	adds	r7, #16
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	bf00      	nop
 80145bc:	08014379 	.word	0x08014379
 80145c0:	080142b1 	.word	0x080142b1
 80145c4:	200020d8 	.word	0x200020d8
 80145c8:	08014335 	.word	0x08014335
 80145cc:	200020e8 	.word	0x200020e8
 80145d0:	080142f5 	.word	0x080142f5

080145d4 <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
	uint16_t period;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 80145dc:	4b25      	ldr	r3, [pc, #148]	; (8014674 <_processingTask+0xa0>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	2b04      	cmp	r3, #4
 80145e2:	dd01      	ble.n	80145e8 <_processingTask+0x14>
 80145e4:	2300      	movs	r3, #0
 80145e6:	e041      	b.n	801466c <_processingTask+0x98>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
 80145e8:	4b23      	ldr	r3, [pc, #140]	; (8014678 <_processingTask+0xa4>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d003      	beq.n	80145f8 <_processingTask+0x24>
 80145f0:	4b21      	ldr	r3, [pc, #132]	; (8014678 <_processingTask+0xa4>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2001      	movs	r0, #1
 80145f6:	4798      	blx	r3
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 80145f8:	4b1e      	ldr	r3, [pc, #120]	; (8014674 <_processingTask+0xa0>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	491f      	ldr	r1, [pc, #124]	; (801467c <_processingTask+0xa8>)
 80145fe:	687a      	ldr	r2, [r7, #4]
 8014600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 8014604:	4b1b      	ldr	r3, [pc, #108]	; (8014674 <_processingTask+0xa0>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	3301      	adds	r3, #1
 801460a:	4a1a      	ldr	r2, [pc, #104]	; (8014674 <_processingTask+0xa0>)
 801460c:	6013      	str	r3, [r2, #0]
	p_owner->__running = TRUE;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2201      	movs	r2, #1
 8014612:	761a      	strb	r2, [r3, #24]
	period = (*p_owner->__evt_loop)(p_owner);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	4798      	blx	r3
 801461c:	4603      	mov	r3, r0
 801461e:	81fb      	strh	r3, [r7, #14]
	p_owner->__running = FALSE;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	761a      	strb	r2, [r3, #24]
	s_task_stack_ptr--;
 8014626:	4b13      	ldr	r3, [pc, #76]	; (8014674 <_processingTask+0xa0>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	3b01      	subs	r3, #1
 801462c:	4a11      	ldr	r2, [pc, #68]	; (8014674 <_processingTask+0xa0>)
 801462e:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 8014630:	4b10      	ldr	r3, [pc, #64]	; (8014674 <_processingTask+0xa0>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a11      	ldr	r2, [pc, #68]	; (801467c <_processingTask+0xa8>)
 8014636:	2100      	movs	r1, #0
 8014638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
 801463c:	4b0e      	ldr	r3, [pc, #56]	; (8014678 <_processingTask+0xa4>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d003      	beq.n	801464c <_processingTask+0x78>
 8014644:	4b0c      	ldr	r3, [pc, #48]	; (8014678 <_processingTask+0xa4>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	2000      	movs	r0, #0
 801464a:	4798      	blx	r3
#endif

	switch (p_owner->_mode) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	799b      	ldrb	r3, [r3, #6]
 8014650:	3b04      	subs	r3, #4
 8014652:	2b01      	cmp	r3, #1
 8014654:	d806      	bhi.n	8014664 <_processingTask+0x90>
	case TM_CHANGE_MS:
	case TM_CHANGE_US:
		if (period > 0) p_owner->_period = period;
 8014656:	89fb      	ldrh	r3, [r7, #14]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d005      	beq.n	8014668 <_processingTask+0x94>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	89fa      	ldrh	r2, [r7, #14]
 8014660:	811a      	strh	r2, [r3, #8]
		break;
 8014662:	e001      	b.n	8014668 <_processingTask+0x94>

	default:
		break;
 8014664:	bf00      	nop
 8014666:	e000      	b.n	801466a <_processingTask+0x96>
		break;
 8014668:	bf00      	nop
	}
	return TRUE;
 801466a:	2301      	movs	r3, #1
}
 801466c:	4618      	mov	r0, r3
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	200021a0 	.word	0x200021a0
 8014678:	2000216c 	.word	0x2000216c
 801467c:	2000218c 	.word	0x2000218c

08014680 <_checkLoopTime>:

static void _checkLoopTime()
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af02      	add	r7, sp, #8
#endif
#ifdef __PIF_DEBUG__
	static uint32_t pretime = 0UL;
	static uint32_t max_loop = 0UL;

	if (pif_act_timer1us) {
 8014686:	4b46      	ldr	r3, [pc, #280]	; (80147a0 <_checkLoopTime+0x120>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d015      	beq.n	80146ba <_checkLoopTime+0x3a>
		value = (*pif_act_timer1us)() - pretime;
 801468e:	4b44      	ldr	r3, [pc, #272]	; (80147a0 <_checkLoopTime+0x120>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	4798      	blx	r3
 8014694:	4602      	mov	r2, r0
 8014696:	4b43      	ldr	r3, [pc, #268]	; (80147a4 <_checkLoopTime+0x124>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	607b      	str	r3, [r7, #4]
		if (value > pif_performance.__max_loop_time1us) {
 801469e:	4b42      	ldr	r3, [pc, #264]	; (80147a8 <_checkLoopTime+0x128>)
 80146a0:	689b      	ldr	r3, [r3, #8]
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d902      	bls.n	80146ae <_checkLoopTime+0x2e>
			pif_performance.__max_loop_time1us = value;
 80146a8:	4a3f      	ldr	r2, [pc, #252]	; (80147a8 <_checkLoopTime+0x128>)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6093      	str	r3, [r2, #8]
		}
		pretime = (*pif_act_timer1us)();
 80146ae:	4b3c      	ldr	r3, [pc, #240]	; (80147a0 <_checkLoopTime+0x120>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	4798      	blx	r3
 80146b4:	4603      	mov	r3, r0
 80146b6:	4a3b      	ldr	r2, [pc, #236]	; (80147a4 <_checkLoopTime+0x124>)
 80146b8:	6013      	str	r3, [r2, #0]
	}
#endif

	pif_performance._count++;
 80146ba:	4b3b      	ldr	r3, [pc, #236]	; (80147a8 <_checkLoopTime+0x128>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	3301      	adds	r3, #1
 80146c0:	4a39      	ldr	r2, [pc, #228]	; (80147a8 <_checkLoopTime+0x128>)
 80146c2:	6013      	str	r3, [r2, #0]

	switch (pif_performance.__state) {
 80146c4:	4b38      	ldr	r3, [pc, #224]	; (80147a8 <_checkLoopTime+0x128>)
 80146c6:	795b      	ldrb	r3, [r3, #5]
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d002      	beq.n	80146d2 <_checkLoopTime+0x52>
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	d052      	beq.n	8014776 <_checkLoopTime+0xf6>
#endif
    	pif_performance._count = 0;
		pif_performance.__state = FALSE;
		break;
    }
}
 80146d0:	e062      	b.n	8014798 <_checkLoopTime+0x118>
		pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 80146d2:	4b36      	ldr	r3, [pc, #216]	; (80147ac <_checkLoopTime+0x12c>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2264      	movs	r2, #100	; 0x64
 80146d8:	fb03 f202 	mul.w	r2, r3, r2
 80146dc:	4b34      	ldr	r3, [pc, #208]	; (80147b0 <_checkLoopTime+0x130>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	4b2e      	ldr	r3, [pc, #184]	; (80147a8 <_checkLoopTime+0x128>)
 80146ee:	711a      	strb	r2, [r3, #4]
		s_loop_count = 0UL;
 80146f0:	4b2f      	ldr	r3, [pc, #188]	; (80147b0 <_checkLoopTime+0x130>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	601a      	str	r2, [r3, #0]
		s_pass_count = 0UL;
 80146f6:	4b2d      	ldr	r3, [pc, #180]	; (80147ac <_checkLoopTime+0x12c>)
 80146f8:	2200      	movs	r2, #0
 80146fa:	601a      	str	r2, [r3, #0]
		if (use_rate != pif_performance._use_rate) {
 80146fc:	4b2a      	ldr	r3, [pc, #168]	; (80147a8 <_checkLoopTime+0x128>)
 80146fe:	791a      	ldrb	r2, [r3, #4]
 8014700:	4b2c      	ldr	r3, [pc, #176]	; (80147b4 <_checkLoopTime+0x134>)
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	429a      	cmp	r2, r3
 8014706:	d00a      	beq.n	801471e <_checkLoopTime+0x9e>
			use_rate = pif_performance._use_rate;
 8014708:	4b27      	ldr	r3, [pc, #156]	; (80147a8 <_checkLoopTime+0x128>)
 801470a:	791a      	ldrb	r2, [r3, #4]
 801470c:	4b29      	ldr	r3, [pc, #164]	; (80147b4 <_checkLoopTime+0x134>)
 801470e:	701a      	strb	r2, [r3, #0]
	    	pifLog_Printf(LT_INFO, "Use Rate: %u%%", use_rate);
 8014710:	4b28      	ldr	r3, [pc, #160]	; (80147b4 <_checkLoopTime+0x134>)
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	461a      	mov	r2, r3
 8014716:	4928      	ldr	r1, [pc, #160]	; (80147b8 <_checkLoopTime+0x138>)
 8014718:	2002      	movs	r0, #2
 801471a:	f7fe ff5d 	bl	80135d8 <pifLog_Printf>
		if (pif_performance.__max_loop_time1us > max_loop) max_loop = pif_performance.__max_loop_time1us;
 801471e:	4b22      	ldr	r3, [pc, #136]	; (80147a8 <_checkLoopTime+0x128>)
 8014720:	689a      	ldr	r2, [r3, #8]
 8014722:	4b26      	ldr	r3, [pc, #152]	; (80147bc <_checkLoopTime+0x13c>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	429a      	cmp	r2, r3
 8014728:	d903      	bls.n	8014732 <_checkLoopTime+0xb2>
 801472a:	4b1f      	ldr	r3, [pc, #124]	; (80147a8 <_checkLoopTime+0x128>)
 801472c:	689b      	ldr	r3, [r3, #8]
 801472e:	4a23      	ldr	r2, [pc, #140]	; (80147bc <_checkLoopTime+0x13c>)
 8014730:	6013      	str	r3, [r2, #0]
		if (pif_log_flag.bt.performance) {
 8014732:	4b23      	ldr	r3, [pc, #140]	; (80147c0 <_checkLoopTime+0x140>)
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	b2db      	uxtb	r3, r3
 801473c:	2b00      	cmp	r3, #0
 801473e:	d010      	beq.n	8014762 <_checkLoopTime+0xe2>
			value = 1000000L / pif_performance._count;
 8014740:	4b19      	ldr	r3, [pc, #100]	; (80147a8 <_checkLoopTime+0x128>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4a1f      	ldr	r2, [pc, #124]	; (80147c4 <_checkLoopTime+0x144>)
 8014746:	fbb2 f3f3 	udiv	r3, r2, r3
 801474a:	607b      	str	r3, [r7, #4]
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s) MLT=%luus", value, pif_performance._count, pif_performance.__max_loop_time1us);
 801474c:	4b16      	ldr	r3, [pc, #88]	; (80147a8 <_checkLoopTime+0x128>)
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	4b15      	ldr	r3, [pc, #84]	; (80147a8 <_checkLoopTime+0x128>)
 8014752:	689b      	ldr	r3, [r3, #8]
 8014754:	9300      	str	r3, [sp, #0]
 8014756:	4613      	mov	r3, r2
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	491b      	ldr	r1, [pc, #108]	; (80147c8 <_checkLoopTime+0x148>)
 801475c:	2002      	movs	r0, #2
 801475e:	f7fe ff3b 	bl	80135d8 <pifLog_Printf>
		pif_performance.__max_loop_time1us = 0UL;
 8014762:	4b11      	ldr	r3, [pc, #68]	; (80147a8 <_checkLoopTime+0x128>)
 8014764:	2200      	movs	r2, #0
 8014766:	609a      	str	r2, [r3, #8]
    	pif_performance._count = 0;
 8014768:	4b0f      	ldr	r3, [pc, #60]	; (80147a8 <_checkLoopTime+0x128>)
 801476a:	2200      	movs	r2, #0
 801476c:	601a      	str	r2, [r3, #0]
		pif_performance.__state = FALSE;
 801476e:	4b0e      	ldr	r3, [pc, #56]	; (80147a8 <_checkLoopTime+0x128>)
 8014770:	2200      	movs	r2, #0
 8014772:	715a      	strb	r2, [r3, #5]
		break;
 8014774:	e010      	b.n	8014798 <_checkLoopTime+0x118>
    	pifLog_Printf(LT_INFO, "MLT=%luus", max_loop);
 8014776:	4b11      	ldr	r3, [pc, #68]	; (80147bc <_checkLoopTime+0x13c>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	461a      	mov	r2, r3
 801477c:	4913      	ldr	r1, [pc, #76]	; (80147cc <_checkLoopTime+0x14c>)
 801477e:	2002      	movs	r0, #2
 8014780:	f7fe ff2a 	bl	80135d8 <pifLog_Printf>
		max_loop = 0UL;
 8014784:	4b0d      	ldr	r3, [pc, #52]	; (80147bc <_checkLoopTime+0x13c>)
 8014786:	2200      	movs	r2, #0
 8014788:	601a      	str	r2, [r3, #0]
    	pif_performance._count = 0;
 801478a:	4b07      	ldr	r3, [pc, #28]	; (80147a8 <_checkLoopTime+0x128>)
 801478c:	2200      	movs	r2, #0
 801478e:	601a      	str	r2, [r3, #0]
		pif_performance.__state = FALSE;
 8014790:	4b05      	ldr	r3, [pc, #20]	; (80147a8 <_checkLoopTime+0x128>)
 8014792:	2200      	movs	r2, #0
 8014794:	715a      	strb	r2, [r3, #5]
		break;
 8014796:	bf00      	nop
}
 8014798:	bf00      	nop
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	200020e8 	.word	0x200020e8
 80147a4:	2000223c 	.word	0x2000223c
 80147a8:	200020dc 	.word	0x200020dc
 80147ac:	20002230 	.word	0x20002230
 80147b0:	2000222c 	.word	0x2000222c
 80147b4:	20002240 	.word	0x20002240
 80147b8:	080268c8 	.word	0x080268c8
 80147bc:	20002244 	.word	0x20002244
 80147c0:	200020ec 	.word	0x200020ec
 80147c4:	000f4240 	.word	0x000f4240
 80147c8:	080268d8 	.word	0x080268d8
 80147cc:	080268f4 	.word	0x080268f4

080147d0 <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 80147d0:	b480      	push	{r7}
 80147d2:	b083      	sub	sp, #12
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
    pif_id++;
 80147d8:	4b07      	ldr	r3, [pc, #28]	; (80147f8 <pifTask_Init+0x28>)
 80147da:	881b      	ldrh	r3, [r3, #0]
 80147dc:	3301      	adds	r3, #1
 80147de:	b29a      	uxth	r2, r3
 80147e0:	4b05      	ldr	r3, [pc, #20]	; (80147f8 <pifTask_Init+0x28>)
 80147e2:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 80147e4:	4b04      	ldr	r3, [pc, #16]	; (80147f8 <pifTask_Init+0x28>)
 80147e6:	881a      	ldrh	r2, [r3, #0]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	809a      	strh	r2, [r3, #4]
}
 80147ec:	bf00      	nop
 80147ee:	370c      	adds	r7, #12
 80147f0:	46bd      	mov	sp, r7
 80147f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f6:	4770      	bx	lr
 80147f8:	2000005c 	.word	0x2000005c

080147fc <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	460b      	mov	r3, r1
 8014806:	70fb      	strb	r3, [r7, #3]
 8014808:	4613      	mov	r3, r2
 801480a:	803b      	strh	r3, [r7, #0]
	if (!_checkParam(&mode, period)) return FALSE;
 801480c:	883a      	ldrh	r2, [r7, #0]
 801480e:	1cfb      	adds	r3, r7, #3
 8014810:	4611      	mov	r1, r2
 8014812:	4618      	mov	r0, r3
 8014814:	f7ff fe16 	bl	8014444 <_checkParam>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d101      	bne.n	8014822 <pifTask_ChangeMode+0x26>
 801481e:	2300      	movs	r3, #0
 8014820:	e016      	b.n	8014850 <pifTask_ChangeMode+0x54>

	switch (p_owner->_mode) {
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	799b      	ldrb	r3, [r3, #6]
 8014826:	2b01      	cmp	r3, #1
 8014828:	d805      	bhi.n	8014836 <pifTask_ChangeMode+0x3a>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	695b      	ldr	r3, [r3, #20]
 801482e:	4618      	mov	r0, r3
 8014830:	f7ff fd10 	bl	8014254 <_resetTable>
		break;
 8014834:	e000      	b.n	8014838 <pifTask_ChangeMode+0x3c>

	default:
		break;
 8014836:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 8014838:	78fb      	ldrb	r3, [r7, #3]
 801483a:	883a      	ldrh	r2, [r7, #0]
 801483c:	4619      	mov	r1, r3
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f7ff fe58 	bl	80144f4 <_setParam>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d101      	bne.n	801484e <pifTask_ChangeMode+0x52>
 801484a:	2300      	movs	r3, #0
 801484c:	e000      	b.n	8014850 <pifTask_ChangeMode+0x54>

    return TRUE;
 801484e:	2301      	movs	r3, #1
}
 8014850:	4618      	mov	r0, r3
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 8014858:	b480      	push	{r7}
 801485a:	b083      	sub	sp, #12
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	460b      	mov	r3, r1
 8014862:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	799b      	ldrb	r3, [r3, #6]
 8014868:	3b02      	subs	r3, #2
 801486a:	2b01      	cmp	r3, #1
 801486c:	d805      	bhi.n	801487a <pifTask_ChangePeriod+0x22>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
		p_owner->_period = period;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	887a      	ldrh	r2, [r7, #2]
 8014872:	811a      	strh	r2, [r3, #8]
		break;
 8014874:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 8014876:	2301      	movs	r3, #1
 8014878:	e003      	b.n	8014882 <pifTask_ChangePeriod+0x2a>
		pif_error = E_CANNOT_USE;
 801487a:	4b05      	ldr	r3, [pc, #20]	; (8014890 <pifTask_ChangePeriod+0x38>)
 801487c:	2209      	movs	r2, #9
 801487e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8014880:	2300      	movs	r3, #0
}
 8014882:	4618      	mov	r0, r3
 8014884:	370c      	adds	r7, #12
 8014886:	46bd      	mov	sp, r7
 8014888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488c:	4770      	bx	lr
 801488e:	bf00      	nop
 8014890:	200020c9 	.word	0x200020c9

08014894 <pifTaskManager_Init>:
	}
}


BOOL pifTaskManager_Init(int max_count)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	2130      	movs	r1, #48	; 0x30
 80148a0:	480b      	ldr	r0, [pc, #44]	; (80148d0 <pifTaskManager_Init+0x3c>)
 80148a2:	f7fe f85f 	bl	8012964 <pifFixList_Init>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d101      	bne.n	80148b0 <pifTaskManager_Init+0x1c>
 80148ac:	2300      	movs	r3, #0
 80148ae:	e00b      	b.n	80148c8 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 80148b0:	4b08      	ldr	r3, [pc, #32]	; (80148d4 <pifTaskManager_Init+0x40>)
 80148b2:	2200      	movs	r2, #0
 80148b4:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 80148b6:	4b08      	ldr	r3, [pc, #32]	; (80148d8 <pifTaskManager_Init+0x44>)
 80148b8:	2200      	movs	r2, #0
 80148ba:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 80148bc:	2280      	movs	r2, #128	; 0x80
 80148be:	2100      	movs	r1, #0
 80148c0:	4806      	ldr	r0, [pc, #24]	; (80148dc <pifTaskManager_Init+0x48>)
 80148c2:	f00d fb1b 	bl	8021efc <memset>
	return TRUE;
 80148c6:	2301      	movs	r3, #1
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	20002170 	.word	0x20002170
 80148d4:	20002188 	.word	0x20002188
 80148d8:	200021a4 	.word	0x200021a4
 80148dc:	200021a8 	.word	0x200021a8

080148e0 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60ba      	str	r2, [r7, #8]
 80148e8:	607b      	str	r3, [r7, #4]
 80148ea:	4603      	mov	r3, r0
 80148ec:	73fb      	strb	r3, [r7, #15]
 80148ee:	460b      	mov	r3, r1
 80148f0:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d104      	bne.n	8014902 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 80148f8:	4b28      	ldr	r3, [pc, #160]	; (801499c <pifTaskManager_Add+0xbc>)
 80148fa:	2201      	movs	r2, #1
 80148fc:	701a      	strb	r2, [r3, #0]
	    return NULL;
 80148fe:	2300      	movs	r3, #0
 8014900:	e048      	b.n	8014994 <pifTaskManager_Add+0xb4>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014902:	89ba      	ldrh	r2, [r7, #12]
 8014904:	f107 030f 	add.w	r3, r7, #15
 8014908:	4611      	mov	r1, r2
 801490a:	4618      	mov	r0, r3
 801490c:	f7ff fd9a 	bl	8014444 <_checkParam>
 8014910:	4603      	mov	r3, r0
 8014912:	2b00      	cmp	r3, #0
 8014914:	d101      	bne.n	801491a <pifTaskManager_Add+0x3a>
 8014916:	2300      	movs	r3, #0
 8014918:	e03c      	b.n	8014994 <pifTaskManager_Add+0xb4>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801491a:	4821      	ldr	r0, [pc, #132]	; (80149a0 <pifTaskManager_Add+0xc0>)
 801491c:	f7fe f8b5 	bl	8012a8a <pifFixList_AddFirst>
 8014920:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d101      	bne.n	801492c <pifTaskManager_Add+0x4c>
 8014928:	2300      	movs	r3, #0
 801492a:	e033      	b.n	8014994 <pifTaskManager_Add+0xb4>

	pifTask_Init(p_owner);
 801492c:	6978      	ldr	r0, [r7, #20]
 801492e:	f7ff ff4f 	bl	80147d0 <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014932:	7bfb      	ldrb	r3, [r7, #15]
 8014934:	89ba      	ldrh	r2, [r7, #12]
 8014936:	4619      	mov	r1, r3
 8014938:	6978      	ldr	r0, [r7, #20]
 801493a:	f7ff fddb 	bl	80144f4 <_setParam>
 801493e:	4603      	mov	r3, r0
 8014940:	2b00      	cmp	r3, #0
 8014942:	d01e      	beq.n	8014982 <pifTaskManager_Add+0xa2>

    p_owner->__evt_loop = evt_loop;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	68ba      	ldr	r2, [r7, #8]
 8014948:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->_p_client = p_client;
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	687a      	ldr	r2, [r7, #4]
 801494e:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_NEED) ? !start : TRUE;
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	2b06      	cmp	r3, #6
 8014954:	d003      	beq.n	801495e <pifTaskManager_Add+0x7e>
 8014956:	f897 3020 	ldrb.w	r3, [r7, #32]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d101      	bne.n	8014962 <pifTaskManager_Add+0x82>
 801495e:	2301      	movs	r3, #1
 8014960:	e000      	b.n	8014964 <pifTaskManager_Add+0x84>
 8014962:	2300      	movs	r3, #0
 8014964:	b2da      	uxtb	r2, r3
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	701a      	strb	r2, [r3, #0]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 801496a:	4b0e      	ldr	r3, [pc, #56]	; (80149a4 <pifTaskManager_Add+0xc4>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d105      	bne.n	801497e <pifTaskManager_Add+0x9e>
 8014972:	480b      	ldr	r0, [pc, #44]	; (80149a0 <pifTaskManager_Add+0xc0>)
 8014974:	f7fe f8fd 	bl	8012b72 <pifFixList_Begin>
 8014978:	4603      	mov	r3, r0
 801497a:	4a0a      	ldr	r2, [pc, #40]	; (80149a4 <pifTaskManager_Add+0xc4>)
 801497c:	6013      	str	r3, [r2, #0]
    return p_owner;
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	e008      	b.n	8014994 <pifTaskManager_Add+0xb4>
	if (!_setParam(p_owner, mode, period)) goto fail;
 8014982:	bf00      	nop

fail:
	if (p_owner) {
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d003      	beq.n	8014992 <pifTaskManager_Add+0xb2>
		pifFixList_Remove(&s_tasks, p_owner);
 801498a:	6979      	ldr	r1, [r7, #20]
 801498c:	4804      	ldr	r0, [pc, #16]	; (80149a0 <pifTaskManager_Add+0xc0>)
 801498e:	f7fe f8b0 	bl	8012af2 <pifFixList_Remove>
	}
	return NULL;
 8014992:	2300      	movs	r3, #0
}
 8014994:	4618      	mov	r0, r3
 8014996:	3718      	adds	r7, #24
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	200020c9 	.word	0x200020c9
 80149a0:	20002170 	.word	0x20002170
 80149a4:	20002188 	.word	0x20002188

080149a8 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 80149b0:	4b17      	ldr	r3, [pc, #92]	; (8014a10 <pifTaskManager_Remove+0x68>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	3308      	adds	r3, #8
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d102      	bne.n	80149c2 <pifTaskManager_Remove+0x1a>
 80149bc:	4b14      	ldr	r3, [pc, #80]	; (8014a10 <pifTaskManager_Remove+0x68>)
 80149be:	2200      	movs	r2, #0
 80149c0:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	799b      	ldrb	r3, [r3, #6]
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d805      	bhi.n	80149d6 <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	695b      	ldr	r3, [r3, #20]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7ff fc40 	bl	8014254 <_resetTable>
		break;
 80149d4:	e000      	b.n	80149d8 <pifTaskManager_Remove+0x30>

	default:
		break;
 80149d6:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 80149d8:	6879      	ldr	r1, [r7, #4]
 80149da:	480e      	ldr	r0, [pc, #56]	; (8014a14 <pifTaskManager_Remove+0x6c>)
 80149dc:	f7fe f889 	bl	8012af2 <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 80149e0:	480c      	ldr	r0, [pc, #48]	; (8014a14 <pifTaskManager_Remove+0x6c>)
 80149e2:	f7fe f8ba 	bl	8012b5a <pifFixList_Count>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d103      	bne.n	80149f4 <pifTaskManager_Remove+0x4c>
 80149ec:	4b08      	ldr	r3, [pc, #32]	; (8014a10 <pifTaskManager_Remove+0x68>)
 80149ee:	2200      	movs	r2, #0
 80149f0:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 80149f2:	e009      	b.n	8014a08 <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 80149f4:	4b06      	ldr	r3, [pc, #24]	; (8014a10 <pifTaskManager_Remove+0x68>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d105      	bne.n	8014a08 <pifTaskManager_Remove+0x60>
 80149fc:	4805      	ldr	r0, [pc, #20]	; (8014a14 <pifTaskManager_Remove+0x6c>)
 80149fe:	f7fe f8b8 	bl	8012b72 <pifFixList_Begin>
 8014a02:	4603      	mov	r3, r0
 8014a04:	4a02      	ldr	r2, [pc, #8]	; (8014a10 <pifTaskManager_Remove+0x68>)
 8014a06:	6013      	str	r3, [r2, #0]
}
 8014a08:	bf00      	nop
 8014a0a:	3708      	adds	r7, #8
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	20002188 	.word	0x20002188
 8014a14:	20002170 	.word	0x20002170

08014a18 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 8014a1c:	4802      	ldr	r0, [pc, #8]	; (8014a28 <pifTaskManager_Count+0x10>)
 8014a1e:	f7fe f89c 	bl	8012b5a <pifFixList_Count>
 8014a22:	4603      	mov	r3, r0
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	20002170 	.word	0x20002170

08014a2c <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014a32:	2300      	movs	r3, #0
 8014a34:	60fb      	str	r3, [r7, #12]
	int i, count = pifFixList_Count(&s_tasks);
 8014a36:	4832      	ldr	r0, [pc, #200]	; (8014b00 <pifTaskManager_Loop+0xd4>)
 8014a38:	f7fe f88f 	bl	8012b5a <pifFixList_Count>
 8014a3c:	6078      	str	r0, [r7, #4]

	if (!s_it_current) {
 8014a3e:	4b31      	ldr	r3, [pc, #196]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d108      	bne.n	8014a58 <pifTaskManager_Loop+0x2c>
		if (!count) return;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d054      	beq.n	8014af6 <pifTaskManager_Loop+0xca>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014a4c:	482c      	ldr	r0, [pc, #176]	; (8014b00 <pifTaskManager_Loop+0xd4>)
 8014a4e:	f7fe f890 	bl	8012b72 <pifFixList_Begin>
 8014a52:	4603      	mov	r3, r0
 8014a54:	4a2b      	ldr	r2, [pc, #172]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014a56:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014a58:	4b2b      	ldr	r3, [pc, #172]	; (8014b08 <pifTaskManager_Loop+0xdc>)
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4413      	add	r3, r2
 8014a60:	4a29      	ldr	r2, [pc, #164]	; (8014b08 <pifTaskManager_Loop+0xdc>)
 8014a62:	6013      	str	r3, [r2, #0]
	for (i = 0; i < count && !p_select; i++) {
 8014a64:	2300      	movs	r3, #0
 8014a66:	60bb      	str	r3, [r7, #8]
 8014a68:	e02f      	b.n	8014aca <pifTaskManager_Loop+0x9e>
		p_owner = (PifTask*)s_it_current->data;
 8014a6a:	4b26      	ldr	r3, [pc, #152]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	3308      	adds	r3, #8
 8014a70:	603b      	str	r3, [r7, #0]

		if (p_owner->immediate) {
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	785b      	ldrb	r3, [r3, #1]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d005      	beq.n	8014a86 <pifTaskManager_Loop+0x5a>
			p_owner->immediate = FALSE;
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	705a      	strb	r2, [r3, #1]
			p_select = p_owner;
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	60fb      	str	r3, [r7, #12]
 8014a84:	e00c      	b.n	8014aa0 <pifTaskManager_Loop+0x74>
		}
		else if (!p_owner->pause) {
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d108      	bne.n	8014aa0 <pifTaskManager_Loop+0x74>
			if (p_owner->__processing) {
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d004      	beq.n	8014aa0 <pifTaskManager_Loop+0x74>
				p_select = (*p_owner->__processing)(p_owner);
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	691b      	ldr	r3, [r3, #16]
 8014a9a:	6838      	ldr	r0, [r7, #0]
 8014a9c:	4798      	blx	r3
 8014a9e:	60f8      	str	r0, [r7, #12]
			}
		}

		s_it_current = pifFixList_Next(s_it_current);
 8014aa0:	4b18      	ldr	r3, [pc, #96]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7fe f870 	bl	8012b8a <pifFixList_Next>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	4a15      	ldr	r2, [pc, #84]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014aae:	6013      	str	r3, [r2, #0]
		if (!s_it_current) {
 8014ab0:	4b14      	ldr	r3, [pc, #80]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d105      	bne.n	8014ac4 <pifTaskManager_Loop+0x98>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014ab8:	4811      	ldr	r0, [pc, #68]	; (8014b00 <pifTaskManager_Loop+0xd4>)
 8014aba:	f7fe f85a 	bl	8012b72 <pifFixList_Begin>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	4a10      	ldr	r2, [pc, #64]	; (8014b04 <pifTaskManager_Loop+0xd8>)
 8014ac2:	6013      	str	r3, [r2, #0]
	for (i = 0; i < count && !p_select; i++) {
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	60bb      	str	r3, [r7, #8]
 8014aca:	68ba      	ldr	r2, [r7, #8]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	da02      	bge.n	8014ad8 <pifTaskManager_Loop+0xac>
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d0c8      	beq.n	8014a6a <pifTaskManager_Loop+0x3e>
		}
	}
	s_pass_count += i;
 8014ad8:	4b0c      	ldr	r3, [pc, #48]	; (8014b0c <pifTaskManager_Loop+0xe0>)
 8014ada:	681a      	ldr	r2, [r3, #0]
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	4413      	add	r3, r2
 8014ae0:	4a0a      	ldr	r2, [pc, #40]	; (8014b0c <pifTaskManager_Loop+0xe0>)
 8014ae2:	6013      	str	r3, [r2, #0]

	if (p_select) {
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d002      	beq.n	8014af0 <pifTaskManager_Loop+0xc4>
	    _processingTask(p_select);
 8014aea:	68f8      	ldr	r0, [r7, #12]
 8014aec:	f7ff fd72 	bl	80145d4 <_processingTask>
	}

    _checkLoopTime();
 8014af0:	f7ff fdc6 	bl	8014680 <_checkLoopTime>
 8014af4:	e000      	b.n	8014af8 <pifTaskManager_Loop+0xcc>
		if (!count) return;
 8014af6:	bf00      	nop
}
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	20002170 	.word	0x20002170
 8014b04:	20002188 	.word	0x20002188
 8014b08:	2000222c 	.word	0x2000222c
 8014b0c:	20002230 	.word	0x20002230

08014b10 <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014b16:	2300      	movs	r3, #0
 8014b18:	617b      	str	r3, [r7, #20]
	int i, k, count = pifFixList_Count(&s_tasks);
 8014b1a:	484d      	ldr	r0, [pc, #308]	; (8014c50 <pifTaskManager_Yield+0x140>)
 8014b1c:	f7fe f81d 	bl	8012b5a <pifFixList_Count>
 8014b20:	6078      	str	r0, [r7, #4]
	BOOL rtn = TRUE;
 8014b22:	2301      	movs	r3, #1
 8014b24:	72fb      	strb	r3, [r7, #11]

	if (!s_it_current) {
 8014b26:	4b4b      	ldr	r3, [pc, #300]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d10a      	bne.n	8014b44 <pifTaskManager_Yield+0x34>
		if (!count) return FALSE;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d101      	bne.n	8014b38 <pifTaskManager_Yield+0x28>
 8014b34:	2300      	movs	r3, #0
 8014b36:	e086      	b.n	8014c46 <pifTaskManager_Yield+0x136>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014b38:	4845      	ldr	r0, [pc, #276]	; (8014c50 <pifTaskManager_Yield+0x140>)
 8014b3a:	f7fe f81a 	bl	8012b72 <pifFixList_Begin>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	4a44      	ldr	r2, [pc, #272]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014b42:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014b44:	4b44      	ldr	r3, [pc, #272]	; (8014c58 <pifTaskManager_Yield+0x148>)
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4413      	add	r3, r2
 8014b4c:	4a42      	ldr	r2, [pc, #264]	; (8014c58 <pifTaskManager_Yield+0x148>)
 8014b4e:	6013      	str	r3, [r2, #0]
	for (i = 0; i < count && !p_select; i++) {
 8014b50:	2300      	movs	r3, #0
 8014b52:	613b      	str	r3, [r7, #16]
 8014b54:	e05f      	b.n	8014c16 <pifTaskManager_Yield+0x106>
		p_owner = (PifTask*)s_it_current->data;
 8014b56:	4b3f      	ldr	r3, [pc, #252]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	3308      	adds	r3, #8
 8014b5c:	603b      	str	r3, [r7, #0]

		if (p_owner->__running) goto next;
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	7e1b      	ldrb	r3, [r3, #24]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d13d      	bne.n	8014be2 <pifTaskManager_Yield+0xd2>
		if (s_task_stack_ptr) {
 8014b66:	4b3d      	ldr	r3, [pc, #244]	; (8014c5c <pifTaskManager_Yield+0x14c>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d021      	beq.n	8014bb2 <pifTaskManager_Yield+0xa2>
			for (k = 0; k < s_task_stack_ptr; k++) {
 8014b6e:	2300      	movs	r3, #0
 8014b70:	60fb      	str	r3, [r7, #12]
 8014b72:	e012      	b.n	8014b9a <pifTaskManager_Yield+0x8a>
				if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b74:	4a3a      	ldr	r2, [pc, #232]	; (8014c60 <pifTaskManager_Yield+0x150>)
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b7c:	789b      	ldrb	r3, [r3, #2]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d008      	beq.n	8014b94 <pifTaskManager_Yield+0x84>
 8014b82:	4a37      	ldr	r2, [pc, #220]	; (8014c60 <pifTaskManager_Yield+0x150>)
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b8a:	789a      	ldrb	r2, [r3, #2]
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	789b      	ldrb	r3, [r3, #2]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d008      	beq.n	8014ba6 <pifTaskManager_Yield+0x96>
			for (k = 0; k < s_task_stack_ptr; k++) {
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	3301      	adds	r3, #1
 8014b98:	60fb      	str	r3, [r7, #12]
 8014b9a:	4b30      	ldr	r3, [pc, #192]	; (8014c5c <pifTaskManager_Yield+0x14c>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	68fa      	ldr	r2, [r7, #12]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	dbe7      	blt.n	8014b74 <pifTaskManager_Yield+0x64>
 8014ba4:	e000      	b.n	8014ba8 <pifTaskManager_Yield+0x98>
				if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014ba6:	bf00      	nop
			}
			if (k < s_task_stack_ptr) goto next;
 8014ba8:	4b2c      	ldr	r3, [pc, #176]	; (8014c5c <pifTaskManager_Yield+0x14c>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	68fa      	ldr	r2, [r7, #12]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	db19      	blt.n	8014be6 <pifTaskManager_Yield+0xd6>
		}

		if (p_owner->immediate) {
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	785b      	ldrb	r3, [r3, #1]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d005      	beq.n	8014bc6 <pifTaskManager_Yield+0xb6>
			p_owner->immediate = FALSE;
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	705a      	strb	r2, [r3, #1]
			p_select = p_owner;
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	617b      	str	r3, [r7, #20]
 8014bc4:	e012      	b.n	8014bec <pifTaskManager_Yield+0xdc>
		}
		else if (!p_owner->pause) {
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10d      	bne.n	8014bea <pifTaskManager_Yield+0xda>
			if (p_owner->__processing) {
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	691b      	ldr	r3, [r3, #16]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d009      	beq.n	8014bea <pifTaskManager_Yield+0xda>
				p_select = (*p_owner->__processing)(p_owner);
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	691b      	ldr	r3, [r3, #16]
 8014bda:	6838      	ldr	r0, [r7, #0]
 8014bdc:	4798      	blx	r3
 8014bde:	6178      	str	r0, [r7, #20]
 8014be0:	e004      	b.n	8014bec <pifTaskManager_Yield+0xdc>
		if (p_owner->__running) goto next;
 8014be2:	bf00      	nop
 8014be4:	e002      	b.n	8014bec <pifTaskManager_Yield+0xdc>
			if (k < s_task_stack_ptr) goto next;
 8014be6:	bf00      	nop
 8014be8:	e000      	b.n	8014bec <pifTaskManager_Yield+0xdc>
			}
		}

next:
 8014bea:	bf00      	nop
		s_it_current = pifFixList_Next(s_it_current);
 8014bec:	4b19      	ldr	r3, [pc, #100]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fd ffca 	bl	8012b8a <pifFixList_Next>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	4a16      	ldr	r2, [pc, #88]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014bfa:	6013      	str	r3, [r2, #0]
		if (!s_it_current) {
 8014bfc:	4b15      	ldr	r3, [pc, #84]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d105      	bne.n	8014c10 <pifTaskManager_Yield+0x100>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014c04:	4812      	ldr	r0, [pc, #72]	; (8014c50 <pifTaskManager_Yield+0x140>)
 8014c06:	f7fd ffb4 	bl	8012b72 <pifFixList_Begin>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	4a11      	ldr	r2, [pc, #68]	; (8014c54 <pifTaskManager_Yield+0x144>)
 8014c0e:	6013      	str	r3, [r2, #0]
	for (i = 0; i < count && !p_select; i++) {
 8014c10:	693b      	ldr	r3, [r7, #16]
 8014c12:	3301      	adds	r3, #1
 8014c14:	613b      	str	r3, [r7, #16]
 8014c16:	693a      	ldr	r2, [r7, #16]
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	da02      	bge.n	8014c24 <pifTaskManager_Yield+0x114>
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d098      	beq.n	8014b56 <pifTaskManager_Yield+0x46>
		}
	}
	s_pass_count += i;
 8014c24:	4b0f      	ldr	r3, [pc, #60]	; (8014c64 <pifTaskManager_Yield+0x154>)
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	4a0d      	ldr	r2, [pc, #52]	; (8014c64 <pifTaskManager_Yield+0x154>)
 8014c2e:	6013      	str	r3, [r2, #0]

	if (p_select) {
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d004      	beq.n	8014c40 <pifTaskManager_Yield+0x130>
	    rtn = _processingTask(p_select);
 8014c36:	6978      	ldr	r0, [r7, #20]
 8014c38:	f7ff fccc 	bl	80145d4 <_processingTask>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	72fb      	strb	r3, [r7, #11]
	}

    _checkLoopTime();
 8014c40:	f7ff fd1e 	bl	8014680 <_checkLoopTime>
    return rtn;
 8014c44:	7afb      	ldrb	r3, [r7, #11]
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3718      	adds	r7, #24
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	20002170 	.word	0x20002170
 8014c54:	20002188 	.word	0x20002188
 8014c58:	2000222c 	.word	0x2000222c
 8014c5c:	200021a0 	.word	0x200021a0
 8014c60:	2000218c 	.word	0x2000218c
 8014c64:	20002230 	.word	0x20002230

08014c68 <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d101      	bne.n	8014c7a <pifTaskManager_YieldMs+0x12>
 8014c76:	2300      	movs	r3, #0
 8014c78:	e011      	b.n	8014c9e <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 8014c7a:	4b0b      	ldr	r3, [pc, #44]	; (8014ca8 <pifTaskManager_YieldMs+0x40>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 8014c80:	f7ff ff46 	bl	8014b10 <pifTaskManager_Yield>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d101      	bne.n	8014c8e <pifTaskManager_YieldMs+0x26>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	e007      	b.n	8014c9e <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 8014c8e:	4b06      	ldr	r3, [pc, #24]	; (8014ca8 <pifTaskManager_YieldMs+0x40>)
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	1ad3      	subs	r3, r2, r3
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d2f1      	bcs.n	8014c80 <pifTaskManager_YieldMs+0x18>
    return TRUE;
 8014c9c:	2301      	movs	r3, #1
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	200020d8 	.word	0x200020d8

08014cac <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	3308      	adds	r3, #8
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7fd ff57 	bl	8012b72 <pifFixList_Begin>
 8014cc4:	6178      	str	r0, [r7, #20]
	while (it) {
 8014cc6:	e017      	b.n	8014cf8 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	3308      	adds	r3, #8
 8014ccc:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	7f1b      	ldrb	r3, [r3, #28]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00c      	beq.n	8014cf0 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	6a1b      	ldr	r3, [r3, #32]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d005      	beq.n	8014cf0 <_doTask+0x44>
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6a1b      	ldr	r3, [r3, #32]
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	6912      	ldr	r2, [r2, #16]
 8014cec:	4610      	mov	r0, r2
 8014cee:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014cf0:	6978      	ldr	r0, [r7, #20]
 8014cf2:	f7fd ff4a 	bl	8012b8a <pifFixList_Next>
 8014cf6:	6178      	str	r0, [r7, #20]
	while (it) {
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d1e4      	bne.n	8014cc8 <_doTask+0x1c>
	}
	return 0;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3718      	adds	r7, #24
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b086      	sub	sp, #24
 8014d0c:	af02      	add	r7, sp, #8
 8014d0e:	60f8      	str	r0, [r7, #12]
 8014d10:	607a      	str	r2, [r7, #4]
 8014d12:	603b      	str	r3, [r7, #0]
 8014d14:	460b      	mov	r3, r1
 8014d16:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d002      	beq.n	8014d24 <pifTimerManager_Init+0x1c>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d104      	bne.n	8014d2e <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014d24:	4b1f      	ldr	r3, [pc, #124]	; (8014da4 <pifTimerManager_Init+0x9c>)
 8014d26:	2201      	movs	r2, #1
 8014d28:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	e036      	b.n	8014d9c <pifTimerManager_Init+0x94>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014d2e:	2224      	movs	r2, #36	; 0x24
 8014d30:	2100      	movs	r1, #0
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f00d f8e2 	bl	8021efc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014d38:	897b      	ldrh	r3, [r7, #10]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d106      	bne.n	8014d4c <pifTimerManager_Init+0x44>
 8014d3e:	4b1a      	ldr	r3, [pc, #104]	; (8014da8 <pifTimerManager_Init+0xa0>)
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	1c5a      	adds	r2, r3, #1
 8014d44:	b291      	uxth	r1, r2
 8014d46:	4a18      	ldr	r2, [pc, #96]	; (8014da8 <pifTimerManager_Init+0xa0>)
 8014d48:	8011      	strh	r1, [r2, #0]
 8014d4a:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	897a      	ldrh	r2, [r7, #10]
 8014d50:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	3308      	adds	r3, #8
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	2128      	movs	r1, #40	; 0x28
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fd fe02 	bl	8012964 <pifFixList_Init>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d013      	beq.n	8014d8e <pifTimerManager_Init+0x86>
    p_manager->_period1us = period1us;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	687a      	ldr	r2, [r7, #4]
 8014d6a:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_ALWAYS, 100, _doTask, p_manager, TRUE);
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	9300      	str	r3, [sp, #0]
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	4a0e      	ldr	r2, [pc, #56]	; (8014dac <pifTimerManager_Init+0xa4>)
 8014d74:	2164      	movs	r1, #100	; 0x64
 8014d76:	2001      	movs	r0, #1
 8014d78:	f7ff fdb2 	bl	80148e0 <pifTaskManager_Add>
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6a1b      	ldr	r3, [r3, #32]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d003      	beq.n	8014d92 <pifTimerManager_Init+0x8a>
    return TRUE;
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	e006      	b.n	8014d9c <pifTimerManager_Init+0x94>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014d8e:	bf00      	nop
 8014d90:	e000      	b.n	8014d94 <pifTimerManager_Init+0x8c>
    if (!p_manager->__p_task) goto fail;
 8014d92:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f000 f80b 	bl	8014db0 <pifTimerManager_Clear>
    return FALSE;
 8014d9a:	2300      	movs	r3, #0
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3710      	adds	r7, #16
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	200020c9 	.word	0x200020c9
 8014da8:	2000005c 	.word	0x2000005c
 8014dac:	08014cad 	.word	0x08014cad

08014db0 <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6a1b      	ldr	r3, [r3, #32]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d007      	beq.n	8014dd0 <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6a1b      	ldr	r3, [r3, #32]
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7ff fdef 	bl	80149a8 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3308      	adds	r3, #8
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7fd fe24 	bl	8012a24 <pifFixList_Clear>
}
 8014ddc:	bf00      	nop
 8014dde:	3708      	adds	r7, #8
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	460b      	mov	r3, r1
 8014dee:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3308      	adds	r3, #8
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fd fe48 	bl	8012a8a <pifFixList_AddFirst>
 8014dfa:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d101      	bne.n	8014e06 <pifTimerManager_Add+0x22>
 8014e02:	2300      	movs	r3, #0
 8014e04:	e006      	b.n	8014e14 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	78fa      	ldrb	r2, [r7, #3]
 8014e0a:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8014e12:	68fb      	ldr	r3, [r7, #12]
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	3710      	adds	r7, #16
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b083      	sub	sp, #12
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	2202      	movs	r2, #2
 8014e28:	725a      	strb	r2, [r3, #9]
}
 8014e2a:	bf00      	nop
 8014e2c:	370c      	adds	r7, #12
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e34:	4770      	bx	lr

08014e36 <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8014e36:	b580      	push	{r7, lr}
 8014e38:	b082      	sub	sp, #8
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	3308      	adds	r3, #8
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fd fe89 	bl	8012b5a <pifFixList_Count>
 8014e48:	4603      	mov	r3, r0
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	3708      	adds	r7, #8
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}
	...

08014e54 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
	if (!target) {
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d104      	bne.n	8014e6e <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8014e64:	4b11      	ldr	r3, [pc, #68]	; (8014eac <pifTimer_Start+0x58>)
 8014e66:	2201      	movs	r2, #1
 8014e68:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	e017      	b.n	8014e9e <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	7a5b      	ldrb	r3, [r3, #9]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d105      	bne.n	8014e82 <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2201      	movs	r2, #1
 8014e7a:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	683a      	ldr	r2, [r7, #0]
 8014e8c:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	7a1b      	ldrb	r3, [r3, #8]
 8014e92:	2b02      	cmp	r3, #2
 8014e94:	d102      	bne.n	8014e9c <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8014e9c:	2301      	movs	r3, #1
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	370c      	adds	r7, #12
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop
 8014eac:	200020c9 	.word	0x200020c9

08014eb0 <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	7a1b      	ldrb	r3, [r3, #8]
 8014ec8:	2b02      	cmp	r3, #2
 8014eca:	d103      	bne.n	8014ed4 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	685b      	ldr	r3, [r3, #4]
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	4798      	blx	r3
	}
}
 8014ed4:	bf00      	nop
 8014ed6:	3708      	adds	r7, #8
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681a      	ldr	r2, [r3, #0]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2201      	movs	r2, #1
 8014ef0:	725a      	strb	r2, [r3, #9]
}
 8014ef2:	bf00      	nop
 8014ef4:	370c      	adds	r7, #12
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr

08014efe <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b086      	sub	sp, #24
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8014f06:	2300      	movs	r3, #0
 8014f08:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	f000 8092 	beq.w	8015036 <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	3308      	adds	r3, #8
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7fd fe2b 	bl	8012b72 <pifFixList_Begin>
 8014f1c:	6138      	str	r0, [r7, #16]
	while (it) {
 8014f1e:	e07c      	b.n	801501a <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	3308      	adds	r3, #8
 8014f24:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	7a5b      	ldrb	r3, [r3, #9]
 8014f2a:	2b02      	cmp	r3, #2
 8014f2c:	d105      	bne.n	8014f3a <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d16e      	bne.n	8015012 <pifTimerManager_sigTick+0x114>
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	617b      	str	r3, [r7, #20]
 8014f38:	e06b      	b.n	8015012 <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d060      	beq.n	8015004 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	1e5a      	subs	r2, r3, #1
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	7a1b      	ldrb	r3, [r3, #8]
 8014f50:	2b02      	cmp	r3, #2
 8014f52:	d031      	beq.n	8014fb8 <pifTimerManager_sigTick+0xba>
 8014f54:	2b02      	cmp	r3, #2
 8014f56:	dc5c      	bgt.n	8015012 <pifTimerManager_sigTick+0x114>
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d002      	beq.n	8014f62 <pifTimerManager_sigTick+0x64>
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d015      	beq.n	8014f8c <pifTimerManager_sigTick+0x8e>
 8014f60:	e057      	b.n	8015012 <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d14e      	bne.n	8015008 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	2201      	movs	r2, #1
 8014f74:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d044      	beq.n	8015008 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f82:	68fa      	ldr	r2, [r7, #12]
 8014f84:	6952      	ldr	r2, [r2, #20]
 8014f86:	4610      	mov	r0, r2
 8014f88:	4798      	blx	r3
					}
				}
				break;
 8014f8a:	e03d      	b.n	8015008 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	68db      	ldr	r3, [r3, #12]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d13b      	bne.n	801500c <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d030      	beq.n	801500c <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	6952      	ldr	r2, [r2, #20]
 8014fb2:	4610      	mov	r0, r2
 8014fb4:	4798      	blx	r3
					}
				}
				break;
 8014fb6:	e029      	b.n	801500c <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	699a      	ldr	r2, [r3, #24]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d016      	beq.n	8014ff2 <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d107      	bne.n	8014fdc <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	681a      	ldr	r2, [r3, #0]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	68da      	ldr	r2, [r3, #12]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	699b      	ldr	r3, [r3, #24]
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d113      	bne.n	8015010 <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	2001      	movs	r0, #1
 8014fee:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 8014ff0:	e00e      	b.n	8015010 <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d10a      	bne.n	8015010 <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	60da      	str	r2, [r3, #12]
				break;
 8015002:	e005      	b.n	8015010 <pifTimerManager_sigTick+0x112>
			}
		}
 8015004:	bf00      	nop
 8015006:	e004      	b.n	8015012 <pifTimerManager_sigTick+0x114>
				break;
 8015008:	bf00      	nop
 801500a:	e002      	b.n	8015012 <pifTimerManager_sigTick+0x114>
				break;
 801500c:	bf00      	nop
 801500e:	e000      	b.n	8015012 <pifTimerManager_sigTick+0x114>
				break;
 8015010:	bf00      	nop

		it = pifFixList_Next(it);
 8015012:	6938      	ldr	r0, [r7, #16]
 8015014:	f7fd fdb9 	bl	8012b8a <pifFixList_Next>
 8015018:	6138      	str	r0, [r7, #16]
	while (it) {
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	2b00      	cmp	r3, #0
 801501e:	f47f af7f 	bne.w	8014f20 <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d007      	beq.n	8015038 <pifTimerManager_sigTick+0x13a>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	3308      	adds	r3, #8
 801502c:	6979      	ldr	r1, [r7, #20]
 801502e:	4618      	mov	r0, r3
 8015030:	f7fd fd5f 	bl	8012af2 <pifFixList_Remove>
 8015034:	e000      	b.n	8015038 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8015036:	bf00      	nop
}
 8015038:	3718      	adds	r7, #24
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 801503e:	b480      	push	{r7}
 8015040:	b085      	sub	sp, #20
 8015042:	af00      	add	r7, sp, #0
 8015044:	60f8      	str	r0, [r7, #12]
 8015046:	60b9      	str	r1, [r7, #8]
 8015048:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	68ba      	ldr	r2, [r7, #8]
 801504e:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	611a      	str	r2, [r3, #16]
}
 8015056:	bf00      	nop
 8015058:	3714      	adds	r7, #20
 801505a:	46bd      	mov	sp, r7
 801505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015060:	4770      	bx	lr
	...

08015064 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	460b      	mov	r3, r1
 801506e:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d104      	bne.n	8015080 <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015076:	4b09      	ldr	r3, [pc, #36]	; (801509c <pifNoiseFilter_Init+0x38>)
 8015078:	2201      	movs	r2, #1
 801507a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801507c:	2300      	movs	r3, #0
 801507e:	e008      	b.n	8015092 <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 8015080:	2208      	movs	r2, #8
 8015082:	2100      	movs	r1, #0
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f00c ff39 	bl	8021efc <memset>

    p_owner->_type = type;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	78fa      	ldrb	r2, [r7, #3]
 801508e:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8015090:	2301      	movs	r3, #1
}
 8015092:	4618      	mov	r0, r3
 8015094:	3708      	adds	r7, #8
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	200020c9 	.word	0x200020c9

080150a0 <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	6839      	ldr	r1, [r7, #0]
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	4798      	blx	r3
 80150b4:	4603      	mov	r3, r0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 80150be:	b580      	push	{r7, lr}
 80150c0:	b082      	sub	sp, #8
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	d002      	beq.n	80150d4 <_clear+0x16>
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	d00d      	beq.n	80150ee <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 80150d2:	e01c      	b.n	801510e <_clear+0x50>
		if (p_owner->__wf.value) {
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	699b      	ldr	r3, [r3, #24]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d015      	beq.n	8015108 <_clear+0x4a>
			free(p_owner->__wf.value);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	699b      	ldr	r3, [r3, #24]
 80150e0:	4618      	mov	r0, r3
 80150e2:	f00c fef5 	bl	8021ed0 <free>
			p_owner->__wf.value = NULL;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2200      	movs	r2, #0
 80150ea:	619a      	str	r2, [r3, #24]
		break;
 80150ec:	e00c      	b.n	8015108 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	69db      	ldr	r3, [r3, #28]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d00a      	beq.n	801510c <_clear+0x4e>
			free(p_owner->__nc.diff);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	69db      	ldr	r3, [r3, #28]
 80150fa:	4618      	mov	r0, r3
 80150fc:	f00c fee8 	bl	8021ed0 <free>
			p_owner->__nc.diff = NULL;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2200      	movs	r2, #0
 8015104:	61da      	str	r2, [r3, #28]
		break;
 8015106:	e001      	b.n	801510c <_clear+0x4e>
		break;
 8015108:	bf00      	nop
 801510a:	e000      	b.n	801510e <_clear+0x50>
		break;
 801510c:	bf00      	nop
	}
}
 801510e:	bf00      	nop
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015116:	b480      	push	{r7}
 8015118:	b085      	sub	sp, #20
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801512a:	3301      	adds	r3, #1
 801512c:	68fa      	ldr	r2, [r7, #12]
 801512e:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015132:	fb93 f1f2 	sdiv	r1, r3, r2
 8015136:	fb01 f202 	mul.w	r2, r1, r2
 801513a:	1a9b      	subs	r3, r3, r2
 801513c:	b25a      	sxtb	r2, r3
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	699a      	ldr	r2, [r3, #24]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	6919      	ldr	r1, [r3, #16]
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	440b      	add	r3, r1
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	1ad2      	subs	r2, r2, r3
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	691a      	ldr	r2, [r3, #16]
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	4413      	add	r3, r2
 801516a:	683a      	ldr	r2, [r7, #0]
 801516c:	6812      	ldr	r2, [r2, #0]
 801516e:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	699a      	ldr	r2, [r3, #24]
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	6919      	ldr	r1, [r3, #16]
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	440b      	add	r3, r1
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	441a      	add	r2, r3
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	699b      	ldr	r3, [r3, #24]
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015194:	fb93 f2f2 	sdiv	r2, r3, r2
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	330c      	adds	r3, #12
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3714      	adds	r7, #20
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr

080151ac <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80151ac:	b480      	push	{r7}
 80151ae:	b08b      	sub	sp, #44	; 0x2c
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	69da      	ldr	r2, [r3, #28]
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80151c4:	4619      	mov	r1, r3
 80151c6:	460b      	mov	r3, r1
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	440b      	add	r3, r1
 80151cc:	005b      	lsls	r3, r3, #1
 80151ce:	4413      	add	r3, r2
 80151d0:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	69bb      	ldr	r3, [r7, #24]
 80151da:	6919      	ldr	r1, [r3, #16]
 80151dc:	69bb      	ldr	r3, [r7, #24]
 80151de:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80151e2:	009b      	lsls	r3, r3, #2
 80151e4:	440b      	add	r3, r1
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	1ad3      	subs	r3, r2, r3
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	b21b      	sxth	r3, r3
 80151f0:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 80151f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80151f6:	b29a      	uxth	r2, r3
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151fe:	b29b      	uxth	r3, r3
 8015200:	1ad3      	subs	r3, r2, r3
 8015202:	b29b      	uxth	r3, r3
 8015204:	b21b      	sxth	r3, r3
 8015206:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015208:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801520c:	2b00      	cmp	r3, #0
 801520e:	da06      	bge.n	801521e <_processNoiseCancel+0x72>
 8015210:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015214:	b29b      	uxth	r3, r3
 8015216:	425b      	negs	r3, r3
 8015218:	b29b      	uxth	r3, r3
 801521a:	b21b      	sxth	r3, r3
 801521c:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 801521e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015222:	b29a      	uxth	r2, r3
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801522a:	b29b      	uxth	r3, r3
 801522c:	4413      	add	r3, r2
 801522e:	b29b      	uxth	r3, r3
 8015230:	b21b      	sxth	r3, r3
 8015232:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015234:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015238:	2b00      	cmp	r3, #0
 801523a:	da06      	bge.n	801524a <_processNoiseCancel+0x9e>
 801523c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015240:	b29b      	uxth	r3, r3
 8015242:	425b      	negs	r3, r3
 8015244:	b29b      	uxth	r3, r3
 8015246:	b21b      	sxth	r3, r3
 8015248:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 801524a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801524e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015252:	429a      	cmp	r2, r3
 8015254:	dd6d      	ble.n	8015332 <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015256:	69bb      	ldr	r3, [r7, #24]
 8015258:	691a      	ldr	r2, [r3, #16]
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	4413      	add	r3, r2
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	6812      	ldr	r2, [r2, #0]
 8015268:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	69da      	ldr	r2, [r3, #28]
 8015272:	69bb      	ldr	r3, [r7, #24]
 8015274:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015278:	4619      	mov	r1, r3
 801527a:	460b      	mov	r3, r1
 801527c:	005b      	lsls	r3, r3, #1
 801527e:	440b      	add	r3, r1
 8015280:	005b      	lsls	r3, r3, #1
 8015282:	4413      	add	r3, r2
 8015284:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	691a      	ldr	r2, [r3, #16]
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	4413      	add	r3, r2
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	b29a      	uxth	r2, r3
 8015298:	69bb      	ldr	r3, [r7, #24]
 801529a:	6919      	ldr	r1, [r3, #16]
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80152a2:	009b      	lsls	r3, r3, #2
 80152a4:	440b      	add	r3, r1
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	b29b      	uxth	r3, r3
 80152ae:	b21a      	sxth	r2, r3
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152ba:	b29a      	uxth	r2, r3
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	1ad3      	subs	r3, r2, r3
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	3302      	adds	r3, #2
 80152cc:	b212      	sxth	r2, r2
 80152ce:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	3302      	adds	r3, #2
 80152d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	da0a      	bge.n	80152f2 <_processNoiseCancel+0x146>
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	3302      	adds	r3, #2
 80152e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	425b      	negs	r3, r3
 80152e8:	b29a      	uxth	r2, r3
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	3302      	adds	r3, #2
 80152ee:	b212      	sxth	r2, r2
 80152f0:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015300:	b29b      	uxth	r3, r3
 8015302:	4413      	add	r3, r2
 8015304:	b29a      	uxth	r2, r3
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	3304      	adds	r3, #4
 801530a:	b212      	sxth	r2, r2
 801530c:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	3304      	adds	r3, #4
 8015312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015316:	2b00      	cmp	r3, #0
 8015318:	da43      	bge.n	80153a2 <_processNoiseCancel+0x1f6>
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	3304      	adds	r3, #4
 801531e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015322:	b29b      	uxth	r3, r3
 8015324:	425b      	negs	r3, r3
 8015326:	b29a      	uxth	r2, r3
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	3304      	adds	r3, #4
 801532c:	b212      	sxth	r2, r2
 801532e:	801a      	strh	r2, [r3, #0]
 8015330:	e037      	b.n	80153a2 <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 8015332:	69bb      	ldr	r3, [r7, #24]
 8015334:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015338:	69bb      	ldr	r3, [r7, #24]
 801533a:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015342:	3301      	adds	r3, #1
 8015344:	69ba      	ldr	r2, [r7, #24]
 8015346:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801534a:	fb93 f1f2 	sdiv	r1, r3, r2
 801534e:	fb01 f202 	mul.w	r2, r1, r2
 8015352:	1a9b      	subs	r3, r3, r2
 8015354:	b25a      	sxtb	r2, r3
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 801535a:	69bb      	ldr	r3, [r7, #24]
 801535c:	691a      	ldr	r2, [r3, #16]
 801535e:	69bb      	ldr	r3, [r7, #24]
 8015360:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015364:	009b      	lsls	r3, r3, #2
 8015366:	4413      	add	r3, r2
 8015368:	683a      	ldr	r2, [r7, #0]
 801536a:	6812      	ldr	r2, [r2, #0]
 801536c:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	69da      	ldr	r2, [r3, #28]
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015378:	4619      	mov	r1, r3
 801537a:	460b      	mov	r3, r1
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	440b      	add	r3, r1
 8015380:	005b      	lsls	r3, r3, #1
 8015382:	4413      	add	r3, r2
 8015384:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 8015386:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	3302      	adds	r3, #2
 8015392:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015396:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 8015398:	693b      	ldr	r3, [r7, #16]
 801539a:	3304      	adds	r3, #4
 801539c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80153a0:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 80153a2:	2300      	movs	r3, #0
 80153a4:	61fb      	str	r3, [r7, #28]
	count = 0;
 80153a6:	2300      	movs	r3, #0
 80153a8:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80153aa:	2300      	movs	r3, #0
 80153ac:	627b      	str	r3, [r7, #36]	; 0x24
 80153ae:	e00e      	b.n	80153ce <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80153b0:	69bb      	ldr	r3, [r7, #24]
 80153b2:	691a      	ldr	r2, [r3, #16]
 80153b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b6:	009b      	lsls	r3, r3, #2
 80153b8:	4413      	add	r3, r2
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	69fa      	ldr	r2, [r7, #28]
 80153be:	4413      	add	r3, r2
 80153c0:	61fb      	str	r3, [r7, #28]
		count++;
 80153c2:	6a3b      	ldr	r3, [r7, #32]
 80153c4:	3301      	adds	r3, #1
 80153c6:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	3301      	adds	r3, #1
 80153cc:	627b      	str	r3, [r7, #36]	; 0x24
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80153d4:	461a      	mov	r2, r3
 80153d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d8:	4293      	cmp	r3, r2
 80153da:	dbe9      	blt.n	80153b0 <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 80153dc:	6a3b      	ldr	r3, [r7, #32]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	dd05      	ble.n	80153ee <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 80153e2:	69fa      	ldr	r2, [r7, #28]
 80153e4:	6a3b      	ldr	r3, [r7, #32]
 80153e6:	fb92 f2f3 	sdiv	r2, r2, r3
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 80153ee:	69bb      	ldr	r3, [r7, #24]
 80153f0:	330c      	adds	r3, #12
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	372c      	adds	r7, #44	; 0x2c
 80153f6:	46bd      	mov	sp, r7
 80153f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fc:	4770      	bx	lr
	...

08015400 <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	460b      	mov	r3, r1
 801540a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d002      	beq.n	8015418 <pifNoiseFilterInt32_Init+0x18>
 8015412:	78fb      	ldrb	r3, [r7, #3]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d104      	bne.n	8015422 <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015418:	4b17      	ldr	r3, [pc, #92]	; (8015478 <pifNoiseFilterInt32_Init+0x78>)
 801541a:	2201      	movs	r2, #1
 801541c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801541e:	2300      	movs	r3, #0
 8015420:	e026      	b.n	8015470 <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 8015422:	2220      	movs	r2, #32
 8015424:	2100      	movs	r1, #0
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f00c fd68 	bl	8021efc <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 801542c:	78fb      	ldrb	r3, [r7, #3]
 801542e:	2104      	movs	r1, #4
 8015430:	4618      	mov	r0, r3
 8015432:	f00c fd13 	bl	8021e5c <calloc>
 8015436:	4603      	mov	r3, r0
 8015438:	461a      	mov	r2, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	691b      	ldr	r3, [r3, #16]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d104      	bne.n	8015450 <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 8015446:	4b0c      	ldr	r3, [pc, #48]	; (8015478 <pifNoiseFilterInt32_Init+0x78>)
 8015448:	2203      	movs	r2, #3
 801544a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801544c:	2300      	movs	r3, #0
 801544e:	e00f      	b.n	8015470 <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2100      	movs	r1, #0
 8015454:	4618      	mov	r0, r3
 8015456:	f7ff fe05 	bl	8015064 <pifNoiseFilter_Init>
    p_owner->_size = size;
 801545a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2200      	movs	r2, #0
 8015466:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	4a04      	ldr	r2, [pc, #16]	; (801547c <pifNoiseFilterInt32_Init+0x7c>)
 801546c:	605a      	str	r2, [r3, #4]
    return TRUE;
 801546e:	2301      	movs	r3, #1
}
 8015470:	4618      	mov	r0, r3
 8015472:	3708      	adds	r7, #8
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	200020c9 	.word	0x200020c9
 801547c:	08015117 	.word	0x08015117

08015480 <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f7ff fe18 	bl	80150be <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015494:	2b02      	cmp	r3, #2
 8015496:	dd04      	ble.n	80154a2 <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801549e:	2b20      	cmp	r3, #32
 80154a0:	dd04      	ble.n	80154ac <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 80154a2:	4b15      	ldr	r3, [pc, #84]	; (80154f8 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80154a4:	2201      	movs	r2, #1
 80154a6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80154a8:	2300      	movs	r3, #0
 80154aa:	e021      	b.n	80154f0 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80154b2:	461a      	mov	r2, r3
 80154b4:	4613      	mov	r3, r2
 80154b6:	005b      	lsls	r3, r3, #1
 80154b8:	4413      	add	r3, r2
 80154ba:	2102      	movs	r1, #2
 80154bc:	4618      	mov	r0, r3
 80154be:	f00c fccd 	bl	8021e5c <calloc>
 80154c2:	4603      	mov	r3, r0
 80154c4:	461a      	mov	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	69db      	ldr	r3, [r3, #28]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d104      	bne.n	80154dc <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80154d2:	4b09      	ldr	r3, [pc, #36]	; (80154f8 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80154d4:	2203      	movs	r2, #3
 80154d6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80154d8:	2300      	movs	r3, #0
 80154da:	e009      	b.n	80154f0 <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2200      	movs	r2, #0
 80154e0:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2202      	movs	r2, #2
 80154e6:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	4a04      	ldr	r2, [pc, #16]	; (80154fc <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 80154ec:	605a      	str	r2, [r3, #4]
	return TRUE;
 80154ee:	2301      	movs	r3, #1
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3708      	adds	r7, #8
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	200020c9 	.word	0x200020c9
 80154fc:	080151ad 	.word	0x080151ad

08015500 <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	3b30      	subs	r3, #48	; 0x30
 8015510:	b2db      	uxtb	r3, r3
 8015512:	461a      	mov	r2, r3
 8015514:	0092      	lsls	r2, r2, #2
 8015516:	4413      	add	r3, r2
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	b2da      	uxtb	r2, r3
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	3301      	adds	r3, #1
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	4413      	add	r3, r2
 8015524:	b2db      	uxtb	r3, r3
 8015526:	3b30      	subs	r3, #48	; 0x30
 8015528:	b2da      	uxtb	r2, r3
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	3302      	adds	r3, #2
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	3b30      	subs	r3, #48	; 0x30
 8015536:	b2db      	uxtb	r3, r3
 8015538:	461a      	mov	r2, r3
 801553a:	0092      	lsls	r2, r2, #2
 801553c:	4413      	add	r3, r2
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	b2da      	uxtb	r2, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	3303      	adds	r3, #3
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	4413      	add	r3, r2
 801554a:	b2db      	uxtb	r3, r3
 801554c:	3b30      	subs	r3, #48	; 0x30
 801554e:	b2da      	uxtb	r2, r3
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	3304      	adds	r3, #4
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	3b30      	subs	r3, #48	; 0x30
 801555c:	b2db      	uxtb	r3, r3
 801555e:	461a      	mov	r2, r3
 8015560:	0092      	lsls	r2, r2, #2
 8015562:	4413      	add	r3, r2
 8015564:	005b      	lsls	r3, r3, #1
 8015566:	b2da      	uxtb	r2, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	3305      	adds	r3, #5
 801556c:	781b      	ldrb	r3, [r3, #0]
 801556e:	4413      	add	r3, r2
 8015570:	b2db      	uxtb	r3, r3
 8015572:	3b30      	subs	r3, #48	; 0x30
 8015574:	b2da      	uxtb	r2, r3
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	701a      	strb	r2, [r3, #0]
}
 801557a:	bf00      	nop
 801557c:	370c      	adds	r7, #12
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
	...

08015588 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 8015588:	b480      	push	{r7}
 801558a:	b085      	sub	sp, #20
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	3b30      	subs	r3, #48	; 0x30
 8015598:	b2db      	uxtb	r3, r3
 801559a:	461a      	mov	r2, r3
 801559c:	0092      	lsls	r2, r2, #2
 801559e:	4413      	add	r3, r2
 80155a0:	005b      	lsls	r3, r3, #1
 80155a2:	b2da      	uxtb	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	3301      	adds	r3, #1
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	4413      	add	r3, r2
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	3b30      	subs	r3, #48	; 0x30
 80155b0:	b2da      	uxtb	r2, r3
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	3302      	adds	r3, #2
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	3b30      	subs	r3, #48	; 0x30
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	461a      	mov	r2, r3
 80155c2:	0092      	lsls	r2, r2, #2
 80155c4:	4413      	add	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	3303      	adds	r3, #3
 80155ce:	781b      	ldrb	r3, [r3, #0]
 80155d0:	4413      	add	r3, r2
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	3b30      	subs	r3, #48	; 0x30
 80155d6:	b2da      	uxtb	r2, r3
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	3304      	adds	r3, #4
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	3b30      	subs	r3, #48	; 0x30
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	461a      	mov	r2, r3
 80155e8:	0092      	lsls	r2, r2, #2
 80155ea:	4413      	add	r3, r2
 80155ec:	005b      	lsls	r3, r3, #1
 80155ee:	b2da      	uxtb	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	3305      	adds	r3, #5
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	4413      	add	r3, r2
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	3b30      	subs	r3, #48	; 0x30
 80155fc:	b2da      	uxtb	r2, r3
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	3306      	adds	r3, #6
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	2b2e      	cmp	r3, #46	; 0x2e
 801560a:	d134      	bne.n	8015676 <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	2200      	movs	r2, #0
 8015610:	80da      	strh	r2, [r3, #6]
		digit = 100;
 8015612:	2364      	movs	r3, #100	; 0x64
 8015614:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015616:	2307      	movs	r3, #7
 8015618:	60fb      	str	r3, [r7, #12]
 801561a:	e027      	b.n	801566c <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	687a      	ldr	r2, [r7, #4]
 8015620:	4413      	add	r3, r2
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	3301      	adds	r3, #1
 8015626:	4a17      	ldr	r2, [pc, #92]	; (8015684 <_convertString2Time+0xfc>)
 8015628:	4413      	add	r3, r2
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	f003 0304 	and.w	r3, r3, #4
 8015630:	2b00      	cmp	r3, #0
 8015632:	d01f      	beq.n	8015674 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	88da      	ldrh	r2, [r3, #6]
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	6879      	ldr	r1, [r7, #4]
 801563c:	440b      	add	r3, r1
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	3b30      	subs	r3, #48	; 0x30
 8015642:	b299      	uxth	r1, r3
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	b29b      	uxth	r3, r3
 8015648:	fb11 f303 	smulbb	r3, r1, r3
 801564c:	b29b      	uxth	r3, r3
 801564e:	4413      	add	r3, r2
 8015650:	b29a      	uxth	r2, r3
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	4a0b      	ldr	r2, [pc, #44]	; (8015688 <_convertString2Time+0x100>)
 801565a:	fb82 1203 	smull	r1, r2, r2, r3
 801565e:	1092      	asrs	r2, r2, #2
 8015660:	17db      	asrs	r3, r3, #31
 8015662:	1ad3      	subs	r3, r2, r3
 8015664:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	3301      	adds	r3, #1
 801566a:	60fb      	str	r3, [r7, #12]
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2b09      	cmp	r3, #9
 8015670:	ddd4      	ble.n	801561c <_convertString2Time+0x94>
		}
	}
}
 8015672:	e000      	b.n	8015676 <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 8015674:	bf00      	nop
}
 8015676:	bf00      	nop
 8015678:	3714      	adds	r7, #20
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
 8015682:	bf00      	nop
 8015684:	0802834c 	.word	0x0802834c
 8015688:	66666667 	.word	0x66666667

0801568c <_convertString2Float>:

static double _convertString2Float(char* str)
{
 801568c:	b5b0      	push	{r4, r5, r7, lr}
 801568e:	b088      	sub	sp, #32
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 8015694:	f04f 0200 	mov.w	r2, #0
 8015698:	f04f 0300 	mov.w	r3, #0
 801569c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 80156a4:	69fb      	ldr	r3, [r7, #28]
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	2b2d      	cmp	r3, #45	; 0x2d
 80156aa:	d120      	bne.n	80156ee <_convertString2Float+0x62>
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	3301      	adds	r3, #1
 80156b0:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80156b2:	e01c      	b.n	80156ee <_convertString2Float+0x62>
		value *= 10;
 80156b4:	f04f 0200 	mov.w	r2, #0
 80156b8:	4b38      	ldr	r3, [pc, #224]	; (801579c <_convertString2Float+0x110>)
 80156ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80156be:	f7ea ff59 	bl	8000574 <__aeabi_dmul>
 80156c2:	4602      	mov	r2, r0
 80156c4:	460b      	mov	r3, r1
 80156c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	1c5a      	adds	r2, r3, #1
 80156ce:	61fa      	str	r2, [r7, #28]
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	3b30      	subs	r3, #48	; 0x30
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ea fee3 	bl	80004a0 <__aeabi_i2d>
 80156da:	4602      	mov	r2, r0
 80156dc:	460b      	mov	r3, r1
 80156de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80156e2:	f7ea fd91 	bl	8000208 <__adddf3>
 80156e6:	4602      	mov	r2, r0
 80156e8:	460b      	mov	r3, r1
 80156ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	3301      	adds	r3, #1
 80156f4:	4a2a      	ldr	r2, [pc, #168]	; (80157a0 <_convertString2Float+0x114>)
 80156f6:	4413      	add	r3, r2
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	f003 0304 	and.w	r3, r3, #4
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d1d8      	bne.n	80156b4 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	2b2d      	cmp	r3, #45	; 0x2d
 8015708:	d105      	bne.n	8015716 <_convertString2Float+0x8a>
 801570a:	693c      	ldr	r4, [r7, #16]
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8015712:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	2b2e      	cmp	r3, #46	; 0x2e
 801571c:	d133      	bne.n	8015786 <_convertString2Float+0xfa>
		p++;
 801571e:	69fb      	ldr	r3, [r7, #28]
 8015720:	3301      	adds	r3, #1
 8015722:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8015724:	f04f 0200 	mov.w	r2, #0
 8015728:	4b1c      	ldr	r3, [pc, #112]	; (801579c <_convertString2Float+0x110>)
 801572a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801572e:	e020      	b.n	8015772 <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	1c5a      	adds	r2, r3, #1
 8015734:	61fa      	str	r2, [r7, #28]
 8015736:	781b      	ldrb	r3, [r3, #0]
 8015738:	3b30      	subs	r3, #48	; 0x30
 801573a:	4618      	mov	r0, r3
 801573c:	f7ea feb0 	bl	80004a0 <__aeabi_i2d>
 8015740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015744:	f7eb f840 	bl	80007c8 <__aeabi_ddiv>
 8015748:	4602      	mov	r2, r0
 801574a:	460b      	mov	r3, r1
 801574c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015750:	f7ea fd5a 	bl	8000208 <__adddf3>
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 801575c:	f04f 0200 	mov.w	r2, #0
 8015760:	4b0e      	ldr	r3, [pc, #56]	; (801579c <_convertString2Float+0x110>)
 8015762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015766:	f7ea ff05 	bl	8000574 <__aeabi_dmul>
 801576a:	4602      	mov	r2, r0
 801576c:	460b      	mov	r3, r1
 801576e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015772:	69fb      	ldr	r3, [r7, #28]
 8015774:	781b      	ldrb	r3, [r3, #0]
 8015776:	3301      	adds	r3, #1
 8015778:	4a09      	ldr	r2, [pc, #36]	; (80157a0 <_convertString2Float+0x114>)
 801577a:	4413      	add	r3, r2
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	f003 0304 	and.w	r3, r3, #4
 8015782:	2b00      	cmp	r3, #0
 8015784:	d1d4      	bne.n	8015730 <_convertString2Float+0xa4>
		}
	}
	return value;
 8015786:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801578a:	ec43 2b17 	vmov	d7, r2, r3
}
 801578e:	eeb0 0a47 	vmov.f32	s0, s14
 8015792:	eef0 0a67 	vmov.f32	s1, s15
 8015796:	3720      	adds	r7, #32
 8015798:	46bd      	mov	sp, r7
 801579a:	bdb0      	pop	{r4, r5, r7, pc}
 801579c:	40240000 	.word	0x40240000
 80157a0:	0802834c 	.word	0x0802834c

080157a4 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b085      	sub	sp, #20
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80157ac:	2300      	movs	r3, #0
 80157ae:	60bb      	str	r3, [r7, #8]

	p = str;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	2b2d      	cmp	r3, #45	; 0x2d
 80157ba:	d111      	bne.n	80157e0 <_convertString2Interger+0x3c>
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3301      	adds	r3, #1
 80157c0:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 80157c2:	e00d      	b.n	80157e0 <_convertString2Interger+0x3c>
		value *= 10;
 80157c4:	68ba      	ldr	r2, [r7, #8]
 80157c6:	4613      	mov	r3, r2
 80157c8:	009b      	lsls	r3, r3, #2
 80157ca:	4413      	add	r3, r2
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	1c5a      	adds	r2, r3, #1
 80157d4:	60fa      	str	r2, [r7, #12]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	3b30      	subs	r3, #48	; 0x30
 80157da:	68ba      	ldr	r2, [r7, #8]
 80157dc:	4413      	add	r3, r2
 80157de:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	781b      	ldrb	r3, [r3, #0]
 80157e4:	3301      	adds	r3, #1
 80157e6:	4a0a      	ldr	r2, [pc, #40]	; (8015810 <_convertString2Interger+0x6c>)
 80157e8:	4413      	add	r3, r2
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	f003 0304 	and.w	r3, r3, #4
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d1e7      	bne.n	80157c4 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	781b      	ldrb	r3, [r3, #0]
 80157f8:	2b2d      	cmp	r3, #45	; 0x2d
 80157fa:	d102      	bne.n	8015802 <_convertString2Interger+0x5e>
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	425b      	negs	r3, r3
 8015800:	60bb      	str	r3, [r7, #8]
	return value;
 8015802:	68bb      	ldr	r3, [r7, #8]
}
 8015804:	4618      	mov	r0, r3
 8015806:	3714      	adds	r7, #20
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr
 8015810:	0802834c 	.word	0x0802834c
 8015814:	00000000 	.word	0x00000000

08015818 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015818:	b5b0      	push	{r4, r5, r7, lr}
 801581a:	b088      	sub	sp, #32
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015820:	2300      	movs	r3, #0
 8015822:	75fb      	strb	r3, [r7, #23]
 8015824:	2300      	movs	r3, #0
 8015826:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015828:	2300      	movs	r3, #0
 801582a:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	61fb      	str	r3, [r7, #28]
 8015830:	e002      	b.n	8015838 <_convertString2Degrees+0x20>
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	3301      	adds	r3, #1
 8015836:	61fb      	str	r3, [r7, #28]
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	3301      	adds	r3, #1
 801583e:	4a46      	ldr	r2, [pc, #280]	; (8015958 <_convertString2Degrees+0x140>)
 8015840:	4413      	add	r3, r2
 8015842:	781b      	ldrb	r3, [r3, #0]
 8015844:	f003 0304 	and.w	r3, r3, #4
 8015848:	2b00      	cmp	r3, #0
 801584a:	d1f2      	bne.n	8015832 <_convertString2Degrees+0x1a>
	q = s;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015850:	e011      	b.n	8015876 <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015852:	7dfb      	ldrb	r3, [r7, #23]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d005      	beq.n	8015864 <_convertString2Degrees+0x4c>
 8015858:	7dfb      	ldrb	r3, [r7, #23]
 801585a:	461a      	mov	r2, r3
 801585c:	0092      	lsls	r2, r2, #2
 801585e:	4413      	add	r3, r2
 8015860:	005b      	lsls	r3, r3, #1
 8015862:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	1c5a      	adds	r2, r3, #1
 8015868:	61ba      	str	r2, [r7, #24]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	3b30      	subs	r3, #48	; 0x30
 801586e:	b2da      	uxtb	r2, r3
 8015870:	7dfb      	ldrb	r3, [r7, #23]
 8015872:	4413      	add	r3, r2
 8015874:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 8015876:	69fa      	ldr	r2, [r7, #28]
 8015878:	69bb      	ldr	r3, [r7, #24]
 801587a:	1ad3      	subs	r3, r2, r3
 801587c:	2b02      	cmp	r3, #2
 801587e:	dce8      	bgt.n	8015852 <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015880:	e011      	b.n	80158a6 <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 8015882:	7dbb      	ldrb	r3, [r7, #22]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d005      	beq.n	8015894 <_convertString2Degrees+0x7c>
 8015888:	7dbb      	ldrb	r3, [r7, #22]
 801588a:	461a      	mov	r2, r3
 801588c:	0092      	lsls	r2, r2, #2
 801588e:	4413      	add	r3, r2
 8015890:	005b      	lsls	r3, r3, #1
 8015892:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8015894:	69bb      	ldr	r3, [r7, #24]
 8015896:	1c5a      	adds	r2, r3, #1
 8015898:	61ba      	str	r2, [r7, #24]
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	3b30      	subs	r3, #48	; 0x30
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	7dbb      	ldrb	r3, [r7, #22]
 80158a2:	4413      	add	r3, r2
 80158a4:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 80158a6:	69fa      	ldr	r2, [r7, #28]
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d8e9      	bhi.n	8015882 <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 80158ae:	69fb      	ldr	r3, [r7, #28]
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	2b2e      	cmp	r3, #46	; 0x2e
 80158b4:	d124      	bne.n	8015900 <_convertString2Degrees+0xe8>
		q = p + 1;
 80158b6:	69fb      	ldr	r3, [r7, #28]
 80158b8:	3301      	adds	r3, #1
 80158ba:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 80158bc:	2300      	movs	r3, #0
 80158be:	73fb      	strb	r3, [r7, #15]
 80158c0:	e01b      	b.n	80158fa <_convertString2Degrees+0xe2>
			frac_min *= 10;
 80158c2:	693a      	ldr	r2, [r7, #16]
 80158c4:	4613      	mov	r3, r2
 80158c6:	009b      	lsls	r3, r3, #2
 80158c8:	4413      	add	r3, r2
 80158ca:	005b      	lsls	r3, r3, #1
 80158cc:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	781b      	ldrb	r3, [r3, #0]
 80158d2:	3301      	adds	r3, #1
 80158d4:	4a20      	ldr	r2, [pc, #128]	; (8015958 <_convertString2Degrees+0x140>)
 80158d6:	4413      	add	r3, r2
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	f003 0304 	and.w	r3, r3, #4
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d008      	beq.n	80158f4 <_convertString2Degrees+0xdc>
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	1c5a      	adds	r2, r3, #1
 80158e6:	61ba      	str	r2, [r7, #24]
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	3b30      	subs	r3, #48	; 0x30
 80158ec:	461a      	mov	r2, r3
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	4413      	add	r3, r2
 80158f2:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 80158f4:	7bfb      	ldrb	r3, [r7, #15]
 80158f6:	3301      	adds	r3, #1
 80158f8:	73fb      	strb	r3, [r7, #15]
 80158fa:	7bfb      	ldrb	r3, [r7, #15]
 80158fc:	2b03      	cmp	r3, #3
 80158fe:	d9e0      	bls.n	80158c2 <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015900:	7dfb      	ldrb	r3, [r7, #23]
 8015902:	4618      	mov	r0, r3
 8015904:	f7ea fdcc 	bl	80004a0 <__aeabi_i2d>
 8015908:	4604      	mov	r4, r0
 801590a:	460d      	mov	r5, r1
 801590c:	7dbb      	ldrb	r3, [r7, #22]
 801590e:	f242 7210 	movw	r2, #10000	; 0x2710
 8015912:	fb03 f202 	mul.w	r2, r3, r2
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	4413      	add	r3, r2
 801591a:	4618      	mov	r0, r3
 801591c:	f7ea fdb0 	bl	8000480 <__aeabi_ui2d>
 8015920:	a30b      	add	r3, pc, #44	; (adr r3, 8015950 <_convertString2Degrees+0x138>)
 8015922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015926:	f7ea ff4f 	bl	80007c8 <__aeabi_ddiv>
 801592a:	4602      	mov	r2, r0
 801592c:	460b      	mov	r3, r1
 801592e:	4620      	mov	r0, r4
 8015930:	4629      	mov	r1, r5
 8015932:	f7ea fc69 	bl	8000208 <__adddf3>
 8015936:	4602      	mov	r2, r0
 8015938:	460b      	mov	r3, r1
 801593a:	ec43 2b17 	vmov	d7, r2, r3
}
 801593e:	eeb0 0a47 	vmov.f32	s0, s14
 8015942:	eef0 0a67 	vmov.f32	s1, s15
 8015946:	3720      	adds	r7, #32
 8015948:	46bd      	mov	sp, r7
 801594a:	bdb0      	pop	{r4, r5, r7, pc}
 801594c:	f3af 8000 	nop.w
 8015950:	00000000 	.word	0x00000000
 8015954:	41224f80 	.word	0x41224f80
 8015958:	0802834c 	.word	0x0802834c

0801595c <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 801595c:	b480      	push	{r7}
 801595e:	b083      	sub	sp, #12
 8015960:	af00      	add	r7, sp, #0
 8015962:	4603      	mov	r3, r0
 8015964:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015966:	79fb      	ldrb	r3, [r7, #7]
 8015968:	3b30      	subs	r3, #48	; 0x30
 801596a:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 801596c:	79fb      	ldrb	r3, [r7, #7]
 801596e:	2b09      	cmp	r3, #9
 8015970:	d902      	bls.n	8015978 <_convertAscii2Hex+0x1c>
 8015972:	79fb      	ldrb	r3, [r7, #7]
 8015974:	3b07      	subs	r3, #7
 8015976:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015978:	79fb      	ldrb	r3, [r7, #7]
 801597a:	f003 030f 	and.w	r3, r3, #15
 801597e:	71fb      	strb	r3, [r7, #7]
	return n;
 8015980:	79fb      	ldrb	r3, [r7, #7]
}
 8015982:	4618      	mov	r0, r3
 8015984:	370c      	adds	r7, #12
 8015986:	46bd      	mov	sp, r7
 8015988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598c:	4770      	bx	lr

0801598e <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b084      	sub	sp, #16
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 801599a:	68fa      	ldr	r2, [r7, #12]
 801599c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80159a0:	f36f 0341 	bfc	r3, #1, #1
 80159a4:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 80159a8:	68fa      	ldr	r2, [r7, #12]
 80159aa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80159ae:	f36f 0300 	bfc	r3, #0, #1
 80159b2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	2200      	movs	r2, #0
 80159ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d003      	beq.n	80159ce <_evtTimerFinish+0x40>
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159ca:	68f8      	ldr	r0, [r7, #12]
 80159cc:	4798      	blx	r3
}
 80159ce:	bf00      	nop
 80159d0:	3710      	adds	r7, #16
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
	...

080159d8 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	460b      	mov	r3, r1
 80159e2:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d104      	bne.n	80159f4 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80159ea:	4b0e      	ldr	r3, [pc, #56]	; (8015a24 <pifGps_Init+0x4c>)
 80159ec:	2201      	movs	r2, #1
 80159ee:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80159f0:	2300      	movs	r3, #0
 80159f2:	e012      	b.n	8015a1a <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 80159f4:	2268      	movs	r2, #104	; 0x68
 80159f6:	2100      	movs	r1, #0
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f00c fa7f 	bl	8021efc <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80159fe:	887b      	ldrh	r3, [r7, #2]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d106      	bne.n	8015a12 <pifGps_Init+0x3a>
 8015a04:	4b08      	ldr	r3, [pc, #32]	; (8015a28 <pifGps_Init+0x50>)
 8015a06:	881b      	ldrh	r3, [r3, #0]
 8015a08:	1c5a      	adds	r2, r3, #1
 8015a0a:	b291      	uxth	r1, r2
 8015a0c:	4a06      	ldr	r2, [pc, #24]	; (8015a28 <pifGps_Init+0x50>)
 8015a0e:	8011      	strh	r1, [r2, #0]
 8015a10:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	887a      	ldrh	r2, [r7, #2]
 8015a16:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015a18:	2301      	movs	r3, #1
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3708      	adds	r7, #8
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	200020c9 	.word	0x200020c9
 8015a28:	2000005c 	.word	0x2000005c

08015a2c <pifGps_Clear>:

void pifGps_Clear(PifGps* p_owner)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_txt) {
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d007      	beq.n	8015a4c <pifGps_Clear+0x20>
		free(p_owner->__p_txt);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a40:	4618      	mov	r0, r3
 8015a42:	f00c fa45 	bl	8021ed0 <free>
		p_owner->__p_txt = NULL;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	p_owner->__evt_text = NULL;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	661a      	str	r2, [r3, #96]	; 0x60
}
 8015a52:	bf00      	nop
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
	...

08015a5c <pifGps_SetTimeout>:

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d025      	beq.n	8015abc <pifGps_SetTimeout+0x60>
		if (!p_owner->__p_timer) {
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d116      	bne.n	8015aa6 <pifGps_SetTimeout+0x4a>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015a78:	2100      	movs	r1, #0
 8015a7a:	68b8      	ldr	r0, [r7, #8]
 8015a7c:	f7ff f9b2 	bl	8014de4 <pifTimerManager_Add>
 8015a80:	4602      	mov	r2, r0
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	655a      	str	r2, [r3, #84]	; 0x54
			if (!p_owner->__p_timer) return FALSE;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d101      	bne.n	8015a92 <pifGps_SetTimeout+0x36>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e01e      	b.n	8015ad0 <pifGps_SetTimeout+0x74>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a96:	68fa      	ldr	r2, [r7, #12]
 8015a98:	490f      	ldr	r1, [pc, #60]	; (8015ad8 <pifGps_SetTimeout+0x7c>)
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7ff facf 	bl	801503e <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	683a      	ldr	r2, [r7, #0]
 8015aa4:	65da      	str	r2, [r3, #92]	; 0x5c
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7ff f9d1 	bl	8014e54 <pifTimer_Start>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d10a      	bne.n	8015ace <pifGps_SetTimeout+0x72>
 8015ab8:	2300      	movs	r3, #0
 8015aba:	e009      	b.n	8015ad0 <pifGps_SetTimeout+0x74>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d004      	beq.n	8015ace <pifGps_SetTimeout+0x72>
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7ff f9f1 	bl	8014eb0 <pifTimer_Stop>
	}
    return TRUE;
 8015ace:	2301      	movs	r3, #1
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}
 8015ad8:	0801598f 	.word	0x0801598f

08015adc <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015aea:	f043 0302 	orr.w	r3, r3, #2
 8015aee:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d003      	beq.n	8015b02 <pifGps_SendEvent+0x26>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d004      	beq.n	8015b14 <pifGps_SendEvent+0x38>
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7ff f9e4 	bl	8014edc <pifTimer_Reset>
}
 8015b14:	bf00      	nop
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	0000      	movs	r0, r0
	...

08015b20 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015b24:	b090      	sub	sp, #64	; 0x40
 8015b26:	af02      	add	r7, sp, #8
 8015b28:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015b30:	2300      	movs	r3, #0
 8015b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t frame_ok = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static uint16_t msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b40:	2b24      	cmp	r3, #36	; 0x24
 8015b42:	d11a      	bne.n	8015b7a <pifGps_ParsingNmea+0x5a>
		param = 0;
 8015b44:	4b80      	ldr	r3, [pc, #512]	; (8015d48 <pifGps_ParsingNmea+0x228>)
 8015b46:	2200      	movs	r2, #0
 8015b48:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015b4a:	4b80      	ldr	r3, [pc, #512]	; (8015d4c <pifGps_ParsingNmea+0x22c>)
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015b50:	4b7f      	ldr	r3, [pc, #508]	; (8015d50 <pifGps_ParsingNmea+0x230>)
 8015b52:	2200      	movs	r2, #0
 8015b54:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d00a      	beq.n	8015b74 <pifGps_ParsingNmea+0x54>
			string[0] = c;
 8015b5e:	4a7d      	ldr	r2, [pc, #500]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015b60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b64:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015b66:	4b7b      	ldr	r3, [pc, #492]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015b68:	2200      	movs	r2, #0
 8015b6a:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6e:	689b      	ldr	r3, [r3, #8]
 8015b70:	4878      	ldr	r0, [pc, #480]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015b72:	4798      	blx	r3
		}
		return TRUE;
 8015b74:	2301      	movs	r3, #1
 8015b76:	f000 bc8f 	b.w	8016498 <pifGps_ParsingNmea+0x978>
	}
	else if (c == ',' || c == '*') {
 8015b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b7e:	2b2c      	cmp	r3, #44	; 0x2c
 8015b80:	d004      	beq.n	8015b8c <pifGps_ParsingNmea+0x6c>
 8015b82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b86:	2b2a      	cmp	r3, #42	; 0x2a
 8015b88:	f040 83e2 	bne.w	8016350 <pifGps_ParsingNmea+0x830>
		string[offset] = 0;
 8015b8c:	4b6f      	ldr	r3, [pc, #444]	; (8015d4c <pifGps_ParsingNmea+0x22c>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	4619      	mov	r1, r3
 8015b92:	4a70      	ldr	r2, [pc, #448]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015b94:	2300      	movs	r3, #0
 8015b96:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015b98:	4b6b      	ldr	r3, [pc, #428]	; (8015d48 <pifGps_ParsingNmea+0x228>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f040 8100 	bne.w	8015da2 <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015ba2:	4b6d      	ldr	r3, [pc, #436]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	801a      	strh	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015ba8:	4b6a      	ldr	r3, [pc, #424]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015baa:	789b      	ldrb	r3, [r3, #2]
 8015bac:	2b44      	cmp	r3, #68	; 0x44
 8015bae:	d10b      	bne.n	8015bc8 <pifGps_ParsingNmea+0xa8>
 8015bb0:	4b68      	ldr	r3, [pc, #416]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bb2:	78db      	ldrb	r3, [r3, #3]
 8015bb4:	2b54      	cmp	r3, #84	; 0x54
 8015bb6:	d107      	bne.n	8015bc8 <pifGps_ParsingNmea+0xa8>
 8015bb8:	4b66      	ldr	r3, [pc, #408]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bba:	791b      	ldrb	r3, [r3, #4]
 8015bbc:	2b4d      	cmp	r3, #77	; 0x4d
 8015bbe:	d103      	bne.n	8015bc8 <pifGps_ParsingNmea+0xa8>
 8015bc0:	4b65      	ldr	r3, [pc, #404]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	801a      	strh	r2, [r3, #0]
 8015bc6:	e38c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015bc8:	4b62      	ldr	r3, [pc, #392]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bca:	789b      	ldrb	r3, [r3, #2]
 8015bcc:	2b47      	cmp	r3, #71	; 0x47
 8015bce:	d10b      	bne.n	8015be8 <pifGps_ParsingNmea+0xc8>
 8015bd0:	4b60      	ldr	r3, [pc, #384]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bd2:	78db      	ldrb	r3, [r3, #3]
 8015bd4:	2b42      	cmp	r3, #66	; 0x42
 8015bd6:	d107      	bne.n	8015be8 <pifGps_ParsingNmea+0xc8>
 8015bd8:	4b5e      	ldr	r3, [pc, #376]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bda:	791b      	ldrb	r3, [r3, #4]
 8015bdc:	2b53      	cmp	r3, #83	; 0x53
 8015bde:	d103      	bne.n	8015be8 <pifGps_ParsingNmea+0xc8>
 8015be0:	4b5d      	ldr	r3, [pc, #372]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015be2:	2202      	movs	r2, #2
 8015be4:	801a      	strh	r2, [r3, #0]
 8015be6:	e37c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015be8:	4b5a      	ldr	r3, [pc, #360]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bea:	789b      	ldrb	r3, [r3, #2]
 8015bec:	2b47      	cmp	r3, #71	; 0x47
 8015bee:	d10b      	bne.n	8015c08 <pifGps_ParsingNmea+0xe8>
 8015bf0:	4b58      	ldr	r3, [pc, #352]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bf2:	78db      	ldrb	r3, [r3, #3]
 8015bf4:	2b47      	cmp	r3, #71	; 0x47
 8015bf6:	d107      	bne.n	8015c08 <pifGps_ParsingNmea+0xe8>
 8015bf8:	4b56      	ldr	r3, [pc, #344]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015bfa:	791b      	ldrb	r3, [r3, #4]
 8015bfc:	2b41      	cmp	r3, #65	; 0x41
 8015bfe:	d103      	bne.n	8015c08 <pifGps_ParsingNmea+0xe8>
 8015c00:	4b55      	ldr	r3, [pc, #340]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015c02:	2203      	movs	r2, #3
 8015c04:	801a      	strh	r2, [r3, #0]
 8015c06:	e36c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015c08:	4b52      	ldr	r3, [pc, #328]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c0a:	789b      	ldrb	r3, [r3, #2]
 8015c0c:	2b47      	cmp	r3, #71	; 0x47
 8015c0e:	d10b      	bne.n	8015c28 <pifGps_ParsingNmea+0x108>
 8015c10:	4b50      	ldr	r3, [pc, #320]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c12:	78db      	ldrb	r3, [r3, #3]
 8015c14:	2b4c      	cmp	r3, #76	; 0x4c
 8015c16:	d107      	bne.n	8015c28 <pifGps_ParsingNmea+0x108>
 8015c18:	4b4e      	ldr	r3, [pc, #312]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c1a:	791b      	ldrb	r3, [r3, #4]
 8015c1c:	2b4c      	cmp	r3, #76	; 0x4c
 8015c1e:	d103      	bne.n	8015c28 <pifGps_ParsingNmea+0x108>
 8015c20:	4b4d      	ldr	r3, [pc, #308]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015c22:	2204      	movs	r2, #4
 8015c24:	801a      	strh	r2, [r3, #0]
 8015c26:	e35c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015c28:	4b4a      	ldr	r3, [pc, #296]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c2a:	789b      	ldrb	r3, [r3, #2]
 8015c2c:	2b47      	cmp	r3, #71	; 0x47
 8015c2e:	d10b      	bne.n	8015c48 <pifGps_ParsingNmea+0x128>
 8015c30:	4b48      	ldr	r3, [pc, #288]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c32:	78db      	ldrb	r3, [r3, #3]
 8015c34:	2b4e      	cmp	r3, #78	; 0x4e
 8015c36:	d107      	bne.n	8015c48 <pifGps_ParsingNmea+0x128>
 8015c38:	4b46      	ldr	r3, [pc, #280]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c3a:	791b      	ldrb	r3, [r3, #4]
 8015c3c:	2b53      	cmp	r3, #83	; 0x53
 8015c3e:	d103      	bne.n	8015c48 <pifGps_ParsingNmea+0x128>
 8015c40:	4b45      	ldr	r3, [pc, #276]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015c42:	2205      	movs	r2, #5
 8015c44:	801a      	strh	r2, [r3, #0]
 8015c46:	e34c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015c48:	4b42      	ldr	r3, [pc, #264]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c4a:	789b      	ldrb	r3, [r3, #2]
 8015c4c:	2b47      	cmp	r3, #71	; 0x47
 8015c4e:	d10b      	bne.n	8015c68 <pifGps_ParsingNmea+0x148>
 8015c50:	4b40      	ldr	r3, [pc, #256]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c52:	78db      	ldrb	r3, [r3, #3]
 8015c54:	2b52      	cmp	r3, #82	; 0x52
 8015c56:	d107      	bne.n	8015c68 <pifGps_ParsingNmea+0x148>
 8015c58:	4b3e      	ldr	r3, [pc, #248]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c5a:	791b      	ldrb	r3, [r3, #4]
 8015c5c:	2b53      	cmp	r3, #83	; 0x53
 8015c5e:	d103      	bne.n	8015c68 <pifGps_ParsingNmea+0x148>
 8015c60:	4b3d      	ldr	r3, [pc, #244]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015c62:	2206      	movs	r2, #6
 8015c64:	801a      	strh	r2, [r3, #0]
 8015c66:	e33c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015c68:	4b3a      	ldr	r3, [pc, #232]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c6a:	789b      	ldrb	r3, [r3, #2]
 8015c6c:	2b47      	cmp	r3, #71	; 0x47
 8015c6e:	d10b      	bne.n	8015c88 <pifGps_ParsingNmea+0x168>
 8015c70:	4b38      	ldr	r3, [pc, #224]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c72:	78db      	ldrb	r3, [r3, #3]
 8015c74:	2b53      	cmp	r3, #83	; 0x53
 8015c76:	d107      	bne.n	8015c88 <pifGps_ParsingNmea+0x168>
 8015c78:	4b36      	ldr	r3, [pc, #216]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c7a:	791b      	ldrb	r3, [r3, #4]
 8015c7c:	2b41      	cmp	r3, #65	; 0x41
 8015c7e:	d103      	bne.n	8015c88 <pifGps_ParsingNmea+0x168>
 8015c80:	4b35      	ldr	r3, [pc, #212]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015c82:	2207      	movs	r2, #7
 8015c84:	801a      	strh	r2, [r3, #0]
 8015c86:	e32c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015c88:	4b32      	ldr	r3, [pc, #200]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c8a:	789b      	ldrb	r3, [r3, #2]
 8015c8c:	2b47      	cmp	r3, #71	; 0x47
 8015c8e:	d10b      	bne.n	8015ca8 <pifGps_ParsingNmea+0x188>
 8015c90:	4b30      	ldr	r3, [pc, #192]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c92:	78db      	ldrb	r3, [r3, #3]
 8015c94:	2b53      	cmp	r3, #83	; 0x53
 8015c96:	d107      	bne.n	8015ca8 <pifGps_ParsingNmea+0x188>
 8015c98:	4b2e      	ldr	r3, [pc, #184]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015c9a:	791b      	ldrb	r3, [r3, #4]
 8015c9c:	2b54      	cmp	r3, #84	; 0x54
 8015c9e:	d103      	bne.n	8015ca8 <pifGps_ParsingNmea+0x188>
 8015ca0:	4b2d      	ldr	r3, [pc, #180]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015ca2:	2208      	movs	r2, #8
 8015ca4:	801a      	strh	r2, [r3, #0]
 8015ca6:	e31c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015ca8:	4b2a      	ldr	r3, [pc, #168]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015caa:	789b      	ldrb	r3, [r3, #2]
 8015cac:	2b47      	cmp	r3, #71	; 0x47
 8015cae:	d10b      	bne.n	8015cc8 <pifGps_ParsingNmea+0x1a8>
 8015cb0:	4b28      	ldr	r3, [pc, #160]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cb2:	78db      	ldrb	r3, [r3, #3]
 8015cb4:	2b53      	cmp	r3, #83	; 0x53
 8015cb6:	d107      	bne.n	8015cc8 <pifGps_ParsingNmea+0x1a8>
 8015cb8:	4b26      	ldr	r3, [pc, #152]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cba:	791b      	ldrb	r3, [r3, #4]
 8015cbc:	2b56      	cmp	r3, #86	; 0x56
 8015cbe:	d103      	bne.n	8015cc8 <pifGps_ParsingNmea+0x1a8>
 8015cc0:	4b25      	ldr	r3, [pc, #148]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015cc2:	2209      	movs	r2, #9
 8015cc4:	801a      	strh	r2, [r3, #0]
 8015cc6:	e30c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015cc8:	4b22      	ldr	r3, [pc, #136]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cca:	789b      	ldrb	r3, [r3, #2]
 8015ccc:	2b52      	cmp	r3, #82	; 0x52
 8015cce:	d10b      	bne.n	8015ce8 <pifGps_ParsingNmea+0x1c8>
 8015cd0:	4b20      	ldr	r3, [pc, #128]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cd2:	78db      	ldrb	r3, [r3, #3]
 8015cd4:	2b4d      	cmp	r3, #77	; 0x4d
 8015cd6:	d107      	bne.n	8015ce8 <pifGps_ParsingNmea+0x1c8>
 8015cd8:	4b1e      	ldr	r3, [pc, #120]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cda:	791b      	ldrb	r3, [r3, #4]
 8015cdc:	2b43      	cmp	r3, #67	; 0x43
 8015cde:	d103      	bne.n	8015ce8 <pifGps_ParsingNmea+0x1c8>
 8015ce0:	4b1d      	ldr	r3, [pc, #116]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015ce2:	220a      	movs	r2, #10
 8015ce4:	801a      	strh	r2, [r3, #0]
 8015ce6:	e2fc      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015ce8:	4b1a      	ldr	r3, [pc, #104]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cea:	789b      	ldrb	r3, [r3, #2]
 8015cec:	2b54      	cmp	r3, #84	; 0x54
 8015cee:	d10b      	bne.n	8015d08 <pifGps_ParsingNmea+0x1e8>
 8015cf0:	4b18      	ldr	r3, [pc, #96]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cf2:	78db      	ldrb	r3, [r3, #3]
 8015cf4:	2b48      	cmp	r3, #72	; 0x48
 8015cf6:	d107      	bne.n	8015d08 <pifGps_ParsingNmea+0x1e8>
 8015cf8:	4b16      	ldr	r3, [pc, #88]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015cfa:	791b      	ldrb	r3, [r3, #4]
 8015cfc:	2b53      	cmp	r3, #83	; 0x53
 8015cfe:	d103      	bne.n	8015d08 <pifGps_ParsingNmea+0x1e8>
 8015d00:	4b15      	ldr	r3, [pc, #84]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015d02:	220b      	movs	r2, #11
 8015d04:	801a      	strh	r2, [r3, #0]
 8015d06:	e2ec      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015d08:	4b12      	ldr	r3, [pc, #72]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015d0a:	789b      	ldrb	r3, [r3, #2]
 8015d0c:	2b54      	cmp	r3, #84	; 0x54
 8015d0e:	d10b      	bne.n	8015d28 <pifGps_ParsingNmea+0x208>
 8015d10:	4b10      	ldr	r3, [pc, #64]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015d12:	78db      	ldrb	r3, [r3, #3]
 8015d14:	2b58      	cmp	r3, #88	; 0x58
 8015d16:	d107      	bne.n	8015d28 <pifGps_ParsingNmea+0x208>
 8015d18:	4b0e      	ldr	r3, [pc, #56]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015d1a:	791b      	ldrb	r3, [r3, #4]
 8015d1c:	2b54      	cmp	r3, #84	; 0x54
 8015d1e:	d103      	bne.n	8015d28 <pifGps_ParsingNmea+0x208>
 8015d20:	4b0d      	ldr	r3, [pc, #52]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015d22:	220c      	movs	r2, #12
 8015d24:	801a      	strh	r2, [r3, #0]
 8015d26:	e2dc      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015d28:	4b0a      	ldr	r3, [pc, #40]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015d2a:	789b      	ldrb	r3, [r3, #2]
 8015d2c:	2b56      	cmp	r3, #86	; 0x56
 8015d2e:	d115      	bne.n	8015d5c <pifGps_ParsingNmea+0x23c>
 8015d30:	4b08      	ldr	r3, [pc, #32]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015d32:	78db      	ldrb	r3, [r3, #3]
 8015d34:	2b4c      	cmp	r3, #76	; 0x4c
 8015d36:	d111      	bne.n	8015d5c <pifGps_ParsingNmea+0x23c>
 8015d38:	4b06      	ldr	r3, [pc, #24]	; (8015d54 <pifGps_ParsingNmea+0x234>)
 8015d3a:	791b      	ldrb	r3, [r3, #4]
 8015d3c:	2b57      	cmp	r3, #87	; 0x57
 8015d3e:	d10d      	bne.n	8015d5c <pifGps_ParsingNmea+0x23c>
 8015d40:	4b05      	ldr	r3, [pc, #20]	; (8015d58 <pifGps_ParsingNmea+0x238>)
 8015d42:	220d      	movs	r2, #13
 8015d44:	801a      	strh	r2, [r3, #0]
 8015d46:	e2cc      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
 8015d48:	20002248 	.word	0x20002248
 8015d4c:	20002249 	.word	0x20002249
 8015d50:	2000224a 	.word	0x2000224a
 8015d54:	2000224c 	.word	0x2000224c
 8015d58:	2000226c 	.word	0x2000226c
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015d5c:	4ba1      	ldr	r3, [pc, #644]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015d5e:	789b      	ldrb	r3, [r3, #2]
 8015d60:	2b56      	cmp	r3, #86	; 0x56
 8015d62:	d10b      	bne.n	8015d7c <pifGps_ParsingNmea+0x25c>
 8015d64:	4b9f      	ldr	r3, [pc, #636]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015d66:	78db      	ldrb	r3, [r3, #3]
 8015d68:	2b54      	cmp	r3, #84	; 0x54
 8015d6a:	d107      	bne.n	8015d7c <pifGps_ParsingNmea+0x25c>
 8015d6c:	4b9d      	ldr	r3, [pc, #628]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015d6e:	791b      	ldrb	r3, [r3, #4]
 8015d70:	2b47      	cmp	r3, #71	; 0x47
 8015d72:	d103      	bne.n	8015d7c <pifGps_ParsingNmea+0x25c>
 8015d74:	4b9c      	ldr	r3, [pc, #624]	; (8015fe8 <pifGps_ParsingNmea+0x4c8>)
 8015d76:	220e      	movs	r2, #14
 8015d78:	801a      	strh	r2, [r3, #0]
 8015d7a:	e2b2      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015d7c:	4b99      	ldr	r3, [pc, #612]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015d7e:	789b      	ldrb	r3, [r3, #2]
 8015d80:	2b5a      	cmp	r3, #90	; 0x5a
 8015d82:	f040 82ae 	bne.w	80162e2 <pifGps_ParsingNmea+0x7c2>
 8015d86:	4b97      	ldr	r3, [pc, #604]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015d88:	78db      	ldrb	r3, [r3, #3]
 8015d8a:	2b44      	cmp	r3, #68	; 0x44
 8015d8c:	f040 82a9 	bne.w	80162e2 <pifGps_ParsingNmea+0x7c2>
 8015d90:	4b94      	ldr	r3, [pc, #592]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015d92:	791b      	ldrb	r3, [r3, #4]
 8015d94:	2b41      	cmp	r3, #65	; 0x41
 8015d96:	f040 82a4 	bne.w	80162e2 <pifGps_ParsingNmea+0x7c2>
 8015d9a:	4b93      	ldr	r3, [pc, #588]	; (8015fe8 <pifGps_ParsingNmea+0x4c8>)
 8015d9c:	220f      	movs	r2, #15
 8015d9e:	801a      	strh	r2, [r3, #0]
 8015da0:	e29f      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
		}
		else if (offset) {
 8015da2:	4b92      	ldr	r3, [pc, #584]	; (8015fec <pifGps_ParsingNmea+0x4cc>)
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	f000 828c 	beq.w	80162c4 <pifGps_ParsingNmea+0x7a4>
			switch (msg_id) {
 8015dac:	4b8e      	ldr	r3, [pc, #568]	; (8015fe8 <pifGps_ParsingNmea+0x4c8>)
 8015dae:	881b      	ldrh	r3, [r3, #0]
 8015db0:	3b01      	subs	r3, #1
 8015db2:	2b0e      	cmp	r3, #14
 8015db4:	f200 8295 	bhi.w	80162e2 <pifGps_ParsingNmea+0x7c2>
 8015db8:	a201      	add	r2, pc, #4	; (adr r2, 8015dc0 <pifGps_ParsingNmea+0x2a0>)
 8015dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dbe:	bf00      	nop
 8015dc0:	080162e3 	.word	0x080162e3
 8015dc4:	080162e3 	.word	0x080162e3
 8015dc8:	08015dfd 	.word	0x08015dfd
 8015dcc:	08015f05 	.word	0x08015f05
 8015dd0:	08015faf 	.word	0x08015faf
 8015dd4:	080162e3 	.word	0x080162e3
 8015dd8:	080162e3 	.word	0x080162e3
 8015ddc:	080162e3 	.word	0x080162e3
 8015de0:	080162e3 	.word	0x080162e3
 8015de4:	0801609d 	.word	0x0801609d
 8015de8:	080162e3 	.word	0x080162e3
 8015dec:	08016197 	.word	0x08016197
 8015df0:	080162e3 	.word	0x080162e3
 8015df4:	08016209 	.word	0x08016209
 8015df8:	0801624f 	.word	0x0801624f

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015dfc:	4b7c      	ldr	r3, [pc, #496]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015dfe:	781b      	ldrb	r3, [r3, #0]
 8015e00:	2b01      	cmp	r3, #1
 8015e02:	d106      	bne.n	8015e12 <pifGps_ParsingNmea+0x2f2>
 8015e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e06:	330e      	adds	r3, #14
 8015e08:	4619      	mov	r1, r3
 8015e0a:	4876      	ldr	r0, [pc, #472]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015e0c:	f7ff fbbc 	bl	8015588 <_convertString2Time>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015e10:	e25a      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015e12:	4b77      	ldr	r3, [pc, #476]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d10a      	bne.n	8015e30 <pifGps_ParsingNmea+0x310>
 8015e1a:	4872      	ldr	r0, [pc, #456]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015e1c:	f7ff fcfc 	bl	8015818 <_convertString2Degrees>
 8015e20:	eeb0 7a40 	vmov.f32	s14, s0
 8015e24:	eef0 7a60 	vmov.f32	s15, s1
 8015e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e2a:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015e2e:	e24b      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015e30:	4b6f      	ldr	r3, [pc, #444]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	2b03      	cmp	r3, #3
 8015e36:	d110      	bne.n	8015e5a <pifGps_ParsingNmea+0x33a>
 8015e38:	4b6a      	ldr	r3, [pc, #424]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	2b53      	cmp	r3, #83	; 0x53
 8015e3e:	d10c      	bne.n	8015e5a <pifGps_ParsingNmea+0x33a>
 8015e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015e46:	623a      	str	r2, [r7, #32]
 8015e48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8015e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e50:	ed97 7b08 	vldr	d7, [r7, #32]
 8015e54:	ed83 7b06 	vstr	d7, [r3, #24]
 8015e58:	e053      	b.n	8015f02 <pifGps_ParsingNmea+0x3e2>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015e5a:	4b65      	ldr	r3, [pc, #404]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	d10a      	bne.n	8015e78 <pifGps_ParsingNmea+0x358>
 8015e62:	4860      	ldr	r0, [pc, #384]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015e64:	f7ff fcd8 	bl	8015818 <_convertString2Degrees>
 8015e68:	eeb0 7a40 	vmov.f32	s14, s0
 8015e6c:	eef0 7a60 	vmov.f32	s15, s1
 8015e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e72:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015e76:	e227      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015e78:	4b5d      	ldr	r3, [pc, #372]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2b05      	cmp	r3, #5
 8015e7e:	d110      	bne.n	8015ea2 <pifGps_ParsingNmea+0x382>
 8015e80:	4b58      	ldr	r3, [pc, #352]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	2b57      	cmp	r3, #87	; 0x57
 8015e86:	d10c      	bne.n	8015ea2 <pifGps_ParsingNmea+0x382>
 8015e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015e8e:	61ba      	str	r2, [r7, #24]
 8015e90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015e94:	61fb      	str	r3, [r7, #28]
 8015e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e98:	ed97 7b06 	vldr	d7, [r7, #24]
 8015e9c:	ed83 7b08 	vstr	d7, [r3, #32]
 8015ea0:	e02f      	b.n	8015f02 <pifGps_ParsingNmea+0x3e2>
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
 8015ea2:	4b53      	ldr	r3, [pc, #332]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	2b06      	cmp	r3, #6
 8015ea8:	d10e      	bne.n	8015ec8 <pifGps_ParsingNmea+0x3a8>
 8015eaa:	4b4e      	ldr	r3, [pc, #312]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	2b30      	cmp	r3, #48	; 0x30
 8015eb0:	bf8c      	ite	hi
 8015eb2:	2301      	movhi	r3, #1
 8015eb4:	2300      	movls	r3, #0
 8015eb6:	b2d9      	uxtb	r1, r3
 8015eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015eba:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015ebe:	f361 0300 	bfi	r3, r1, #0, #1
 8015ec2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
				break;
 8015ec6:	e1ff      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015ec8:	4b49      	ldr	r3, [pc, #292]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	2b07      	cmp	r3, #7
 8015ece:	d108      	bne.n	8015ee2 <pifGps_ParsingNmea+0x3c2>
 8015ed0:	4844      	ldr	r0, [pc, #272]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015ed2:	f7ff fc67 	bl	80157a4 <_convertString2Interger>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	b2da      	uxtb	r2, r3
 8015eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015ee0:	e1f2      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015ee2:	4b43      	ldr	r3, [pc, #268]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b09      	cmp	r3, #9
 8015ee8:	f040 81ee 	bne.w	80162c8 <pifGps_ParsingNmea+0x7a8>
 8015eec:	483d      	ldr	r0, [pc, #244]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015eee:	f7ff fbcd 	bl	801568c <_convertString2Float>
 8015ef2:	eeb0 7a40 	vmov.f32	s14, s0
 8015ef6:	eef0 7a60 	vmov.f32	s15, s1
 8015efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efc:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015f00:	e1e2      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>
 8015f02:	e1e1      	b.n	80162c8 <pifGps_ParsingNmea+0x7a8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				if (param == 1) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015f04:	4b3a      	ldr	r3, [pc, #232]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	2b01      	cmp	r3, #1
 8015f0a:	d10a      	bne.n	8015f22 <pifGps_ParsingNmea+0x402>
 8015f0c:	4835      	ldr	r0, [pc, #212]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015f0e:	f7ff fc83 	bl	8015818 <_convertString2Degrees>
 8015f12:	eeb0 7a40 	vmov.f32	s14, s0
 8015f16:	eef0 7a60 	vmov.f32	s15, s1
 8015f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1c:	ed83 7b06 	vstr	d7, [r3, #24]
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
				break;
 8015f20:	e1d4      	b.n	80162cc <pifGps_ParsingNmea+0x7ac>
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015f22:	4b33      	ldr	r3, [pc, #204]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	2b02      	cmp	r3, #2
 8015f28:	d110      	bne.n	8015f4c <pifGps_ParsingNmea+0x42c>
 8015f2a:	4b2e      	ldr	r3, [pc, #184]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	2b53      	cmp	r3, #83	; 0x53
 8015f30:	d10c      	bne.n	8015f4c <pifGps_ParsingNmea+0x42c>
 8015f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015f38:	613a      	str	r2, [r7, #16]
 8015f3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f3e:	617b      	str	r3, [r7, #20]
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	ed97 7b04 	vldr	d7, [r7, #16]
 8015f46:	ed83 7b06 	vstr	d7, [r3, #24]
 8015f4a:	e02f      	b.n	8015fac <pifGps_ParsingNmea+0x48c>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015f4c:	4b28      	ldr	r3, [pc, #160]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015f4e:	781b      	ldrb	r3, [r3, #0]
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d10a      	bne.n	8015f6a <pifGps_ParsingNmea+0x44a>
 8015f54:	4823      	ldr	r0, [pc, #140]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015f56:	f7ff fc5f 	bl	8015818 <_convertString2Degrees>
 8015f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8015f5e:	eef0 7a60 	vmov.f32	s15, s1
 8015f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f64:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015f68:	e1b0      	b.n	80162cc <pifGps_ParsingNmea+0x7ac>
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015f6a:	4b21      	ldr	r3, [pc, #132]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	2b04      	cmp	r3, #4
 8015f70:	d110      	bne.n	8015f94 <pifGps_ParsingNmea+0x474>
 8015f72:	4b1c      	ldr	r3, [pc, #112]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	2b57      	cmp	r3, #87	; 0x57
 8015f78:	d10c      	bne.n	8015f94 <pifGps_ParsingNmea+0x474>
 8015f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f80:	60ba      	str	r2, [r7, #8]
 8015f82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f86:	60fb      	str	r3, [r7, #12]
 8015f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8015f8e:	ed83 7b08 	vstr	d7, [r3, #32]
 8015f92:	e00b      	b.n	8015fac <pifGps_ParsingNmea+0x48c>
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
 8015f94:	4b16      	ldr	r3, [pc, #88]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b05      	cmp	r3, #5
 8015f9a:	f040 8197 	bne.w	80162cc <pifGps_ParsingNmea+0x7ac>
 8015f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa0:	330e      	adds	r3, #14
 8015fa2:	4619      	mov	r1, r3
 8015fa4:	480f      	ldr	r0, [pc, #60]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015fa6:	f7ff faef 	bl	8015588 <_convertString2Time>
				break;
 8015faa:	e18f      	b.n	80162cc <pifGps_ParsingNmea+0x7ac>
 8015fac:	e18e      	b.n	80162cc <pifGps_ParsingNmea+0x7ac>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015fae:	4b10      	ldr	r3, [pc, #64]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	2b01      	cmp	r3, #1
 8015fb4:	d106      	bne.n	8015fc4 <pifGps_ParsingNmea+0x4a4>
 8015fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb8:	330e      	adds	r3, #14
 8015fba:	4619      	mov	r1, r3
 8015fbc:	4809      	ldr	r0, [pc, #36]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015fbe:	f7ff fae3 	bl	8015588 <_convertString2Time>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015fc2:	e185      	b.n	80162d0 <pifGps_ParsingNmea+0x7b0>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015fc4:	4b0a      	ldr	r3, [pc, #40]	; (8015ff0 <pifGps_ParsingNmea+0x4d0>)
 8015fc6:	781b      	ldrb	r3, [r3, #0]
 8015fc8:	2b02      	cmp	r3, #2
 8015fca:	d113      	bne.n	8015ff4 <pifGps_ParsingNmea+0x4d4>
 8015fcc:	4805      	ldr	r0, [pc, #20]	; (8015fe4 <pifGps_ParsingNmea+0x4c4>)
 8015fce:	f7ff fc23 	bl	8015818 <_convertString2Degrees>
 8015fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8015fd6:	eef0 7a60 	vmov.f32	s15, s1
 8015fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fdc:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015fe0:	e176      	b.n	80162d0 <pifGps_ParsingNmea+0x7b0>
 8015fe2:	bf00      	nop
 8015fe4:	2000224c 	.word	0x2000224c
 8015fe8:	2000226c 	.word	0x2000226c
 8015fec:	20002249 	.word	0x20002249
 8015ff0:	20002248 	.word	0x20002248
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015ff4:	4b9e      	ldr	r3, [pc, #632]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8015ff6:	781b      	ldrb	r3, [r3, #0]
 8015ff8:	2b03      	cmp	r3, #3
 8015ffa:	d110      	bne.n	801601e <pifGps_ParsingNmea+0x4fe>
 8015ffc:	4b9d      	ldr	r3, [pc, #628]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	2b53      	cmp	r3, #83	; 0x53
 8016002:	d10c      	bne.n	801601e <pifGps_ParsingNmea+0x4fe>
 8016004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016006:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801600a:	603a      	str	r2, [r7, #0]
 801600c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016010:	607b      	str	r3, [r7, #4]
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	ed97 7b00 	vldr	d7, [r7]
 8016018:	ed83 7b06 	vstr	d7, [r3, #24]
 801601c:	e03d      	b.n	801609a <pifGps_ParsingNmea+0x57a>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 801601e:	4b94      	ldr	r3, [pc, #592]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	2b04      	cmp	r3, #4
 8016024:	d10a      	bne.n	801603c <pifGps_ParsingNmea+0x51c>
 8016026:	4893      	ldr	r0, [pc, #588]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016028:	f7ff fbf6 	bl	8015818 <_convertString2Degrees>
 801602c:	eeb0 7a40 	vmov.f32	s14, s0
 8016030:	eef0 7a60 	vmov.f32	s15, s1
 8016034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016036:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 801603a:	e149      	b.n	80162d0 <pifGps_ParsingNmea+0x7b0>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 801603c:	4b8c      	ldr	r3, [pc, #560]	; (8016270 <pifGps_ParsingNmea+0x750>)
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	2b05      	cmp	r3, #5
 8016042:	d10d      	bne.n	8016060 <pifGps_ParsingNmea+0x540>
 8016044:	4b8b      	ldr	r3, [pc, #556]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	2b57      	cmp	r3, #87	; 0x57
 801604a:	d109      	bne.n	8016060 <pifGps_ParsingNmea+0x540>
 801604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016052:	4692      	mov	sl, r2
 8016054:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8016058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605a:	e9c3 ab08 	strd	sl, fp, [r3, #32]
 801605e:	e01c      	b.n	801609a <pifGps_ParsingNmea+0x57a>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8016060:	4b83      	ldr	r3, [pc, #524]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	2b07      	cmp	r3, #7
 8016066:	d108      	bne.n	801607a <pifGps_ParsingNmea+0x55a>
 8016068:	4882      	ldr	r0, [pc, #520]	; (8016274 <pifGps_ParsingNmea+0x754>)
 801606a:	f7ff fb9b 	bl	80157a4 <_convertString2Interger>
 801606e:	4603      	mov	r3, r0
 8016070:	b2da      	uxtb	r2, r3
 8016072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8016078:	e12a      	b.n	80162d0 <pifGps_ParsingNmea+0x7b0>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 801607a:	4b7d      	ldr	r3, [pc, #500]	; (8016270 <pifGps_ParsingNmea+0x750>)
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	2b09      	cmp	r3, #9
 8016080:	f040 8126 	bne.w	80162d0 <pifGps_ParsingNmea+0x7b0>
 8016084:	487b      	ldr	r0, [pc, #492]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016086:	f7ff fb01 	bl	801568c <_convertString2Float>
 801608a:	eeb0 7a40 	vmov.f32	s14, s0
 801608e:	eef0 7a60 	vmov.f32	s15, s1
 8016092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016094:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8016098:	e11a      	b.n	80162d0 <pifGps_ParsingNmea+0x7b0>
 801609a:	e119      	b.n	80162d0 <pifGps_ParsingNmea+0x7b0>

			case PIF_GPS_NMEA_MSG_ID_GSV:
				break;

			case PIF_GPS_NMEA_MSG_ID_RMC:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 801609c:	4b74      	ldr	r3, [pc, #464]	; (8016270 <pifGps_ParsingNmea+0x750>)
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	d106      	bne.n	80160b2 <pifGps_ParsingNmea+0x592>
 80160a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a6:	330e      	adds	r3, #14
 80160a8:	4619      	mov	r1, r3
 80160aa:	4872      	ldr	r0, [pc, #456]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80160ac:	f7ff fa6c 	bl	8015588 <_convertString2Time>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
				break;
 80160b0:	e110      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80160b2:	4b6f      	ldr	r3, [pc, #444]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	2b03      	cmp	r3, #3
 80160b8:	d10a      	bne.n	80160d0 <pifGps_ParsingNmea+0x5b0>
 80160ba:	486e      	ldr	r0, [pc, #440]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80160bc:	f7ff fbac 	bl	8015818 <_convertString2Degrees>
 80160c0:	eeb0 7a40 	vmov.f32	s14, s0
 80160c4:	eef0 7a60 	vmov.f32	s15, s1
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 80160ce:	e101      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 4 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80160d0:	4b67      	ldr	r3, [pc, #412]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	2b04      	cmp	r3, #4
 80160d6:	d10d      	bne.n	80160f4 <pifGps_ParsingNmea+0x5d4>
 80160d8:	4b66      	ldr	r3, [pc, #408]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	2b53      	cmp	r3, #83	; 0x53
 80160de:	d109      	bne.n	80160f4 <pifGps_ParsingNmea+0x5d4>
 80160e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80160e6:	4690      	mov	r8, r2
 80160e8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80160ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ee:	e9c3 8906 	strd	r8, r9, [r3, #24]
 80160f2:	e04f      	b.n	8016194 <pifGps_ParsingNmea+0x674>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 80160f4:	4b5e      	ldr	r3, [pc, #376]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b05      	cmp	r3, #5
 80160fa:	d10a      	bne.n	8016112 <pifGps_ParsingNmea+0x5f2>
 80160fc:	485d      	ldr	r0, [pc, #372]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80160fe:	f7ff fb8b 	bl	8015818 <_convertString2Degrees>
 8016102:	eeb0 7a40 	vmov.f32	s14, s0
 8016106:	eef0 7a60 	vmov.f32	s15, s1
 801610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610c:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016110:	e0e0      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016112:	4b57      	ldr	r3, [pc, #348]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	2b06      	cmp	r3, #6
 8016118:	d10d      	bne.n	8016136 <pifGps_ParsingNmea+0x616>
 801611a:	4b56      	ldr	r3, [pc, #344]	; (8016274 <pifGps_ParsingNmea+0x754>)
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	2b57      	cmp	r3, #87	; 0x57
 8016120:	d109      	bne.n	8016136 <pifGps_ParsingNmea+0x616>
 8016122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016128:	4614      	mov	r4, r2
 801612a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016130:	e9c3 4508 	strd	r4, r5, [r3, #32]
 8016134:	e02e      	b.n	8016194 <pifGps_ParsingNmea+0x674>
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016136:	4b4e      	ldr	r3, [pc, #312]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	2b07      	cmp	r3, #7
 801613c:	d10f      	bne.n	801615e <pifGps_ParsingNmea+0x63e>
 801613e:	484d      	ldr	r0, [pc, #308]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016140:	f7ff faa4 	bl	801568c <_convertString2Float>
 8016144:	ec51 0b10 	vmov	r0, r1, d0
 8016148:	a347      	add	r3, pc, #284	; (adr r3, 8016268 <pifGps_ParsingNmea+0x748>)
 801614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614e:	f7ea fa11 	bl	8000574 <__aeabi_dmul>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016158:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801615c:	e0ba      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
 801615e:	4b44      	ldr	r3, [pc, #272]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	2b08      	cmp	r3, #8
 8016164:	d10a      	bne.n	801617c <pifGps_ParsingNmea+0x65c>
 8016166:	4843      	ldr	r0, [pc, #268]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016168:	f7ff fa90 	bl	801568c <_convertString2Float>
 801616c:	eeb0 7a40 	vmov.f32	s14, s0
 8016170:	eef0 7a60 	vmov.f32	s15, s1
 8016174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016176:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				break;
 801617a:	e0ab      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
 801617c:	4b3c      	ldr	r3, [pc, #240]	; (8016270 <pifGps_ParsingNmea+0x750>)
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	2b09      	cmp	r3, #9
 8016182:	f040 80a7 	bne.w	80162d4 <pifGps_ParsingNmea+0x7b4>
 8016186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016188:	330e      	adds	r3, #14
 801618a:	4619      	mov	r1, r3
 801618c:	4839      	ldr	r0, [pc, #228]	; (8016274 <pifGps_ParsingNmea+0x754>)
 801618e:	f7ff f9b7 	bl	8015500 <_convertString2Date>
				break;
 8016192:	e09f      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>
 8016194:	e09e      	b.n	80162d4 <pifGps_ParsingNmea+0x7b4>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 8016196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801619a:	2b00      	cmp	r3, #0
 801619c:	f000 809c 	beq.w	80162d8 <pifGps_ParsingNmea+0x7b8>
					if (param == 1) p_owner->__p_txt->total = _convertString2Interger(string);
 80161a0:	4b33      	ldr	r3, [pc, #204]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d108      	bne.n	80161ba <pifGps_ParsingNmea+0x69a>
 80161a8:	4832      	ldr	r0, [pc, #200]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80161aa:	f7ff fafb 	bl	80157a4 <_convertString2Interger>
 80161ae:	4602      	mov	r2, r0
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161b4:	b2d2      	uxtb	r2, r2
 80161b6:	701a      	strb	r2, [r3, #0]
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
				}
				break;
 80161b8:	e08e      	b.n	80162d8 <pifGps_ParsingNmea+0x7b8>
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
 80161ba:	4b2d      	ldr	r3, [pc, #180]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	2b02      	cmp	r3, #2
 80161c0:	d108      	bne.n	80161d4 <pifGps_ParsingNmea+0x6b4>
 80161c2:	482c      	ldr	r0, [pc, #176]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80161c4:	f7ff faee 	bl	80157a4 <_convertString2Interger>
 80161c8:	4602      	mov	r2, r0
 80161ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161ce:	b2d2      	uxtb	r2, r2
 80161d0:	705a      	strb	r2, [r3, #1]
				break;
 80161d2:	e081      	b.n	80162d8 <pifGps_ParsingNmea+0x7b8>
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
 80161d4:	4b26      	ldr	r3, [pc, #152]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	2b03      	cmp	r3, #3
 80161da:	d108      	bne.n	80161ee <pifGps_ParsingNmea+0x6ce>
 80161dc:	4825      	ldr	r0, [pc, #148]	; (8016274 <pifGps_ParsingNmea+0x754>)
 80161de:	f7ff fae1 	bl	80157a4 <_convertString2Interger>
 80161e2:	4602      	mov	r2, r0
 80161e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161e8:	b2d2      	uxtb	r2, r2
 80161ea:	709a      	strb	r2, [r3, #2]
				break;
 80161ec:	e074      	b.n	80162d8 <pifGps_ParsingNmea+0x7b8>
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 80161ee:	4b20      	ldr	r3, [pc, #128]	; (8016270 <pifGps_ParsingNmea+0x750>)
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	2b04      	cmp	r3, #4
 80161f4:	d170      	bne.n	80162d8 <pifGps_ParsingNmea+0x7b8>
 80161f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161fa:	3303      	adds	r3, #3
 80161fc:	223f      	movs	r2, #63	; 0x3f
 80161fe:	491d      	ldr	r1, [pc, #116]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016200:	4618      	mov	r0, r3
 8016202:	f00b ffe9 	bl	80221d8 <strncpy>
				break;
 8016206:	e067      	b.n	80162d8 <pifGps_ParsingNmea+0x7b8>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				if (param == 1) p_owner->_ground_course = _convertString2Float(string);
 8016208:	4b19      	ldr	r3, [pc, #100]	; (8016270 <pifGps_ParsingNmea+0x750>)
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	2b01      	cmp	r3, #1
 801620e:	d10a      	bne.n	8016226 <pifGps_ParsingNmea+0x706>
 8016210:	4818      	ldr	r0, [pc, #96]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016212:	f7ff fa3b 	bl	801568c <_convertString2Float>
 8016216:	eeb0 7a40 	vmov.f32	s14, s0
 801621a:	eef0 7a60 	vmov.f32	s15, s1
 801621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016220:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				break;
 8016224:	e05a      	b.n	80162dc <pifGps_ParsingNmea+0x7bc>
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 8016226:	4b12      	ldr	r3, [pc, #72]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	2b05      	cmp	r3, #5
 801622c:	d156      	bne.n	80162dc <pifGps_ParsingNmea+0x7bc>
 801622e:	4811      	ldr	r0, [pc, #68]	; (8016274 <pifGps_ParsingNmea+0x754>)
 8016230:	f7ff fa2c 	bl	801568c <_convertString2Float>
 8016234:	ec51 0b10 	vmov	r0, r1, d0
 8016238:	a30b      	add	r3, pc, #44	; (adr r3, 8016268 <pifGps_ParsingNmea+0x748>)
 801623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623e:	f7ea f999 	bl	8000574 <__aeabi_dmul>
 8016242:	4602      	mov	r2, r0
 8016244:	460b      	mov	r3, r1
 8016246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016248:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 801624c:	e046      	b.n	80162dc <pifGps_ParsingNmea+0x7bc>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 801624e:	4b08      	ldr	r3, [pc, #32]	; (8016270 <pifGps_ParsingNmea+0x750>)
 8016250:	781b      	ldrb	r3, [r3, #0]
 8016252:	2b01      	cmp	r3, #1
 8016254:	d110      	bne.n	8016278 <pifGps_ParsingNmea+0x758>
 8016256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016258:	330e      	adds	r3, #14
 801625a:	4619      	mov	r1, r3
 801625c:	4805      	ldr	r0, [pc, #20]	; (8016274 <pifGps_ParsingNmea+0x754>)
 801625e:	f7ff f993 	bl	8015588 <_convertString2Time>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
				break;
 8016262:	e03d      	b.n	80162e0 <pifGps_ParsingNmea+0x7c0>
 8016264:	f3af 8000 	nop.w
 8016268:	00000000 	.word	0x00000000
 801626c:	40e91e80 	.word	0x40e91e80
 8016270:	20002248 	.word	0x20002248
 8016274:	2000224c 	.word	0x2000224c
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
 8016278:	4b8a      	ldr	r3, [pc, #552]	; (80164a4 <pifGps_ParsingNmea+0x984>)
 801627a:	781b      	ldrb	r3, [r3, #0]
 801627c:	2b02      	cmp	r3, #2
 801627e:	d107      	bne.n	8016290 <pifGps_ParsingNmea+0x770>
 8016280:	4889      	ldr	r0, [pc, #548]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016282:	f7ff fa8f 	bl	80157a4 <_convertString2Interger>
 8016286:	4603      	mov	r3, r0
 8016288:	b2da      	uxtb	r2, r3
 801628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801628c:	741a      	strb	r2, [r3, #16]
				break;
 801628e:	e027      	b.n	80162e0 <pifGps_ParsingNmea+0x7c0>
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
 8016290:	4b84      	ldr	r3, [pc, #528]	; (80164a4 <pifGps_ParsingNmea+0x984>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b03      	cmp	r3, #3
 8016296:	d107      	bne.n	80162a8 <pifGps_ParsingNmea+0x788>
 8016298:	4883      	ldr	r0, [pc, #524]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 801629a:	f7ff fa83 	bl	80157a4 <_convertString2Interger>
 801629e:	4603      	mov	r3, r0
 80162a0:	b2da      	uxtb	r2, r3
 80162a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a4:	73da      	strb	r2, [r3, #15]
				break;
 80162a6:	e01b      	b.n	80162e0 <pifGps_ParsingNmea+0x7c0>
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
 80162a8:	4b7e      	ldr	r3, [pc, #504]	; (80164a4 <pifGps_ParsingNmea+0x984>)
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	2b04      	cmp	r3, #4
 80162ae:	d117      	bne.n	80162e0 <pifGps_ParsingNmea+0x7c0>
 80162b0:	487d      	ldr	r0, [pc, #500]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 80162b2:	f7ff fa77 	bl	80157a4 <_convertString2Interger>
 80162b6:	4603      	mov	r3, r0
 80162b8:	b2db      	uxtb	r3, r3
 80162ba:	3330      	adds	r3, #48	; 0x30
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c0:	739a      	strb	r2, [r3, #14]
				break;
 80162c2:	e00d      	b.n	80162e0 <pifGps_ParsingNmea+0x7c0>
			}
		}
 80162c4:	bf00      	nop
 80162c6:	e00c      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162c8:	bf00      	nop
 80162ca:	e00a      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162cc:	bf00      	nop
 80162ce:	e008      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162d0:	bf00      	nop
 80162d2:	e006      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162d4:	bf00      	nop
 80162d6:	e004      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162d8:	bf00      	nop
 80162da:	e002      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162dc:	bf00      	nop
 80162de:	e000      	b.n	80162e2 <pifGps_ParsingNmea+0x7c2>
				break;
 80162e0:	bf00      	nop
		param++;
 80162e2:	4b70      	ldr	r3, [pc, #448]	; (80164a4 <pifGps_ParsingNmea+0x984>)
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	3301      	adds	r3, #1
 80162e8:	b2da      	uxtb	r2, r3
 80162ea:	4b6e      	ldr	r3, [pc, #440]	; (80164a4 <pifGps_ParsingNmea+0x984>)
 80162ec:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 80162ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80162f2:	2b2a      	cmp	r3, #42	; 0x2a
 80162f4:	d103      	bne.n	80162fe <pifGps_ParsingNmea+0x7de>
 80162f6:	4b6d      	ldr	r3, [pc, #436]	; (80164ac <pifGps_ParsingNmea+0x98c>)
 80162f8:	2201      	movs	r2, #1
 80162fa:	701a      	strb	r2, [r3, #0]
 80162fc:	e007      	b.n	801630e <pifGps_ParsingNmea+0x7ee>
		else parity ^= c;
 80162fe:	4b6c      	ldr	r3, [pc, #432]	; (80164b0 <pifGps_ParsingNmea+0x990>)
 8016300:	781a      	ldrb	r2, [r3, #0]
 8016302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016306:	4053      	eors	r3, r2
 8016308:	b2da      	uxtb	r2, r3
 801630a:	4b69      	ldr	r3, [pc, #420]	; (80164b0 <pifGps_ParsingNmea+0x990>)
 801630c:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 801630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016310:	689b      	ldr	r3, [r3, #8]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d018      	beq.n	8016348 <pifGps_ParsingNmea+0x828>
			string[offset++] = c;
 8016316:	4b67      	ldr	r3, [pc, #412]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	1c5a      	adds	r2, r3, #1
 801631c:	b2d1      	uxtb	r1, r2
 801631e:	4a65      	ldr	r2, [pc, #404]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016320:	7011      	strb	r1, [r2, #0]
 8016322:	4619      	mov	r1, r3
 8016324:	4a60      	ldr	r2, [pc, #384]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801632a:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 801632c:	4b61      	ldr	r3, [pc, #388]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	1c5a      	adds	r2, r3, #1
 8016332:	b2d1      	uxtb	r1, r2
 8016334:	4a5f      	ldr	r2, [pc, #380]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016336:	7011      	strb	r1, [r2, #0]
 8016338:	461a      	mov	r2, r3
 801633a:	4b5b      	ldr	r3, [pc, #364]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 801633c:	2100      	movs	r1, #0
 801633e:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016342:	689b      	ldr	r3, [r3, #8]
 8016344:	4858      	ldr	r0, [pc, #352]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016346:	4798      	blx	r3
		}
		offset = 0;
 8016348:	4b5a      	ldr	r3, [pc, #360]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 801634a:	2200      	movs	r2, #0
 801634c:	701a      	strb	r2, [r3, #0]
 801634e:	e0a2      	b.n	8016496 <pifGps_ParsingNmea+0x976>
	}
	else if (c == '\r' || c == '\n') {
 8016350:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016354:	2b0d      	cmp	r3, #13
 8016356:	d003      	beq.n	8016360 <pifGps_ParsingNmea+0x840>
 8016358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801635c:	2b0a      	cmp	r3, #10
 801635e:	d17f      	bne.n	8016460 <pifGps_ParsingNmea+0x940>
		if (msg_id && checksum_param) { //parity checksum
 8016360:	4b55      	ldr	r3, [pc, #340]	; (80164b8 <pifGps_ParsingNmea+0x998>)
 8016362:	881b      	ldrh	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d04e      	beq.n	8016406 <pifGps_ParsingNmea+0x8e6>
 8016368:	4b50      	ldr	r3, [pc, #320]	; (80164ac <pifGps_ParsingNmea+0x98c>)
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d04a      	beq.n	8016406 <pifGps_ParsingNmea+0x8e6>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016370:	4b4d      	ldr	r3, [pc, #308]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	4618      	mov	r0, r3
 8016376:	f7ff faf1 	bl	801595c <_convertAscii2Hex>
 801637a:	4603      	mov	r3, r0
 801637c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum <<= 4;
 8016380:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016384:	011b      	lsls	r3, r3, #4
 8016386:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum += _convertAscii2Hex(string[1]);
 801638a:	4b47      	ldr	r3, [pc, #284]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 801638c:	785b      	ldrb	r3, [r3, #1]
 801638e:	4618      	mov	r0, r3
 8016390:	f7ff fae4 	bl	801595c <_convertAscii2Hex>
 8016394:	4603      	mov	r3, r0
 8016396:	461a      	mov	r2, r3
 8016398:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801639c:	4413      	add	r3, r2
 801639e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (checksum == parity) {
 80163a2:	4b43      	ldr	r3, [pc, #268]	; (80164b0 <pifGps_ParsingNmea+0x990>)
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80163aa:	429a      	cmp	r2, r3
 80163ac:	d118      	bne.n	80163e0 <pifGps_ParsingNmea+0x8c0>
				if (msg_id == p_owner->evt_nmea_msg_id) frame_ok = 1;
 80163ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	4b40      	ldr	r3, [pc, #256]	; (80164b8 <pifGps_ParsingNmea+0x998>)
 80163b6:	881b      	ldrh	r3, [r3, #0]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d102      	bne.n	80163c2 <pifGps_ParsingNmea+0x8a2>
 80163bc:	2301      	movs	r3, #1
 80163be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 80163c2:	4b3d      	ldr	r3, [pc, #244]	; (80164b8 <pifGps_ParsingNmea+0x998>)
 80163c4:	881b      	ldrh	r3, [r3, #0]
 80163c6:	2b0c      	cmp	r3, #12
 80163c8:	d11a      	bne.n	8016400 <pifGps_ParsingNmea+0x8e0>
 80163ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d016      	beq.n	8016400 <pifGps_ParsingNmea+0x8e0>
					(p_owner->__evt_text)(p_owner->__p_txt);
 80163d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80163d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163d8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80163da:	4610      	mov	r0, r2
 80163dc:	4798      	blx	r3
 80163de:	e00f      	b.n	8016400 <pifGps_ParsingNmea+0x8e0>
				}
			}
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
 80163e0:	4b35      	ldr	r3, [pc, #212]	; (80164b8 <pifGps_ParsingNmea+0x998>)
 80163e2:	881b      	ldrh	r3, [r3, #0]
 80163e4:	4619      	mov	r1, r3
 80163e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80163ea:	4a31      	ldr	r2, [pc, #196]	; (80164b0 <pifGps_ParsingNmea+0x990>)
 80163ec:	7812      	ldrb	r2, [r2, #0]
 80163ee:	9201      	str	r2, [sp, #4]
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	460b      	mov	r3, r1
 80163f4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80163f8:	4930      	ldr	r1, [pc, #192]	; (80164bc <pifGps_ParsingNmea+0x99c>)
 80163fa:	2004      	movs	r0, #4
 80163fc:	f7fd f8ec 	bl	80135d8 <pifLog_Printf>
			}
#endif
			rtn = TRUE;
 8016400:	2301      	movs	r3, #1
 8016402:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 8016406:	4b29      	ldr	r3, [pc, #164]	; (80164ac <pifGps_ParsingNmea+0x98c>)
 8016408:	2200      	movs	r2, #0
 801640a:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 801640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640e:	689b      	ldr	r3, [r3, #8]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d018      	beq.n	8016446 <pifGps_ParsingNmea+0x926>
			string[offset++] = c;
 8016414:	4b27      	ldr	r3, [pc, #156]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	1c5a      	adds	r2, r3, #1
 801641a:	b2d1      	uxtb	r1, r2
 801641c:	4a25      	ldr	r2, [pc, #148]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 801641e:	7011      	strb	r1, [r2, #0]
 8016420:	4619      	mov	r1, r3
 8016422:	4a21      	ldr	r2, [pc, #132]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016428:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 801642a:	4b22      	ldr	r3, [pc, #136]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	1c5a      	adds	r2, r3, #1
 8016430:	b2d1      	uxtb	r1, r2
 8016432:	4a20      	ldr	r2, [pc, #128]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016434:	7011      	strb	r1, [r2, #0]
 8016436:	461a      	mov	r2, r3
 8016438:	4b1b      	ldr	r3, [pc, #108]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 801643a:	2100      	movs	r1, #0
 801643c:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 801643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016440:	689b      	ldr	r3, [r3, #8]
 8016442:	4819      	ldr	r0, [pc, #100]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016444:	4798      	blx	r3
		}
		offset = 0;
 8016446:	4b1b      	ldr	r3, [pc, #108]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016448:	2200      	movs	r2, #0
 801644a:	701a      	strb	r2, [r3, #0]
		if (frame_ok) {
 801644c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016450:	2b00      	cmp	r3, #0
 8016452:	d002      	beq.n	801645a <pifGps_ParsingNmea+0x93a>
			pifGps_SendEvent(p_owner);
 8016454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016456:	f7ff fb41 	bl	8015adc <pifGps_SendEvent>
		}
		return rtn;
 801645a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801645e:	e01b      	b.n	8016498 <pifGps_ParsingNmea+0x978>
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016460:	4b14      	ldr	r3, [pc, #80]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016462:	781b      	ldrb	r3, [r3, #0]
 8016464:	2b1f      	cmp	r3, #31
 8016466:	d80a      	bhi.n	801647e <pifGps_ParsingNmea+0x95e>
 8016468:	4b12      	ldr	r3, [pc, #72]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	1c5a      	adds	r2, r3, #1
 801646e:	b2d1      	uxtb	r1, r2
 8016470:	4a10      	ldr	r2, [pc, #64]	; (80164b4 <pifGps_ParsingNmea+0x994>)
 8016472:	7011      	strb	r1, [r2, #0]
 8016474:	4619      	mov	r1, r3
 8016476:	4a0c      	ldr	r2, [pc, #48]	; (80164a8 <pifGps_ParsingNmea+0x988>)
 8016478:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801647c:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 801647e:	4b0b      	ldr	r3, [pc, #44]	; (80164ac <pifGps_ParsingNmea+0x98c>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d107      	bne.n	8016496 <pifGps_ParsingNmea+0x976>
 8016486:	4b0a      	ldr	r3, [pc, #40]	; (80164b0 <pifGps_ParsingNmea+0x990>)
 8016488:	781a      	ldrb	r2, [r3, #0]
 801648a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801648e:	4053      	eors	r3, r2
 8016490:	b2da      	uxtb	r2, r3
 8016492:	4b07      	ldr	r3, [pc, #28]	; (80164b0 <pifGps_ParsingNmea+0x990>)
 8016494:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 8016496:	2300      	movs	r3, #0
}
 8016498:	4618      	mov	r0, r3
 801649a:	3738      	adds	r7, #56	; 0x38
 801649c:	46bd      	mov	sp, r7
 801649e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80164a2:	bf00      	nop
 80164a4:	20002248 	.word	0x20002248
 80164a8:	2000224c 	.word	0x2000224c
 80164ac:	2000226e 	.word	0x2000226e
 80164b0:	2000224a 	.word	0x2000224a
 80164b4:	20002249 	.word	0x20002249
 80164b8:	2000226c 	.word	0x2000226c
 80164bc:	08026950 	.word	0x08026950

080164c0 <_evtParsing>:
#include "gps/pif_gps_nmea.h"

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b084      	sub	sp, #16
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
	PifGpsNmea *p_owner = (PifGpsNmea *)p_client;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	60fb      	str	r3, [r7, #12]
	uint8_t c;

	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80164ce:	e005      	b.n	80164dc <_evtParsing+0x1c>
		pifGps_ParsingNmea(&p_owner->_gps, c);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	7afa      	ldrb	r2, [r7, #11]
 80164d4:	4611      	mov	r1, r2
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7ff fb22 	bl	8015b20 <pifGps_ParsingNmea>
	while ((*act_receive_data)(p_owner->__p_comm, &c)) {
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80164e0:	f107 010b 	add.w	r1, r7, #11
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	4610      	mov	r0, r2
 80164e8:	4798      	blx	r3
 80164ea:	4603      	mov	r3, r0
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d1ef      	bne.n	80164d0 <_evtParsing+0x10>
	}
}
 80164f0:	bf00      	nop
 80164f2:	bf00      	nop
 80164f4:	3710      	adds	r7, #16
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
	...

080164fc <pifGpsNmea_Init>:

BOOL pifGpsNmea_Init(PifGpsNmea* p_owner, PifId id)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	460b      	mov	r3, r1
 8016506:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d104      	bne.n	8016518 <pifGpsNmea_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 801650e:	4b0f      	ldr	r3, [pc, #60]	; (801654c <pifGpsNmea_Init+0x50>)
 8016510:	2201      	movs	r2, #1
 8016512:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8016514:	2300      	movs	r3, #0
 8016516:	e014      	b.n	8016542 <pifGpsNmea_Init+0x46>
	}

	memset(p_owner, 0, sizeof(PifGpsNmea));
 8016518:	2270      	movs	r2, #112	; 0x70
 801651a:	2100      	movs	r1, #0
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f00b fced 	bl	8021efc <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	887a      	ldrh	r2, [r7, #2]
 8016526:	4611      	mov	r1, r2
 8016528:	4618      	mov	r0, r3
 801652a:	f7ff fa55 	bl	80159d8 <pifGps_Init>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <pifGpsNmea_Init+0x3c>
    return TRUE;
 8016534:	2301      	movs	r3, #1
 8016536:	e004      	b.n	8016542 <pifGpsNmea_Init+0x46>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8016538:	bf00      	nop

fail:
	pifGpsNmea_Clear(p_owner);
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 f808 	bl	8016550 <pifGpsNmea_Clear>
    return FALSE;
 8016540:	2300      	movs	r3, #0
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	200020c9 	.word	0x200020c9

08016550 <pifGpsNmea_Clear>:

void pifGpsNmea_Clear(PifGpsNmea* p_owner)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
	pifGps_Clear(&p_owner->_gps);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	4618      	mov	r0, r3
 801655c:	f7ff fa66 	bl	8015a2c <pifGps_Clear>
}
 8016560:	bf00      	nop
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <pifGpsNmea_AttachComm>:

void pifGpsNmea_AttachComm(PifGpsNmea* p_owner, PifComm* p_comm)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b082      	sub	sp, #8
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	683a      	ldr	r2, [r7, #0]
 8016576:	669a      	str	r2, [r3, #104]	; 0x68
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8016578:	2300      	movs	r3, #0
 801657a:	4a04      	ldr	r2, [pc, #16]	; (801658c <pifGpsNmea_AttachComm+0x24>)
 801657c:	6879      	ldr	r1, [r7, #4]
 801657e:	6838      	ldr	r0, [r7, #0]
 8016580:	f7fb fdea 	bl	8012158 <pifComm_AttachClient>
}
 8016584:	bf00      	nop
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	080164c1 	.word	0x080164c1

08016590 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016590:	b480      	push	{r7}
 8016592:	b087      	sub	sp, #28
 8016594:	af00      	add	r7, sp, #0
 8016596:	60f8      	str	r0, [r7, #12]
 8016598:	60b9      	str	r1, [r7, #8]
 801659a:	4613      	mov	r3, r2
 801659c:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 801659e:	2300      	movs	r3, #0
 80165a0:	75fb      	strb	r3, [r7, #23]
 80165a2:	2300      	movs	r3, #0
 80165a4:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 80165a6:	2300      	movs	r3, #0
 80165a8:	82bb      	strh	r3, [r7, #20]
 80165aa:	e00d      	b.n	80165c8 <_checksumUbx+0x38>
		ck_a += p_header[i];
 80165ac:	8abb      	ldrh	r3, [r7, #20]
 80165ae:	68fa      	ldr	r2, [r7, #12]
 80165b0:	4413      	add	r3, r2
 80165b2:	781a      	ldrb	r2, [r3, #0]
 80165b4:	7dfb      	ldrb	r3, [r7, #23]
 80165b6:	4413      	add	r3, r2
 80165b8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80165ba:	7dba      	ldrb	r2, [r7, #22]
 80165bc:	7dfb      	ldrb	r3, [r7, #23]
 80165be:	4413      	add	r3, r2
 80165c0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 80165c2:	8abb      	ldrh	r3, [r7, #20]
 80165c4:	3301      	adds	r3, #1
 80165c6:	82bb      	strh	r3, [r7, #20]
 80165c8:	8abb      	ldrh	r3, [r7, #20]
 80165ca:	2b03      	cmp	r3, #3
 80165cc:	d9ee      	bls.n	80165ac <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 80165ce:	2300      	movs	r3, #0
 80165d0:	82bb      	strh	r3, [r7, #20]
 80165d2:	e00d      	b.n	80165f0 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 80165d4:	8abb      	ldrh	r3, [r7, #20]
 80165d6:	68ba      	ldr	r2, [r7, #8]
 80165d8:	4413      	add	r3, r2
 80165da:	781a      	ldrb	r2, [r3, #0]
 80165dc:	7dfb      	ldrb	r3, [r7, #23]
 80165de:	4413      	add	r3, r2
 80165e0:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80165e2:	7dba      	ldrb	r2, [r7, #22]
 80165e4:	7dfb      	ldrb	r3, [r7, #23]
 80165e6:	4413      	add	r3, r2
 80165e8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 80165ea:	8abb      	ldrh	r3, [r7, #20]
 80165ec:	3301      	adds	r3, #1
 80165ee:	82bb      	strh	r3, [r7, #20]
 80165f0:	8aba      	ldrh	r2, [r7, #20]
 80165f2:	88fb      	ldrh	r3, [r7, #6]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d3ed      	bcc.n	80165d4 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 80165f8:	7dfb      	ldrb	r3, [r7, #23]
 80165fa:	b29a      	uxth	r2, r3
 80165fc:	7dbb      	ldrb	r3, [r7, #22]
 80165fe:	b29b      	uxth	r3, r3
 8016600:	021b      	lsls	r3, r3, #8
 8016602:	b29b      	uxth	r3, r3
 8016604:	4413      	add	r3, r2
 8016606:	b29b      	uxth	r3, r3
}
 8016608:	4618      	mov	r0, r3
 801660a:	371c      	adds	r7, #28
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr

08016614 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016616:	b08d      	sub	sp, #52	; 0x34
 8016618:	af06      	add	r7, sp, #24
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	33cc      	adds	r3, #204	; 0xcc
 8016622:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016624:	e0da      	b.n	80167dc <_parsingPacket+0x1c8>
		switch (p_owner->__rx.state) {
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 801662c:	2b09      	cmp	r3, #9
 801662e:	f200 80d4 	bhi.w	80167da <_parsingPacket+0x1c6>
 8016632:	a201      	add	r2, pc, #4	; (adr r2, 8016638 <_parsingPacket+0x24>)
 8016634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016638:	08016661 	.word	0x08016661
 801663c:	0801669d 	.word	0x0801669d
 8016640:	080166b7 	.word	0x080166b7
 8016644:	080166c7 	.word	0x080166c7
 8016648:	080166d7 	.word	0x080166d7
 801664c:	080166e9 	.word	0x080166e9
 8016650:	08016725 	.word	0x08016725
 8016654:	0801675f 	.word	0x0801675f
 8016658:	08016773 	.word	0x08016773
 801665c:	080167bd 	.word	0x080167bd
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 8016660:	7afb      	ldrb	r3, [r7, #11]
 8016662:	2bb5      	cmp	r3, #181	; 0xb5
 8016664:	d107      	bne.n	8016676 <_parsingPacket+0x62>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2201      	movs	r2, #1
 801666a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 801666e:	4b85      	ldr	r3, [pc, #532]	; (8016884 <_parsingPacket+0x270>)
 8016670:	2204      	movs	r2, #4
 8016672:	701a      	strb	r2, [r3, #0]
 8016674:	e0b2      	b.n	80167dc <_parsingPacket+0x1c8>
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	3310      	adds	r3, #16
 801667a:	7afa      	ldrb	r2, [r7, #11]
 801667c:	4611      	mov	r1, r2
 801667e:	4618      	mov	r0, r3
 8016680:	f7ff fa4e 	bl	8015b20 <pifGps_ParsingNmea>
 8016684:	4603      	mov	r3, r0
 8016686:	2b00      	cmp	r3, #0
 8016688:	f000 80a8 	beq.w	80167dc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_NMEA;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2209      	movs	r2, #9
 8016690:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
 8016694:	4b7b      	ldr	r3, [pc, #492]	; (8016884 <_parsingPacket+0x270>)
 8016696:	2204      	movs	r2, #4
 8016698:	701a      	strb	r2, [r3, #0]
#endif
			}
			break;
 801669a:	e09f      	b.n	80167dc <_parsingPacket+0x1c8>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 801669c:	7afb      	ldrb	r3, [r7, #11]
 801669e:	2b62      	cmp	r3, #98	; 0x62
 80166a0:	d104      	bne.n	80166ac <_parsingPacket+0x98>
				p_owner->__rx.state = GURS_CLASS;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2202      	movs	r2, #2
 80166a6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80166aa:	e097      	b.n	80167dc <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_INVALID_DATA;
 80166ac:	2301      	movs	r3, #1
 80166ae:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80166b0:	2361      	movs	r3, #97	; 0x61
 80166b2:	613b      	str	r3, [r7, #16]
				goto fail;
 80166b4:	e09f      	b.n	80167f6 <_parsingPacket+0x1e2>

		case GURS_CLASS:
			p_packet->class_id = data;
 80166b6:	7afa      	ldrb	r2, [r7, #11]
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2203      	movs	r2, #3
 80166c0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80166c4:	e08a      	b.n	80167dc <_parsingPacket+0x1c8>

		case GURS_ID:
			p_packet->msg_id = data;
 80166c6:	7afa      	ldrb	r2, [r7, #11]
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2204      	movs	r2, #4
 80166d0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80166d4:	e082      	b.n	80167dc <_parsingPacket+0x1c8>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80166d6:	7afb      	ldrb	r3, [r7, #11]
 80166d8:	b29a      	uxth	r2, r3
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2205      	movs	r2, #5
 80166e2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80166e6:	e079      	b.n	80167dc <_parsingPacket+0x1c8>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	885b      	ldrh	r3, [r3, #2]
 80166ec:	b21a      	sxth	r2, r3
 80166ee:	7afb      	ldrb	r3, [r7, #11]
 80166f0:	021b      	lsls	r3, r3, #8
 80166f2:	b21b      	sxth	r3, r3
 80166f4:	4313      	orrs	r3, r2
 80166f6:	b21b      	sxth	r3, r3
 80166f8:	b29a      	uxth	r2, r3
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	885b      	ldrh	r3, [r3, #2]
 8016702:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8016706:	d208      	bcs.n	801671a <_parsingPacket+0x106>
				p_owner->__rx.payload_count = 0;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2200      	movs	r2, #0
 801670c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				p_owner->__rx.state = GURS_PAYLOAD;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2206      	movs	r2, #6
 8016714:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016718:	e060      	b.n	80167dc <_parsingPacket+0x1c8>
				pkt_err = PKT_ERR_BIG_LENGHT;
 801671a:	2300      	movs	r3, #0
 801671c:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 801671e:	237f      	movs	r3, #127	; 0x7f
 8016720:	613b      	str	r3, [r7, #16]
				goto fail;
 8016722:	e068      	b.n	80167f6 <_parsingPacket+0x1e2>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801672a:	4619      	mov	r1, r3
 801672c:	7afa      	ldrb	r2, [r7, #11]
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	440b      	add	r3, r1
 8016732:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801673a:	3301      	adds	r3, #1
 801673c:	b2da      	uxtb	r2, r3
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801674a:	b29a      	uxth	r2, r3
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	885b      	ldrh	r3, [r3, #2]
 8016750:	429a      	cmp	r2, r3
 8016752:	d343      	bcc.n	80167dc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_CK_A;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2207      	movs	r2, #7
 8016758:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			}
			break;
 801675c:	e03e      	b.n	80167dc <_parsingPacket+0x1c8>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 801675e:	7afb      	ldrb	r3, [r7, #11]
 8016760:	b29a      	uxth	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			p_owner->__rx.state = GURS_CK_B;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2208      	movs	r2, #8
 801676c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016770:	e034      	b.n	80167dc <_parsingPacket+0x1c8>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 8016778:	b21a      	sxth	r2, r3
 801677a:	7afb      	ldrb	r3, [r7, #11]
 801677c:	021b      	lsls	r3, r3, #8
 801677e:	b21b      	sxth	r3, r3
 8016780:	4313      	orrs	r3, r2
 8016782:	b21b      	sxth	r3, r3
 8016784:	b29a      	uxth	r2, r3
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f8b3 4258 	ldrh.w	r4, [r3, #600]	; 0x258
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	1d19      	adds	r1, r3, #4
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	885b      	ldrh	r3, [r3, #2]
 801679a:	461a      	mov	r2, r3
 801679c:	68f8      	ldr	r0, [r7, #12]
 801679e:	f7ff fef7 	bl	8016590 <_checksumUbx>
 80167a2:	4603      	mov	r3, r0
 80167a4:	429c      	cmp	r4, r3
 80167a6:	d104      	bne.n	80167b2 <_parsingPacket+0x19e>
				p_owner->__rx.state = GURS_DONE;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	220a      	movs	r2, #10
 80167ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80167b0:	e064      	b.n	801687c <_parsingPacket+0x268>
			}
			else {
#ifndef __PIF_NO_LOG__
				pkt_err = PKT_ERR_WRONG_CRC;
 80167b2:	2302      	movs	r3, #2
 80167b4:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80167b6:	239b      	movs	r3, #155	; 0x9b
 80167b8:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80167ba:	e01c      	b.n	80167f6 <_parsingPacket+0x1e2>
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	3310      	adds	r3, #16
 80167c0:	7afa      	ldrb	r2, [r7, #11]
 80167c2:	4611      	mov	r1, r2
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7ff f9ab 	bl	8015b20 <pifGps_ParsingNmea>
 80167ca:	4603      	mov	r3, r0
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d005      	beq.n	80167dc <_parsingPacket+0x1c8>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2200      	movs	r2, #0
 80167d4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80167d8:	e050      	b.n	801687c <_parsingPacket+0x268>
			}
			break;

		default:
			break;
 80167da:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80167e2:	f107 010b 	add.w	r1, r7, #11
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	4610      	mov	r0, r2
 80167ea:	4798      	blx	r3
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f47f af19 	bne.w	8016626 <_parsingPacket+0x12>
		}
	}
	return;
 80167f4:	e042      	b.n	801687c <_parsingPacket+0x268>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 80167f6:	4b23      	ldr	r3, [pc, #140]	; (8016884 <_parsingPacket+0x270>)
 80167f8:	781b      	ldrb	r3, [r3, #0]
 80167fa:	7dfa      	ldrb	r2, [r7, #23]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d039      	beq.n	8016874 <_parsingPacket+0x260>
		if (p_owner->__rx.state) {
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016806:	2b00      	cmp	r3, #0
 8016808:	d021      	beq.n	801684e <_parsingPacket+0x23a>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	8b9b      	ldrh	r3, [r3, #28]
 801680e:	461e      	mov	r6, r3
 8016810:	7dfb      	ldrb	r3, [r7, #23]
 8016812:	4a1d      	ldr	r2, [pc, #116]	; (8016888 <_parsingPacket+0x274>)
 8016814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016818:	7afa      	ldrb	r2, [r7, #11]
 801681a:	4611      	mov	r1, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016822:	4610      	mov	r0, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	7812      	ldrb	r2, [r2, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016828:	4614      	mov	r4, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801682a:	68fa      	ldr	r2, [r7, #12]
 801682c:	7852      	ldrb	r2, [r2, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801682e:	4615      	mov	r5, r2
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8016830:	68fa      	ldr	r2, [r7, #12]
 8016832:	8852      	ldrh	r2, [r2, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8016834:	9205      	str	r2, [sp, #20]
 8016836:	9504      	str	r5, [sp, #16]
 8016838:	9403      	str	r4, [sp, #12]
 801683a:	9002      	str	r0, [sp, #8]
 801683c:	9101      	str	r1, [sp, #4]
 801683e:	9300      	str	r3, [sp, #0]
 8016840:	4633      	mov	r3, r6
 8016842:	693a      	ldr	r2, [r7, #16]
 8016844:	4911      	ldr	r1, [pc, #68]	; (801688c <_parsingPacket+0x278>)
 8016846:	2004      	movs	r0, #4
 8016848:	f7fc fec6 	bl	80135d8 <pifLog_Printf>
 801684c:	e00f      	b.n	801686e <_parsingPacket+0x25a>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	8b9b      	ldrh	r3, [r3, #28]
 8016852:	4619      	mov	r1, r3
 8016854:	7dfb      	ldrb	r3, [r7, #23]
 8016856:	4a0c      	ldr	r2, [pc, #48]	; (8016888 <_parsingPacket+0x274>)
 8016858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801685c:	7afa      	ldrb	r2, [r7, #11]
 801685e:	9201      	str	r2, [sp, #4]
 8016860:	9300      	str	r3, [sp, #0]
 8016862:	460b      	mov	r3, r1
 8016864:	693a      	ldr	r2, [r7, #16]
 8016866:	490a      	ldr	r1, [pc, #40]	; (8016890 <_parsingPacket+0x27c>)
 8016868:	2004      	movs	r0, #4
 801686a:	f7fc feb5 	bl	80135d8 <pifLog_Printf>
		}
		pre_err = pkt_err;
 801686e:	4a05      	ldr	r2, [pc, #20]	; (8016884 <_parsingPacket+0x270>)
 8016870:	7dfb      	ldrb	r3, [r7, #23]
 8016872:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	2200      	movs	r2, #0
 8016878:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 801687c:	371c      	adds	r7, #28
 801687e:	46bd      	mov	sp, r7
 8016880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016882:	bf00      	nop
 8016884:	2000007c 	.word	0x2000007c
 8016888:	2000006c 	.word	0x2000006c
 801688c:	080269a0 	.word	0x080269a0
 8016890:	080269d0 	.word	0x080269d0
 8016894:	00000000 	.word	0x00000000

08016898 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b08c      	sub	sp, #48	; 0x30
 801689c:	af04      	add	r7, sp, #16
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	617b      	str	r3, [r7, #20]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 80168a6:	697b      	ldr	r3, [r7, #20]
 80168a8:	33cc      	adds	r3, #204	; 0xcc
 80168aa:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	3310      	adds	r3, #16
 80168b0:	60fb      	str	r3, [r7, #12]
    int i;
    static BOOL _new_position = FALSE;
    static BOOL next_fix = FALSE;
    static BOOL _new_speed = FALSE;
    BOOL error = FALSE;
 80168b2:	2300      	movs	r3, #0
 80168b4:	76fb      	strb	r3, [r7, #27]

    if (!p_owner->_gps.evt_receive) return;
 80168b6:	697b      	ldr	r3, [r7, #20]
 80168b8:	695b      	ldr	r3, [r3, #20]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f000 826b 	beq.w	8016d96 <_evtParsing+0x4fe>

    if (p_owner->__rx.state < GURS_DONE) {
 80168c0:	697b      	ldr	r3, [r7, #20]
 80168c2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80168c6:	2b09      	cmp	r3, #9
 80168c8:	d803      	bhi.n	80168d2 <_evtParsing+0x3a>
    	_parsingPacket(p_owner, act_receive_data);
 80168ca:	6839      	ldr	r1, [r7, #0]
 80168cc:	6978      	ldr	r0, [r7, #20]
 80168ce:	f7ff fea1 	bl	8016614 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80168d8:	2b0a      	cmp	r3, #10
 80168da:	f040 825d 	bne.w	8016d98 <_evtParsing+0x500>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	2b01      	cmp	r3, #1
 80168e4:	d02a      	beq.n	801693c <_evtParsing+0xa4>
 80168e6:	2b05      	cmp	r3, #5
 80168e8:	f040 821e 	bne.w	8016d28 <_evtParsing+0x490>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	785b      	ldrb	r3, [r3, #1]
 80168f0:	2b01      	cmp	r3, #1
 80168f2:	d80b      	bhi.n	801690c <_evtParsing+0x74>
        	case GUMI_ACK_ACK:
        	case GUMI_ACK_NAK:
        		if (p_owner->evt_ubx_cfg_result) (*p_owner->evt_ubx_cfg_result)(p_owner, p_packet->msg_id);
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d01d      	beq.n	8016938 <_evtParsing+0xa0>
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	693a      	ldr	r2, [r7, #16]
 8016902:	7852      	ldrb	r2, [r2, #1]
 8016904:	4611      	mov	r1, r2
 8016906:	6978      	ldr	r0, [r7, #20]
 8016908:	4798      	blx	r3
        		break;
 801690a:	e015      	b.n	8016938 <_evtParsing+0xa0>

            default:
            	error = TRUE;
 801690c:	2301      	movs	r3, #1
 801690e:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	8b9b      	ldrh	r3, [r3, #28]
 8016914:	4618      	mov	r0, r3
 8016916:	4ba2      	ldr	r3, [pc, #648]	; (8016ba0 <_evtParsing+0x308>)
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	693a      	ldr	r2, [r7, #16]
 801691c:	7812      	ldrb	r2, [r2, #0]
 801691e:	4611      	mov	r1, r2
 8016920:	693a      	ldr	r2, [r7, #16]
 8016922:	7852      	ldrb	r2, [r2, #1]
 8016924:	9202      	str	r2, [sp, #8]
 8016926:	9101      	str	r1, [sp, #4]
 8016928:	9300      	str	r3, [sp, #0]
 801692a:	4603      	mov	r3, r0
 801692c:	22e7      	movs	r2, #231	; 0xe7
 801692e:	499d      	ldr	r1, [pc, #628]	; (8016ba4 <_evtParsing+0x30c>)
 8016930:	2004      	movs	r0, #4
 8016932:	f7fc fe51 	bl	80135d8 <pifLog_Printf>
#endif
                break;
 8016936:	e000      	b.n	801693a <_evtParsing+0xa2>
        		break;
 8016938:	bf00      	nop
        	}
        	break;
 801693a:	e208      	b.n	8016d4e <_evtParsing+0x4b6>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	785b      	ldrb	r3, [r3, #1]
 8016940:	3b02      	subs	r3, #2
 8016942:	2b2e      	cmp	r3, #46	; 0x2e
 8016944:	f200 81d5 	bhi.w	8016cf2 <_evtParsing+0x45a>
 8016948:	a201      	add	r2, pc, #4	; (adr r2, 8016950 <_evtParsing+0xb8>)
 801694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801694e:	bf00      	nop
 8016950:	08016a0d 	.word	0x08016a0d
 8016954:	08016b37 	.word	0x08016b37
 8016958:	08016cf3 	.word	0x08016cf3
 801695c:	08016cf3 	.word	0x08016cf3
 8016960:	08016af3 	.word	0x08016af3
 8016964:	08016aa7 	.word	0x08016aa7
 8016968:	08016cf3 	.word	0x08016cf3
 801696c:	08016cf3 	.word	0x08016cf3
 8016970:	08016cf3 	.word	0x08016cf3
 8016974:	08016cf3 	.word	0x08016cf3
 8016978:	08016cf3 	.word	0x08016cf3
 801697c:	08016cf3 	.word	0x08016cf3
 8016980:	08016cf3 	.word	0x08016cf3
 8016984:	08016cf3 	.word	0x08016cf3
 8016988:	08016cf3 	.word	0x08016cf3
 801698c:	08016cf3 	.word	0x08016cf3
 8016990:	08016cb9 	.word	0x08016cb9
 8016994:	08016cf3 	.word	0x08016cf3
 8016998:	08016cf3 	.word	0x08016cf3
 801699c:	08016cf3 	.word	0x08016cf3
 80169a0:	08016cf3 	.word	0x08016cf3
 80169a4:	08016cf3 	.word	0x08016cf3
 80169a8:	08016cf3 	.word	0x08016cf3
 80169ac:	08016cf3 	.word	0x08016cf3
 80169b0:	08016cf3 	.word	0x08016cf3
 80169b4:	08016cf3 	.word	0x08016cf3
 80169b8:	08016cf3 	.word	0x08016cf3
 80169bc:	08016cf3 	.word	0x08016cf3
 80169c0:	08016cf3 	.word	0x08016cf3
 80169c4:	08016cf3 	.word	0x08016cf3
 80169c8:	08016cf3 	.word	0x08016cf3
 80169cc:	08016c61 	.word	0x08016c61
 80169d0:	08016cf3 	.word	0x08016cf3
 80169d4:	08016cf3 	.word	0x08016cf3
 80169d8:	08016cf3 	.word	0x08016cf3
 80169dc:	08016cf3 	.word	0x08016cf3
 80169e0:	08016cf3 	.word	0x08016cf3
 80169e4:	08016cf3 	.word	0x08016cf3
 80169e8:	08016cf3 	.word	0x08016cf3
 80169ec:	08016cf3 	.word	0x08016cf3
 80169f0:	08016cf3 	.word	0x08016cf3
 80169f4:	08016cf3 	.word	0x08016cf3
 80169f8:	08016cf3 	.word	0x08016cf3
 80169fc:	08016cf3 	.word	0x08016cf3
 8016a00:	08016cf3 	.word	0x08016cf3
 8016a04:	08016cf3 	.word	0x08016cf3
 8016a08:	08016b71 	.word	0x08016b71
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	689b      	ldr	r3, [r3, #8]
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7e9 fd45 	bl	80004a0 <__aeabi_i2d>
 8016a16:	a360      	add	r3, pc, #384	; (adr r3, 8016b98 <_evtParsing+0x300>)
 8016a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a1c:	f7e9 fed4 	bl	80007c8 <__aeabi_ddiv>
 8016a20:	4602      	mov	r2, r0
 8016a22:	460b      	mov	r3, r1
 8016a24:	68f9      	ldr	r1, [r7, #12]
 8016a26:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	68db      	ldr	r3, [r3, #12]
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7e9 fd36 	bl	80004a0 <__aeabi_i2d>
 8016a34:	a358      	add	r3, pc, #352	; (adr r3, 8016b98 <_evtParsing+0x300>)
 8016a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3a:	f7e9 fec5 	bl	80007c8 <__aeabi_ddiv>
 8016a3e:	4602      	mov	r2, r0
 8016a40:	460b      	mov	r3, r1
 8016a42:	68f9      	ldr	r1, [r7, #12]
 8016a44:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	695b      	ldr	r3, [r3, #20]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7e9 fd27 	bl	80004a0 <__aeabi_i2d>
 8016a52:	f04f 0200 	mov.w	r2, #0
 8016a56:	4b54      	ldr	r3, [pc, #336]	; (8016ba8 <_evtParsing+0x310>)
 8016a58:	f7e9 feb6 	bl	80007c8 <__aeabi_ddiv>
 8016a5c:	4602      	mov	r2, r0
 8016a5e:	460b      	mov	r3, r1
 8016a60:	68f9      	ldr	r1, [r7, #12]
 8016a62:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	699a      	ldr	r2, [r3, #24]
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	69da      	ldr	r2, [r3, #28]
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 8016a76:	4b4d      	ldr	r3, [pc, #308]	; (8016bac <_evtParsing+0x314>)
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	f003 0301 	and.w	r3, r3, #1
 8016a7e:	b2d9      	uxtb	r1, r3
 8016a80:	68fa      	ldr	r2, [r7, #12]
 8016a82:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a86:	f361 0300 	bfi	r3, r1, #0, #1
 8016a8a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    _new_position = TRUE;
 8016a8e:	4b48      	ldr	r3, [pc, #288]	; (8016bb0 <_evtParsing+0x318>)
 8016a90:	2201      	movs	r2, #1
 8016a92:	701a      	strb	r2, [r3, #0]
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8016a9c:	4b45      	ldr	r3, [pc, #276]	; (8016bb4 <_evtParsing+0x31c>)
 8016a9e:	681a      	ldr	r2, [r3, #0]
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016aa4:	e13f      	b.n	8016d26 <_evtParsing+0x48e>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	891b      	ldrh	r3, [r3, #8]
 8016aaa:	b2db      	uxtb	r3, r3
 8016aac:	3344      	adds	r3, #68	; 0x44
 8016aae:	b2da      	uxtb	r2, r3
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	7a9a      	ldrb	r2, [r3, #10]
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	7ada      	ldrb	r2, [r3, #11]
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	7b1a      	ldrb	r2, [r3, #12]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	7b5a      	ldrb	r2, [r3, #13]
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	7b9a      	ldrb	r2, [r3, #14]
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	695b      	ldr	r3, [r3, #20]
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	4b35      	ldr	r3, [pc, #212]	; (8016bb8 <_evtParsing+0x320>)
 8016ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8016ae8:	0c9b      	lsrs	r3, r3, #18
 8016aea:	b29a      	uxth	r2, r3
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	829a      	strh	r2, [r3, #20]
                    break;
 8016af0:	e119      	b.n	8016d26 <_evtParsing+0x48e>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	7bdb      	ldrb	r3, [r3, #15]
 8016af6:	f003 0301 	and.w	r3, r3, #1
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d005      	beq.n	8016b0a <_evtParsing+0x272>
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	7b9b      	ldrb	r3, [r3, #14]
 8016b02:	2b03      	cmp	r3, #3
 8016b04:	d101      	bne.n	8016b0a <_evtParsing+0x272>
 8016b06:	2301      	movs	r3, #1
 8016b08:	e000      	b.n	8016b0c <_evtParsing+0x274>
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	b2da      	uxtb	r2, r3
 8016b0e:	4b27      	ldr	r3, [pc, #156]	; (8016bac <_evtParsing+0x314>)
 8016b10:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016b12:	4b26      	ldr	r3, [pc, #152]	; (8016bac <_evtParsing+0x314>)
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d106      	bne.n	8016b28 <_evtParsing+0x290>
                    	p_parent->_fix = FALSE;
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016b20:	f36f 0300 	bfc	r3, #0, #1
 8016b24:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016b34:	e0f7      	b.n	8016d26 <_evtParsing+0x48e>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016b36:	693b      	ldr	r3, [r7, #16]
 8016b38:	7a5b      	ldrb	r3, [r3, #9]
 8016b3a:	f003 0301 	and.w	r3, r3, #1
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d005      	beq.n	8016b4e <_evtParsing+0x2b6>
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	7a1b      	ldrb	r3, [r3, #8]
 8016b46:	2b03      	cmp	r3, #3
 8016b48:	d101      	bne.n	8016b4e <_evtParsing+0x2b6>
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	e000      	b.n	8016b50 <_evtParsing+0x2b8>
 8016b4e:	2300      	movs	r3, #0
 8016b50:	b2da      	uxtb	r2, r3
 8016b52:	4b16      	ldr	r3, [pc, #88]	; (8016bac <_evtParsing+0x314>)
 8016b54:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016b56:	4b15      	ldr	r3, [pc, #84]	; (8016bac <_evtParsing+0x314>)
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f040 80e0 	bne.w	8016d20 <_evtParsing+0x488>
                    	p_parent->_fix = FALSE;
 8016b60:	68fa      	ldr	r2, [r7, #12]
 8016b62:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016b66:	f36f 0300 	bfc	r3, #0, #1
 8016b6a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016b6e:	e0d7      	b.n	8016d20 <_evtParsing+0x488>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	7a1a      	ldrb	r2, [r3, #8]
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    if (p_owner->_num_ch > 16)
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016b80:	2b10      	cmp	r3, #16
 8016b82:	d903      	bls.n	8016b8c <_evtParsing+0x2f4>
                    	p_owner->_num_ch = 16;
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	2210      	movs	r2, #16
 8016b88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	61fb      	str	r3, [r7, #28]
 8016b90:	e053      	b.n	8016c3a <_evtParsing+0x3a2>
 8016b92:	bf00      	nop
 8016b94:	f3af 8000 	nop.w
 8016b98:	00000000 	.word	0x00000000
 8016b9c:	416312d0 	.word	0x416312d0
 8016ba0:	2000006c 	.word	0x2000006c
 8016ba4:	080269e4 	.word	0x080269e4
 8016ba8:	408f4000 	.word	0x408f4000
 8016bac:	2000226f 	.word	0x2000226f
 8016bb0:	20002270 	.word	0x20002270
 8016bb4:	200020d8 	.word	0x200020d8
 8016bb8:	431bde83 	.word	0x431bde83
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016bbc:	6939      	ldr	r1, [r7, #16]
 8016bbe:	69fa      	ldr	r2, [r7, #28]
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	005b      	lsls	r3, r3, #1
 8016bc4:	4413      	add	r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	440b      	add	r3, r1
 8016bca:	330c      	adds	r3, #12
 8016bcc:	7819      	ldrb	r1, [r3, #0]
 8016bce:	697a      	ldr	r2, [r7, #20]
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	3379      	adds	r3, #121	; 0x79
 8016bd6:	460a      	mov	r2, r1
 8016bd8:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016bda:	6939      	ldr	r1, [r7, #16]
 8016bdc:	69fa      	ldr	r2, [r7, #28]
 8016bde:	4613      	mov	r3, r2
 8016be0:	005b      	lsls	r3, r3, #1
 8016be2:	4413      	add	r3, r2
 8016be4:	009b      	lsls	r3, r3, #2
 8016be6:	440b      	add	r3, r1
 8016be8:	330d      	adds	r3, #13
 8016bea:	7819      	ldrb	r1, [r3, #0]
 8016bec:	697a      	ldr	r2, [r7, #20]
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	3389      	adds	r3, #137	; 0x89
 8016bf4:	460a      	mov	r2, r1
 8016bf6:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016bf8:	6939      	ldr	r1, [r7, #16]
 8016bfa:	69fa      	ldr	r2, [r7, #28]
 8016bfc:	4613      	mov	r3, r2
 8016bfe:	005b      	lsls	r3, r3, #1
 8016c00:	4413      	add	r3, r2
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	440b      	add	r3, r1
 8016c06:	330f      	adds	r3, #15
 8016c08:	7819      	ldrb	r1, [r3, #0]
 8016c0a:	697a      	ldr	r2, [r7, #20]
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	4413      	add	r3, r2
 8016c10:	3399      	adds	r3, #153	; 0x99
 8016c12:	460a      	mov	r2, r1
 8016c14:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016c16:	6939      	ldr	r1, [r7, #16]
 8016c18:	69fa      	ldr	r2, [r7, #28]
 8016c1a:	4613      	mov	r3, r2
 8016c1c:	005b      	lsls	r3, r3, #1
 8016c1e:	4413      	add	r3, r2
 8016c20:	009b      	lsls	r3, r3, #2
 8016c22:	440b      	add	r3, r1
 8016c24:	3310      	adds	r3, #16
 8016c26:	7819      	ldrb	r1, [r3, #0]
 8016c28:	697a      	ldr	r2, [r7, #20]
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	4413      	add	r3, r2
 8016c2e:	33a9      	adds	r3, #169	; 0xa9
 8016c30:	460a      	mov	r2, r1
 8016c32:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016c34:	69fb      	ldr	r3, [r7, #28]
 8016c36:	3301      	adds	r3, #1
 8016c38:	61fb      	str	r3, [r7, #28]
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016c40:	461a      	mov	r2, r3
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	4293      	cmp	r3, r2
 8016c46:	dbb9      	blt.n	8016bbc <_evtParsing+0x324>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016c48:	697b      	ldr	r3, [r7, #20]
 8016c4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016c54:	4b54      	ldr	r3, [pc, #336]	; (8016da8 <_evtParsing+0x510>)
 8016c56:	681a      	ldr	r2, [r3, #0]
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                    break;
 8016c5e:	e062      	b.n	8016d26 <_evtParsing+0x48e>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	7ddb      	ldrb	r3, [r3, #23]
 8016c64:	f003 0304 	and.w	r3, r3, #4
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d05b      	beq.n	8016d24 <_evtParsing+0x48c>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016c6c:	693b      	ldr	r3, [r7, #16]
 8016c6e:	8a1b      	ldrh	r3, [r3, #16]
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	3330      	adds	r3, #48	; 0x30
 8016c74:	b2da      	uxtb	r2, r3
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	7c9a      	ldrb	r2, [r3, #18]
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	7cda      	ldrb	r2, [r3, #19]
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	7d1a      	ldrb	r2, [r3, #20]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	7d5a      	ldrb	r2, [r3, #21]
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	7d9a      	ldrb	r2, [r3, #22]
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016ca2:	693b      	ldr	r3, [r7, #16]
 8016ca4:	68db      	ldr	r3, [r3, #12]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	4b40      	ldr	r3, [pc, #256]	; (8016dac <_evtParsing+0x514>)
 8016caa:	fba3 2302 	umull	r2, r3, r3, r2
 8016cae:	0c9b      	lsrs	r3, r3, #18
 8016cb0:	b29a      	uxth	r2, r3
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016cb6:	e035      	b.n	8016d24 <_evtParsing+0x48c>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	695b      	ldr	r3, [r3, #20]
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f7e9 fbdf 	bl	8000480 <__aeabi_ui2d>
 8016cc2:	4602      	mov	r2, r0
 8016cc4:	460b      	mov	r3, r1
 8016cc6:	68f9      	ldr	r1, [r7, #12]
 8016cc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	69db      	ldr	r3, [r3, #28]
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7e9 fbe5 	bl	80004a0 <__aeabi_i2d>
 8016cd6:	a332      	add	r3, pc, #200	; (adr r3, 8016da0 <_evtParsing+0x508>)
 8016cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cdc:	f7e9 fd74 	bl	80007c8 <__aeabi_ddiv>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	68f9      	ldr	r1, [r7, #12]
 8016ce6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    _new_speed = TRUE;
 8016cea:	4b31      	ldr	r3, [pc, #196]	; (8016db0 <_evtParsing+0x518>)
 8016cec:	2201      	movs	r2, #1
 8016cee:	701a      	strb	r2, [r3, #0]
                    break;
 8016cf0:	e019      	b.n	8016d26 <_evtParsing+0x48e>

                default:
                	error = TRUE;
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	8b9b      	ldrh	r3, [r3, #28]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	4b2d      	ldr	r3, [pc, #180]	; (8016db4 <_evtParsing+0x51c>)
 8016cfe:	68db      	ldr	r3, [r3, #12]
 8016d00:	693a      	ldr	r2, [r7, #16]
 8016d02:	7812      	ldrb	r2, [r2, #0]
 8016d04:	4611      	mov	r1, r2
 8016d06:	693a      	ldr	r2, [r7, #16]
 8016d08:	7852      	ldrb	r2, [r2, #1]
 8016d0a:	9202      	str	r2, [sp, #8]
 8016d0c:	9101      	str	r1, [sp, #4]
 8016d0e:	9300      	str	r3, [sp, #0]
 8016d10:	4603      	mov	r3, r0
 8016d12:	f240 1237 	movw	r2, #311	; 0x137
 8016d16:	4928      	ldr	r1, [pc, #160]	; (8016db8 <_evtParsing+0x520>)
 8016d18:	2004      	movs	r0, #4
 8016d1a:	f7fc fc5d 	bl	80135d8 <pifLog_Printf>
#endif
                    break;
 8016d1e:	e002      	b.n	8016d26 <_evtParsing+0x48e>
                    break;
 8016d20:	bf00      	nop
 8016d22:	e014      	b.n	8016d4e <_evtParsing+0x4b6>
                	break;
 8016d24:	bf00      	nop
            }
        	break;
 8016d26:	e012      	b.n	8016d4e <_evtParsing+0x4b6>

		default:
        	error = TRUE;
 8016d28:	2301      	movs	r3, #1
 8016d2a:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	8b9b      	ldrh	r3, [r3, #28]
 8016d30:	4619      	mov	r1, r3
 8016d32:	4b20      	ldr	r3, [pc, #128]	; (8016db4 <_evtParsing+0x51c>)
 8016d34:	68db      	ldr	r3, [r3, #12]
 8016d36:	693a      	ldr	r2, [r7, #16]
 8016d38:	7812      	ldrb	r2, [r2, #0]
 8016d3a:	9201      	str	r2, [sp, #4]
 8016d3c:	9300      	str	r3, [sp, #0]
 8016d3e:	460b      	mov	r3, r1
 8016d40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8016d44:	491d      	ldr	r1, [pc, #116]	; (8016dbc <_evtParsing+0x524>)
 8016d46:	2004      	movs	r0, #4
 8016d48:	f7fc fc46 	bl	80135d8 <pifLog_Printf>
#endif
			break;
 8016d4c:	bf00      	nop
        }

    	if (!error && p_owner->evt_ubx_receive) (*p_owner->evt_ubx_receive)(p_packet);
 8016d4e:	7efb      	ldrb	r3, [r7, #27]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d107      	bne.n	8016d64 <_evtParsing+0x4cc>
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	685b      	ldr	r3, [r3, #4]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d003      	beq.n	8016d64 <_evtParsing+0x4cc>
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	685b      	ldr	r3, [r3, #4]
 8016d60:	6938      	ldr	r0, [r7, #16]
 8016d62:	4798      	blx	r3

        if (_new_position && _new_speed) {
 8016d64:	4b16      	ldr	r3, [pc, #88]	; (8016dc0 <_evtParsing+0x528>)
 8016d66:	781b      	ldrb	r3, [r3, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d00f      	beq.n	8016d8c <_evtParsing+0x4f4>
 8016d6c:	4b10      	ldr	r3, [pc, #64]	; (8016db0 <_evtParsing+0x518>)
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d00b      	beq.n	8016d8c <_evtParsing+0x4f4>
			pifGps_SendEvent(&p_owner->_gps);
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	3310      	adds	r3, #16
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fe feaf 	bl	8015adc <pifGps_SendEvent>
            _new_speed = _new_position = FALSE;
 8016d7e:	4b10      	ldr	r3, [pc, #64]	; (8016dc0 <_evtParsing+0x528>)
 8016d80:	2200      	movs	r2, #0
 8016d82:	701a      	strb	r2, [r3, #0]
 8016d84:	4b0e      	ldr	r3, [pc, #56]	; (8016dc0 <_evtParsing+0x528>)
 8016d86:	781a      	ldrb	r2, [r3, #0]
 8016d88:	4b09      	ldr	r3, [pc, #36]	; (8016db0 <_evtParsing+0x518>)
 8016d8a:	701a      	strb	r2, [r3, #0]
        }
    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	2200      	movs	r2, #0
 8016d90:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8016d94:	e000      	b.n	8016d98 <_evtParsing+0x500>
    if (!p_owner->_gps.evt_receive) return;
 8016d96:	bf00      	nop
    }
}
 8016d98:	3720      	adds	r7, #32
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}
 8016d9e:	bf00      	nop
 8016da0:	00000000 	.word	0x00000000
 8016da4:	40f86a00 	.word	0x40f86a00
 8016da8:	200020d8 	.word	0x200020d8
 8016dac:	431bde83 	.word	0x431bde83
 8016db0:	20002271 	.word	0x20002271
 8016db4:	2000006c 	.word	0x2000006c
 8016db8:	080269e4 	.word	0x080269e4
 8016dbc:	08026a00 	.word	0x08026a00
 8016dc0:	20002270 	.word	0x20002270

08016dc4 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b088      	sub	sp, #32
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	60f8      	str	r0, [r7, #12]
 8016dcc:	60b9      	str	r1, [r7, #8]
 8016dce:	4613      	mov	r3, r2
 8016dd0:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016dda:	69bb      	ldr	r3, [r7, #24]
 8016ddc:	68ba      	ldr	r2, [r7, #8]
 8016dde:	4413      	add	r3, r2
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b2a      	cmp	r3, #42	; 0x2a
 8016de4:	d13a      	bne.n	8016e5c <_makeNmeaPacket+0x98>
			i++;
 8016de6:	69bb      	ldr	r3, [r7, #24]
 8016de8:	3301      	adds	r3, #1
 8016dea:	61bb      	str	r3, [r7, #24]
			break;
 8016dec:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016dee:	4b47      	ldr	r3, [pc, #284]	; (8016f0c <_makeNmeaPacket+0x148>)
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	7ffb      	ldrb	r3, [r7, #31]
 8016df4:	091b      	lsrs	r3, r3, #4
 8016df6:	b2db      	uxtb	r3, r3
 8016df8:	f003 030f 	and.w	r3, r3, #15
 8016dfc:	441a      	add	r2, r3
 8016dfe:	69bb      	ldr	r3, [r7, #24]
 8016e00:	68b9      	ldr	r1, [r7, #8]
 8016e02:	440b      	add	r3, r1
 8016e04:	7812      	ldrb	r2, [r2, #0]
 8016e06:	701a      	strb	r2, [r3, #0]
 8016e08:	69bb      	ldr	r3, [r7, #24]
 8016e0a:	3301      	adds	r3, #1
 8016e0c:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016e0e:	4b3f      	ldr	r3, [pc, #252]	; (8016f0c <_makeNmeaPacket+0x148>)
 8016e10:	681a      	ldr	r2, [r3, #0]
 8016e12:	7ffb      	ldrb	r3, [r7, #31]
 8016e14:	f003 030f 	and.w	r3, r3, #15
 8016e18:	441a      	add	r2, r3
 8016e1a:	69bb      	ldr	r3, [r7, #24]
 8016e1c:	68b9      	ldr	r1, [r7, #8]
 8016e1e:	440b      	add	r3, r1
 8016e20:	7812      	ldrb	r2, [r2, #0]
 8016e22:	701a      	strb	r2, [r3, #0]
 8016e24:	69bb      	ldr	r3, [r7, #24]
 8016e26:	3301      	adds	r3, #1
 8016e28:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016e2a:	69bb      	ldr	r3, [r7, #24]
 8016e2c:	68ba      	ldr	r2, [r7, #8]
 8016e2e:	4413      	add	r3, r2
 8016e30:	220d      	movs	r2, #13
 8016e32:	701a      	strb	r2, [r3, #0]
 8016e34:	69bb      	ldr	r3, [r7, #24]
 8016e36:	3301      	adds	r3, #1
 8016e38:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016e3a:	69bb      	ldr	r3, [r7, #24]
 8016e3c:	68ba      	ldr	r2, [r7, #8]
 8016e3e:	4413      	add	r3, r2
 8016e40:	220a      	movs	r2, #10
 8016e42:	701a      	strb	r2, [r3, #0]
 8016e44:	69bb      	ldr	r3, [r7, #24]
 8016e46:	3301      	adds	r3, #1
 8016e48:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016e4a:	69bb      	ldr	r3, [r7, #24]
 8016e4c:	68ba      	ldr	r2, [r7, #8]
 8016e4e:	4413      	add	r3, r2
 8016e50:	2200      	movs	r2, #0
 8016e52:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016e54:	79fb      	ldrb	r3, [r7, #7]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d01b      	beq.n	8016e92 <_makeNmeaPacket+0xce>
 8016e5a:	e00f      	b.n	8016e7c <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 8016e5c:	69bb      	ldr	r3, [r7, #24]
 8016e5e:	68ba      	ldr	r2, [r7, #8]
 8016e60:	4413      	add	r3, r2
 8016e62:	781a      	ldrb	r2, [r3, #0]
 8016e64:	7ffb      	ldrb	r3, [r7, #31]
 8016e66:	4053      	eors	r3, r2
 8016e68:	77fb      	strb	r3, [r7, #31]
			i++;
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	3301      	adds	r3, #1
 8016e6e:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016e70:	e7b3      	b.n	8016dda <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 8016e72:	f7fd fe4d 	bl	8014b10 <pifTaskManager_Yield>
 8016e76:	4603      	mov	r3, r0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d009      	beq.n	8016e90 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7fc ff5d 	bl	8013d42 <pifRingBuffer_IsEmpty>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d0f1      	beq.n	8016e72 <_makeNmeaPacket+0xae>
 8016e8e:	e000      	b.n	8016e92 <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8016e90:	bf00      	nop
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fc ffd4 	bl	8013e46 <pifRingBuffer_BackupHead>

	header[0] = i;
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016eac:	2300      	movs	r3, #0
 8016eae:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016eb6:	f107 0114 	add.w	r1, r7, #20
 8016eba:	2204      	movs	r2, #4
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7fd f813 	bl	8013ee8 <pifRingBuffer_PutData>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d013      	beq.n	8016ef0 <_makeNmeaPacket+0x12c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ece:	7d3a      	ldrb	r2, [r7, #20]
 8016ed0:	b292      	uxth	r2, r2
 8016ed2:	68b9      	ldr	r1, [r7, #8]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7fd f807 	bl	8013ee8 <pifRingBuffer_PutData>
 8016eda:	4603      	mov	r3, r0
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d009      	beq.n	8016ef4 <_makeNmeaPacket+0x130>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016ee6:	69db      	ldr	r3, [r3, #28]
 8016ee8:	2201      	movs	r2, #1
 8016eea:	705a      	strb	r2, [r3, #1]
	return TRUE;
 8016eec:	2301      	movs	r3, #1
 8016eee:	e009      	b.n	8016f04 <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016ef0:	bf00      	nop
 8016ef2:	e000      	b.n	8016ef6 <_makeNmeaPacket+0x132>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016ef4:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7fc ffb0 	bl	8013e62 <pifRingBuffer_RestoreHead>
	return FALSE;
 8016f02:	2300      	movs	r3, #0
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3720      	adds	r7, #32
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	20000060 	.word	0x20000060

08016f10 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b088      	sub	sp, #32
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	60f8      	str	r0, [r7, #12]
 8016f18:	60b9      	str	r1, [r7, #8]
 8016f1a:	603b      	str	r3, [r7, #0]
 8016f1c:	4613      	mov	r3, r2
 8016f1e:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	3302      	adds	r3, #2
 8016f24:	88fa      	ldrh	r2, [r7, #6]
 8016f26:	6839      	ldr	r1, [r7, #0]
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7ff fb31 	bl	8016590 <_checksumUbx>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 8016f32:	8bfb      	ldrh	r3, [r7, #30]
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8016f38:	8bfb      	ldrh	r3, [r7, #30]
 8016f3a:	0a1b      	lsrs	r3, r3, #8
 8016f3c:	b29b      	uxth	r3, r3
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 8016f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d010      	beq.n	8016f6c <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f4a:	e004      	b.n	8016f56 <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 8016f4c:	f7fd fde0 	bl	8014b10 <pifTaskManager_Yield>
 8016f50:	4603      	mov	r3, r0
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d009      	beq.n	8016f6a <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7fc fef0 	bl	8013d42 <pifRingBuffer_IsEmpty>
 8016f62:	4603      	mov	r3, r0
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d0f1      	beq.n	8016f4c <_makeUbxPacket+0x3c>
 8016f68:	e000      	b.n	8016f6c <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 8016f6a:	bf00      	nop
		}
	}

	pifRingBuffer_BackupHead(&p_owner->__tx.buffer);
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7fc ff67 	bl	8013e46 <pifRingBuffer_BackupHead>

	info[0] = length + 8;
 8016f78:	88fb      	ldrh	r3, [r7, #6]
 8016f7a:	b2db      	uxtb	r3, r3
 8016f7c:	3308      	adds	r3, #8
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8016f82:	2300      	movs	r3, #0
 8016f84:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 8016f86:	2300      	movs	r3, #0
 8016f88:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f94:	f107 0118 	add.w	r1, r7, #24
 8016f98:	2204      	movs	r2, #4
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7fc ffa4 	bl	8013ee8 <pifRingBuffer_PutData>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d026      	beq.n	8016ff4 <_makeUbxPacket+0xe4>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fac:	2206      	movs	r2, #6
 8016fae:	68b9      	ldr	r1, [r7, #8]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7fc ff99 	bl	8013ee8 <pifRingBuffer_PutData>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d01d      	beq.n	8016ff8 <_makeUbxPacket+0xe8>
	if (length > 0) {
 8016fbc:	88fb      	ldrh	r3, [r7, #6]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d00a      	beq.n	8016fd8 <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fc8:	88fa      	ldrh	r2, [r7, #6]
 8016fca:	6839      	ldr	r1, [r7, #0]
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7fc ff8b 	bl	8013ee8 <pifRingBuffer_PutData>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d011      	beq.n	8016ffc <_makeUbxPacket+0xec>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016fde:	f107 0114 	add.w	r1, r7, #20
 8016fe2:	2202      	movs	r2, #2
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7fc ff7f 	bl	8013ee8 <pifRingBuffer_PutData>
 8016fea:	4603      	mov	r3, r0
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d007      	beq.n	8017000 <_makeUbxPacket+0xf0>
	return TRUE;
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	e00d      	b.n	8017010 <_makeUbxPacket+0x100>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016ff4:	bf00      	nop
 8016ff6:	e004      	b.n	8017002 <_makeUbxPacket+0xf2>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016ff8:	bf00      	nop
 8016ffa:	e002      	b.n	8017002 <_makeUbxPacket+0xf2>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016ffc:	bf00      	nop
 8016ffe:	e000      	b.n	8017002 <_makeUbxPacket+0xf2>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8017000:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.buffer);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017008:	4618      	mov	r0, r3
 801700a:	f7fc ff2a 	bl	8013e62 <pifRingBuffer_RestoreHead>
	return FALSE;
 801700e:	2300      	movs	r3, #0
}
 8017010:	4618      	mov	r0, r3
 8017012:	3720      	adds	r7, #32
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}

08017018 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8017018:	b5b0      	push	{r4, r5, r7, lr}
 801701a:	b084      	sub	sp, #16
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801702c:	2b02      	cmp	r3, #2
 801702e:	d05d      	beq.n	80170ec <_evtSending+0xd4>
 8017030:	2b02      	cmp	r3, #2
 8017032:	dc72      	bgt.n	801711a <_evtSending+0x102>
 8017034:	2b00      	cmp	r3, #0
 8017036:	d002      	beq.n	801703e <_evtSending+0x26>
 8017038:	2b01      	cmp	r3, #1
 801703a:	d01c      	beq.n	8017076 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 801703c:	e06d      	b.n	801711a <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017044:	4618      	mov	r0, r3
 8017046:	f7fc fe7c 	bl	8013d42 <pifRingBuffer_IsEmpty>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d166      	bne.n	801711e <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	f203 207a 	addw	r0, r3, #634	; 0x27a
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 801705c:	2300      	movs	r3, #0
 801705e:	2104      	movs	r1, #4
 8017060:	f7fd f805 	bl	801406e <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2204      	movs	r2, #4
 8017068:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
			p_owner->__tx.state = GUTS_SENDING;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	2201      	movs	r2, #1
 8017070:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8017074:	e053      	b.n	801711e <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 8017088:	b29b      	uxth	r3, r3
 801708a:	4619      	mov	r1, r3
 801708c:	4610      	mov	r0, r2
 801708e:	f7fc fe2c 	bl	8013cea <pifRingBuffer_GetTailPointer>
 8017092:	4605      	mov	r5, r0
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	f503 7217 	add.w	r2, r3, #604	; 0x25c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	4619      	mov	r1, r3
 80170a4:	4610      	mov	r0, r2
 80170a6:	f7fc fe81 	bl	8013dac <pifRingBuffer_GetLinerSize>
 80170aa:	4603      	mov	r3, r0
 80170ac:	461a      	mov	r2, r3
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	4629      	mov	r1, r5
 80170b2:	4620      	mov	r0, r4
 80170b4:	4798      	blx	r3
 80170b6:	4603      	mov	r3, r0
 80170b8:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	f893 227e 	ldrb.w	r2, [r3, #638]	; 0x27e
 80170c0:	897b      	ldrh	r3, [r7, #10]
 80170c2:	b2db      	uxtb	r3, r3
 80170c4:	4413      	add	r3, r2
 80170c6:	b2da      	uxtb	r2, r3
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 80170d4:	3303      	adds	r3, #3
 80170d6:	68fa      	ldr	r2, [r7, #12]
 80170d8:	f892 227e 	ldrb.w	r2, [r2, #638]	; 0x27e
 80170dc:	4293      	cmp	r3, r2
 80170de:	da03      	bge.n	80170e8 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2202      	movs	r2, #2
 80170e4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		return TRUE;
 80170e8:	2301      	movs	r3, #1
 80170ea:	e01c      	b.n	8017126 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d115      	bne.n	8017122 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8017102:	b29b      	uxth	r3, r3
 8017104:	3304      	adds	r3, #4
 8017106:	b29b      	uxth	r3, r3
 8017108:	4619      	mov	r1, r3
 801710a:	4610      	mov	r0, r2
 801710c:	f7fc fff5 	bl	80140fa <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2200      	movs	r2, #0
 8017114:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8017118:	e003      	b.n	8017122 <_evtSending+0x10a>
		break;
 801711a:	bf00      	nop
 801711c:	e002      	b.n	8017124 <_evtSending+0x10c>
		break;
 801711e:	bf00      	nop
 8017120:	e000      	b.n	8017124 <_evtSending+0x10c>
		break;
 8017122:	bf00      	nop
	}
	return FALSE;
 8017124:	2300      	movs	r3, #0
}
 8017126:	4618      	mov	r0, r3
 8017128:	3710      	adds	r7, #16
 801712a:	46bd      	mov	sp, r7
 801712c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017130 <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af02      	add	r7, sp, #8
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	460b      	mov	r3, r1
 801713a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d103      	bne.n	801714a <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 8017142:	4b1e      	ldr	r3, [pc, #120]	; (80171bc <pifGpsUblox_Init+0x8c>)
 8017144:	2201      	movs	r2, #1
 8017146:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017148:	e026      	b.n	8017198 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 801714a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801714e:	2100      	movs	r1, #0
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f00a fed3 	bl	8021efc <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	3310      	adds	r3, #16
 801715a:	887a      	ldrh	r2, [r7, #2]
 801715c:	4611      	mov	r1, r2
 801715e:	4618      	mov	r0, r3
 8017160:	f7fe fc3a 	bl	80159d8 <pifGps_Init>
 8017164:	4603      	mov	r3, r0
 8017166:	2b00      	cmp	r3, #0
 8017168:	d013      	beq.n	8017192 <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017170:	2240      	movs	r2, #64	; 0x40
 8017172:	2100      	movs	r1, #0
 8017174:	4618      	mov	r0, r3
 8017176:	f7fc fd47 	bl	8013c08 <pifRingBuffer_InitHeap>
 801717a:	4603      	mov	r3, r0
 801717c:	2b00      	cmp	r3, #0
 801717e:	d00a      	beq.n	8017196 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017186:	490e      	ldr	r1, [pc, #56]	; (80171c0 <pifGpsUblox_Init+0x90>)
 8017188:	4618      	mov	r0, r3
 801718a:	f7fc fda0 	bl	8013cce <pifRingBuffer_SetName>
    return TRUE;
 801718e:	2301      	movs	r3, #1
 8017190:	e010      	b.n	80171b4 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017192:	bf00      	nop
 8017194:	e000      	b.n	8017198 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017196:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f000 f815 	bl	80171c8 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801719e:	887b      	ldrh	r3, [r7, #2]
 80171a0:	4a06      	ldr	r2, [pc, #24]	; (80171bc <pifGpsUblox_Init+0x8c>)
 80171a2:	7812      	ldrb	r2, [r2, #0]
 80171a4:	9200      	str	r2, [sp, #0]
 80171a6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80171aa:	4906      	ldr	r1, [pc, #24]	; (80171c4 <pifGpsUblox_Init+0x94>)
 80171ac:	2004      	movs	r0, #4
 80171ae:	f7fc fa13 	bl	80135d8 <pifLog_Printf>
#endif
    return FALSE;
 80171b2:	2300      	movs	r3, #0
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	3708      	adds	r7, #8
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}
 80171bc:	200020c9 	.word	0x200020c9
 80171c0:	08026a14 	.word	0x08026a14
 80171c4:	08026a18 	.word	0x08026a18

080171c8 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7fc fd5e 	bl	8013c98 <pifRingBuffer_Clear>
}
 80171dc:	bf00      	nop
 80171de:	3708      	adds	r7, #8
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}

080171e4 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b082      	sub	sp, #8
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
 80171ec:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	683a      	ldr	r2, [r7, #0]
 80171f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80171f6:	4b05      	ldr	r3, [pc, #20]	; (801720c <pifGpsUblox_AttachComm+0x28>)
 80171f8:	4a05      	ldr	r2, [pc, #20]	; (8017210 <pifGpsUblox_AttachComm+0x2c>)
 80171fa:	6879      	ldr	r1, [r7, #4]
 80171fc:	6838      	ldr	r0, [r7, #0]
 80171fe:	f7fa ffab 	bl	8012158 <pifComm_AttachClient>
}
 8017202:	bf00      	nop
 8017204:	3708      	adds	r7, #8
 8017206:	46bd      	mov	sp, r7
 8017208:	bd80      	pop	{r7, pc}
 801720a:	bf00      	nop
 801720c:	08017019 	.word	0x08017019
 8017210:	08016899 	.word	0x08016899

08017214 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 8017214:	b590      	push	{r4, r7, lr}
 8017216:	b091      	sub	sp, #68	; 0x44
 8017218:	af02      	add	r7, sp, #8
 801721a:	60f8      	str	r0, [r7, #12]
 801721c:	4608      	mov	r0, r1
 801721e:	4611      	mov	r1, r2
 8017220:	461a      	mov	r2, r3
 8017222:	4603      	mov	r3, r0
 8017224:	72fb      	strb	r3, [r7, #11]
 8017226:	460b      	mov	r3, r1
 8017228:	813b      	strh	r3, [r7, #8]
 801722a:	4613      	mov	r3, r2
 801722c:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017234:	2b00      	cmp	r3, #0
 8017236:	d004      	beq.n	8017242 <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 8017238:	4b0f      	ldr	r3, [pc, #60]	; (8017278 <pifGpsUblox_SetPubxConfig+0x64>)
 801723a:	2202      	movs	r2, #2
 801723c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801723e:	2300      	movs	r3, #0
 8017240:	e015      	b.n	801726e <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 8017242:	7af9      	ldrb	r1, [r7, #11]
 8017244:	893c      	ldrh	r4, [r7, #8]
 8017246:	88fb      	ldrh	r3, [r7, #6]
 8017248:	f107 0010 	add.w	r0, r7, #16
 801724c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801724e:	9201      	str	r2, [sp, #4]
 8017250:	9300      	str	r3, [sp, #0]
 8017252:	4623      	mov	r3, r4
 8017254:	460a      	mov	r2, r1
 8017256:	4909      	ldr	r1, [pc, #36]	; (801727c <pifGpsUblox_SetPubxConfig+0x68>)
 8017258:	f7fa fdbc 	bl	8011dd4 <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 801725c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017260:	f107 0310 	add.w	r3, r7, #16
 8017264:	4619      	mov	r1, r3
 8017266:	68f8      	ldr	r0, [r7, #12]
 8017268:	f7ff fdac 	bl	8016dc4 <_makeNmeaPacket>
 801726c:	4603      	mov	r3, r0
}
 801726e:	4618      	mov	r0, r3
 8017270:	373c      	adds	r7, #60	; 0x3c
 8017272:	46bd      	mov	sp, r7
 8017274:	bd90      	pop	{r4, r7, pc}
 8017276:	bf00      	nop
 8017278:	200020c9 	.word	0x200020c9
 801727c:	08026a6c 	.word	0x08026a6c

08017280 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b086      	sub	sp, #24
 8017284:	af02      	add	r7, sp, #8
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	4608      	mov	r0, r1
 801728a:	4611      	mov	r1, r2
 801728c:	461a      	mov	r2, r3
 801728e:	4603      	mov	r3, r0
 8017290:	70fb      	strb	r3, [r7, #3]
 8017292:	460b      	mov	r3, r1
 8017294:	70bb      	strb	r3, [r7, #2]
 8017296:	4613      	mov	r3, r2
 8017298:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 801729a:	f246 23b5 	movw	r3, #25269	; 0x62b5
 801729e:	60bb      	str	r3, [r7, #8]
 80172a0:	2300      	movs	r3, #0
 80172a2:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d004      	beq.n	80172b8 <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 80172ae:	4b0f      	ldr	r3, [pc, #60]	; (80172ec <pifGpsUblox_SendUbxMsg+0x6c>)
 80172b0:	2202      	movs	r2, #2
 80172b2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80172b4:	2300      	movs	r3, #0
 80172b6:	e015      	b.n	80172e4 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 80172b8:	78fb      	ldrb	r3, [r7, #3]
 80172ba:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 80172bc:	78bb      	ldrb	r3, [r7, #2]
 80172be:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 80172c0:	883b      	ldrh	r3, [r7, #0]
 80172c2:	b2db      	uxtb	r3, r3
 80172c4:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 80172c6:	883b      	ldrh	r3, [r7, #0]
 80172c8:	0a1b      	lsrs	r3, r3, #8
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	b2db      	uxtb	r3, r3
 80172ce:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 80172d0:	883a      	ldrh	r2, [r7, #0]
 80172d2:	f107 0108 	add.w	r1, r7, #8
 80172d6:	7f3b      	ldrb	r3, [r7, #28]
 80172d8:	9300      	str	r3, [sp, #0]
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7ff fe17 	bl	8016f10 <_makeUbxPacket>
 80172e2:	4603      	mov	r3, r0
}
 80172e4:	4618      	mov	r0, r3
 80172e6:	3710      	adds	r7, #16
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}
 80172ec:	200020c9 	.word	0x200020c9

080172f0 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b086      	sub	sp, #24
 80172f4:	af02      	add	r7, sp, #8
 80172f6:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d103      	bne.n	8017306 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 80172fe:	4b0e      	ldr	r3, [pc, #56]	; (8017338 <_evtTimerRxTimeout+0x48>)
 8017300:	2201      	movs	r2, #1
 8017302:	701a      	strb	r2, [r3, #0]
		return;
 8017304:	e014      	b.n	8017330 <_evtTimerRxTimeout+0x40>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	891b      	ldrh	r3, [r3, #8]
 801730e:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	7c1b      	ldrb	r3, [r3, #16]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 8017314:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	7f5b      	ldrb	r3, [r3, #29]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 801731a:	9301      	str	r3, [sp, #4]
 801731c:	9200      	str	r2, [sp, #0]
 801731e:	460b      	mov	r3, r1
 8017320:	2216      	movs	r2, #22
 8017322:	4906      	ldr	r1, [pc, #24]	; (801733c <_evtTimerRxTimeout+0x4c>)
 8017324:	2004      	movs	r0, #4
 8017326:	f7fc f957 	bl	80135d8 <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	2200      	movs	r2, #0
 801732e:	741a      	strb	r2, [r3, #16]
}
 8017330:	3710      	adds	r7, #16
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	200020c9 	.word	0x200020c9
 801733c:	08026aa8 	.word	0x08026aa8

08017340 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 8017340:	b590      	push	{r4, r7, lr}
 8017342:	b08b      	sub	sp, #44	; 0x2c
 8017344:	af04      	add	r7, sp, #16
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	331c      	adds	r3, #28
 801734e:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017350:	e0b0      	b.n	80174b4 <_parsingPacket+0x174>
		switch (p_owner->__rx.state) {
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	7c1b      	ldrb	r3, [r3, #16]
 8017356:	2b05      	cmp	r3, #5
 8017358:	f200 80ab 	bhi.w	80174b2 <_parsingPacket+0x172>
 801735c:	a201      	add	r2, pc, #4	; (adr r2, 8017364 <_parsingPacket+0x24>)
 801735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017362:	bf00      	nop
 8017364:	0801737d 	.word	0x0801737d
 8017368:	080173c1 	.word	0x080173c1
 801736c:	080173d9 	.word	0x080173d9
 8017370:	080173f1 	.word	0x080173f1
 8017374:	0801741d 	.word	0x0801741d
 8017378:	08017445 	.word	0x08017445
		case MRS_IDLE:
			if (data == '$') {
 801737c:	7afb      	ldrb	r3, [r7, #11]
 801737e:	2b24      	cmp	r3, #36	; 0x24
 8017380:	d109      	bne.n	8017396 <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2201      	movs	r2, #1
 8017386:	741a      	strb	r2, [r3, #16]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801738c:	21c8      	movs	r1, #200	; 0xc8
 801738e:	4618      	mov	r0, r3
 8017390:	f7fd fd60 	bl	8014e54 <pifTimer_Start>
 8017394:	e08e      	b.n	80174b4 <_parsingPacket+0x174>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->evt_other_packet) {
 8017396:	4b64      	ldr	r3, [pc, #400]	; (8017528 <_parsingPacket+0x1e8>)
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	2b03      	cmp	r3, #3
 801739c:	d10a      	bne.n	80173b4 <_parsingPacket+0x74>
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d006      	beq.n	80173b4 <_parsingPacket+0x74>
				(*p_owner->evt_other_packet)(p_owner, data);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	7afa      	ldrb	r2, [r7, #11]
 80173ac:	4611      	mov	r1, r2
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	4798      	blx	r3
 80173b2:	e004      	b.n	80173be <_parsingPacket+0x7e>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 80173b4:	2301      	movs	r3, #1
 80173b6:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 80173b8:	234b      	movs	r3, #75	; 0x4b
 80173ba:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 80173bc:	e089      	b.n	80174d2 <_parsingPacket+0x192>
			}
			break;
 80173be:	e079      	b.n	80174b4 <_parsingPacket+0x174>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 80173c0:	7afb      	ldrb	r3, [r7, #11]
 80173c2:	2b4d      	cmp	r3, #77	; 0x4d
 80173c4:	d103      	bne.n	80173ce <_parsingPacket+0x8e>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2202      	movs	r2, #2
 80173ca:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80173cc:	e072      	b.n	80174b4 <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 80173ce:	2301      	movs	r3, #1
 80173d0:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80173d2:	2358      	movs	r3, #88	; 0x58
 80173d4:	613b      	str	r3, [r7, #16]
				goto fail;
 80173d6:	e07c      	b.n	80174d2 <_parsingPacket+0x192>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 80173d8:	7afb      	ldrb	r3, [r7, #11]
 80173da:	2b3c      	cmp	r3, #60	; 0x3c
 80173dc:	d103      	bne.n	80173e6 <_parsingPacket+0xa6>
				p_owner->__rx.state = MRS_DIRECTION;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2203      	movs	r2, #3
 80173e2:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80173e4:	e066      	b.n	80174b4 <_parsingPacket+0x174>
				pkt_err = PKT_ERR_INVALID_DATA;
 80173e6:	2301      	movs	r3, #1
 80173e8:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 80173ea:	2365      	movs	r3, #101	; 0x65
 80173ec:	613b      	str	r3, [r7, #16]
				goto fail;
 80173ee:	e070      	b.n	80174d2 <_parsingPacket+0x192>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 80173f0:	7afb      	ldrb	r3, [r7, #11]
 80173f2:	2b7c      	cmp	r3, #124	; 0x7c
 80173f4:	d80d      	bhi.n	8017412 <_parsingPacket+0xd2>
				p_packet->data_count = data;
 80173f6:	7afa      	ldrb	r2, [r7, #11]
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	695b      	ldr	r3, [r3, #20]
 8017400:	7afa      	ldrb	r2, [r7, #11]
 8017402:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2201      	movs	r2, #1
 8017408:	761a      	strb	r2, [r3, #24]
				p_owner->__rx.state = MRS_LENGTH;
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	2204      	movs	r2, #4
 801740e:	741a      	strb	r2, [r3, #16]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017410:	e050      	b.n	80174b4 <_parsingPacket+0x174>
				pkt_err = PKT_ERR_BIG_LENGHT;
 8017412:	2300      	movs	r3, #0
 8017414:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017416:	2375      	movs	r3, #117	; 0x75
 8017418:	613b      	str	r3, [r7, #16]
				goto fail;
 801741a:	e05a      	b.n	80174d2 <_parsingPacket+0x192>

		case MRS_LENGTH:
			p_packet->command = data;
 801741c:	7afa      	ldrb	r2, [r7, #11]
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	695b      	ldr	r3, [r3, #20]
 8017426:	687a      	ldr	r2, [r7, #4]
 8017428:	7e12      	ldrb	r2, [r2, #24]
 801742a:	4413      	add	r3, r2
 801742c:	7afa      	ldrb	r2, [r7, #11]
 801742e:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	7e1b      	ldrb	r3, [r3, #24]
 8017434:	3301      	adds	r3, #1
 8017436:	b2da      	uxtb	r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	761a      	strb	r2, [r3, #24]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2205      	movs	r2, #5
 8017440:	741a      	strb	r2, [r3, #16]
			break;
 8017442:	e037      	b.n	80174b4 <_parsingPacket+0x174>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	695b      	ldr	r3, [r3, #20]
 8017448:	687a      	ldr	r2, [r7, #4]
 801744a:	7e12      	ldrb	r2, [r2, #24]
 801744c:	4413      	add	r3, r2
 801744e:	7afa      	ldrb	r2, [r7, #11]
 8017450:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	7e1b      	ldrb	r3, [r3, #24]
 8017456:	3301      	adds	r3, #1
 8017458:	b2da      	uxtb	r2, r3
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	761a      	strb	r2, [r3, #24]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	785b      	ldrb	r3, [r3, #1]
 8017462:	3302      	adds	r3, #2
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	7e12      	ldrb	r2, [r2, #24]
 8017468:	4293      	cmp	r3, r2
 801746a:	da23      	bge.n	80174b4 <_parsingPacket+0x174>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	695a      	ldr	r2, [r3, #20]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	785b      	ldrb	r3, [r3, #1]
 8017474:	b29b      	uxth	r3, r3
 8017476:	3302      	adds	r3, #2
 8017478:	b29b      	uxth	r3, r3
 801747a:	4619      	mov	r1, r3
 801747c:	4610      	mov	r0, r2
 801747e:	f7fa fd12 	bl	8011ea6 <pifCheckXor>
 8017482:	4603      	mov	r3, r0
 8017484:	461a      	mov	r2, r3
 8017486:	7afb      	ldrb	r3, [r7, #11]
 8017488:	429a      	cmp	r2, r3
 801748a:	d10d      	bne.n	80174a8 <_parsingPacket+0x168>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017490:	4618      	mov	r0, r3
 8017492:	f7fd fd0d 	bl	8014eb0 <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	695b      	ldr	r3, [r3, #20]
 801749a:	1c9a      	adds	r2, r3, #2
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	2206      	movs	r2, #6
 80174a4:	741a      	strb	r2, [r3, #16]
					return;
 80174a6:	e03c      	b.n	8017522 <_parsingPacket+0x1e2>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 80174a8:	2302      	movs	r3, #2
 80174aa:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 80174ac:	2391      	movs	r3, #145	; 0x91
 80174ae:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 80174b0:	e00f      	b.n	80174d2 <_parsingPacket+0x192>
				}
			}
			break;

		default:
			break;
 80174b2:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	68da      	ldr	r2, [r3, #12]
 80174b8:	f107 010b 	add.w	r1, r7, #11
 80174bc:	683b      	ldr	r3, [r7, #0]
 80174be:	4610      	mov	r0, r2
 80174c0:	4798      	blx	r3
 80174c2:	4603      	mov	r3, r0
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	f47f af44 	bne.w	8017352 <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 80174ca:	4b17      	ldr	r3, [pc, #92]	; (8017528 <_parsingPacket+0x1e8>)
 80174cc:	2203      	movs	r2, #3
 80174ce:	701a      	strb	r2, [r3, #0]
	return;
 80174d0:	e027      	b.n	8017522 <_parsingPacket+0x1e2>

fail:
	if (pkt_err != pre_error) {
 80174d2:	4b15      	ldr	r3, [pc, #84]	; (8017528 <_parsingPacket+0x1e8>)
 80174d4:	781b      	ldrb	r3, [r3, #0]
 80174d6:	7dfa      	ldrb	r2, [r7, #23]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d01a      	beq.n	8017512 <_parsingPacket+0x1d2>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	891b      	ldrh	r3, [r3, #8]
 80174e0:	461c      	mov	r4, r3
 80174e2:	7dfb      	ldrb	r3, [r7, #23]
 80174e4:	4a11      	ldr	r2, [pc, #68]	; (801752c <_parsingPacket+0x1ec>)
 80174e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80174ea:	7afa      	ldrb	r2, [r7, #11]
 80174ec:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 80174ee:	687a      	ldr	r2, [r7, #4]
 80174f0:	7c12      	ldrb	r2, [r2, #16]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80174f2:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 80174f4:	68fa      	ldr	r2, [r7, #12]
 80174f6:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 80174f8:	9203      	str	r2, [sp, #12]
 80174fa:	9002      	str	r0, [sp, #8]
 80174fc:	9101      	str	r1, [sp, #4]
 80174fe:	9300      	str	r3, [sp, #0]
 8017500:	4623      	mov	r3, r4
 8017502:	693a      	ldr	r2, [r7, #16]
 8017504:	490a      	ldr	r1, [pc, #40]	; (8017530 <_parsingPacket+0x1f0>)
 8017506:	2004      	movs	r0, #4
 8017508:	f7fc f866 	bl	80135d8 <pifLog_Printf>
#endif
		pre_error = pkt_err;
 801750c:	4a06      	ldr	r2, [pc, #24]	; (8017528 <_parsingPacket+0x1e8>)
 801750e:	7dfb      	ldrb	r3, [r7, #23]
 8017510:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017516:	4618      	mov	r0, r3
 8017518:	f7fd fcca 	bl	8014eb0 <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2200      	movs	r2, #0
 8017520:	741a      	strb	r2, [r3, #16]
}
 8017522:	371c      	adds	r7, #28
 8017524:	46bd      	mov	sp, r7
 8017526:	bd90      	pop	{r4, r7, pc}
 8017528:	2000008c 	.word	0x2000008c
 801752c:	20000080 	.word	0x20000080
 8017530:	08026b04 	.word	0x08026b04

08017534 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	7c1b      	ldrb	r3, [r3, #16]
 8017546:	2b05      	cmp	r3, #5
 8017548:	d803      	bhi.n	8017552 <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 801754a:	6839      	ldr	r1, [r7, #0]
 801754c:	68f8      	ldr	r0, [r7, #12]
 801754e:	f7ff fef7 	bl	8017340 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	7c1b      	ldrb	r3, [r3, #16]
 8017556:	2b06      	cmp	r3, #6
 8017558:	d117      	bne.n	801758a <_evtParsing+0x56>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

    	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner, &p_owner->__rx.packet);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d006      	beq.n	8017570 <_evtParsing+0x3c>
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	68fa      	ldr	r2, [r7, #12]
 8017568:	321c      	adds	r2, #28
 801756a:	4611      	mov	r1, r2
 801756c:	68f8      	ldr	r0, [r7, #12]
 801756e:	4798      	blx	r3
    	if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	69db      	ldr	r3, [r3, #28]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d004      	beq.n	8017584 <_evtParsing+0x50>
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	68db      	ldr	r3, [r3, #12]
 801757e:	69db      	ldr	r3, [r3, #28]
 8017580:	2201      	movs	r2, #1
 8017582:	705a      	strb	r2, [r3, #1]
    	p_owner->__rx.state = MRS_IDLE;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	2200      	movs	r2, #0
 8017588:	741a      	strb	r2, [r3, #16]
    }
}
 801758a:	bf00      	nop
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 8017592:	b5b0      	push	{r4, r5, r7, lr}
 8017594:	b084      	sub	sp, #16
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
 801759a:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	7c1b      	ldrb	r3, [r3, #16]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d001      	beq.n	80175ac <_evtSending+0x1a>
 80175a8:	2300      	movs	r3, #0
 80175aa:	e073      	b.n	8017694 <_evtSending+0x102>

	switch (p_owner->__tx.state) {
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d002      	beq.n	80175bc <_evtSending+0x2a>
 80175b6:	2b01      	cmp	r3, #1
 80175b8:	d025      	beq.n	8017606 <_evtSending+0x74>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 80175ba:	e06a      	b.n	8017692 <_evtSending+0x100>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	3328      	adds	r3, #40	; 0x28
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7fc fbbe 	bl	8013d42 <pifRingBuffer_IsEmpty>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d161      	bne.n	8017690 <_evtSending+0xfe>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	3328      	adds	r3, #40	; 0x28
 80175d0:	4618      	mov	r0, r3
 80175d2:	f7fc fbc9 	bl	8013d68 <pifRingBuffer_GetFillSize>
 80175d6:	4603      	mov	r3, r0
 80175d8:	461a      	mov	r2, r3
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			p_owner->__tx.pos = 0;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	2200      	movs	r2, #0
 80175e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			p_owner->__tx.state = MTS_SENDING;
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	2201      	movs	r2, #1
 80175ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			if (p_owner->__p_comm->_p_task) p_owner->__p_comm->_p_task->immediate = TRUE;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	68db      	ldr	r3, [r3, #12]
 80175f4:	69db      	ldr	r3, [r3, #28]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d04a      	beq.n	8017690 <_evtSending+0xfe>
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	68db      	ldr	r3, [r3, #12]
 80175fe:	69db      	ldr	r3, [r3, #28]
 8017600:	2201      	movs	r2, #1
 8017602:	705a      	strb	r2, [r3, #1]
		break;
 8017604:	e044      	b.n	8017690 <_evtSending+0xfe>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	68dc      	ldr	r4, [r3, #12]
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017616:	4619      	mov	r1, r3
 8017618:	4610      	mov	r0, r2
 801761a:	f7fc fb66 	bl	8013cea <pifRingBuffer_GetTailPointer>
 801761e:	4605      	mov	r5, r0
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801762c:	4619      	mov	r1, r3
 801762e:	4610      	mov	r0, r2
 8017630:	f7fc fbbc 	bl	8013dac <pifRingBuffer_GetLinerSize>
 8017634:	4603      	mov	r3, r0
 8017636:	461a      	mov	r2, r3
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	4629      	mov	r1, r5
 801763c:	4620      	mov	r0, r4
 801763e:	4798      	blx	r3
 8017640:	4603      	mov	r3, r0
 8017642:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 8017644:	897b      	ldrh	r3, [r7, #10]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d101      	bne.n	801764e <_evtSending+0xbc>
 801764a:	2300      	movs	r3, #0
 801764c:	e022      	b.n	8017694 <_evtSending+0x102>
		p_owner->__tx.pos += length;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017654:	897b      	ldrh	r3, [r7, #10]
 8017656:	4413      	add	r3, r2
 8017658:	b29a      	uxth	r2, r3
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801766c:	429a      	cmp	r2, r3
 801766e:	d30d      	bcc.n	801768c <_evtSending+0xfa>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801767c:	4619      	mov	r1, r3
 801767e:	4610      	mov	r0, r2
 8017680:	f7fc fd3b 	bl	80140fa <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	2200      	movs	r2, #0
 8017688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		return TRUE;
 801768c:	2301      	movs	r3, #1
 801768e:	e001      	b.n	8017694 <_evtSending+0x102>
		break;
 8017690:	bf00      	nop
	}
	return FALSE;
 8017692:	2300      	movs	r3, #0
}
 8017694:	4618      	mov	r0, r3
 8017696:	3710      	adds	r7, #16
 8017698:	46bd      	mov	sp, r7
 801769a:	bdb0      	pop	{r4, r5, r7, pc}

0801769c <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b086      	sub	sp, #24
 80176a0:	af02      	add	r7, sp, #8
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	60b9      	str	r1, [r7, #8]
 80176a6:	4613      	mov	r3, r2
 80176a8:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d103      	bne.n	80176b8 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80176b0:	4b2c      	ldr	r3, [pc, #176]	; (8017764 <pifMsp_Init+0xc8>)
 80176b2:	2201      	movs	r2, #1
 80176b4:	701a      	strb	r2, [r3, #0]
		goto fail;
 80176b6:	e042      	b.n	801773e <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 80176b8:	224c      	movs	r2, #76	; 0x4c
 80176ba:	2100      	movs	r1, #0
 80176bc:	68f8      	ldr	r0, [r7, #12]
 80176be:	f00a fc1d 	bl	8021efc <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 80176c2:	2180      	movs	r1, #128	; 0x80
 80176c4:	2001      	movs	r0, #1
 80176c6:	f00a fbc9 	bl	8021e5c <calloc>
 80176ca:	4603      	mov	r3, r0
 80176cc:	461a      	mov	r2, r3
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	615a      	str	r2, [r3, #20]
    if (!p_owner->__rx.p_packet) {
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	695b      	ldr	r3, [r3, #20]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d103      	bne.n	80176e2 <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 80176da:	4b22      	ldr	r3, [pc, #136]	; (8017764 <pifMsp_Init+0xc8>)
 80176dc:	2203      	movs	r2, #3
 80176de:	701a      	strb	r2, [r3, #0]
        goto fail;
 80176e0:	e02d      	b.n	801773e <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	3328      	adds	r3, #40	; 0x28
 80176e6:	2280      	movs	r2, #128	; 0x80
 80176e8:	2100      	movs	r1, #0
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7fc fa8c 	bl	8013c08 <pifRingBuffer_InitHeap>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d020      	beq.n	8017738 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 80176f6:	2100      	movs	r1, #0
 80176f8:	68b8      	ldr	r0, [r7, #8]
 80176fa:	f7fd fb73 	bl	8014de4 <pifTimerManager_Add>
 80176fe:	4602      	mov	r2, r0
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	625a      	str	r2, [r3, #36]	; 0x24
    if (!p_owner->__rx.p_timer) goto fail;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017708:	2b00      	cmp	r3, #0
 801770a:	d017      	beq.n	801773c <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017710:	68fa      	ldr	r2, [r7, #12]
 8017712:	4915      	ldr	r1, [pc, #84]	; (8017768 <pifMsp_Init+0xcc>)
 8017714:	4618      	mov	r0, r3
 8017716:	f7fd fc92 	bl	801503e <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 801771a:	88fb      	ldrh	r3, [r7, #6]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d106      	bne.n	801772e <pifMsp_Init+0x92>
 8017720:	4b12      	ldr	r3, [pc, #72]	; (801776c <pifMsp_Init+0xd0>)
 8017722:	881b      	ldrh	r3, [r3, #0]
 8017724:	1c5a      	adds	r2, r3, #1
 8017726:	b291      	uxth	r1, r2
 8017728:	4a10      	ldr	r2, [pc, #64]	; (801776c <pifMsp_Init+0xd0>)
 801772a:	8011      	strh	r1, [r2, #0]
 801772c:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	88fa      	ldrh	r2, [r7, #6]
 8017732:	811a      	strh	r2, [r3, #8]
    return TRUE;
 8017734:	2301      	movs	r3, #1
 8017736:	e010      	b.n	801775a <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017738:	bf00      	nop
 801773a:	e000      	b.n	801773e <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 801773c:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 801773e:	68f8      	ldr	r0, [r7, #12]
 8017740:	f000 f818 	bl	8017774 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 8017744:	88fb      	ldrh	r3, [r7, #6]
 8017746:	4a07      	ldr	r2, [pc, #28]	; (8017764 <pifMsp_Init+0xc8>)
 8017748:	7812      	ldrb	r2, [r2, #0]
 801774a:	9200      	str	r2, [sp, #0]
 801774c:	f240 1209 	movw	r2, #265	; 0x109
 8017750:	4907      	ldr	r1, [pc, #28]	; (8017770 <pifMsp_Init+0xd4>)
 8017752:	2004      	movs	r0, #4
 8017754:	f7fb ff40 	bl	80135d8 <pifLog_Printf>
#endif
    return FALSE;
 8017758:	2300      	movs	r3, #0
}
 801775a:	4618      	mov	r0, r3
 801775c:	3710      	adds	r7, #16
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}
 8017762:	bf00      	nop
 8017764:	200020c9 	.word	0x200020c9
 8017768:	080172f1 	.word	0x080172f1
 801776c:	2000005c 	.word	0x2000005c
 8017770:	08026b28 	.word	0x08026b28

08017774 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	695b      	ldr	r3, [r3, #20]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d007      	beq.n	8017794 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	695b      	ldr	r3, [r3, #20]
 8017788:	4618      	mov	r0, r3
 801778a:	f00a fba1 	bl	8021ed0 <free>
		p_owner->__rx.p_packet = NULL;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2200      	movs	r2, #0
 8017792:	615a      	str	r2, [r3, #20]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	3328      	adds	r3, #40	; 0x28
 8017798:	4618      	mov	r0, r3
 801779a:	f7fc fa7d 	bl	8013c98 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d004      	beq.n	80177b0 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7fd fb36 	bl	8014e1c <pifTimerManager_Remove>
	}
#endif
}
 80177b0:	bf00      	nop
 80177b2:	3708      	adds	r7, #8
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}

080177b8 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	683a      	ldr	r2, [r7, #0]
 80177c6:	60da      	str	r2, [r3, #12]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80177c8:	4b04      	ldr	r3, [pc, #16]	; (80177dc <pifMsp_AttachComm+0x24>)
 80177ca:	4a05      	ldr	r2, [pc, #20]	; (80177e0 <pifMsp_AttachComm+0x28>)
 80177cc:	6879      	ldr	r1, [r7, #4]
 80177ce:	6838      	ldr	r0, [r7, #0]
 80177d0:	f7fa fcc2 	bl	8012158 <pifComm_AttachClient>
}
 80177d4:	bf00      	nop
 80177d6:	3708      	adds	r7, #8
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}
 80177dc:	08017593 	.word	0x08017593
 80177e0:	08017535 	.word	0x08017535

080177e4 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b082      	sub	sp, #8
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	4618      	mov	r0, r3
 80177f2:	f7fa fcc7 	bl	8012184 <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2200      	movs	r2, #0
 80177fa:	60da      	str	r2, [r3, #12]
}
 80177fc:	bf00      	nop
 80177fe:	3708      	adds	r7, #8
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <pifMsp_MakeAnswer>:

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question, uint8_t* p_data, uint16_t data_size)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b08a      	sub	sp, #40	; 0x28
 8017808:	af04      	add	r7, sp, #16
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
 8017810:	807b      	strh	r3, [r7, #2]
	uint8_t header[5], check_xor;

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	3328      	adds	r3, #40	; 0x28
 8017816:	4618      	mov	r0, r3
 8017818:	f7fc fb15 	bl	8013e46 <pifRingBuffer_BackupHead>

	header[0] = '$';
 801781c:	2324      	movs	r3, #36	; 0x24
 801781e:	743b      	strb	r3, [r7, #16]
	header[1] = 'M';
 8017820:	234d      	movs	r3, #77	; 0x4d
 8017822:	747b      	strb	r3, [r7, #17]
	header[2] = '>';
 8017824:	233e      	movs	r3, #62	; 0x3e
 8017826:	74bb      	strb	r3, [r7, #18]
	header[3] = data_size;
 8017828:	887b      	ldrh	r3, [r7, #2]
 801782a:	b2db      	uxtb	r3, r3
 801782c:	74fb      	strb	r3, [r7, #19]
	header[4] = p_question->command;
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	781b      	ldrb	r3, [r3, #0]
 8017832:	753b      	strb	r3, [r7, #20]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	3328      	adds	r3, #40	; 0x28
 8017838:	f107 0110 	add.w	r1, r7, #16
 801783c:	2205      	movs	r2, #5
 801783e:	4618      	mov	r0, r3
 8017840:	f7fc fb52 	bl	8013ee8 <pifRingBuffer_PutData>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	d02b      	beq.n	80178a2 <pifMsp_MakeAnswer+0x9e>
	check_xor = header[3] ^ header[4];
 801784a:	7cfa      	ldrb	r2, [r7, #19]
 801784c:	7d3b      	ldrb	r3, [r7, #20]
 801784e:	4053      	eors	r3, r2
 8017850:	75fb      	strb	r3, [r7, #23]
	if (data_size > 0) {
 8017852:	887b      	ldrh	r3, [r7, #2]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d013      	beq.n	8017880 <pifMsp_MakeAnswer+0x7c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	3328      	adds	r3, #40	; 0x28
 801785c:	887a      	ldrh	r2, [r7, #2]
 801785e:	6879      	ldr	r1, [r7, #4]
 8017860:	4618      	mov	r0, r3
 8017862:	f7fc fb41 	bl	8013ee8 <pifRingBuffer_PutData>
 8017866:	4603      	mov	r3, r0
 8017868:	2b00      	cmp	r3, #0
 801786a:	d01c      	beq.n	80178a6 <pifMsp_MakeAnswer+0xa2>
		check_xor ^= pifCheckXor(p_data, data_size);
 801786c:	887b      	ldrh	r3, [r7, #2]
 801786e:	4619      	mov	r1, r3
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f7fa fb18 	bl	8011ea6 <pifCheckXor>
 8017876:	4603      	mov	r3, r0
 8017878:	461a      	mov	r2, r3
 801787a:	7dfb      	ldrb	r3, [r7, #23]
 801787c:	4053      	eors	r3, r2
 801787e:	75fb      	strb	r3, [r7, #23]
	}
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	3328      	adds	r3, #40	; 0x28
 8017884:	7dfa      	ldrb	r2, [r7, #23]
 8017886:	4611      	mov	r1, r2
 8017888:	4618      	mov	r0, r3
 801788a:	f7fc faf9 	bl	8013e80 <pifRingBuffer_PutByte>
 801788e:	4603      	mov	r3, r0
 8017890:	2b00      	cmp	r3, #0
 8017892:	d00a      	beq.n	80178aa <pifMsp_MakeAnswer+0xa6>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	68db      	ldr	r3, [r3, #12]
 8017898:	69db      	ldr	r3, [r3, #28]
 801789a:	2201      	movs	r2, #1
 801789c:	705a      	strb	r2, [r3, #1]

#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], check_xor);
#endif
	return TRUE;
 801789e:	2301      	movs	r3, #1
 80178a0:	e024      	b.n	80178ec <pifMsp_MakeAnswer+0xe8>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80178a2:	bf00      	nop
 80178a4:	e002      	b.n	80178ac <pifMsp_MakeAnswer+0xa8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, data_size)) goto fail;
 80178a6:	bf00      	nop
 80178a8:	e000      	b.n	80178ac <pifMsp_MakeAnswer+0xa8>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, check_xor)) goto fail;
 80178aa:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	3328      	adds	r3, #40	; 0x28
 80178b0:	4618      	mov	r0, r3
 80178b2:	f7fc fad6 	bl	8013e62 <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80178b6:	4b0f      	ldr	r3, [pc, #60]	; (80178f4 <pifMsp_MakeAnswer+0xf0>)
 80178b8:	781b      	ldrb	r3, [r3, #0]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d102      	bne.n	80178c4 <pifMsp_MakeAnswer+0xc0>
 80178be:	4b0d      	ldr	r3, [pc, #52]	; (80178f4 <pifMsp_MakeAnswer+0xf0>)
 80178c0:	2204      	movs	r2, #4
 80178c2:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u D:%u EC:%d", __LINE__, p_owner->_id, p_question->command, data_size, pif_error);
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	891b      	ldrh	r3, [r3, #8]
 80178c8:	4618      	mov	r0, r3
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	781b      	ldrb	r3, [r3, #0]
 80178ce:	4619      	mov	r1, r3
 80178d0:	887b      	ldrh	r3, [r7, #2]
 80178d2:	4a08      	ldr	r2, [pc, #32]	; (80178f4 <pifMsp_MakeAnswer+0xf0>)
 80178d4:	7812      	ldrb	r2, [r2, #0]
 80178d6:	9202      	str	r2, [sp, #8]
 80178d8:	9301      	str	r3, [sp, #4]
 80178da:	9100      	str	r1, [sp, #0]
 80178dc:	4603      	mov	r3, r0
 80178de:	f44f 72a3 	mov.w	r2, #326	; 0x146
 80178e2:	4905      	ldr	r1, [pc, #20]	; (80178f8 <pifMsp_MakeAnswer+0xf4>)
 80178e4:	2004      	movs	r0, #4
 80178e6:	f7fb fe77 	bl	80135d8 <pifLog_Printf>
#endif
	return FALSE;
 80178ea:	2300      	movs	r3, #0
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	3718      	adds	r7, #24
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	200020c9 	.word	0x200020c9
 80178f8:	08026b3c 	.word	0x08026b3c

080178fc <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b086      	sub	sp, #24
 8017900:	af02      	add	r7, sp, #8
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
	uint8_t header[6];

	pifRingBuffer_BackupHead(&p_owner->__tx.answer_buffer);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	3328      	adds	r3, #40	; 0x28
 801790a:	4618      	mov	r0, r3
 801790c:	f7fc fa9b 	bl	8013e46 <pifRingBuffer_BackupHead>

	header[0] = '$';
 8017910:	2324      	movs	r3, #36	; 0x24
 8017912:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017914:	234d      	movs	r3, #77	; 0x4d
 8017916:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 8017918:	2321      	movs	r3, #33	; 0x21
 801791a:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 801791c:	2300      	movs	r3, #0
 801791e:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	733b      	strb	r3, [r7, #12]
	header[5] = header[3] ^ header[4];
 8017926:	7afa      	ldrb	r2, [r7, #11]
 8017928:	7b3b      	ldrb	r3, [r7, #12]
 801792a:	4053      	eors	r3, r2
 801792c:	b2db      	uxtb	r3, r3
 801792e:	737b      	strb	r3, [r7, #13]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	3328      	adds	r3, #40	; 0x28
 8017934:	f107 0108 	add.w	r1, r7, #8
 8017938:	2206      	movs	r2, #6
 801793a:	4618      	mov	r0, r3
 801793c:	f7fc fad4 	bl	8013ee8 <pifRingBuffer_PutData>
 8017940:	4603      	mov	r3, r0
 8017942:	2b00      	cmp	r3, #0
 8017944:	d006      	beq.n	8017954 <pifMsp_MakeError+0x58>
	p_owner->__p_comm->_p_task->immediate = TRUE;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	68db      	ldr	r3, [r3, #12]
 801794a:	69db      	ldr	r3, [r3, #28]
 801794c:	2201      	movs	r2, #1
 801794e:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_PACKET__
	pifLog_Printf(LT_NONE, "\n%u< %x %x %x %x %x : %x", p_owner->_id,
			header[0], header[1], header[2], header[3], header[4], header[5]);
#endif
#endif
	return TRUE;
 8017950:	2301      	movs	r3, #1
 8017952:	e01e      	b.n	8017992 <pifMsp_MakeError+0x96>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 6)) goto fail;
 8017954:	bf00      	nop

fail:
	pifRingBuffer_RestoreHead(&p_owner->__tx.answer_buffer);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	3328      	adds	r3, #40	; 0x28
 801795a:	4618      	mov	r0, r3
 801795c:	f7fc fa81 	bl	8013e62 <pifRingBuffer_RestoreHead>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017960:	4b0e      	ldr	r3, [pc, #56]	; (801799c <pifMsp_MakeError+0xa0>)
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d102      	bne.n	801796e <pifMsp_MakeError+0x72>
 8017968:	4b0c      	ldr	r3, [pc, #48]	; (801799c <pifMsp_MakeError+0xa0>)
 801796a:	2204      	movs	r2, #4
 801796c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	891b      	ldrh	r3, [r3, #8]
 8017972:	4619      	mov	r1, r3
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	781b      	ldrb	r3, [r3, #0]
 8017978:	461a      	mov	r2, r3
 801797a:	4b08      	ldr	r3, [pc, #32]	; (801799c <pifMsp_MakeError+0xa0>)
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	9301      	str	r3, [sp, #4]
 8017980:	9200      	str	r2, [sp, #0]
 8017982:	460b      	mov	r3, r1
 8017984:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8017988:	4905      	ldr	r1, [pc, #20]	; (80179a0 <pifMsp_MakeError+0xa4>)
 801798a:	2004      	movs	r0, #4
 801798c:	f7fb fe24 	bl	80135d8 <pifLog_Printf>
#endif
	return FALSE;
 8017990:	2300      	movs	r3, #0
}
 8017992:	4618      	mov	r0, r3
 8017994:	3710      	adds	r7, #16
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	200020c9 	.word	0x200020c9
 80179a0:	08026b58 	.word	0x08026b58

080179a4 <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b090      	sub	sp, #64	; 0x40
 80179a8:	af02      	add	r7, sp, #8
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	607a      	str	r2, [r7, #4]
 80179ae:	603b      	str	r3, [r7, #0]
 80179b0:	460b      	mov	r3, r1
 80179b2:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d005      	beq.n	80179c6 <pifGy86_Init+0x22>
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d002      	beq.n	80179c6 <pifGy86_Init+0x22>
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d104      	bne.n	80179d0 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 80179c6:	4b48      	ldr	r3, [pc, #288]	; (8017ae8 <pifGy86_Init+0x144>)
 80179c8:	2201      	movs	r2, #1
 80179ca:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80179cc:	2300      	movs	r3, #0
 80179ce:	e1dd      	b.n	8017d8c <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 80179d0:	2260      	movs	r2, #96	; 0x60
 80179d2:	2100      	movs	r1, #0
 80179d4:	68f8      	ldr	r0, [r7, #12]
 80179d6:	f00a fa91 	bl	8021efc <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	1d18      	adds	r0, r3, #4
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	9300      	str	r3, [sp, #0]
 80179e2:	2368      	movs	r3, #104	; 0x68
 80179e4:	687a      	ldr	r2, [r7, #4]
 80179e6:	2100      	movs	r1, #0
 80179e8:	f001 f92c 	bl	8018c44 <pifMpu60x0_Init>
 80179ec:	4603      	mov	r3, r0
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f000 81a5 	beq.w	8017d3e <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	68db      	ldr	r3, [r3, #12]
 80179f8:	2200      	movs	r2, #0
 80179fa:	2119      	movs	r1, #25
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7fa ff1f 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	f000 819c 	beq.w	8017d42 <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 8017a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d005      	beq.n	8017a20 <pifGy86_Init+0x7c>
 8017a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a16:	789b      	ldrb	r3, [r3, #2]
 8017a18:	f003 0307 	and.w	r3, r3, #7
 8017a1c:	b2da      	uxtb	r2, r3
 8017a1e:	e000      	b.n	8017a22 <pifGy86_Init+0x7e>
 8017a20:	2203      	movs	r2, #3
 8017a22:	7d3b      	ldrb	r3, [r7, #20]
 8017a24:	f362 0302 	bfi	r3, r2, #0, #3
 8017a28:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	68db      	ldr	r3, [r3, #12]
 8017a2e:	7d3a      	ldrb	r2, [r7, #20]
 8017a30:	216b      	movs	r1, #107	; 0x6b
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7fa ff04 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	f000 8183 	beq.w	8017d46 <pifGy86_Init+0x3a2>

    if (p_config) {
 8017a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d043      	beq.n	8017ace <pifGy86_Init+0x12a>
    	config.byte = 0;
 8017a46:	2300      	movs	r3, #0
 8017a48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 8017a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a4e:	78db      	ldrb	r3, [r3, #3]
 8017a50:	f003 0307 	and.w	r3, r3, #7
 8017a54:	b2da      	uxtb	r2, r3
 8017a56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017a5a:	f362 0302 	bfi	r3, r2, #0, #3
 8017a5e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	68db      	ldr	r3, [r3, #12]
 8017a66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017a6a:	211a      	movs	r1, #26
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7fa fee7 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017a72:	4603      	mov	r3, r0
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	f000 8168 	beq.w	8017d4a <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8017a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a82:	791b      	ldrb	r3, [r3, #4]
 8017a84:	f003 0303 	and.w	r3, r3, #3
 8017a88:	b2da      	uxtb	r2, r3
 8017a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017a8e:	f362 03c4 	bfi	r3, r2, #3, #2
 8017a92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	3304      	adds	r3, #4
 8017a9a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f001 f9ec 	bl	8018e7c <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8017aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aac:	785b      	ldrb	r3, [r3, #1]
 8017aae:	f003 0303 	and.w	r3, r3, #3
 8017ab2:	b2da      	uxtb	r2, r3
 8017ab4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017ab8:	f362 03c4 	bfi	r3, r2, #3, #2
 8017abc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	3304      	adds	r3, #4
 8017ac4:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f001 f9f7 	bl	8018ebc <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 8017ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d008      	beq.n	8017aec <pifGy86_Init+0x148>
 8017ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017adc:	795b      	ldrb	r3, [r3, #5]
 8017ade:	f003 030f 	and.w	r3, r3, #15
 8017ae2:	b2da      	uxtb	r2, r3
 8017ae4:	e003      	b.n	8017aee <pifGy86_Init+0x14a>
 8017ae6:	bf00      	nop
 8017ae8:	200020c9 	.word	0x200020c9
 8017aec:	220d      	movs	r2, #13
 8017aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017af2:	f362 0303 	bfi	r3, r2, #0, #4
 8017af6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	68db      	ldr	r3, [r3, #12]
 8017afe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017b02:	2124      	movs	r1, #36	; 0x24
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7fa fe9b 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	f000 811e 	beq.w	8017d4e <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 8017b12:	2300      	movs	r3, #0
 8017b14:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 8017b16:	7e3b      	ldrb	r3, [r7, #24]
 8017b18:	f043 0310 	orr.w	r3, r3, #16
 8017b1c:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8017b1e:	7e3b      	ldrb	r3, [r7, #24]
 8017b20:	f043 0302 	orr.w	r3, r3, #2
 8017b24:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	68db      	ldr	r3, [r3, #12]
 8017b2a:	7e3a      	ldrb	r2, [r7, #24]
 8017b2c:	2137      	movs	r1, #55	; 0x37
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7fa fe86 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017b34:	4603      	mov	r3, r0
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	f000 810b 	beq.w	8017d52 <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8017b40:	7f3b      	ldrb	r3, [r7, #28]
 8017b42:	f043 0301 	orr.w	r3, r3, #1
 8017b46:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	68db      	ldr	r3, [r3, #12]
 8017b4c:	7f3a      	ldrb	r2, [r7, #28]
 8017b4e:	2138      	movs	r1, #56	; 0x38
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7fa fe75 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017b56:	4603      	mov	r3, r0
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	f000 80fc 	beq.w	8017d56 <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	f103 0014 	add.w	r0, r3, #20
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	687a      	ldr	r2, [r7, #4]
 8017b68:	2100      	movs	r1, #0
 8017b6a:	f000 fb4b 	bl	8018204 <pifHmc5883_Init>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	f000 80f2 	beq.w	8017d5a <pifGy86_Init+0x3b6>

    if (p_config) {
 8017b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d039      	beq.n	8017bf0 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8017b7c:	7c3b      	ldrb	r3, [r7, #16]
 8017b7e:	f36f 0301 	bfc	r3, #0, #2
 8017b82:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 8017b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b86:	7a5b      	ldrb	r3, [r3, #9]
 8017b88:	f003 0303 	and.w	r3, r3, #3
 8017b8c:	b2da      	uxtb	r2, r3
 8017b8e:	7c3b      	ldrb	r3, [r7, #16]
 8017b90:	f362 1346 	bfi	r3, r2, #5, #2
 8017b94:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 8017b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b98:	799b      	ldrb	r3, [r3, #6]
 8017b9a:	f003 0307 	and.w	r3, r3, #7
 8017b9e:	b2da      	uxtb	r2, r3
 8017ba0:	7c3b      	ldrb	r3, [r7, #16]
 8017ba2:	f362 0384 	bfi	r3, r2, #2, #3
 8017ba6:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bac:	7c3a      	ldrb	r2, [r7, #16]
 8017bae:	2100      	movs	r1, #0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7fa fe45 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	f000 80d0 	beq.w	8017d5e <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	f103 0214 	add.w	r2, r3, #20
 8017bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bc6:	79db      	ldrb	r3, [r3, #7]
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4610      	mov	r0, r2
 8017bcc:	f000 fbf0 	bl	80183b0 <pifHmc5883_SetGain>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	f000 80c5 	beq.w	8017d62 <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bde:	7a1b      	ldrb	r3, [r3, #8]
 8017be0:	2202      	movs	r2, #2
 8017be2:	2102      	movs	r1, #2
 8017be4:	f7fa fe42 	bl	801286c <pifI2cDevice_WriteRegBit8>
 8017be8:	4603      	mov	r3, r0
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f000 80bb 	beq.w	8017d66 <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	68d8      	ldr	r0, [r3, #12]
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	f240 1201 	movw	r2, #257	; 0x101
 8017bfa:	2137      	movs	r1, #55	; 0x37
 8017bfc:	f7fa fe36 	bl	801286c <pifI2cDevice_WriteRegBit8>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	f000 80b1 	beq.w	8017d6a <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	2201      	movs	r2, #1
 8017c0e:	2138      	movs	r1, #56	; 0x38
 8017c10:	4618      	mov	r0, r3
 8017c12:	f7fa fe15 	bl	8012840 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	68d8      	ldr	r0, [r3, #12]
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	f240 5201 	movw	r2, #1281	; 0x501
 8017c20:	216a      	movs	r1, #106	; 0x6a
 8017c22:	f7fa fe23 	bl	801286c <pifI2cDevice_WriteRegBit8>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	f000 80a0 	beq.w	8017d6e <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8017c34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017c38:	221e      	movs	r2, #30
 8017c3a:	f362 0306 	bfi	r3, r2, #0, #7
 8017c3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8017c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	68db      	ldr	r3, [r3, #12]
 8017c52:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017c56:	2125      	movs	r1, #37	; 0x25
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7fa fdf1 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	f000 8086 	beq.w	8017d72 <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	68db      	ldr	r3, [r3, #12]
 8017c6a:	2203      	movs	r2, #3
 8017c6c:	2126      	movs	r1, #38	; 0x26
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7fa fde6 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017c74:	4603      	mov	r3, r0
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d07d      	beq.n	8017d76 <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8017c80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c84:	2206      	movs	r2, #6
 8017c86:	f362 0303 	bfi	r3, r2, #0, #4
 8017c8a:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 8017c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c96:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017ca2:	2127      	movs	r1, #39	; 0x27
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7fa fdcb 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8017caa:	4603      	mov	r3, r0
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d064      	beq.n	8017d7a <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8017cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d02a      	beq.n	8017d0c <pifGy86_Init+0x368>
 8017cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cb8:	691b      	ldr	r3, [r3, #16]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d026      	beq.n	8017d0c <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017cc4:	2377      	movs	r3, #119	; 0x77
 8017cc6:	687a      	ldr	r2, [r7, #4]
 8017cc8:	2100      	movs	r1, #0
 8017cca:	f001 fdcb 	bl	8019864 <pifMs5611_Init>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d054      	beq.n	8017d7e <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8017cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cdc:	7a9b      	ldrb	r3, [r3, #10]
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	4619      	mov	r1, r3
 8017ce2:	4610      	mov	r0, r2
 8017ce4:	f001 fe5e 	bl	80199a4 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cf0:	8999      	ldrh	r1, [r3, #12]
 8017cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cf4:	691b      	ldr	r3, [r3, #16]
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	f001 fe90 	bl	8019a1c <pifMs5611_AddTaskForReading>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d03f      	beq.n	8017d82 <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d08:	7812      	ldrb	r2, [r2, #0]
 8017d0a:	709a      	strb	r2, [r3, #2]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 8017d0c:	897b      	ldrh	r3, [r7, #10]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d106      	bne.n	8017d20 <pifGy86_Init+0x37c>
 8017d12:	4b20      	ldr	r3, [pc, #128]	; (8017d94 <pifGy86_Init+0x3f0>)
 8017d14:	881b      	ldrh	r3, [r3, #0]
 8017d16:	1c5a      	adds	r2, r3, #1
 8017d18:	b291      	uxth	r1, r2
 8017d1a:	4a1e      	ldr	r2, [pc, #120]	; (8017d94 <pifGy86_Init+0x3f0>)
 8017d1c:	8011      	strh	r1, [r2, #0]
 8017d1e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	897a      	ldrh	r2, [r7, #10]
 8017d24:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	4a19      	ldr	r2, [pc, #100]	; (8017d98 <pifGy86_Init+0x3f4>)
 8017d32:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	68fa      	ldr	r2, [r7, #12]
 8017d38:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	e026      	b.n	8017d8c <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8017d3e:	bf00      	nop
 8017d40:	e020      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8017d42:	bf00      	nop
 8017d44:	e01e      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8017d46:	bf00      	nop
 8017d48:	e01c      	b.n	8017d84 <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8017d4a:	bf00      	nop
 8017d4c:	e01a      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8017d4e:	bf00      	nop
 8017d50:	e018      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8017d52:	bf00      	nop
 8017d54:	e016      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8017d56:	bf00      	nop
 8017d58:	e014      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8017d5a:	bf00      	nop
 8017d5c:	e012      	b.n	8017d84 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8017d5e:	bf00      	nop
 8017d60:	e010      	b.n	8017d84 <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 8017d62:	bf00      	nop
 8017d64:	e00e      	b.n	8017d84 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8017d66:	bf00      	nop
 8017d68:	e00c      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8017d6a:	bf00      	nop
 8017d6c:	e00a      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8017d6e:	bf00      	nop
 8017d70:	e008      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8017d72:	bf00      	nop
 8017d74:	e006      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8017d76:	bf00      	nop
 8017d78:	e004      	b.n	8017d84 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8017d7a:	bf00      	nop
 8017d7c:	e002      	b.n	8017d84 <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8017d7e:	bf00      	nop
 8017d80:	e000      	b.n	8017d84 <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read)) goto fail;
 8017d82:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8017d84:	68f8      	ldr	r0, [r7, #12]
 8017d86:	f000 f809 	bl	8017d9c <pifGy86_Clear>
	return FALSE;
 8017d8a:	2300      	movs	r3, #0
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3738      	adds	r7, #56	; 0x38
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	2000005c 	.word	0x2000005c
 8017d98:	08017dcb 	.word	0x08017dcb

08017d9c <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	332c      	adds	r3, #44	; 0x2c
 8017da8:	4618      	mov	r0, r3
 8017daa:	f001 fdd7 	bl	801995c <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	3314      	adds	r3, #20
 8017db2:	4618      	mov	r0, r3
 8017db4:	f000 fae4 	bl	8018380 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	3304      	adds	r3, #4
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f001 f845 	bl	8018e4c <pifMpu60x0_Clear>
}
 8017dc2:	bf00      	nop
 8017dc4:	3708      	adds	r7, #8
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}

08017dca <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 8017dca:	b580      	push	{r7, lr}
 8017dcc:	b084      	sub	sp, #16
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	6078      	str	r0, [r7, #4]
 8017dd2:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	68d8      	ldr	r0, [r3, #12]
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017dde:	3349      	adds	r3, #73	; 0x49
 8017de0:	b2d9      	uxtb	r1, r3
 8017de2:	f107 0208 	add.w	r2, r7, #8
 8017de6:	2306      	movs	r3, #6
 8017de8:	f7fa fc34 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 8017dec:	4603      	mov	r3, r0
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d101      	bne.n	8017df6 <pifGy86_ReadMag+0x2c>
 8017df2:	2300      	movs	r3, #0
 8017df4:	e04d      	b.n	8017e92 <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8017df6:	7a3b      	ldrb	r3, [r7, #8]
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	021b      	lsls	r3, r3, #8
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	7a7b      	ldrb	r3, [r7, #9]
 8017e00:	b29b      	uxth	r3, r3
 8017e02:	4413      	add	r3, r2
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	b21b      	sxth	r3, r3
 8017e08:	ee07 3a90 	vmov	s15, r3
 8017e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	edd3 7a05 	vldr	s15, [r3, #20]
 8017e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e1e:	ee17 3a90 	vmov	r3, s15
 8017e22:	b21a      	sxth	r2, r3
 8017e24:	683b      	ldr	r3, [r7, #0]
 8017e26:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8017e28:	7abb      	ldrb	r3, [r7, #10]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	021b      	lsls	r3, r3, #8
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	7afb      	ldrb	r3, [r7, #11]
 8017e32:	b29b      	uxth	r3, r3
 8017e34:	4413      	add	r3, r2
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	b21b      	sxth	r3, r3
 8017e3a:	ee07 3a90 	vmov	s15, r3
 8017e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	edd3 7a07 	vldr	s15, [r3, #28]
 8017e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	3304      	adds	r3, #4
 8017e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e54:	ee17 2a90 	vmov	r2, s15
 8017e58:	b212      	sxth	r2, r2
 8017e5a:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8017e5c:	7b3b      	ldrb	r3, [r7, #12]
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	021b      	lsls	r3, r3, #8
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	7b7b      	ldrb	r3, [r7, #13]
 8017e66:	b29b      	uxth	r3, r3
 8017e68:	4413      	add	r3, r2
 8017e6a:	b29b      	uxth	r3, r3
 8017e6c:	b21b      	sxth	r3, r3
 8017e6e:	ee07 3a90 	vmov	s15, r3
 8017e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	edd3 7a06 	vldr	s15, [r3, #24]
 8017e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	3302      	adds	r3, #2
 8017e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e88:	ee17 2a90 	vmov	r2, s15
 8017e8c:	b212      	sxth	r2, r2
 8017e8e:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8017e90:	2301      	movs	r3, #1
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3710      	adds	r7, #16
 8017e96:	46bd      	mov	sp, r7
 8017e98:	bd80      	pop	{r7, pc}

08017e9a <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8017e9a:	b580      	push	{r7, lr}
 8017e9c:	b084      	sub	sp, #16
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	68db      	ldr	r3, [r3, #12]
 8017ea6:	60fb      	str	r3, [r7, #12]

	if (p_owner->__timer) p_owner->__timer--; else p_owner->__timer = 0;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d009      	beq.n	8017ec6 <_doTask+0x2c>
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	b21a      	sxth	r2, r3
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	831a      	strh	r2, [r3, #24]
 8017ec4:	e002      	b.n	8017ecc <_doTask+0x32>
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2200      	movs	r2, #0
 8017eca:	831a      	strh	r2, [r3, #24]
	if (p_owner->__period > -1 && !p_owner->__timer) {
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	db2c      	blt.n	8017f30 <_doTask+0x96>
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d127      	bne.n	8017f30 <_doTask+0x96>
		if (p_owner->__state == HSS_HIGH) {
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	7d1b      	ldrb	r3, [r3, #20]
 8017ee4:	2b02      	cmp	r3, #2
 8017ee6:	d11b      	bne.n	8017f20 <_doTask+0x86>
			if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__period * 1000L / p_owner->_transform_const);
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d017      	beq.n	8017f20 <_doTask+0x86>
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	685b      	ldr	r3, [r3, #4]
 8017ef4:	68fa      	ldr	r2, [r7, #12]
 8017ef6:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8017efa:	4611      	mov	r1, r2
 8017efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017f00:	fb01 f202 	mul.w	r2, r1, r2
 8017f04:	ee07 2a90 	vmov	s15, r2
 8017f08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017f0c:	68fa      	ldr	r2, [r7, #12]
 8017f0e:	ed92 7a04 	vldr	s14, [r2, #16]
 8017f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f1a:	ee17 0a90 	vmov	r0, s15
 8017f1e:	4798      	blx	r3
	    }
		pifHcSr04_Trigger(p_owner);
 8017f20:	68f8      	ldr	r0, [r7, #12]
 8017f22:	f000 f867 	bl	8017ff4 <pifHcSr04_Trigger>
		p_owner->__timer = p_owner->__period;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	831a      	strh	r2, [r3, #24]
	}

	if (p_owner->__state == HSS_LOW) {
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	7d1b      	ldrb	r3, [r3, #20]
 8017f34:	2b03      	cmp	r3, #3
 8017f36:	d10c      	bne.n	8017f52 <_doTask+0xb8>
		if (p_owner->evt_distance) (*p_owner->evt_distance)(p_owner->__distance);
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d005      	beq.n	8017f4c <_doTask+0xb2>
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	68fa      	ldr	r2, [r7, #12]
 8017f46:	6a12      	ldr	r2, [r2, #32]
 8017f48:	4610      	mov	r0, r2
 8017f4a:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	751a      	strb	r2, [r3, #20]
    }
	return 0;
 8017f52:	2300      	movs	r3, #0
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	3710      	adds	r7, #16
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}

08017f5c <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b084      	sub	sp, #16
 8017f60:	af02      	add	r7, sp, #8
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	460b      	mov	r3, r1
 8017f66:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d104      	bne.n	8017f78 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017f6e:	4b1d      	ldr	r3, [pc, #116]	; (8017fe4 <pifHcSr04_Init+0x88>)
 8017f70:	2201      	movs	r2, #1
 8017f72:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017f74:	2300      	movs	r3, #0
 8017f76:	e031      	b.n	8017fdc <pifHcSr04_Init+0x80>
	}

	if (!pif_act_timer1us) {
 8017f78:	4b1b      	ldr	r3, [pc, #108]	; (8017fe8 <pifHcSr04_Init+0x8c>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d104      	bne.n	8017f8a <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8017f80:	4b18      	ldr	r3, [pc, #96]	; (8017fe4 <pifHcSr04_Init+0x88>)
 8017f82:	2209      	movs	r2, #9
 8017f84:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8017f86:	2300      	movs	r3, #0
 8017f88:	e028      	b.n	8017fdc <pifHcSr04_Init+0x80>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8017f8a:	2224      	movs	r2, #36	; 0x24
 8017f8c:	2100      	movs	r1, #0
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f009 ffb4 	bl	8021efc <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, _doTask, p_owner, TRUE);
 8017f94:	2301      	movs	r3, #1
 8017f96:	9300      	str	r3, [sp, #0]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	4a14      	ldr	r2, [pc, #80]	; (8017fec <pifHcSr04_Init+0x90>)
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	2002      	movs	r0, #2
 8017fa0:	f7fc fc9e 	bl	80148e0 <pifTaskManager_Add>
 8017fa4:	4602      	mov	r2, r0
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	68db      	ldr	r3, [r3, #12]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d101      	bne.n	8017fb6 <pifHcSr04_Init+0x5a>
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e012      	b.n	8017fdc <pifHcSr04_Init+0x80>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8017fb6:	887b      	ldrh	r3, [r7, #2]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d106      	bne.n	8017fca <pifHcSr04_Init+0x6e>
 8017fbc:	4b0c      	ldr	r3, [pc, #48]	; (8017ff0 <pifHcSr04_Init+0x94>)
 8017fbe:	881b      	ldrh	r3, [r3, #0]
 8017fc0:	1c5a      	adds	r2, r3, #1
 8017fc2:	b291      	uxth	r1, r2
 8017fc4:	4a0a      	ldr	r2, [pc, #40]	; (8017ff0 <pifHcSr04_Init+0x94>)
 8017fc6:	8011      	strh	r1, [r2, #0]
 8017fc8:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	887a      	ldrh	r2, [r7, #2]
 8017fce:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8017fd0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f000 f847 	bl	8018068 <pifHcSr04_SetTemperature>

    return TRUE;
 8017fda:	2301      	movs	r3, #1
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3708      	adds	r7, #8
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}
 8017fe4:	200020c9 	.word	0x200020c9
 8017fe8:	200020e8 	.word	0x200020e8
 8017fec:	08017e9b 	.word	0x08017e9b
 8017ff0:	2000005c 	.word	0x2000005c

08017ff4 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	2001      	movs	r0, #1
 8018002:	4798      	blx	r3
	pif_Delay1us(10);
 8018004:	200a      	movs	r0, #10
 8018006:	f7f9 fa81 	bl	801150c <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	2000      	movs	r0, #0
 8018010:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	2201      	movs	r2, #1
 8018016:	751a      	strb	r2, [r3, #20]
}
 8018018:	bf00      	nop
 801801a:	3708      	adds	r7, #8
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	460b      	mov	r3, r1
 801802a:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d002      	beq.n	8018038 <pifHcSr04_StartTrigger+0x18>
 8018032:	887b      	ldrh	r3, [r7, #2]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d104      	bne.n	8018042 <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 8018038:	4b09      	ldr	r3, [pc, #36]	; (8018060 <pifHcSr04_StartTrigger+0x40>)
 801803a:	2201      	movs	r2, #1
 801803c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801803e:	2300      	movs	r3, #0
 8018040:	e007      	b.n	8018052 <pifHcSr04_StartTrigger+0x32>
	}

	p_owner->__period = period;
 8018042:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	82da      	strh	r2, [r3, #22]
	p_owner->__timer = 0;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2200      	movs	r2, #0
 801804e:	831a      	strh	r2, [r3, #24]
	return TRUE;
 8018050:	2301      	movs	r3, #1
}
 8018052:	4618      	mov	r0, r3
 8018054:	370c      	adds	r7, #12
 8018056:	46bd      	mov	sp, r7
 8018058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805c:	4770      	bx	lr
 801805e:	bf00      	nop
 8018060:	200020c9 	.word	0x200020c9
 8018064:	00000000 	.word	0x00000000

08018068 <pifHcSr04_SetTemperature>:
{
	p_owner->__period = -1;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
 8018070:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0 / ((331.6 + 0.6 * temperature) / 10000.0);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8018074:	6838      	ldr	r0, [r7, #0]
 8018076:	f7e8 fa25 	bl	80004c4 <__aeabi_f2d>
 801807a:	a317      	add	r3, pc, #92	; (adr r3, 80180d8 <pifHcSr04_SetTemperature+0x70>)
 801807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018080:	f7e8 fa78 	bl	8000574 <__aeabi_dmul>
 8018084:	4602      	mov	r2, r0
 8018086:	460b      	mov	r3, r1
 8018088:	4610      	mov	r0, r2
 801808a:	4619      	mov	r1, r3
 801808c:	a314      	add	r3, pc, #80	; (adr r3, 80180e0 <pifHcSr04_SetTemperature+0x78>)
 801808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018092:	f7e8 f8b9 	bl	8000208 <__adddf3>
 8018096:	4602      	mov	r2, r0
 8018098:	460b      	mov	r3, r1
 801809a:	4610      	mov	r0, r2
 801809c:	4619      	mov	r1, r3
 801809e:	a312      	add	r3, pc, #72	; (adr r3, 80180e8 <pifHcSr04_SetTemperature+0x80>)
 80180a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180a4:	f7e8 fb90 	bl	80007c8 <__aeabi_ddiv>
 80180a8:	4602      	mov	r2, r0
 80180aa:	460b      	mov	r3, r1
 80180ac:	f04f 0000 	mov.w	r0, #0
 80180b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80180b4:	f7e8 fb88 	bl	80007c8 <__aeabi_ddiv>
 80180b8:	4602      	mov	r2, r0
 80180ba:	460b      	mov	r3, r1
 80180bc:	4610      	mov	r0, r2
 80180be:	4619      	mov	r1, r3
 80180c0:	f7e8 fd3a 	bl	8000b38 <__aeabi_d2f>
 80180c4:	4602      	mov	r2, r0
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	611a      	str	r2, [r3, #16]
}
 80180ca:	bf00      	nop
 80180cc:	3708      	adds	r7, #8
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}
 80180d2:	bf00      	nop
 80180d4:	f3af 8000 	nop.w
 80180d8:	33333333 	.word	0x33333333
 80180dc:	3fe33333 	.word	0x3fe33333
 80180e0:	9999999a 	.word	0x9999999a
 80180e4:	4074b999 	.word	0x4074b999
 80180e8:	00000000 	.word	0x00000000
 80180ec:	40c38800 	.word	0x40c38800

080180f0 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	460b      	mov	r3, r1
 80180fa:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	7d1b      	ldrb	r3, [r3, #20]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d002      	beq.n	801810a <pifHcSr04_sigReceiveEcho+0x1a>
 8018104:	2b02      	cmp	r3, #2
 8018106:	d00d      	beq.n	8018124 <pifHcSr04_sigReceiveEcho+0x34>
			p_owner->__state = HSS_LOW;
		}
		break;

	default:
		break;
 8018108:	e02c      	b.n	8018164 <pifHcSr04_sigReceiveEcho+0x74>
		if (state) {
 801810a:	78fb      	ldrb	r3, [r7, #3]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d026      	beq.n	801815e <pifHcSr04_sigReceiveEcho+0x6e>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 8018110:	4b16      	ldr	r3, [pc, #88]	; (801816c <pifHcSr04_sigReceiveEcho+0x7c>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	4798      	blx	r3
 8018116:	4602      	mov	r2, r0
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_HIGH;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2202      	movs	r2, #2
 8018120:	751a      	strb	r2, [r3, #20]
		break;
 8018122:	e01c      	b.n	801815e <pifHcSr04_sigReceiveEcho+0x6e>
		if (!state) {
 8018124:	78fb      	ldrb	r3, [r7, #3]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d11b      	bne.n	8018162 <pifHcSr04_sigReceiveEcho+0x72>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 801812a:	4b10      	ldr	r3, [pc, #64]	; (801816c <pifHcSr04_sigReceiveEcho+0x7c>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	4798      	blx	r3
 8018130:	4602      	mov	r2, r0
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	69db      	ldr	r3, [r3, #28]
 8018136:	1ad3      	subs	r3, r2, r3
 8018138:	ee07 3a90 	vmov	s15, r3
 801813c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	ed93 7a04 	vldr	s14, [r3, #16]
 8018146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801814a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801814e:	ee17 2a90 	vmov	r2, s15
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	621a      	str	r2, [r3, #32]
			p_owner->__state = HSS_LOW;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2203      	movs	r2, #3
 801815a:	751a      	strb	r2, [r3, #20]
		break;
 801815c:	e001      	b.n	8018162 <pifHcSr04_sigReceiveEcho+0x72>
		break;
 801815e:	bf00      	nop
 8018160:	e000      	b.n	8018164 <pifHcSr04_sigReceiveEcho+0x74>
		break;
 8018162:	bf00      	nop
	}
}
 8018164:	bf00      	nop
 8018166:	3708      	adds	r7, #8
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}
 801816c:	200020e8 	.word	0x200020e8

08018170 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8018170:	b480      	push	{r7}
 8018172:	b083      	sub	sp, #12
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	460b      	mov	r3, r1
 801817a:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 801817c:	78fb      	ldrb	r3, [r7, #3]
 801817e:	2b07      	cmp	r3, #7
 8018180:	d839      	bhi.n	80181f6 <_changeGain+0x86>
 8018182:	a201      	add	r2, pc, #4	; (adr r2, 8018188 <_changeGain+0x18>)
 8018184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018188:	080181a9 	.word	0x080181a9
 801818c:	080181b3 	.word	0x080181b3
 8018190:	080181bd 	.word	0x080181bd
 8018194:	080181c7 	.word	0x080181c7
 8018198:	080181d1 	.word	0x080181d1
 801819c:	080181db 	.word	0x080181db
 80181a0:	080181e5 	.word	0x080181e5
 80181a4:	080181ef 	.word	0x080181ef
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f240 525a 	movw	r2, #1370	; 0x55a
 80181ae:	825a      	strh	r2, [r3, #18]
 80181b0:	e021      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f240 4242 	movw	r2, #1090	; 0x442
 80181b8:	825a      	strh	r2, [r3, #18]
 80181ba:	e01c      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f44f 724d 	mov.w	r2, #820	; 0x334
 80181c2:	825a      	strh	r2, [r3, #18]
 80181c4:	e017      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80181cc:	825a      	strh	r2, [r3, #18]
 80181ce:	e012      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80181d6:	825a      	strh	r2, [r3, #18]
 80181d8:	e00d      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80181e0:	825a      	strh	r2, [r3, #18]
 80181e2:	e008      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80181ea:	825a      	strh	r2, [r3, #18]
 80181ec:	e003      	b.n	80181f6 <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	22e6      	movs	r2, #230	; 0xe6
 80181f2:	825a      	strh	r2, [r3, #18]
 80181f4:	bf00      	nop
	}
}
 80181f6:	bf00      	nop
 80181f8:	370c      	adds	r7, #12
 80181fa:	46bd      	mov	sp, r7
 80181fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018200:	4770      	bx	lr
 8018202:	bf00      	nop

08018204 <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 8018204:	b590      	push	{r4, r7, lr}
 8018206:	b08d      	sub	sp, #52	; 0x34
 8018208:	af02      	add	r7, sp, #8
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	607a      	str	r2, [r7, #4]
 801820e:	603b      	str	r3, [r7, #0]
 8018210:	460b      	mov	r3, r1
 8018212:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 8018214:	4b54      	ldr	r3, [pc, #336]	; (8018368 <pifHmc5883_Init+0x164>)
 8018216:	f107 0418 	add.w	r4, r7, #24
 801821a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801821c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d005      	beq.n	8018232 <pifHmc5883_Init+0x2e>
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d002      	beq.n	8018232 <pifHmc5883_Init+0x2e>
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d104      	bne.n	801823c <pifHmc5883_Init+0x38>
		pif_error = E_INVALID_PARAM;
 8018232:	4b4e      	ldr	r3, [pc, #312]	; (801836c <pifHmc5883_Init+0x168>)
 8018234:	2201      	movs	r2, #1
 8018236:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018238:	2300      	movs	r3, #0
 801823a:	e091      	b.n	8018360 <pifHmc5883_Init+0x15c>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 801823c:	2218      	movs	r2, #24
 801823e:	2100      	movs	r1, #0
 8018240:	68f8      	ldr	r0, [r7, #12]
 8018242:	f009 fe5b 	bl	8021efc <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f7fa f8e8 	bl	801241c <pifI2cPort_AddDevice>
 801824c:	4602      	mov	r2, r0
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	691b      	ldr	r3, [r3, #16]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d101      	bne.n	801825e <pifHmc5883_Init+0x5a>
 801825a:	2300      	movs	r3, #0
 801825c:	e080      	b.n	8018360 <pifHmc5883_Init+0x15c>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	691b      	ldr	r3, [r3, #16]
 8018262:	221e      	movs	r2, #30
 8018264:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	6918      	ldr	r0, [r3, #16]
 801826a:	f107 0214 	add.w	r2, r7, #20
 801826e:	2303      	movs	r3, #3
 8018270:	210a      	movs	r1, #10
 8018272:	f7fa f9ef 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 8018276:	4603      	mov	r3, r0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d06a      	beq.n	8018352 <pifHmc5883_Init+0x14e>
	if (data[0] != 'H') {
 801827c:	7d3b      	ldrb	r3, [r7, #20]
 801827e:	2b48      	cmp	r3, #72	; 0x48
 8018280:	d003      	beq.n	801828a <pifHmc5883_Init+0x86>
		pif_error = E_INVALID_ID;
 8018282:	4b3a      	ldr	r3, [pc, #232]	; (801836c <pifHmc5883_Init+0x168>)
 8018284:	2211      	movs	r2, #17
 8018286:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018288:	e066      	b.n	8018358 <pifHmc5883_Init+0x154>
	}
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 801828a:	7d3b      	ldrb	r3, [r7, #20]
 801828c:	2b1f      	cmp	r3, #31
 801828e:	d905      	bls.n	801829c <pifHmc5883_Init+0x98>
 8018290:	7d7b      	ldrb	r3, [r7, #21]
 8018292:	2b1f      	cmp	r3, #31
 8018294:	d902      	bls.n	801829c <pifHmc5883_Init+0x98>
 8018296:	7dbb      	ldrb	r3, [r7, #22]
 8018298:	2b1f      	cmp	r3, #31
 801829a:	d80e      	bhi.n	80182ba <pifHmc5883_Init+0xb6>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 801829c:	7d3b      	ldrb	r3, [r7, #20]
 801829e:	4618      	mov	r0, r3
 80182a0:	7d7b      	ldrb	r3, [r7, #21]
 80182a2:	7dba      	ldrb	r2, [r7, #22]
 80182a4:	4611      	mov	r1, r2
 80182a6:	f107 0218 	add.w	r2, r7, #24
 80182aa:	9101      	str	r1, [sp, #4]
 80182ac:	9300      	str	r3, [sp, #0]
 80182ae:	4603      	mov	r3, r0
 80182b0:	492f      	ldr	r1, [pc, #188]	; (8018370 <pifHmc5883_Init+0x16c>)
 80182b2:	2002      	movs	r0, #2
 80182b4:	f7fb f990 	bl	80135d8 <pifLog_Printf>
 80182b8:	e00d      	b.n	80182d6 <pifHmc5883_Init+0xd2>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 80182ba:	7d3b      	ldrb	r3, [r7, #20]
 80182bc:	4618      	mov	r0, r3
 80182be:	7d7b      	ldrb	r3, [r7, #21]
 80182c0:	7dba      	ldrb	r2, [r7, #22]
 80182c2:	4611      	mov	r1, r2
 80182c4:	f107 0218 	add.w	r2, r7, #24
 80182c8:	9101      	str	r1, [sp, #4]
 80182ca:	9300      	str	r3, [sp, #0]
 80182cc:	4603      	mov	r3, r0
 80182ce:	4929      	ldr	r1, [pc, #164]	; (8018374 <pifHmc5883_Init+0x170>)
 80182d0:	2002      	movs	r0, #2
 80182d2:	f7fb f981 	bl	80135d8 <pifLog_Printf>
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	6918      	ldr	r0, [r3, #16]
 80182da:	f107 0314 	add.w	r3, r7, #20
 80182de:	f240 5203 	movw	r2, #1283	; 0x503
 80182e2:	2101      	movs	r1, #1
 80182e4:	f7fa f9cb 	bl	801267e <pifI2cDevice_ReadRegBit8>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d033      	beq.n	8018356 <pifHmc5883_Init+0x152>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 80182ee:	f107 0314 	add.w	r3, r7, #20
 80182f2:	b2db      	uxtb	r3, r3
 80182f4:	4619      	mov	r1, r3
 80182f6:	6838      	ldr	r0, [r7, #0]
 80182f8:	f7ff ff3a 	bl	8018170 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80182fc:	897b      	ldrh	r3, [r7, #10]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d106      	bne.n	8018310 <pifHmc5883_Init+0x10c>
 8018302:	4b1d      	ldr	r3, [pc, #116]	; (8018378 <pifHmc5883_Init+0x174>)
 8018304:	881b      	ldrh	r3, [r3, #0]
 8018306:	1c5a      	adds	r2, r3, #1
 8018308:	b291      	uxth	r1, r2
 801830a:	4a1b      	ldr	r2, [pc, #108]	; (8018378 <pifHmc5883_Init+0x174>)
 801830c:	8011      	strh	r1, [r2, #0]
 801830e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	897a      	ldrh	r2, [r7, #10]
 8018314:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801831c:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018324:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801832c:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	683a      	ldr	r2, [r7, #0]
 8018332:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 8018334:	683b      	ldr	r3, [r7, #0]
 8018336:	781b      	ldrb	r3, [r3, #0]
 8018338:	f043 0304 	orr.w	r3, r3, #4
 801833c:	b2da      	uxtb	r2, r3
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	4a0d      	ldr	r2, [pc, #52]	; (801837c <pifHmc5883_Init+0x178>)
 8018346:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8018348:	683b      	ldr	r3, [r7, #0]
 801834a:	68fa      	ldr	r2, [r7, #12]
 801834c:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 801834e:	2301      	movs	r3, #1
 8018350:	e006      	b.n	8018360 <pifHmc5883_Init+0x15c>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 8018352:	bf00      	nop
 8018354:	e000      	b.n	8018358 <pifHmc5883_Init+0x154>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8018356:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 8018358:	68f8      	ldr	r0, [r7, #12]
 801835a:	f000 f811 	bl	8018380 <pifHmc5883_Clear>
	return FALSE;
 801835e:	2300      	movs	r3, #0
}
 8018360:	4618      	mov	r0, r3
 8018362:	372c      	adds	r7, #44	; 0x2c
 8018364:	46bd      	mov	sp, r7
 8018366:	bd90      	pop	{r4, r7, pc}
 8018368:	08026b90 	.word	0x08026b90
 801836c:	200020c9 	.word	0x200020c9
 8018370:	08026b70 	.word	0x08026b70
 8018374:	08026b84 	.word	0x08026b84
 8018378:	2000005c 	.word	0x2000005c
 801837c:	080183ef 	.word	0x080183ef

08018380 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b082      	sub	sp, #8
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	691b      	ldr	r3, [r3, #16]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d00b      	beq.n	80183a8 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	691b      	ldr	r3, [r3, #16]
 8018394:	685a      	ldr	r2, [r3, #4]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	691b      	ldr	r3, [r3, #16]
 801839a:	4619      	mov	r1, r3
 801839c:	4610      	mov	r0, r2
 801839e:	f7fa f861 	bl	8012464 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2200      	movs	r2, #0
 80183a6:	611a      	str	r2, [r3, #16]
	}
}
 80183a8:	bf00      	nop
 80183aa:	3708      	adds	r7, #8
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b082      	sub	sp, #8
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	6078      	str	r0, [r7, #4]
 80183b8:	460b      	mov	r3, r1
 80183ba:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	6918      	ldr	r0, [r3, #16]
 80183c0:	78fb      	ldrb	r3, [r7, #3]
 80183c2:	f240 5203 	movw	r2, #1283	; 0x503
 80183c6:	2101      	movs	r1, #1
 80183c8:	f7fa fa50 	bl	801286c <pifI2cDevice_WriteRegBit8>
 80183cc:	4603      	mov	r3, r0
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d101      	bne.n	80183d6 <pifHmc5883_SetGain+0x26>
 80183d2:	2300      	movs	r3, #0
 80183d4:	e007      	b.n	80183e6 <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	695b      	ldr	r3, [r3, #20]
 80183da:	78fa      	ldrb	r2, [r7, #3]
 80183dc:	4611      	mov	r1, r2
 80183de:	4618      	mov	r0, r3
 80183e0:	f7ff fec6 	bl	8018170 <_changeGain>
    return TRUE;
 80183e4:	2301      	movs	r3, #1
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}

080183ee <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b084      	sub	sp, #16
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
 80183f6:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	691b      	ldr	r3, [r3, #16]
 80183fc:	f107 0208 	add.w	r2, r7, #8
 8018400:	2109      	movs	r1, #9
 8018402:	4618      	mov	r0, r3
 8018404:	f7fa f8ee 	bl	80125e4 <pifI2cDevice_ReadRegByte>
 8018408:	4603      	mov	r3, r0
 801840a:	2b00      	cmp	r3, #0
 801840c:	d101      	bne.n	8018412 <pifHmc5883_ReadMag+0x24>
 801840e:	2300      	movs	r3, #0
 8018410:	e061      	b.n	80184d6 <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 8018412:	7a3b      	ldrb	r3, [r7, #8]
 8018414:	f003 0301 	and.w	r3, r3, #1
 8018418:	2b00      	cmp	r3, #0
 801841a:	d101      	bne.n	8018420 <pifHmc5883_ReadMag+0x32>
 801841c:	2300      	movs	r3, #0
 801841e:	e05a      	b.n	80184d6 <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	6918      	ldr	r0, [r3, #16]
 8018424:	f107 0208 	add.w	r2, r7, #8
 8018428:	2306      	movs	r3, #6
 801842a:	2103      	movs	r1, #3
 801842c:	f7fa f912 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 8018430:	4603      	mov	r3, r0
 8018432:	2b00      	cmp	r3, #0
 8018434:	d101      	bne.n	801843a <pifHmc5883_ReadMag+0x4c>
 8018436:	2300      	movs	r3, #0
 8018438:	e04d      	b.n	80184d6 <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 801843a:	7a3b      	ldrb	r3, [r7, #8]
 801843c:	b29b      	uxth	r3, r3
 801843e:	021b      	lsls	r3, r3, #8
 8018440:	b29a      	uxth	r2, r3
 8018442:	7a7b      	ldrb	r3, [r7, #9]
 8018444:	b29b      	uxth	r3, r3
 8018446:	4413      	add	r3, r2
 8018448:	b29b      	uxth	r3, r3
 801844a:	b21b      	sxth	r3, r3
 801844c:	ee07 3a90 	vmov	s15, r3
 8018450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	edd3 7a00 	vldr	s15, [r3]
 801845a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801845e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018462:	ee17 3a90 	vmov	r3, s15
 8018466:	b21a      	sxth	r2, r3
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 801846c:	7abb      	ldrb	r3, [r7, #10]
 801846e:	b29b      	uxth	r3, r3
 8018470:	021b      	lsls	r3, r3, #8
 8018472:	b29a      	uxth	r2, r3
 8018474:	7afb      	ldrb	r3, [r7, #11]
 8018476:	b29b      	uxth	r3, r3
 8018478:	4413      	add	r3, r2
 801847a:	b29b      	uxth	r3, r3
 801847c:	b21b      	sxth	r3, r3
 801847e:	ee07 3a90 	vmov	s15, r3
 8018482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	edd3 7a02 	vldr	s15, [r3, #8]
 801848c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	3304      	adds	r3, #4
 8018494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018498:	ee17 2a90 	vmov	r2, s15
 801849c:	b212      	sxth	r2, r2
 801849e:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 80184a0:	7b3b      	ldrb	r3, [r7, #12]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	021b      	lsls	r3, r3, #8
 80184a6:	b29a      	uxth	r2, r3
 80184a8:	7b7b      	ldrb	r3, [r7, #13]
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	4413      	add	r3, r2
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	b21b      	sxth	r3, r3
 80184b2:	ee07 3a90 	vmov	s15, r3
 80184b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80184c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	3302      	adds	r3, #2
 80184c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184cc:	ee17 2a90 	vmov	r2, s15
 80184d0:	b212      	sxth	r2, r2
 80184d2:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80184d4:	2301      	movs	r3, #1
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3710      	adds	r7, #16
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}

080184de <_alignBoard>:

#include <math.h>


static void _alignBoard(PifImuSensor* p_owner, int16_t *vec)
{
 80184de:	b580      	push	{r7, lr}
 80184e0:	b084      	sub	sp, #16
 80184e2:	af00      	add	r7, sp, #0
 80184e4:	6078      	str	r0, [r7, #4]
 80184e6:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	881b      	ldrh	r3, [r3, #0]
 80184ec:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	885b      	ldrh	r3, [r3, #2]
 80184f2:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	889b      	ldrh	r3, [r3, #4]
 80184f8:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8018500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018504:	ee07 3a90 	vmov	s15, r3
 8018508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801850c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8018516:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801851a:	ee07 3a90 	vmov	s15, r3
 801851e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018526:	ee37 7a27 	vadd.f32	s14, s14, s15
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8018530:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018534:	ee07 3a90 	vmov	s15, r3
 8018538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801853c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018544:	eeb0 0a67 	vmov.f32	s0, s15
 8018548:	f009 fffa 	bl	8022540 <lrintf>
 801854c:	4603      	mov	r3, r0
 801854e:	b21a      	sxth	r2, r3
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801855a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801855e:	ee07 3a90 	vmov	s15, r3
 8018562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018566:	ee27 7a27 	vmul.f32	s14, s14, s15
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8018570:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018574:	ee07 3a90 	vmov	s15, r3
 8018578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801857c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 801858a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801858e:	ee07 3a90 	vmov	s15, r3
 8018592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801859a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801859e:	eeb0 0a67 	vmov.f32	s0, s15
 80185a2:	f009 ffcd 	bl	8022540 <lrintf>
 80185a6:	4602      	mov	r2, r0
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	3302      	adds	r3, #2
 80185ac:	b212      	sxth	r2, r2
 80185ae:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80185b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80185ba:	ee07 3a90 	vmov	s15, r3
 80185be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80185cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80185d0:	ee07 3a90 	vmov	s15, r3
 80185d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80185dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80185e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80185ea:	ee07 3a90 	vmov	s15, r3
 80185ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80185f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185fa:	eeb0 0a67 	vmov.f32	s0, s15
 80185fe:	f009 ff9f 	bl	8022540 <lrintf>
 8018602:	4602      	mov	r2, r0
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	3304      	adds	r3, #4
 8018608:	b212      	sxth	r2, r2
 801860a:	801a      	strh	r2, [r3, #0]
}
 801860c:	bf00      	nop
 801860e:	3710      	adds	r7, #16
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}

08018614 <_alignSensors>:

static void _alignSensors(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b084      	sub	sp, #16
 8018618:	af00      	add	r7, sp, #0
 801861a:	60f8      	str	r0, [r7, #12]
 801861c:	60b9      	str	r1, [r7, #8]
 801861e:	607a      	str	r2, [r7, #4]
 8018620:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 8018622:	78fb      	ldrb	r3, [r7, #3]
 8018624:	3b02      	subs	r3, #2
 8018626:	2b06      	cmp	r3, #6
 8018628:	f200 80c8 	bhi.w	80187bc <_alignSensors+0x1a8>
 801862c:	a201      	add	r2, pc, #4	; (adr r2, 8018634 <_alignSensors+0x20>)
 801862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018632:	bf00      	nop
 8018634:	08018651 	.word	0x08018651
 8018638:	0801867d 	.word	0x0801867d
 801863c:	080186b3 	.word	0x080186b3
 8018640:	080186e1 	.word	0x080186e1
 8018644:	08018717 	.word	0x08018717
 8018648:	08018745 	.word	0x08018745
 801864c:	0801877d 	.word	0x0801877d
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 8018650:	68bb      	ldr	r3, [r7, #8]
 8018652:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 801865a:	68bb      	ldr	r3, [r7, #8]
 801865c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018660:	b29b      	uxth	r3, r3
 8018662:	425b      	negs	r3, r3
 8018664:	b29a      	uxth	r2, r3
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	3302      	adds	r3, #2
 801866a:	b212      	sxth	r2, r2
 801866c:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	3304      	adds	r3, #4
 8018672:	68ba      	ldr	r2, [r7, #8]
 8018674:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8018678:	801a      	strh	r2, [r3, #0]
            break;
 801867a:	e0b1      	b.n	80187e0 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018682:	b29b      	uxth	r3, r3
 8018684:	425b      	negs	r3, r3
 8018686:	b29b      	uxth	r3, r3
 8018688:	b21a      	sxth	r2, r3
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	3302      	adds	r3, #2
 8018692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018696:	b29b      	uxth	r3, r3
 8018698:	425b      	negs	r3, r3
 801869a:	b29a      	uxth	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	3302      	adds	r3, #2
 80186a0:	b212      	sxth	r2, r2
 80186a2:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	3304      	adds	r3, #4
 80186a8:	68ba      	ldr	r2, [r7, #8]
 80186aa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80186ae:	801a      	strh	r2, [r3, #0]
            break;
 80186b0:	e096      	b.n	80187e0 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	3302      	adds	r3, #2
 80186b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	425b      	negs	r3, r3
 80186be:	b29b      	uxth	r3, r3
 80186c0:	b21a      	sxth	r2, r3
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	3302      	adds	r3, #2
 80186ca:	68ba      	ldr	r2, [r7, #8]
 80186cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80186d0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	3304      	adds	r3, #4
 80186d6:	68ba      	ldr	r2, [r7, #8]
 80186d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80186dc:	801a      	strh	r2, [r3, #0]
            break;
 80186de:	e07f      	b.n	80187e0 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 80186e0:	68bb      	ldr	r3, [r7, #8]
 80186e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	425b      	negs	r3, r3
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	b21a      	sxth	r2, r3
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	3302      	adds	r3, #2
 80186f6:	68ba      	ldr	r2, [r7, #8]
 80186f8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80186fc:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	3304      	adds	r3, #4
 8018702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018706:	b29b      	uxth	r3, r3
 8018708:	425b      	negs	r3, r3
 801870a:	b29a      	uxth	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	3304      	adds	r3, #4
 8018710:	b212      	sxth	r2, r2
 8018712:	801a      	strh	r2, [r3, #0]
            break;
 8018714:	e064      	b.n	80187e0 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	3302      	adds	r3, #2
 8018724:	68ba      	ldr	r2, [r7, #8]
 8018726:	f9b2 2000 	ldrsh.w	r2, [r2]
 801872a:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	3304      	adds	r3, #4
 8018730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018734:	b29b      	uxth	r3, r3
 8018736:	425b      	negs	r3, r3
 8018738:	b29a      	uxth	r2, r3
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	3304      	adds	r3, #4
 801873e:	b212      	sxth	r2, r2
 8018740:	801a      	strh	r2, [r3, #0]
            break;
 8018742:	e04d      	b.n	80187e0 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 8018744:	68bb      	ldr	r3, [r7, #8]
 8018746:	f9b3 2000 	ldrsh.w	r2, [r3]
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	3302      	adds	r3, #2
 8018752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018756:	b29b      	uxth	r3, r3
 8018758:	425b      	negs	r3, r3
 801875a:	b29a      	uxth	r2, r3
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	3302      	adds	r3, #2
 8018760:	b212      	sxth	r2, r2
 8018762:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8018764:	68bb      	ldr	r3, [r7, #8]
 8018766:	3304      	adds	r3, #4
 8018768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801876c:	b29b      	uxth	r3, r3
 801876e:	425b      	negs	r3, r3
 8018770:	b29a      	uxth	r2, r3
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	3304      	adds	r3, #4
 8018776:	b212      	sxth	r2, r2
 8018778:	801a      	strh	r2, [r3, #0]
            break;
 801877a:	e031      	b.n	80187e0 <_alignSensors+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 801877c:	68bb      	ldr	r3, [r7, #8]
 801877e:	3302      	adds	r3, #2
 8018780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018784:	b29b      	uxth	r3, r3
 8018786:	425b      	negs	r3, r3
 8018788:	b29b      	uxth	r3, r3
 801878a:	b21a      	sxth	r2, r3
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018796:	b29b      	uxth	r3, r3
 8018798:	425b      	negs	r3, r3
 801879a:	b29a      	uxth	r2, r3
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	3302      	adds	r3, #2
 80187a0:	b212      	sxth	r2, r2
 80187a2:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	3304      	adds	r3, #4
 80187a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187ac:	b29b      	uxth	r3, r3
 80187ae:	425b      	negs	r3, r3
 80187b0:	b29a      	uxth	r2, r3
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	3304      	adds	r3, #4
 80187b6:	b212      	sxth	r2, r2
 80187b8:	801a      	strh	r2, [r3, #0]
            break;
 80187ba:	e011      	b.n	80187e0 <_alignSensors+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	3302      	adds	r3, #2
 80187ca:	68ba      	ldr	r2, [r7, #8]
 80187cc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80187d0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	3304      	adds	r3, #4
 80187d6:	68ba      	ldr	r2, [r7, #8]
 80187d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80187dc:	801a      	strh	r2, [r3, #0]
            break;
 80187de:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d003      	beq.n	80187f2 <_alignSensors+0x1de>
        _alignBoard(p_owner, dest);
 80187ea:	6879      	ldr	r1, [r7, #4]
 80187ec:	68f8      	ldr	r0, [r7, #12]
 80187ee:	f7ff fe76 	bl	80184de <_alignBoard>
}
 80187f2:	bf00      	nop
 80187f4:	3710      	adds	r7, #16
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop

080187fc <pifImuSensor_Init>:

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 8018804:	2278      	movs	r2, #120	; 0x78
 8018806:	2100      	movs	r1, #0
 8018808:	6878      	ldr	r0, [r7, #4]
 801880a:	f009 fb77 	bl	8021efc <memset>
}
 801880e:	bf00      	nop
 8018810:	3708      	adds	r7, #8
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
	...

08018818 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b092      	sub	sp, #72	; 0x48
 801881c:	af00      	add	r7, sp, #0
 801881e:	60f8      	str	r0, [r7, #12]
 8018820:	4608      	mov	r0, r1
 8018822:	4611      	mov	r1, r2
 8018824:	461a      	mov	r2, r3
 8018826:	4603      	mov	r3, r0
 8018828:	817b      	strh	r3, [r7, #10]
 801882a:	460b      	mov	r3, r1
 801882c:	813b      	strh	r3, [r7, #8]
 801882e:	4613      	mov	r3, r2
 8018830:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8018832:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d108      	bne.n	801884c <pifImuSensor_InitBoardAlignment+0x34>
 801883a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d104      	bne.n	801884c <pifImuSensor_InitBoardAlignment+0x34>
 8018842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018846:	2b00      	cmp	r3, #0
 8018848:	f000 80fb 	beq.w	8018a42 <pifImuSensor_InitBoardAlignment+0x22a>

    p_owner->__board_alignment = TRUE;
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	2201      	movs	r2, #1
 8018850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * M_PI / 180.0f;
 8018854:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018858:	4618      	mov	r0, r3
 801885a:	f7e7 fe21 	bl	80004a0 <__aeabi_i2d>
 801885e:	a37c      	add	r3, pc, #496	; (adr r3, 8018a50 <pifImuSensor_InitBoardAlignment+0x238>)
 8018860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018864:	f7e7 fe86 	bl	8000574 <__aeabi_dmul>
 8018868:	4602      	mov	r2, r0
 801886a:	460b      	mov	r3, r1
 801886c:	4610      	mov	r0, r2
 801886e:	4619      	mov	r1, r3
 8018870:	f04f 0200 	mov.w	r2, #0
 8018874:	4b78      	ldr	r3, [pc, #480]	; (8018a58 <pifImuSensor_InitBoardAlignment+0x240>)
 8018876:	f7e7 ffa7 	bl	80007c8 <__aeabi_ddiv>
 801887a:	4602      	mov	r2, r0
 801887c:	460b      	mov	r3, r1
 801887e:	4610      	mov	r0, r2
 8018880:	4619      	mov	r1, r3
 8018882:	f7e8 f959 	bl	8000b38 <__aeabi_d2f>
 8018886:	4603      	mov	r3, r0
 8018888:	647b      	str	r3, [r7, #68]	; 0x44
    pitch = board_align_pitch * M_PI / 180.0f;
 801888a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801888e:	4618      	mov	r0, r3
 8018890:	f7e7 fe06 	bl	80004a0 <__aeabi_i2d>
 8018894:	a36e      	add	r3, pc, #440	; (adr r3, 8018a50 <pifImuSensor_InitBoardAlignment+0x238>)
 8018896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801889a:	f7e7 fe6b 	bl	8000574 <__aeabi_dmul>
 801889e:	4602      	mov	r2, r0
 80188a0:	460b      	mov	r3, r1
 80188a2:	4610      	mov	r0, r2
 80188a4:	4619      	mov	r1, r3
 80188a6:	f04f 0200 	mov.w	r2, #0
 80188aa:	4b6b      	ldr	r3, [pc, #428]	; (8018a58 <pifImuSensor_InitBoardAlignment+0x240>)
 80188ac:	f7e7 ff8c 	bl	80007c8 <__aeabi_ddiv>
 80188b0:	4602      	mov	r2, r0
 80188b2:	460b      	mov	r3, r1
 80188b4:	4610      	mov	r0, r2
 80188b6:	4619      	mov	r1, r3
 80188b8:	f7e8 f93e 	bl	8000b38 <__aeabi_d2f>
 80188bc:	4603      	mov	r3, r0
 80188be:	643b      	str	r3, [r7, #64]	; 0x40
    yaw = board_align_yaw * M_PI / 180.0f;
 80188c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7e7 fdeb 	bl	80004a0 <__aeabi_i2d>
 80188ca:	a361      	add	r3, pc, #388	; (adr r3, 8018a50 <pifImuSensor_InitBoardAlignment+0x238>)
 80188cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d0:	f7e7 fe50 	bl	8000574 <__aeabi_dmul>
 80188d4:	4602      	mov	r2, r0
 80188d6:	460b      	mov	r3, r1
 80188d8:	4610      	mov	r0, r2
 80188da:	4619      	mov	r1, r3
 80188dc:	f04f 0200 	mov.w	r2, #0
 80188e0:	4b5d      	ldr	r3, [pc, #372]	; (8018a58 <pifImuSensor_InitBoardAlignment+0x240>)
 80188e2:	f7e7 ff71 	bl	80007c8 <__aeabi_ddiv>
 80188e6:	4602      	mov	r2, r0
 80188e8:	460b      	mov	r3, r1
 80188ea:	4610      	mov	r0, r2
 80188ec:	4619      	mov	r1, r3
 80188ee:	f7e8 f923 	bl	8000b38 <__aeabi_d2f>
 80188f2:	4603      	mov	r3, r0
 80188f4:	63fb      	str	r3, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 80188f6:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80188fa:	f009 fddd 	bl	80224b8 <cosf>
 80188fe:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 8018902:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8018906:	f009 fe5b 	bl	80225c0 <sinf>
 801890a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 801890e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8018912:	f009 fdd1 	bl	80224b8 <cosf>
 8018916:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 801891a:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 801891e:	f009 fe4f 	bl	80225c0 <sinf>
 8018922:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 8018926:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801892a:	f009 fdc5 	bl	80224b8 <cosf>
 801892e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 8018932:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8018936:	f009 fe43 	bl	80225c0 <sinf>
 801893a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 801893e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018942:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018946:	ee67 7a27 	vmul.f32	s15, s14, s15
 801894a:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 801894e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018952:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801895a:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 801895e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018962:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018966:	ee67 7a27 	vmul.f32	s15, s14, s15
 801896a:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 801896e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018972:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018976:	ee67 7a27 	vmul.f32	s15, s14, s15
 801897a:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 801897e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018982:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018986:	ee67 7a27 	vmul.f32	s15, s14, s15
 801898a:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	69fa      	ldr	r2, [r7, #28]
 8018992:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 8018994:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018998:	eeb1 7a67 	vneg.f32	s14, s15
 801899c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80189a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80189ae:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 80189b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80189b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80189b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80189c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 80189ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80189ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80189d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80189d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80189da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 80189e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80189e8:	eeb1 7a67 	vneg.f32	s14, s15
 80189ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80189f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 80189fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80189fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018a06:	ed97 7a04 	vldr	s14, [r7, #16]
 8018a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8018a14:	ed97 7a06 	vldr	s14, [r7, #24]
 8018a18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8018a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8018a2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018a32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8018a40:	e000      	b.n	8018a44 <pifImuSensor_InitBoardAlignment+0x22c>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8018a42:	bf00      	nop
}
 8018a44:	3748      	adds	r7, #72	; 0x48
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	f3af 8000 	nop.w
 8018a50:	54442d18 	.word	0x54442d18
 8018a54:	400921fb 	.word	0x400921fb
 8018a58:	40668000 	.word	0x40668000

08018a5c <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018a5c:	b480      	push	{r7}
 8018a5e:	b083      	sub	sp, #12
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
 8018a64:	460b      	mov	r3, r1
 8018a66:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018a68:	78fb      	ldrb	r3, [r7, #3]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d002      	beq.n	8018a74 <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	78fa      	ldrb	r2, [r7, #3]
 8018a72:	751a      	strb	r2, [r3, #20]
}
 8018a74:	bf00      	nop
 8018a76:	370c      	adds	r7, #12
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7e:	4770      	bx	lr

08018a80 <pifImuSensor_ReadGyro>:

BOOL pifImuSensor_ReadGyro(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b084      	sub	sp, #16
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	6039      	str	r1, [r7, #0]
	int16_t gyro[3];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	f003 0301 	and.w	r3, r3, #1
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d016      	beq.n	8018ac4 <pifImuSensor_ReadGyro+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	699b      	ldr	r3, [r3, #24]
 8018a9a:	687a      	ldr	r2, [r7, #4]
 8018a9c:	69d2      	ldr	r2, [r2, #28]
 8018a9e:	f107 0108 	add.w	r1, r7, #8
 8018aa2:	4610      	mov	r0, r2
 8018aa4:	4798      	blx	r3
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d101      	bne.n	8018ab0 <pifImuSensor_ReadGyro+0x30>
 8018aac:	2300      	movs	r3, #0
 8018aae:	e00a      	b.n	8018ac6 <pifImuSensor_ReadGyro+0x46>

		_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	7d1b      	ldrb	r3, [r3, #20]
 8018ab4:	f107 0108 	add.w	r1, r7, #8
 8018ab8:	683a      	ldr	r2, [r7, #0]
 8018aba:	6878      	ldr	r0, [r7, #4]
 8018abc:	f7ff fdaa 	bl	8018614 <_alignSensors>
		return TRUE;
 8018ac0:	2301      	movs	r3, #1
 8018ac2:	e000      	b.n	8018ac6 <pifImuSensor_ReadGyro+0x46>
	}
	return FALSE;
 8018ac4:	2300      	movs	r3, #0
}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	3710      	adds	r7, #16
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd80      	pop	{r7, pc}

08018ace <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018ace:	b480      	push	{r7}
 8018ad0:	b083      	sub	sp, #12
 8018ad2:	af00      	add	r7, sp, #0
 8018ad4:	6078      	str	r0, [r7, #4]
 8018ad6:	460b      	mov	r3, r1
 8018ad8:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018ada:	78fb      	ldrb	r3, [r7, #3]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d003      	beq.n	8018ae8 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	78fa      	ldrb	r2, [r7, #3]
 8018ae4:	f883 2020 	strb.w	r2, [r3, #32]
}
 8018ae8:	bf00      	nop
 8018aea:	370c      	adds	r7, #12
 8018aec:	46bd      	mov	sp, r7
 8018aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af2:	4770      	bx	lr

08018af4 <pifImuSensor_ReadAccel>:

BOOL pifImuSensor_ReadAccel(PifImuSensor* p_owner, int16_t* p_accel)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b084      	sub	sp, #16
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
 8018afc:	6039      	str	r1, [r7, #0]
	int16_t accel[3];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	f003 0302 	and.w	r3, r3, #2
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d017      	beq.n	8018b3a <pifImuSensor_ReadAccel+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8018b12:	f107 0108 	add.w	r1, r7, #8
 8018b16:	4610      	mov	r0, r2
 8018b18:	4798      	blx	r3
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d101      	bne.n	8018b24 <pifImuSensor_ReadAccel+0x30>
 8018b20:	2300      	movs	r3, #0
 8018b22:	e00b      	b.n	8018b3c <pifImuSensor_ReadAccel+0x48>

		_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018b2a:	f107 0108 	add.w	r1, r7, #8
 8018b2e:	683a      	ldr	r2, [r7, #0]
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	f7ff fd6f 	bl	8018614 <_alignSensors>
		return TRUE;
 8018b36:	2301      	movs	r3, #1
 8018b38:	e000      	b.n	8018b3c <pifImuSensor_ReadAccel+0x48>
	}
	return FALSE;
 8018b3a:	2300      	movs	r3, #0
}
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	3710      	adds	r7, #16
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8018b44:	b480      	push	{r7}
 8018b46:	b083      	sub	sp, #12
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
 8018b4c:	460b      	mov	r3, r1
 8018b4e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8018b50:	78fb      	ldrb	r3, [r7, #3]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d003      	beq.n	8018b5e <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	78fa      	ldrb	r2, [r7, #3]
 8018b5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8018b5e:	bf00      	nop
 8018b60:	370c      	adds	r7, #12
 8018b62:	46bd      	mov	sp, r7
 8018b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b68:	4770      	bx	lr

08018b6a <pifImuSensor_ReadMag>:

BOOL pifImuSensor_ReadMag(PifImuSensor* p_owner, int16_t* p_mag)
{
 8018b6a:	b580      	push	{r7, lr}
 8018b6c:	b084      	sub	sp, #16
 8018b6e:	af00      	add	r7, sp, #0
 8018b70:	6078      	str	r0, [r7, #4]
 8018b72:	6039      	str	r1, [r7, #0]
	int16_t mag[3];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	781b      	ldrb	r3, [r3, #0]
 8018b78:	f003 0304 	and.w	r3, r3, #4
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d017      	beq.n	8018bb0 <pifImuSensor_ReadMag+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b84:	687a      	ldr	r2, [r7, #4]
 8018b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018b88:	f107 0108 	add.w	r1, r7, #8
 8018b8c:	4610      	mov	r0, r2
 8018b8e:	4798      	blx	r3
 8018b90:	4603      	mov	r3, r0
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d101      	bne.n	8018b9a <pifImuSensor_ReadMag+0x30>
 8018b96:	2300      	movs	r3, #0
 8018b98:	e00b      	b.n	8018bb2 <pifImuSensor_ReadMag+0x48>

		_alignSensors(p_owner, mag, p_mag, p_owner->__mag_info.align);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018ba0:	f107 0108 	add.w	r1, r7, #8
 8018ba4:	683a      	ldr	r2, [r7, #0]
 8018ba6:	6878      	ldr	r0, [r7, #4]
 8018ba8:	f7ff fd34 	bl	8018614 <_alignSensors>
		return TRUE;
 8018bac:	2301      	movs	r3, #1
 8018bae:	e000      	b.n	8018bb2 <pifImuSensor_ReadMag+0x48>
	}
	return FALSE;
 8018bb0:	2300      	movs	r3, #0
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3710      	adds	r7, #16
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}
 8018bba:	0000      	movs	r0, r0
 8018bbc:	0000      	movs	r0, r0
	...

08018bc0 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b082      	sub	sp, #8
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	460b      	mov	r3, r1
 8018bca:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d101      	bne.n	8018bd6 <_changeFsSel+0x16>
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	e013      	b.n	8018bfe <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8018bd6:	78fb      	ldrb	r3, [r7, #3]
 8018bd8:	2201      	movs	r2, #1
 8018bda:	fa02 f303 	lsl.w	r3, r2, r3
 8018bde:	4618      	mov	r0, r3
 8018be0:	f7e7 fc5e 	bl	80004a0 <__aeabi_i2d>
 8018be4:	4602      	mov	r2, r0
 8018be6:	460b      	mov	r3, r1
 8018be8:	a107      	add	r1, pc, #28	; (adr r1, 8018c08 <_changeFsSel+0x48>)
 8018bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bee:	f7e7 fdeb 	bl	80007c8 <__aeabi_ddiv>
 8018bf2:	4602      	mov	r2, r0
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	6879      	ldr	r1, [r7, #4]
 8018bf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 8018bfc:	2301      	movs	r3, #1
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3708      	adds	r7, #8
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	00000000 	.word	0x00000000
 8018c0c:	40606000 	.word	0x40606000

08018c10 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8018c10:	b480      	push	{r7}
 8018c12:	b083      	sub	sp, #12
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
 8018c18:	460b      	mov	r3, r1
 8018c1a:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d101      	bne.n	8018c26 <_changeAfsSel+0x16>
 8018c22:	2300      	movs	r3, #0
 8018c24:	e008      	b.n	8018c38 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8018c26:	78fb      	ldrb	r3, [r7, #3]
 8018c28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8018c2c:	fa42 f303 	asr.w	r3, r2, r3
 8018c30:	b29a      	uxth	r2, r3
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	821a      	strh	r2, [r3, #16]
	return TRUE;
 8018c36:	2301      	movs	r3, #1
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	370c      	adds	r7, #12
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c42:	4770      	bx	lr

08018c44 <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8018c44:	b590      	push	{r4, r7, lr}
 8018c46:	b08b      	sub	sp, #44	; 0x2c
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	60f8      	str	r0, [r7, #12]
 8018c4c:	607a      	str	r2, [r7, #4]
 8018c4e:	461a      	mov	r2, r3
 8018c50:	460b      	mov	r3, r1
 8018c52:	817b      	strh	r3, [r7, #10]
 8018c54:	4613      	mov	r3, r2
 8018c56:	727b      	strb	r3, [r7, #9]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8018c58:	4b75      	ldr	r3, [pc, #468]	; (8018e30 <pifMpu60x0_Init+0x1ec>)
 8018c5a:	f107 0418 	add.w	r4, r7, #24
 8018c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d005      	beq.n	8018c76 <pifMpu60x0_Init+0x32>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d002      	beq.n	8018c76 <pifMpu60x0_Init+0x32>
 8018c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d104      	bne.n	8018c80 <pifMpu60x0_Init+0x3c>
		pif_error = E_INVALID_PARAM;
 8018c76:	4b6f      	ldr	r3, [pc, #444]	; (8018e34 <pifMpu60x0_Init+0x1f0>)
 8018c78:	2201      	movs	r2, #1
 8018c7a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	e0d3      	b.n	8018e28 <pifMpu60x0_Init+0x1e4>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8018c80:	2210      	movs	r2, #16
 8018c82:	2100      	movs	r1, #0
 8018c84:	68f8      	ldr	r0, [r7, #12]
 8018c86:	f009 f939 	bl	8021efc <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8018c8a:	6878      	ldr	r0, [r7, #4]
 8018c8c:	f7f9 fbc6 	bl	801241c <pifI2cPort_AddDevice>
 8018c90:	4602      	mov	r2, r0
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	689b      	ldr	r3, [r3, #8]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d101      	bne.n	8018ca2 <pifMpu60x0_Init+0x5e>
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	e0c2      	b.n	8018e28 <pifMpu60x0_Init+0x1e4>

    p_owner->_p_i2c->addr = addr;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	689b      	ldr	r3, [r3, #8]
 8018ca6:	7a7a      	ldrb	r2, [r7, #9]
 8018ca8:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	689b      	ldr	r3, [r3, #8]
 8018cae:	f107 0217 	add.w	r2, r7, #23
 8018cb2:	2175      	movs	r1, #117	; 0x75
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f7f9 fc95 	bl	80125e4 <pifI2cDevice_ReadRegByte>
 8018cba:	4603      	mov	r3, r0
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	f000 80a4 	beq.w	8018e0a <pifMpu60x0_Init+0x1c6>
	if (data != addr) {
 8018cc2:	7dfb      	ldrb	r3, [r7, #23]
 8018cc4:	7a7a      	ldrb	r2, [r7, #9]
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d003      	beq.n	8018cd2 <pifMpu60x0_Init+0x8e>
		pif_error = E_INVALID_ID;
 8018cca:	4b5a      	ldr	r3, [pc, #360]	; (8018e34 <pifMpu60x0_Init+0x1f0>)
 8018ccc:	2211      	movs	r2, #17
 8018cce:	701a      	strb	r2, [r3, #0]
		goto fail;
 8018cd0:	e0a6      	b.n	8018e20 <pifMpu60x0_Init+0x1dc>
	}
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 8018cd2:	7dfb      	ldrb	r3, [r7, #23]
 8018cd4:	2b1f      	cmp	r3, #31
 8018cd6:	d809      	bhi.n	8018cec <pifMpu60x0_Init+0xa8>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 8018cd8:	7dfb      	ldrb	r3, [r7, #23]
 8018cda:	085b      	lsrs	r3, r3, #1
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	f107 0218 	add.w	r2, r7, #24
 8018ce2:	4955      	ldr	r1, [pc, #340]	; (8018e38 <pifMpu60x0_Init+0x1f4>)
 8018ce4:	2002      	movs	r0, #2
 8018ce6:	f7fa fc77 	bl	80135d8 <pifLog_Printf>
 8018cea:	e008      	b.n	8018cfe <pifMpu60x0_Init+0xba>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 8018cec:	7dfb      	ldrb	r3, [r7, #23]
 8018cee:	085b      	lsrs	r3, r3, #1
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	f107 0218 	add.w	r2, r7, #24
 8018cf6:	4951      	ldr	r1, [pc, #324]	; (8018e3c <pifMpu60x0_Init+0x1f8>)
 8018cf8:	2002      	movs	r0, #2
 8018cfa:	f7fa fc6d 	bl	80135d8 <pifLog_Printf>
	}
#endif

   	pwr_mgmt_1.byte = 0;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 8018d02:	7d3b      	ldrb	r3, [r7, #20]
 8018d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d08:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	689b      	ldr	r3, [r3, #8]
 8018d0e:	7d3a      	ldrb	r2, [r7, #20]
 8018d10:	216b      	movs	r1, #107	; 0x6b
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7f9 fd94 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d077      	beq.n	8018e0e <pifMpu60x0_Init+0x1ca>
	pifTaskManager_YieldMs(100);
 8018d1e:	2064      	movs	r0, #100	; 0x64
 8018d20:	f7fb ffa2 	bl	8014c68 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	6898      	ldr	r0, [r3, #8]
 8018d28:	f107 0317 	add.w	r3, r7, #23
 8018d2c:	f240 3202 	movw	r2, #770	; 0x302
 8018d30:	211b      	movs	r1, #27
 8018d32:	f7f9 fca4 	bl	801267e <pifI2cDevice_ReadRegBit8>
 8018d36:	4603      	mov	r3, r0
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d06a      	beq.n	8018e12 <pifMpu60x0_Init+0x1ce>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8018d3c:	7dfb      	ldrb	r3, [r7, #23]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018d42:	f7ff ff3d 	bl	8018bc0 <_changeFsSel>
 8018d46:	4603      	mov	r3, r0
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d064      	beq.n	8018e16 <pifMpu60x0_Init+0x1d2>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	6898      	ldr	r0, [r3, #8]
 8018d50:	f107 0317 	add.w	r3, r7, #23
 8018d54:	f240 3202 	movw	r2, #770	; 0x302
 8018d58:	211c      	movs	r1, #28
 8018d5a:	f7f9 fc90 	bl	801267e <pifI2cDevice_ReadRegBit8>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d05a      	beq.n	8018e1a <pifMpu60x0_Init+0x1d6>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8018d64:	7dfb      	ldrb	r3, [r7, #23]
 8018d66:	4619      	mov	r1, r3
 8018d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018d6a:	f7ff ff51 	bl	8018c10 <_changeAfsSel>
 8018d6e:	4603      	mov	r3, r0
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d054      	beq.n	8018e1e <pifMpu60x0_Init+0x1da>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018d74:	897b      	ldrh	r3, [r7, #10]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d106      	bne.n	8018d88 <pifMpu60x0_Init+0x144>
 8018d7a:	4b31      	ldr	r3, [pc, #196]	; (8018e40 <pifMpu60x0_Init+0x1fc>)
 8018d7c:	881b      	ldrh	r3, [r3, #0]
 8018d7e:	1c5a      	adds	r2, r3, #1
 8018d80:	b291      	uxth	r1, r2
 8018d82:	4a2f      	ldr	r2, [pc, #188]	; (8018e40 <pifMpu60x0_Init+0x1fc>)
 8018d84:	8011      	strh	r1, [r2, #0]
 8018d86:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	897a      	ldrh	r2, [r7, #10]
 8018d8c:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	2201      	movs	r2, #1
 8018d92:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018d98:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 8018d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d9c:	781b      	ldrb	r3, [r3, #0]
 8018d9e:	f043 0303 	orr.w	r3, r3, #3
 8018da2:	b2da      	uxtb	r2, r3
 8018da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018da6:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 8018da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018daa:	2201      	movs	r2, #1
 8018dac:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 8018dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018db0:	4a24      	ldr	r2, [pc, #144]	; (8018e44 <pifMpu60x0_Init+0x200>)
 8018db2:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 8018db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018db6:	68fa      	ldr	r2, [r7, #12]
 8018db8:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 8018dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dbc:	2201      	movs	r2, #1
 8018dbe:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 8018dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dc4:	4a20      	ldr	r2, [pc, #128]	; (8018e48 <pifMpu60x0_Init+0x204>)
 8018dc6:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 8018dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dca:	68fa      	ldr	r2, [r7, #12]
 8018dcc:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 8018dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 8018dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 8018dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ddc:	2200      	movs	r2, #0
 8018dde:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 8018de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de2:	2200      	movs	r2, #0
 8018de4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 8018de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dea:	2200      	movs	r2, #0
 8018dec:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 8018dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df0:	2200      	movs	r2, #0
 8018df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 8018df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018df8:	2200      	movs	r2, #0
 8018dfa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 8018dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e00:	f04f 0200 	mov.w	r2, #0
 8018e04:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 8018e06:	2301      	movs	r3, #1
 8018e08:	e00e      	b.n	8018e28 <pifMpu60x0_Init+0x1e4>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8018e0a:	bf00      	nop
 8018e0c:	e008      	b.n	8018e20 <pifMpu60x0_Init+0x1dc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018e0e:	bf00      	nop
 8018e10:	e006      	b.n	8018e20 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8018e12:	bf00      	nop
 8018e14:	e004      	b.n	8018e20 <pifMpu60x0_Init+0x1dc>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 8018e16:	bf00      	nop
 8018e18:	e002      	b.n	8018e20 <pifMpu60x0_Init+0x1dc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 8018e1a:	bf00      	nop
 8018e1c:	e000      	b.n	8018e20 <pifMpu60x0_Init+0x1dc>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 8018e1e:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 8018e20:	68f8      	ldr	r0, [r7, #12]
 8018e22:	f000 f813 	bl	8018e4c <pifMpu60x0_Clear>
	return FALSE;
 8018e26:	2300      	movs	r3, #0
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	372c      	adds	r7, #44	; 0x2c
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd90      	pop	{r4, r7, pc}
 8018e30:	08026bb0 	.word	0x08026bb0
 8018e34:	200020c9 	.word	0x200020c9
 8018e38:	08026ba0 	.word	0x08026ba0
 8018e3c:	08026ba8 	.word	0x08026ba8
 8018e40:	2000005c 	.word	0x2000005c
 8018e44:	08018efd 	.word	0x08018efd
 8018e48:	08018fc3 	.word	0x08018fc3

08018e4c <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	689b      	ldr	r3, [r3, #8]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d00b      	beq.n	8018e74 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	689b      	ldr	r3, [r3, #8]
 8018e60:	685a      	ldr	r2, [r3, #4]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	689b      	ldr	r3, [r3, #8]
 8018e66:	4619      	mov	r1, r3
 8018e68:	4610      	mov	r0, r2
 8018e6a:	f7f9 fafb 	bl	8012464 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2200      	movs	r2, #0
 8018e72:	609a      	str	r2, [r3, #8]
    }
}
 8018e74:	bf00      	nop
 8018e76:	3708      	adds	r7, #8
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	689b      	ldr	r3, [r3, #8]
 8018e8a:	783a      	ldrb	r2, [r7, #0]
 8018e8c:	211b      	movs	r1, #27
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7f9 fcd6 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8018e94:	4603      	mov	r3, r0
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d101      	bne.n	8018e9e <pifMpu60x0_SetGyroConfig+0x22>
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	e00a      	b.n	8018eb4 <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	68da      	ldr	r2, [r3, #12]
 8018ea2:	783b      	ldrb	r3, [r7, #0]
 8018ea4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	4619      	mov	r1, r3
 8018eac:	4610      	mov	r0, r2
 8018eae:	f7ff fe87 	bl	8018bc0 <_changeFsSel>
	return TRUE;
 8018eb2:	2301      	movs	r3, #1
}
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	3708      	adds	r7, #8
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bd80      	pop	{r7, pc}

08018ebc <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b082      	sub	sp, #8
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
 8018ec4:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	689b      	ldr	r3, [r3, #8]
 8018eca:	783a      	ldrb	r2, [r7, #0]
 8018ecc:	211c      	movs	r1, #28
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7f9 fcb6 	bl	8012840 <pifI2cDevice_WriteRegByte>
 8018ed4:	4603      	mov	r3, r0
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d101      	bne.n	8018ede <pifMpu60x0_SetAccelConfig+0x22>
 8018eda:	2300      	movs	r3, #0
 8018edc:	e00a      	b.n	8018ef4 <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	68da      	ldr	r2, [r3, #12]
 8018ee2:	783b      	ldrb	r3, [r7, #0]
 8018ee4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	4619      	mov	r1, r3
 8018eec:	4610      	mov	r0, r2
 8018eee:	f7ff fe8f 	bl	8018c10 <_changeAfsSel>
	return TRUE;
 8018ef2:	2301      	movs	r3, #1
}
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	3708      	adds	r7, #8
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	bd80      	pop	{r7, pc}

08018efc <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b084      	sub	sp, #16
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
 8018f04:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	6898      	ldr	r0, [r3, #8]
 8018f0a:	f107 0208 	add.w	r2, r7, #8
 8018f0e:	2306      	movs	r3, #6
 8018f10:	2143      	movs	r1, #67	; 0x43
 8018f12:	f7f9 fb9f 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 8018f16:	4603      	mov	r3, r0
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d101      	bne.n	8018f20 <pifMpu60x0_ReadGyro+0x24>
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	e04c      	b.n	8018fba <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 8018f20:	7a3b      	ldrb	r3, [r7, #8]
 8018f22:	b29b      	uxth	r3, r3
 8018f24:	021b      	lsls	r3, r3, #8
 8018f26:	b29a      	uxth	r2, r3
 8018f28:	7a7b      	ldrb	r3, [r7, #9]
 8018f2a:	b29b      	uxth	r3, r3
 8018f2c:	4413      	add	r3, r2
 8018f2e:	b29b      	uxth	r3, r3
 8018f30:	b21a      	sxth	r2, r3
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 8018f36:	7abb      	ldrb	r3, [r7, #10]
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	021b      	lsls	r3, r3, #8
 8018f3c:	b29a      	uxth	r2, r3
 8018f3e:	7afb      	ldrb	r3, [r7, #11]
 8018f40:	b29b      	uxth	r3, r3
 8018f42:	4413      	add	r3, r2
 8018f44:	b29a      	uxth	r2, r3
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	3302      	adds	r3, #2
 8018f4a:	b212      	sxth	r2, r2
 8018f4c:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 8018f4e:	7b3b      	ldrb	r3, [r7, #12]
 8018f50:	b29b      	uxth	r3, r3
 8018f52:	021b      	lsls	r3, r3, #8
 8018f54:	b29a      	uxth	r2, r3
 8018f56:	7b7b      	ldrb	r3, [r7, #13]
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	4413      	add	r3, r2
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	3304      	adds	r3, #4
 8018f62:	b212      	sxth	r2, r2
 8018f64:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	781b      	ldrb	r3, [r3, #0]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d024      	beq.n	8018fb8 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f74:	461a      	mov	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	781b      	ldrb	r3, [r3, #0]
 8018f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f7e:	b21a      	sxth	r2, r3
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 8018f84:	683b      	ldr	r3, [r7, #0]
 8018f86:	3302      	adds	r3, #2
 8018f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	781b      	ldrb	r3, [r3, #0]
 8018f92:	fb92 f2f3 	sdiv	r2, r2, r3
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	3302      	adds	r3, #2
 8018f9a:	b212      	sxth	r2, r2
 8018f9c:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	3304      	adds	r3, #4
 8018fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	781b      	ldrb	r3, [r3, #0]
 8018fac:	fb92 f2f3 	sdiv	r2, r2, r3
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	3304      	adds	r3, #4
 8018fb4:	b212      	sxth	r2, r2
 8018fb6:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 8018fb8:	2301      	movs	r3, #1
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3710      	adds	r7, #16
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}

08018fc2 <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 8018fc2:	b580      	push	{r7, lr}
 8018fc4:	b084      	sub	sp, #16
 8018fc6:	af00      	add	r7, sp, #0
 8018fc8:	6078      	str	r0, [r7, #4]
 8018fca:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	6898      	ldr	r0, [r3, #8]
 8018fd0:	f107 0208 	add.w	r2, r7, #8
 8018fd4:	2306      	movs	r3, #6
 8018fd6:	213b      	movs	r1, #59	; 0x3b
 8018fd8:	f7f9 fb3c 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d101      	bne.n	8018fe6 <pifMpu60x0_ReadAccel+0x24>
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	e04c      	b.n	8019080 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 8018fe6:	7a3b      	ldrb	r3, [r7, #8]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	021b      	lsls	r3, r3, #8
 8018fec:	b29a      	uxth	r2, r3
 8018fee:	7a7b      	ldrb	r3, [r7, #9]
 8018ff0:	b29b      	uxth	r3, r3
 8018ff2:	4413      	add	r3, r2
 8018ff4:	b29b      	uxth	r3, r3
 8018ff6:	b21a      	sxth	r2, r3
 8018ff8:	683b      	ldr	r3, [r7, #0]
 8018ffa:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 8018ffc:	7abb      	ldrb	r3, [r7, #10]
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	021b      	lsls	r3, r3, #8
 8019002:	b29a      	uxth	r2, r3
 8019004:	7afb      	ldrb	r3, [r7, #11]
 8019006:	b29b      	uxth	r3, r3
 8019008:	4413      	add	r3, r2
 801900a:	b29a      	uxth	r2, r3
 801900c:	683b      	ldr	r3, [r7, #0]
 801900e:	3302      	adds	r3, #2
 8019010:	b212      	sxth	r2, r2
 8019012:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 8019014:	7b3b      	ldrb	r3, [r7, #12]
 8019016:	b29b      	uxth	r3, r3
 8019018:	021b      	lsls	r3, r3, #8
 801901a:	b29a      	uxth	r2, r3
 801901c:	7b7b      	ldrb	r3, [r7, #13]
 801901e:	b29b      	uxth	r3, r3
 8019020:	4413      	add	r3, r2
 8019022:	b29a      	uxth	r2, r3
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	3304      	adds	r3, #4
 8019028:	b212      	sxth	r2, r2
 801902a:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	785b      	ldrb	r3, [r3, #1]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d024      	beq.n	801907e <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	f9b3 3000 	ldrsh.w	r3, [r3]
 801903a:	461a      	mov	r2, r3
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	785b      	ldrb	r3, [r3, #1]
 8019040:	fb92 f3f3 	sdiv	r3, r2, r3
 8019044:	b21a      	sxth	r2, r3
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	3302      	adds	r3, #2
 801904e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019052:	461a      	mov	r2, r3
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	785b      	ldrb	r3, [r3, #1]
 8019058:	fb92 f2f3 	sdiv	r2, r2, r3
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	3302      	adds	r3, #2
 8019060:	b212      	sxth	r2, r2
 8019062:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	3304      	adds	r3, #4
 8019068:	f9b3 3000 	ldrsh.w	r3, [r3]
 801906c:	461a      	mov	r2, r3
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	785b      	ldrb	r3, [r3, #1]
 8019072:	fb92 f2f3 	sdiv	r2, r2, r3
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	3304      	adds	r3, #4
 801907a:	b212      	sxth	r2, r2
 801907c:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801907e:	2301      	movs	r3, #1
}
 8019080:	4618      	mov	r0, r3
 8019082:	3710      	adds	r7, #16
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}

08019088 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 8019088:	b480      	push	{r7}
 801908a:	b087      	sub	sp, #28
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 8019090:	2300      	movs	r3, #0
 8019092:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 8019094:	2301      	movs	r3, #1
 8019096:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	8adb      	ldrh	r3, [r3, #22]
 801909c:	b2db      	uxtb	r3, r3
 801909e:	f003 030f 	and.w	r3, r3, #15
 80190a2:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	8adb      	ldrh	r3, [r3, #22]
 80190a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80190ac:	b29a      	uxth	r2, r3
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 80190b2:	2300      	movs	r3, #0
 80190b4:	617b      	str	r3, [r7, #20]
 80190b6:	e00b      	b.n	80190d0 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	697a      	ldr	r2, [r7, #20]
 80190bc:	3204      	adds	r2, #4
 80190be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d001      	beq.n	80190ca <_checkPromCrc+0x42>
            zero = 0;
 80190c6:	2300      	movs	r3, #0
 80190c8:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	3301      	adds	r3, #1
 80190ce:	617b      	str	r3, [r7, #20]
 80190d0:	697b      	ldr	r3, [r7, #20]
 80190d2:	2b07      	cmp	r3, #7
 80190d4:	ddf0      	ble.n	80190b8 <_checkPromCrc+0x30>
    }
    if (zero)
 80190d6:	7afb      	ldrb	r3, [r7, #11]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d001      	beq.n	80190e0 <_checkPromCrc+0x58>
        return FALSE;
 80190dc:	2300      	movs	r3, #0
 80190de:	e04b      	b.n	8019178 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 80190e0:	2300      	movs	r3, #0
 80190e2:	617b      	str	r3, [r7, #20]
 80190e4:	e033      	b.n	801914e <_checkPromCrc+0xc6>
        if (i & 1)
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	f003 0301 	and.w	r3, r3, #1
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d00a      	beq.n	8019106 <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	105a      	asrs	r2, r3, #1
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	3204      	adds	r2, #4
 80190f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	68fa      	ldr	r2, [r7, #12]
 8019100:	4053      	eors	r3, r2
 8019102:	60fb      	str	r3, [r7, #12]
 8019104:	e00b      	b.n	801911e <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	105a      	asrs	r2, r3, #1
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	3204      	adds	r2, #4
 801910e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019112:	0a1b      	lsrs	r3, r3, #8
 8019114:	b29b      	uxth	r3, r3
 8019116:	461a      	mov	r2, r3
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	4053      	eors	r3, r2
 801911c:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801911e:	2308      	movs	r3, #8
 8019120:	613b      	str	r3, [r7, #16]
 8019122:	e00e      	b.n	8019142 <_checkPromCrc+0xba>
            if (res & 0x8000)
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801912a:	2b00      	cmp	r3, #0
 801912c:	d003      	beq.n	8019136 <_checkPromCrc+0xae>
                res ^= 0x1800;
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 8019134:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	005b      	lsls	r3, r3, #1
 801913a:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801913c:	693b      	ldr	r3, [r7, #16]
 801913e:	3b01      	subs	r3, #1
 8019140:	613b      	str	r3, [r7, #16]
 8019142:	693b      	ldr	r3, [r7, #16]
 8019144:	2b00      	cmp	r3, #0
 8019146:	dced      	bgt.n	8019124 <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	3301      	adds	r3, #1
 801914c:	617b      	str	r3, [r7, #20]
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	2b0f      	cmp	r3, #15
 8019152:	ddc8      	ble.n	80190e6 <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	8ada      	ldrh	r2, [r3, #22]
 8019158:	7abb      	ldrb	r3, [r7, #10]
 801915a:	b29b      	uxth	r3, r3
 801915c:	4313      	orrs	r3, r2
 801915e:	b29a      	uxth	r2, r3
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 8019164:	7aba      	ldrb	r2, [r7, #10]
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	0b1b      	lsrs	r3, r3, #12
 801916a:	f003 030f 	and.w	r3, r3, #15
 801916e:	429a      	cmp	r2, r3
 8019170:	d101      	bne.n	8019176 <_checkPromCrc+0xee>
        return TRUE;
 8019172:	2301      	movs	r3, #1
 8019174:	e000      	b.n	8019178 <_checkPromCrc+0xf0>

    return FALSE;
 8019176:	2300      	movs	r3, #0
}
 8019178:	4618      	mov	r0, r3
 801917a:	371c      	adds	r7, #28
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr

08019184 <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, int32_t* p_pressure, float* p_temperature)
{
 8019184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019188:	b0d2      	sub	sp, #328	; 0x148
 801918a:	af00      	add	r7, sp, #0
 801918c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8019190:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8019194:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 8019198:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801919c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801919e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80191a2:	8a5b      	ldrh	r3, [r3, #18]
 80191a4:	021b      	lsls	r3, r3, #8
 80191a6:	1ad3      	subs	r3, r2, r3
 80191a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 80191ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80191b0:	17da      	asrs	r2, r3, #31
 80191b2:	469a      	mov	sl, r3
 80191b4:	4693      	mov	fp, r2
 80191b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80191ba:	8a9b      	ldrh	r3, [r3, #20]
 80191bc:	b29b      	uxth	r3, r3
 80191be:	2200      	movs	r2, #0
 80191c0:	4698      	mov	r8, r3
 80191c2:	4691      	mov	r9, r2
 80191c4:	fb08 f20b 	mul.w	r2, r8, fp
 80191c8:	fb0a f309 	mul.w	r3, sl, r9
 80191cc:	4413      	add	r3, r2
 80191ce:	fbaa 4508 	umull	r4, r5, sl, r8
 80191d2:	442b      	add	r3, r5
 80191d4:	461d      	mov	r5, r3
 80191d6:	f04f 0200 	mov.w	r2, #0
 80191da:	f04f 0300 	mov.w	r3, #0
 80191de:	0de2      	lsrs	r2, r4, #23
 80191e0:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80191e4:	15eb      	asrs	r3, r5, #23
 80191e6:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 80191ea:	6739      	str	r1, [r7, #112]	; 0x70
 80191ec:	f143 0300 	adc.w	r3, r3, #0
 80191f0:	677b      	str	r3, [r7, #116]	; 0x74
 80191f2:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80191f6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 80191fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80191fe:	899b      	ldrh	r3, [r3, #12]
 8019200:	b29b      	uxth	r3, r3
 8019202:	2200      	movs	r2, #0
 8019204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019208:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801920c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8019210:	460b      	mov	r3, r1
 8019212:	0c1b      	lsrs	r3, r3, #16
 8019214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8019218:	460b      	mov	r3, r1
 801921a:	041b      	lsls	r3, r3, #16
 801921c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019220:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019224:	8a1b      	ldrh	r3, [r3, #16]
 8019226:	b29b      	uxth	r3, r3
 8019228:	2200      	movs	r2, #0
 801922a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801922e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8019232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8019236:	17da      	asrs	r2, r3, #31
 8019238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801923c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8019240:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8019244:	462b      	mov	r3, r5
 8019246:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 801924a:	4642      	mov	r2, r8
 801924c:	fb02 f203 	mul.w	r2, r2, r3
 8019250:	464b      	mov	r3, r9
 8019252:	4621      	mov	r1, r4
 8019254:	fb01 f303 	mul.w	r3, r1, r3
 8019258:	4413      	add	r3, r2
 801925a:	4622      	mov	r2, r4
 801925c:	4641      	mov	r1, r8
 801925e:	fba2 1201 	umull	r1, r2, r2, r1
 8019262:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8019266:	460a      	mov	r2, r1
 8019268:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801926c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8019270:	4413      	add	r3, r2
 8019272:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8019276:	f04f 0200 	mov.w	r2, #0
 801927a:	f04f 0300 	mov.w	r3, #0
 801927e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8019282:	4621      	mov	r1, r4
 8019284:	09ca      	lsrs	r2, r1, #7
 8019286:	4629      	mov	r1, r5
 8019288:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801928c:	4629      	mov	r1, r5
 801928e:	11cb      	asrs	r3, r1, #7
 8019290:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8019294:	4621      	mov	r1, r4
 8019296:	1889      	adds	r1, r1, r2
 8019298:	66b9      	str	r1, [r7, #104]	; 0x68
 801929a:	4629      	mov	r1, r5
 801929c:	eb43 0101 	adc.w	r1, r3, r1
 80192a0:	66f9      	str	r1, [r7, #108]	; 0x6c
 80192a2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80192a6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 80192aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80192ae:	895b      	ldrh	r3, [r3, #10]
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	2200      	movs	r2, #0
 80192b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80192b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80192bc:	f04f 0000 	mov.w	r0, #0
 80192c0:	f04f 0100 	mov.w	r1, #0
 80192c4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80192c8:	462b      	mov	r3, r5
 80192ca:	03d9      	lsls	r1, r3, #15
 80192cc:	4623      	mov	r3, r4
 80192ce:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 80192d2:	4623      	mov	r3, r4
 80192d4:	03d8      	lsls	r0, r3, #15
 80192d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80192da:	89db      	ldrh	r3, [r3, #14]
 80192dc:	b29b      	uxth	r3, r3
 80192de:	2200      	movs	r2, #0
 80192e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80192e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80192e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80192ec:	17da      	asrs	r2, r3, #31
 80192ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80192f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80192f6:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 80192fa:	464b      	mov	r3, r9
 80192fc:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 8019300:	4652      	mov	r2, sl
 8019302:	fb02 f203 	mul.w	r2, r2, r3
 8019306:	465b      	mov	r3, fp
 8019308:	4644      	mov	r4, r8
 801930a:	fb04 f303 	mul.w	r3, r4, r3
 801930e:	4413      	add	r3, r2
 8019310:	4642      	mov	r2, r8
 8019312:	4654      	mov	r4, sl
 8019314:	fba2 4204 	umull	r4, r2, r2, r4
 8019318:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801931c:	4622      	mov	r2, r4
 801931e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8019322:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8019326:	4413      	add	r3, r2
 8019328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801932c:	f04f 0200 	mov.w	r2, #0
 8019330:	f04f 0300 	mov.w	r3, #0
 8019334:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8019338:	4644      	mov	r4, r8
 801933a:	0a22      	lsrs	r2, r4, #8
 801933c:	464c      	mov	r4, r9
 801933e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8019342:	464c      	mov	r4, r9
 8019344:	1223      	asrs	r3, r4, #8
 8019346:	1884      	adds	r4, r0, r2
 8019348:	663c      	str	r4, [r7, #96]	; 0x60
 801934a:	eb41 0303 	adc.w	r3, r1, r3
 801934e:	667b      	str	r3, [r7, #100]	; 0x64
 8019350:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8019354:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 8019358:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801935c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8019360:	f173 0300 	sbcs.w	r3, r3, #0
 8019364:	f280 8150 	bge.w	8019608 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 8019368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801936c:	17da      	asrs	r2, r3, #31
 801936e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801937a:	17da      	asrs	r2, r3, #31
 801937c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019380:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8019384:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8019388:	462b      	mov	r3, r5
 801938a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801938e:	4642      	mov	r2, r8
 8019390:	fb02 f203 	mul.w	r2, r2, r3
 8019394:	464b      	mov	r3, r9
 8019396:	4621      	mov	r1, r4
 8019398:	fb01 f303 	mul.w	r3, r1, r3
 801939c:	4413      	add	r3, r2
 801939e:	4622      	mov	r2, r4
 80193a0:	4641      	mov	r1, r8
 80193a2:	fba2 1201 	umull	r1, r2, r2, r1
 80193a6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80193aa:	460a      	mov	r2, r1
 80193ac:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80193b0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80193b4:	4413      	add	r3, r2
 80193b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80193ba:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80193be:	2b00      	cmp	r3, #0
 80193c0:	da08      	bge.n	80193d4 <_calcurateBarometric+0x250>
 80193c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80193c6:	1851      	adds	r1, r2, r1
 80193c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80193ca:	f143 0300 	adc.w	r3, r3, #0
 80193ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80193d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80193d4:	f04f 0000 	mov.w	r0, #0
 80193d8:	f04f 0100 	mov.w	r1, #0
 80193dc:	0fd0      	lsrs	r0, r2, #31
 80193de:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80193e2:	17d9      	asrs	r1, r3, #31
 80193e4:	2300      	movs	r3, #0
 80193e6:	4242      	negs	r2, r0
 80193e8:	653a      	str	r2, [r7, #80]	; 0x50
 80193ea:	eb63 0301 	sbc.w	r3, r3, r1
 80193ee:	657b      	str	r3, [r7, #84]	; 0x54
 80193f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80193f4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80193f8:	1814      	adds	r4, r2, r0
 80193fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80193fc:	414b      	adcs	r3, r1
 80193fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019400:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8019404:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 8019408:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801940c:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8019410:	6439      	str	r1, [r7, #64]	; 0x40
 8019412:	f143 33ff 	adc.w	r3, r3, #4294967295
 8019416:	647b      	str	r3, [r7, #68]	; 0x44
 8019418:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801941c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 8019420:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019424:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019428:	fb03 f102 	mul.w	r1, r3, r2
 801942c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019430:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019434:	fb02 f303 	mul.w	r3, r2, r3
 8019438:	18ca      	adds	r2, r1, r3
 801943a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801943e:	fba3 1303 	umull	r1, r3, r3, r3
 8019442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019446:	460b      	mov	r3, r1
 8019448:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801944c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8019450:	18d3      	adds	r3, r2, r3
 8019452:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8019456:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 801945a:	4622      	mov	r2, r4
 801945c:	462b      	mov	r3, r5
 801945e:	f04f 0000 	mov.w	r0, #0
 8019462:	f04f 0100 	mov.w	r1, #0
 8019466:	0099      	lsls	r1, r3, #2
 8019468:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801946c:	0090      	lsls	r0, r2, #2
 801946e:	4602      	mov	r2, r0
 8019470:	460b      	mov	r3, r1
 8019472:	4621      	mov	r1, r4
 8019474:	1851      	adds	r1, r2, r1
 8019476:	63b9      	str	r1, [r7, #56]	; 0x38
 8019478:	4629      	mov	r1, r5
 801947a:	eb43 0101 	adc.w	r1, r3, r1
 801947e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019480:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8019484:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 8019488:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801948c:	f04f 0000 	mov.w	r0, #0
 8019490:	f04f 0100 	mov.w	r1, #0
 8019494:	0850      	lsrs	r0, r2, #1
 8019496:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801949a:	1059      	asrs	r1, r3, #1
 801949c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80194a0:	1a14      	subs	r4, r2, r0
 80194a2:	633c      	str	r4, [r7, #48]	; 0x30
 80194a4:	eb63 0301 	sbc.w	r3, r3, r1
 80194a8:	637b      	str	r3, [r7, #52]	; 0x34
 80194aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80194ae:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 80194b2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80194b6:	f04f 0000 	mov.w	r0, #0
 80194ba:	f04f 0100 	mov.w	r1, #0
 80194be:	0890      	lsrs	r0, r2, #2
 80194c0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80194c4:	1099      	asrs	r1, r3, #2
 80194c6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80194ca:	1a14      	subs	r4, r2, r0
 80194cc:	62bc      	str	r4, [r7, #40]	; 0x28
 80194ce:	eb63 0301 	sbc.w	r3, r3, r1
 80194d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194d4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80194d8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 80194dc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80194e0:	4979      	ldr	r1, [pc, #484]	; (80196c8 <_calcurateBarometric+0x544>)
 80194e2:	428a      	cmp	r2, r1
 80194e4:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80194e8:	f280 808e 	bge.w	8019608 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 80194ec:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80194f0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80194f4:	1851      	adds	r1, r2, r1
 80194f6:	6239      	str	r1, [r7, #32]
 80194f8:	f143 0300 	adc.w	r3, r3, #0
 80194fc:	627b      	str	r3, [r7, #36]	; 0x24
 80194fe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8019502:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 8019506:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801950a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801950e:	fb03 f102 	mul.w	r1, r3, r2
 8019512:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8019516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801951a:	fb02 f303 	mul.w	r3, r2, r3
 801951e:	18ca      	adds	r2, r1, r3
 8019520:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8019524:	fba3 1303 	umull	r1, r3, r3, r3
 8019528:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801952c:	460b      	mov	r3, r1
 801952e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8019532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019536:	18d3      	adds	r3, r2, r3
 8019538:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801953c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8019540:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8019544:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 8019548:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801954c:	4614      	mov	r4, r2
 801954e:	461d      	mov	r5, r3
 8019550:	f04f 0000 	mov.w	r0, #0
 8019554:	f04f 0100 	mov.w	r1, #0
 8019558:	00d9      	lsls	r1, r3, #3
 801955a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801955e:	00d0      	lsls	r0, r2, #3
 8019560:	1a23      	subs	r3, r4, r0
 8019562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019566:	eb65 0301 	sbc.w	r3, r5, r1
 801956a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801956e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8019572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8019576:	4621      	mov	r1, r4
 8019578:	1851      	adds	r1, r2, r1
 801957a:	61b9      	str	r1, [r7, #24]
 801957c:	4629      	mov	r1, r5
 801957e:	eb43 0101 	adc.w	r1, r3, r1
 8019582:	61f9      	str	r1, [r7, #28]
 8019584:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8019588:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801958c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8019590:	4602      	mov	r2, r0
 8019592:	460b      	mov	r3, r1
 8019594:	1894      	adds	r4, r2, r2
 8019596:	613c      	str	r4, [r7, #16]
 8019598:	415b      	adcs	r3, r3
 801959a:	617b      	str	r3, [r7, #20]
 801959c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80195a0:	1814      	adds	r4, r2, r0
 80195a2:	60bc      	str	r4, [r7, #8]
 80195a4:	414b      	adcs	r3, r1
 80195a6:	60fb      	str	r3, [r7, #12]
 80195a8:	f04f 0200 	mov.w	r2, #0
 80195ac:	f04f 0300 	mov.w	r3, #0
 80195b0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80195b4:	464c      	mov	r4, r9
 80195b6:	00a3      	lsls	r3, r4, #2
 80195b8:	4644      	mov	r4, r8
 80195ba:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80195be:	4644      	mov	r4, r8
 80195c0:	00a2      	lsls	r2, r4, #2
 80195c2:	4614      	mov	r4, r2
 80195c4:	461d      	mov	r5, r3
 80195c6:	4623      	mov	r3, r4
 80195c8:	1a1b      	subs	r3, r3, r0
 80195ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80195ce:	462b      	mov	r3, r5
 80195d0:	eb63 0301 	sbc.w	r3, r3, r1
 80195d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80195d8:	f04f 0200 	mov.w	r2, #0
 80195dc:	f04f 0300 	mov.w	r3, #0
 80195e0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80195e4:	4621      	mov	r1, r4
 80195e6:	084a      	lsrs	r2, r1, #1
 80195e8:	4629      	mov	r1, r5
 80195ea:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80195ee:	4629      	mov	r1, r5
 80195f0:	104b      	asrs	r3, r1, #1
 80195f2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80195f6:	1a84      	subs	r4, r0, r2
 80195f8:	603c      	str	r4, [r7, #0]
 80195fa:	eb61 0303 	sbc.w	r3, r1, r3
 80195fe:	607b      	str	r3, [r7, #4]
 8019600:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019604:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100;
 8019608:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801960c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8019610:	f04f 0300 	mov.w	r3, #0
 8019614:	f7e7 fbee 	bl	8000df4 <__aeabi_ldivmod>
 8019618:	4602      	mov	r2, r0
 801961a:	460b      	mov	r3, r1
 801961c:	4610      	mov	r0, r2
 801961e:	4619      	mov	r1, r3
 8019620:	f7e7 fbaa 	bl	8000d78 <__aeabi_l2f>
 8019624:	4602      	mov	r2, r0
 8019626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801962a:	601a      	str	r2, [r3, #0]
	*p_pressure = ((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15;
 801962c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8019630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019632:	2200      	movs	r2, #0
 8019634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019638:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801963c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8019640:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8019644:	462a      	mov	r2, r5
 8019646:	fb02 f203 	mul.w	r2, r2, r3
 801964a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801964e:	4621      	mov	r1, r4
 8019650:	fb01 f303 	mul.w	r3, r1, r3
 8019654:	4413      	add	r3, r2
 8019656:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801965a:	4621      	mov	r1, r4
 801965c:	fba2 1201 	umull	r1, r2, r2, r1
 8019660:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8019664:	460a      	mov	r2, r1
 8019666:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801966a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801966e:	4413      	add	r3, r2
 8019670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8019674:	f04f 0200 	mov.w	r2, #0
 8019678:	f04f 0300 	mov.w	r3, #0
 801967c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8019680:	4621      	mov	r1, r4
 8019682:	0d4a      	lsrs	r2, r1, #21
 8019684:	4629      	mov	r1, r5
 8019686:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801968a:	4629      	mov	r1, r5
 801968c:	154b      	asrs	r3, r1, #21
 801968e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8019692:	1a14      	subs	r4, r2, r0
 8019694:	67bc      	str	r4, [r7, #120]	; 0x78
 8019696:	eb63 0301 	sbc.w	r3, r3, r1
 801969a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801969c:	f04f 0200 	mov.w	r2, #0
 80196a0:	f04f 0300 	mov.w	r3, #0
 80196a4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80196a8:	4621      	mov	r1, r4
 80196aa:	0bca      	lsrs	r2, r1, #15
 80196ac:	4629      	mov	r1, r5
 80196ae:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80196b2:	4629      	mov	r1, r5
 80196b4:	13cb      	asrs	r3, r1, #15
 80196b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80196ba:	601a      	str	r2, [r3, #0]
}
 80196bc:	bf00      	nop
 80196be:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80196c2:	46bd      	mov	sp, r7
 80196c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80196c8:	fffffa24 	.word	0xfffffa24

080196cc <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b08a      	sub	sp, #40	; 0x28
 80196d0:	af02      	add	r7, sp, #8
 80196d2:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	68db      	ldr	r3, [r3, #12]
 80196d8:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 80196da:	2301      	movs	r3, #1
 80196dc:	83fb      	strh	r3, [r7, #30]
	static uint32_t start_time;
	int32_t pressure;
	float temperature;

	switch (p_owner->__state) {
 80196de:	69bb      	ldr	r3, [r7, #24]
 80196e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80196e4:	3b01      	subs	r3, #1
 80196e6:	2b04      	cmp	r3, #4
 80196e8:	f200 80b1 	bhi.w	801984e <_doTask+0x182>
 80196ec:	a201      	add	r2, pc, #4	; (adr r2, 80196f4 <_doTask+0x28>)
 80196ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196f2:	bf00      	nop
 80196f4:	08019709 	.word	0x08019709
 80196f8:	0801974b 	.word	0x0801974b
 80196fc:	08019781 	.word	0x08019781
 8019700:	080197bb 	.word	0x080197bb
 8019704:	080197f1 	.word	0x080197f1
	case MS5611_STATE_TEMPERATURE_START:
		start_time = pif_cumulative_timer1ms;
 8019708:	4b54      	ldr	r3, [pc, #336]	; (801985c <_doTask+0x190>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	4a54      	ldr	r2, [pc, #336]	; (8019860 <_doTask+0x194>)
 801970e:	6013      	str	r3, [r2, #0]
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 8019710:	69bb      	ldr	r3, [r7, #24]
 8019712:	8b1b      	ldrh	r3, [r3, #24]
 8019714:	b2db      	uxtb	r3, r3
 8019716:	3350      	adds	r3, #80	; 0x50
 8019718:	b2db      	uxtb	r3, r3
 801971a:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 801971c:	69bb      	ldr	r3, [r7, #24]
 801971e:	6858      	ldr	r0, [r3, #4]
 8019720:	f107 0314 	add.w	r3, r7, #20
 8019724:	2201      	movs	r2, #1
 8019726:	9200      	str	r2, [sp, #0]
 8019728:	2200      	movs	r2, #0
 801972a:	2100      	movs	r1, #0
 801972c:	f7f8 ffdc 	bl	80126e8 <pifI2cDevice_Write>
 8019730:	4603      	mov	r3, r0
 8019732:	2b00      	cmp	r3, #0
 8019734:	d101      	bne.n	801973a <_doTask+0x6e>
 8019736:	2301      	movs	r3, #1
 8019738:	e08b      	b.n	8019852 <_doTask+0x186>
		p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	2202      	movs	r2, #2
 801973e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 8019742:	69bb      	ldr	r3, [r7, #24]
 8019744:	7e9b      	ldrb	r3, [r3, #26]
 8019746:	83fb      	strh	r3, [r7, #30]
		break;
 8019748:	e082      	b.n	8019850 <_doTask+0x184>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 801974a:	69bb      	ldr	r3, [r7, #24]
 801974c:	6858      	ldr	r0, [r3, #4]
 801974e:	f107 0214 	add.w	r2, r7, #20
 8019752:	2303      	movs	r3, #3
 8019754:	2100      	movs	r1, #0
 8019756:	f7f8 ff7d 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 801975a:	4603      	mov	r3, r0
 801975c:	2b00      	cmp	r3, #0
 801975e:	d101      	bne.n	8019764 <_doTask+0x98>
 8019760:	2301      	movs	r3, #1
 8019762:	e076      	b.n	8019852 <_doTask+0x186>
		p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 8019764:	7d3b      	ldrb	r3, [r7, #20]
 8019766:	041b      	lsls	r3, r3, #16
 8019768:	7d7a      	ldrb	r2, [r7, #21]
 801976a:	0212      	lsls	r2, r2, #8
 801976c:	4413      	add	r3, r2
 801976e:	7dba      	ldrb	r2, [r7, #22]
 8019770:	441a      	add	r2, r3
 8019772:	69bb      	ldr	r3, [r7, #24]
 8019774:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__state = MS5611_STATE_PRESSURE_START;
 8019776:	69bb      	ldr	r3, [r7, #24]
 8019778:	2203      	movs	r2, #3
 801977a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801977e:	e067      	b.n	8019850 <_doTask+0x184>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 8019780:	69bb      	ldr	r3, [r7, #24]
 8019782:	8b1b      	ldrh	r3, [r3, #24]
 8019784:	b2db      	uxtb	r3, r3
 8019786:	3340      	adds	r3, #64	; 0x40
 8019788:	b2db      	uxtb	r3, r3
 801978a:	753b      	strb	r3, [r7, #20]
		if (!pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) return 1;
 801978c:	69bb      	ldr	r3, [r7, #24]
 801978e:	6858      	ldr	r0, [r3, #4]
 8019790:	f107 0314 	add.w	r3, r7, #20
 8019794:	2201      	movs	r2, #1
 8019796:	9200      	str	r2, [sp, #0]
 8019798:	2200      	movs	r2, #0
 801979a:	2100      	movs	r1, #0
 801979c:	f7f8 ffa4 	bl	80126e8 <pifI2cDevice_Write>
 80197a0:	4603      	mov	r3, r0
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d101      	bne.n	80197aa <_doTask+0xde>
 80197a6:	2301      	movs	r3, #1
 80197a8:	e053      	b.n	8019852 <_doTask+0x186>
		p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 80197aa:	69bb      	ldr	r3, [r7, #24]
 80197ac:	2204      	movs	r2, #4
 80197ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		delay = p_owner->_conversion_time;
 80197b2:	69bb      	ldr	r3, [r7, #24]
 80197b4:	7e9b      	ldrb	r3, [r3, #26]
 80197b6:	83fb      	strh	r3, [r7, #30]
		break;
 80197b8:	e04a      	b.n	8019850 <_doTask+0x184>

	case MS5611_STATE_PRESSURE_WAIT:
		if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) return 1;
 80197ba:	69bb      	ldr	r3, [r7, #24]
 80197bc:	6858      	ldr	r0, [r3, #4]
 80197be:	f107 0214 	add.w	r2, r7, #20
 80197c2:	2303      	movs	r3, #3
 80197c4:	2100      	movs	r1, #0
 80197c6:	f7f8 ff45 	bl	8012654 <pifI2cDevice_ReadRegBytes>
 80197ca:	4603      	mov	r3, r0
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d101      	bne.n	80197d4 <_doTask+0x108>
 80197d0:	2301      	movs	r3, #1
 80197d2:	e03e      	b.n	8019852 <_doTask+0x186>
		p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 80197d4:	7d3b      	ldrb	r3, [r7, #20]
 80197d6:	041b      	lsls	r3, r3, #16
 80197d8:	7d7a      	ldrb	r2, [r7, #21]
 80197da:	0212      	lsls	r2, r2, #8
 80197dc:	4413      	add	r3, r2
 80197de:	7dba      	ldrb	r2, [r7, #22]
 80197e0:	441a      	add	r2, r3
 80197e2:	69bb      	ldr	r3, [r7, #24]
 80197e4:	625a      	str	r2, [r3, #36]	; 0x24
		p_owner->__state = MS5611_STATE_CALCURATE;
 80197e6:	69bb      	ldr	r3, [r7, #24]
 80197e8:	2205      	movs	r2, #5
 80197ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 80197ee:	e02f      	b.n	8019850 <_doTask+0x184>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 80197f0:	f107 020c 	add.w	r2, r7, #12
 80197f4:	f107 0310 	add.w	r3, r7, #16
 80197f8:	4619      	mov	r1, r3
 80197fa:	69b8      	ldr	r0, [r7, #24]
 80197fc:	f7ff fcc2 	bl	8019184 <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 8019800:	69bb      	ldr	r3, [r7, #24]
 8019802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019804:	2b00      	cmp	r3, #0
 8019806:	d008      	beq.n	801981a <_doTask+0x14e>
 8019808:	69bb      	ldr	r3, [r7, #24]
 801980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801980c:	693a      	ldr	r2, [r7, #16]
 801980e:	edd7 7a03 	vldr	s15, [r7, #12]
 8019812:	eeb0 0a67 	vmov.f32	s0, s15
 8019816:	4610      	mov	r0, r2
 8019818:	4798      	blx	r3
		if (pif_cumulative_timer1ms - start_time < p_owner->__read_period) {
 801981a:	4b10      	ldr	r3, [pc, #64]	; (801985c <_doTask+0x190>)
 801981c:	681a      	ldr	r2, [r3, #0]
 801981e:	4b10      	ldr	r3, [pc, #64]	; (8019860 <_doTask+0x194>)
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	1ad3      	subs	r3, r2, r3
 8019824:	69ba      	ldr	r2, [r7, #24]
 8019826:	8c12      	ldrh	r2, [r2, #32]
 8019828:	4293      	cmp	r3, r2
 801982a:	d20b      	bcs.n	8019844 <_doTask+0x178>
			delay = p_owner->__read_period - (pif_cumulative_timer1ms - start_time);
 801982c:	69bb      	ldr	r3, [r7, #24]
 801982e:	8c1a      	ldrh	r2, [r3, #32]
 8019830:	4b0b      	ldr	r3, [pc, #44]	; (8019860 <_doTask+0x194>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	b299      	uxth	r1, r3
 8019836:	4b09      	ldr	r3, [pc, #36]	; (801985c <_doTask+0x190>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	b29b      	uxth	r3, r3
 801983c:	1acb      	subs	r3, r1, r3
 801983e:	b29b      	uxth	r3, r3
 8019840:	4413      	add	r3, r2
 8019842:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 8019844:	69bb      	ldr	r3, [r7, #24]
 8019846:	2201      	movs	r2, #1
 8019848:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801984c:	e000      	b.n	8019850 <_doTask+0x184>

	default:
		break;
 801984e:	bf00      	nop
	}
	return delay;
 8019850:	8bfb      	ldrh	r3, [r7, #30]
}
 8019852:	4618      	mov	r0, r3
 8019854:	3720      	adds	r7, #32
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
 801985a:	bf00      	nop
 801985c:	200020d8 	.word	0x200020d8
 8019860:	20002274 	.word	0x20002274

08019864 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 8019864:	b580      	push	{r7, lr}
 8019866:	b086      	sub	sp, #24
 8019868:	af00      	add	r7, sp, #0
 801986a:	60f8      	str	r0, [r7, #12]
 801986c:	607a      	str	r2, [r7, #4]
 801986e:	461a      	mov	r2, r3
 8019870:	460b      	mov	r3, r1
 8019872:	817b      	strh	r3, [r7, #10]
 8019874:	4613      	mov	r3, r2
 8019876:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d002      	beq.n	8019884 <pifMs5611_Init+0x20>
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d104      	bne.n	801988e <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 8019884:	4b33      	ldr	r3, [pc, #204]	; (8019954 <pifMs5611_Init+0xf0>)
 8019886:	2201      	movs	r2, #1
 8019888:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801988a:	2300      	movs	r3, #0
 801988c:	e05e      	b.n	801994c <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801988e:	2230      	movs	r2, #48	; 0x30
 8019890:	2100      	movs	r1, #0
 8019892:	68f8      	ldr	r0, [r7, #12]
 8019894:	f008 fb32 	bl	8021efc <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f7f8 fdbf 	bl	801241c <pifI2cPort_AddDevice>
 801989e:	4602      	mov	r2, r0
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	685b      	ldr	r3, [r3, #4]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d101      	bne.n	80198b0 <pifMs5611_Init+0x4c>
 80198ac:	2300      	movs	r3, #0
 80198ae:	e04d      	b.n	801994c <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	685b      	ldr	r3, [r3, #4]
 80198b4:	7a7a      	ldrb	r2, [r7, #9]
 80198b6:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	685b      	ldr	r3, [r3, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	211e      	movs	r1, #30
 80198c0:	4618      	mov	r0, r3
 80198c2:	f7f8 ffbd 	bl	8012840 <pifI2cDevice_WriteRegByte>
 80198c6:	4603      	mov	r3, r0
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d036      	beq.n	801993a <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 80198cc:	2064      	movs	r0, #100	; 0x64
 80198ce:	f7fb f9cb 	bl	8014c68 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 80198d2:	2300      	movs	r3, #0
 80198d4:	617b      	str	r3, [r7, #20]
 80198d6:	e014      	b.n	8019902 <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	6858      	ldr	r0, [r3, #4]
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	3350      	adds	r3, #80	; 0x50
 80198e0:	b2db      	uxtb	r3, r3
 80198e2:	005b      	lsls	r3, r3, #1
 80198e4:	b2d9      	uxtb	r1, r3
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	3304      	adds	r3, #4
 80198ea:	005b      	lsls	r3, r3, #1
 80198ec:	68fa      	ldr	r2, [r7, #12]
 80198ee:	4413      	add	r3, r2
 80198f0:	461a      	mov	r2, r3
 80198f2:	f7f8 fe8b 	bl	801260c <pifI2cDevice_ReadRegWord>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d020      	beq.n	801993e <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 80198fc:	697b      	ldr	r3, [r7, #20]
 80198fe:	3301      	adds	r3, #1
 8019900:	617b      	str	r3, [r7, #20]
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	2b07      	cmp	r3, #7
 8019906:	dde7      	ble.n	80198d8 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 8019908:	68f8      	ldr	r0, [r7, #12]
 801990a:	f7ff fbbd 	bl	8019088 <_checkPromCrc>
 801990e:	4603      	mov	r3, r0
 8019910:	2b00      	cmp	r3, #0
 8019912:	d016      	beq.n	8019942 <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 8019914:	2104      	movs	r1, #4
 8019916:	68f8      	ldr	r0, [r7, #12]
 8019918:	f000 f844 	bl	80199a4 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801991c:	897b      	ldrh	r3, [r7, #10]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d106      	bne.n	8019930 <pifMs5611_Init+0xcc>
 8019922:	4b0d      	ldr	r3, [pc, #52]	; (8019958 <pifMs5611_Init+0xf4>)
 8019924:	881b      	ldrh	r3, [r3, #0]
 8019926:	1c5a      	adds	r2, r3, #1
 8019928:	b291      	uxth	r1, r2
 801992a:	4a0b      	ldr	r2, [pc, #44]	; (8019958 <pifMs5611_Init+0xf4>)
 801992c:	8011      	strh	r1, [r2, #0]
 801992e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	897a      	ldrh	r2, [r7, #10]
 8019934:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8019936:	2301      	movs	r3, #1
 8019938:	e008      	b.n	801994c <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801993a:	bf00      	nop
 801993c:	e002      	b.n	8019944 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801993e:	bf00      	nop
 8019940:	e000      	b.n	8019944 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 8019942:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 8019944:	68f8      	ldr	r0, [r7, #12]
 8019946:	f000 f809 	bl	801995c <pifMs5611_Clear>
	return FALSE;
 801994a:	2300      	movs	r3, #0
}
 801994c:	4618      	mov	r0, r3
 801994e:	3718      	adds	r7, #24
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}
 8019954:	200020c9 	.word	0x200020c9
 8019958:	2000005c 	.word	0x2000005c

0801995c <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b082      	sub	sp, #8
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	69db      	ldr	r3, [r3, #28]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d007      	beq.n	801997c <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	69db      	ldr	r3, [r3, #28]
 8019970:	4618      	mov	r0, r3
 8019972:	f7fb f819 	bl	80149a8 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	2200      	movs	r2, #0
 801997a:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	685b      	ldr	r3, [r3, #4]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d00b      	beq.n	801999c <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	685b      	ldr	r3, [r3, #4]
 8019988:	685a      	ldr	r2, [r3, #4]
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	685b      	ldr	r3, [r3, #4]
 801998e:	4619      	mov	r1, r3
 8019990:	4610      	mov	r0, r2
 8019992:	f7f8 fd67 	bl	8012464 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	2200      	movs	r2, #0
 801999a:	605a      	str	r2, [r3, #4]
	}
}
 801999c:	bf00      	nop
 801999e:	3708      	adds	r7, #8
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}

080199a4 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 80199a4:	b480      	push	{r7}
 80199a6:	b083      	sub	sp, #12
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
 80199ac:	460b      	mov	r3, r1
 80199ae:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	887a      	ldrh	r2, [r7, #2]
 80199b4:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 80199b6:	887b      	ldrh	r3, [r7, #2]
 80199b8:	2b08      	cmp	r3, #8
 80199ba:	d829      	bhi.n	8019a10 <pifMs5611_SetOverSamplingRate+0x6c>
 80199bc:	a201      	add	r2, pc, #4	; (adr r2, 80199c4 <pifMs5611_SetOverSamplingRate+0x20>)
 80199be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199c2:	bf00      	nop
 80199c4:	080199e9 	.word	0x080199e9
 80199c8:	08019a11 	.word	0x08019a11
 80199cc:	080199f1 	.word	0x080199f1
 80199d0:	08019a11 	.word	0x08019a11
 80199d4:	080199f9 	.word	0x080199f9
 80199d8:	08019a11 	.word	0x08019a11
 80199dc:	08019a01 	.word	0x08019a01
 80199e0:	08019a11 	.word	0x08019a11
 80199e4:	08019a09 	.word	0x08019a09
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	2202      	movs	r2, #2
 80199ec:	769a      	strb	r2, [r3, #26]
 80199ee:	e00f      	b.n	8019a10 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	2203      	movs	r2, #3
 80199f4:	769a      	strb	r2, [r3, #26]
 80199f6:	e00b      	b.n	8019a10 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	2204      	movs	r2, #4
 80199fc:	769a      	strb	r2, [r3, #26]
 80199fe:	e007      	b.n	8019a10 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	2206      	movs	r2, #6
 8019a04:	769a      	strb	r2, [r3, #26]
 8019a06:	e003      	b.n	8019a10 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	220b      	movs	r2, #11
 8019a0c:	769a      	strb	r2, [r3, #26]
 8019a0e:	bf00      	nop
	}
}
 8019a10:	bf00      	nop
 8019a12:	370c      	adds	r7, #12
 8019a14:	46bd      	mov	sp, r7
 8019a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1a:	4770      	bx	lr

08019a1c <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtMs5611Read evt_read)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b086      	sub	sp, #24
 8019a20:	af02      	add	r7, sp, #8
 8019a22:	60f8      	str	r0, [r7, #12]
 8019a24:	460b      	mov	r3, r1
 8019a26:	607a      	str	r2, [r7, #4]
 8019a28:	817b      	strh	r3, [r7, #10]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 10, _doTask, p_owner, FALSE);
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	9300      	str	r3, [sp, #0]
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	4a0e      	ldr	r2, [pc, #56]	; (8019a6c <pifMs5611_AddTaskForReading+0x50>)
 8019a32:	210a      	movs	r1, #10
 8019a34:	2004      	movs	r0, #4
 8019a36:	f7fa ff53 	bl	80148e0 <pifTaskManager_Add>
 8019a3a:	4602      	mov	r2, r0
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	69db      	ldr	r3, [r3, #28]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d101      	bne.n	8019a4c <pifMs5611_AddTaskForReading+0x30>
 8019a48:	2300      	movs	r3, #0
 8019a4a:	e00a      	b.n	8019a62 <pifMs5611_AddTaskForReading+0x46>

    p_owner->__read_period = read_period;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	897a      	ldrh	r2, [r7, #10]
 8019a50:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	687a      	ldr	r2, [r7, #4]
 8019a56:	62da      	str	r2, [r3, #44]	; 0x2c
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	2201      	movs	r2, #1
 8019a5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 8019a60:	2301      	movs	r3, #1
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3710      	adds	r7, #16
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}
 8019a6a:	bf00      	nop
 8019a6c:	080196cd 	.word	0x080196cd

08019a70 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b086      	sub	sp, #24
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	68db      	ldr	r3, [r3, #12]
 8019a7c:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 8019a7e:	2300      	movs	r3, #0
 8019a80:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 8019a82:	693b      	ldr	r3, [r7, #16]
 8019a84:	691b      	ldr	r3, [r3, #16]
 8019a86:	693a      	ldr	r2, [r7, #16]
 8019a88:	7d12      	ldrb	r2, [r2, #20]
 8019a8a:	4413      	add	r3, r2
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	7b1b      	ldrb	r3, [r3, #12]
 8019a94:	3b01      	subs	r3, #1
 8019a96:	2b03      	cmp	r3, #3
 8019a98:	d87f      	bhi.n	8019b9a <_doTask+0x12a>
 8019a9a:	a201      	add	r2, pc, #4	; (adr r2, 8019aa0 <_doTask+0x30>)
 8019a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019aa0:	08019ab1 	.word	0x08019ab1
 8019aa4:	08019ad3 	.word	0x08019ad3
 8019aa8:	08019af5 	.word	0x08019af5
 8019aac:	08019b67 	.word	0x08019b67
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 8019ab0:	693b      	ldr	r3, [r7, #16]
 8019ab2:	699b      	ldr	r3, [r3, #24]
 8019ab4:	693a      	ldr	r2, [r7, #16]
 8019ab6:	8892      	ldrh	r2, [r2, #4]
 8019ab8:	2101      	movs	r1, #1
 8019aba:	4610      	mov	r0, r2
 8019abc:	4798      	blx	r3
		p_owner->__pos++;
 8019abe:	693b      	ldr	r3, [r7, #16]
 8019ac0:	7d1b      	ldrb	r3, [r3, #20]
 8019ac2:	3301      	adds	r3, #1
 8019ac4:	b2da      	uxtb	r2, r3
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	2202      	movs	r2, #2
 8019ace:	731a      	strb	r2, [r3, #12]
		break;
 8019ad0:	e064      	b.n	8019b9c <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 8019ad2:	693b      	ldr	r3, [r7, #16]
 8019ad4:	699b      	ldr	r3, [r3, #24]
 8019ad6:	693a      	ldr	r2, [r7, #16]
 8019ad8:	8892      	ldrh	r2, [r2, #4]
 8019ada:	2100      	movs	r1, #0
 8019adc:	4610      	mov	r0, r2
 8019ade:	4798      	blx	r3
		p_owner->__pos++;
 8019ae0:	693b      	ldr	r3, [r7, #16]
 8019ae2:	7d1b      	ldrb	r3, [r3, #20]
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	b2da      	uxtb	r2, r3
 8019ae8:	693b      	ldr	r3, [r7, #16]
 8019aea:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 8019aec:	693b      	ldr	r3, [r7, #16]
 8019aee:	2203      	movs	r2, #3
 8019af0:	731a      	strb	r2, [r3, #12]
		break;
 8019af2:	e053      	b.n	8019b9c <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 8019af4:	89fb      	ldrh	r3, [r7, #14]
 8019af6:	2bef      	cmp	r3, #239	; 0xef
 8019af8:	d810      	bhi.n	8019b1c <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 8019afa:	693b      	ldr	r3, [r7, #16]
 8019afc:	699b      	ldr	r3, [r3, #24]
 8019afe:	693a      	ldr	r2, [r7, #16]
 8019b00:	8892      	ldrh	r2, [r2, #4]
 8019b02:	2101      	movs	r1, #1
 8019b04:	4610      	mov	r0, r2
 8019b06:	4798      	blx	r3
			p_owner->__pos++;
 8019b08:	693b      	ldr	r3, [r7, #16]
 8019b0a:	7d1b      	ldrb	r3, [r3, #20]
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	b2da      	uxtb	r2, r3
 8019b10:	693b      	ldr	r3, [r7, #16]
 8019b12:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 8019b14:	693b      	ldr	r3, [r7, #16]
 8019b16:	2202      	movs	r2, #2
 8019b18:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 8019b1a:	e03f      	b.n	8019b9c <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 8019b1c:	89fb      	ldrh	r3, [r7, #14]
 8019b1e:	2bf0      	cmp	r3, #240	; 0xf0
 8019b20:	d105      	bne.n	8019b2e <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 8019b22:	693b      	ldr	r3, [r7, #16]
 8019b24:	2204      	movs	r2, #4
 8019b26:	731a      	strb	r2, [r3, #12]
			delay = 1;
 8019b28:	2301      	movs	r3, #1
 8019b2a:	82fb      	strh	r3, [r7, #22]
		break;
 8019b2c:	e036      	b.n	8019b9c <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 8019b2e:	89fb      	ldrh	r3, [r7, #14]
 8019b30:	b2db      	uxtb	r3, r3
 8019b32:	3310      	adds	r3, #16
 8019b34:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 8019b36:	693b      	ldr	r3, [r7, #16]
 8019b38:	7d5b      	ldrb	r3, [r3, #21]
 8019b3a:	7b7a      	ldrb	r2, [r7, #13]
 8019b3c:	429a      	cmp	r2, r3
 8019b3e:	d90c      	bls.n	8019b5a <_doTask+0xea>
				p_owner->__pos = 0;
 8019b40:	693b      	ldr	r3, [r7, #16]
 8019b42:	2200      	movs	r2, #0
 8019b44:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 8019b46:	693b      	ldr	r3, [r7, #16]
 8019b48:	7d5b      	ldrb	r3, [r3, #21]
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	b2da      	uxtb	r2, r3
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 8019b52:	693b      	ldr	r3, [r7, #16]
 8019b54:	2201      	movs	r2, #1
 8019b56:	731a      	strb	r2, [r3, #12]
 8019b58:	e002      	b.n	8019b60 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 8019b5a:	693b      	ldr	r3, [r7, #16]
 8019b5c:	2204      	movs	r2, #4
 8019b5e:	731a      	strb	r2, [r3, #12]
			delay = 1;
 8019b60:	2301      	movs	r3, #1
 8019b62:	82fb      	strh	r3, [r7, #22]
		break;
 8019b64:	e01a      	b.n	8019b9c <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 8019b66:	693b      	ldr	r3, [r7, #16]
 8019b68:	699b      	ldr	r3, [r3, #24]
 8019b6a:	693a      	ldr	r2, [r7, #16]
 8019b6c:	8892      	ldrh	r2, [r2, #4]
 8019b6e:	2100      	movs	r1, #0
 8019b70:	4610      	mov	r0, r2
 8019b72:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 8019b74:	693b      	ldr	r3, [r7, #16]
 8019b76:	2200      	movs	r2, #0
 8019b78:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 8019b7a:	693b      	ldr	r3, [r7, #16]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d005      	beq.n	8019b8e <_doTask+0x11e>
 8019b82:	693b      	ldr	r3, [r7, #16]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	693a      	ldr	r2, [r7, #16]
 8019b88:	8892      	ldrh	r2, [r2, #4]
 8019b8a:	4610      	mov	r0, r2
 8019b8c:	4798      	blx	r3
		delay = 1;
 8019b8e:	2301      	movs	r3, #1
 8019b90:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2201      	movs	r2, #1
 8019b96:	701a      	strb	r2, [r3, #0]
		break;
 8019b98:	e000      	b.n	8019b9c <_doTask+0x12c>

	default:
		break;
 8019b9a:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 8019b9c:	8afb      	ldrh	r3, [r7, #22]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d106      	bne.n	8019bb0 <_doTask+0x140>
 8019ba2:	89fb      	ldrh	r3, [r7, #14]
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	0092      	lsls	r2, r2, #2
 8019ba8:	4413      	add	r3, r2
 8019baa:	005b      	lsls	r3, r3, #1
 8019bac:	b29b      	uxth	r3, r3
 8019bae:	e000      	b.n	8019bb2 <_doTask+0x142>
 8019bb0:	8afb      	ldrh	r3, [r7, #22]
}
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	3718      	adds	r7, #24
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	bd80      	pop	{r7, pc}
 8019bba:	bf00      	nop

08019bbc <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b086      	sub	sp, #24
 8019bc0:	af02      	add	r7, sp, #8
 8019bc2:	60f8      	str	r0, [r7, #12]
 8019bc4:	460b      	mov	r3, r1
 8019bc6:	607a      	str	r2, [r7, #4]
 8019bc8:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d002      	beq.n	8019bd6 <pifBuzzer_Init+0x1a>
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d104      	bne.n	8019be0 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 8019bd6:	4b18      	ldr	r3, [pc, #96]	; (8019c38 <pifBuzzer_Init+0x7c>)
 8019bd8:	2201      	movs	r2, #1
 8019bda:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019bdc:	2300      	movs	r3, #0
 8019bde:	e026      	b.n	8019c2e <pifBuzzer_Init+0x72>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 8019be0:	221c      	movs	r2, #28
 8019be2:	2100      	movs	r1, #0
 8019be4:	68f8      	ldr	r0, [r7, #12]
 8019be6:	f008 f989 	bl	8021efc <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 8019bea:	2300      	movs	r3, #0
 8019bec:	9300      	str	r3, [sp, #0]
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	4a12      	ldr	r2, [pc, #72]	; (8019c3c <pifBuzzer_Init+0x80>)
 8019bf2:	2101      	movs	r1, #1
 8019bf4:	2004      	movs	r0, #4
 8019bf6:	f7fa fe73 	bl	80148e0 <pifTaskManager_Add>
 8019bfa:	4602      	mov	r2, r0
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	689b      	ldr	r3, [r3, #8]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d101      	bne.n	8019c0c <pifBuzzer_Init+0x50>
 8019c08:	2300      	movs	r3, #0
 8019c0a:	e010      	b.n	8019c2e <pifBuzzer_Init+0x72>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8019c0c:	897b      	ldrh	r3, [r7, #10]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d106      	bne.n	8019c20 <pifBuzzer_Init+0x64>
 8019c12:	4b0b      	ldr	r3, [pc, #44]	; (8019c40 <pifBuzzer_Init+0x84>)
 8019c14:	881b      	ldrh	r3, [r3, #0]
 8019c16:	1c5a      	adds	r2, r3, #1
 8019c18:	b291      	uxth	r1, r2
 8019c1a:	4a09      	ldr	r2, [pc, #36]	; (8019c40 <pifBuzzer_Init+0x84>)
 8019c1c:	8011      	strh	r1, [r2, #0]
 8019c1e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	897a      	ldrh	r2, [r7, #10]
 8019c24:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	687a      	ldr	r2, [r7, #4]
 8019c2a:	619a      	str	r2, [r3, #24]
    return TRUE;
 8019c2c:	2301      	movs	r3, #1
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	3710      	adds	r7, #16
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}
 8019c36:	bf00      	nop
 8019c38:	200020c9 	.word	0x200020c9
 8019c3c:	08019a71 	.word	0x08019a71
 8019c40:	2000005c 	.word	0x2000005c

08019c44 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 8019c44:	b480      	push	{r7}
 8019c46:	b083      	sub	sp, #12
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
 8019c4c:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	689b      	ldr	r3, [r3, #8]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d101      	bne.n	8019c5a <pifBuzzer_Start+0x16>
 8019c56:	2300      	movs	r3, #0
 8019c58:	e010      	b.n	8019c7c <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	683a      	ldr	r2, [r7, #0]
 8019c5e:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	2200      	movs	r2, #0
 8019c64:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	2200      	movs	r2, #0
 8019c6a:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	2201      	movs	r2, #1
 8019c70:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	689b      	ldr	r3, [r3, #8]
 8019c76:	2200      	movs	r2, #0
 8019c78:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8019c7a:	2301      	movs	r3, #1
}
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	370c      	adds	r7, #12
 8019c80:	46bd      	mov	sp, r7
 8019c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c86:	4770      	bx	lr

08019c88 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 8019c88:	b480      	push	{r7}
 8019c8a:	b083      	sub	sp, #12
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2204      	movs	r2, #4
 8019c94:	731a      	strb	r2, [r3, #12]
}
 8019c96:	bf00      	nop
 8019c98:	370c      	adds	r7, #12
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca0:	4770      	bx	lr

08019ca2 <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 8019ca2:	b580      	push	{r7, lr}
 8019ca4:	b086      	sub	sp, #24
 8019ca6:	af02      	add	r7, sp, #8
 8019ca8:	60f8      	str	r0, [r7, #12]
 8019caa:	60b9      	str	r1, [r7, #8]
 8019cac:	607a      	str	r2, [r7, #4]
 8019cae:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	7a19      	ldrb	r1, [r3, #8]
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	0a1b      	lsrs	r3, r3, #8
 8019cb8:	b2da      	uxtb	r2, r3
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	430a      	orrs	r2, r1
 8019cc0:	b2d2      	uxtb	r2, r2
 8019cc2:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	6858      	ldr	r0, [r3, #4]
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	b2d9      	uxtb	r1, r3
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	9300      	str	r3, [sp, #0]
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	2201      	movs	r2, #1
 8019cd4:	f7f8 fbda 	bl	801248c <pifI2cDevice_Read>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d101      	bne.n	8019ce2 <_actStorageI2c_Read_1+0x40>
 8019cde:	2300      	movs	r3, #0
 8019ce0:	e000      	b.n	8019ce4 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 8019ce2:	2301      	movs	r3, #1
}
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	3710      	adds	r7, #16
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	bd80      	pop	{r7, pc}

08019cec <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b086      	sub	sp, #24
 8019cf0:	af02      	add	r7, sp, #8
 8019cf2:	60f8      	str	r0, [r7, #12]
 8019cf4:	60b9      	str	r1, [r7, #8]
 8019cf6:	607a      	str	r2, [r7, #4]
 8019cf8:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	7a19      	ldrb	r1, [r3, #8]
 8019cfe:	68bb      	ldr	r3, [r7, #8]
 8019d00:	0a1b      	lsrs	r3, r3, #8
 8019d02:	b2da      	uxtb	r2, r3
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	685b      	ldr	r3, [r3, #4]
 8019d08:	430a      	orrs	r2, r1
 8019d0a:	b2d2      	uxtb	r2, r2
 8019d0c:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	6858      	ldr	r0, [r3, #4]
 8019d12:	68bb      	ldr	r3, [r7, #8]
 8019d14:	b2d9      	uxtb	r1, r3
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	9300      	str	r3, [sp, #0]
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	2201      	movs	r2, #1
 8019d1e:	f7f8 fce3 	bl	80126e8 <pifI2cDevice_Write>
 8019d22:	4603      	mov	r3, r0
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d101      	bne.n	8019d2c <_actStorageI2c_Write_1+0x40>
 8019d28:	2300      	movs	r3, #0
 8019d2a:	e009      	b.n	8019d40 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	7a5b      	ldrb	r3, [r3, #9]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d004      	beq.n	8019d3e <_actStorageI2c_Write_1+0x52>
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	7a5b      	ldrb	r3, [r3, #9]
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f7fa ff95 	bl	8014c68 <pifTaskManager_YieldMs>
	return TRUE;
 8019d3e:	2301      	movs	r3, #1
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3710      	adds	r7, #16
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}

08019d48 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b086      	sub	sp, #24
 8019d4c:	af02      	add	r7, sp, #8
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	607a      	str	r2, [r7, #4]
 8019d54:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	7a19      	ldrb	r1, [r3, #8]
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	0c1b      	lsrs	r3, r3, #16
 8019d5e:	b2da      	uxtb	r2, r3
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	430a      	orrs	r2, r1
 8019d66:	b2d2      	uxtb	r2, r2
 8019d68:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	6858      	ldr	r0, [r3, #4]
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	b299      	uxth	r1, r3
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	9300      	str	r3, [sp, #0]
 8019d76:	68bb      	ldr	r3, [r7, #8]
 8019d78:	2202      	movs	r2, #2
 8019d7a:	f7f8 fb87 	bl	801248c <pifI2cDevice_Read>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d101      	bne.n	8019d88 <_actStorageI2c_Read_2+0x40>
 8019d84:	2300      	movs	r3, #0
 8019d86:	e000      	b.n	8019d8a <_actStorageI2c_Read_2+0x42>
	return TRUE;
 8019d88:	2301      	movs	r3, #1
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3710      	adds	r7, #16
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 8019d92:	b580      	push	{r7, lr}
 8019d94:	b086      	sub	sp, #24
 8019d96:	af02      	add	r7, sp, #8
 8019d98:	60f8      	str	r0, [r7, #12]
 8019d9a:	60b9      	str	r1, [r7, #8]
 8019d9c:	607a      	str	r2, [r7, #4]
 8019d9e:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	7a19      	ldrb	r1, [r3, #8]
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	0c1b      	lsrs	r3, r3, #16
 8019da8:	b2da      	uxtb	r2, r3
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	685b      	ldr	r3, [r3, #4]
 8019dae:	430a      	orrs	r2, r1
 8019db0:	b2d2      	uxtb	r2, r2
 8019db2:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	6858      	ldr	r0, [r3, #4]
 8019db8:	68bb      	ldr	r3, [r7, #8]
 8019dba:	b299      	uxth	r1, r3
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	9300      	str	r3, [sp, #0]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2202      	movs	r2, #2
 8019dc4:	f7f8 fc90 	bl	80126e8 <pifI2cDevice_Write>
 8019dc8:	4603      	mov	r3, r0
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d101      	bne.n	8019dd2 <_actStorageI2c_Write_2+0x40>
 8019dce:	2300      	movs	r3, #0
 8019dd0:	e009      	b.n	8019de6 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	7a5b      	ldrb	r3, [r3, #9]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d004      	beq.n	8019de4 <_actStorageI2c_Write_2+0x52>
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	7a5b      	ldrb	r3, [r3, #9]
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7fa ff42 	bl	8014c68 <pifTaskManager_YieldMs>
	return TRUE;
 8019de4:	2301      	movs	r3, #1
}
 8019de6:	4618      	mov	r0, r3
 8019de8:	3710      	adds	r7, #16
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}
	...

08019df0 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	60b9      	str	r1, [r7, #8]
 8019dfa:	4611      	mov	r1, r2
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	460b      	mov	r3, r1
 8019e00:	71fb      	strb	r3, [r7, #7]
 8019e02:	4613      	mov	r3, r2
 8019e04:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d002      	beq.n	8019e12 <pifStorage_AttachI2c+0x22>
 8019e0c:	68bb      	ldr	r3, [r7, #8]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d104      	bne.n	8019e1c <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 8019e12:	4b1c      	ldr	r3, [pc, #112]	; (8019e84 <pifStorage_AttachI2c+0x94>)
 8019e14:	2201      	movs	r2, #1
 8019e16:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	e02f      	b.n	8019e7c <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 8019e1c:	68b8      	ldr	r0, [r7, #8]
 8019e1e:	f7f8 fafd 	bl	801241c <pifI2cPort_AddDevice>
 8019e22:	4602      	mov	r2, r0
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	685b      	ldr	r3, [r3, #4]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d101      	bne.n	8019e34 <pifStorage_AttachI2c+0x44>
 8019e30:	2300      	movs	r3, #0
 8019e32:	e023      	b.n	8019e7c <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	79fa      	ldrb	r2, [r7, #7]
 8019e38:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	685b      	ldr	r3, [r3, #4]
 8019e3e:	79fa      	ldrb	r2, [r7, #7]
 8019e40:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	7e3a      	ldrb	r2, [r7, #24]
 8019e46:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 8019e48:	79bb      	ldrb	r3, [r7, #6]
 8019e4a:	2b01      	cmp	r3, #1
 8019e4c:	d007      	beq.n	8019e5e <pifStorage_AttachI2c+0x6e>
 8019e4e:	2b02      	cmp	r3, #2
 8019e50:	d00c      	beq.n	8019e6c <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 8019e52:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 8019e54:	68f8      	ldr	r0, [r7, #12]
 8019e56:	f000 f81f 	bl	8019e98 <pifStorage_DetachI2c>
	return FALSE;
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	e00e      	b.n	8019e7c <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	4a09      	ldr	r2, [pc, #36]	; (8019e88 <pifStorage_AttachI2c+0x98>)
 8019e62:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	4a09      	ldr	r2, [pc, #36]	; (8019e8c <pifStorage_AttachI2c+0x9c>)
 8019e68:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 8019e6a:	e006      	b.n	8019e7a <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	4a08      	ldr	r2, [pc, #32]	; (8019e90 <pifStorage_AttachI2c+0xa0>)
 8019e70:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	4a07      	ldr	r2, [pc, #28]	; (8019e94 <pifStorage_AttachI2c+0xa4>)
 8019e76:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 8019e78:	bf00      	nop
	return TRUE;
 8019e7a:	2301      	movs	r3, #1
}
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	3710      	adds	r7, #16
 8019e80:	46bd      	mov	sp, r7
 8019e82:	bd80      	pop	{r7, pc}
 8019e84:	200020c9 	.word	0x200020c9
 8019e88:	08019ca3 	.word	0x08019ca3
 8019e8c:	08019ced 	.word	0x08019ced
 8019e90:	08019d49 	.word	0x08019d49
 8019e94:	08019d93 	.word	0x08019d93

08019e98 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b082      	sub	sp, #8
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	685b      	ldr	r3, [r3, #4]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d00b      	beq.n	8019ec0 <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	685a      	ldr	r2, [r3, #4]
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	4619      	mov	r1, r3
 8019eb4:	4610      	mov	r0, r2
 8019eb6:	f7f8 fad5 	bl	8012464 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2200      	movs	r2, #0
 8019eca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019ecc:	bf00      	nop
 8019ece:	3708      	adds	r7, #8
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}

08019ed4 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b082      	sub	sp, #8
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	68db      	ldr	r3, [r3, #12]
 8019ee0:	6878      	ldr	r0, [r7, #4]
 8019ee2:	4798      	blx	r3
 8019ee4:	4603      	mov	r3, r0
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3708      	adds	r7, #8
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}

08019eee <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 8019eee:	b580      	push	{r7, lr}
 8019ef0:	b082      	sub	sp, #8
 8019ef2:	af00      	add	r7, sp, #0
 8019ef4:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	691b      	ldr	r3, [r3, #16]
 8019efa:	6878      	ldr	r0, [r7, #4]
 8019efc:	4798      	blx	r3
 8019efe:	4603      	mov	r3, r0
}
 8019f00:	4618      	mov	r0, r3
 8019f02:	3708      	adds	r7, #8
 8019f04:	46bd      	mov	sp, r7
 8019f06:	bd80      	pop	{r7, pc}

08019f08 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b082      	sub	sp, #8
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	460b      	mov	r3, r1
 8019f12:	807b      	strh	r3, [r7, #2]
 8019f14:	4613      	mov	r3, r2
 8019f16:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	695b      	ldr	r3, [r3, #20]
 8019f1c:	883a      	ldrh	r2, [r7, #0]
 8019f1e:	8879      	ldrh	r1, [r7, #2]
 8019f20:	6878      	ldr	r0, [r7, #4]
 8019f22:	4798      	blx	r3
 8019f24:	4603      	mov	r3, r0
}
 8019f26:	4618      	mov	r0, r3
 8019f28:	3708      	adds	r7, #8
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}

08019f2e <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 8019f2e:	b580      	push	{r7, lr}
 8019f30:	b082      	sub	sp, #8
 8019f32:	af00      	add	r7, sp, #0
 8019f34:	6078      	str	r0, [r7, #4]
 8019f36:	460b      	mov	r3, r1
 8019f38:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	69db      	ldr	r3, [r3, #28]
 8019f3e:	887a      	ldrh	r2, [r7, #2]
 8019f40:	4611      	mov	r1, r2
 8019f42:	6878      	ldr	r0, [r7, #4]
 8019f44:	4798      	blx	r3
 8019f46:	4603      	mov	r3, r0
}
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3708      	adds	r7, #8
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}

08019f50 <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 8019f50:	b590      	push	{r4, r7, lr}
 8019f52:	b085      	sub	sp, #20
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	60f8      	str	r0, [r7, #12]
 8019f58:	60b9      	str	r1, [r7, #8]
 8019f5a:	607a      	str	r2, [r7, #4]
 8019f5c:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	6a1c      	ldr	r4, [r3, #32]
 8019f62:	683b      	ldr	r3, [r7, #0]
 8019f64:	687a      	ldr	r2, [r7, #4]
 8019f66:	68b9      	ldr	r1, [r7, #8]
 8019f68:	68f8      	ldr	r0, [r7, #12]
 8019f6a:	47a0      	blx	r4
 8019f6c:	4603      	mov	r3, r0
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	3714      	adds	r7, #20
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd90      	pop	{r4, r7, pc}

08019f76 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 8019f76:	b590      	push	{r4, r7, lr}
 8019f78:	b085      	sub	sp, #20
 8019f7a:	af00      	add	r7, sp, #0
 8019f7c:	60f8      	str	r0, [r7, #12]
 8019f7e:	60b9      	str	r1, [r7, #8]
 8019f80:	607a      	str	r2, [r7, #4]
 8019f82:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	687a      	ldr	r2, [r7, #4]
 8019f8c:	68b9      	ldr	r1, [r7, #8]
 8019f8e:	68f8      	ldr	r0, [r7, #12]
 8019f90:	47a0      	blx	r4
 8019f92:	4603      	mov	r3, r0
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3714      	adds	r7, #20
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bd90      	pop	{r4, r7, pc}

08019f9c <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b085      	sub	sp, #20
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fa8:	899b      	ldrh	r3, [r3, #12]
 8019faa:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 8019fac:	89fb      	ldrh	r3, [r7, #14]
 8019fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fb2:	4293      	cmp	r3, r2
 8019fb4:	d105      	bne.n	8019fc2 <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 8019fb6:	4b0c      	ldr	r3, [pc, #48]	; (8019fe8 <_getNewDataNode+0x4c>)
 8019fb8:	2204      	movs	r2, #4
 8019fba:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 8019fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fc0:	e00c      	b.n	8019fdc <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8019fc6:	89fa      	ldrh	r2, [r7, #14]
 8019fc8:	4613      	mov	r3, r2
 8019fca:	005b      	lsls	r3, r3, #1
 8019fcc:	4413      	add	r3, r2
 8019fce:	009b      	lsls	r3, r3, #2
 8019fd0:	18ca      	adds	r2, r1, r3
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fd6:	88d2      	ldrh	r2, [r2, #6]
 8019fd8:	819a      	strh	r2, [r3, #12]
	return node;
 8019fda:	89fb      	ldrh	r3, [r7, #14]
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	3714      	adds	r7, #20
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe6:	4770      	bx	lr
 8019fe8:	200020c9 	.word	0x200020c9

08019fec <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 8019fec:	b590      	push	{r4, r7, lr}
 8019fee:	b087      	sub	sp, #28
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	60f8      	str	r0, [r7, #12]
 8019ff4:	60b9      	str	r1, [r7, #8]
 8019ff6:	607a      	str	r2, [r7, #4]
 8019ff8:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	617b      	str	r3, [r7, #20]
	while (size) {
 8019ffe:	e01d      	b.n	801a03c <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801a000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a002:	683a      	ldr	r2, [r7, #0]
 801a004:	4293      	cmp	r3, r2
 801a006:	bf28      	it	cs
 801a008:	4613      	movcs	r3, r2
 801a00a:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a010:	68f8      	ldr	r0, [r7, #12]
 801a012:	68ba      	ldr	r2, [r7, #8]
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	18d1      	adds	r1, r2, r3
 801a018:	687a      	ldr	r2, [r7, #4]
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	441a      	add	r2, r3
 801a01e:	693b      	ldr	r3, [r7, #16]
 801a020:	47a0      	blx	r4
 801a022:	4603      	mov	r3, r0
 801a024:	2b00      	cmp	r3, #0
 801a026:	d101      	bne.n	801a02c <_readData+0x40>
 801a028:	2300      	movs	r3, #0
 801a02a:	e00b      	b.n	801a044 <_readData+0x58>

		ptr += len;
 801a02c:	697a      	ldr	r2, [r7, #20]
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	4413      	add	r3, r2
 801a032:	617b      	str	r3, [r7, #20]
		size -= len;
 801a034:	683a      	ldr	r2, [r7, #0]
 801a036:	693b      	ldr	r3, [r7, #16]
 801a038:	1ad3      	subs	r3, r2, r3
 801a03a:	603b      	str	r3, [r7, #0]
	while (size) {
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d1de      	bne.n	801a000 <_readData+0x14>
	}
	return TRUE;
 801a042:	2301      	movs	r3, #1
}
 801a044:	4618      	mov	r0, r3
 801a046:	371c      	adds	r7, #28
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd90      	pop	{r4, r7, pc}

0801a04c <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801a04c:	b590      	push	{r4, r7, lr}
 801a04e:	b089      	sub	sp, #36	; 0x24
 801a050:	af00      	add	r7, sp, #0
 801a052:	60f8      	str	r0, [r7, #12]
 801a054:	60b9      	str	r1, [r7, #8]
 801a056:	607a      	str	r2, [r7, #4]
 801a058:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a05e:	88db      	ldrh	r3, [r3, #6]
 801a060:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801a062:	2300      	movs	r3, #0
 801a064:	61fb      	str	r3, [r7, #28]
	while (size) {
 801a066:	e01d      	b.n	801a0a4 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801a068:	8b7b      	ldrh	r3, [r7, #26]
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	4293      	cmp	r3, r2
 801a06e:	bf28      	it	cs
 801a070:	4613      	movcs	r3, r2
 801a072:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801a078:	68f8      	ldr	r0, [r7, #12]
 801a07a:	68ba      	ldr	r2, [r7, #8]
 801a07c:	69fb      	ldr	r3, [r7, #28]
 801a07e:	18d1      	adds	r1, r2, r3
 801a080:	687a      	ldr	r2, [r7, #4]
 801a082:	69fb      	ldr	r3, [r7, #28]
 801a084:	441a      	add	r2, r3
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	47a0      	blx	r4
 801a08a:	4603      	mov	r3, r0
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d101      	bne.n	801a094 <_writeData+0x48>
 801a090:	2300      	movs	r3, #0
 801a092:	e00b      	b.n	801a0ac <_writeData+0x60>

		ptr += len;
 801a094:	69fa      	ldr	r2, [r7, #28]
 801a096:	697b      	ldr	r3, [r7, #20]
 801a098:	4413      	add	r3, r2
 801a09a:	61fb      	str	r3, [r7, #28]
		size -= len;
 801a09c:	683a      	ldr	r2, [r7, #0]
 801a09e:	697b      	ldr	r3, [r7, #20]
 801a0a0:	1ad3      	subs	r3, r2, r3
 801a0a2:	603b      	str	r3, [r7, #0]
	while (size) {
 801a0a4:	683b      	ldr	r3, [r7, #0]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d1de      	bne.n	801a068 <_writeData+0x1c>
	}
	return TRUE;
 801a0aa:	2301      	movs	r3, #1
}
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	3724      	adds	r7, #36	; 0x24
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd90      	pop	{r4, r7, pc}

0801a0b4 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b082      	sub	sp, #8
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
 801a0bc:	460b      	mov	r3, r1
 801a0be:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d104      	bne.n	801a0d0 <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801a0c6:	4b18      	ldr	r3, [pc, #96]	; (801a128 <pifStorageVar_Init+0x74>)
 801a0c8:	2201      	movs	r2, #1
 801a0ca:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	e027      	b.n	801a120 <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801a0d0:	2248      	movs	r2, #72	; 0x48
 801a0d2:	2100      	movs	r1, #0
 801a0d4:	6878      	ldr	r0, [r7, #4]
 801a0d6:	f007 ff11 	bl	8021efc <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801a0da:	887b      	ldrh	r3, [r7, #2]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d106      	bne.n	801a0ee <pifStorageVar_Init+0x3a>
 801a0e0:	4b12      	ldr	r3, [pc, #72]	; (801a12c <pifStorageVar_Init+0x78>)
 801a0e2:	881b      	ldrh	r3, [r3, #0]
 801a0e4:	1c5a      	adds	r2, r3, #1
 801a0e6:	b291      	uxth	r1, r2
 801a0e8:	4a10      	ldr	r2, [pc, #64]	; (801a12c <pifStorageVar_Init+0x78>)
 801a0ea:	8011      	strh	r1, [r2, #0]
 801a0ec:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	887a      	ldrh	r2, [r7, #2]
 801a0f2:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	4a0e      	ldr	r2, [pc, #56]	; (801a130 <pifStorageVar_Init+0x7c>)
 801a0f8:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	4a0d      	ldr	r2, [pc, #52]	; (801a134 <pifStorageVar_Init+0x80>)
 801a0fe:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	4a0d      	ldr	r2, [pc, #52]	; (801a138 <pifStorageVar_Init+0x84>)
 801a104:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	4a0c      	ldr	r2, [pc, #48]	; (801a13c <pifStorageVar_Init+0x88>)
 801a10a:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	4a0c      	ldr	r2, [pc, #48]	; (801a140 <pifStorageVar_Init+0x8c>)
 801a110:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	4a0b      	ldr	r2, [pc, #44]	; (801a144 <pifStorageVar_Init+0x90>)
 801a116:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	4a0b      	ldr	r2, [pc, #44]	; (801a148 <pifStorageVar_Init+0x94>)
 801a11c:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801a11e:	2301      	movs	r3, #1
}
 801a120:	4618      	mov	r0, r3
 801a122:	3708      	adds	r7, #8
 801a124:	46bd      	mov	sp, r7
 801a126:	bd80      	pop	{r7, pc}
 801a128:	200020c9 	.word	0x200020c9
 801a12c:	2000005c 	.word	0x2000005c
 801a130:	0801a377 	.word	0x0801a377
 801a134:	0801a391 	.word	0x0801a391
 801a138:	0801a531 	.word	0x0801a531
 801a13c:	0801a7dd 	.word	0x0801a7dd
 801a140:	0801a8f9 	.word	0x0801a8f9
 801a144:	0801a98d 	.word	0x0801a98d
 801a148:	0801a9e5 	.word	0x0801a9e5

0801a14c <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d007      	beq.n	801a16c <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a160:	4618      	mov	r0, r3
 801a162:	f007 feb5 	bl	8021ed0 <free>
        p_owner->__p_info_buffer = NULL;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2200      	movs	r2, #0
 801a16a:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2200      	movs	r2, #0
 801a170:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	2200      	movs	r2, #0
 801a176:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2200      	movs	r2, #0
 801a17c:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2200      	movs	r2, #0
 801a182:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2200      	movs	r2, #0
 801a188:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	2200      	movs	r2, #0
 801a18e:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	2200      	movs	r2, #0
 801a194:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a196:	bf00      	nop
 801a198:	3708      	adds	r7, #8
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}
	...

0801a1a0 <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801a1a0:	b590      	push	{r4, r7, lr}
 801a1a2:	b089      	sub	sp, #36	; 0x24
 801a1a4:	af02      	add	r7, sp, #8
 801a1a6:	60f8      	str	r0, [r7, #12]
 801a1a8:	607a      	str	r2, [r7, #4]
 801a1aa:	461a      	mov	r2, r3
 801a1ac:	460b      	mov	r3, r1
 801a1ae:	817b      	strh	r3, [r7, #10]
 801a1b0:	4613      	mov	r3, r2
 801a1b2:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d008      	beq.n	801a1cc <pifStorageVar_SetMedia+0x2c>
 801a1ba:	897b      	ldrh	r3, [r7, #10]
 801a1bc:	2b0f      	cmp	r3, #15
 801a1be:	d905      	bls.n	801a1cc <pifStorageVar_SetMedia+0x2c>
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d002      	beq.n	801a1cc <pifStorageVar_SetMedia+0x2c>
 801a1c6:	7a7b      	ldrb	r3, [r7, #9]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d104      	bne.n	801a1d6 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801a1cc:	4b5c      	ldr	r3, [pc, #368]	; (801a340 <pifStorageVar_SetMedia+0x1a0>)
 801a1ce:	2201      	movs	r2, #1
 801a1d0:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	e0af      	b.n	801a336 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801a1d6:	897b      	ldrh	r3, [r7, #10]
 801a1d8:	687a      	ldr	r2, [r7, #4]
 801a1da:	fbb2 f3f3 	udiv	r3, r2, r3
 801a1de:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801a1e0:	697b      	ldr	r3, [r7, #20]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d003      	beq.n	801a1ee <pifStorageVar_SetMedia+0x4e>
 801a1e6:	697b      	ldr	r3, [r7, #20]
 801a1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a1ec:	d304      	bcc.n	801a1f8 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801a1ee:	4b54      	ldr	r3, [pc, #336]	; (801a340 <pifStorageVar_SetMedia+0x1a0>)
 801a1f0:	2201      	movs	r2, #1
 801a1f2:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	e09e      	b.n	801a336 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801a1f8:	7a7a      	ldrb	r2, [r7, #9]
 801a1fa:	4613      	mov	r3, r2
 801a1fc:	005b      	lsls	r3, r3, #1
 801a1fe:	4413      	add	r3, r2
 801a200:	009b      	lsls	r3, r3, #2
 801a202:	461a      	mov	r2, r3
 801a204:	897b      	ldrh	r3, [r7, #10]
 801a206:	4413      	add	r3, r2
 801a208:	f103 020f 	add.w	r2, r3, #15
 801a20c:	897b      	ldrh	r3, [r7, #10]
 801a20e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a212:	b29a      	uxth	r2, r3
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a21c:	461a      	mov	r2, r3
 801a21e:	897b      	ldrh	r3, [r7, #10]
 801a220:	fb02 f303 	mul.w	r3, r2, r3
 801a224:	461a      	mov	r2, r3
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a22e:	4619      	mov	r1, r3
 801a230:	2001      	movs	r0, #1
 801a232:	f007 fe13 	bl	8021e5c <calloc>
 801a236:	4603      	mov	r3, r0
 801a238:	461a      	mov	r2, r3
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a242:	2b00      	cmp	r3, #0
 801a244:	d104      	bne.n	801a250 <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801a246:	4b3e      	ldr	r3, [pc, #248]	; (801a340 <pifStorageVar_SetMedia+0x1a0>)
 801a248:	2203      	movs	r2, #3
 801a24a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801a24c:	2300      	movs	r3, #0
 801a24e:	e072      	b.n	801a336 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a258:	897b      	ldrh	r3, [r7, #10]
 801a25a:	9300      	str	r3, [sp, #0]
 801a25c:	4613      	mov	r3, r2
 801a25e:	2200      	movs	r2, #0
 801a260:	68f8      	ldr	r0, [r7, #12]
 801a262:	f7ff fec3 	bl	8019fec <_readData>
 801a266:	4603      	mov	r3, r0
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d108      	bne.n	801a27e <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801a26c:	4b34      	ldr	r3, [pc, #208]	; (801a340 <pifStorageVar_SetMedia+0x1a0>)
 801a26e:	220d      	movs	r2, #13
 801a270:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801a272:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d05b      	beq.n	801a334 <pifStorageVar_SetMedia+0x194>
 801a27c:	e052      	b.n	801a324 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a28a:	f103 0210 	add.w	r2, r3, #16
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a296:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801a298:	693b      	ldr	r3, [r7, #16]
 801a29a:	781b      	ldrb	r3, [r3, #0]
 801a29c:	2b70      	cmp	r3, #112	; 0x70
 801a29e:	d121      	bne.n	801a2e4 <pifStorageVar_SetMedia+0x144>
 801a2a0:	693b      	ldr	r3, [r7, #16]
 801a2a2:	785b      	ldrb	r3, [r3, #1]
 801a2a4:	2b69      	cmp	r3, #105	; 0x69
 801a2a6:	d11d      	bne.n	801a2e4 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801a2a8:	693b      	ldr	r3, [r7, #16]
 801a2aa:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801a2ac:	2b66      	cmp	r3, #102	; 0x66
 801a2ae:	d119      	bne.n	801a2e4 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801a2b0:	693b      	ldr	r3, [r7, #16]
 801a2b2:	78db      	ldrb	r3, [r3, #3]
 801a2b4:	2b73      	cmp	r3, #115	; 0x73
 801a2b6:	d115      	bne.n	801a2e4 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801a2b8:	693b      	ldr	r3, [r7, #16]
 801a2ba:	795b      	ldrb	r3, [r3, #5]
 801a2bc:	7a7a      	ldrb	r2, [r7, #9]
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	d112      	bne.n	801a2e8 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801a2c2:	693b      	ldr	r3, [r7, #16]
 801a2c4:	89dc      	ldrh	r4, [r3, #14]
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2ca:	210a      	movs	r1, #10
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	f7f7 fdc8 	bl	8011e62 <pifCrc16>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	429c      	cmp	r4, r3
 801a2d6:	d109      	bne.n	801a2ec <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	2201      	movs	r2, #1
 801a2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801a2e0:	2301      	movs	r3, #1
 801a2e2:	e028      	b.n	801a336 <pifStorageVar_SetMedia+0x196>
        goto set;
 801a2e4:	bf00      	nop
 801a2e6:	e002      	b.n	801a2ee <pifStorageVar_SetMedia+0x14e>
        goto set;
 801a2e8:	bf00      	nop
 801a2ea:	e000      	b.n	801a2ee <pifStorageVar_SetMedia+0x14e>
        goto set;
 801a2ec:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	2270      	movs	r2, #112	; 0x70
 801a2f2:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801a2f4:	693b      	ldr	r3, [r7, #16]
 801a2f6:	2269      	movs	r2, #105	; 0x69
 801a2f8:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	2266      	movs	r2, #102	; 0x66
 801a2fe:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801a300:	693b      	ldr	r3, [r7, #16]
 801a302:	2273      	movs	r2, #115	; 0x73
 801a304:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801a306:	693b      	ldr	r3, [r7, #16]
 801a308:	2201      	movs	r2, #1
 801a30a:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	7a7a      	ldrb	r2, [r7, #9]
 801a310:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801a312:	693b      	ldr	r3, [r7, #16]
 801a314:	897a      	ldrh	r2, [r7, #10]
 801a316:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801a318:	697b      	ldr	r3, [r7, #20]
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	693b      	ldr	r3, [r7, #16]
 801a31e:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801a320:	2301      	movs	r3, #1
 801a322:	e008      	b.n	801a336 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a328:	4618      	mov	r0, r3
 801a32a:	f007 fdd1 	bl	8021ed0 <free>
		p_owner->__p_info_buffer = NULL;
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	2200      	movs	r2, #0
 801a332:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801a334:	2300      	movs	r3, #0
}
 801a336:	4618      	mov	r0, r3
 801a338:	371c      	adds	r7, #28
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd90      	pop	{r4, r7, pc}
 801a33e:	bf00      	nop
 801a340:	200020c9 	.word	0x200020c9

0801a344 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b086      	sub	sp, #24
 801a348:	af02      	add	r7, sp, #8
 801a34a:	60f8      	str	r0, [r7, #12]
 801a34c:	60b9      	str	r1, [r7, #8]
 801a34e:	4611      	mov	r1, r2
 801a350:	461a      	mov	r2, r3
 801a352:	460b      	mov	r3, r1
 801a354:	71fb      	strb	r3, [r7, #7]
 801a356:	4613      	mov	r3, r2
 801a358:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801a35a:	68f8      	ldr	r0, [r7, #12]
 801a35c:	79b9      	ldrb	r1, [r7, #6]
 801a35e:	79fa      	ldrb	r2, [r7, #7]
 801a360:	7e3b      	ldrb	r3, [r7, #24]
 801a362:	9300      	str	r3, [sp, #0]
 801a364:	460b      	mov	r3, r1
 801a366:	68b9      	ldr	r1, [r7, #8]
 801a368:	f7ff fd42 	bl	8019df0 <pifStorage_AttachI2c>
 801a36c:	4603      	mov	r3, r0
}
 801a36e:	4618      	mov	r0, r3
 801a370:	3710      	adds	r7, #16
 801a372:	46bd      	mov	sp, r7
 801a374:	bd80      	pop	{r7, pc}

0801a376 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801a376:	b480      	push	{r7}
 801a378:	b083      	sub	sp, #12
 801a37a:	af00      	add	r7, sp, #0
 801a37c:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801a384:	4618      	mov	r0, r3
 801a386:	370c      	adds	r7, #12
 801a388:	46bd      	mov	sp, r7
 801a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38e:	4770      	bx	lr

0801a390 <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801a390:	b590      	push	{r4, r7, lr}
 801a392:	b08d      	sub	sp, #52	; 0x34
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a3a0:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d104      	bne.n	801a3b2 <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801a3a8:	4b60      	ldr	r3, [pc, #384]	; (801a52c <pifStorageVar_Format+0x19c>)
 801a3aa:	2201      	movs	r2, #1
 801a3ac:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	e0b8      	b.n	801a524 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801a3b2:	6a3b      	ldr	r3, [r7, #32]
 801a3b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3b8:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801a3ba:	6a3b      	ldr	r3, [r7, #32]
 801a3bc:	2200      	movs	r2, #0
 801a3be:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801a3c0:	210a      	movs	r1, #10
 801a3c2:	6a38      	ldr	r0, [r7, #32]
 801a3c4:	f7f7 fd4d 	bl	8011e62 <pifCrc16>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	461a      	mov	r2, r3
 801a3cc:	6a3b      	ldr	r3, [r7, #32]
 801a3ce:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3d4:	f103 0010 	add.w	r0, r3, #16
 801a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3dc:	3b10      	subs	r3, #16
 801a3de:	461a      	mov	r2, r3
 801a3e0:	21ff      	movs	r1, #255	; 0xff
 801a3e2:	f007 fd8b 	bl	8021efc <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 801a3ea:	e019      	b.n	801a420 <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a3f2:	4613      	mov	r3, r2
 801a3f4:	005b      	lsls	r3, r3, #1
 801a3f6:	4413      	add	r3, r2
 801a3f8:	009b      	lsls	r3, r3, #2
 801a3fa:	440b      	add	r3, r1
 801a3fc:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a400:	b29b      	uxth	r3, r3
 801a402:	3301      	adds	r3, #1
 801a404:	b29a      	uxth	r2, r3
 801a406:	69fb      	ldr	r3, [r7, #28]
 801a408:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a40a:	2106      	movs	r1, #6
 801a40c:	69f8      	ldr	r0, [r7, #28]
 801a40e:	f7f7 fd28 	bl	8011e62 <pifCrc16>
 801a412:	4603      	mov	r3, r0
 801a414:	461a      	mov	r2, r3
 801a416:	69fb      	ldr	r3, [r7, #28]
 801a418:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a41c:	3301      	adds	r3, #1
 801a41e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a420:	6a3b      	ldr	r3, [r7, #32]
 801a422:	795b      	ldrb	r3, [r3, #5]
 801a424:	3b01      	subs	r3, #1
 801a426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a428:	429a      	cmp	r2, r3
 801a42a:	dbdf      	blt.n	801a3ec <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a430:	6a3b      	ldr	r3, [r7, #32]
 801a432:	795b      	ldrb	r3, [r3, #5]
 801a434:	4619      	mov	r1, r3
 801a436:	460b      	mov	r3, r1
 801a438:	005b      	lsls	r3, r3, #1
 801a43a:	440b      	add	r3, r1
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	3b0c      	subs	r3, #12
 801a440:	4413      	add	r3, r2
 801a442:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a444:	2106      	movs	r1, #6
 801a446:	69f8      	ldr	r0, [r7, #28]
 801a448:	f7f7 fd0b 	bl	8011e62 <pifCrc16>
 801a44c:	4603      	mov	r3, r0
 801a44e:	461a      	mov	r2, r3
 801a450:	69fb      	ldr	r3, [r7, #28]
 801a452:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a45c:	2100      	movs	r1, #0
 801a45e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a460:	f7ff fdf4 	bl	801a04c <_writeData>
 801a464:	4603      	mov	r3, r0
 801a466:	2b00      	cmp	r3, #0
 801a468:	d104      	bne.n	801a474 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801a46a:	4b30      	ldr	r3, [pc, #192]	; (801a52c <pifStorageVar_Format+0x19c>)
 801a46c:	220d      	movs	r2, #13
 801a46e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801a470:	2300      	movs	r3, #0
 801a472:	e057      	b.n	801a524 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801a474:	2300      	movs	r3, #0
 801a476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a47e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801a482:	e046      	b.n	801a512 <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801a484:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801a488:	2b10      	cmp	r3, #16
 801a48a:	bf28      	it	cs
 801a48c:	2310      	movcs	r3, #16
 801a48e:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a492:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a494:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a498:	7efb      	ldrb	r3, [r7, #27]
 801a49a:	f107 0108 	add.w	r1, r7, #8
 801a49e:	6878      	ldr	r0, [r7, #4]
 801a4a0:	47a0      	blx	r4
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d104      	bne.n	801a4b2 <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801a4a8:	4b20      	ldr	r3, [pc, #128]	; (801a52c <pifStorageVar_Format+0x19c>)
 801a4aa:	220d      	movs	r2, #13
 801a4ac:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	e038      	b.n	801a524 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801a4b8:	e01a      	b.n	801a4f0 <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4be:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801a4c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801a4c6:	440a      	add	r2, r1
 801a4c8:	4413      	add	r3, r2
 801a4ca:	781a      	ldrb	r2, [r3, #0]
 801a4cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a4d0:	3330      	adds	r3, #48	; 0x30
 801a4d2:	443b      	add	r3, r7
 801a4d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	d004      	beq.n	801a4e6 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801a4dc:	4b13      	ldr	r3, [pc, #76]	; (801a52c <pifStorageVar_Format+0x19c>)
 801a4de:	220f      	movs	r2, #15
 801a4e0:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	e01e      	b.n	801a524 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801a4e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a4ea:	3301      	adds	r3, #1
 801a4ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801a4f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801a4f4:	7efb      	ldrb	r3, [r7, #27]
 801a4f6:	429a      	cmp	r2, r3
 801a4f8:	d3df      	bcc.n	801a4ba <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801a4fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a4fe:	7efb      	ldrb	r3, [r7, #27]
 801a500:	4413      	add	r3, r2
 801a502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801a506:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801a50a:	7efb      	ldrb	r3, [r7, #27]
 801a50c:	1ad3      	subs	r3, r2, r3
 801a50e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801a512:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801a516:	2b00      	cmp	r3, #0
 801a518:	d1b4      	bne.n	801a484 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a51c:	2201      	movs	r2, #1
 801a51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801a522:	2301      	movs	r3, #1
}
 801a524:	4618      	mov	r0, r3
 801a526:	3734      	adds	r7, #52	; 0x34
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd90      	pop	{r4, r7, pc}
 801a52c:	200020c9 	.word	0x200020c9

0801a530 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b08a      	sub	sp, #40	; 0x28
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
 801a538:	460b      	mov	r3, r1
 801a53a:	807b      	strh	r3, [r7, #2]
 801a53c:	4613      	mov	r3, r2
 801a53e:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a544:	69fb      	ldr	r3, [r7, #28]
 801a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a548:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801a54a:	69bb      	ldr	r3, [r7, #24]
 801a54c:	88db      	ldrh	r3, [r3, #6]
 801a54e:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801a550:	883a      	ldrh	r2, [r7, #0]
 801a552:	8afb      	ldrh	r3, [r7, #22]
 801a554:	4413      	add	r3, r2
 801a556:	1e5a      	subs	r2, r3, #1
 801a558:	8afb      	ldrh	r3, [r7, #22]
 801a55a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a55e:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801a560:	69fb      	ldr	r3, [r7, #28]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d002      	beq.n	801a56c <pifStorageVar_Create+0x3c>
 801a566:	887b      	ldrh	r3, [r7, #2]
 801a568:	2bff      	cmp	r3, #255	; 0xff
 801a56a:	d104      	bne.n	801a576 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801a56c:	4b9a      	ldr	r3, [pc, #616]	; (801a7d8 <pifStorageVar_Create+0x2a8>)
 801a56e:	2201      	movs	r2, #1
 801a570:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801a572:	2300      	movs	r3, #0
 801a574:	e12b      	b.n	801a7ce <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801a576:	69fb      	ldr	r3, [r7, #28]
 801a578:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d104      	bne.n	801a58a <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801a580:	4b95      	ldr	r3, [pc, #596]	; (801a7d8 <pifStorageVar_Create+0x2a8>)
 801a582:	220f      	movs	r2, #15
 801a584:	701a      	strb	r2, [r3, #0]
		return NULL;
 801a586:	2300      	movs	r3, #0
 801a588:	e121      	b.n	801a7ce <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801a58a:	69bb      	ldr	r3, [r7, #24]
 801a58c:	895b      	ldrh	r3, [r3, #10]
 801a58e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a592:	4293      	cmp	r3, r2
 801a594:	d127      	bne.n	801a5e6 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801a596:	69fb      	ldr	r3, [r7, #28]
 801a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a59a:	891b      	ldrh	r3, [r3, #8]
 801a59c:	8aba      	ldrh	r2, [r7, #20]
 801a59e:	429a      	cmp	r2, r3
 801a5a0:	d904      	bls.n	801a5ac <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801a5a2:	4b8d      	ldr	r3, [pc, #564]	; (801a7d8 <pifStorageVar_Create+0x2a8>)
 801a5a4:	2204      	movs	r2, #4
 801a5a6:	701a      	strb	r2, [r3, #0]
			return NULL;
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	e110      	b.n	801a7ce <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801a5ac:	69fb      	ldr	r3, [r7, #28]
 801a5ae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a5b0:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801a5b2:	69f8      	ldr	r0, [r7, #28]
 801a5b4:	f7ff fcf2 	bl	8019f9c <_getNewDataNode>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801a5bc:	69fb      	ldr	r3, [r7, #28]
 801a5be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a5c0:	89fa      	ldrh	r2, [r7, #14]
 801a5c2:	4613      	mov	r3, r2
 801a5c4:	005b      	lsls	r3, r3, #1
 801a5c6:	4413      	add	r3, r2
 801a5c8:	009b      	lsls	r3, r3, #2
 801a5ca:	440b      	add	r3, r1
 801a5cc:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801a5ce:	69bb      	ldr	r3, [r7, #24]
 801a5d0:	895a      	ldrh	r2, [r3, #10]
 801a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d4:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5dc:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801a5de:	69bb      	ldr	r3, [r7, #24]
 801a5e0:	89fa      	ldrh	r2, [r7, #14]
 801a5e2:	815a      	strh	r2, [r3, #10]
		goto save;
 801a5e4:	e0d1      	b.n	801a78a <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801a5e6:	69bb      	ldr	r3, [r7, #24]
 801a5e8:	895b      	ldrh	r3, [r3, #10]
 801a5ea:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801a5ec:	69fb      	ldr	r3, [r7, #28]
 801a5ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a5f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a5f2:	4613      	mov	r3, r2
 801a5f4:	005b      	lsls	r3, r3, #1
 801a5f6:	4413      	add	r3, r2
 801a5f8:	009b      	lsls	r3, r3, #2
 801a5fa:	440b      	add	r3, r1
 801a5fc:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801a5fe:	69fb      	ldr	r3, [r7, #28]
 801a600:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a602:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801a604:	693b      	ldr	r3, [r7, #16]
 801a606:	889b      	ldrh	r3, [r3, #4]
 801a608:	8c3a      	ldrh	r2, [r7, #32]
 801a60a:	429a      	cmp	r2, r3
 801a60c:	f000 80b2 	beq.w	801a774 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	889b      	ldrh	r3, [r3, #4]
 801a614:	461a      	mov	r2, r3
 801a616:	8c3b      	ldrh	r3, [r7, #32]
 801a618:	1ad2      	subs	r2, r2, r3
 801a61a:	8abb      	ldrh	r3, [r7, #20]
 801a61c:	429a      	cmp	r2, r3
 801a61e:	f2c0 80a9 	blt.w	801a774 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801a622:	69f8      	ldr	r0, [r7, #28]
 801a624:	f7ff fcba 	bl	8019f9c <_getNewDataNode>
 801a628:	4603      	mov	r3, r0
 801a62a:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801a62c:	89fb      	ldrh	r3, [r7, #14]
 801a62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a632:	4293      	cmp	r3, r2
 801a634:	d101      	bne.n	801a63a <pifStorageVar_Create+0x10a>
 801a636:	2300      	movs	r3, #0
 801a638:	e0c9      	b.n	801a7ce <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801a63a:	69fb      	ldr	r3, [r7, #28]
 801a63c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a63e:	89fa      	ldrh	r2, [r7, #14]
 801a640:	4613      	mov	r3, r2
 801a642:	005b      	lsls	r3, r3, #1
 801a644:	4413      	add	r3, r2
 801a646:	009b      	lsls	r3, r3, #2
 801a648:	440b      	add	r3, r1
 801a64a:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801a64c:	69bb      	ldr	r3, [r7, #24]
 801a64e:	895a      	ldrh	r2, [r3, #10]
 801a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a652:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a65a:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801a65c:	69bb      	ldr	r3, [r7, #24]
 801a65e:	89fa      	ldrh	r2, [r7, #14]
 801a660:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801a662:	693b      	ldr	r3, [r7, #16]
 801a664:	89fa      	ldrh	r2, [r7, #14]
 801a666:	811a      	strh	r2, [r3, #8]
				goto save;
 801a668:	e08f      	b.n	801a78a <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801a66a:	69fb      	ldr	r3, [r7, #28]
 801a66c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a66e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a670:	4613      	mov	r3, r2
 801a672:	005b      	lsls	r3, r3, #1
 801a674:	4413      	add	r3, r2
 801a676:	009b      	lsls	r3, r3, #2
 801a678:	440b      	add	r3, r1
 801a67a:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801a67c:	693b      	ldr	r3, [r7, #16]
 801a67e:	889a      	ldrh	r2, [r3, #4]
 801a680:	693b      	ldr	r3, [r7, #16]
 801a682:	885b      	ldrh	r3, [r3, #2]
 801a684:	4619      	mov	r1, r3
 801a686:	8afb      	ldrh	r3, [r7, #22]
 801a688:	440b      	add	r3, r1
 801a68a:	1e59      	subs	r1, r3, #1
 801a68c:	8afb      	ldrh	r3, [r7, #22]
 801a68e:	fb91 f3f3 	sdiv	r3, r1, r3
 801a692:	b29b      	uxth	r3, r3
 801a694:	4413      	add	r3, r2
 801a696:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801a698:	693b      	ldr	r3, [r7, #16]
 801a69a:	88db      	ldrh	r3, [r3, #6]
 801a69c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a6a0:	4293      	cmp	r3, r2
 801a6a2:	d127      	bne.n	801a6f4 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801a6a4:	69bb      	ldr	r3, [r7, #24]
 801a6a6:	891b      	ldrh	r3, [r3, #8]
 801a6a8:	461a      	mov	r2, r3
 801a6aa:	8c3b      	ldrh	r3, [r7, #32]
 801a6ac:	1ad2      	subs	r2, r2, r3
 801a6ae:	8abb      	ldrh	r3, [r7, #20]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	db5c      	blt.n	801a76e <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801a6b4:	69f8      	ldr	r0, [r7, #28]
 801a6b6:	f7ff fc71 	bl	8019f9c <_getNewDataNode>
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801a6be:	89fb      	ldrh	r3, [r7, #14]
 801a6c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a6c4:	4293      	cmp	r3, r2
 801a6c6:	d101      	bne.n	801a6cc <pifStorageVar_Create+0x19c>
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	e080      	b.n	801a7ce <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801a6cc:	69fb      	ldr	r3, [r7, #28]
 801a6ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a6d0:	89fa      	ldrh	r2, [r7, #14]
 801a6d2:	4613      	mov	r3, r2
 801a6d4:	005b      	lsls	r3, r3, #1
 801a6d6:	4413      	add	r3, r2
 801a6d8:	009b      	lsls	r3, r3, #2
 801a6da:	440b      	add	r3, r1
 801a6dc:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	88da      	ldrh	r2, [r3, #6]
 801a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6e4:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a6ea:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801a6ec:	693b      	ldr	r3, [r7, #16]
 801a6ee:	89fa      	ldrh	r2, [r7, #14]
 801a6f0:	80da      	strh	r2, [r3, #6]
					goto save;
 801a6f2:	e04a      	b.n	801a78a <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801a6f4:	69fb      	ldr	r3, [r7, #28]
 801a6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a6f8:	693b      	ldr	r3, [r7, #16]
 801a6fa:	88db      	ldrh	r3, [r3, #6]
 801a6fc:	4619      	mov	r1, r3
 801a6fe:	460b      	mov	r3, r1
 801a700:	005b      	lsls	r3, r3, #1
 801a702:	440b      	add	r3, r1
 801a704:	009b      	lsls	r3, r3, #2
 801a706:	4413      	add	r3, r2
 801a708:	889b      	ldrh	r3, [r3, #4]
 801a70a:	461a      	mov	r2, r3
 801a70c:	8c3b      	ldrh	r3, [r7, #32]
 801a70e:	1ad2      	subs	r2, r2, r3
 801a710:	8abb      	ldrh	r3, [r7, #20]
 801a712:	429a      	cmp	r2, r3
 801a714:	db2b      	blt.n	801a76e <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801a716:	69f8      	ldr	r0, [r7, #28]
 801a718:	f7ff fc40 	bl	8019f9c <_getNewDataNode>
 801a71c:	4603      	mov	r3, r0
 801a71e:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801a720:	89fb      	ldrh	r3, [r7, #14]
 801a722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a726:	4293      	cmp	r3, r2
 801a728:	d101      	bne.n	801a72e <pifStorageVar_Create+0x1fe>
 801a72a:	2300      	movs	r3, #0
 801a72c:	e04f      	b.n	801a7ce <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801a72e:	69fb      	ldr	r3, [r7, #28]
 801a730:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a732:	89fa      	ldrh	r2, [r7, #14]
 801a734:	4613      	mov	r3, r2
 801a736:	005b      	lsls	r3, r3, #1
 801a738:	4413      	add	r3, r2
 801a73a:	009b      	lsls	r3, r3, #2
 801a73c:	440b      	add	r3, r1
 801a73e:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801a740:	693b      	ldr	r3, [r7, #16]
 801a742:	88da      	ldrh	r2, [r3, #6]
 801a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a746:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a74a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a74c:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801a74e:	69fb      	ldr	r3, [r7, #28]
 801a750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a752:	693b      	ldr	r3, [r7, #16]
 801a754:	88db      	ldrh	r3, [r3, #6]
 801a756:	4619      	mov	r1, r3
 801a758:	460b      	mov	r3, r1
 801a75a:	005b      	lsls	r3, r3, #1
 801a75c:	440b      	add	r3, r1
 801a75e:	009b      	lsls	r3, r3, #2
 801a760:	4413      	add	r3, r2
 801a762:	89fa      	ldrh	r2, [r7, #14]
 801a764:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801a766:	693b      	ldr	r3, [r7, #16]
 801a768:	89fa      	ldrh	r2, [r7, #14]
 801a76a:	80da      	strh	r2, [r3, #6]
					goto save;
 801a76c:	e00d      	b.n	801a78a <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	88db      	ldrh	r3, [r3, #6]
 801a772:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801a774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a77a:	4293      	cmp	r3, r2
 801a77c:	f47f af75 	bne.w	801a66a <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801a780:	4b15      	ldr	r3, [pc, #84]	; (801a7d8 <pifStorageVar_Create+0x2a8>)
 801a782:	2204      	movs	r2, #4
 801a784:	701a      	strb	r2, [r3, #0]
	return NULL;
 801a786:	2300      	movs	r3, #0
 801a788:	e021      	b.n	801a7ce <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a78c:	887a      	ldrh	r2, [r7, #2]
 801a78e:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a792:	883a      	ldrh	r2, [r7, #0]
 801a794:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a798:	8c3a      	ldrh	r2, [r7, #32]
 801a79a:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801a79c:	2106      	movs	r1, #6
 801a79e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a7a0:	f7f7 fb5f 	bl	8011e62 <pifCrc16>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	461a      	mov	r2, r3
 801a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7aa:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a7ac:	69fb      	ldr	r3, [r7, #28]
 801a7ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a7b0:	69fb      	ldr	r3, [r7, #28]
 801a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7b4:	2100      	movs	r1, #0
 801a7b6:	69f8      	ldr	r0, [r7, #28]
 801a7b8:	f7ff fc48 	bl	801a04c <_writeData>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d104      	bne.n	801a7cc <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801a7c2:	4b05      	ldr	r3, [pc, #20]	; (801a7d8 <pifStorageVar_Create+0x2a8>)
 801a7c4:	220d      	movs	r2, #13
 801a7c6:	701a      	strb	r2, [r3, #0]
        return NULL;
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	e000      	b.n	801a7ce <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	3728      	adds	r7, #40	; 0x28
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	bf00      	nop
 801a7d8:	200020c9 	.word	0x200020c9

0801a7dc <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b086      	sub	sp, #24
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
 801a7e4:	460b      	mov	r3, r1
 801a7e6:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a7ec:	693b      	ldr	r3, [r7, #16]
 801a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7f0:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801a7f2:	693b      	ldr	r3, [r7, #16]
 801a7f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d104      	bne.n	801a806 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801a7fc:	4b3d      	ldr	r3, [pc, #244]	; (801a8f4 <pifStorageVar_Delete+0x118>)
 801a7fe:	220f      	movs	r2, #15
 801a800:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a802:	2300      	movs	r3, #0
 801a804:	e072      	b.n	801a8ec <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	895b      	ldrh	r3, [r3, #10]
 801a80a:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a80c:	e065      	b.n	801a8da <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801a80e:	693b      	ldr	r3, [r7, #16]
 801a810:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a812:	8afa      	ldrh	r2, [r7, #22]
 801a814:	4613      	mov	r3, r2
 801a816:	005b      	lsls	r3, r3, #1
 801a818:	4413      	add	r3, r2
 801a81a:	009b      	lsls	r3, r3, #2
 801a81c:	440b      	add	r3, r1
 801a81e:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801a820:	68bb      	ldr	r3, [r7, #8]
 801a822:	881b      	ldrh	r3, [r3, #0]
 801a824:	887a      	ldrh	r2, [r7, #2]
 801a826:	429a      	cmp	r2, r3
 801a828:	d154      	bne.n	801a8d4 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801a82a:	2206      	movs	r2, #6
 801a82c:	21ff      	movs	r1, #255	; 0xff
 801a82e:	68b8      	ldr	r0, [r7, #8]
 801a830:	f007 fb64 	bl	8021efc <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801a834:	68bb      	ldr	r3, [r7, #8]
 801a836:	891b      	ldrh	r3, [r3, #8]
 801a838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a83c:	4293      	cmp	r3, r2
 801a83e:	d00d      	beq.n	801a85c <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801a840:	693b      	ldr	r3, [r7, #16]
 801a842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	891b      	ldrh	r3, [r3, #8]
 801a848:	4619      	mov	r1, r3
 801a84a:	460b      	mov	r3, r1
 801a84c:	005b      	lsls	r3, r3, #1
 801a84e:	440b      	add	r3, r1
 801a850:	009b      	lsls	r3, r3, #2
 801a852:	4413      	add	r3, r2
 801a854:	68ba      	ldr	r2, [r7, #8]
 801a856:	88d2      	ldrh	r2, [r2, #6]
 801a858:	80da      	strh	r2, [r3, #6]
 801a85a:	e003      	b.n	801a864 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801a85c:	68bb      	ldr	r3, [r7, #8]
 801a85e:	88da      	ldrh	r2, [r3, #6]
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801a864:	68bb      	ldr	r3, [r7, #8]
 801a866:	88db      	ldrh	r3, [r3, #6]
 801a868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a86c:	4293      	cmp	r3, r2
 801a86e:	d00c      	beq.n	801a88a <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801a870:	693b      	ldr	r3, [r7, #16]
 801a872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	88db      	ldrh	r3, [r3, #6]
 801a878:	4619      	mov	r1, r3
 801a87a:	460b      	mov	r3, r1
 801a87c:	005b      	lsls	r3, r3, #1
 801a87e:	440b      	add	r3, r1
 801a880:	009b      	lsls	r3, r3, #2
 801a882:	4413      	add	r3, r2
 801a884:	68ba      	ldr	r2, [r7, #8]
 801a886:	8912      	ldrh	r2, [r2, #8]
 801a888:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	899a      	ldrh	r2, [r3, #12]
 801a88e:	68bb      	ldr	r3, [r7, #8]
 801a890:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801a892:	68bb      	ldr	r3, [r7, #8]
 801a894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a898:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801a89a:	2106      	movs	r1, #6
 801a89c:	68b8      	ldr	r0, [r7, #8]
 801a89e:	f7f7 fae0 	bl	8011e62 <pifCrc16>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	461a      	mov	r2, r3
 801a8a6:	68bb      	ldr	r3, [r7, #8]
 801a8a8:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	8afa      	ldrh	r2, [r7, #22]
 801a8ae:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801a8b0:	693b      	ldr	r3, [r7, #16]
 801a8b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a8b4:	693b      	ldr	r3, [r7, #16]
 801a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8b8:	2100      	movs	r1, #0
 801a8ba:	6938      	ldr	r0, [r7, #16]
 801a8bc:	f7ff fbc6 	bl	801a04c <_writeData>
 801a8c0:	4603      	mov	r3, r0
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d104      	bne.n	801a8d0 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801a8c6:	4b0b      	ldr	r3, [pc, #44]	; (801a8f4 <pifStorageVar_Delete+0x118>)
 801a8c8:	220d      	movs	r2, #13
 801a8ca:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	e00d      	b.n	801a8ec <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801a8d0:	2301      	movs	r3, #1
 801a8d2:	e00b      	b.n	801a8ec <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801a8d4:	68bb      	ldr	r3, [r7, #8]
 801a8d6:	88db      	ldrh	r3, [r3, #6]
 801a8d8:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a8da:	8afb      	ldrh	r3, [r7, #22]
 801a8dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8e0:	4293      	cmp	r3, r2
 801a8e2:	d194      	bne.n	801a80e <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801a8e4:	4b03      	ldr	r3, [pc, #12]	; (801a8f4 <pifStorageVar_Delete+0x118>)
 801a8e6:	220e      	movs	r2, #14
 801a8e8:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801a8ea:	2300      	movs	r3, #0
}
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	3718      	adds	r7, #24
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}
 801a8f4:	200020c9 	.word	0x200020c9

0801a8f8 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801a8f8:	b590      	push	{r4, r7, lr}
 801a8fa:	b087      	sub	sp, #28
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
 801a900:	460b      	mov	r3, r1
 801a902:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801a908:	693b      	ldr	r3, [r7, #16]
 801a90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a90c:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a914:	2b00      	cmp	r3, #0
 801a916:	d104      	bne.n	801a922 <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801a918:	4b1b      	ldr	r3, [pc, #108]	; (801a988 <pifStorageVar_Open+0x90>)
 801a91a:	220f      	movs	r2, #15
 801a91c:	701a      	strb	r2, [r3, #0]
		return NULL;
 801a91e:	2300      	movs	r3, #0
 801a920:	e02d      	b.n	801a97e <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	895b      	ldrh	r3, [r3, #10]
 801a926:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a928:	e020      	b.n	801a96c <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801a92e:	8afa      	ldrh	r2, [r7, #22]
 801a930:	4613      	mov	r3, r2
 801a932:	005b      	lsls	r3, r3, #1
 801a934:	4413      	add	r3, r2
 801a936:	009b      	lsls	r3, r3, #2
 801a938:	440b      	add	r3, r1
 801a93a:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801a93c:	68bb      	ldr	r3, [r7, #8]
 801a93e:	881b      	ldrh	r3, [r3, #0]
 801a940:	887a      	ldrh	r2, [r7, #2]
 801a942:	429a      	cmp	r2, r3
 801a944:	d10f      	bne.n	801a966 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801a946:	68bb      	ldr	r3, [r7, #8]
 801a948:	895c      	ldrh	r4, [r3, #10]
 801a94a:	2106      	movs	r1, #6
 801a94c:	68b8      	ldr	r0, [r7, #8]
 801a94e:	f7f7 fa88 	bl	8011e62 <pifCrc16>
 801a952:	4603      	mov	r3, r0
 801a954:	429c      	cmp	r4, r3
 801a956:	d004      	beq.n	801a962 <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801a958:	4b0b      	ldr	r3, [pc, #44]	; (801a988 <pifStorageVar_Open+0x90>)
 801a95a:	220c      	movs	r2, #12
 801a95c:	701a      	strb	r2, [r3, #0]
				return NULL;
 801a95e:	2300      	movs	r3, #0
 801a960:	e00d      	b.n	801a97e <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801a962:	68bb      	ldr	r3, [r7, #8]
 801a964:	e00b      	b.n	801a97e <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	88db      	ldrh	r3, [r3, #6]
 801a96a:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801a96c:	8afb      	ldrh	r3, [r7, #22]
 801a96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a972:	4293      	cmp	r3, r2
 801a974:	d1d9      	bne.n	801a92a <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801a976:	4b04      	ldr	r3, [pc, #16]	; (801a988 <pifStorageVar_Open+0x90>)
 801a978:	220e      	movs	r2, #14
 801a97a:	701a      	strb	r2, [r3, #0]
	return NULL;
 801a97c:	2300      	movs	r3, #0
}
 801a97e:	4618      	mov	r0, r3
 801a980:	371c      	adds	r7, #28
 801a982:	46bd      	mov	sp, r7
 801a984:	bd90      	pop	{r4, r7, pc}
 801a986:	bf00      	nop
 801a988:	200020c9 	.word	0x200020c9

0801a98c <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b088      	sub	sp, #32
 801a990:	af02      	add	r7, sp, #8
 801a992:	60f8      	str	r0, [r7, #12]
 801a994:	60b9      	str	r1, [r7, #8]
 801a996:	607a      	str	r2, [r7, #4]
 801a998:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801a99e:	697b      	ldr	r3, [r7, #20]
 801a9a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d104      	bne.n	801a9b2 <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801a9a8:	4b0d      	ldr	r3, [pc, #52]	; (801a9e0 <pifStorageVar_Read+0x54>)
 801a9aa:	220f      	movs	r2, #15
 801a9ac:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	e012      	b.n	801a9d8 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	889b      	ldrh	r3, [r3, #4]
 801a9b6:	461a      	mov	r2, r3
 801a9b8:	697b      	ldr	r3, [r7, #20]
 801a9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9bc:	88db      	ldrh	r3, [r3, #6]
 801a9be:	fb02 f303 	mul.w	r3, r2, r3
 801a9c2:	461a      	mov	r2, r3
 801a9c4:	697b      	ldr	r3, [r7, #20]
 801a9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9c8:	88db      	ldrh	r3, [r3, #6]
 801a9ca:	9300      	str	r3, [sp, #0]
 801a9cc:	683b      	ldr	r3, [r7, #0]
 801a9ce:	68b9      	ldr	r1, [r7, #8]
 801a9d0:	6978      	ldr	r0, [r7, #20]
 801a9d2:	f7ff fb0b 	bl	8019fec <_readData>
 801a9d6:	4603      	mov	r3, r0
}
 801a9d8:	4618      	mov	r0, r3
 801a9da:	3718      	adds	r7, #24
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	bd80      	pop	{r7, pc}
 801a9e0:	200020c9 	.word	0x200020c9

0801a9e4 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b086      	sub	sp, #24
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	60f8      	str	r0, [r7, #12]
 801a9ec:	60b9      	str	r1, [r7, #8]
 801a9ee:	607a      	str	r2, [r7, #4]
 801a9f0:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801a9f6:	697b      	ldr	r3, [r7, #20]
 801a9f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d104      	bne.n	801aa0a <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801aa00:	4b0b      	ldr	r3, [pc, #44]	; (801aa30 <pifStorageVar_Write+0x4c>)
 801aa02:	220f      	movs	r2, #15
 801aa04:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801aa06:	2300      	movs	r3, #0
 801aa08:	e00e      	b.n	801aa28 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	889b      	ldrh	r3, [r3, #4]
 801aa0e:	461a      	mov	r2, r3
 801aa10:	697b      	ldr	r3, [r7, #20]
 801aa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa14:	88db      	ldrh	r3, [r3, #6]
 801aa16:	fb02 f303 	mul.w	r3, r2, r3
 801aa1a:	4619      	mov	r1, r3
 801aa1c:	683b      	ldr	r3, [r7, #0]
 801aa1e:	687a      	ldr	r2, [r7, #4]
 801aa20:	6978      	ldr	r0, [r7, #20]
 801aa22:	f7ff fb13 	bl	801a04c <_writeData>
 801aa26:	4603      	mov	r3, r0
}
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3718      	adds	r7, #24
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	200020c9 	.word	0x200020c9

0801aa34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801aa38:	4b0e      	ldr	r3, [pc, #56]	; (801aa74 <HAL_Init+0x40>)
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	4a0d      	ldr	r2, [pc, #52]	; (801aa74 <HAL_Init+0x40>)
 801aa3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801aa42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801aa44:	4b0b      	ldr	r3, [pc, #44]	; (801aa74 <HAL_Init+0x40>)
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	4a0a      	ldr	r2, [pc, #40]	; (801aa74 <HAL_Init+0x40>)
 801aa4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801aa4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801aa50:	4b08      	ldr	r3, [pc, #32]	; (801aa74 <HAL_Init+0x40>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	4a07      	ldr	r2, [pc, #28]	; (801aa74 <HAL_Init+0x40>)
 801aa56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aa5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801aa5c:	2003      	movs	r0, #3
 801aa5e:	f000 fd51 	bl	801b504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801aa62:	2000      	movs	r0, #0
 801aa64:	f000 f808 	bl	801aa78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801aa68:	f7e8 fcf8 	bl	800345c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801aa6c:	2300      	movs	r3, #0
}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	bd80      	pop	{r7, pc}
 801aa72:	bf00      	nop
 801aa74:	40023c00 	.word	0x40023c00

0801aa78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b082      	sub	sp, #8
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801aa80:	4b12      	ldr	r3, [pc, #72]	; (801aacc <HAL_InitTick+0x54>)
 801aa82:	681a      	ldr	r2, [r3, #0]
 801aa84:	4b12      	ldr	r3, [pc, #72]	; (801aad0 <HAL_InitTick+0x58>)
 801aa86:	781b      	ldrb	r3, [r3, #0]
 801aa88:	4619      	mov	r1, r3
 801aa8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801aa8e:	fbb3 f3f1 	udiv	r3, r3, r1
 801aa92:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa96:	4618      	mov	r0, r3
 801aa98:	f000 fd77 	bl	801b58a <HAL_SYSTICK_Config>
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d001      	beq.n	801aaa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801aaa2:	2301      	movs	r3, #1
 801aaa4:	e00e      	b.n	801aac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	2b0f      	cmp	r3, #15
 801aaaa:	d80a      	bhi.n	801aac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801aaac:	2200      	movs	r2, #0
 801aaae:	6879      	ldr	r1, [r7, #4]
 801aab0:	f04f 30ff 	mov.w	r0, #4294967295
 801aab4:	f000 fd31 	bl	801b51a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801aab8:	4a06      	ldr	r2, [pc, #24]	; (801aad4 <HAL_InitTick+0x5c>)
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801aabe:	2300      	movs	r3, #0
 801aac0:	e000      	b.n	801aac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801aac2:	2301      	movs	r3, #1
}
 801aac4:	4618      	mov	r0, r3
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}
 801aacc:	20000020 	.word	0x20000020
 801aad0:	20000094 	.word	0x20000094
 801aad4:	20000090 	.word	0x20000090

0801aad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801aad8:	b480      	push	{r7}
 801aada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801aadc:	4b06      	ldr	r3, [pc, #24]	; (801aaf8 <HAL_IncTick+0x20>)
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	461a      	mov	r2, r3
 801aae2:	4b06      	ldr	r3, [pc, #24]	; (801aafc <HAL_IncTick+0x24>)
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	4413      	add	r3, r2
 801aae8:	4a04      	ldr	r2, [pc, #16]	; (801aafc <HAL_IncTick+0x24>)
 801aaea:	6013      	str	r3, [r2, #0]
}
 801aaec:	bf00      	nop
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf4:	4770      	bx	lr
 801aaf6:	bf00      	nop
 801aaf8:	20000094 	.word	0x20000094
 801aafc:	20002278 	.word	0x20002278

0801ab00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801ab00:	b480      	push	{r7}
 801ab02:	af00      	add	r7, sp, #0
  return uwTick;
 801ab04:	4b03      	ldr	r3, [pc, #12]	; (801ab14 <HAL_GetTick+0x14>)
 801ab06:	681b      	ldr	r3, [r3, #0]
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab10:	4770      	bx	lr
 801ab12:	bf00      	nop
 801ab14:	20002278 	.word	0x20002278

0801ab18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b084      	sub	sp, #16
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801ab20:	2300      	movs	r3, #0
 801ab22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d101      	bne.n	801ab2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801ab2a:	2301      	movs	r3, #1
 801ab2c:	e033      	b.n	801ab96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d109      	bne.n	801ab4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801ab36:	6878      	ldr	r0, [r7, #4]
 801ab38:	f7e8 fcb8 	bl	80034ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	2200      	movs	r2, #0
 801ab40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2200      	movs	r2, #0
 801ab46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab4e:	f003 0310 	and.w	r3, r3, #16
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d118      	bne.n	801ab88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801ab5e:	f023 0302 	bic.w	r3, r3, #2
 801ab62:	f043 0202 	orr.w	r2, r3, #2
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801ab6a:	6878      	ldr	r0, [r7, #4]
 801ab6c:	f000 fa58 	bl	801b020 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	2200      	movs	r2, #0
 801ab74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab7a:	f023 0303 	bic.w	r3, r3, #3
 801ab7e:	f043 0201 	orr.w	r2, r3, #1
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	641a      	str	r2, [r3, #64]	; 0x40
 801ab86:	e001      	b.n	801ab8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801ab88:	2301      	movs	r3, #1
 801ab8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	2200      	movs	r2, #0
 801ab90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3710      	adds	r7, #16
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}
	...

0801aba0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b086      	sub	sp, #24
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	60f8      	str	r0, [r7, #12]
 801aba8:	60b9      	str	r1, [r7, #8]
 801abaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801abac:	2300      	movs	r3, #0
 801abae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801abb6:	2b01      	cmp	r3, #1
 801abb8:	d101      	bne.n	801abbe <HAL_ADC_Start_DMA+0x1e>
 801abba:	2302      	movs	r3, #2
 801abbc:	e0ce      	b.n	801ad5c <HAL_ADC_Start_DMA+0x1bc>
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	2201      	movs	r2, #1
 801abc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	689b      	ldr	r3, [r3, #8]
 801abcc:	f003 0301 	and.w	r3, r3, #1
 801abd0:	2b01      	cmp	r3, #1
 801abd2:	d018      	beq.n	801ac06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	689a      	ldr	r2, [r3, #8]
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	f042 0201 	orr.w	r2, r2, #1
 801abe2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801abe4:	4b5f      	ldr	r3, [pc, #380]	; (801ad64 <HAL_ADC_Start_DMA+0x1c4>)
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	4a5f      	ldr	r2, [pc, #380]	; (801ad68 <HAL_ADC_Start_DMA+0x1c8>)
 801abea:	fba2 2303 	umull	r2, r3, r2, r3
 801abee:	0c9a      	lsrs	r2, r3, #18
 801abf0:	4613      	mov	r3, r2
 801abf2:	005b      	lsls	r3, r3, #1
 801abf4:	4413      	add	r3, r2
 801abf6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801abf8:	e002      	b.n	801ac00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801abfa:	693b      	ldr	r3, [r7, #16]
 801abfc:	3b01      	subs	r3, #1
 801abfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801ac00:	693b      	ldr	r3, [r7, #16]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d1f9      	bne.n	801abfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	689b      	ldr	r3, [r3, #8]
 801ac0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ac10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ac14:	d107      	bne.n	801ac26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	689a      	ldr	r2, [r3, #8]
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ac24:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	689b      	ldr	r3, [r3, #8]
 801ac2c:	f003 0301 	and.w	r3, r3, #1
 801ac30:	2b01      	cmp	r3, #1
 801ac32:	f040 8086 	bne.w	801ad42 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801ac3e:	f023 0301 	bic.w	r3, r3, #1
 801ac42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	685b      	ldr	r3, [r3, #4]
 801ac50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d007      	beq.n	801ac68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801ac60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ac70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ac74:	d106      	bne.n	801ac84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac7a:	f023 0206 	bic.w	r2, r3, #6
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	645a      	str	r2, [r3, #68]	; 0x44
 801ac82:	e002      	b.n	801ac8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	2200      	movs	r2, #0
 801ac88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	2200      	movs	r2, #0
 801ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801ac92:	4b36      	ldr	r3, [pc, #216]	; (801ad6c <HAL_ADC_Start_DMA+0x1cc>)
 801ac94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac9a:	4a35      	ldr	r2, [pc, #212]	; (801ad70 <HAL_ADC_Start_DMA+0x1d0>)
 801ac9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aca2:	4a34      	ldr	r2, [pc, #208]	; (801ad74 <HAL_ADC_Start_DMA+0x1d4>)
 801aca4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acaa:	4a33      	ldr	r2, [pc, #204]	; (801ad78 <HAL_ADC_Start_DMA+0x1d8>)
 801acac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801acb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	685a      	ldr	r2, [r3, #4]
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801acc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	689a      	ldr	r2, [r3, #8]
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801acd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	334c      	adds	r3, #76	; 0x4c
 801ace2:	4619      	mov	r1, r3
 801ace4:	68ba      	ldr	r2, [r7, #8]
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	f000 fd0a 	bl	801b700 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801acec:	697b      	ldr	r3, [r7, #20]
 801acee:	685b      	ldr	r3, [r3, #4]
 801acf0:	f003 031f 	and.w	r3, r3, #31
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d10f      	bne.n	801ad18 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	689b      	ldr	r3, [r3, #8]
 801acfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d129      	bne.n	801ad5a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	689a      	ldr	r2, [r3, #8]
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801ad14:	609a      	str	r2, [r3, #8]
 801ad16:	e020      	b.n	801ad5a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	4a17      	ldr	r2, [pc, #92]	; (801ad7c <HAL_ADC_Start_DMA+0x1dc>)
 801ad1e:	4293      	cmp	r3, r2
 801ad20:	d11b      	bne.n	801ad5a <HAL_ADC_Start_DMA+0x1ba>
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	689b      	ldr	r3, [r3, #8]
 801ad28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d114      	bne.n	801ad5a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	689a      	ldr	r2, [r3, #8]
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801ad3e:	609a      	str	r2, [r3, #8]
 801ad40:	e00b      	b.n	801ad5a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad46:	f043 0210 	orr.w	r2, r3, #16
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad52:	f043 0201 	orr.w	r2, r3, #1
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801ad5a:	2300      	movs	r3, #0
}
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	3718      	adds	r7, #24
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bd80      	pop	{r7, pc}
 801ad64:	20000020 	.word	0x20000020
 801ad68:	431bde83 	.word	0x431bde83
 801ad6c:	40012300 	.word	0x40012300
 801ad70:	0801b219 	.word	0x0801b219
 801ad74:	0801b2d3 	.word	0x0801b2d3
 801ad78:	0801b2ef 	.word	0x0801b2ef
 801ad7c:	40012000 	.word	0x40012000

0801ad80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ad80:	b480      	push	{r7}
 801ad82:	b083      	sub	sp, #12
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801ad88:	bf00      	nop
 801ad8a:	370c      	adds	r7, #12
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad92:	4770      	bx	lr

0801ad94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ad94:	b480      	push	{r7}
 801ad96:	b083      	sub	sp, #12
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801ad9c:	bf00      	nop
 801ad9e:	370c      	adds	r7, #12
 801ada0:	46bd      	mov	sp, r7
 801ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada6:	4770      	bx	lr

0801ada8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801ada8:	b480      	push	{r7}
 801adaa:	b083      	sub	sp, #12
 801adac:	af00      	add	r7, sp, #0
 801adae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801adb0:	bf00      	nop
 801adb2:	370c      	adds	r7, #12
 801adb4:	46bd      	mov	sp, r7
 801adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adba:	4770      	bx	lr

0801adbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801adbc:	b480      	push	{r7}
 801adbe:	b085      	sub	sp, #20
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
 801adc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801adc6:	2300      	movs	r3, #0
 801adc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801add0:	2b01      	cmp	r3, #1
 801add2:	d101      	bne.n	801add8 <HAL_ADC_ConfigChannel+0x1c>
 801add4:	2302      	movs	r3, #2
 801add6:	e113      	b.n	801b000 <HAL_ADC_ConfigChannel+0x244>
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2201      	movs	r2, #1
 801addc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801ade0:	683b      	ldr	r3, [r7, #0]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	2b09      	cmp	r3, #9
 801ade6:	d925      	bls.n	801ae34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	68d9      	ldr	r1, [r3, #12]
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	b29b      	uxth	r3, r3
 801adf4:	461a      	mov	r2, r3
 801adf6:	4613      	mov	r3, r2
 801adf8:	005b      	lsls	r3, r3, #1
 801adfa:	4413      	add	r3, r2
 801adfc:	3b1e      	subs	r3, #30
 801adfe:	2207      	movs	r2, #7
 801ae00:	fa02 f303 	lsl.w	r3, r2, r3
 801ae04:	43da      	mvns	r2, r3
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	400a      	ands	r2, r1
 801ae0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	68d9      	ldr	r1, [r3, #12]
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	689a      	ldr	r2, [r3, #8]
 801ae18:	683b      	ldr	r3, [r7, #0]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	b29b      	uxth	r3, r3
 801ae1e:	4618      	mov	r0, r3
 801ae20:	4603      	mov	r3, r0
 801ae22:	005b      	lsls	r3, r3, #1
 801ae24:	4403      	add	r3, r0
 801ae26:	3b1e      	subs	r3, #30
 801ae28:	409a      	lsls	r2, r3
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	430a      	orrs	r2, r1
 801ae30:	60da      	str	r2, [r3, #12]
 801ae32:	e022      	b.n	801ae7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	6919      	ldr	r1, [r3, #16]
 801ae3a:	683b      	ldr	r3, [r7, #0]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	b29b      	uxth	r3, r3
 801ae40:	461a      	mov	r2, r3
 801ae42:	4613      	mov	r3, r2
 801ae44:	005b      	lsls	r3, r3, #1
 801ae46:	4413      	add	r3, r2
 801ae48:	2207      	movs	r2, #7
 801ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae4e:	43da      	mvns	r2, r3
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	400a      	ands	r2, r1
 801ae56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	6919      	ldr	r1, [r3, #16]
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	689a      	ldr	r2, [r3, #8]
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	b29b      	uxth	r3, r3
 801ae68:	4618      	mov	r0, r3
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	005b      	lsls	r3, r3, #1
 801ae6e:	4403      	add	r3, r0
 801ae70:	409a      	lsls	r2, r3
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	430a      	orrs	r2, r1
 801ae78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	685b      	ldr	r3, [r3, #4]
 801ae7e:	2b06      	cmp	r3, #6
 801ae80:	d824      	bhi.n	801aecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	685a      	ldr	r2, [r3, #4]
 801ae8c:	4613      	mov	r3, r2
 801ae8e:	009b      	lsls	r3, r3, #2
 801ae90:	4413      	add	r3, r2
 801ae92:	3b05      	subs	r3, #5
 801ae94:	221f      	movs	r2, #31
 801ae96:	fa02 f303 	lsl.w	r3, r2, r3
 801ae9a:	43da      	mvns	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	400a      	ands	r2, r1
 801aea2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801aeaa:	683b      	ldr	r3, [r7, #0]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	b29b      	uxth	r3, r3
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	685a      	ldr	r2, [r3, #4]
 801aeb6:	4613      	mov	r3, r2
 801aeb8:	009b      	lsls	r3, r3, #2
 801aeba:	4413      	add	r3, r2
 801aebc:	3b05      	subs	r3, #5
 801aebe:	fa00 f203 	lsl.w	r2, r0, r3
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	430a      	orrs	r2, r1
 801aec8:	635a      	str	r2, [r3, #52]	; 0x34
 801aeca:	e04c      	b.n	801af66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	685b      	ldr	r3, [r3, #4]
 801aed0:	2b0c      	cmp	r3, #12
 801aed2:	d824      	bhi.n	801af1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	685a      	ldr	r2, [r3, #4]
 801aede:	4613      	mov	r3, r2
 801aee0:	009b      	lsls	r3, r3, #2
 801aee2:	4413      	add	r3, r2
 801aee4:	3b23      	subs	r3, #35	; 0x23
 801aee6:	221f      	movs	r2, #31
 801aee8:	fa02 f303 	lsl.w	r3, r2, r3
 801aeec:	43da      	mvns	r2, r3
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	400a      	ands	r2, r1
 801aef4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	b29b      	uxth	r3, r3
 801af02:	4618      	mov	r0, r3
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	685a      	ldr	r2, [r3, #4]
 801af08:	4613      	mov	r3, r2
 801af0a:	009b      	lsls	r3, r3, #2
 801af0c:	4413      	add	r3, r2
 801af0e:	3b23      	subs	r3, #35	; 0x23
 801af10:	fa00 f203 	lsl.w	r2, r0, r3
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	430a      	orrs	r2, r1
 801af1a:	631a      	str	r2, [r3, #48]	; 0x30
 801af1c:	e023      	b.n	801af66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801af24:	683b      	ldr	r3, [r7, #0]
 801af26:	685a      	ldr	r2, [r3, #4]
 801af28:	4613      	mov	r3, r2
 801af2a:	009b      	lsls	r3, r3, #2
 801af2c:	4413      	add	r3, r2
 801af2e:	3b41      	subs	r3, #65	; 0x41
 801af30:	221f      	movs	r2, #31
 801af32:	fa02 f303 	lsl.w	r3, r2, r3
 801af36:	43da      	mvns	r2, r3
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	400a      	ands	r2, r1
 801af3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	b29b      	uxth	r3, r3
 801af4c:	4618      	mov	r0, r3
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	685a      	ldr	r2, [r3, #4]
 801af52:	4613      	mov	r3, r2
 801af54:	009b      	lsls	r3, r3, #2
 801af56:	4413      	add	r3, r2
 801af58:	3b41      	subs	r3, #65	; 0x41
 801af5a:	fa00 f203 	lsl.w	r2, r0, r3
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	430a      	orrs	r2, r1
 801af64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801af66:	4b29      	ldr	r3, [pc, #164]	; (801b00c <HAL_ADC_ConfigChannel+0x250>)
 801af68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	4a28      	ldr	r2, [pc, #160]	; (801b010 <HAL_ADC_ConfigChannel+0x254>)
 801af70:	4293      	cmp	r3, r2
 801af72:	d10f      	bne.n	801af94 <HAL_ADC_ConfigChannel+0x1d8>
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	2b12      	cmp	r3, #18
 801af7a:	d10b      	bne.n	801af94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	685b      	ldr	r3, [r3, #4]
 801af80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	685b      	ldr	r3, [r3, #4]
 801af8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	4a1d      	ldr	r2, [pc, #116]	; (801b010 <HAL_ADC_ConfigChannel+0x254>)
 801af9a:	4293      	cmp	r3, r2
 801af9c:	d12b      	bne.n	801aff6 <HAL_ADC_ConfigChannel+0x23a>
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	4a1c      	ldr	r2, [pc, #112]	; (801b014 <HAL_ADC_ConfigChannel+0x258>)
 801afa4:	4293      	cmp	r3, r2
 801afa6:	d003      	beq.n	801afb0 <HAL_ADC_ConfigChannel+0x1f4>
 801afa8:	683b      	ldr	r3, [r7, #0]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	2b11      	cmp	r3, #17
 801afae:	d122      	bne.n	801aff6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	685b      	ldr	r3, [r3, #4]
 801afb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	685b      	ldr	r3, [r3, #4]
 801afc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801afc8:	683b      	ldr	r3, [r7, #0]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	4a11      	ldr	r2, [pc, #68]	; (801b014 <HAL_ADC_ConfigChannel+0x258>)
 801afce:	4293      	cmp	r3, r2
 801afd0:	d111      	bne.n	801aff6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801afd2:	4b11      	ldr	r3, [pc, #68]	; (801b018 <HAL_ADC_ConfigChannel+0x25c>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	4a11      	ldr	r2, [pc, #68]	; (801b01c <HAL_ADC_ConfigChannel+0x260>)
 801afd8:	fba2 2303 	umull	r2, r3, r2, r3
 801afdc:	0c9a      	lsrs	r2, r3, #18
 801afde:	4613      	mov	r3, r2
 801afe0:	009b      	lsls	r3, r3, #2
 801afe2:	4413      	add	r3, r2
 801afe4:	005b      	lsls	r3, r3, #1
 801afe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801afe8:	e002      	b.n	801aff0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801afea:	68bb      	ldr	r3, [r7, #8]
 801afec:	3b01      	subs	r3, #1
 801afee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d1f9      	bne.n	801afea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	2200      	movs	r2, #0
 801affa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801affe:	2300      	movs	r3, #0
}
 801b000:	4618      	mov	r0, r3
 801b002:	3714      	adds	r7, #20
 801b004:	46bd      	mov	sp, r7
 801b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00a:	4770      	bx	lr
 801b00c:	40012300 	.word	0x40012300
 801b010:	40012000 	.word	0x40012000
 801b014:	10000012 	.word	0x10000012
 801b018:	20000020 	.word	0x20000020
 801b01c:	431bde83 	.word	0x431bde83

0801b020 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801b020:	b480      	push	{r7}
 801b022:	b085      	sub	sp, #20
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801b028:	4b79      	ldr	r3, [pc, #484]	; (801b210 <ADC_Init+0x1f0>)
 801b02a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	685b      	ldr	r3, [r3, #4]
 801b030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	685a      	ldr	r2, [r3, #4]
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	685b      	ldr	r3, [r3, #4]
 801b040:	431a      	orrs	r2, r3
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	685a      	ldr	r2, [r3, #4]
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	6859      	ldr	r1, [r3, #4]
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	691b      	ldr	r3, [r3, #16]
 801b060:	021a      	lsls	r2, r3, #8
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	430a      	orrs	r2, r1
 801b068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	685a      	ldr	r2, [r3, #4]
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801b078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	6859      	ldr	r1, [r3, #4]
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	689a      	ldr	r2, [r3, #8]
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	430a      	orrs	r2, r1
 801b08a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	689a      	ldr	r2, [r3, #8]
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801b09a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	6899      	ldr	r1, [r3, #8]
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	68da      	ldr	r2, [r3, #12]
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	430a      	orrs	r2, r1
 801b0ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0b2:	4a58      	ldr	r2, [pc, #352]	; (801b214 <ADC_Init+0x1f4>)
 801b0b4:	4293      	cmp	r3, r2
 801b0b6:	d022      	beq.n	801b0fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	689a      	ldr	r2, [r3, #8]
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801b0c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	6899      	ldr	r1, [r3, #8]
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	430a      	orrs	r2, r1
 801b0d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	689a      	ldr	r2, [r3, #8]
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801b0e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	6899      	ldr	r1, [r3, #8]
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	430a      	orrs	r2, r1
 801b0fa:	609a      	str	r2, [r3, #8]
 801b0fc:	e00f      	b.n	801b11e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	689a      	ldr	r2, [r3, #8]
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801b10c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	689a      	ldr	r2, [r3, #8]
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801b11c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	689a      	ldr	r2, [r3, #8]
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	f022 0202 	bic.w	r2, r2, #2
 801b12c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	6899      	ldr	r1, [r3, #8]
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	7e1b      	ldrb	r3, [r3, #24]
 801b138:	005a      	lsls	r2, r3, #1
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	430a      	orrs	r2, r1
 801b140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	f893 3020 	ldrb.w	r3, [r3, #32]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d01b      	beq.n	801b184 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	685a      	ldr	r2, [r3, #4]
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b15a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	685a      	ldr	r2, [r3, #4]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801b16a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	6859      	ldr	r1, [r3, #4]
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b176:	3b01      	subs	r3, #1
 801b178:	035a      	lsls	r2, r3, #13
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	430a      	orrs	r2, r1
 801b180:	605a      	str	r2, [r3, #4]
 801b182:	e007      	b.n	801b194 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	685a      	ldr	r2, [r3, #4]
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801b192:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801b1a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	69db      	ldr	r3, [r3, #28]
 801b1ae:	3b01      	subs	r3, #1
 801b1b0:	051a      	lsls	r2, r3, #20
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	430a      	orrs	r2, r1
 801b1b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	689a      	ldr	r2, [r3, #8]
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801b1c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	6899      	ldr	r1, [r3, #8]
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b1d6:	025a      	lsls	r2, r3, #9
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	430a      	orrs	r2, r1
 801b1de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	689a      	ldr	r2, [r3, #8]
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b1ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	6899      	ldr	r1, [r3, #8]
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	695b      	ldr	r3, [r3, #20]
 801b1fa:	029a      	lsls	r2, r3, #10
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	430a      	orrs	r2, r1
 801b202:	609a      	str	r2, [r3, #8]
}
 801b204:	bf00      	nop
 801b206:	3714      	adds	r7, #20
 801b208:	46bd      	mov	sp, r7
 801b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b20e:	4770      	bx	lr
 801b210:	40012300 	.word	0x40012300
 801b214:	0f000001 	.word	0x0f000001

0801b218 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b084      	sub	sp, #16
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b224:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b22a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d13c      	bne.n	801b2ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b236:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	689b      	ldr	r3, [r3, #8]
 801b244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d12b      	bne.n	801b2a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801b250:	2b00      	cmp	r3, #0
 801b252:	d127      	bne.n	801b2a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b25a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d006      	beq.n	801b270 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	689b      	ldr	r3, [r3, #8]
 801b268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d119      	bne.n	801b2a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	685a      	ldr	r2, [r3, #4]
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	f022 0220 	bic.w	r2, r2, #32
 801b27e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b294:	2b00      	cmp	r3, #0
 801b296:	d105      	bne.n	801b2a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b29c:	f043 0201 	orr.w	r2, r3, #1
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801b2a4:	68f8      	ldr	r0, [r7, #12]
 801b2a6:	f7ff fd6b 	bl	801ad80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801b2aa:	e00e      	b.n	801b2ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2b0:	f003 0310 	and.w	r3, r3, #16
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d003      	beq.n	801b2c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801b2b8:	68f8      	ldr	r0, [r7, #12]
 801b2ba:	f7ff fd75 	bl	801ada8 <HAL_ADC_ErrorCallback>
}
 801b2be:	e004      	b.n	801b2ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b2c6:	6878      	ldr	r0, [r7, #4]
 801b2c8:	4798      	blx	r3
}
 801b2ca:	bf00      	nop
 801b2cc:	3710      	adds	r7, #16
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	bd80      	pop	{r7, pc}

0801b2d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801b2d2:	b580      	push	{r7, lr}
 801b2d4:	b084      	sub	sp, #16
 801b2d6:	af00      	add	r7, sp, #0
 801b2d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801b2e0:	68f8      	ldr	r0, [r7, #12]
 801b2e2:	f7ff fd57 	bl	801ad94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b2e6:	bf00      	nop
 801b2e8:	3710      	adds	r7, #16
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}

0801b2ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801b2ee:	b580      	push	{r7, lr}
 801b2f0:	b084      	sub	sp, #16
 801b2f2:	af00      	add	r7, sp, #0
 801b2f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	2240      	movs	r2, #64	; 0x40
 801b300:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b306:	f043 0204 	orr.w	r2, r3, #4
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801b30e:	68f8      	ldr	r0, [r7, #12]
 801b310:	f7ff fd4a 	bl	801ada8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b314:	bf00      	nop
 801b316:	3710      	adds	r7, #16
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}

0801b31c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b31c:	b480      	push	{r7}
 801b31e:	b085      	sub	sp, #20
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	f003 0307 	and.w	r3, r3, #7
 801b32a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b32c:	4b0c      	ldr	r3, [pc, #48]	; (801b360 <__NVIC_SetPriorityGrouping+0x44>)
 801b32e:	68db      	ldr	r3, [r3, #12]
 801b330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b332:	68ba      	ldr	r2, [r7, #8]
 801b334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b338:	4013      	ands	r3, r2
 801b33a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b34c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b34e:	4a04      	ldr	r2, [pc, #16]	; (801b360 <__NVIC_SetPriorityGrouping+0x44>)
 801b350:	68bb      	ldr	r3, [r7, #8]
 801b352:	60d3      	str	r3, [r2, #12]
}
 801b354:	bf00      	nop
 801b356:	3714      	adds	r7, #20
 801b358:	46bd      	mov	sp, r7
 801b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b35e:	4770      	bx	lr
 801b360:	e000ed00 	.word	0xe000ed00

0801b364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b364:	b480      	push	{r7}
 801b366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b368:	4b04      	ldr	r3, [pc, #16]	; (801b37c <__NVIC_GetPriorityGrouping+0x18>)
 801b36a:	68db      	ldr	r3, [r3, #12]
 801b36c:	0a1b      	lsrs	r3, r3, #8
 801b36e:	f003 0307 	and.w	r3, r3, #7
}
 801b372:	4618      	mov	r0, r3
 801b374:	46bd      	mov	sp, r7
 801b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37a:	4770      	bx	lr
 801b37c:	e000ed00 	.word	0xe000ed00

0801b380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b380:	b480      	push	{r7}
 801b382:	b083      	sub	sp, #12
 801b384:	af00      	add	r7, sp, #0
 801b386:	4603      	mov	r3, r0
 801b388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	db0b      	blt.n	801b3aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b392:	79fb      	ldrb	r3, [r7, #7]
 801b394:	f003 021f 	and.w	r2, r3, #31
 801b398:	4907      	ldr	r1, [pc, #28]	; (801b3b8 <__NVIC_EnableIRQ+0x38>)
 801b39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b39e:	095b      	lsrs	r3, r3, #5
 801b3a0:	2001      	movs	r0, #1
 801b3a2:	fa00 f202 	lsl.w	r2, r0, r2
 801b3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801b3aa:	bf00      	nop
 801b3ac:	370c      	adds	r7, #12
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b4:	4770      	bx	lr
 801b3b6:	bf00      	nop
 801b3b8:	e000e100 	.word	0xe000e100

0801b3bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801b3bc:	b480      	push	{r7}
 801b3be:	b083      	sub	sp, #12
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b3c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	db12      	blt.n	801b3f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b3ce:	79fb      	ldrb	r3, [r7, #7]
 801b3d0:	f003 021f 	and.w	r2, r3, #31
 801b3d4:	490a      	ldr	r1, [pc, #40]	; (801b400 <__NVIC_DisableIRQ+0x44>)
 801b3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3da:	095b      	lsrs	r3, r3, #5
 801b3dc:	2001      	movs	r0, #1
 801b3de:	fa00 f202 	lsl.w	r2, r0, r2
 801b3e2:	3320      	adds	r3, #32
 801b3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801b3e8:	f3bf 8f4f 	dsb	sy
}
 801b3ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801b3ee:	f3bf 8f6f 	isb	sy
}
 801b3f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801b3f4:	bf00      	nop
 801b3f6:	370c      	adds	r7, #12
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fe:	4770      	bx	lr
 801b400:	e000e100 	.word	0xe000e100

0801b404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b404:	b480      	push	{r7}
 801b406:	b083      	sub	sp, #12
 801b408:	af00      	add	r7, sp, #0
 801b40a:	4603      	mov	r3, r0
 801b40c:	6039      	str	r1, [r7, #0]
 801b40e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b414:	2b00      	cmp	r3, #0
 801b416:	db0a      	blt.n	801b42e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	b2da      	uxtb	r2, r3
 801b41c:	490c      	ldr	r1, [pc, #48]	; (801b450 <__NVIC_SetPriority+0x4c>)
 801b41e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b422:	0112      	lsls	r2, r2, #4
 801b424:	b2d2      	uxtb	r2, r2
 801b426:	440b      	add	r3, r1
 801b428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b42c:	e00a      	b.n	801b444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b42e:	683b      	ldr	r3, [r7, #0]
 801b430:	b2da      	uxtb	r2, r3
 801b432:	4908      	ldr	r1, [pc, #32]	; (801b454 <__NVIC_SetPriority+0x50>)
 801b434:	79fb      	ldrb	r3, [r7, #7]
 801b436:	f003 030f 	and.w	r3, r3, #15
 801b43a:	3b04      	subs	r3, #4
 801b43c:	0112      	lsls	r2, r2, #4
 801b43e:	b2d2      	uxtb	r2, r2
 801b440:	440b      	add	r3, r1
 801b442:	761a      	strb	r2, [r3, #24]
}
 801b444:	bf00      	nop
 801b446:	370c      	adds	r7, #12
 801b448:	46bd      	mov	sp, r7
 801b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b44e:	4770      	bx	lr
 801b450:	e000e100 	.word	0xe000e100
 801b454:	e000ed00 	.word	0xe000ed00

0801b458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b458:	b480      	push	{r7}
 801b45a:	b089      	sub	sp, #36	; 0x24
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	60f8      	str	r0, [r7, #12]
 801b460:	60b9      	str	r1, [r7, #8]
 801b462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	f003 0307 	and.w	r3, r3, #7
 801b46a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b46c:	69fb      	ldr	r3, [r7, #28]
 801b46e:	f1c3 0307 	rsb	r3, r3, #7
 801b472:	2b04      	cmp	r3, #4
 801b474:	bf28      	it	cs
 801b476:	2304      	movcs	r3, #4
 801b478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b47a:	69fb      	ldr	r3, [r7, #28]
 801b47c:	3304      	adds	r3, #4
 801b47e:	2b06      	cmp	r3, #6
 801b480:	d902      	bls.n	801b488 <NVIC_EncodePriority+0x30>
 801b482:	69fb      	ldr	r3, [r7, #28]
 801b484:	3b03      	subs	r3, #3
 801b486:	e000      	b.n	801b48a <NVIC_EncodePriority+0x32>
 801b488:	2300      	movs	r3, #0
 801b48a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b48c:	f04f 32ff 	mov.w	r2, #4294967295
 801b490:	69bb      	ldr	r3, [r7, #24]
 801b492:	fa02 f303 	lsl.w	r3, r2, r3
 801b496:	43da      	mvns	r2, r3
 801b498:	68bb      	ldr	r3, [r7, #8]
 801b49a:	401a      	ands	r2, r3
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b4a0:	f04f 31ff 	mov.w	r1, #4294967295
 801b4a4:	697b      	ldr	r3, [r7, #20]
 801b4a6:	fa01 f303 	lsl.w	r3, r1, r3
 801b4aa:	43d9      	mvns	r1, r3
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b4b0:	4313      	orrs	r3, r2
         );
}
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	3724      	adds	r7, #36	; 0x24
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4bc:	4770      	bx	lr
	...

0801b4c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b082      	sub	sp, #8
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	3b01      	subs	r3, #1
 801b4cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b4d0:	d301      	bcc.n	801b4d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b4d2:	2301      	movs	r3, #1
 801b4d4:	e00f      	b.n	801b4f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b4d6:	4a0a      	ldr	r2, [pc, #40]	; (801b500 <SysTick_Config+0x40>)
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	3b01      	subs	r3, #1
 801b4dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b4de:	210f      	movs	r1, #15
 801b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b4e4:	f7ff ff8e 	bl	801b404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b4e8:	4b05      	ldr	r3, [pc, #20]	; (801b500 <SysTick_Config+0x40>)
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b4ee:	4b04      	ldr	r3, [pc, #16]	; (801b500 <SysTick_Config+0x40>)
 801b4f0:	2207      	movs	r2, #7
 801b4f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b4f4:	2300      	movs	r3, #0
}
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	3708      	adds	r7, #8
 801b4fa:	46bd      	mov	sp, r7
 801b4fc:	bd80      	pop	{r7, pc}
 801b4fe:	bf00      	nop
 801b500:	e000e010 	.word	0xe000e010

0801b504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b082      	sub	sp, #8
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b50c:	6878      	ldr	r0, [r7, #4]
 801b50e:	f7ff ff05 	bl	801b31c <__NVIC_SetPriorityGrouping>
}
 801b512:	bf00      	nop
 801b514:	3708      	adds	r7, #8
 801b516:	46bd      	mov	sp, r7
 801b518:	bd80      	pop	{r7, pc}

0801b51a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801b51a:	b580      	push	{r7, lr}
 801b51c:	b086      	sub	sp, #24
 801b51e:	af00      	add	r7, sp, #0
 801b520:	4603      	mov	r3, r0
 801b522:	60b9      	str	r1, [r7, #8]
 801b524:	607a      	str	r2, [r7, #4]
 801b526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801b528:	2300      	movs	r3, #0
 801b52a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801b52c:	f7ff ff1a 	bl	801b364 <__NVIC_GetPriorityGrouping>
 801b530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b532:	687a      	ldr	r2, [r7, #4]
 801b534:	68b9      	ldr	r1, [r7, #8]
 801b536:	6978      	ldr	r0, [r7, #20]
 801b538:	f7ff ff8e 	bl	801b458 <NVIC_EncodePriority>
 801b53c:	4602      	mov	r2, r0
 801b53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b542:	4611      	mov	r1, r2
 801b544:	4618      	mov	r0, r3
 801b546:	f7ff ff5d 	bl	801b404 <__NVIC_SetPriority>
}
 801b54a:	bf00      	nop
 801b54c:	3718      	adds	r7, #24
 801b54e:	46bd      	mov	sp, r7
 801b550:	bd80      	pop	{r7, pc}

0801b552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b552:	b580      	push	{r7, lr}
 801b554:	b082      	sub	sp, #8
 801b556:	af00      	add	r7, sp, #0
 801b558:	4603      	mov	r3, r0
 801b55a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b55c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b560:	4618      	mov	r0, r3
 801b562:	f7ff ff0d 	bl	801b380 <__NVIC_EnableIRQ>
}
 801b566:	bf00      	nop
 801b568:	3708      	adds	r7, #8
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}

0801b56e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801b56e:	b580      	push	{r7, lr}
 801b570:	b082      	sub	sp, #8
 801b572:	af00      	add	r7, sp, #0
 801b574:	4603      	mov	r3, r0
 801b576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801b578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7ff ff1d 	bl	801b3bc <__NVIC_DisableIRQ>
}
 801b582:	bf00      	nop
 801b584:	3708      	adds	r7, #8
 801b586:	46bd      	mov	sp, r7
 801b588:	bd80      	pop	{r7, pc}

0801b58a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b58a:	b580      	push	{r7, lr}
 801b58c:	b082      	sub	sp, #8
 801b58e:	af00      	add	r7, sp, #0
 801b590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b592:	6878      	ldr	r0, [r7, #4]
 801b594:	f7ff ff94 	bl	801b4c0 <SysTick_Config>
 801b598:	4603      	mov	r3, r0
}
 801b59a:	4618      	mov	r0, r3
 801b59c:	3708      	adds	r7, #8
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	bd80      	pop	{r7, pc}
	...

0801b5a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b5a4:	b580      	push	{r7, lr}
 801b5a6:	b086      	sub	sp, #24
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801b5b0:	f7ff faa6 	bl	801ab00 <HAL_GetTick>
 801b5b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d101      	bne.n	801b5c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801b5bc:	2301      	movs	r3, #1
 801b5be:	e099      	b.n	801b6f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	2202      	movs	r2, #2
 801b5c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	681a      	ldr	r2, [r3, #0]
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f022 0201 	bic.w	r2, r2, #1
 801b5de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b5e0:	e00f      	b.n	801b602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b5e2:	f7ff fa8d 	bl	801ab00 <HAL_GetTick>
 801b5e6:	4602      	mov	r2, r0
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	1ad3      	subs	r3, r2, r3
 801b5ec:	2b05      	cmp	r3, #5
 801b5ee:	d908      	bls.n	801b602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	2220      	movs	r2, #32
 801b5f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	2203      	movs	r2, #3
 801b5fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801b5fe:	2303      	movs	r3, #3
 801b600:	e078      	b.n	801b6f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	f003 0301 	and.w	r3, r3, #1
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d1e8      	bne.n	801b5e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801b618:	697a      	ldr	r2, [r7, #20]
 801b61a:	4b38      	ldr	r3, [pc, #224]	; (801b6fc <HAL_DMA_Init+0x158>)
 801b61c:	4013      	ands	r3, r2
 801b61e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	685a      	ldr	r2, [r3, #4]
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	689b      	ldr	r3, [r3, #8]
 801b628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b62e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	691b      	ldr	r3, [r3, #16]
 801b634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b63a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	699b      	ldr	r3, [r3, #24]
 801b640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6a1b      	ldr	r3, [r3, #32]
 801b64c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801b64e:	697a      	ldr	r2, [r7, #20]
 801b650:	4313      	orrs	r3, r2
 801b652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b658:	2b04      	cmp	r3, #4
 801b65a:	d107      	bne.n	801b66c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b664:	4313      	orrs	r3, r2
 801b666:	697a      	ldr	r2, [r7, #20]
 801b668:	4313      	orrs	r3, r2
 801b66a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	697a      	ldr	r2, [r7, #20]
 801b672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	695b      	ldr	r3, [r3, #20]
 801b67a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	f023 0307 	bic.w	r3, r3, #7
 801b682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b688:	697a      	ldr	r2, [r7, #20]
 801b68a:	4313      	orrs	r3, r2
 801b68c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b692:	2b04      	cmp	r3, #4
 801b694:	d117      	bne.n	801b6c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b69a:	697a      	ldr	r2, [r7, #20]
 801b69c:	4313      	orrs	r3, r2
 801b69e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d00e      	beq.n	801b6c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801b6a8:	6878      	ldr	r0, [r7, #4]
 801b6aa:	f000 fb1b 	bl	801bce4 <DMA_CheckFifoParam>
 801b6ae:	4603      	mov	r3, r0
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d008      	beq.n	801b6c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	2240      	movs	r2, #64	; 0x40
 801b6b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	2201      	movs	r2, #1
 801b6be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	e016      	b.n	801b6f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	697a      	ldr	r2, [r7, #20]
 801b6cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f000 fad2 	bl	801bc78 <DMA_CalcBaseAndBitshift>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b6dc:	223f      	movs	r2, #63	; 0x3f
 801b6de:	409a      	lsls	r2, r3
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	2201      	movs	r2, #1
 801b6ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801b6f2:	2300      	movs	r3, #0
}
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	3718      	adds	r7, #24
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}
 801b6fc:	f010803f 	.word	0xf010803f

0801b700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b700:	b580      	push	{r7, lr}
 801b702:	b086      	sub	sp, #24
 801b704:	af00      	add	r7, sp, #0
 801b706:	60f8      	str	r0, [r7, #12]
 801b708:	60b9      	str	r1, [r7, #8]
 801b70a:	607a      	str	r2, [r7, #4]
 801b70c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b70e:	2300      	movs	r3, #0
 801b710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b71e:	2b01      	cmp	r3, #1
 801b720:	d101      	bne.n	801b726 <HAL_DMA_Start_IT+0x26>
 801b722:	2302      	movs	r3, #2
 801b724:	e040      	b.n	801b7a8 <HAL_DMA_Start_IT+0xa8>
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	2201      	movs	r2, #1
 801b72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b734:	b2db      	uxtb	r3, r3
 801b736:	2b01      	cmp	r3, #1
 801b738:	d12f      	bne.n	801b79a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	2202      	movs	r2, #2
 801b73e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	2200      	movs	r2, #0
 801b746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	687a      	ldr	r2, [r7, #4]
 801b74c:	68b9      	ldr	r1, [r7, #8]
 801b74e:	68f8      	ldr	r0, [r7, #12]
 801b750:	f000 fa64 	bl	801bc1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b758:	223f      	movs	r2, #63	; 0x3f
 801b75a:	409a      	lsls	r2, r3
 801b75c:	693b      	ldr	r3, [r7, #16]
 801b75e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	681a      	ldr	r2, [r3, #0]
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	f042 0216 	orr.w	r2, r2, #22
 801b76e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b774:	2b00      	cmp	r3, #0
 801b776:	d007      	beq.n	801b788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	681a      	ldr	r2, [r3, #0]
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	f042 0208 	orr.w	r2, r2, #8
 801b786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	681a      	ldr	r2, [r3, #0]
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	f042 0201 	orr.w	r2, r2, #1
 801b796:	601a      	str	r2, [r3, #0]
 801b798:	e005      	b.n	801b7a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	2200      	movs	r2, #0
 801b79e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801b7a2:	2302      	movs	r3, #2
 801b7a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801b7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	3718      	adds	r7, #24
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	bd80      	pop	{r7, pc}

0801b7b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b084      	sub	sp, #16
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b7bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801b7be:	f7ff f99f 	bl	801ab00 <HAL_GetTick>
 801b7c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b7ca:	b2db      	uxtb	r3, r3
 801b7cc:	2b02      	cmp	r3, #2
 801b7ce:	d008      	beq.n	801b7e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	2280      	movs	r2, #128	; 0x80
 801b7d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	2200      	movs	r2, #0
 801b7da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801b7de:	2301      	movs	r3, #1
 801b7e0:	e052      	b.n	801b888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	681a      	ldr	r2, [r3, #0]
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	f022 0216 	bic.w	r2, r2, #22
 801b7f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	695a      	ldr	r2, [r3, #20]
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b806:	2b00      	cmp	r3, #0
 801b808:	d103      	bne.n	801b812 <HAL_DMA_Abort+0x62>
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d007      	beq.n	801b822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	681a      	ldr	r2, [r3, #0]
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	f022 0208 	bic.w	r2, r2, #8
 801b820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	681a      	ldr	r2, [r3, #0]
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	f022 0201 	bic.w	r2, r2, #1
 801b830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b832:	e013      	b.n	801b85c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801b834:	f7ff f964 	bl	801ab00 <HAL_GetTick>
 801b838:	4602      	mov	r2, r0
 801b83a:	68bb      	ldr	r3, [r7, #8]
 801b83c:	1ad3      	subs	r3, r2, r3
 801b83e:	2b05      	cmp	r3, #5
 801b840:	d90c      	bls.n	801b85c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	2220      	movs	r2, #32
 801b846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	2203      	movs	r2, #3
 801b84c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2200      	movs	r2, #0
 801b854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801b858:	2303      	movs	r3, #3
 801b85a:	e015      	b.n	801b888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	f003 0301 	and.w	r3, r3, #1
 801b866:	2b00      	cmp	r3, #0
 801b868:	d1e4      	bne.n	801b834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b86e:	223f      	movs	r2, #63	; 0x3f
 801b870:	409a      	lsls	r2, r3
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	2201      	movs	r2, #1
 801b87a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	2200      	movs	r2, #0
 801b882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801b886:	2300      	movs	r3, #0
}
 801b888:	4618      	mov	r0, r3
 801b88a:	3710      	adds	r7, #16
 801b88c:	46bd      	mov	sp, r7
 801b88e:	bd80      	pop	{r7, pc}

0801b890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b890:	b480      	push	{r7}
 801b892:	b083      	sub	sp, #12
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	2b02      	cmp	r3, #2
 801b8a2:	d004      	beq.n	801b8ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	2280      	movs	r2, #128	; 0x80
 801b8a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	e00c      	b.n	801b8c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	2205      	movs	r2, #5
 801b8b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	681a      	ldr	r2, [r3, #0]
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	f022 0201 	bic.w	r2, r2, #1
 801b8c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801b8c6:	2300      	movs	r3, #0
}
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	370c      	adds	r7, #12
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d2:	4770      	bx	lr

0801b8d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b086      	sub	sp, #24
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801b8dc:	2300      	movs	r3, #0
 801b8de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b8e0:	4b8e      	ldr	r3, [pc, #568]	; (801bb1c <HAL_DMA_IRQHandler+0x248>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	4a8e      	ldr	r2, [pc, #568]	; (801bb20 <HAL_DMA_IRQHandler+0x24c>)
 801b8e6:	fba2 2303 	umull	r2, r3, r2, r3
 801b8ea:	0a9b      	lsrs	r3, r3, #10
 801b8ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b8f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801b8f4:	693b      	ldr	r3, [r7, #16]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b8fe:	2208      	movs	r2, #8
 801b900:	409a      	lsls	r2, r3
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	4013      	ands	r3, r2
 801b906:	2b00      	cmp	r3, #0
 801b908:	d01a      	beq.n	801b940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	f003 0304 	and.w	r3, r3, #4
 801b914:	2b00      	cmp	r3, #0
 801b916:	d013      	beq.n	801b940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	681a      	ldr	r2, [r3, #0]
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	f022 0204 	bic.w	r2, r2, #4
 801b926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b92c:	2208      	movs	r2, #8
 801b92e:	409a      	lsls	r2, r3
 801b930:	693b      	ldr	r3, [r7, #16]
 801b932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b938:	f043 0201 	orr.w	r2, r3, #1
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b944:	2201      	movs	r2, #1
 801b946:	409a      	lsls	r2, r3
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	4013      	ands	r3, r2
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d012      	beq.n	801b976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	695b      	ldr	r3, [r3, #20]
 801b956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d00b      	beq.n	801b976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b962:	2201      	movs	r2, #1
 801b964:	409a      	lsls	r2, r3
 801b966:	693b      	ldr	r3, [r7, #16]
 801b968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b96e:	f043 0202 	orr.w	r2, r3, #2
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b97a:	2204      	movs	r2, #4
 801b97c:	409a      	lsls	r2, r3
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	4013      	ands	r3, r2
 801b982:	2b00      	cmp	r3, #0
 801b984:	d012      	beq.n	801b9ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	f003 0302 	and.w	r3, r3, #2
 801b990:	2b00      	cmp	r3, #0
 801b992:	d00b      	beq.n	801b9ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b998:	2204      	movs	r2, #4
 801b99a:	409a      	lsls	r2, r3
 801b99c:	693b      	ldr	r3, [r7, #16]
 801b99e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b9a4:	f043 0204 	orr.w	r2, r3, #4
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9b0:	2210      	movs	r2, #16
 801b9b2:	409a      	lsls	r2, r3
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	4013      	ands	r3, r2
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d043      	beq.n	801ba44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	f003 0308 	and.w	r3, r3, #8
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d03c      	beq.n	801ba44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9ce:	2210      	movs	r2, #16
 801b9d0:	409a      	lsls	r2, r3
 801b9d2:	693b      	ldr	r3, [r7, #16]
 801b9d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d018      	beq.n	801ba16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d108      	bne.n	801ba04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d024      	beq.n	801ba44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9fe:	6878      	ldr	r0, [r7, #4]
 801ba00:	4798      	blx	r3
 801ba02:	e01f      	b.n	801ba44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d01b      	beq.n	801ba44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ba10:	6878      	ldr	r0, [r7, #4]
 801ba12:	4798      	blx	r3
 801ba14:	e016      	b.n	801ba44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d107      	bne.n	801ba34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	681a      	ldr	r2, [r3, #0]
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	f022 0208 	bic.w	r2, r2, #8
 801ba32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d003      	beq.n	801ba44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba40:	6878      	ldr	r0, [r7, #4]
 801ba42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ba48:	2220      	movs	r2, #32
 801ba4a:	409a      	lsls	r2, r3
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	4013      	ands	r3, r2
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	f000 808f 	beq.w	801bb74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	f003 0310 	and.w	r3, r3, #16
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	f000 8087 	beq.w	801bb74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ba6a:	2220      	movs	r2, #32
 801ba6c:	409a      	lsls	r2, r3
 801ba6e:	693b      	ldr	r3, [r7, #16]
 801ba70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ba78:	b2db      	uxtb	r3, r3
 801ba7a:	2b05      	cmp	r3, #5
 801ba7c:	d136      	bne.n	801baec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	681a      	ldr	r2, [r3, #0]
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	f022 0216 	bic.w	r2, r2, #22
 801ba8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	695a      	ldr	r2, [r3, #20]
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ba9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d103      	bne.n	801baae <HAL_DMA_IRQHandler+0x1da>
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d007      	beq.n	801babe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	681a      	ldr	r2, [r3, #0]
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	f022 0208 	bic.w	r2, r2, #8
 801babc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bac2:	223f      	movs	r2, #63	; 0x3f
 801bac4:	409a      	lsls	r2, r3
 801bac6:	693b      	ldr	r3, [r7, #16]
 801bac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	2201      	movs	r2, #1
 801bace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	2200      	movs	r2, #0
 801bad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d07e      	beq.n	801bbe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bae6:	6878      	ldr	r0, [r7, #4]
 801bae8:	4798      	blx	r3
        }
        return;
 801baea:	e079      	b.n	801bbe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d01d      	beq.n	801bb36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d10d      	bne.n	801bb24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d031      	beq.n	801bb74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb14:	6878      	ldr	r0, [r7, #4]
 801bb16:	4798      	blx	r3
 801bb18:	e02c      	b.n	801bb74 <HAL_DMA_IRQHandler+0x2a0>
 801bb1a:	bf00      	nop
 801bb1c:	20000020 	.word	0x20000020
 801bb20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d023      	beq.n	801bb74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb30:	6878      	ldr	r0, [r7, #4]
 801bb32:	4798      	blx	r3
 801bb34:	e01e      	b.n	801bb74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d10f      	bne.n	801bb64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	681a      	ldr	r2, [r3, #0]
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	f022 0210 	bic.w	r2, r2, #16
 801bb52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	2201      	movs	r2, #1
 801bb58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	2200      	movs	r2, #0
 801bb60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d003      	beq.n	801bb74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb70:	6878      	ldr	r0, [r7, #4]
 801bb72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d032      	beq.n	801bbe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bb80:	f003 0301 	and.w	r3, r3, #1
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d022      	beq.n	801bbce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	2205      	movs	r2, #5
 801bb8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	681a      	ldr	r2, [r3, #0]
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	f022 0201 	bic.w	r2, r2, #1
 801bb9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	3301      	adds	r3, #1
 801bba4:	60bb      	str	r3, [r7, #8]
 801bba6:	697a      	ldr	r2, [r7, #20]
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d307      	bcc.n	801bbbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	f003 0301 	and.w	r3, r3, #1
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d1f2      	bne.n	801bba0 <HAL_DMA_IRQHandler+0x2cc>
 801bbba:	e000      	b.n	801bbbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 801bbbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2201      	movs	r2, #1
 801bbc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2200      	movs	r2, #0
 801bbca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d005      	beq.n	801bbe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bbda:	6878      	ldr	r0, [r7, #4]
 801bbdc:	4798      	blx	r3
 801bbde:	e000      	b.n	801bbe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 801bbe0:	bf00      	nop
    }
  }
}
 801bbe2:	3718      	adds	r7, #24
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	bd80      	pop	{r7, pc}

0801bbe8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801bbe8:	b480      	push	{r7}
 801bbea:	b083      	sub	sp, #12
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801bbf6:	b2db      	uxtb	r3, r3
}
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	370c      	adds	r7, #12
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc02:	4770      	bx	lr

0801bc04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801bc04:	b480      	push	{r7}
 801bc06:	b083      	sub	sp, #12
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801bc10:	4618      	mov	r0, r3
 801bc12:	370c      	adds	r7, #12
 801bc14:	46bd      	mov	sp, r7
 801bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1a:	4770      	bx	lr

0801bc1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801bc1c:	b480      	push	{r7}
 801bc1e:	b085      	sub	sp, #20
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	60f8      	str	r0, [r7, #12]
 801bc24:	60b9      	str	r1, [r7, #8]
 801bc26:	607a      	str	r2, [r7, #4]
 801bc28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	681a      	ldr	r2, [r3, #0]
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801bc38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	683a      	ldr	r2, [r7, #0]
 801bc40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801bc42:	68fb      	ldr	r3, [r7, #12]
 801bc44:	689b      	ldr	r3, [r3, #8]
 801bc46:	2b40      	cmp	r3, #64	; 0x40
 801bc48:	d108      	bne.n	801bc5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	687a      	ldr	r2, [r7, #4]
 801bc50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	68ba      	ldr	r2, [r7, #8]
 801bc58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801bc5a:	e007      	b.n	801bc6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	68ba      	ldr	r2, [r7, #8]
 801bc62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	687a      	ldr	r2, [r7, #4]
 801bc6a:	60da      	str	r2, [r3, #12]
}
 801bc6c:	bf00      	nop
 801bc6e:	3714      	adds	r7, #20
 801bc70:	46bd      	mov	sp, r7
 801bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc76:	4770      	bx	lr

0801bc78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801bc78:	b480      	push	{r7}
 801bc7a:	b085      	sub	sp, #20
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	b2db      	uxtb	r3, r3
 801bc86:	3b10      	subs	r3, #16
 801bc88:	4a14      	ldr	r2, [pc, #80]	; (801bcdc <DMA_CalcBaseAndBitshift+0x64>)
 801bc8a:	fba2 2303 	umull	r2, r3, r2, r3
 801bc8e:	091b      	lsrs	r3, r3, #4
 801bc90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801bc92:	4a13      	ldr	r2, [pc, #76]	; (801bce0 <DMA_CalcBaseAndBitshift+0x68>)
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	4413      	add	r3, r2
 801bc98:	781b      	ldrb	r3, [r3, #0]
 801bc9a:	461a      	mov	r2, r3
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	2b03      	cmp	r3, #3
 801bca4:	d909      	bls.n	801bcba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801bcae:	f023 0303 	bic.w	r3, r3, #3
 801bcb2:	1d1a      	adds	r2, r3, #4
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	659a      	str	r2, [r3, #88]	; 0x58
 801bcb8:	e007      	b.n	801bcca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801bcc2:	f023 0303 	bic.w	r3, r3, #3
 801bcc6:	687a      	ldr	r2, [r7, #4]
 801bcc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801bcce:	4618      	mov	r0, r3
 801bcd0:	3714      	adds	r7, #20
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd8:	4770      	bx	lr
 801bcda:	bf00      	nop
 801bcdc:	aaaaaaab 	.word	0xaaaaaaab
 801bce0:	08028344 	.word	0x08028344

0801bce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801bce4:	b480      	push	{r7}
 801bce6:	b085      	sub	sp, #20
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bcec:	2300      	movs	r3, #0
 801bcee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	699b      	ldr	r3, [r3, #24]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d11f      	bne.n	801bd3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801bcfe:	68bb      	ldr	r3, [r7, #8]
 801bd00:	2b03      	cmp	r3, #3
 801bd02:	d856      	bhi.n	801bdb2 <DMA_CheckFifoParam+0xce>
 801bd04:	a201      	add	r2, pc, #4	; (adr r2, 801bd0c <DMA_CheckFifoParam+0x28>)
 801bd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd0a:	bf00      	nop
 801bd0c:	0801bd1d 	.word	0x0801bd1d
 801bd10:	0801bd2f 	.word	0x0801bd2f
 801bd14:	0801bd1d 	.word	0x0801bd1d
 801bd18:	0801bdb3 	.word	0x0801bdb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d046      	beq.n	801bdb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801bd28:	2301      	movs	r3, #1
 801bd2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bd2c:	e043      	b.n	801bdb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801bd36:	d140      	bne.n	801bdba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801bd38:	2301      	movs	r3, #1
 801bd3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bd3c:	e03d      	b.n	801bdba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	699b      	ldr	r3, [r3, #24]
 801bd42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bd46:	d121      	bne.n	801bd8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	2b03      	cmp	r3, #3
 801bd4c:	d837      	bhi.n	801bdbe <DMA_CheckFifoParam+0xda>
 801bd4e:	a201      	add	r2, pc, #4	; (adr r2, 801bd54 <DMA_CheckFifoParam+0x70>)
 801bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd54:	0801bd65 	.word	0x0801bd65
 801bd58:	0801bd6b 	.word	0x0801bd6b
 801bd5c:	0801bd65 	.word	0x0801bd65
 801bd60:	0801bd7d 	.word	0x0801bd7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801bd64:	2301      	movs	r3, #1
 801bd66:	73fb      	strb	r3, [r7, #15]
      break;
 801bd68:	e030      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d025      	beq.n	801bdc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801bd76:	2301      	movs	r3, #1
 801bd78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801bd7a:	e022      	b.n	801bdc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801bd84:	d11f      	bne.n	801bdc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801bd86:	2301      	movs	r3, #1
 801bd88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801bd8a:	e01c      	b.n	801bdc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	2b02      	cmp	r3, #2
 801bd90:	d903      	bls.n	801bd9a <DMA_CheckFifoParam+0xb6>
 801bd92:	68bb      	ldr	r3, [r7, #8]
 801bd94:	2b03      	cmp	r3, #3
 801bd96:	d003      	beq.n	801bda0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801bd98:	e018      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801bd9a:	2301      	movs	r3, #1
 801bd9c:	73fb      	strb	r3, [r7, #15]
      break;
 801bd9e:	e015      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bda4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d00e      	beq.n	801bdca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801bdac:	2301      	movs	r3, #1
 801bdae:	73fb      	strb	r3, [r7, #15]
      break;
 801bdb0:	e00b      	b.n	801bdca <DMA_CheckFifoParam+0xe6>
      break;
 801bdb2:	bf00      	nop
 801bdb4:	e00a      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      break;
 801bdb6:	bf00      	nop
 801bdb8:	e008      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      break;
 801bdba:	bf00      	nop
 801bdbc:	e006      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      break;
 801bdbe:	bf00      	nop
 801bdc0:	e004      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      break;
 801bdc2:	bf00      	nop
 801bdc4:	e002      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      break;   
 801bdc6:	bf00      	nop
 801bdc8:	e000      	b.n	801bdcc <DMA_CheckFifoParam+0xe8>
      break;
 801bdca:	bf00      	nop
    }
  } 
  
  return status; 
 801bdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bdce:	4618      	mov	r0, r3
 801bdd0:	3714      	adds	r7, #20
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdd8:	4770      	bx	lr
 801bdda:	bf00      	nop

0801bddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bddc:	b480      	push	{r7}
 801bdde:	b089      	sub	sp, #36	; 0x24
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
 801bde4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801bde6:	2300      	movs	r3, #0
 801bde8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801bdea:	2300      	movs	r3, #0
 801bdec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801bdee:	2300      	movs	r3, #0
 801bdf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801bdf2:	2300      	movs	r3, #0
 801bdf4:	61fb      	str	r3, [r7, #28]
 801bdf6:	e159      	b.n	801c0ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801bdf8:	2201      	movs	r2, #1
 801bdfa:	69fb      	ldr	r3, [r7, #28]
 801bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 801be00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	697a      	ldr	r2, [r7, #20]
 801be08:	4013      	ands	r3, r2
 801be0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801be0c:	693a      	ldr	r2, [r7, #16]
 801be0e:	697b      	ldr	r3, [r7, #20]
 801be10:	429a      	cmp	r2, r3
 801be12:	f040 8148 	bne.w	801c0a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	685b      	ldr	r3, [r3, #4]
 801be1a:	f003 0303 	and.w	r3, r3, #3
 801be1e:	2b01      	cmp	r3, #1
 801be20:	d005      	beq.n	801be2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801be2a:	2b02      	cmp	r3, #2
 801be2c:	d130      	bne.n	801be90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	689b      	ldr	r3, [r3, #8]
 801be32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801be34:	69fb      	ldr	r3, [r7, #28]
 801be36:	005b      	lsls	r3, r3, #1
 801be38:	2203      	movs	r2, #3
 801be3a:	fa02 f303 	lsl.w	r3, r2, r3
 801be3e:	43db      	mvns	r3, r3
 801be40:	69ba      	ldr	r2, [r7, #24]
 801be42:	4013      	ands	r3, r2
 801be44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801be46:	683b      	ldr	r3, [r7, #0]
 801be48:	68da      	ldr	r2, [r3, #12]
 801be4a:	69fb      	ldr	r3, [r7, #28]
 801be4c:	005b      	lsls	r3, r3, #1
 801be4e:	fa02 f303 	lsl.w	r3, r2, r3
 801be52:	69ba      	ldr	r2, [r7, #24]
 801be54:	4313      	orrs	r3, r2
 801be56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	69ba      	ldr	r2, [r7, #24]
 801be5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	685b      	ldr	r3, [r3, #4]
 801be62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801be64:	2201      	movs	r2, #1
 801be66:	69fb      	ldr	r3, [r7, #28]
 801be68:	fa02 f303 	lsl.w	r3, r2, r3
 801be6c:	43db      	mvns	r3, r3
 801be6e:	69ba      	ldr	r2, [r7, #24]
 801be70:	4013      	ands	r3, r2
 801be72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801be74:	683b      	ldr	r3, [r7, #0]
 801be76:	685b      	ldr	r3, [r3, #4]
 801be78:	091b      	lsrs	r3, r3, #4
 801be7a:	f003 0201 	and.w	r2, r3, #1
 801be7e:	69fb      	ldr	r3, [r7, #28]
 801be80:	fa02 f303 	lsl.w	r3, r2, r3
 801be84:	69ba      	ldr	r2, [r7, #24]
 801be86:	4313      	orrs	r3, r2
 801be88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	69ba      	ldr	r2, [r7, #24]
 801be8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801be90:	683b      	ldr	r3, [r7, #0]
 801be92:	685b      	ldr	r3, [r3, #4]
 801be94:	f003 0303 	and.w	r3, r3, #3
 801be98:	2b03      	cmp	r3, #3
 801be9a:	d017      	beq.n	801becc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	68db      	ldr	r3, [r3, #12]
 801bea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801bea2:	69fb      	ldr	r3, [r7, #28]
 801bea4:	005b      	lsls	r3, r3, #1
 801bea6:	2203      	movs	r2, #3
 801bea8:	fa02 f303 	lsl.w	r3, r2, r3
 801beac:	43db      	mvns	r3, r3
 801beae:	69ba      	ldr	r2, [r7, #24]
 801beb0:	4013      	ands	r3, r2
 801beb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801beb4:	683b      	ldr	r3, [r7, #0]
 801beb6:	689a      	ldr	r2, [r3, #8]
 801beb8:	69fb      	ldr	r3, [r7, #28]
 801beba:	005b      	lsls	r3, r3, #1
 801bebc:	fa02 f303 	lsl.w	r3, r2, r3
 801bec0:	69ba      	ldr	r2, [r7, #24]
 801bec2:	4313      	orrs	r3, r2
 801bec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	69ba      	ldr	r2, [r7, #24]
 801beca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801becc:	683b      	ldr	r3, [r7, #0]
 801bece:	685b      	ldr	r3, [r3, #4]
 801bed0:	f003 0303 	and.w	r3, r3, #3
 801bed4:	2b02      	cmp	r3, #2
 801bed6:	d123      	bne.n	801bf20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bed8:	69fb      	ldr	r3, [r7, #28]
 801beda:	08da      	lsrs	r2, r3, #3
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	3208      	adds	r2, #8
 801bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801bee6:	69fb      	ldr	r3, [r7, #28]
 801bee8:	f003 0307 	and.w	r3, r3, #7
 801beec:	009b      	lsls	r3, r3, #2
 801beee:	220f      	movs	r2, #15
 801bef0:	fa02 f303 	lsl.w	r3, r2, r3
 801bef4:	43db      	mvns	r3, r3
 801bef6:	69ba      	ldr	r2, [r7, #24]
 801bef8:	4013      	ands	r3, r2
 801befa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801befc:	683b      	ldr	r3, [r7, #0]
 801befe:	691a      	ldr	r2, [r3, #16]
 801bf00:	69fb      	ldr	r3, [r7, #28]
 801bf02:	f003 0307 	and.w	r3, r3, #7
 801bf06:	009b      	lsls	r3, r3, #2
 801bf08:	fa02 f303 	lsl.w	r3, r2, r3
 801bf0c:	69ba      	ldr	r2, [r7, #24]
 801bf0e:	4313      	orrs	r3, r2
 801bf10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bf12:	69fb      	ldr	r3, [r7, #28]
 801bf14:	08da      	lsrs	r2, r3, #3
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	3208      	adds	r2, #8
 801bf1a:	69b9      	ldr	r1, [r7, #24]
 801bf1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801bf26:	69fb      	ldr	r3, [r7, #28]
 801bf28:	005b      	lsls	r3, r3, #1
 801bf2a:	2203      	movs	r2, #3
 801bf2c:	fa02 f303 	lsl.w	r3, r2, r3
 801bf30:	43db      	mvns	r3, r3
 801bf32:	69ba      	ldr	r2, [r7, #24]
 801bf34:	4013      	ands	r3, r2
 801bf36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	685b      	ldr	r3, [r3, #4]
 801bf3c:	f003 0203 	and.w	r2, r3, #3
 801bf40:	69fb      	ldr	r3, [r7, #28]
 801bf42:	005b      	lsls	r3, r3, #1
 801bf44:	fa02 f303 	lsl.w	r3, r2, r3
 801bf48:	69ba      	ldr	r2, [r7, #24]
 801bf4a:	4313      	orrs	r3, r2
 801bf4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	69ba      	ldr	r2, [r7, #24]
 801bf52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801bf54:	683b      	ldr	r3, [r7, #0]
 801bf56:	685b      	ldr	r3, [r3, #4]
 801bf58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	f000 80a2 	beq.w	801c0a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bf62:	2300      	movs	r3, #0
 801bf64:	60fb      	str	r3, [r7, #12]
 801bf66:	4b57      	ldr	r3, [pc, #348]	; (801c0c4 <HAL_GPIO_Init+0x2e8>)
 801bf68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf6a:	4a56      	ldr	r2, [pc, #344]	; (801c0c4 <HAL_GPIO_Init+0x2e8>)
 801bf6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bf70:	6453      	str	r3, [r2, #68]	; 0x44
 801bf72:	4b54      	ldr	r3, [pc, #336]	; (801c0c4 <HAL_GPIO_Init+0x2e8>)
 801bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bf7a:	60fb      	str	r3, [r7, #12]
 801bf7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bf7e:	4a52      	ldr	r2, [pc, #328]	; (801c0c8 <HAL_GPIO_Init+0x2ec>)
 801bf80:	69fb      	ldr	r3, [r7, #28]
 801bf82:	089b      	lsrs	r3, r3, #2
 801bf84:	3302      	adds	r3, #2
 801bf86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801bf8c:	69fb      	ldr	r3, [r7, #28]
 801bf8e:	f003 0303 	and.w	r3, r3, #3
 801bf92:	009b      	lsls	r3, r3, #2
 801bf94:	220f      	movs	r2, #15
 801bf96:	fa02 f303 	lsl.w	r3, r2, r3
 801bf9a:	43db      	mvns	r3, r3
 801bf9c:	69ba      	ldr	r2, [r7, #24]
 801bf9e:	4013      	ands	r3, r2
 801bfa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	4a49      	ldr	r2, [pc, #292]	; (801c0cc <HAL_GPIO_Init+0x2f0>)
 801bfa6:	4293      	cmp	r3, r2
 801bfa8:	d019      	beq.n	801bfde <HAL_GPIO_Init+0x202>
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	4a48      	ldr	r2, [pc, #288]	; (801c0d0 <HAL_GPIO_Init+0x2f4>)
 801bfae:	4293      	cmp	r3, r2
 801bfb0:	d013      	beq.n	801bfda <HAL_GPIO_Init+0x1fe>
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	4a47      	ldr	r2, [pc, #284]	; (801c0d4 <HAL_GPIO_Init+0x2f8>)
 801bfb6:	4293      	cmp	r3, r2
 801bfb8:	d00d      	beq.n	801bfd6 <HAL_GPIO_Init+0x1fa>
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	4a46      	ldr	r2, [pc, #280]	; (801c0d8 <HAL_GPIO_Init+0x2fc>)
 801bfbe:	4293      	cmp	r3, r2
 801bfc0:	d007      	beq.n	801bfd2 <HAL_GPIO_Init+0x1f6>
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	4a45      	ldr	r2, [pc, #276]	; (801c0dc <HAL_GPIO_Init+0x300>)
 801bfc6:	4293      	cmp	r3, r2
 801bfc8:	d101      	bne.n	801bfce <HAL_GPIO_Init+0x1f2>
 801bfca:	2304      	movs	r3, #4
 801bfcc:	e008      	b.n	801bfe0 <HAL_GPIO_Init+0x204>
 801bfce:	2307      	movs	r3, #7
 801bfd0:	e006      	b.n	801bfe0 <HAL_GPIO_Init+0x204>
 801bfd2:	2303      	movs	r3, #3
 801bfd4:	e004      	b.n	801bfe0 <HAL_GPIO_Init+0x204>
 801bfd6:	2302      	movs	r3, #2
 801bfd8:	e002      	b.n	801bfe0 <HAL_GPIO_Init+0x204>
 801bfda:	2301      	movs	r3, #1
 801bfdc:	e000      	b.n	801bfe0 <HAL_GPIO_Init+0x204>
 801bfde:	2300      	movs	r3, #0
 801bfe0:	69fa      	ldr	r2, [r7, #28]
 801bfe2:	f002 0203 	and.w	r2, r2, #3
 801bfe6:	0092      	lsls	r2, r2, #2
 801bfe8:	4093      	lsls	r3, r2
 801bfea:	69ba      	ldr	r2, [r7, #24]
 801bfec:	4313      	orrs	r3, r2
 801bfee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bff0:	4935      	ldr	r1, [pc, #212]	; (801c0c8 <HAL_GPIO_Init+0x2ec>)
 801bff2:	69fb      	ldr	r3, [r7, #28]
 801bff4:	089b      	lsrs	r3, r3, #2
 801bff6:	3302      	adds	r3, #2
 801bff8:	69ba      	ldr	r2, [r7, #24]
 801bffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801bffe:	4b38      	ldr	r3, [pc, #224]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c000:	689b      	ldr	r3, [r3, #8]
 801c002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c004:	693b      	ldr	r3, [r7, #16]
 801c006:	43db      	mvns	r3, r3
 801c008:	69ba      	ldr	r2, [r7, #24]
 801c00a:	4013      	ands	r3, r2
 801c00c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c00e:	683b      	ldr	r3, [r7, #0]
 801c010:	685b      	ldr	r3, [r3, #4]
 801c012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c016:	2b00      	cmp	r3, #0
 801c018:	d003      	beq.n	801c022 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801c01a:	69ba      	ldr	r2, [r7, #24]
 801c01c:	693b      	ldr	r3, [r7, #16]
 801c01e:	4313      	orrs	r3, r2
 801c020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801c022:	4a2f      	ldr	r2, [pc, #188]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c024:	69bb      	ldr	r3, [r7, #24]
 801c026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801c028:	4b2d      	ldr	r3, [pc, #180]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c02a:	68db      	ldr	r3, [r3, #12]
 801c02c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c02e:	693b      	ldr	r3, [r7, #16]
 801c030:	43db      	mvns	r3, r3
 801c032:	69ba      	ldr	r2, [r7, #24]
 801c034:	4013      	ands	r3, r2
 801c036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c038:	683b      	ldr	r3, [r7, #0]
 801c03a:	685b      	ldr	r3, [r3, #4]
 801c03c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c040:	2b00      	cmp	r3, #0
 801c042:	d003      	beq.n	801c04c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801c044:	69ba      	ldr	r2, [r7, #24]
 801c046:	693b      	ldr	r3, [r7, #16]
 801c048:	4313      	orrs	r3, r2
 801c04a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801c04c:	4a24      	ldr	r2, [pc, #144]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c04e:	69bb      	ldr	r3, [r7, #24]
 801c050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801c052:	4b23      	ldr	r3, [pc, #140]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c054:	685b      	ldr	r3, [r3, #4]
 801c056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c058:	693b      	ldr	r3, [r7, #16]
 801c05a:	43db      	mvns	r3, r3
 801c05c:	69ba      	ldr	r2, [r7, #24]
 801c05e:	4013      	ands	r3, r2
 801c060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c062:	683b      	ldr	r3, [r7, #0]
 801c064:	685b      	ldr	r3, [r3, #4]
 801c066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d003      	beq.n	801c076 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801c06e:	69ba      	ldr	r2, [r7, #24]
 801c070:	693b      	ldr	r3, [r7, #16]
 801c072:	4313      	orrs	r3, r2
 801c074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801c076:	4a1a      	ldr	r2, [pc, #104]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c078:	69bb      	ldr	r3, [r7, #24]
 801c07a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801c07c:	4b18      	ldr	r3, [pc, #96]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c082:	693b      	ldr	r3, [r7, #16]
 801c084:	43db      	mvns	r3, r3
 801c086:	69ba      	ldr	r2, [r7, #24]
 801c088:	4013      	ands	r3, r2
 801c08a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c08c:	683b      	ldr	r3, [r7, #0]
 801c08e:	685b      	ldr	r3, [r3, #4]
 801c090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c094:	2b00      	cmp	r3, #0
 801c096:	d003      	beq.n	801c0a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801c098:	69ba      	ldr	r2, [r7, #24]
 801c09a:	693b      	ldr	r3, [r7, #16]
 801c09c:	4313      	orrs	r3, r2
 801c09e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801c0a0:	4a0f      	ldr	r2, [pc, #60]	; (801c0e0 <HAL_GPIO_Init+0x304>)
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c0a6:	69fb      	ldr	r3, [r7, #28]
 801c0a8:	3301      	adds	r3, #1
 801c0aa:	61fb      	str	r3, [r7, #28]
 801c0ac:	69fb      	ldr	r3, [r7, #28]
 801c0ae:	2b0f      	cmp	r3, #15
 801c0b0:	f67f aea2 	bls.w	801bdf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801c0b4:	bf00      	nop
 801c0b6:	bf00      	nop
 801c0b8:	3724      	adds	r7, #36	; 0x24
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c0:	4770      	bx	lr
 801c0c2:	bf00      	nop
 801c0c4:	40023800 	.word	0x40023800
 801c0c8:	40013800 	.word	0x40013800
 801c0cc:	40020000 	.word	0x40020000
 801c0d0:	40020400 	.word	0x40020400
 801c0d4:	40020800 	.word	0x40020800
 801c0d8:	40020c00 	.word	0x40020c00
 801c0dc:	40021000 	.word	0x40021000
 801c0e0:	40013c00 	.word	0x40013c00

0801c0e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801c0e4:	b480      	push	{r7}
 801c0e6:	b087      	sub	sp, #28
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
 801c0ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801c0ee:	2300      	movs	r3, #0
 801c0f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c0fa:	2300      	movs	r3, #0
 801c0fc:	617b      	str	r3, [r7, #20]
 801c0fe:	e0bb      	b.n	801c278 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801c100:	2201      	movs	r2, #1
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	fa02 f303 	lsl.w	r3, r2, r3
 801c108:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801c10a:	683a      	ldr	r2, [r7, #0]
 801c10c:	693b      	ldr	r3, [r7, #16]
 801c10e:	4013      	ands	r3, r2
 801c110:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801c112:	68fa      	ldr	r2, [r7, #12]
 801c114:	693b      	ldr	r3, [r7, #16]
 801c116:	429a      	cmp	r2, r3
 801c118:	f040 80ab 	bne.w	801c272 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801c11c:	4a5c      	ldr	r2, [pc, #368]	; (801c290 <HAL_GPIO_DeInit+0x1ac>)
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	089b      	lsrs	r3, r3, #2
 801c122:	3302      	adds	r3, #2
 801c124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c128:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801c12a:	697b      	ldr	r3, [r7, #20]
 801c12c:	f003 0303 	and.w	r3, r3, #3
 801c130:	009b      	lsls	r3, r3, #2
 801c132:	220f      	movs	r2, #15
 801c134:	fa02 f303 	lsl.w	r3, r2, r3
 801c138:	68ba      	ldr	r2, [r7, #8]
 801c13a:	4013      	ands	r3, r2
 801c13c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	4a54      	ldr	r2, [pc, #336]	; (801c294 <HAL_GPIO_DeInit+0x1b0>)
 801c142:	4293      	cmp	r3, r2
 801c144:	d019      	beq.n	801c17a <HAL_GPIO_DeInit+0x96>
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	4a53      	ldr	r2, [pc, #332]	; (801c298 <HAL_GPIO_DeInit+0x1b4>)
 801c14a:	4293      	cmp	r3, r2
 801c14c:	d013      	beq.n	801c176 <HAL_GPIO_DeInit+0x92>
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	4a52      	ldr	r2, [pc, #328]	; (801c29c <HAL_GPIO_DeInit+0x1b8>)
 801c152:	4293      	cmp	r3, r2
 801c154:	d00d      	beq.n	801c172 <HAL_GPIO_DeInit+0x8e>
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	4a51      	ldr	r2, [pc, #324]	; (801c2a0 <HAL_GPIO_DeInit+0x1bc>)
 801c15a:	4293      	cmp	r3, r2
 801c15c:	d007      	beq.n	801c16e <HAL_GPIO_DeInit+0x8a>
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	4a50      	ldr	r2, [pc, #320]	; (801c2a4 <HAL_GPIO_DeInit+0x1c0>)
 801c162:	4293      	cmp	r3, r2
 801c164:	d101      	bne.n	801c16a <HAL_GPIO_DeInit+0x86>
 801c166:	2304      	movs	r3, #4
 801c168:	e008      	b.n	801c17c <HAL_GPIO_DeInit+0x98>
 801c16a:	2307      	movs	r3, #7
 801c16c:	e006      	b.n	801c17c <HAL_GPIO_DeInit+0x98>
 801c16e:	2303      	movs	r3, #3
 801c170:	e004      	b.n	801c17c <HAL_GPIO_DeInit+0x98>
 801c172:	2302      	movs	r3, #2
 801c174:	e002      	b.n	801c17c <HAL_GPIO_DeInit+0x98>
 801c176:	2301      	movs	r3, #1
 801c178:	e000      	b.n	801c17c <HAL_GPIO_DeInit+0x98>
 801c17a:	2300      	movs	r3, #0
 801c17c:	697a      	ldr	r2, [r7, #20]
 801c17e:	f002 0203 	and.w	r2, r2, #3
 801c182:	0092      	lsls	r2, r2, #2
 801c184:	4093      	lsls	r3, r2
 801c186:	68ba      	ldr	r2, [r7, #8]
 801c188:	429a      	cmp	r2, r3
 801c18a:	d132      	bne.n	801c1f2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801c18c:	4b46      	ldr	r3, [pc, #280]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c18e:	681a      	ldr	r2, [r3, #0]
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	43db      	mvns	r3, r3
 801c194:	4944      	ldr	r1, [pc, #272]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c196:	4013      	ands	r3, r2
 801c198:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801c19a:	4b43      	ldr	r3, [pc, #268]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c19c:	685a      	ldr	r2, [r3, #4]
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	43db      	mvns	r3, r3
 801c1a2:	4941      	ldr	r1, [pc, #260]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c1a4:	4013      	ands	r3, r2
 801c1a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801c1a8:	4b3f      	ldr	r3, [pc, #252]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c1aa:	68da      	ldr	r2, [r3, #12]
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	43db      	mvns	r3, r3
 801c1b0:	493d      	ldr	r1, [pc, #244]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c1b2:	4013      	ands	r3, r2
 801c1b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801c1b6:	4b3c      	ldr	r3, [pc, #240]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c1b8:	689a      	ldr	r2, [r3, #8]
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	43db      	mvns	r3, r3
 801c1be:	493a      	ldr	r1, [pc, #232]	; (801c2a8 <HAL_GPIO_DeInit+0x1c4>)
 801c1c0:	4013      	ands	r3, r2
 801c1c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	f003 0303 	and.w	r3, r3, #3
 801c1ca:	009b      	lsls	r3, r3, #2
 801c1cc:	220f      	movs	r2, #15
 801c1ce:	fa02 f303 	lsl.w	r3, r2, r3
 801c1d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801c1d4:	4a2e      	ldr	r2, [pc, #184]	; (801c290 <HAL_GPIO_DeInit+0x1ac>)
 801c1d6:	697b      	ldr	r3, [r7, #20]
 801c1d8:	089b      	lsrs	r3, r3, #2
 801c1da:	3302      	adds	r3, #2
 801c1dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	43da      	mvns	r2, r3
 801c1e4:	482a      	ldr	r0, [pc, #168]	; (801c290 <HAL_GPIO_DeInit+0x1ac>)
 801c1e6:	697b      	ldr	r3, [r7, #20]
 801c1e8:	089b      	lsrs	r3, r3, #2
 801c1ea:	400a      	ands	r2, r1
 801c1ec:	3302      	adds	r3, #2
 801c1ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	681a      	ldr	r2, [r3, #0]
 801c1f6:	697b      	ldr	r3, [r7, #20]
 801c1f8:	005b      	lsls	r3, r3, #1
 801c1fa:	2103      	movs	r1, #3
 801c1fc:	fa01 f303 	lsl.w	r3, r1, r3
 801c200:	43db      	mvns	r3, r3
 801c202:	401a      	ands	r2, r3
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801c208:	697b      	ldr	r3, [r7, #20]
 801c20a:	08da      	lsrs	r2, r3, #3
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	3208      	adds	r2, #8
 801c210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c214:	697b      	ldr	r3, [r7, #20]
 801c216:	f003 0307 	and.w	r3, r3, #7
 801c21a:	009b      	lsls	r3, r3, #2
 801c21c:	220f      	movs	r2, #15
 801c21e:	fa02 f303 	lsl.w	r3, r2, r3
 801c222:	43db      	mvns	r3, r3
 801c224:	697a      	ldr	r2, [r7, #20]
 801c226:	08d2      	lsrs	r2, r2, #3
 801c228:	4019      	ands	r1, r3
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	3208      	adds	r2, #8
 801c22e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	68da      	ldr	r2, [r3, #12]
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	005b      	lsls	r3, r3, #1
 801c23a:	2103      	movs	r1, #3
 801c23c:	fa01 f303 	lsl.w	r3, r1, r3
 801c240:	43db      	mvns	r3, r3
 801c242:	401a      	ands	r2, r3
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	685a      	ldr	r2, [r3, #4]
 801c24c:	2101      	movs	r1, #1
 801c24e:	697b      	ldr	r3, [r7, #20]
 801c250:	fa01 f303 	lsl.w	r3, r1, r3
 801c254:	43db      	mvns	r3, r3
 801c256:	401a      	ands	r2, r3
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	689a      	ldr	r2, [r3, #8]
 801c260:	697b      	ldr	r3, [r7, #20]
 801c262:	005b      	lsls	r3, r3, #1
 801c264:	2103      	movs	r1, #3
 801c266:	fa01 f303 	lsl.w	r3, r1, r3
 801c26a:	43db      	mvns	r3, r3
 801c26c:	401a      	ands	r2, r3
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801c272:	697b      	ldr	r3, [r7, #20]
 801c274:	3301      	adds	r3, #1
 801c276:	617b      	str	r3, [r7, #20]
 801c278:	697b      	ldr	r3, [r7, #20]
 801c27a:	2b0f      	cmp	r3, #15
 801c27c:	f67f af40 	bls.w	801c100 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801c280:	bf00      	nop
 801c282:	bf00      	nop
 801c284:	371c      	adds	r7, #28
 801c286:	46bd      	mov	sp, r7
 801c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28c:	4770      	bx	lr
 801c28e:	bf00      	nop
 801c290:	40013800 	.word	0x40013800
 801c294:	40020000 	.word	0x40020000
 801c298:	40020400 	.word	0x40020400
 801c29c:	40020800 	.word	0x40020800
 801c2a0:	40020c00 	.word	0x40020c00
 801c2a4:	40021000 	.word	0x40021000
 801c2a8:	40013c00 	.word	0x40013c00

0801c2ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c2ac:	b480      	push	{r7}
 801c2ae:	b083      	sub	sp, #12
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	6078      	str	r0, [r7, #4]
 801c2b4:	460b      	mov	r3, r1
 801c2b6:	807b      	strh	r3, [r7, #2]
 801c2b8:	4613      	mov	r3, r2
 801c2ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c2bc:	787b      	ldrb	r3, [r7, #1]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d003      	beq.n	801c2ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c2c2:	887a      	ldrh	r2, [r7, #2]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801c2c8:	e003      	b.n	801c2d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801c2ca:	887b      	ldrh	r3, [r7, #2]
 801c2cc:	041a      	lsls	r2, r3, #16
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	619a      	str	r2, [r3, #24]
}
 801c2d2:	bf00      	nop
 801c2d4:	370c      	adds	r7, #12
 801c2d6:	46bd      	mov	sp, r7
 801c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2dc:	4770      	bx	lr
	...

0801c2e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801c2ea:	4b08      	ldr	r3, [pc, #32]	; (801c30c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c2ec:	695a      	ldr	r2, [r3, #20]
 801c2ee:	88fb      	ldrh	r3, [r7, #6]
 801c2f0:	4013      	ands	r3, r2
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d006      	beq.n	801c304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801c2f6:	4a05      	ldr	r2, [pc, #20]	; (801c30c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c2f8:	88fb      	ldrh	r3, [r7, #6]
 801c2fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801c2fc:	88fb      	ldrh	r3, [r7, #6]
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7e5 fef8 	bl	80020f4 <HAL_GPIO_EXTI_Callback>
  }
}
 801c304:	bf00      	nop
 801c306:	3708      	adds	r7, #8
 801c308:	46bd      	mov	sp, r7
 801c30a:	bd80      	pop	{r7, pc}
 801c30c:	40013c00 	.word	0x40013c00

0801c310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b084      	sub	sp, #16
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d101      	bne.n	801c322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c31e:	2301      	movs	r3, #1
 801c320:	e12b      	b.n	801c57a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c328:	b2db      	uxtb	r3, r3
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d106      	bne.n	801c33c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	2200      	movs	r2, #0
 801c332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801c336:	6878      	ldr	r0, [r7, #4]
 801c338:	f7e7 f968 	bl	800360c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	2224      	movs	r2, #36	; 0x24
 801c340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	681a      	ldr	r2, [r3, #0]
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	f022 0201 	bic.w	r2, r2, #1
 801c352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	681a      	ldr	r2, [r3, #0]
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	681a      	ldr	r2, [r3, #0]
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801c374:	f003 fb62 	bl	801fa3c <HAL_RCC_GetPCLK1Freq>
 801c378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	685b      	ldr	r3, [r3, #4]
 801c37e:	4a81      	ldr	r2, [pc, #516]	; (801c584 <HAL_I2C_Init+0x274>)
 801c380:	4293      	cmp	r3, r2
 801c382:	d807      	bhi.n	801c394 <HAL_I2C_Init+0x84>
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	4a80      	ldr	r2, [pc, #512]	; (801c588 <HAL_I2C_Init+0x278>)
 801c388:	4293      	cmp	r3, r2
 801c38a:	bf94      	ite	ls
 801c38c:	2301      	movls	r3, #1
 801c38e:	2300      	movhi	r3, #0
 801c390:	b2db      	uxtb	r3, r3
 801c392:	e006      	b.n	801c3a2 <HAL_I2C_Init+0x92>
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	4a7d      	ldr	r2, [pc, #500]	; (801c58c <HAL_I2C_Init+0x27c>)
 801c398:	4293      	cmp	r3, r2
 801c39a:	bf94      	ite	ls
 801c39c:	2301      	movls	r3, #1
 801c39e:	2300      	movhi	r3, #0
 801c3a0:	b2db      	uxtb	r3, r3
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d001      	beq.n	801c3aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801c3a6:	2301      	movs	r3, #1
 801c3a8:	e0e7      	b.n	801c57a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	4a78      	ldr	r2, [pc, #480]	; (801c590 <HAL_I2C_Init+0x280>)
 801c3ae:	fba2 2303 	umull	r2, r3, r2, r3
 801c3b2:	0c9b      	lsrs	r3, r3, #18
 801c3b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	685b      	ldr	r3, [r3, #4]
 801c3bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	68ba      	ldr	r2, [r7, #8]
 801c3c6:	430a      	orrs	r2, r1
 801c3c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	6a1b      	ldr	r3, [r3, #32]
 801c3d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	685b      	ldr	r3, [r3, #4]
 801c3d8:	4a6a      	ldr	r2, [pc, #424]	; (801c584 <HAL_I2C_Init+0x274>)
 801c3da:	4293      	cmp	r3, r2
 801c3dc:	d802      	bhi.n	801c3e4 <HAL_I2C_Init+0xd4>
 801c3de:	68bb      	ldr	r3, [r7, #8]
 801c3e0:	3301      	adds	r3, #1
 801c3e2:	e009      	b.n	801c3f8 <HAL_I2C_Init+0xe8>
 801c3e4:	68bb      	ldr	r3, [r7, #8]
 801c3e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c3ea:	fb02 f303 	mul.w	r3, r2, r3
 801c3ee:	4a69      	ldr	r2, [pc, #420]	; (801c594 <HAL_I2C_Init+0x284>)
 801c3f0:	fba2 2303 	umull	r2, r3, r2, r3
 801c3f4:	099b      	lsrs	r3, r3, #6
 801c3f6:	3301      	adds	r3, #1
 801c3f8:	687a      	ldr	r2, [r7, #4]
 801c3fa:	6812      	ldr	r2, [r2, #0]
 801c3fc:	430b      	orrs	r3, r1
 801c3fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	69db      	ldr	r3, [r3, #28]
 801c406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801c40a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	685b      	ldr	r3, [r3, #4]
 801c412:	495c      	ldr	r1, [pc, #368]	; (801c584 <HAL_I2C_Init+0x274>)
 801c414:	428b      	cmp	r3, r1
 801c416:	d819      	bhi.n	801c44c <HAL_I2C_Init+0x13c>
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	1e59      	subs	r1, r3, #1
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	685b      	ldr	r3, [r3, #4]
 801c420:	005b      	lsls	r3, r3, #1
 801c422:	fbb1 f3f3 	udiv	r3, r1, r3
 801c426:	1c59      	adds	r1, r3, #1
 801c428:	f640 73fc 	movw	r3, #4092	; 0xffc
 801c42c:	400b      	ands	r3, r1
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d00a      	beq.n	801c448 <HAL_I2C_Init+0x138>
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	1e59      	subs	r1, r3, #1
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	685b      	ldr	r3, [r3, #4]
 801c43a:	005b      	lsls	r3, r3, #1
 801c43c:	fbb1 f3f3 	udiv	r3, r1, r3
 801c440:	3301      	adds	r3, #1
 801c442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c446:	e051      	b.n	801c4ec <HAL_I2C_Init+0x1dc>
 801c448:	2304      	movs	r3, #4
 801c44a:	e04f      	b.n	801c4ec <HAL_I2C_Init+0x1dc>
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	689b      	ldr	r3, [r3, #8]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d111      	bne.n	801c478 <HAL_I2C_Init+0x168>
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	1e58      	subs	r0, r3, #1
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	6859      	ldr	r1, [r3, #4]
 801c45c:	460b      	mov	r3, r1
 801c45e:	005b      	lsls	r3, r3, #1
 801c460:	440b      	add	r3, r1
 801c462:	fbb0 f3f3 	udiv	r3, r0, r3
 801c466:	3301      	adds	r3, #1
 801c468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	bf0c      	ite	eq
 801c470:	2301      	moveq	r3, #1
 801c472:	2300      	movne	r3, #0
 801c474:	b2db      	uxtb	r3, r3
 801c476:	e012      	b.n	801c49e <HAL_I2C_Init+0x18e>
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	1e58      	subs	r0, r3, #1
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	6859      	ldr	r1, [r3, #4]
 801c480:	460b      	mov	r3, r1
 801c482:	009b      	lsls	r3, r3, #2
 801c484:	440b      	add	r3, r1
 801c486:	0099      	lsls	r1, r3, #2
 801c488:	440b      	add	r3, r1
 801c48a:	fbb0 f3f3 	udiv	r3, r0, r3
 801c48e:	3301      	adds	r3, #1
 801c490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c494:	2b00      	cmp	r3, #0
 801c496:	bf0c      	ite	eq
 801c498:	2301      	moveq	r3, #1
 801c49a:	2300      	movne	r3, #0
 801c49c:	b2db      	uxtb	r3, r3
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d001      	beq.n	801c4a6 <HAL_I2C_Init+0x196>
 801c4a2:	2301      	movs	r3, #1
 801c4a4:	e022      	b.n	801c4ec <HAL_I2C_Init+0x1dc>
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	689b      	ldr	r3, [r3, #8]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d10e      	bne.n	801c4cc <HAL_I2C_Init+0x1bc>
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	1e58      	subs	r0, r3, #1
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	6859      	ldr	r1, [r3, #4]
 801c4b6:	460b      	mov	r3, r1
 801c4b8:	005b      	lsls	r3, r3, #1
 801c4ba:	440b      	add	r3, r1
 801c4bc:	fbb0 f3f3 	udiv	r3, r0, r3
 801c4c0:	3301      	adds	r3, #1
 801c4c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c4c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c4ca:	e00f      	b.n	801c4ec <HAL_I2C_Init+0x1dc>
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	1e58      	subs	r0, r3, #1
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	6859      	ldr	r1, [r3, #4]
 801c4d4:	460b      	mov	r3, r1
 801c4d6:	009b      	lsls	r3, r3, #2
 801c4d8:	440b      	add	r3, r1
 801c4da:	0099      	lsls	r1, r3, #2
 801c4dc:	440b      	add	r3, r1
 801c4de:	fbb0 f3f3 	udiv	r3, r0, r3
 801c4e2:	3301      	adds	r3, #1
 801c4e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c4e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801c4ec:	6879      	ldr	r1, [r7, #4]
 801c4ee:	6809      	ldr	r1, [r1, #0]
 801c4f0:	4313      	orrs	r3, r2
 801c4f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	69da      	ldr	r2, [r3, #28]
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	6a1b      	ldr	r3, [r3, #32]
 801c506:	431a      	orrs	r2, r3
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	430a      	orrs	r2, r1
 801c50e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	689b      	ldr	r3, [r3, #8]
 801c516:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801c51a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801c51e:	687a      	ldr	r2, [r7, #4]
 801c520:	6911      	ldr	r1, [r2, #16]
 801c522:	687a      	ldr	r2, [r7, #4]
 801c524:	68d2      	ldr	r2, [r2, #12]
 801c526:	4311      	orrs	r1, r2
 801c528:	687a      	ldr	r2, [r7, #4]
 801c52a:	6812      	ldr	r2, [r2, #0]
 801c52c:	430b      	orrs	r3, r1
 801c52e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	68db      	ldr	r3, [r3, #12]
 801c536:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	695a      	ldr	r2, [r3, #20]
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	699b      	ldr	r3, [r3, #24]
 801c542:	431a      	orrs	r2, r3
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	430a      	orrs	r2, r1
 801c54a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	681a      	ldr	r2, [r3, #0]
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	f042 0201 	orr.w	r2, r2, #1
 801c55a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	2200      	movs	r2, #0
 801c560:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	2220      	movs	r2, #32
 801c566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	2200      	movs	r2, #0
 801c56e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2200      	movs	r2, #0
 801c574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801c578:	2300      	movs	r3, #0
}
 801c57a:	4618      	mov	r0, r3
 801c57c:	3710      	adds	r7, #16
 801c57e:	46bd      	mov	sp, r7
 801c580:	bd80      	pop	{r7, pc}
 801c582:	bf00      	nop
 801c584:	000186a0 	.word	0x000186a0
 801c588:	001e847f 	.word	0x001e847f
 801c58c:	003d08ff 	.word	0x003d08ff
 801c590:	431bde83 	.word	0x431bde83
 801c594:	10624dd3 	.word	0x10624dd3

0801c598 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b086      	sub	sp, #24
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	60f8      	str	r0, [r7, #12]
 801c5a0:	607a      	str	r2, [r7, #4]
 801c5a2:	461a      	mov	r2, r3
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	817b      	strh	r3, [r7, #10]
 801c5a8:	4613      	mov	r3, r2
 801c5aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c5b6:	b2db      	uxtb	r3, r3
 801c5b8:	2b20      	cmp	r3, #32
 801c5ba:	f040 810d 	bne.w	801c7d8 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c5be:	4b89      	ldr	r3, [pc, #548]	; (801c7e4 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	08db      	lsrs	r3, r3, #3
 801c5c4:	4a88      	ldr	r2, [pc, #544]	; (801c7e8 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801c5c6:	fba2 2303 	umull	r2, r3, r2, r3
 801c5ca:	0a1a      	lsrs	r2, r3, #8
 801c5cc:	4613      	mov	r3, r2
 801c5ce:	009b      	lsls	r3, r3, #2
 801c5d0:	4413      	add	r3, r2
 801c5d2:	009a      	lsls	r2, r3, #2
 801c5d4:	4413      	add	r3, r2
 801c5d6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801c5d8:	693b      	ldr	r3, [r7, #16]
 801c5da:	3b01      	subs	r3, #1
 801c5dc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801c5de:	693b      	ldr	r3, [r7, #16]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d116      	bne.n	801c612 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	2220      	movs	r2, #32
 801c5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5fe:	f043 0220 	orr.w	r2, r3, #32
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	2200      	movs	r2, #0
 801c60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c60e:	2301      	movs	r3, #1
 801c610:	e0e3      	b.n	801c7da <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	699b      	ldr	r3, [r3, #24]
 801c618:	f003 0302 	and.w	r3, r3, #2
 801c61c:	2b02      	cmp	r3, #2
 801c61e:	d0db      	beq.n	801c5d8 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c626:	2b01      	cmp	r3, #1
 801c628:	d101      	bne.n	801c62e <HAL_I2C_Master_Transmit_DMA+0x96>
 801c62a:	2302      	movs	r3, #2
 801c62c:	e0d5      	b.n	801c7da <HAL_I2C_Master_Transmit_DMA+0x242>
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	2201      	movs	r2, #1
 801c632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	f003 0301 	and.w	r3, r3, #1
 801c640:	2b01      	cmp	r3, #1
 801c642:	d007      	beq.n	801c654 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	681a      	ldr	r2, [r3, #0]
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	f042 0201 	orr.w	r2, r2, #1
 801c652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	681a      	ldr	r2, [r3, #0]
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	2221      	movs	r2, #33	; 0x21
 801c668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	2210      	movs	r2, #16
 801c670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	2200      	movs	r2, #0
 801c678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	687a      	ldr	r2, [r7, #4]
 801c67e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	893a      	ldrh	r2, [r7, #8]
 801c684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c68a:	b29a      	uxth	r2, r3
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	4a56      	ldr	r2, [pc, #344]	; (801c7ec <HAL_I2C_Master_Transmit_DMA+0x254>)
 801c694:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c696:	897a      	ldrh	r2, [r7, #10]
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d07b      	beq.n	801c79c <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d02a      	beq.n	801c702 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6b0:	4a4f      	ldr	r2, [pc, #316]	; (801c7f0 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801c6b2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6b8:	4a4e      	ldr	r2, [pc, #312]	; (801c7f4 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801c6ba:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6c0:	2200      	movs	r2, #0
 801c6c2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6d0:	2200      	movs	r2, #0
 801c6d2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c6d8:	2200      	movs	r2, #0
 801c6da:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6e4:	4619      	mov	r1, r3
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	3310      	adds	r3, #16
 801c6ec:	461a      	mov	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c6f2:	f7ff f805 	bl	801b700 <HAL_DMA_Start_IT>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c6fa:	7dfb      	ldrb	r3, [r7, #23]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d139      	bne.n	801c774 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801c700:	e013      	b.n	801c72a <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	2220      	movs	r2, #32
 801c706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	2200      	movs	r2, #0
 801c70e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c716:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	2200      	movs	r2, #0
 801c722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c726:	2301      	movs	r3, #1
 801c728:	e057      	b.n	801c7da <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	2200      	movs	r2, #0
 801c72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	685a      	ldr	r2, [r3, #4]
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801c740:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	685a      	ldr	r2, [r3, #4]
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c750:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	681a      	ldr	r2, [r3, #0]
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c760:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	681a      	ldr	r2, [r3, #0]
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c770:	601a      	str	r2, [r3, #0]
 801c772:	e02f      	b.n	801c7d4 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	2220      	movs	r2, #32
 801c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	2200      	movs	r2, #0
 801c780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c788:	f043 0210 	orr.w	r2, r3, #16
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	2200      	movs	r2, #0
 801c794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c798:	2301      	movs	r3, #1
 801c79a:	e01e      	b.n	801c7da <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	681a      	ldr	r2, [r3, #0]
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c7aa:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	681a      	ldr	r2, [r3, #0]
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c7ba:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	2200      	movs	r2, #0
 801c7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	685a      	ldr	r2, [r3, #4]
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801c7d2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	e000      	b.n	801c7da <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801c7d8:	2302      	movs	r3, #2
  }
}
 801c7da:	4618      	mov	r0, r3
 801c7dc:	3718      	adds	r7, #24
 801c7de:	46bd      	mov	sp, r7
 801c7e0:	bd80      	pop	{r7, pc}
 801c7e2:	bf00      	nop
 801c7e4:	20000020 	.word	0x20000020
 801c7e8:	14f8b589 	.word	0x14f8b589
 801c7ec:	ffff0000 	.word	0xffff0000
 801c7f0:	0801eac1 	.word	0x0801eac1
 801c7f4:	0801ec6b 	.word	0x0801ec6b

0801c7f8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b086      	sub	sp, #24
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	60f8      	str	r0, [r7, #12]
 801c800:	607a      	str	r2, [r7, #4]
 801c802:	461a      	mov	r2, r3
 801c804:	460b      	mov	r3, r1
 801c806:	817b      	strh	r3, [r7, #10]
 801c808:	4613      	mov	r3, r2
 801c80a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801c80c:	2300      	movs	r3, #0
 801c80e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c816:	b2db      	uxtb	r3, r3
 801c818:	2b20      	cmp	r3, #32
 801c81a:	f040 810d 	bne.w	801ca38 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801c81e:	4b89      	ldr	r3, [pc, #548]	; (801ca44 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	08db      	lsrs	r3, r3, #3
 801c824:	4a88      	ldr	r2, [pc, #544]	; (801ca48 <HAL_I2C_Master_Receive_DMA+0x250>)
 801c826:	fba2 2303 	umull	r2, r3, r2, r3
 801c82a:	0a1a      	lsrs	r2, r3, #8
 801c82c:	4613      	mov	r3, r2
 801c82e:	009b      	lsls	r3, r3, #2
 801c830:	4413      	add	r3, r2
 801c832:	009a      	lsls	r2, r3, #2
 801c834:	4413      	add	r3, r2
 801c836:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801c838:	693b      	ldr	r3, [r7, #16]
 801c83a:	3b01      	subs	r3, #1
 801c83c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801c83e:	693b      	ldr	r3, [r7, #16]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d116      	bne.n	801c872 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	2200      	movs	r2, #0
 801c848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	2220      	movs	r2, #32
 801c84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	2200      	movs	r2, #0
 801c856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c85e:	f043 0220 	orr.w	r2, r3, #32
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	2200      	movs	r2, #0
 801c86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c86e:	2301      	movs	r3, #1
 801c870:	e0e3      	b.n	801ca3a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	699b      	ldr	r3, [r3, #24]
 801c878:	f003 0302 	and.w	r3, r3, #2
 801c87c:	2b02      	cmp	r3, #2
 801c87e:	d0db      	beq.n	801c838 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c886:	2b01      	cmp	r3, #1
 801c888:	d101      	bne.n	801c88e <HAL_I2C_Master_Receive_DMA+0x96>
 801c88a:	2302      	movs	r3, #2
 801c88c:	e0d5      	b.n	801ca3a <HAL_I2C_Master_Receive_DMA+0x242>
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	2201      	movs	r2, #1
 801c892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	f003 0301 	and.w	r3, r3, #1
 801c8a0:	2b01      	cmp	r3, #1
 801c8a2:	d007      	beq.n	801c8b4 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	681a      	ldr	r2, [r3, #0]
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	f042 0201 	orr.w	r2, r2, #1
 801c8b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	681a      	ldr	r2, [r3, #0]
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c8c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	2222      	movs	r2, #34	; 0x22
 801c8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	2210      	movs	r2, #16
 801c8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	687a      	ldr	r2, [r7, #4]
 801c8de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	893a      	ldrh	r2, [r7, #8]
 801c8e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8ea:	b29a      	uxth	r2, r3
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	4a56      	ldr	r2, [pc, #344]	; (801ca4c <HAL_I2C_Master_Receive_DMA+0x254>)
 801c8f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801c8f6:	897a      	ldrh	r2, [r7, #10]
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c900:	2b00      	cmp	r3, #0
 801c902:	d07b      	beq.n	801c9fc <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d02a      	beq.n	801c962 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c910:	4a4f      	ldr	r2, [pc, #316]	; (801ca50 <HAL_I2C_Master_Receive_DMA+0x258>)
 801c912:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c918:	4a4e      	ldr	r2, [pc, #312]	; (801ca54 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801c91a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c920:	2200      	movs	r2, #0
 801c922:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c928:	2200      	movs	r2, #0
 801c92a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c930:	2200      	movs	r2, #0
 801c932:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c938:	2200      	movs	r2, #0
 801c93a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	3310      	adds	r3, #16
 801c946:	4619      	mov	r1, r3
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c94c:	461a      	mov	r2, r3
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c952:	f7fe fed5 	bl	801b700 <HAL_DMA_Start_IT>
 801c956:	4603      	mov	r3, r0
 801c958:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801c95a:	7dfb      	ldrb	r3, [r7, #23]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d139      	bne.n	801c9d4 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801c960:	e013      	b.n	801c98a <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	2220      	movs	r2, #32
 801c966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	2200      	movs	r2, #0
 801c96e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c976:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	2200      	movs	r2, #0
 801c982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801c986:	2301      	movs	r3, #1
 801c988:	e057      	b.n	801ca3a <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	681a      	ldr	r2, [r3, #0]
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c998:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	681a      	ldr	r2, [r3, #0]
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c9a8:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	685a      	ldr	r2, [r3, #4]
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801c9c0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	685a      	ldr	r2, [r3, #4]
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c9d0:	605a      	str	r2, [r3, #4]
 801c9d2:	e02f      	b.n	801ca34 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	2220      	movs	r2, #32
 801c9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	2200      	movs	r2, #0
 801c9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9e8:	f043 0210 	orr.w	r2, r3, #16
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c9f8:	2301      	movs	r3, #1
 801c9fa:	e01e      	b.n	801ca3a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	2200      	movs	r2, #0
 801ca00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	685a      	ldr	r2, [r3, #4]
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801ca12:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	681a      	ldr	r2, [r3, #0]
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ca22:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ca24:	68fb      	ldr	r3, [r7, #12]
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	681a      	ldr	r2, [r3, #0]
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ca32:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801ca34:	2300      	movs	r3, #0
 801ca36:	e000      	b.n	801ca3a <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801ca38:	2302      	movs	r3, #2
  }
}
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	3718      	adds	r7, #24
 801ca3e:	46bd      	mov	sp, r7
 801ca40:	bd80      	pop	{r7, pc}
 801ca42:	bf00      	nop
 801ca44:	20000020 	.word	0x20000020
 801ca48:	14f8b589 	.word	0x14f8b589
 801ca4c:	ffff0000 	.word	0xffff0000
 801ca50:	0801eac1 	.word	0x0801eac1
 801ca54:	0801ec6b 	.word	0x0801ec6b

0801ca58 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b08a      	sub	sp, #40	; 0x28
 801ca5c:	af02      	add	r7, sp, #8
 801ca5e:	60f8      	str	r0, [r7, #12]
 801ca60:	4608      	mov	r0, r1
 801ca62:	4611      	mov	r1, r2
 801ca64:	461a      	mov	r2, r3
 801ca66:	4603      	mov	r3, r0
 801ca68:	817b      	strh	r3, [r7, #10]
 801ca6a:	460b      	mov	r3, r1
 801ca6c:	813b      	strh	r3, [r7, #8]
 801ca6e:	4613      	mov	r3, r2
 801ca70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801ca72:	2300      	movs	r3, #0
 801ca74:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ca76:	f7fe f843 	bl	801ab00 <HAL_GetTick>
 801ca7a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ca82:	b2db      	uxtb	r3, r3
 801ca84:	2b20      	cmp	r3, #32
 801ca86:	f040 8145 	bne.w	801cd14 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801ca8a:	4b9d      	ldr	r3, [pc, #628]	; (801cd00 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	08db      	lsrs	r3, r3, #3
 801ca90:	4a9c      	ldr	r2, [pc, #624]	; (801cd04 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801ca92:	fba2 2303 	umull	r2, r3, r2, r3
 801ca96:	0a1a      	lsrs	r2, r3, #8
 801ca98:	4613      	mov	r3, r2
 801ca9a:	009b      	lsls	r3, r3, #2
 801ca9c:	4413      	add	r3, r2
 801ca9e:	009a      	lsls	r2, r3, #2
 801caa0:	4413      	add	r3, r2
 801caa2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801caa4:	697b      	ldr	r3, [r7, #20]
 801caa6:	3b01      	subs	r3, #1
 801caa8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801caaa:	697b      	ldr	r3, [r7, #20]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d116      	bne.n	801cade <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	2200      	movs	r2, #0
 801cab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	2220      	movs	r2, #32
 801caba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	2200      	movs	r2, #0
 801cac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801caca:	f043 0220 	orr.w	r2, r3, #32
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	2200      	movs	r2, #0
 801cad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cada:	2301      	movs	r3, #1
 801cadc:	e11b      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	699b      	ldr	r3, [r3, #24]
 801cae4:	f003 0302 	and.w	r3, r3, #2
 801cae8:	2b02      	cmp	r3, #2
 801caea:	d0db      	beq.n	801caa4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801caf2:	2b01      	cmp	r3, #1
 801caf4:	d101      	bne.n	801cafa <HAL_I2C_Mem_Write_DMA+0xa2>
 801caf6:	2302      	movs	r3, #2
 801caf8:	e10d      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	2201      	movs	r2, #1
 801cafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	f003 0301 	and.w	r3, r3, #1
 801cb0c:	2b01      	cmp	r3, #1
 801cb0e:	d007      	beq.n	801cb20 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	681a      	ldr	r2, [r3, #0]
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	f042 0201 	orr.w	r2, r2, #1
 801cb1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	681a      	ldr	r2, [r3, #0]
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801cb2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	2221      	movs	r2, #33	; 0x21
 801cb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	2240      	movs	r2, #64	; 0x40
 801cb3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	2200      	movs	r2, #0
 801cb44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cb4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801cb50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cb56:	b29a      	uxth	r2, r3
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	4a6a      	ldr	r2, [pc, #424]	; (801cd08 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801cb60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801cb62:	897a      	ldrh	r2, [r7, #10]
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801cb68:	893a      	ldrh	r2, [r7, #8]
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801cb6e:	88fa      	ldrh	r2, [r7, #6]
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	2200      	movs	r2, #0
 801cb78:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	f000 80a9 	beq.w	801ccd6 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d02a      	beq.n	801cbe2 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb90:	4a5e      	ldr	r2, [pc, #376]	; (801cd0c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801cb92:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb98:	4a5d      	ldr	r2, [pc, #372]	; (801cd10 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801cb9a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cba0:	2200      	movs	r2, #0
 801cba2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cba8:	2200      	movs	r2, #0
 801cbaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cbb8:	2200      	movs	r2, #0
 801cbba:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbc4:	4619      	mov	r1, r3
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	3310      	adds	r3, #16
 801cbcc:	461a      	mov	r2, r3
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cbd2:	f7fe fd95 	bl	801b700 <HAL_DMA_Start_IT>
 801cbd6:	4603      	mov	r3, r0
 801cbd8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801cbda:	7efb      	ldrb	r3, [r7, #27]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d166      	bne.n	801ccae <HAL_I2C_Mem_Write_DMA+0x256>
 801cbe0:	e013      	b.n	801cc0a <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	2220      	movs	r2, #32
 801cbe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cbea:	68fb      	ldr	r3, [r7, #12]
 801cbec:	2200      	movs	r2, #0
 801cbee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbf6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801cbfe:	68fb      	ldr	r3, [r7, #12]
 801cc00:	2200      	movs	r2, #0
 801cc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801cc06:	2301      	movs	r3, #1
 801cc08:	e085      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801cc0a:	88f8      	ldrh	r0, [r7, #6]
 801cc0c:	893a      	ldrh	r2, [r7, #8]
 801cc0e:	8979      	ldrh	r1, [r7, #10]
 801cc10:	69fb      	ldr	r3, [r7, #28]
 801cc12:	9301      	str	r3, [sp, #4]
 801cc14:	2323      	movs	r3, #35	; 0x23
 801cc16:	9300      	str	r3, [sp, #0]
 801cc18:	4603      	mov	r3, r0
 801cc1a:	68f8      	ldr	r0, [r7, #12]
 801cc1c:	f001 fdd2 	bl	801e7c4 <I2C_RequestMemoryWrite>
 801cc20:	4603      	mov	r3, r0
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d022      	beq.n	801cc6c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	f7fe fe30 	bl	801b890 <HAL_DMA_Abort_IT>
 801cc30:	4603      	mov	r3, r0
 801cc32:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc38:	2200      	movs	r2, #0
 801cc3a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	681a      	ldr	r2, [r3, #0]
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801cc4a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	2200      	movs	r2, #0
 801cc50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	2200      	movs	r2, #0
 801cc56:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	681a      	ldr	r2, [r3, #0]
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	f022 0201 	bic.w	r2, r2, #1
 801cc66:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801cc68:	2301      	movs	r3, #1
 801cc6a:	e054      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	613b      	str	r3, [r7, #16]
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	695b      	ldr	r3, [r3, #20]
 801cc76:	613b      	str	r3, [r7, #16]
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	699b      	ldr	r3, [r3, #24]
 801cc7e:	613b      	str	r3, [r7, #16]
 801cc80:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	2200      	movs	r2, #0
 801cc86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	685a      	ldr	r2, [r3, #4]
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cc98:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	685a      	ldr	r2, [r3, #4]
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801cca8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801ccaa:	2300      	movs	r3, #0
 801ccac:	e033      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	2220      	movs	r2, #32
 801ccb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	2200      	movs	r2, #0
 801ccba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ccc2:	f043 0210 	orr.w	r2, r3, #16
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	2200      	movs	r2, #0
 801ccce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ccd2:	2301      	movs	r3, #1
 801ccd4:	e01f      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	2220      	movs	r2, #32
 801ccda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	2200      	movs	r2, #0
 801cce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ccea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801ccfa:	2301      	movs	r3, #1
 801ccfc:	e00b      	b.n	801cd16 <HAL_I2C_Mem_Write_DMA+0x2be>
 801ccfe:	bf00      	nop
 801cd00:	20000020 	.word	0x20000020
 801cd04:	14f8b589 	.word	0x14f8b589
 801cd08:	ffff0000 	.word	0xffff0000
 801cd0c:	0801eac1 	.word	0x0801eac1
 801cd10:	0801ec6b 	.word	0x0801ec6b
    }
  }
  else
  {
    return HAL_BUSY;
 801cd14:	2302      	movs	r3, #2
  }
}
 801cd16:	4618      	mov	r0, r3
 801cd18:	3720      	adds	r7, #32
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	bd80      	pop	{r7, pc}
 801cd1e:	bf00      	nop

0801cd20 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b08c      	sub	sp, #48	; 0x30
 801cd24:	af02      	add	r7, sp, #8
 801cd26:	60f8      	str	r0, [r7, #12]
 801cd28:	4608      	mov	r0, r1
 801cd2a:	4611      	mov	r1, r2
 801cd2c:	461a      	mov	r2, r3
 801cd2e:	4603      	mov	r3, r0
 801cd30:	817b      	strh	r3, [r7, #10]
 801cd32:	460b      	mov	r3, r1
 801cd34:	813b      	strh	r3, [r7, #8]
 801cd36:	4613      	mov	r3, r2
 801cd38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801cd3a:	f7fd fee1 	bl	801ab00 <HAL_GetTick>
 801cd3e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801cd40:	2300      	movs	r3, #0
 801cd42:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cd4a:	b2db      	uxtb	r3, r3
 801cd4c:	2b20      	cmp	r3, #32
 801cd4e:	f040 8176 	bne.w	801d03e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801cd52:	4b95      	ldr	r3, [pc, #596]	; (801cfa8 <HAL_I2C_Mem_Read_DMA+0x288>)
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	08db      	lsrs	r3, r3, #3
 801cd58:	4a94      	ldr	r2, [pc, #592]	; (801cfac <HAL_I2C_Mem_Read_DMA+0x28c>)
 801cd5a:	fba2 2303 	umull	r2, r3, r2, r3
 801cd5e:	0a1a      	lsrs	r2, r3, #8
 801cd60:	4613      	mov	r3, r2
 801cd62:	009b      	lsls	r3, r3, #2
 801cd64:	4413      	add	r3, r2
 801cd66:	009a      	lsls	r2, r3, #2
 801cd68:	4413      	add	r3, r2
 801cd6a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801cd6c:	69fb      	ldr	r3, [r7, #28]
 801cd6e:	3b01      	subs	r3, #1
 801cd70:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801cd72:	69fb      	ldr	r3, [r7, #28]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d116      	bne.n	801cda6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	2220      	movs	r2, #32
 801cd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	2200      	movs	r2, #0
 801cd8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801cd8e:	68fb      	ldr	r3, [r7, #12]
 801cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd92:	f043 0220 	orr.w	r2, r3, #32
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cd9a:	68fb      	ldr	r3, [r7, #12]
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cda2:	2301      	movs	r3, #1
 801cda4:	e14c      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801cda6:	68fb      	ldr	r3, [r7, #12]
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	699b      	ldr	r3, [r3, #24]
 801cdac:	f003 0302 	and.w	r3, r3, #2
 801cdb0:	2b02      	cmp	r3, #2
 801cdb2:	d0db      	beq.n	801cd6c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801cdba:	2b01      	cmp	r3, #1
 801cdbc:	d101      	bne.n	801cdc2 <HAL_I2C_Mem_Read_DMA+0xa2>
 801cdbe:	2302      	movs	r3, #2
 801cdc0:	e13e      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	2201      	movs	r2, #1
 801cdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	f003 0301 	and.w	r3, r3, #1
 801cdd4:	2b01      	cmp	r3, #1
 801cdd6:	d007      	beq.n	801cde8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801cdd8:	68fb      	ldr	r3, [r7, #12]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	681a      	ldr	r2, [r3, #0]
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	f042 0201 	orr.w	r2, r2, #1
 801cde6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	681a      	ldr	r2, [r3, #0]
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801cdf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801cdf8:	68fb      	ldr	r3, [r7, #12]
 801cdfa:	2222      	movs	r2, #34	; 0x22
 801cdfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	2240      	movs	r2, #64	; 0x40
 801ce04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	2200      	movs	r2, #0
 801ce0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801ce18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ce1e:	b29a      	uxth	r2, r3
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	4a62      	ldr	r2, [pc, #392]	; (801cfb0 <HAL_I2C_Mem_Read_DMA+0x290>)
 801ce28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801ce2a:	897a      	ldrh	r2, [r7, #10]
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801ce30:	893a      	ldrh	r2, [r7, #8]
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801ce36:	88fa      	ldrh	r2, [r7, #6]
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	2200      	movs	r2, #0
 801ce40:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	f000 80cc 	beq.w	801cfe4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d02d      	beq.n	801ceb0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce58:	4a56      	ldr	r2, [pc, #344]	; (801cfb4 <HAL_I2C_Mem_Read_DMA+0x294>)
 801ce5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce60:	4a55      	ldr	r2, [pc, #340]	; (801cfb8 <HAL_I2C_Mem_Read_DMA+0x298>)
 801ce62:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce68:	2200      	movs	r2, #0
 801ce6a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce70:	2200      	movs	r2, #0
 801ce72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce78:	2200      	movs	r2, #0
 801ce7a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce80:	2200      	movs	r2, #0
 801ce82:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	3310      	adds	r3, #16
 801ce8e:	4619      	mov	r1, r3
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce94:	461a      	mov	r2, r3
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce9a:	f7fe fc31 	bl	801b700 <HAL_DMA_Start_IT>
 801ce9e:	4603      	mov	r3, r0
 801cea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801cea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	f040 8087 	bne.w	801cfbc <HAL_I2C_Mem_Read_DMA+0x29c>
 801ceae:	e013      	b.n	801ced8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	2220      	movs	r2, #32
 801ceb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	2200      	movs	r2, #0
 801cebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801cec0:	68fb      	ldr	r3, [r7, #12]
 801cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801cec8:	68fb      	ldr	r3, [r7, #12]
 801ceca:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	2200      	movs	r2, #0
 801ced0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801ced4:	2301      	movs	r3, #1
 801ced6:	e0b3      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801ced8:	88f8      	ldrh	r0, [r7, #6]
 801ceda:	893a      	ldrh	r2, [r7, #8]
 801cedc:	8979      	ldrh	r1, [r7, #10]
 801cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cee0:	9301      	str	r3, [sp, #4]
 801cee2:	2323      	movs	r3, #35	; 0x23
 801cee4:	9300      	str	r3, [sp, #0]
 801cee6:	4603      	mov	r3, r0
 801cee8:	68f8      	ldr	r0, [r7, #12]
 801ceea:	f001 fd01 	bl	801e8f0 <I2C_RequestMemoryRead>
 801ceee:	4603      	mov	r3, r0
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d023      	beq.n	801cf3c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cef8:	4618      	mov	r0, r3
 801cefa:	f7fe fcc9 	bl	801b890 <HAL_DMA_Abort_IT>
 801cefe:	4603      	mov	r3, r0
 801cf00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf08:	2200      	movs	r2, #0
 801cf0a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	681a      	ldr	r2, [r3, #0]
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801cf1a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	2200      	movs	r2, #0
 801cf20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	2200      	movs	r2, #0
 801cf26:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	681a      	ldr	r2, [r3, #0]
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	f022 0201 	bic.w	r2, r2, #1
 801cf36:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801cf38:	2301      	movs	r3, #1
 801cf3a:	e081      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cf40:	2b01      	cmp	r3, #1
 801cf42:	d108      	bne.n	801cf56 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801cf44:	68fb      	ldr	r3, [r7, #12]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	681a      	ldr	r2, [r3, #0]
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801cf52:	601a      	str	r2, [r3, #0]
 801cf54:	e007      	b.n	801cf66 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	685a      	ldr	r2, [r3, #4]
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801cf64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801cf66:	2300      	movs	r3, #0
 801cf68:	61bb      	str	r3, [r7, #24]
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	695b      	ldr	r3, [r3, #20]
 801cf70:	61bb      	str	r3, [r7, #24]
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	699b      	ldr	r3, [r3, #24]
 801cf78:	61bb      	str	r3, [r7, #24]
 801cf7a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	2200      	movs	r2, #0
 801cf80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	685a      	ldr	r2, [r3, #4]
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801cf92:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	685a      	ldr	r2, [r3, #4]
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801cfa2:	605a      	str	r2, [r3, #4]
 801cfa4:	e049      	b.n	801d03a <HAL_I2C_Mem_Read_DMA+0x31a>
 801cfa6:	bf00      	nop
 801cfa8:	20000020 	.word	0x20000020
 801cfac:	14f8b589 	.word	0x14f8b589
 801cfb0:	ffff0000 	.word	0xffff0000
 801cfb4:	0801eac1 	.word	0x0801eac1
 801cfb8:	0801ec6b 	.word	0x0801ec6b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	2220      	movs	r2, #32
 801cfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	2200      	movs	r2, #0
 801cfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cfd0:	f043 0210 	orr.w	r2, r3, #16
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	2200      	movs	r2, #0
 801cfdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801cfe0:	2301      	movs	r3, #1
 801cfe2:	e02d      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801cfe4:	88f8      	ldrh	r0, [r7, #6]
 801cfe6:	893a      	ldrh	r2, [r7, #8]
 801cfe8:	8979      	ldrh	r1, [r7, #10]
 801cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfec:	9301      	str	r3, [sp, #4]
 801cfee:	2323      	movs	r3, #35	; 0x23
 801cff0:	9300      	str	r3, [sp, #0]
 801cff2:	4603      	mov	r3, r0
 801cff4:	68f8      	ldr	r0, [r7, #12]
 801cff6:	f001 fc7b 	bl	801e8f0 <I2C_RequestMemoryRead>
 801cffa:	4603      	mov	r3, r0
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d001      	beq.n	801d004 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801d000:	2301      	movs	r3, #1
 801d002:	e01d      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801d004:	2300      	movs	r3, #0
 801d006:	617b      	str	r3, [r7, #20]
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	695b      	ldr	r3, [r3, #20]
 801d00e:	617b      	str	r3, [r7, #20]
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	699b      	ldr	r3, [r3, #24]
 801d016:	617b      	str	r3, [r7, #20]
 801d018:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	681a      	ldr	r2, [r3, #0]
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d028:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	2220      	movs	r2, #32
 801d02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	2200      	movs	r2, #0
 801d036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801d03a:	2300      	movs	r3, #0
 801d03c:	e000      	b.n	801d040 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801d03e:	2302      	movs	r3, #2
  }
}
 801d040:	4618      	mov	r0, r3
 801d042:	3728      	adds	r7, #40	; 0x28
 801d044:	46bd      	mov	sp, r7
 801d046:	bd80      	pop	{r7, pc}

0801d048 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	b088      	sub	sp, #32
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801d050:	2300      	movs	r3, #0
 801d052:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	685b      	ldr	r3, [r3, #4]
 801d05a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d060:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d068:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d070:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801d072:	7bfb      	ldrb	r3, [r7, #15]
 801d074:	2b10      	cmp	r3, #16
 801d076:	d003      	beq.n	801d080 <HAL_I2C_EV_IRQHandler+0x38>
 801d078:	7bfb      	ldrb	r3, [r7, #15]
 801d07a:	2b40      	cmp	r3, #64	; 0x40
 801d07c:	f040 80c1 	bne.w	801d202 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	699b      	ldr	r3, [r3, #24]
 801d086:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	695b      	ldr	r3, [r3, #20]
 801d08e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801d090:	69fb      	ldr	r3, [r7, #28]
 801d092:	f003 0301 	and.w	r3, r3, #1
 801d096:	2b00      	cmp	r3, #0
 801d098:	d10d      	bne.n	801d0b6 <HAL_I2C_EV_IRQHandler+0x6e>
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801d0a0:	d003      	beq.n	801d0aa <HAL_I2C_EV_IRQHandler+0x62>
 801d0a2:	693b      	ldr	r3, [r7, #16]
 801d0a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801d0a8:	d101      	bne.n	801d0ae <HAL_I2C_EV_IRQHandler+0x66>
 801d0aa:	2301      	movs	r3, #1
 801d0ac:	e000      	b.n	801d0b0 <HAL_I2C_EV_IRQHandler+0x68>
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	2b01      	cmp	r3, #1
 801d0b2:	f000 8132 	beq.w	801d31a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d0b6:	69fb      	ldr	r3, [r7, #28]
 801d0b8:	f003 0301 	and.w	r3, r3, #1
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d00c      	beq.n	801d0da <HAL_I2C_EV_IRQHandler+0x92>
 801d0c0:	697b      	ldr	r3, [r7, #20]
 801d0c2:	0a5b      	lsrs	r3, r3, #9
 801d0c4:	f003 0301 	and.w	r3, r3, #1
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d006      	beq.n	801d0da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801d0cc:	6878      	ldr	r0, [r7, #4]
 801d0ce:	f002 f82a 	bl	801f126 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801d0d2:	6878      	ldr	r0, [r7, #4]
 801d0d4:	f000 fd5b 	bl	801db8e <I2C_Master_SB>
 801d0d8:	e092      	b.n	801d200 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d0da:	69fb      	ldr	r3, [r7, #28]
 801d0dc:	08db      	lsrs	r3, r3, #3
 801d0de:	f003 0301 	and.w	r3, r3, #1
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d009      	beq.n	801d0fa <HAL_I2C_EV_IRQHandler+0xb2>
 801d0e6:	697b      	ldr	r3, [r7, #20]
 801d0e8:	0a5b      	lsrs	r3, r3, #9
 801d0ea:	f003 0301 	and.w	r3, r3, #1
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d003      	beq.n	801d0fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801d0f2:	6878      	ldr	r0, [r7, #4]
 801d0f4:	f000 fdd1 	bl	801dc9a <I2C_Master_ADD10>
 801d0f8:	e082      	b.n	801d200 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d0fa:	69fb      	ldr	r3, [r7, #28]
 801d0fc:	085b      	lsrs	r3, r3, #1
 801d0fe:	f003 0301 	and.w	r3, r3, #1
 801d102:	2b00      	cmp	r3, #0
 801d104:	d009      	beq.n	801d11a <HAL_I2C_EV_IRQHandler+0xd2>
 801d106:	697b      	ldr	r3, [r7, #20]
 801d108:	0a5b      	lsrs	r3, r3, #9
 801d10a:	f003 0301 	and.w	r3, r3, #1
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d003      	beq.n	801d11a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f000 fdeb 	bl	801dcee <I2C_Master_ADDR>
 801d118:	e072      	b.n	801d200 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801d11a:	69bb      	ldr	r3, [r7, #24]
 801d11c:	089b      	lsrs	r3, r3, #2
 801d11e:	f003 0301 	and.w	r3, r3, #1
 801d122:	2b00      	cmp	r3, #0
 801d124:	d03b      	beq.n	801d19e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	685b      	ldr	r3, [r3, #4]
 801d12c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d134:	f000 80f3 	beq.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d138:	69fb      	ldr	r3, [r7, #28]
 801d13a:	09db      	lsrs	r3, r3, #7
 801d13c:	f003 0301 	and.w	r3, r3, #1
 801d140:	2b00      	cmp	r3, #0
 801d142:	d00f      	beq.n	801d164 <HAL_I2C_EV_IRQHandler+0x11c>
 801d144:	697b      	ldr	r3, [r7, #20]
 801d146:	0a9b      	lsrs	r3, r3, #10
 801d148:	f003 0301 	and.w	r3, r3, #1
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d009      	beq.n	801d164 <HAL_I2C_EV_IRQHandler+0x11c>
 801d150:	69fb      	ldr	r3, [r7, #28]
 801d152:	089b      	lsrs	r3, r3, #2
 801d154:	f003 0301 	and.w	r3, r3, #1
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d103      	bne.n	801d164 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801d15c:	6878      	ldr	r0, [r7, #4]
 801d15e:	f000 f9cb 	bl	801d4f8 <I2C_MasterTransmit_TXE>
 801d162:	e04d      	b.n	801d200 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d164:	69fb      	ldr	r3, [r7, #28]
 801d166:	089b      	lsrs	r3, r3, #2
 801d168:	f003 0301 	and.w	r3, r3, #1
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	f000 80d6 	beq.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
 801d172:	697b      	ldr	r3, [r7, #20]
 801d174:	0a5b      	lsrs	r3, r3, #9
 801d176:	f003 0301 	and.w	r3, r3, #1
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	f000 80cf 	beq.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801d180:	7bbb      	ldrb	r3, [r7, #14]
 801d182:	2b21      	cmp	r3, #33	; 0x21
 801d184:	d103      	bne.n	801d18e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f000 fa52 	bl	801d630 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d18c:	e0c7      	b.n	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801d18e:	7bfb      	ldrb	r3, [r7, #15]
 801d190:	2b40      	cmp	r3, #64	; 0x40
 801d192:	f040 80c4 	bne.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801d196:	6878      	ldr	r0, [r7, #4]
 801d198:	f000 fac0 	bl	801d71c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d19c:	e0bf      	b.n	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	685b      	ldr	r3, [r3, #4]
 801d1a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d1a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d1ac:	f000 80b7 	beq.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d1b0:	69fb      	ldr	r3, [r7, #28]
 801d1b2:	099b      	lsrs	r3, r3, #6
 801d1b4:	f003 0301 	and.w	r3, r3, #1
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d00f      	beq.n	801d1dc <HAL_I2C_EV_IRQHandler+0x194>
 801d1bc:	697b      	ldr	r3, [r7, #20]
 801d1be:	0a9b      	lsrs	r3, r3, #10
 801d1c0:	f003 0301 	and.w	r3, r3, #1
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d009      	beq.n	801d1dc <HAL_I2C_EV_IRQHandler+0x194>
 801d1c8:	69fb      	ldr	r3, [r7, #28]
 801d1ca:	089b      	lsrs	r3, r3, #2
 801d1cc:	f003 0301 	and.w	r3, r3, #1
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d103      	bne.n	801d1dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801d1d4:	6878      	ldr	r0, [r7, #4]
 801d1d6:	f000 fb35 	bl	801d844 <I2C_MasterReceive_RXNE>
 801d1da:	e011      	b.n	801d200 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d1dc:	69fb      	ldr	r3, [r7, #28]
 801d1de:	089b      	lsrs	r3, r3, #2
 801d1e0:	f003 0301 	and.w	r3, r3, #1
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	f000 809a 	beq.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
 801d1ea:	697b      	ldr	r3, [r7, #20]
 801d1ec:	0a5b      	lsrs	r3, r3, #9
 801d1ee:	f003 0301 	and.w	r3, r3, #1
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	f000 8093 	beq.w	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f000 fbde 	bl	801d9ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d1fe:	e08e      	b.n	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
 801d200:	e08d      	b.n	801d31e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d206:	2b00      	cmp	r3, #0
 801d208:	d004      	beq.n	801d214 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	695b      	ldr	r3, [r3, #20]
 801d210:	61fb      	str	r3, [r7, #28]
 801d212:	e007      	b.n	801d224 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	699b      	ldr	r3, [r3, #24]
 801d21a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	695b      	ldr	r3, [r3, #20]
 801d222:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d224:	69fb      	ldr	r3, [r7, #28]
 801d226:	085b      	lsrs	r3, r3, #1
 801d228:	f003 0301 	and.w	r3, r3, #1
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d012      	beq.n	801d256 <HAL_I2C_EV_IRQHandler+0x20e>
 801d230:	697b      	ldr	r3, [r7, #20]
 801d232:	0a5b      	lsrs	r3, r3, #9
 801d234:	f003 0301 	and.w	r3, r3, #1
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d00c      	beq.n	801d256 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d240:	2b00      	cmp	r3, #0
 801d242:	d003      	beq.n	801d24c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	681b      	ldr	r3, [r3, #0]
 801d248:	699b      	ldr	r3, [r3, #24]
 801d24a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801d24c:	69b9      	ldr	r1, [r7, #24]
 801d24e:	6878      	ldr	r0, [r7, #4]
 801d250:	f000 ff9c 	bl	801e18c <I2C_Slave_ADDR>
 801d254:	e066      	b.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d256:	69fb      	ldr	r3, [r7, #28]
 801d258:	091b      	lsrs	r3, r3, #4
 801d25a:	f003 0301 	and.w	r3, r3, #1
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d009      	beq.n	801d276 <HAL_I2C_EV_IRQHandler+0x22e>
 801d262:	697b      	ldr	r3, [r7, #20]
 801d264:	0a5b      	lsrs	r3, r3, #9
 801d266:	f003 0301 	and.w	r3, r3, #1
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d003      	beq.n	801d276 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	f000 ffd6 	bl	801e220 <I2C_Slave_STOPF>
 801d274:	e056      	b.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801d276:	7bbb      	ldrb	r3, [r7, #14]
 801d278:	2b21      	cmp	r3, #33	; 0x21
 801d27a:	d002      	beq.n	801d282 <HAL_I2C_EV_IRQHandler+0x23a>
 801d27c:	7bbb      	ldrb	r3, [r7, #14]
 801d27e:	2b29      	cmp	r3, #41	; 0x29
 801d280:	d125      	bne.n	801d2ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d282:	69fb      	ldr	r3, [r7, #28]
 801d284:	09db      	lsrs	r3, r3, #7
 801d286:	f003 0301 	and.w	r3, r3, #1
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d00f      	beq.n	801d2ae <HAL_I2C_EV_IRQHandler+0x266>
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	0a9b      	lsrs	r3, r3, #10
 801d292:	f003 0301 	and.w	r3, r3, #1
 801d296:	2b00      	cmp	r3, #0
 801d298:	d009      	beq.n	801d2ae <HAL_I2C_EV_IRQHandler+0x266>
 801d29a:	69fb      	ldr	r3, [r7, #28]
 801d29c:	089b      	lsrs	r3, r3, #2
 801d29e:	f003 0301 	and.w	r3, r3, #1
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d103      	bne.n	801d2ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801d2a6:	6878      	ldr	r0, [r7, #4]
 801d2a8:	f000 feb2 	bl	801e010 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d2ac:	e039      	b.n	801d322 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d2ae:	69fb      	ldr	r3, [r7, #28]
 801d2b0:	089b      	lsrs	r3, r3, #2
 801d2b2:	f003 0301 	and.w	r3, r3, #1
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d033      	beq.n	801d322 <HAL_I2C_EV_IRQHandler+0x2da>
 801d2ba:	697b      	ldr	r3, [r7, #20]
 801d2bc:	0a5b      	lsrs	r3, r3, #9
 801d2be:	f003 0301 	and.w	r3, r3, #1
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d02d      	beq.n	801d322 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f000 fedf 	bl	801e08a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d2cc:	e029      	b.n	801d322 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d2ce:	69fb      	ldr	r3, [r7, #28]
 801d2d0:	099b      	lsrs	r3, r3, #6
 801d2d2:	f003 0301 	and.w	r3, r3, #1
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d00f      	beq.n	801d2fa <HAL_I2C_EV_IRQHandler+0x2b2>
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	0a9b      	lsrs	r3, r3, #10
 801d2de:	f003 0301 	and.w	r3, r3, #1
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d009      	beq.n	801d2fa <HAL_I2C_EV_IRQHandler+0x2b2>
 801d2e6:	69fb      	ldr	r3, [r7, #28]
 801d2e8:	089b      	lsrs	r3, r3, #2
 801d2ea:	f003 0301 	and.w	r3, r3, #1
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d103      	bne.n	801d2fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801d2f2:	6878      	ldr	r0, [r7, #4]
 801d2f4:	f000 feea 	bl	801e0cc <I2C_SlaveReceive_RXNE>
 801d2f8:	e014      	b.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d2fa:	69fb      	ldr	r3, [r7, #28]
 801d2fc:	089b      	lsrs	r3, r3, #2
 801d2fe:	f003 0301 	and.w	r3, r3, #1
 801d302:	2b00      	cmp	r3, #0
 801d304:	d00e      	beq.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
 801d306:	697b      	ldr	r3, [r7, #20]
 801d308:	0a5b      	lsrs	r3, r3, #9
 801d30a:	f003 0301 	and.w	r3, r3, #1
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d008      	beq.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801d312:	6878      	ldr	r0, [r7, #4]
 801d314:	f000 ff18 	bl	801e148 <I2C_SlaveReceive_BTF>
 801d318:	e004      	b.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801d31a:	bf00      	nop
 801d31c:	e002      	b.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801d31e:	bf00      	nop
 801d320:	e000      	b.n	801d324 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801d322:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801d324:	3720      	adds	r7, #32
 801d326:	46bd      	mov	sp, r7
 801d328:	bd80      	pop	{r7, pc}

0801d32a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801d32a:	b580      	push	{r7, lr}
 801d32c:	b08a      	sub	sp, #40	; 0x28
 801d32e:	af00      	add	r7, sp, #0
 801d330:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	695b      	ldr	r3, [r3, #20]
 801d338:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	685b      	ldr	r3, [r3, #4]
 801d340:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801d342:	2300      	movs	r3, #0
 801d344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d34c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d34e:	6a3b      	ldr	r3, [r7, #32]
 801d350:	0a1b      	lsrs	r3, r3, #8
 801d352:	f003 0301 	and.w	r3, r3, #1
 801d356:	2b00      	cmp	r3, #0
 801d358:	d00e      	beq.n	801d378 <HAL_I2C_ER_IRQHandler+0x4e>
 801d35a:	69fb      	ldr	r3, [r7, #28]
 801d35c:	0a1b      	lsrs	r3, r3, #8
 801d35e:	f003 0301 	and.w	r3, r3, #1
 801d362:	2b00      	cmp	r3, #0
 801d364:	d008      	beq.n	801d378 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d368:	f043 0301 	orr.w	r3, r3, #1
 801d36c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d376:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d378:	6a3b      	ldr	r3, [r7, #32]
 801d37a:	0a5b      	lsrs	r3, r3, #9
 801d37c:	f003 0301 	and.w	r3, r3, #1
 801d380:	2b00      	cmp	r3, #0
 801d382:	d00e      	beq.n	801d3a2 <HAL_I2C_ER_IRQHandler+0x78>
 801d384:	69fb      	ldr	r3, [r7, #28]
 801d386:	0a1b      	lsrs	r3, r3, #8
 801d388:	f003 0301 	and.w	r3, r3, #1
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d008      	beq.n	801d3a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d392:	f043 0302 	orr.w	r3, r3, #2
 801d396:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801d3a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d3a2:	6a3b      	ldr	r3, [r7, #32]
 801d3a4:	0a9b      	lsrs	r3, r3, #10
 801d3a6:	f003 0301 	and.w	r3, r3, #1
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d03f      	beq.n	801d42e <HAL_I2C_ER_IRQHandler+0x104>
 801d3ae:	69fb      	ldr	r3, [r7, #28]
 801d3b0:	0a1b      	lsrs	r3, r3, #8
 801d3b2:	f003 0301 	and.w	r3, r3, #1
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d039      	beq.n	801d42e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801d3ba:	7efb      	ldrb	r3, [r7, #27]
 801d3bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d3c2:	b29b      	uxth	r3, r3
 801d3c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d3cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801d3d4:	7ebb      	ldrb	r3, [r7, #26]
 801d3d6:	2b20      	cmp	r3, #32
 801d3d8:	d112      	bne.n	801d400 <HAL_I2C_ER_IRQHandler+0xd6>
 801d3da:	697b      	ldr	r3, [r7, #20]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d10f      	bne.n	801d400 <HAL_I2C_ER_IRQHandler+0xd6>
 801d3e0:	7cfb      	ldrb	r3, [r7, #19]
 801d3e2:	2b21      	cmp	r3, #33	; 0x21
 801d3e4:	d008      	beq.n	801d3f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801d3e6:	7cfb      	ldrb	r3, [r7, #19]
 801d3e8:	2b29      	cmp	r3, #41	; 0x29
 801d3ea:	d005      	beq.n	801d3f8 <HAL_I2C_ER_IRQHandler+0xce>
 801d3ec:	7cfb      	ldrb	r3, [r7, #19]
 801d3ee:	2b28      	cmp	r3, #40	; 0x28
 801d3f0:	d106      	bne.n	801d400 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	2b21      	cmp	r3, #33	; 0x21
 801d3f6:	d103      	bne.n	801d400 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801d3f8:	6878      	ldr	r0, [r7, #4]
 801d3fa:	f001 f841 	bl	801e480 <I2C_Slave_AF>
 801d3fe:	e016      	b.n	801d42e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801d408:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d40c:	f043 0304 	orr.w	r3, r3, #4
 801d410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801d412:	7efb      	ldrb	r3, [r7, #27]
 801d414:	2b10      	cmp	r3, #16
 801d416:	d002      	beq.n	801d41e <HAL_I2C_ER_IRQHandler+0xf4>
 801d418:	7efb      	ldrb	r3, [r7, #27]
 801d41a:	2b40      	cmp	r3, #64	; 0x40
 801d41c:	d107      	bne.n	801d42e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	681a      	ldr	r2, [r3, #0]
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d42c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801d42e:	6a3b      	ldr	r3, [r7, #32]
 801d430:	0adb      	lsrs	r3, r3, #11
 801d432:	f003 0301 	and.w	r3, r3, #1
 801d436:	2b00      	cmp	r3, #0
 801d438:	d00e      	beq.n	801d458 <HAL_I2C_ER_IRQHandler+0x12e>
 801d43a:	69fb      	ldr	r3, [r7, #28]
 801d43c:	0a1b      	lsrs	r3, r3, #8
 801d43e:	f003 0301 	and.w	r3, r3, #1
 801d442:	2b00      	cmp	r3, #0
 801d444:	d008      	beq.n	801d458 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d448:	f043 0308 	orr.w	r3, r3, #8
 801d44c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801d456:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801d458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d008      	beq.n	801d470 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d464:	431a      	orrs	r2, r3
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801d46a:	6878      	ldr	r0, [r7, #4]
 801d46c:	f001 f878 	bl	801e560 <I2C_ITError>
  }
}
 801d470:	bf00      	nop
 801d472:	3728      	adds	r7, #40	; 0x28
 801d474:	46bd      	mov	sp, r7
 801d476:	bd80      	pop	{r7, pc}

0801d478 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d478:	b480      	push	{r7}
 801d47a:	b083      	sub	sp, #12
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801d480:	bf00      	nop
 801d482:	370c      	adds	r7, #12
 801d484:	46bd      	mov	sp, r7
 801d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d48a:	4770      	bx	lr

0801d48c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d48c:	b480      	push	{r7}
 801d48e:	b083      	sub	sp, #12
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801d494:	bf00      	nop
 801d496:	370c      	adds	r7, #12
 801d498:	46bd      	mov	sp, r7
 801d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d49e:	4770      	bx	lr

0801d4a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801d4a0:	b480      	push	{r7}
 801d4a2:	b083      	sub	sp, #12
 801d4a4:	af00      	add	r7, sp, #0
 801d4a6:	6078      	str	r0, [r7, #4]
 801d4a8:	460b      	mov	r3, r1
 801d4aa:	70fb      	strb	r3, [r7, #3]
 801d4ac:	4613      	mov	r3, r2
 801d4ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801d4b0:	bf00      	nop
 801d4b2:	370c      	adds	r7, #12
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ba:	4770      	bx	lr

0801d4bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d4bc:	b480      	push	{r7}
 801d4be:	b083      	sub	sp, #12
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801d4c4:	bf00      	nop
 801d4c6:	370c      	adds	r7, #12
 801d4c8:	46bd      	mov	sp, r7
 801d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ce:	4770      	bx	lr

0801d4d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801d4d0:	b480      	push	{r7}
 801d4d2:	b083      	sub	sp, #12
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801d4d8:	bf00      	nop
 801d4da:	370c      	adds	r7, #12
 801d4dc:	46bd      	mov	sp, r7
 801d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4e2:	4770      	bx	lr

0801d4e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d4e4:	b480      	push	{r7}
 801d4e6:	b083      	sub	sp, #12
 801d4e8:	af00      	add	r7, sp, #0
 801d4ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801d4ec:	bf00      	nop
 801d4ee:	370c      	adds	r7, #12
 801d4f0:	46bd      	mov	sp, r7
 801d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f6:	4770      	bx	lr

0801d4f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b084      	sub	sp, #16
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d506:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d50e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d514:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d150      	bne.n	801d5c0 <I2C_MasterTransmit_TXE+0xc8>
 801d51e:	7bfb      	ldrb	r3, [r7, #15]
 801d520:	2b21      	cmp	r3, #33	; 0x21
 801d522:	d14d      	bne.n	801d5c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d524:	68bb      	ldr	r3, [r7, #8]
 801d526:	2b08      	cmp	r3, #8
 801d528:	d01d      	beq.n	801d566 <I2C_MasterTransmit_TXE+0x6e>
 801d52a:	68bb      	ldr	r3, [r7, #8]
 801d52c:	2b20      	cmp	r3, #32
 801d52e:	d01a      	beq.n	801d566 <I2C_MasterTransmit_TXE+0x6e>
 801d530:	68bb      	ldr	r3, [r7, #8]
 801d532:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d536:	d016      	beq.n	801d566 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	685a      	ldr	r2, [r3, #4]
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d546:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	2211      	movs	r2, #17
 801d54c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	2200      	movs	r2, #0
 801d552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	2220      	movs	r2, #32
 801d55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801d55e:	6878      	ldr	r0, [r7, #4]
 801d560:	f7e4 faba 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d564:	e060      	b.n	801d628 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	685a      	ldr	r2, [r3, #4]
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d574:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	681a      	ldr	r2, [r3, #0]
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d584:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	2200      	movs	r2, #0
 801d58a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	2220      	movs	r2, #32
 801d590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d59a:	b2db      	uxtb	r3, r3
 801d59c:	2b40      	cmp	r3, #64	; 0x40
 801d59e:	d107      	bne.n	801d5b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801d5a8:	6878      	ldr	r0, [r7, #4]
 801d5aa:	f7e4 fa7f 	bl	8001aac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d5ae:	e03b      	b.n	801d628 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801d5b8:	6878      	ldr	r0, [r7, #4]
 801d5ba:	f7e4 fa8d 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d5be:	e033      	b.n	801d628 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801d5c0:	7bfb      	ldrb	r3, [r7, #15]
 801d5c2:	2b21      	cmp	r3, #33	; 0x21
 801d5c4:	d005      	beq.n	801d5d2 <I2C_MasterTransmit_TXE+0xda>
 801d5c6:	7bbb      	ldrb	r3, [r7, #14]
 801d5c8:	2b40      	cmp	r3, #64	; 0x40
 801d5ca:	d12d      	bne.n	801d628 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801d5cc:	7bfb      	ldrb	r3, [r7, #15]
 801d5ce:	2b22      	cmp	r3, #34	; 0x22
 801d5d0:	d12a      	bne.n	801d628 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d108      	bne.n	801d5ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	685a      	ldr	r2, [r3, #4]
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d5ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801d5ec:	e01c      	b.n	801d628 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d5f4:	b2db      	uxtb	r3, r3
 801d5f6:	2b40      	cmp	r3, #64	; 0x40
 801d5f8:	d103      	bne.n	801d602 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801d5fa:	6878      	ldr	r0, [r7, #4]
 801d5fc:	f000 f88e 	bl	801d71c <I2C_MemoryTransmit_TXE_BTF>
}
 801d600:	e012      	b.n	801d628 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d606:	781a      	ldrb	r2, [r3, #0]
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	681b      	ldr	r3, [r3, #0]
 801d60c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d612:	1c5a      	adds	r2, r3, #1
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d61c:	b29b      	uxth	r3, r3
 801d61e:	3b01      	subs	r3, #1
 801d620:	b29a      	uxth	r2, r3
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d626:	e7ff      	b.n	801d628 <I2C_MasterTransmit_TXE+0x130>
 801d628:	bf00      	nop
 801d62a:	3710      	adds	r7, #16
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}

0801d630 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801d630:	b580      	push	{r7, lr}
 801d632:	b084      	sub	sp, #16
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d63c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d644:	b2db      	uxtb	r3, r3
 801d646:	2b21      	cmp	r3, #33	; 0x21
 801d648:	d164      	bne.n	801d714 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d64e:	b29b      	uxth	r3, r3
 801d650:	2b00      	cmp	r3, #0
 801d652:	d012      	beq.n	801d67a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d658:	781a      	ldrb	r2, [r3, #0]
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d664:	1c5a      	adds	r2, r3, #1
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d66e:	b29b      	uxth	r3, r3
 801d670:	3b01      	subs	r3, #1
 801d672:	b29a      	uxth	r2, r3
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801d678:	e04c      	b.n	801d714 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	2b08      	cmp	r3, #8
 801d67e:	d01d      	beq.n	801d6bc <I2C_MasterTransmit_BTF+0x8c>
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	2b20      	cmp	r3, #32
 801d684:	d01a      	beq.n	801d6bc <I2C_MasterTransmit_BTF+0x8c>
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801d68c:	d016      	beq.n	801d6bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	685a      	ldr	r2, [r3, #4]
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d69c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	2211      	movs	r2, #17
 801d6a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	2220      	movs	r2, #32
 801d6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801d6b4:	6878      	ldr	r0, [r7, #4]
 801d6b6:	f7e4 fa0f 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
}
 801d6ba:	e02b      	b.n	801d714 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	685a      	ldr	r2, [r3, #4]
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d6ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	681a      	ldr	r2, [r3, #0]
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d6da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	2200      	movs	r2, #0
 801d6e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	2220      	movs	r2, #32
 801d6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d6f0:	b2db      	uxtb	r3, r3
 801d6f2:	2b40      	cmp	r3, #64	; 0x40
 801d6f4:	d107      	bne.n	801d706 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801d6fe:	6878      	ldr	r0, [r7, #4]
 801d700:	f7e4 f9d4 	bl	8001aac <HAL_I2C_MemTxCpltCallback>
}
 801d704:	e006      	b.n	801d714 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	2200      	movs	r2, #0
 801d70a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801d70e:	6878      	ldr	r0, [r7, #4]
 801d710:	f7e4 f9e2 	bl	8001ad8 <HAL_I2C_MasterTxCpltCallback>
}
 801d714:	bf00      	nop
 801d716:	3710      	adds	r7, #16
 801d718:	46bd      	mov	sp, r7
 801d71a:	bd80      	pop	{r7, pc}

0801d71c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b084      	sub	sp, #16
 801d720:	af00      	add	r7, sp, #0
 801d722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d72a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d730:	2b00      	cmp	r3, #0
 801d732:	d11d      	bne.n	801d770 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d738:	2b01      	cmp	r3, #1
 801d73a:	d10b      	bne.n	801d754 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d740:	b2da      	uxtb	r2, r3
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d74c:	1c9a      	adds	r2, r3, #2
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801d752:	e073      	b.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d758:	b29b      	uxth	r3, r3
 801d75a:	121b      	asrs	r3, r3, #8
 801d75c:	b2da      	uxtb	r2, r3
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d768:	1c5a      	adds	r2, r3, #1
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d76e:	e065      	b.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d774:	2b01      	cmp	r3, #1
 801d776:	d10b      	bne.n	801d790 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d77c:	b2da      	uxtb	r2, r3
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d788:	1c5a      	adds	r2, r3, #1
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d78e:	e055      	b.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d794:	2b02      	cmp	r3, #2
 801d796:	d151      	bne.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801d798:	7bfb      	ldrb	r3, [r7, #15]
 801d79a:	2b22      	cmp	r3, #34	; 0x22
 801d79c:	d10d      	bne.n	801d7ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	681a      	ldr	r2, [r3, #0]
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d7ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d7b2:	1c5a      	adds	r2, r3, #1
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 801d7b8:	e040      	b.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7be:	b29b      	uxth	r3, r3
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d015      	beq.n	801d7f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801d7c4:	7bfb      	ldrb	r3, [r7, #15]
 801d7c6:	2b21      	cmp	r3, #33	; 0x21
 801d7c8:	d112      	bne.n	801d7f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7ce:	781a      	ldrb	r2, [r3, #0]
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7da:	1c5a      	adds	r2, r3, #1
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7e4:	b29b      	uxth	r3, r3
 801d7e6:	3b01      	subs	r3, #1
 801d7e8:	b29a      	uxth	r2, r3
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801d7ee:	e025      	b.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7f4:	b29b      	uxth	r3, r3
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d120      	bne.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
 801d7fa:	7bfb      	ldrb	r3, [r7, #15]
 801d7fc:	2b21      	cmp	r3, #33	; 0x21
 801d7fe:	d11d      	bne.n	801d83c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	685a      	ldr	r2, [r3, #4]
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d80e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	681a      	ldr	r2, [r3, #0]
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d81e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	2200      	movs	r2, #0
 801d824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	2220      	movs	r2, #32
 801d82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	2200      	movs	r2, #0
 801d832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801d836:	6878      	ldr	r0, [r7, #4]
 801d838:	f7e4 f938 	bl	8001aac <HAL_I2C_MemTxCpltCallback>
}
 801d83c:	bf00      	nop
 801d83e:	3710      	adds	r7, #16
 801d840:	46bd      	mov	sp, r7
 801d842:	bd80      	pop	{r7, pc}

0801d844 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b084      	sub	sp, #16
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d852:	b2db      	uxtb	r3, r3
 801d854:	2b22      	cmp	r3, #34	; 0x22
 801d856:	f040 80ac 	bne.w	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d85e:	b29b      	uxth	r3, r3
 801d860:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	2b03      	cmp	r3, #3
 801d866:	d921      	bls.n	801d8ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	691a      	ldr	r2, [r3, #16]
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d872:	b2d2      	uxtb	r2, r2
 801d874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d87a:	1c5a      	adds	r2, r3, #1
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d884:	b29b      	uxth	r3, r3
 801d886:	3b01      	subs	r3, #1
 801d888:	b29a      	uxth	r2, r3
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d892:	b29b      	uxth	r3, r3
 801d894:	2b03      	cmp	r3, #3
 801d896:	f040 808c 	bne.w	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	685a      	ldr	r2, [r3, #4]
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d8a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801d8aa:	e082      	b.n	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8b0:	2b02      	cmp	r3, #2
 801d8b2:	d075      	beq.n	801d9a0 <I2C_MasterReceive_RXNE+0x15c>
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	2b01      	cmp	r3, #1
 801d8b8:	d002      	beq.n	801d8c0 <I2C_MasterReceive_RXNE+0x7c>
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d16f      	bne.n	801d9a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d8c0:	6878      	ldr	r0, [r7, #4]
 801d8c2:	f001 fbcf 	bl	801f064 <I2C_WaitOnSTOPRequestThroughIT>
 801d8c6:	4603      	mov	r3, r0
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d142      	bne.n	801d952 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	681a      	ldr	r2, [r3, #0]
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d8da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	685a      	ldr	r2, [r3, #4]
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d8ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	691a      	ldr	r2, [r3, #16]
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8f6:	b2d2      	uxtb	r2, r2
 801d8f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8fe:	1c5a      	adds	r2, r3, #1
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d908:	b29b      	uxth	r3, r3
 801d90a:	3b01      	subs	r3, #1
 801d90c:	b29a      	uxth	r2, r3
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	2220      	movs	r2, #32
 801d916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801d920:	b2db      	uxtb	r3, r3
 801d922:	2b40      	cmp	r3, #64	; 0x40
 801d924:	d10a      	bne.n	801d93c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	2200      	movs	r2, #0
 801d92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	2200      	movs	r2, #0
 801d932:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801d934:	6878      	ldr	r0, [r7, #4]
 801d936:	f7e4 f88d 	bl	8001a54 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d93a:	e03a      	b.n	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	2200      	movs	r2, #0
 801d940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	2212      	movs	r2, #18
 801d948:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801d94a:	6878      	ldr	r0, [r7, #4]
 801d94c:	f7e4 f898 	bl	8001a80 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d950:	e02f      	b.n	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	685a      	ldr	r2, [r3, #4]
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801d960:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	691a      	ldr	r2, [r3, #16]
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d96c:	b2d2      	uxtb	r2, r2
 801d96e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d974:	1c5a      	adds	r2, r3, #1
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d97e:	b29b      	uxth	r3, r3
 801d980:	3b01      	subs	r3, #1
 801d982:	b29a      	uxth	r2, r3
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	2220      	movs	r2, #32
 801d98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	2200      	movs	r2, #0
 801d994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801d998:	6878      	ldr	r0, [r7, #4]
 801d99a:	f7ff fd99 	bl	801d4d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801d99e:	e008      	b.n	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	685a      	ldr	r2, [r3, #4]
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d9ae:	605a      	str	r2, [r3, #4]
}
 801d9b0:	e7ff      	b.n	801d9b2 <I2C_MasterReceive_RXNE+0x16e>
 801d9b2:	bf00      	nop
 801d9b4:	3710      	adds	r7, #16
 801d9b6:	46bd      	mov	sp, r7
 801d9b8:	bd80      	pop	{r7, pc}

0801d9ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801d9ba:	b580      	push	{r7, lr}
 801d9bc:	b084      	sub	sp, #16
 801d9be:	af00      	add	r7, sp, #0
 801d9c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d9cc:	b29b      	uxth	r3, r3
 801d9ce:	2b04      	cmp	r3, #4
 801d9d0:	d11b      	bne.n	801da0a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	685a      	ldr	r2, [r3, #4]
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d9e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	691a      	ldr	r2, [r3, #16]
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9ec:	b2d2      	uxtb	r2, r2
 801d9ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9f4:	1c5a      	adds	r2, r3, #1
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d9fe:	b29b      	uxth	r3, r3
 801da00:	3b01      	subs	r3, #1
 801da02:	b29a      	uxth	r2, r3
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801da08:	e0bd      	b.n	801db86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801da0e:	b29b      	uxth	r3, r3
 801da10:	2b03      	cmp	r3, #3
 801da12:	d129      	bne.n	801da68 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	685a      	ldr	r2, [r3, #4]
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801da22:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	2b04      	cmp	r3, #4
 801da28:	d00a      	beq.n	801da40 <I2C_MasterReceive_BTF+0x86>
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	2b02      	cmp	r3, #2
 801da2e:	d007      	beq.n	801da40 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	681a      	ldr	r2, [r3, #0]
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801da3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	691a      	ldr	r2, [r3, #16]
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da4a:	b2d2      	uxtb	r2, r2
 801da4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da52:	1c5a      	adds	r2, r3, #1
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801da5c:	b29b      	uxth	r3, r3
 801da5e:	3b01      	subs	r3, #1
 801da60:	b29a      	uxth	r2, r3
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801da66:	e08e      	b.n	801db86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801da6c:	b29b      	uxth	r3, r3
 801da6e:	2b02      	cmp	r3, #2
 801da70:	d176      	bne.n	801db60 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	2b01      	cmp	r3, #1
 801da76:	d002      	beq.n	801da7e <I2C_MasterReceive_BTF+0xc4>
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	2b10      	cmp	r3, #16
 801da7c:	d108      	bne.n	801da90 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	681a      	ldr	r2, [r3, #0]
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801da8c:	601a      	str	r2, [r3, #0]
 801da8e:	e019      	b.n	801dac4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	2b04      	cmp	r3, #4
 801da94:	d002      	beq.n	801da9c <I2C_MasterReceive_BTF+0xe2>
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	2b02      	cmp	r3, #2
 801da9a:	d108      	bne.n	801daae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	681a      	ldr	r2, [r3, #0]
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801daaa:	601a      	str	r2, [r3, #0]
 801daac:	e00a      	b.n	801dac4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	2b10      	cmp	r3, #16
 801dab2:	d007      	beq.n	801dac4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	681a      	ldr	r2, [r3, #0]
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dac2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	691a      	ldr	r2, [r3, #16]
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dace:	b2d2      	uxtb	r2, r2
 801dad0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dad6:	1c5a      	adds	r2, r3, #1
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dae0:	b29b      	uxth	r3, r3
 801dae2:	3b01      	subs	r3, #1
 801dae4:	b29a      	uxth	r2, r3
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	691a      	ldr	r2, [r3, #16]
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801daf4:	b2d2      	uxtb	r2, r2
 801daf6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dafc:	1c5a      	adds	r2, r3, #1
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801db06:	b29b      	uxth	r3, r3
 801db08:	3b01      	subs	r3, #1
 801db0a:	b29a      	uxth	r2, r3
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	685a      	ldr	r2, [r3, #4]
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801db1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	2220      	movs	r2, #32
 801db24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801db2e:	b2db      	uxtb	r3, r3
 801db30:	2b40      	cmp	r3, #64	; 0x40
 801db32:	d10a      	bne.n	801db4a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	2200      	movs	r2, #0
 801db38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	2200      	movs	r2, #0
 801db40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801db42:	6878      	ldr	r0, [r7, #4]
 801db44:	f7e3 ff86 	bl	8001a54 <HAL_I2C_MemRxCpltCallback>
}
 801db48:	e01d      	b.n	801db86 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	2200      	movs	r2, #0
 801db4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	2212      	movs	r2, #18
 801db56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801db58:	6878      	ldr	r0, [r7, #4]
 801db5a:	f7e3 ff91 	bl	8001a80 <HAL_I2C_MasterRxCpltCallback>
}
 801db5e:	e012      	b.n	801db86 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	691a      	ldr	r2, [r3, #16]
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db6a:	b2d2      	uxtb	r2, r2
 801db6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db72:	1c5a      	adds	r2, r3, #1
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801db7c:	b29b      	uxth	r3, r3
 801db7e:	3b01      	subs	r3, #1
 801db80:	b29a      	uxth	r2, r3
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801db86:	bf00      	nop
 801db88:	3710      	adds	r7, #16
 801db8a:	46bd      	mov	sp, r7
 801db8c:	bd80      	pop	{r7, pc}

0801db8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801db8e:	b480      	push	{r7}
 801db90:	b083      	sub	sp, #12
 801db92:	af00      	add	r7, sp, #0
 801db94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801db9c:	b2db      	uxtb	r3, r3
 801db9e:	2b40      	cmp	r3, #64	; 0x40
 801dba0:	d117      	bne.n	801dbd2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d109      	bne.n	801dbbe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dbae:	b2db      	uxtb	r3, r3
 801dbb0:	461a      	mov	r2, r3
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801dbba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801dbbc:	e067      	b.n	801dc8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dbc2:	b2db      	uxtb	r3, r3
 801dbc4:	f043 0301 	orr.w	r3, r3, #1
 801dbc8:	b2da      	uxtb	r2, r3
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	611a      	str	r2, [r3, #16]
}
 801dbd0:	e05d      	b.n	801dc8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	691b      	ldr	r3, [r3, #16]
 801dbd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dbda:	d133      	bne.n	801dc44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	2b21      	cmp	r3, #33	; 0x21
 801dbe6:	d109      	bne.n	801dbfc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dbec:	b2db      	uxtb	r3, r3
 801dbee:	461a      	mov	r2, r3
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801dbf8:	611a      	str	r2, [r3, #16]
 801dbfa:	e008      	b.n	801dc0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc00:	b2db      	uxtb	r3, r3
 801dc02:	f043 0301 	orr.w	r3, r3, #1
 801dc06:	b2da      	uxtb	r2, r3
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d004      	beq.n	801dc20 <I2C_Master_SB+0x92>
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d108      	bne.n	801dc32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d032      	beq.n	801dc8e <I2C_Master_SB+0x100>
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d02d      	beq.n	801dc8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	685a      	ldr	r2, [r3, #4]
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	681b      	ldr	r3, [r3, #0]
 801dc3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dc40:	605a      	str	r2, [r3, #4]
}
 801dc42:	e024      	b.n	801dc8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d10e      	bne.n	801dc6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc50:	b29b      	uxth	r3, r3
 801dc52:	11db      	asrs	r3, r3, #7
 801dc54:	b2db      	uxtb	r3, r3
 801dc56:	f003 0306 	and.w	r3, r3, #6
 801dc5a:	b2db      	uxtb	r3, r3
 801dc5c:	f063 030f 	orn	r3, r3, #15
 801dc60:	b2da      	uxtb	r2, r3
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	611a      	str	r2, [r3, #16]
}
 801dc68:	e011      	b.n	801dc8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc6e:	2b01      	cmp	r3, #1
 801dc70:	d10d      	bne.n	801dc8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc76:	b29b      	uxth	r3, r3
 801dc78:	11db      	asrs	r3, r3, #7
 801dc7a:	b2db      	uxtb	r3, r3
 801dc7c:	f003 0306 	and.w	r3, r3, #6
 801dc80:	b2db      	uxtb	r3, r3
 801dc82:	f063 030e 	orn	r3, r3, #14
 801dc86:	b2da      	uxtb	r2, r3
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	611a      	str	r2, [r3, #16]
}
 801dc8e:	bf00      	nop
 801dc90:	370c      	adds	r7, #12
 801dc92:	46bd      	mov	sp, r7
 801dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc98:	4770      	bx	lr

0801dc9a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801dc9a:	b480      	push	{r7}
 801dc9c:	b083      	sub	sp, #12
 801dc9e:	af00      	add	r7, sp, #0
 801dca0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dca6:	b2da      	uxtb	r2, r3
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d004      	beq.n	801dcc0 <I2C_Master_ADD10+0x26>
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d108      	bne.n	801dcd2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d00c      	beq.n	801dce2 <I2C_Master_ADD10+0x48>
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d007      	beq.n	801dce2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	685a      	ldr	r2, [r3, #4]
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dce0:	605a      	str	r2, [r3, #4]
  }
}
 801dce2:	bf00      	nop
 801dce4:	370c      	adds	r7, #12
 801dce6:	46bd      	mov	sp, r7
 801dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcec:	4770      	bx	lr

0801dcee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801dcee:	b480      	push	{r7}
 801dcf0:	b091      	sub	sp, #68	; 0x44
 801dcf2:	af00      	add	r7, sp, #0
 801dcf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dcfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dd12:	b2db      	uxtb	r3, r3
 801dd14:	2b22      	cmp	r3, #34	; 0x22
 801dd16:	f040 8169 	bne.w	801dfec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d10f      	bne.n	801dd42 <I2C_Master_ADDR+0x54>
 801dd22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801dd26:	2b40      	cmp	r3, #64	; 0x40
 801dd28:	d10b      	bne.n	801dd42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	633b      	str	r3, [r7, #48]	; 0x30
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	695b      	ldr	r3, [r3, #20]
 801dd34:	633b      	str	r3, [r7, #48]	; 0x30
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	699b      	ldr	r3, [r3, #24]
 801dd3c:	633b      	str	r3, [r7, #48]	; 0x30
 801dd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd40:	e160      	b.n	801e004 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d11d      	bne.n	801dd86 <I2C_Master_ADDR+0x98>
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	691b      	ldr	r3, [r3, #16]
 801dd4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801dd52:	d118      	bne.n	801dd86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd54:	2300      	movs	r3, #0
 801dd56:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	681b      	ldr	r3, [r3, #0]
 801dd5c:	695b      	ldr	r3, [r3, #20]
 801dd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	699b      	ldr	r3, [r3, #24]
 801dd66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	681a      	ldr	r2, [r3, #0]
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dd78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd7e:	1c5a      	adds	r2, r3, #1
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	651a      	str	r2, [r3, #80]	; 0x50
 801dd84:	e13e      	b.n	801e004 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dd8a:	b29b      	uxth	r3, r3
 801dd8c:	2b00      	cmp	r3, #0
 801dd8e:	d113      	bne.n	801ddb8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dd90:	2300      	movs	r3, #0
 801dd92:	62bb      	str	r3, [r7, #40]	; 0x28
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	695b      	ldr	r3, [r3, #20]
 801dd9a:	62bb      	str	r3, [r7, #40]	; 0x28
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	699b      	ldr	r3, [r3, #24]
 801dda2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	681a      	ldr	r2, [r3, #0]
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ddb4:	601a      	str	r2, [r3, #0]
 801ddb6:	e115      	b.n	801dfe4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ddbc:	b29b      	uxth	r3, r3
 801ddbe:	2b01      	cmp	r3, #1
 801ddc0:	f040 808a 	bne.w	801ded8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ddca:	d137      	bne.n	801de3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	681a      	ldr	r2, [r3, #0]
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ddda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	685b      	ldr	r3, [r3, #4]
 801dde2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dde6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ddea:	d113      	bne.n	801de14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	681a      	ldr	r2, [r3, #0]
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ddfa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	627b      	str	r3, [r7, #36]	; 0x24
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	681b      	ldr	r3, [r3, #0]
 801de04:	695b      	ldr	r3, [r3, #20]
 801de06:	627b      	str	r3, [r7, #36]	; 0x24
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	699b      	ldr	r3, [r3, #24]
 801de0e:	627b      	str	r3, [r7, #36]	; 0x24
 801de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de12:	e0e7      	b.n	801dfe4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801de14:	2300      	movs	r3, #0
 801de16:	623b      	str	r3, [r7, #32]
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	695b      	ldr	r3, [r3, #20]
 801de1e:	623b      	str	r3, [r7, #32]
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	699b      	ldr	r3, [r3, #24]
 801de26:	623b      	str	r3, [r7, #32]
 801de28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	681a      	ldr	r2, [r3, #0]
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801de38:	601a      	str	r2, [r3, #0]
 801de3a:	e0d3      	b.n	801dfe4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de3e:	2b08      	cmp	r3, #8
 801de40:	d02e      	beq.n	801dea0 <I2C_Master_ADDR+0x1b2>
 801de42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de44:	2b20      	cmp	r3, #32
 801de46:	d02b      	beq.n	801dea0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801de48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de4a:	2b12      	cmp	r3, #18
 801de4c:	d102      	bne.n	801de54 <I2C_Master_ADDR+0x166>
 801de4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de50:	2b01      	cmp	r3, #1
 801de52:	d125      	bne.n	801dea0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de56:	2b04      	cmp	r3, #4
 801de58:	d00e      	beq.n	801de78 <I2C_Master_ADDR+0x18a>
 801de5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de5c:	2b02      	cmp	r3, #2
 801de5e:	d00b      	beq.n	801de78 <I2C_Master_ADDR+0x18a>
 801de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de62:	2b10      	cmp	r3, #16
 801de64:	d008      	beq.n	801de78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	681a      	ldr	r2, [r3, #0]
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801de74:	601a      	str	r2, [r3, #0]
 801de76:	e007      	b.n	801de88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	681a      	ldr	r2, [r3, #0]
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801de86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801de88:	2300      	movs	r3, #0
 801de8a:	61fb      	str	r3, [r7, #28]
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	695b      	ldr	r3, [r3, #20]
 801de92:	61fb      	str	r3, [r7, #28]
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	699b      	ldr	r3, [r3, #24]
 801de9a:	61fb      	str	r3, [r7, #28]
 801de9c:	69fb      	ldr	r3, [r7, #28]
 801de9e:	e0a1      	b.n	801dfe4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	681a      	ldr	r2, [r3, #0]
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801deae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801deb0:	2300      	movs	r3, #0
 801deb2:	61bb      	str	r3, [r7, #24]
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	695b      	ldr	r3, [r3, #20]
 801deba:	61bb      	str	r3, [r7, #24]
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	699b      	ldr	r3, [r3, #24]
 801dec2:	61bb      	str	r3, [r7, #24]
 801dec4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	681a      	ldr	r2, [r3, #0]
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ded4:	601a      	str	r2, [r3, #0]
 801ded6:	e085      	b.n	801dfe4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dedc:	b29b      	uxth	r3, r3
 801dede:	2b02      	cmp	r3, #2
 801dee0:	d14d      	bne.n	801df7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801dee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dee4:	2b04      	cmp	r3, #4
 801dee6:	d016      	beq.n	801df16 <I2C_Master_ADDR+0x228>
 801dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801deea:	2b02      	cmp	r3, #2
 801deec:	d013      	beq.n	801df16 <I2C_Master_ADDR+0x228>
 801deee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801def0:	2b10      	cmp	r3, #16
 801def2:	d010      	beq.n	801df16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	681a      	ldr	r2, [r3, #0]
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801df02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	681a      	ldr	r2, [r3, #0]
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801df12:	601a      	str	r2, [r3, #0]
 801df14:	e007      	b.n	801df26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	681a      	ldr	r2, [r3, #0]
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801df24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	685b      	ldr	r3, [r3, #4]
 801df2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801df30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801df34:	d117      	bne.n	801df66 <I2C_Master_ADDR+0x278>
 801df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801df3c:	d00b      	beq.n	801df56 <I2C_Master_ADDR+0x268>
 801df3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df40:	2b01      	cmp	r3, #1
 801df42:	d008      	beq.n	801df56 <I2C_Master_ADDR+0x268>
 801df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df46:	2b08      	cmp	r3, #8
 801df48:	d005      	beq.n	801df56 <I2C_Master_ADDR+0x268>
 801df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df4c:	2b10      	cmp	r3, #16
 801df4e:	d002      	beq.n	801df56 <I2C_Master_ADDR+0x268>
 801df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df52:	2b20      	cmp	r3, #32
 801df54:	d107      	bne.n	801df66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	685a      	ldr	r2, [r3, #4]
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801df64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801df66:	2300      	movs	r3, #0
 801df68:	617b      	str	r3, [r7, #20]
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	695b      	ldr	r3, [r3, #20]
 801df70:	617b      	str	r3, [r7, #20]
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	699b      	ldr	r3, [r3, #24]
 801df78:	617b      	str	r3, [r7, #20]
 801df7a:	697b      	ldr	r3, [r7, #20]
 801df7c:	e032      	b.n	801dfe4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	681a      	ldr	r2, [r3, #0]
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801df8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	685b      	ldr	r3, [r3, #4]
 801df94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801df98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801df9c:	d117      	bne.n	801dfce <I2C_Master_ADDR+0x2e0>
 801df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801dfa4:	d00b      	beq.n	801dfbe <I2C_Master_ADDR+0x2d0>
 801dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfa8:	2b01      	cmp	r3, #1
 801dfaa:	d008      	beq.n	801dfbe <I2C_Master_ADDR+0x2d0>
 801dfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfae:	2b08      	cmp	r3, #8
 801dfb0:	d005      	beq.n	801dfbe <I2C_Master_ADDR+0x2d0>
 801dfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfb4:	2b10      	cmp	r3, #16
 801dfb6:	d002      	beq.n	801dfbe <I2C_Master_ADDR+0x2d0>
 801dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfba:	2b20      	cmp	r3, #32
 801dfbc:	d107      	bne.n	801dfce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	685a      	ldr	r2, [r3, #4]
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801dfcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dfce:	2300      	movs	r3, #0
 801dfd0:	613b      	str	r3, [r7, #16]
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	695b      	ldr	r3, [r3, #20]
 801dfd8:	613b      	str	r3, [r7, #16]
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	699b      	ldr	r3, [r3, #24]
 801dfe0:	613b      	str	r3, [r7, #16]
 801dfe2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	2200      	movs	r2, #0
 801dfe8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801dfea:	e00b      	b.n	801e004 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801dfec:	2300      	movs	r3, #0
 801dfee:	60fb      	str	r3, [r7, #12]
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	695b      	ldr	r3, [r3, #20]
 801dff6:	60fb      	str	r3, [r7, #12]
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	699b      	ldr	r3, [r3, #24]
 801dffe:	60fb      	str	r3, [r7, #12]
 801e000:	68fb      	ldr	r3, [r7, #12]
}
 801e002:	e7ff      	b.n	801e004 <I2C_Master_ADDR+0x316>
 801e004:	bf00      	nop
 801e006:	3744      	adds	r7, #68	; 0x44
 801e008:	46bd      	mov	sp, r7
 801e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e00e:	4770      	bx	lr

0801e010 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e010:	b580      	push	{r7, lr}
 801e012:	b084      	sub	sp, #16
 801e014:	af00      	add	r7, sp, #0
 801e016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e01e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e024:	b29b      	uxth	r3, r3
 801e026:	2b00      	cmp	r3, #0
 801e028:	d02b      	beq.n	801e082 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e02e:	781a      	ldrb	r2, [r3, #0]
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e03a:	1c5a      	adds	r2, r3, #1
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e044:	b29b      	uxth	r3, r3
 801e046:	3b01      	subs	r3, #1
 801e048:	b29a      	uxth	r2, r3
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e052:	b29b      	uxth	r3, r3
 801e054:	2b00      	cmp	r3, #0
 801e056:	d114      	bne.n	801e082 <I2C_SlaveTransmit_TXE+0x72>
 801e058:	7bfb      	ldrb	r3, [r7, #15]
 801e05a:	2b29      	cmp	r3, #41	; 0x29
 801e05c:	d111      	bne.n	801e082 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	685a      	ldr	r2, [r3, #4]
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e06c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	2221      	movs	r2, #33	; 0x21
 801e072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	2228      	movs	r2, #40	; 0x28
 801e078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801e07c:	6878      	ldr	r0, [r7, #4]
 801e07e:	f7ff f9fb 	bl	801d478 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801e082:	bf00      	nop
 801e084:	3710      	adds	r7, #16
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}

0801e08a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801e08a:	b480      	push	{r7}
 801e08c:	b083      	sub	sp, #12
 801e08e:	af00      	add	r7, sp, #0
 801e090:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e096:	b29b      	uxth	r3, r3
 801e098:	2b00      	cmp	r3, #0
 801e09a:	d011      	beq.n	801e0c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0a0:	781a      	ldrb	r2, [r3, #0]
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0ac:	1c5a      	adds	r2, r3, #1
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e0b6:	b29b      	uxth	r3, r3
 801e0b8:	3b01      	subs	r3, #1
 801e0ba:	b29a      	uxth	r2, r3
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801e0c0:	bf00      	nop
 801e0c2:	370c      	adds	r7, #12
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0ca:	4770      	bx	lr

0801e0cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b084      	sub	sp, #16
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e0da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e0e0:	b29b      	uxth	r3, r3
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d02c      	beq.n	801e140 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	691a      	ldr	r2, [r3, #16]
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0f0:	b2d2      	uxtb	r2, r2
 801e0f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0f8:	1c5a      	adds	r2, r3, #1
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e102:	b29b      	uxth	r3, r3
 801e104:	3b01      	subs	r3, #1
 801e106:	b29a      	uxth	r2, r3
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e110:	b29b      	uxth	r3, r3
 801e112:	2b00      	cmp	r3, #0
 801e114:	d114      	bne.n	801e140 <I2C_SlaveReceive_RXNE+0x74>
 801e116:	7bfb      	ldrb	r3, [r7, #15]
 801e118:	2b2a      	cmp	r3, #42	; 0x2a
 801e11a:	d111      	bne.n	801e140 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	685a      	ldr	r2, [r3, #4]
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e12a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2222      	movs	r2, #34	; 0x22
 801e130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	2228      	movs	r2, #40	; 0x28
 801e136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e13a:	6878      	ldr	r0, [r7, #4]
 801e13c:	f7ff f9a6 	bl	801d48c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801e140:	bf00      	nop
 801e142:	3710      	adds	r7, #16
 801e144:	46bd      	mov	sp, r7
 801e146:	bd80      	pop	{r7, pc}

0801e148 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801e148:	b480      	push	{r7}
 801e14a:	b083      	sub	sp, #12
 801e14c:	af00      	add	r7, sp, #0
 801e14e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e154:	b29b      	uxth	r3, r3
 801e156:	2b00      	cmp	r3, #0
 801e158:	d012      	beq.n	801e180 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	691a      	ldr	r2, [r3, #16]
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e164:	b2d2      	uxtb	r2, r2
 801e166:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e16c:	1c5a      	adds	r2, r3, #1
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e176:	b29b      	uxth	r3, r3
 801e178:	3b01      	subs	r3, #1
 801e17a:	b29a      	uxth	r2, r3
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801e180:	bf00      	nop
 801e182:	370c      	adds	r7, #12
 801e184:	46bd      	mov	sp, r7
 801e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e18a:	4770      	bx	lr

0801e18c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801e18c:	b580      	push	{r7, lr}
 801e18e:	b084      	sub	sp, #16
 801e190:	af00      	add	r7, sp, #0
 801e192:	6078      	str	r0, [r7, #4]
 801e194:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801e196:	2300      	movs	r3, #0
 801e198:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e1a0:	b2db      	uxtb	r3, r3
 801e1a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e1a6:	2b28      	cmp	r3, #40	; 0x28
 801e1a8:	d127      	bne.n	801e1fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	685a      	ldr	r2, [r3, #4]
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e1b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	089b      	lsrs	r3, r3, #2
 801e1be:	f003 0301 	and.w	r3, r3, #1
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d101      	bne.n	801e1ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801e1c6:	2301      	movs	r3, #1
 801e1c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	09db      	lsrs	r3, r3, #7
 801e1ce:	f003 0301 	and.w	r3, r3, #1
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d103      	bne.n	801e1de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	68db      	ldr	r3, [r3, #12]
 801e1da:	81bb      	strh	r3, [r7, #12]
 801e1dc:	e002      	b.n	801e1e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	699b      	ldr	r3, [r3, #24]
 801e1e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	2200      	movs	r2, #0
 801e1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801e1ec:	89ba      	ldrh	r2, [r7, #12]
 801e1ee:	7bfb      	ldrb	r3, [r7, #15]
 801e1f0:	4619      	mov	r1, r3
 801e1f2:	6878      	ldr	r0, [r7, #4]
 801e1f4:	f7ff f954 	bl	801d4a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801e1f8:	e00e      	b.n	801e218 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	60bb      	str	r3, [r7, #8]
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	695b      	ldr	r3, [r3, #20]
 801e204:	60bb      	str	r3, [r7, #8]
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	699b      	ldr	r3, [r3, #24]
 801e20c:	60bb      	str	r3, [r7, #8]
 801e20e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	2200      	movs	r2, #0
 801e214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801e218:	bf00      	nop
 801e21a:	3710      	adds	r7, #16
 801e21c:	46bd      	mov	sp, r7
 801e21e:	bd80      	pop	{r7, pc}

0801e220 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801e220:	b580      	push	{r7, lr}
 801e222:	b084      	sub	sp, #16
 801e224:	af00      	add	r7, sp, #0
 801e226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e22e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	685a      	ldr	r2, [r3, #4]
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e23e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801e240:	2300      	movs	r3, #0
 801e242:	60bb      	str	r3, [r7, #8]
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	695b      	ldr	r3, [r3, #20]
 801e24a:	60bb      	str	r3, [r7, #8]
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	681a      	ldr	r2, [r3, #0]
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	681b      	ldr	r3, [r3, #0]
 801e256:	f042 0201 	orr.w	r2, r2, #1
 801e25a:	601a      	str	r2, [r3, #0]
 801e25c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	681a      	ldr	r2, [r3, #0]
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e26c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	685b      	ldr	r3, [r3, #4]
 801e274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e27c:	d172      	bne.n	801e364 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801e27e:	7bfb      	ldrb	r3, [r7, #15]
 801e280:	2b22      	cmp	r3, #34	; 0x22
 801e282:	d002      	beq.n	801e28a <I2C_Slave_STOPF+0x6a>
 801e284:	7bfb      	ldrb	r3, [r7, #15]
 801e286:	2b2a      	cmp	r3, #42	; 0x2a
 801e288:	d135      	bne.n	801e2f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	685b      	ldr	r3, [r3, #4]
 801e292:	b29a      	uxth	r2, r3
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e29c:	b29b      	uxth	r3, r3
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d005      	beq.n	801e2ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2a6:	f043 0204 	orr.w	r2, r3, #4
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	685a      	ldr	r2, [r3, #4]
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e2bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2c2:	4618      	mov	r0, r3
 801e2c4:	f7fd fc90 	bl	801bbe8 <HAL_DMA_GetState>
 801e2c8:	4603      	mov	r3, r0
 801e2ca:	2b01      	cmp	r3, #1
 801e2cc:	d049      	beq.n	801e362 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2d2:	4a69      	ldr	r2, [pc, #420]	; (801e478 <I2C_Slave_STOPF+0x258>)
 801e2d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f7fd fad8 	bl	801b890 <HAL_DMA_Abort_IT>
 801e2e0:	4603      	mov	r3, r0
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d03d      	beq.n	801e362 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2ec:	687a      	ldr	r2, [r7, #4]
 801e2ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e2f0:	4610      	mov	r0, r2
 801e2f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e2f4:	e035      	b.n	801e362 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	685b      	ldr	r3, [r3, #4]
 801e2fe:	b29a      	uxth	r2, r3
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e308:	b29b      	uxth	r3, r3
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d005      	beq.n	801e31a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e312:	f043 0204 	orr.w	r2, r3, #4
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	685a      	ldr	r2, [r3, #4]
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e328:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e32e:	4618      	mov	r0, r3
 801e330:	f7fd fc5a 	bl	801bbe8 <HAL_DMA_GetState>
 801e334:	4603      	mov	r3, r0
 801e336:	2b01      	cmp	r3, #1
 801e338:	d014      	beq.n	801e364 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e33e:	4a4e      	ldr	r2, [pc, #312]	; (801e478 <I2C_Slave_STOPF+0x258>)
 801e340:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e346:	4618      	mov	r0, r3
 801e348:	f7fd faa2 	bl	801b890 <HAL_DMA_Abort_IT>
 801e34c:	4603      	mov	r3, r0
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d008      	beq.n	801e364 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e358:	687a      	ldr	r2, [r7, #4]
 801e35a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e35c:	4610      	mov	r0, r2
 801e35e:	4798      	blx	r3
 801e360:	e000      	b.n	801e364 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801e362:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e368:	b29b      	uxth	r3, r3
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d03e      	beq.n	801e3ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	695b      	ldr	r3, [r3, #20]
 801e374:	f003 0304 	and.w	r3, r3, #4
 801e378:	2b04      	cmp	r3, #4
 801e37a:	d112      	bne.n	801e3a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	691a      	ldr	r2, [r3, #16]
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e386:	b2d2      	uxtb	r2, r2
 801e388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e38e:	1c5a      	adds	r2, r3, #1
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e398:	b29b      	uxth	r3, r3
 801e39a:	3b01      	subs	r3, #1
 801e39c:	b29a      	uxth	r2, r3
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	695b      	ldr	r3, [r3, #20]
 801e3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e3ac:	2b40      	cmp	r3, #64	; 0x40
 801e3ae:	d112      	bne.n	801e3d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	691a      	ldr	r2, [r3, #16]
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3ba:	b2d2      	uxtb	r2, r2
 801e3bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3c2:	1c5a      	adds	r2, r3, #1
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e3cc:	b29b      	uxth	r3, r3
 801e3ce:	3b01      	subs	r3, #1
 801e3d0:	b29a      	uxth	r2, r3
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e3da:	b29b      	uxth	r3, r3
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d005      	beq.n	801e3ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3e4:	f043 0204 	orr.w	r2, r3, #4
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d003      	beq.n	801e3fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801e3f4:	6878      	ldr	r0, [r7, #4]
 801e3f6:	f000 f8b3 	bl	801e560 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801e3fa:	e039      	b.n	801e470 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801e3fc:	7bfb      	ldrb	r3, [r7, #15]
 801e3fe:	2b2a      	cmp	r3, #42	; 0x2a
 801e400:	d109      	bne.n	801e416 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	2200      	movs	r2, #0
 801e406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	2228      	movs	r2, #40	; 0x28
 801e40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f7ff f83b 	bl	801d48c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	2b28      	cmp	r3, #40	; 0x28
 801e420:	d111      	bne.n	801e446 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	4a15      	ldr	r2, [pc, #84]	; (801e47c <I2C_Slave_STOPF+0x25c>)
 801e426:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	2200      	movs	r2, #0
 801e42c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	2220      	movs	r2, #32
 801e432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	2200      	movs	r2, #0
 801e43a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801e43e:	6878      	ldr	r0, [r7, #4]
 801e440:	f7ff f83c 	bl	801d4bc <HAL_I2C_ListenCpltCallback>
}
 801e444:	e014      	b.n	801e470 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e44a:	2b22      	cmp	r3, #34	; 0x22
 801e44c:	d002      	beq.n	801e454 <I2C_Slave_STOPF+0x234>
 801e44e:	7bfb      	ldrb	r3, [r7, #15]
 801e450:	2b22      	cmp	r3, #34	; 0x22
 801e452:	d10d      	bne.n	801e470 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	2200      	movs	r2, #0
 801e458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	2220      	movs	r2, #32
 801e45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	2200      	movs	r2, #0
 801e466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801e46a:	6878      	ldr	r0, [r7, #4]
 801e46c:	f7ff f80e 	bl	801d48c <HAL_I2C_SlaveRxCpltCallback>
}
 801e470:	bf00      	nop
 801e472:	3710      	adds	r7, #16
 801e474:	46bd      	mov	sp, r7
 801e476:	bd80      	pop	{r7, pc}
 801e478:	0801ece5 	.word	0x0801ece5
 801e47c:	ffff0000 	.word	0xffff0000

0801e480 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801e480:	b580      	push	{r7, lr}
 801e482:	b084      	sub	sp, #16
 801e484:	af00      	add	r7, sp, #0
 801e486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e48e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e494:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801e496:	68bb      	ldr	r3, [r7, #8]
 801e498:	2b08      	cmp	r3, #8
 801e49a:	d002      	beq.n	801e4a2 <I2C_Slave_AF+0x22>
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	2b20      	cmp	r3, #32
 801e4a0:	d129      	bne.n	801e4f6 <I2C_Slave_AF+0x76>
 801e4a2:	7bfb      	ldrb	r3, [r7, #15]
 801e4a4:	2b28      	cmp	r3, #40	; 0x28
 801e4a6:	d126      	bne.n	801e4f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	4a2c      	ldr	r2, [pc, #176]	; (801e55c <I2C_Slave_AF+0xdc>)
 801e4ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	685a      	ldr	r2, [r3, #4]
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e4bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e4c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	681a      	ldr	r2, [r3, #0]
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e4d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	2200      	movs	r2, #0
 801e4dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	2220      	movs	r2, #32
 801e4e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801e4ee:	6878      	ldr	r0, [r7, #4]
 801e4f0:	f7fe ffe4 	bl	801d4bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801e4f4:	e02e      	b.n	801e554 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e4f6:	7bfb      	ldrb	r3, [r7, #15]
 801e4f8:	2b21      	cmp	r3, #33	; 0x21
 801e4fa:	d126      	bne.n	801e54a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	4a17      	ldr	r2, [pc, #92]	; (801e55c <I2C_Slave_AF+0xdc>)
 801e500:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	2221      	movs	r2, #33	; 0x21
 801e506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	2220      	movs	r2, #32
 801e50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	2200      	movs	r2, #0
 801e514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	685a      	ldr	r2, [r3, #4]
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e526:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	681b      	ldr	r3, [r3, #0]
 801e52c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e530:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	681a      	ldr	r2, [r3, #0]
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e540:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801e542:	6878      	ldr	r0, [r7, #4]
 801e544:	f7fe ff98 	bl	801d478 <HAL_I2C_SlaveTxCpltCallback>
}
 801e548:	e004      	b.n	801e554 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e552:	615a      	str	r2, [r3, #20]
}
 801e554:	bf00      	nop
 801e556:	3710      	adds	r7, #16
 801e558:	46bd      	mov	sp, r7
 801e55a:	bd80      	pop	{r7, pc}
 801e55c:	ffff0000 	.word	0xffff0000

0801e560 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801e560:	b580      	push	{r7, lr}
 801e562:	b084      	sub	sp, #16
 801e564:	af00      	add	r7, sp, #0
 801e566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e56e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e576:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801e578:	7bbb      	ldrb	r3, [r7, #14]
 801e57a:	2b10      	cmp	r3, #16
 801e57c:	d002      	beq.n	801e584 <I2C_ITError+0x24>
 801e57e:	7bbb      	ldrb	r3, [r7, #14]
 801e580:	2b40      	cmp	r3, #64	; 0x40
 801e582:	d10a      	bne.n	801e59a <I2C_ITError+0x3a>
 801e584:	7bfb      	ldrb	r3, [r7, #15]
 801e586:	2b22      	cmp	r3, #34	; 0x22
 801e588:	d107      	bne.n	801e59a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	681a      	ldr	r2, [r3, #0]
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e598:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801e59a:	7bfb      	ldrb	r3, [r7, #15]
 801e59c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801e5a0:	2b28      	cmp	r3, #40	; 0x28
 801e5a2:	d107      	bne.n	801e5b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	2200      	movs	r2, #0
 801e5a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2228      	movs	r2, #40	; 0x28
 801e5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801e5b2:	e015      	b.n	801e5e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	685b      	ldr	r3, [r3, #4]
 801e5ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e5c2:	d00a      	beq.n	801e5da <I2C_ITError+0x7a>
 801e5c4:	7bfb      	ldrb	r3, [r7, #15]
 801e5c6:	2b60      	cmp	r3, #96	; 0x60
 801e5c8:	d007      	beq.n	801e5da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	2220      	movs	r2, #32
 801e5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	2200      	movs	r2, #0
 801e5d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	2200      	movs	r2, #0
 801e5de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	685b      	ldr	r3, [r3, #4]
 801e5e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e5ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e5ee:	d162      	bne.n	801e6b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	685a      	ldr	r2, [r3, #4]
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e5fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e608:	b2db      	uxtb	r3, r3
 801e60a:	2b01      	cmp	r3, #1
 801e60c:	d020      	beq.n	801e650 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e612:	4a6a      	ldr	r2, [pc, #424]	; (801e7bc <I2C_ITError+0x25c>)
 801e614:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e61a:	4618      	mov	r0, r3
 801e61c:	f7fd f938 	bl	801b890 <HAL_DMA_Abort_IT>
 801e620:	4603      	mov	r3, r0
 801e622:	2b00      	cmp	r3, #0
 801e624:	f000 8089 	beq.w	801e73a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	681a      	ldr	r2, [r3, #0]
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	f022 0201 	bic.w	r2, r2, #1
 801e636:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	2220      	movs	r2, #32
 801e63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e646:	687a      	ldr	r2, [r7, #4]
 801e648:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e64a:	4610      	mov	r0, r2
 801e64c:	4798      	blx	r3
 801e64e:	e074      	b.n	801e73a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e654:	4a59      	ldr	r2, [pc, #356]	; (801e7bc <I2C_ITError+0x25c>)
 801e656:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e65c:	4618      	mov	r0, r3
 801e65e:	f7fd f917 	bl	801b890 <HAL_DMA_Abort_IT>
 801e662:	4603      	mov	r3, r0
 801e664:	2b00      	cmp	r3, #0
 801e666:	d068      	beq.n	801e73a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	695b      	ldr	r3, [r3, #20]
 801e66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e672:	2b40      	cmp	r3, #64	; 0x40
 801e674:	d10b      	bne.n	801e68e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	691a      	ldr	r2, [r3, #16]
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e680:	b2d2      	uxtb	r2, r2
 801e682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e688:	1c5a      	adds	r2, r3, #1
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	681a      	ldr	r2, [r3, #0]
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	f022 0201 	bic.w	r2, r2, #1
 801e69c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	2220      	movs	r2, #32
 801e6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e6ac:	687a      	ldr	r2, [r7, #4]
 801e6ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801e6b0:	4610      	mov	r0, r2
 801e6b2:	4798      	blx	r3
 801e6b4:	e041      	b.n	801e73a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e6bc:	b2db      	uxtb	r3, r3
 801e6be:	2b60      	cmp	r3, #96	; 0x60
 801e6c0:	d125      	bne.n	801e70e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	2220      	movs	r2, #32
 801e6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	2200      	movs	r2, #0
 801e6ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	681b      	ldr	r3, [r3, #0]
 801e6d4:	695b      	ldr	r3, [r3, #20]
 801e6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e6da:	2b40      	cmp	r3, #64	; 0x40
 801e6dc:	d10b      	bne.n	801e6f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	691a      	ldr	r2, [r3, #16]
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6e8:	b2d2      	uxtb	r2, r2
 801e6ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6f0:	1c5a      	adds	r2, r3, #1
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	681a      	ldr	r2, [r3, #0]
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	f022 0201 	bic.w	r2, r2, #1
 801e704:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801e706:	6878      	ldr	r0, [r7, #4]
 801e708:	f7fe feec 	bl	801d4e4 <HAL_I2C_AbortCpltCallback>
 801e70c:	e015      	b.n	801e73a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	695b      	ldr	r3, [r3, #20]
 801e714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e718:	2b40      	cmp	r3, #64	; 0x40
 801e71a:	d10b      	bne.n	801e734 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	691a      	ldr	r2, [r3, #16]
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e726:	b2d2      	uxtb	r2, r2
 801e728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e72e:	1c5a      	adds	r2, r3, #1
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801e734:	6878      	ldr	r0, [r7, #4]
 801e736:	f7fe fecb 	bl	801d4d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e73e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801e740:	68bb      	ldr	r3, [r7, #8]
 801e742:	f003 0301 	and.w	r3, r3, #1
 801e746:	2b00      	cmp	r3, #0
 801e748:	d10e      	bne.n	801e768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801e74a:	68bb      	ldr	r3, [r7, #8]
 801e74c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801e750:	2b00      	cmp	r3, #0
 801e752:	d109      	bne.n	801e768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801e754:	68bb      	ldr	r3, [r7, #8]
 801e756:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d104      	bne.n	801e768 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801e75e:	68bb      	ldr	r3, [r7, #8]
 801e760:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801e764:	2b00      	cmp	r3, #0
 801e766:	d007      	beq.n	801e778 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	685a      	ldr	r2, [r3, #4]
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e776:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e77e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e784:	f003 0304 	and.w	r3, r3, #4
 801e788:	2b04      	cmp	r3, #4
 801e78a:	d113      	bne.n	801e7b4 <I2C_ITError+0x254>
 801e78c:	7bfb      	ldrb	r3, [r7, #15]
 801e78e:	2b28      	cmp	r3, #40	; 0x28
 801e790:	d110      	bne.n	801e7b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	4a0a      	ldr	r2, [pc, #40]	; (801e7c0 <I2C_ITError+0x260>)
 801e796:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	2200      	movs	r2, #0
 801e79c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	2220      	movs	r2, #32
 801e7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	2200      	movs	r2, #0
 801e7aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801e7ae:	6878      	ldr	r0, [r7, #4]
 801e7b0:	f7fe fe84 	bl	801d4bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801e7b4:	bf00      	nop
 801e7b6:	3710      	adds	r7, #16
 801e7b8:	46bd      	mov	sp, r7
 801e7ba:	bd80      	pop	{r7, pc}
 801e7bc:	0801ece5 	.word	0x0801ece5
 801e7c0:	ffff0000 	.word	0xffff0000

0801e7c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801e7c4:	b580      	push	{r7, lr}
 801e7c6:	b088      	sub	sp, #32
 801e7c8:	af02      	add	r7, sp, #8
 801e7ca:	60f8      	str	r0, [r7, #12]
 801e7cc:	4608      	mov	r0, r1
 801e7ce:	4611      	mov	r1, r2
 801e7d0:	461a      	mov	r2, r3
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	817b      	strh	r3, [r7, #10]
 801e7d6:	460b      	mov	r3, r1
 801e7d8:	813b      	strh	r3, [r7, #8]
 801e7da:	4613      	mov	r3, r2
 801e7dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	681a      	ldr	r2, [r3, #0]
 801e7e4:	68fb      	ldr	r3, [r7, #12]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e7ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7f0:	9300      	str	r3, [sp, #0]
 801e7f2:	6a3b      	ldr	r3, [r7, #32]
 801e7f4:	2200      	movs	r2, #0
 801e7f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e7fa:	68f8      	ldr	r0, [r7, #12]
 801e7fc:	f000 fb1a 	bl	801ee34 <I2C_WaitOnFlagUntilTimeout>
 801e800:	4603      	mov	r3, r0
 801e802:	2b00      	cmp	r3, #0
 801e804:	d00d      	beq.n	801e822 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e806:	68fb      	ldr	r3, [r7, #12]
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e814:	d103      	bne.n	801e81e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e81c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e81e:	2303      	movs	r3, #3
 801e820:	e05f      	b.n	801e8e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801e822:	897b      	ldrh	r3, [r7, #10]
 801e824:	b2db      	uxtb	r3, r3
 801e826:	461a      	mov	r2, r3
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e834:	6a3a      	ldr	r2, [r7, #32]
 801e836:	492d      	ldr	r1, [pc, #180]	; (801e8ec <I2C_RequestMemoryWrite+0x128>)
 801e838:	68f8      	ldr	r0, [r7, #12]
 801e83a:	f000 fb52 	bl	801eee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e83e:	4603      	mov	r3, r0
 801e840:	2b00      	cmp	r3, #0
 801e842:	d001      	beq.n	801e848 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801e844:	2301      	movs	r3, #1
 801e846:	e04c      	b.n	801e8e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e848:	2300      	movs	r3, #0
 801e84a:	617b      	str	r3, [r7, #20]
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	695b      	ldr	r3, [r3, #20]
 801e852:	617b      	str	r3, [r7, #20]
 801e854:	68fb      	ldr	r3, [r7, #12]
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	699b      	ldr	r3, [r3, #24]
 801e85a:	617b      	str	r3, [r7, #20]
 801e85c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e860:	6a39      	ldr	r1, [r7, #32]
 801e862:	68f8      	ldr	r0, [r7, #12]
 801e864:	f000 fbbc 	bl	801efe0 <I2C_WaitOnTXEFlagUntilTimeout>
 801e868:	4603      	mov	r3, r0
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d00d      	beq.n	801e88a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e872:	2b04      	cmp	r3, #4
 801e874:	d107      	bne.n	801e886 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	681b      	ldr	r3, [r3, #0]
 801e87a:	681a      	ldr	r2, [r3, #0]
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e886:	2301      	movs	r3, #1
 801e888:	e02b      	b.n	801e8e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801e88a:	88fb      	ldrh	r3, [r7, #6]
 801e88c:	2b01      	cmp	r3, #1
 801e88e:	d105      	bne.n	801e89c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e890:	893b      	ldrh	r3, [r7, #8]
 801e892:	b2da      	uxtb	r2, r3
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	611a      	str	r2, [r3, #16]
 801e89a:	e021      	b.n	801e8e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801e89c:	893b      	ldrh	r3, [r7, #8]
 801e89e:	0a1b      	lsrs	r3, r3, #8
 801e8a0:	b29b      	uxth	r3, r3
 801e8a2:	b2da      	uxtb	r2, r3
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8ac:	6a39      	ldr	r1, [r7, #32]
 801e8ae:	68f8      	ldr	r0, [r7, #12]
 801e8b0:	f000 fb96 	bl	801efe0 <I2C_WaitOnTXEFlagUntilTimeout>
 801e8b4:	4603      	mov	r3, r0
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d00d      	beq.n	801e8d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e8ba:	68fb      	ldr	r3, [r7, #12]
 801e8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8be:	2b04      	cmp	r3, #4
 801e8c0:	d107      	bne.n	801e8d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	681a      	ldr	r2, [r3, #0]
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e8d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	e005      	b.n	801e8e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e8d6:	893b      	ldrh	r3, [r7, #8]
 801e8d8:	b2da      	uxtb	r2, r3
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801e8e0:	2300      	movs	r3, #0
}
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	3718      	adds	r7, #24
 801e8e6:	46bd      	mov	sp, r7
 801e8e8:	bd80      	pop	{r7, pc}
 801e8ea:	bf00      	nop
 801e8ec:	00010002 	.word	0x00010002

0801e8f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801e8f0:	b580      	push	{r7, lr}
 801e8f2:	b088      	sub	sp, #32
 801e8f4:	af02      	add	r7, sp, #8
 801e8f6:	60f8      	str	r0, [r7, #12]
 801e8f8:	4608      	mov	r0, r1
 801e8fa:	4611      	mov	r1, r2
 801e8fc:	461a      	mov	r2, r3
 801e8fe:	4603      	mov	r3, r0
 801e900:	817b      	strh	r3, [r7, #10]
 801e902:	460b      	mov	r3, r1
 801e904:	813b      	strh	r3, [r7, #8]
 801e906:	4613      	mov	r3, r2
 801e908:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	681a      	ldr	r2, [r3, #0]
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e918:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	681a      	ldr	r2, [r3, #0]
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801e92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e92c:	9300      	str	r3, [sp, #0]
 801e92e:	6a3b      	ldr	r3, [r7, #32]
 801e930:	2200      	movs	r2, #0
 801e932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801e936:	68f8      	ldr	r0, [r7, #12]
 801e938:	f000 fa7c 	bl	801ee34 <I2C_WaitOnFlagUntilTimeout>
 801e93c:	4603      	mov	r3, r0
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d00d      	beq.n	801e95e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e94c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e950:	d103      	bne.n	801e95a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801e95a:	2303      	movs	r3, #3
 801e95c:	e0aa      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801e95e:	897b      	ldrh	r3, [r7, #10]
 801e960:	b2db      	uxtb	r3, r3
 801e962:	461a      	mov	r2, r3
 801e964:	68fb      	ldr	r3, [r7, #12]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801e96c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e970:	6a3a      	ldr	r2, [r7, #32]
 801e972:	4952      	ldr	r1, [pc, #328]	; (801eabc <I2C_RequestMemoryRead+0x1cc>)
 801e974:	68f8      	ldr	r0, [r7, #12]
 801e976:	f000 fab4 	bl	801eee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801e97a:	4603      	mov	r3, r0
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d001      	beq.n	801e984 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801e980:	2301      	movs	r3, #1
 801e982:	e097      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e984:	2300      	movs	r3, #0
 801e986:	617b      	str	r3, [r7, #20]
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	695b      	ldr	r3, [r3, #20]
 801e98e:	617b      	str	r3, [r7, #20]
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	699b      	ldr	r3, [r3, #24]
 801e996:	617b      	str	r3, [r7, #20]
 801e998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e99c:	6a39      	ldr	r1, [r7, #32]
 801e99e:	68f8      	ldr	r0, [r7, #12]
 801e9a0:	f000 fb1e 	bl	801efe0 <I2C_WaitOnTXEFlagUntilTimeout>
 801e9a4:	4603      	mov	r3, r0
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d00d      	beq.n	801e9c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9ae:	2b04      	cmp	r3, #4
 801e9b0:	d107      	bne.n	801e9c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	681a      	ldr	r2, [r3, #0]
 801e9b8:	68fb      	ldr	r3, [r7, #12]
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e9c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801e9c2:	2301      	movs	r3, #1
 801e9c4:	e076      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801e9c6:	88fb      	ldrh	r3, [r7, #6]
 801e9c8:	2b01      	cmp	r3, #1
 801e9ca:	d105      	bne.n	801e9d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801e9cc:	893b      	ldrh	r3, [r7, #8]
 801e9ce:	b2da      	uxtb	r2, r3
 801e9d0:	68fb      	ldr	r3, [r7, #12]
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	611a      	str	r2, [r3, #16]
 801e9d6:	e021      	b.n	801ea1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801e9d8:	893b      	ldrh	r3, [r7, #8]
 801e9da:	0a1b      	lsrs	r3, r3, #8
 801e9dc:	b29b      	uxth	r3, r3
 801e9de:	b2da      	uxtb	r2, r3
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801e9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e9e8:	6a39      	ldr	r1, [r7, #32]
 801e9ea:	68f8      	ldr	r0, [r7, #12]
 801e9ec:	f000 faf8 	bl	801efe0 <I2C_WaitOnTXEFlagUntilTimeout>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d00d      	beq.n	801ea12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9fa:	2b04      	cmp	r3, #4
 801e9fc:	d107      	bne.n	801ea0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	681a      	ldr	r2, [r3, #0]
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801ea0e:	2301      	movs	r3, #1
 801ea10:	e050      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801ea12:	893b      	ldrh	r3, [r7, #8]
 801ea14:	b2da      	uxtb	r2, r3
 801ea16:	68fb      	ldr	r3, [r7, #12]
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ea1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea1e:	6a39      	ldr	r1, [r7, #32]
 801ea20:	68f8      	ldr	r0, [r7, #12]
 801ea22:	f000 fadd 	bl	801efe0 <I2C_WaitOnTXEFlagUntilTimeout>
 801ea26:	4603      	mov	r3, r0
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d00d      	beq.n	801ea48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ea2c:	68fb      	ldr	r3, [r7, #12]
 801ea2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ea30:	2b04      	cmp	r3, #4
 801ea32:	d107      	bne.n	801ea44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	681a      	ldr	r2, [r3, #0]
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801ea44:	2301      	movs	r3, #1
 801ea46:	e035      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ea48:	68fb      	ldr	r3, [r7, #12]
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	681a      	ldr	r2, [r3, #0]
 801ea4e:	68fb      	ldr	r3, [r7, #12]
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ea56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea5a:	9300      	str	r3, [sp, #0]
 801ea5c:	6a3b      	ldr	r3, [r7, #32]
 801ea5e:	2200      	movs	r2, #0
 801ea60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801ea64:	68f8      	ldr	r0, [r7, #12]
 801ea66:	f000 f9e5 	bl	801ee34 <I2C_WaitOnFlagUntilTimeout>
 801ea6a:	4603      	mov	r3, r0
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d00d      	beq.n	801ea8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ea7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ea7e:	d103      	bne.n	801ea88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ea86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801ea88:	2303      	movs	r3, #3
 801ea8a:	e013      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801ea8c:	897b      	ldrh	r3, [r7, #10]
 801ea8e:	b2db      	uxtb	r3, r3
 801ea90:	f043 0301 	orr.w	r3, r3, #1
 801ea94:	b2da      	uxtb	r2, r3
 801ea96:	68fb      	ldr	r3, [r7, #12]
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea9e:	6a3a      	ldr	r2, [r7, #32]
 801eaa0:	4906      	ldr	r1, [pc, #24]	; (801eabc <I2C_RequestMemoryRead+0x1cc>)
 801eaa2:	68f8      	ldr	r0, [r7, #12]
 801eaa4:	f000 fa1d 	bl	801eee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d001      	beq.n	801eab2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801eaae:	2301      	movs	r3, #1
 801eab0:	e000      	b.n	801eab4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801eab2:	2300      	movs	r3, #0
}
 801eab4:	4618      	mov	r0, r3
 801eab6:	3718      	adds	r7, #24
 801eab8:	46bd      	mov	sp, r7
 801eaba:	bd80      	pop	{r7, pc}
 801eabc:	00010002 	.word	0x00010002

0801eac0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801eac0:	b580      	push	{r7, lr}
 801eac2:	b086      	sub	sp, #24
 801eac4:	af00      	add	r7, sp, #0
 801eac6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eacc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801eace:	697b      	ldr	r3, [r7, #20]
 801ead0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ead4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801ead6:	697b      	ldr	r3, [r7, #20]
 801ead8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eadc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801eade:	697b      	ldr	r3, [r7, #20]
 801eae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eae2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801eae4:	697b      	ldr	r3, [r7, #20]
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	685a      	ldr	r2, [r3, #4]
 801eaea:	697b      	ldr	r3, [r7, #20]
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801eaf2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801eaf4:	697b      	ldr	r3, [r7, #20]
 801eaf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d003      	beq.n	801eb04 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801eafc:	697b      	ldr	r3, [r7, #20]
 801eafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eb00:	2200      	movs	r2, #0
 801eb02:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801eb04:	697b      	ldr	r3, [r7, #20]
 801eb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d003      	beq.n	801eb14 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801eb0c:	697b      	ldr	r3, [r7, #20]
 801eb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb10:	2200      	movs	r2, #0
 801eb12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801eb14:	7cfb      	ldrb	r3, [r7, #19]
 801eb16:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801eb1a:	2b21      	cmp	r3, #33	; 0x21
 801eb1c:	d007      	beq.n	801eb2e <I2C_DMAXferCplt+0x6e>
 801eb1e:	7cfb      	ldrb	r3, [r7, #19]
 801eb20:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801eb24:	2b22      	cmp	r3, #34	; 0x22
 801eb26:	d131      	bne.n	801eb8c <I2C_DMAXferCplt+0xcc>
 801eb28:	7cbb      	ldrb	r3, [r7, #18]
 801eb2a:	2b20      	cmp	r3, #32
 801eb2c:	d12e      	bne.n	801eb8c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801eb2e:	697b      	ldr	r3, [r7, #20]
 801eb30:	681b      	ldr	r3, [r3, #0]
 801eb32:	685a      	ldr	r2, [r3, #4]
 801eb34:	697b      	ldr	r3, [r7, #20]
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801eb3c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801eb3e:	697b      	ldr	r3, [r7, #20]
 801eb40:	2200      	movs	r2, #0
 801eb42:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801eb44:	7cfb      	ldrb	r3, [r7, #19]
 801eb46:	2b29      	cmp	r3, #41	; 0x29
 801eb48:	d10a      	bne.n	801eb60 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801eb4a:	697b      	ldr	r3, [r7, #20]
 801eb4c:	2221      	movs	r2, #33	; 0x21
 801eb4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801eb50:	697b      	ldr	r3, [r7, #20]
 801eb52:	2228      	movs	r2, #40	; 0x28
 801eb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801eb58:	6978      	ldr	r0, [r7, #20]
 801eb5a:	f7fe fc8d 	bl	801d478 <HAL_I2C_SlaveTxCpltCallback>
 801eb5e:	e00c      	b.n	801eb7a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801eb60:	7cfb      	ldrb	r3, [r7, #19]
 801eb62:	2b2a      	cmp	r3, #42	; 0x2a
 801eb64:	d109      	bne.n	801eb7a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801eb66:	697b      	ldr	r3, [r7, #20]
 801eb68:	2222      	movs	r2, #34	; 0x22
 801eb6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801eb6c:	697b      	ldr	r3, [r7, #20]
 801eb6e:	2228      	movs	r2, #40	; 0x28
 801eb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801eb74:	6978      	ldr	r0, [r7, #20]
 801eb76:	f7fe fc89 	bl	801d48c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801eb7a:	697b      	ldr	r3, [r7, #20]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	685a      	ldr	r2, [r3, #4]
 801eb80:	697b      	ldr	r3, [r7, #20]
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801eb88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801eb8a:	e06a      	b.n	801ec62 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801eb8c:	697b      	ldr	r3, [r7, #20]
 801eb8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eb92:	b2db      	uxtb	r3, r3
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	d064      	beq.n	801ec62 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801eb98:	697b      	ldr	r3, [r7, #20]
 801eb9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb9c:	b29b      	uxth	r3, r3
 801eb9e:	2b01      	cmp	r3, #1
 801eba0:	d107      	bne.n	801ebb2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eba2:	697b      	ldr	r3, [r7, #20]
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	681a      	ldr	r2, [r3, #0]
 801eba8:	697b      	ldr	r3, [r7, #20]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ebb0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ebb2:	697b      	ldr	r3, [r7, #20]
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	685a      	ldr	r2, [r3, #4]
 801ebb8:	697b      	ldr	r3, [r7, #20]
 801ebba:	681b      	ldr	r3, [r3, #0]
 801ebbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801ebc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801ebc2:	68fb      	ldr	r3, [r7, #12]
 801ebc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ebc8:	d009      	beq.n	801ebde <I2C_DMAXferCplt+0x11e>
 801ebca:	68fb      	ldr	r3, [r7, #12]
 801ebcc:	2b08      	cmp	r3, #8
 801ebce:	d006      	beq.n	801ebde <I2C_DMAXferCplt+0x11e>
 801ebd0:	68fb      	ldr	r3, [r7, #12]
 801ebd2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801ebd6:	d002      	beq.n	801ebde <I2C_DMAXferCplt+0x11e>
 801ebd8:	68fb      	ldr	r3, [r7, #12]
 801ebda:	2b20      	cmp	r3, #32
 801ebdc:	d107      	bne.n	801ebee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ebde:	697b      	ldr	r3, [r7, #20]
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	681a      	ldr	r2, [r3, #0]
 801ebe4:	697b      	ldr	r3, [r7, #20]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ebec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801ebee:	697b      	ldr	r3, [r7, #20]
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	685a      	ldr	r2, [r3, #4]
 801ebf4:	697b      	ldr	r3, [r7, #20]
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ebfc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ebfe:	697b      	ldr	r3, [r7, #20]
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	685a      	ldr	r2, [r3, #4]
 801ec04:	697b      	ldr	r3, [r7, #20]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ec0c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801ec0e:	697b      	ldr	r3, [r7, #20]
 801ec10:	2200      	movs	r2, #0
 801ec12:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801ec14:	697b      	ldr	r3, [r7, #20]
 801ec16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	d003      	beq.n	801ec24 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801ec1c:	6978      	ldr	r0, [r7, #20]
 801ec1e:	f7fe fc57 	bl	801d4d0 <HAL_I2C_ErrorCallback>
}
 801ec22:	e01e      	b.n	801ec62 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801ec24:	697b      	ldr	r3, [r7, #20]
 801ec26:	2220      	movs	r2, #32
 801ec28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ec2c:	697b      	ldr	r3, [r7, #20]
 801ec2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ec32:	b2db      	uxtb	r3, r3
 801ec34:	2b40      	cmp	r3, #64	; 0x40
 801ec36:	d10a      	bne.n	801ec4e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec38:	697b      	ldr	r3, [r7, #20]
 801ec3a:	2200      	movs	r2, #0
 801ec3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801ec40:	697b      	ldr	r3, [r7, #20]
 801ec42:	2200      	movs	r2, #0
 801ec44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801ec46:	6978      	ldr	r0, [r7, #20]
 801ec48:	f7e2 ff04 	bl	8001a54 <HAL_I2C_MemRxCpltCallback>
}
 801ec4c:	e009      	b.n	801ec62 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec4e:	697b      	ldr	r3, [r7, #20]
 801ec50:	2200      	movs	r2, #0
 801ec52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ec56:	697b      	ldr	r3, [r7, #20]
 801ec58:	2212      	movs	r2, #18
 801ec5a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801ec5c:	6978      	ldr	r0, [r7, #20]
 801ec5e:	f7e2 ff0f 	bl	8001a80 <HAL_I2C_MasterRxCpltCallback>
}
 801ec62:	bf00      	nop
 801ec64:	3718      	adds	r7, #24
 801ec66:	46bd      	mov	sp, r7
 801ec68:	bd80      	pop	{r7, pc}

0801ec6a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801ec6a:	b580      	push	{r7, lr}
 801ec6c:	b084      	sub	sp, #16
 801ec6e:	af00      	add	r7, sp, #0
 801ec70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec76:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d003      	beq.n	801ec88 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801ec80:	68fb      	ldr	r3, [r7, #12]
 801ec82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec84:	2200      	movs	r2, #0
 801ec86:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d003      	beq.n	801ec98 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec94:	2200      	movs	r2, #0
 801ec96:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801ec98:	6878      	ldr	r0, [r7, #4]
 801ec9a:	f7fc ffb3 	bl	801bc04 <HAL_DMA_GetError>
 801ec9e:	4603      	mov	r3, r0
 801eca0:	2b02      	cmp	r3, #2
 801eca2:	d01b      	beq.n	801ecdc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	681a      	ldr	r2, [r3, #0]
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ecb2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801ecb4:	68fb      	ldr	r3, [r7, #12]
 801ecb6:	2200      	movs	r2, #0
 801ecb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	2220      	movs	r2, #32
 801ecbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	2200      	movs	r2, #0
 801ecc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ecca:	68fb      	ldr	r3, [r7, #12]
 801eccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ecce:	f043 0210 	orr.w	r2, r3, #16
 801ecd2:	68fb      	ldr	r3, [r7, #12]
 801ecd4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801ecd6:	68f8      	ldr	r0, [r7, #12]
 801ecd8:	f7fe fbfa 	bl	801d4d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801ecdc:	bf00      	nop
 801ecde:	3710      	adds	r7, #16
 801ece0:	46bd      	mov	sp, r7
 801ece2:	bd80      	pop	{r7, pc}

0801ece4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801ece4:	b580      	push	{r7, lr}
 801ece6:	b086      	sub	sp, #24
 801ece8:	af00      	add	r7, sp, #0
 801ecea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ecec:	2300      	movs	r3, #0
 801ecee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ecf6:	697b      	ldr	r3, [r7, #20]
 801ecf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ecfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801ecfe:	4b4b      	ldr	r3, [pc, #300]	; (801ee2c <I2C_DMAAbort+0x148>)
 801ed00:	681b      	ldr	r3, [r3, #0]
 801ed02:	08db      	lsrs	r3, r3, #3
 801ed04:	4a4a      	ldr	r2, [pc, #296]	; (801ee30 <I2C_DMAAbort+0x14c>)
 801ed06:	fba2 2303 	umull	r2, r3, r2, r3
 801ed0a:	0a1a      	lsrs	r2, r3, #8
 801ed0c:	4613      	mov	r3, r2
 801ed0e:	009b      	lsls	r3, r3, #2
 801ed10:	4413      	add	r3, r2
 801ed12:	00da      	lsls	r2, r3, #3
 801ed14:	1ad3      	subs	r3, r2, r3
 801ed16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801ed18:	68fb      	ldr	r3, [r7, #12]
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	d106      	bne.n	801ed2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ed1e:	697b      	ldr	r3, [r7, #20]
 801ed20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed22:	f043 0220 	orr.w	r2, r3, #32
 801ed26:	697b      	ldr	r3, [r7, #20]
 801ed28:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801ed2a:	e00a      	b.n	801ed42 <I2C_DMAAbort+0x5e>
    }
    count--;
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	3b01      	subs	r3, #1
 801ed30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801ed32:	697b      	ldr	r3, [r7, #20]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ed3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ed40:	d0ea      	beq.n	801ed18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801ed42:	697b      	ldr	r3, [r7, #20]
 801ed44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d003      	beq.n	801ed52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801ed4a:	697b      	ldr	r3, [r7, #20]
 801ed4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed4e:	2200      	movs	r2, #0
 801ed50:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801ed52:	697b      	ldr	r3, [r7, #20]
 801ed54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d003      	beq.n	801ed62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801ed5a:	697b      	ldr	r3, [r7, #20]
 801ed5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed5e:	2200      	movs	r2, #0
 801ed60:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ed62:	697b      	ldr	r3, [r7, #20]
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	681a      	ldr	r2, [r3, #0]
 801ed68:	697b      	ldr	r3, [r7, #20]
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801ed72:	697b      	ldr	r3, [r7, #20]
 801ed74:	2200      	movs	r2, #0
 801ed76:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801ed78:	697b      	ldr	r3, [r7, #20]
 801ed7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d003      	beq.n	801ed88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801ed80:	697b      	ldr	r3, [r7, #20]
 801ed82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed84:	2200      	movs	r2, #0
 801ed86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801ed88:	697b      	ldr	r3, [r7, #20]
 801ed8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d003      	beq.n	801ed98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801ed90:	697b      	ldr	r3, [r7, #20]
 801ed92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed94:	2200      	movs	r2, #0
 801ed96:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801ed98:	697b      	ldr	r3, [r7, #20]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	681a      	ldr	r2, [r3, #0]
 801ed9e:	697b      	ldr	r3, [r7, #20]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	f022 0201 	bic.w	r2, r2, #1
 801eda6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801eda8:	697b      	ldr	r3, [r7, #20]
 801edaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801edae:	b2db      	uxtb	r3, r3
 801edb0:	2b60      	cmp	r3, #96	; 0x60
 801edb2:	d10e      	bne.n	801edd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801edb4:	697b      	ldr	r3, [r7, #20]
 801edb6:	2220      	movs	r2, #32
 801edb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801edbc:	697b      	ldr	r3, [r7, #20]
 801edbe:	2200      	movs	r2, #0
 801edc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801edc4:	697b      	ldr	r3, [r7, #20]
 801edc6:	2200      	movs	r2, #0
 801edc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801edca:	6978      	ldr	r0, [r7, #20]
 801edcc:	f7fe fb8a 	bl	801d4e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801edd0:	e027      	b.n	801ee22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801edd2:	7cfb      	ldrb	r3, [r7, #19]
 801edd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801edd8:	2b28      	cmp	r3, #40	; 0x28
 801edda:	d117      	bne.n	801ee0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801eddc:	697b      	ldr	r3, [r7, #20]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	681a      	ldr	r2, [r3, #0]
 801ede2:	697b      	ldr	r3, [r7, #20]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	f042 0201 	orr.w	r2, r2, #1
 801edea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801edec:	697b      	ldr	r3, [r7, #20]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	681a      	ldr	r2, [r3, #0]
 801edf2:	697b      	ldr	r3, [r7, #20]
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801edfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801edfc:	697b      	ldr	r3, [r7, #20]
 801edfe:	2200      	movs	r2, #0
 801ee00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ee02:	697b      	ldr	r3, [r7, #20]
 801ee04:	2228      	movs	r2, #40	; 0x28
 801ee06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801ee0a:	e007      	b.n	801ee1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801ee0c:	697b      	ldr	r3, [r7, #20]
 801ee0e:	2220      	movs	r2, #32
 801ee10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee14:	697b      	ldr	r3, [r7, #20]
 801ee16:	2200      	movs	r2, #0
 801ee18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801ee1c:	6978      	ldr	r0, [r7, #20]
 801ee1e:	f7fe fb57 	bl	801d4d0 <HAL_I2C_ErrorCallback>
}
 801ee22:	bf00      	nop
 801ee24:	3718      	adds	r7, #24
 801ee26:	46bd      	mov	sp, r7
 801ee28:	bd80      	pop	{r7, pc}
 801ee2a:	bf00      	nop
 801ee2c:	20000020 	.word	0x20000020
 801ee30:	14f8b589 	.word	0x14f8b589

0801ee34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801ee34:	b580      	push	{r7, lr}
 801ee36:	b084      	sub	sp, #16
 801ee38:	af00      	add	r7, sp, #0
 801ee3a:	60f8      	str	r0, [r7, #12]
 801ee3c:	60b9      	str	r1, [r7, #8]
 801ee3e:	603b      	str	r3, [r7, #0]
 801ee40:	4613      	mov	r3, r2
 801ee42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ee44:	e025      	b.n	801ee92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ee46:	683b      	ldr	r3, [r7, #0]
 801ee48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee4c:	d021      	beq.n	801ee92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ee4e:	f7fb fe57 	bl	801ab00 <HAL_GetTick>
 801ee52:	4602      	mov	r2, r0
 801ee54:	69bb      	ldr	r3, [r7, #24]
 801ee56:	1ad3      	subs	r3, r2, r3
 801ee58:	683a      	ldr	r2, [r7, #0]
 801ee5a:	429a      	cmp	r2, r3
 801ee5c:	d302      	bcc.n	801ee64 <I2C_WaitOnFlagUntilTimeout+0x30>
 801ee5e:	683b      	ldr	r3, [r7, #0]
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d116      	bne.n	801ee92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	2200      	movs	r2, #0
 801ee68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	2220      	movs	r2, #32
 801ee6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	2200      	movs	r2, #0
 801ee76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801ee7a:	68fb      	ldr	r3, [r7, #12]
 801ee7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee7e:	f043 0220 	orr.w	r2, r3, #32
 801ee82:	68fb      	ldr	r3, [r7, #12]
 801ee84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ee86:	68fb      	ldr	r3, [r7, #12]
 801ee88:	2200      	movs	r2, #0
 801ee8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ee8e:	2301      	movs	r3, #1
 801ee90:	e023      	b.n	801eeda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ee92:	68bb      	ldr	r3, [r7, #8]
 801ee94:	0c1b      	lsrs	r3, r3, #16
 801ee96:	b2db      	uxtb	r3, r3
 801ee98:	2b01      	cmp	r3, #1
 801ee9a:	d10d      	bne.n	801eeb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 801ee9c:	68fb      	ldr	r3, [r7, #12]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	695b      	ldr	r3, [r3, #20]
 801eea2:	43da      	mvns	r2, r3
 801eea4:	68bb      	ldr	r3, [r7, #8]
 801eea6:	4013      	ands	r3, r2
 801eea8:	b29b      	uxth	r3, r3
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	bf0c      	ite	eq
 801eeae:	2301      	moveq	r3, #1
 801eeb0:	2300      	movne	r3, #0
 801eeb2:	b2db      	uxtb	r3, r3
 801eeb4:	461a      	mov	r2, r3
 801eeb6:	e00c      	b.n	801eed2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801eeb8:	68fb      	ldr	r3, [r7, #12]
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	699b      	ldr	r3, [r3, #24]
 801eebe:	43da      	mvns	r2, r3
 801eec0:	68bb      	ldr	r3, [r7, #8]
 801eec2:	4013      	ands	r3, r2
 801eec4:	b29b      	uxth	r3, r3
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	bf0c      	ite	eq
 801eeca:	2301      	moveq	r3, #1
 801eecc:	2300      	movne	r3, #0
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	461a      	mov	r2, r3
 801eed2:	79fb      	ldrb	r3, [r7, #7]
 801eed4:	429a      	cmp	r2, r3
 801eed6:	d0b6      	beq.n	801ee46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801eed8:	2300      	movs	r3, #0
}
 801eeda:	4618      	mov	r0, r3
 801eedc:	3710      	adds	r7, #16
 801eede:	46bd      	mov	sp, r7
 801eee0:	bd80      	pop	{r7, pc}

0801eee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801eee2:	b580      	push	{r7, lr}
 801eee4:	b084      	sub	sp, #16
 801eee6:	af00      	add	r7, sp, #0
 801eee8:	60f8      	str	r0, [r7, #12]
 801eeea:	60b9      	str	r1, [r7, #8]
 801eeec:	607a      	str	r2, [r7, #4]
 801eeee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801eef0:	e051      	b.n	801ef96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	695b      	ldr	r3, [r3, #20]
 801eef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801eefc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ef00:	d123      	bne.n	801ef4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	681a      	ldr	r2, [r3, #0]
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ef10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ef12:	68fb      	ldr	r3, [r7, #12]
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801ef1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	2200      	movs	r2, #0
 801ef20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801ef22:	68fb      	ldr	r3, [r7, #12]
 801ef24:	2220      	movs	r2, #32
 801ef26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ef2a:	68fb      	ldr	r3, [r7, #12]
 801ef2c:	2200      	movs	r2, #0
 801ef2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef36:	f043 0204 	orr.w	r2, r3, #4
 801ef3a:	68fb      	ldr	r3, [r7, #12]
 801ef3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	2200      	movs	r2, #0
 801ef42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801ef46:	2301      	movs	r3, #1
 801ef48:	e046      	b.n	801efd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef50:	d021      	beq.n	801ef96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ef52:	f7fb fdd5 	bl	801ab00 <HAL_GetTick>
 801ef56:	4602      	mov	r2, r0
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	1ad3      	subs	r3, r2, r3
 801ef5c:	687a      	ldr	r2, [r7, #4]
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d302      	bcc.n	801ef68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d116      	bne.n	801ef96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801ef68:	68fb      	ldr	r3, [r7, #12]
 801ef6a:	2200      	movs	r2, #0
 801ef6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801ef6e:	68fb      	ldr	r3, [r7, #12]
 801ef70:	2220      	movs	r2, #32
 801ef72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ef76:	68fb      	ldr	r3, [r7, #12]
 801ef78:	2200      	movs	r2, #0
 801ef7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef82:	f043 0220 	orr.w	r2, r3, #32
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	2200      	movs	r2, #0
 801ef8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ef92:	2301      	movs	r3, #1
 801ef94:	e020      	b.n	801efd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801ef96:	68bb      	ldr	r3, [r7, #8]
 801ef98:	0c1b      	lsrs	r3, r3, #16
 801ef9a:	b2db      	uxtb	r3, r3
 801ef9c:	2b01      	cmp	r3, #1
 801ef9e:	d10c      	bne.n	801efba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	695b      	ldr	r3, [r3, #20]
 801efa6:	43da      	mvns	r2, r3
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	4013      	ands	r3, r2
 801efac:	b29b      	uxth	r3, r3
 801efae:	2b00      	cmp	r3, #0
 801efb0:	bf14      	ite	ne
 801efb2:	2301      	movne	r3, #1
 801efb4:	2300      	moveq	r3, #0
 801efb6:	b2db      	uxtb	r3, r3
 801efb8:	e00b      	b.n	801efd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801efba:	68fb      	ldr	r3, [r7, #12]
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	699b      	ldr	r3, [r3, #24]
 801efc0:	43da      	mvns	r2, r3
 801efc2:	68bb      	ldr	r3, [r7, #8]
 801efc4:	4013      	ands	r3, r2
 801efc6:	b29b      	uxth	r3, r3
 801efc8:	2b00      	cmp	r3, #0
 801efca:	bf14      	ite	ne
 801efcc:	2301      	movne	r3, #1
 801efce:	2300      	moveq	r3, #0
 801efd0:	b2db      	uxtb	r3, r3
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d18d      	bne.n	801eef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801efd6:	2300      	movs	r3, #0
}
 801efd8:	4618      	mov	r0, r3
 801efda:	3710      	adds	r7, #16
 801efdc:	46bd      	mov	sp, r7
 801efde:	bd80      	pop	{r7, pc}

0801efe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801efe0:	b580      	push	{r7, lr}
 801efe2:	b084      	sub	sp, #16
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	60f8      	str	r0, [r7, #12]
 801efe8:	60b9      	str	r1, [r7, #8]
 801efea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801efec:	e02d      	b.n	801f04a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801efee:	68f8      	ldr	r0, [r7, #12]
 801eff0:	f000 f86a 	bl	801f0c8 <I2C_IsAcknowledgeFailed>
 801eff4:	4603      	mov	r3, r0
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d001      	beq.n	801effe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801effa:	2301      	movs	r3, #1
 801effc:	e02d      	b.n	801f05a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801effe:	68bb      	ldr	r3, [r7, #8]
 801f000:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f004:	d021      	beq.n	801f04a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f006:	f7fb fd7b 	bl	801ab00 <HAL_GetTick>
 801f00a:	4602      	mov	r2, r0
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	1ad3      	subs	r3, r2, r3
 801f010:	68ba      	ldr	r2, [r7, #8]
 801f012:	429a      	cmp	r2, r3
 801f014:	d302      	bcc.n	801f01c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801f016:	68bb      	ldr	r3, [r7, #8]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d116      	bne.n	801f04a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	2200      	movs	r2, #0
 801f020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f022:	68fb      	ldr	r3, [r7, #12]
 801f024:	2220      	movs	r2, #32
 801f026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f02a:	68fb      	ldr	r3, [r7, #12]
 801f02c:	2200      	movs	r2, #0
 801f02e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f032:	68fb      	ldr	r3, [r7, #12]
 801f034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f036:	f043 0220 	orr.w	r2, r3, #32
 801f03a:	68fb      	ldr	r3, [r7, #12]
 801f03c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f03e:	68fb      	ldr	r3, [r7, #12]
 801f040:	2200      	movs	r2, #0
 801f042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f046:	2301      	movs	r3, #1
 801f048:	e007      	b.n	801f05a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	695b      	ldr	r3, [r3, #20]
 801f050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f054:	2b80      	cmp	r3, #128	; 0x80
 801f056:	d1ca      	bne.n	801efee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f058:	2300      	movs	r3, #0
}
 801f05a:	4618      	mov	r0, r3
 801f05c:	3710      	adds	r7, #16
 801f05e:	46bd      	mov	sp, r7
 801f060:	bd80      	pop	{r7, pc}
	...

0801f064 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801f064:	b480      	push	{r7}
 801f066:	b085      	sub	sp, #20
 801f068:	af00      	add	r7, sp, #0
 801f06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f06c:	2300      	movs	r3, #0
 801f06e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801f070:	4b13      	ldr	r3, [pc, #76]	; (801f0c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	08db      	lsrs	r3, r3, #3
 801f076:	4a13      	ldr	r2, [pc, #76]	; (801f0c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801f078:	fba2 2303 	umull	r2, r3, r2, r3
 801f07c:	0a1a      	lsrs	r2, r3, #8
 801f07e:	4613      	mov	r3, r2
 801f080:	009b      	lsls	r3, r3, #2
 801f082:	4413      	add	r3, r2
 801f084:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	3b01      	subs	r3, #1
 801f08a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d107      	bne.n	801f0a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f096:	f043 0220 	orr.w	r2, r3, #32
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801f09e:	2301      	movs	r3, #1
 801f0a0:	e008      	b.n	801f0b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801f0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f0b0:	d0e9      	beq.n	801f086 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801f0b2:	2300      	movs	r3, #0
}
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	3714      	adds	r7, #20
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0be:	4770      	bx	lr
 801f0c0:	20000020 	.word	0x20000020
 801f0c4:	14f8b589 	.word	0x14f8b589

0801f0c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801f0c8:	b480      	push	{r7}
 801f0ca:	b083      	sub	sp, #12
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	695b      	ldr	r3, [r3, #20]
 801f0d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f0de:	d11b      	bne.n	801f118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f0e0:	687b      	ldr	r3, [r7, #4]
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f0e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	2200      	movs	r2, #0
 801f0ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	2220      	movs	r2, #32
 801f0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	2200      	movs	r2, #0
 801f0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f104:	f043 0204 	orr.w	r2, r3, #4
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	2200      	movs	r2, #0
 801f110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f114:	2301      	movs	r3, #1
 801f116:	e000      	b.n	801f11a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801f118:	2300      	movs	r3, #0
}
 801f11a:	4618      	mov	r0, r3
 801f11c:	370c      	adds	r7, #12
 801f11e:	46bd      	mov	sp, r7
 801f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f124:	4770      	bx	lr

0801f126 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801f126:	b480      	push	{r7}
 801f128:	b083      	sub	sp, #12
 801f12a:	af00      	add	r7, sp, #0
 801f12c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f132:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801f136:	d103      	bne.n	801f140 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	2201      	movs	r2, #1
 801f13c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801f13e:	e007      	b.n	801f150 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f144:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801f148:	d102      	bne.n	801f150 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	2208      	movs	r2, #8
 801f14e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801f150:	bf00      	nop
 801f152:	370c      	adds	r7, #12
 801f154:	46bd      	mov	sp, r7
 801f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f15a:	4770      	bx	lr

0801f15c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f15c:	b580      	push	{r7, lr}
 801f15e:	b086      	sub	sp, #24
 801f160:	af00      	add	r7, sp, #0
 801f162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	2b00      	cmp	r3, #0
 801f168:	d101      	bne.n	801f16e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f16a:	2301      	movs	r3, #1
 801f16c:	e267      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	f003 0301 	and.w	r3, r3, #1
 801f176:	2b00      	cmp	r3, #0
 801f178:	d075      	beq.n	801f266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f17a:	4b88      	ldr	r3, [pc, #544]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f17c:	689b      	ldr	r3, [r3, #8]
 801f17e:	f003 030c 	and.w	r3, r3, #12
 801f182:	2b04      	cmp	r3, #4
 801f184:	d00c      	beq.n	801f1a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f186:	4b85      	ldr	r3, [pc, #532]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f188:	689b      	ldr	r3, [r3, #8]
 801f18a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f18e:	2b08      	cmp	r3, #8
 801f190:	d112      	bne.n	801f1b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f192:	4b82      	ldr	r3, [pc, #520]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f194:	685b      	ldr	r3, [r3, #4]
 801f196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f19a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f19e:	d10b      	bne.n	801f1b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f1a0:	4b7e      	ldr	r3, [pc, #504]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d05b      	beq.n	801f264 <HAL_RCC_OscConfig+0x108>
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	685b      	ldr	r3, [r3, #4]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d157      	bne.n	801f264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f1b4:	2301      	movs	r3, #1
 801f1b6:	e242      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	685b      	ldr	r3, [r3, #4]
 801f1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f1c0:	d106      	bne.n	801f1d0 <HAL_RCC_OscConfig+0x74>
 801f1c2:	4b76      	ldr	r3, [pc, #472]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	4a75      	ldr	r2, [pc, #468]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f1cc:	6013      	str	r3, [r2, #0]
 801f1ce:	e01d      	b.n	801f20c <HAL_RCC_OscConfig+0xb0>
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	685b      	ldr	r3, [r3, #4]
 801f1d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f1d8:	d10c      	bne.n	801f1f4 <HAL_RCC_OscConfig+0x98>
 801f1da:	4b70      	ldr	r3, [pc, #448]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1dc:	681b      	ldr	r3, [r3, #0]
 801f1de:	4a6f      	ldr	r2, [pc, #444]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f1e4:	6013      	str	r3, [r2, #0]
 801f1e6:	4b6d      	ldr	r3, [pc, #436]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	4a6c      	ldr	r2, [pc, #432]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f1f0:	6013      	str	r3, [r2, #0]
 801f1f2:	e00b      	b.n	801f20c <HAL_RCC_OscConfig+0xb0>
 801f1f4:	4b69      	ldr	r3, [pc, #420]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	4a68      	ldr	r2, [pc, #416]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f1fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f1fe:	6013      	str	r3, [r2, #0]
 801f200:	4b66      	ldr	r3, [pc, #408]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	4a65      	ldr	r2, [pc, #404]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f20a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	685b      	ldr	r3, [r3, #4]
 801f210:	2b00      	cmp	r3, #0
 801f212:	d013      	beq.n	801f23c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f214:	f7fb fc74 	bl	801ab00 <HAL_GetTick>
 801f218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f21a:	e008      	b.n	801f22e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f21c:	f7fb fc70 	bl	801ab00 <HAL_GetTick>
 801f220:	4602      	mov	r2, r0
 801f222:	693b      	ldr	r3, [r7, #16]
 801f224:	1ad3      	subs	r3, r2, r3
 801f226:	2b64      	cmp	r3, #100	; 0x64
 801f228:	d901      	bls.n	801f22e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f22a:	2303      	movs	r3, #3
 801f22c:	e207      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f22e:	4b5b      	ldr	r3, [pc, #364]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f236:	2b00      	cmp	r3, #0
 801f238:	d0f0      	beq.n	801f21c <HAL_RCC_OscConfig+0xc0>
 801f23a:	e014      	b.n	801f266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f23c:	f7fb fc60 	bl	801ab00 <HAL_GetTick>
 801f240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f242:	e008      	b.n	801f256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f244:	f7fb fc5c 	bl	801ab00 <HAL_GetTick>
 801f248:	4602      	mov	r2, r0
 801f24a:	693b      	ldr	r3, [r7, #16]
 801f24c:	1ad3      	subs	r3, r2, r3
 801f24e:	2b64      	cmp	r3, #100	; 0x64
 801f250:	d901      	bls.n	801f256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f252:	2303      	movs	r3, #3
 801f254:	e1f3      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f256:	4b51      	ldr	r3, [pc, #324]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d1f0      	bne.n	801f244 <HAL_RCC_OscConfig+0xe8>
 801f262:	e000      	b.n	801f266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	f003 0302 	and.w	r3, r3, #2
 801f26e:	2b00      	cmp	r3, #0
 801f270:	d063      	beq.n	801f33a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f272:	4b4a      	ldr	r3, [pc, #296]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f274:	689b      	ldr	r3, [r3, #8]
 801f276:	f003 030c 	and.w	r3, r3, #12
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d00b      	beq.n	801f296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f27e:	4b47      	ldr	r3, [pc, #284]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f280:	689b      	ldr	r3, [r3, #8]
 801f282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f286:	2b08      	cmp	r3, #8
 801f288:	d11c      	bne.n	801f2c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f28a:	4b44      	ldr	r3, [pc, #272]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f28c:	685b      	ldr	r3, [r3, #4]
 801f28e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f292:	2b00      	cmp	r3, #0
 801f294:	d116      	bne.n	801f2c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f296:	4b41      	ldr	r3, [pc, #260]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	f003 0302 	and.w	r3, r3, #2
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d005      	beq.n	801f2ae <HAL_RCC_OscConfig+0x152>
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	68db      	ldr	r3, [r3, #12]
 801f2a6:	2b01      	cmp	r3, #1
 801f2a8:	d001      	beq.n	801f2ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f2aa:	2301      	movs	r3, #1
 801f2ac:	e1c7      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f2ae:	4b3b      	ldr	r3, [pc, #236]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	691b      	ldr	r3, [r3, #16]
 801f2ba:	00db      	lsls	r3, r3, #3
 801f2bc:	4937      	ldr	r1, [pc, #220]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f2be:	4313      	orrs	r3, r2
 801f2c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f2c2:	e03a      	b.n	801f33a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	68db      	ldr	r3, [r3, #12]
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d020      	beq.n	801f30e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f2cc:	4b34      	ldr	r3, [pc, #208]	; (801f3a0 <HAL_RCC_OscConfig+0x244>)
 801f2ce:	2201      	movs	r2, #1
 801f2d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f2d2:	f7fb fc15 	bl	801ab00 <HAL_GetTick>
 801f2d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f2d8:	e008      	b.n	801f2ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f2da:	f7fb fc11 	bl	801ab00 <HAL_GetTick>
 801f2de:	4602      	mov	r2, r0
 801f2e0:	693b      	ldr	r3, [r7, #16]
 801f2e2:	1ad3      	subs	r3, r2, r3
 801f2e4:	2b02      	cmp	r3, #2
 801f2e6:	d901      	bls.n	801f2ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f2e8:	2303      	movs	r3, #3
 801f2ea:	e1a8      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f2ec:	4b2b      	ldr	r3, [pc, #172]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	f003 0302 	and.w	r3, r3, #2
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d0f0      	beq.n	801f2da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f2f8:	4b28      	ldr	r3, [pc, #160]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	691b      	ldr	r3, [r3, #16]
 801f304:	00db      	lsls	r3, r3, #3
 801f306:	4925      	ldr	r1, [pc, #148]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f308:	4313      	orrs	r3, r2
 801f30a:	600b      	str	r3, [r1, #0]
 801f30c:	e015      	b.n	801f33a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f30e:	4b24      	ldr	r3, [pc, #144]	; (801f3a0 <HAL_RCC_OscConfig+0x244>)
 801f310:	2200      	movs	r2, #0
 801f312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f314:	f7fb fbf4 	bl	801ab00 <HAL_GetTick>
 801f318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f31a:	e008      	b.n	801f32e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f31c:	f7fb fbf0 	bl	801ab00 <HAL_GetTick>
 801f320:	4602      	mov	r2, r0
 801f322:	693b      	ldr	r3, [r7, #16]
 801f324:	1ad3      	subs	r3, r2, r3
 801f326:	2b02      	cmp	r3, #2
 801f328:	d901      	bls.n	801f32e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f32a:	2303      	movs	r3, #3
 801f32c:	e187      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f32e:	4b1b      	ldr	r3, [pc, #108]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	f003 0302 	and.w	r3, r3, #2
 801f336:	2b00      	cmp	r3, #0
 801f338:	d1f0      	bne.n	801f31c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	f003 0308 	and.w	r3, r3, #8
 801f342:	2b00      	cmp	r3, #0
 801f344:	d036      	beq.n	801f3b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	695b      	ldr	r3, [r3, #20]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d016      	beq.n	801f37c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f34e:	4b15      	ldr	r3, [pc, #84]	; (801f3a4 <HAL_RCC_OscConfig+0x248>)
 801f350:	2201      	movs	r2, #1
 801f352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f354:	f7fb fbd4 	bl	801ab00 <HAL_GetTick>
 801f358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f35a:	e008      	b.n	801f36e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f35c:	f7fb fbd0 	bl	801ab00 <HAL_GetTick>
 801f360:	4602      	mov	r2, r0
 801f362:	693b      	ldr	r3, [r7, #16]
 801f364:	1ad3      	subs	r3, r2, r3
 801f366:	2b02      	cmp	r3, #2
 801f368:	d901      	bls.n	801f36e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f36a:	2303      	movs	r3, #3
 801f36c:	e167      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f36e:	4b0b      	ldr	r3, [pc, #44]	; (801f39c <HAL_RCC_OscConfig+0x240>)
 801f370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f372:	f003 0302 	and.w	r3, r3, #2
 801f376:	2b00      	cmp	r3, #0
 801f378:	d0f0      	beq.n	801f35c <HAL_RCC_OscConfig+0x200>
 801f37a:	e01b      	b.n	801f3b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f37c:	4b09      	ldr	r3, [pc, #36]	; (801f3a4 <HAL_RCC_OscConfig+0x248>)
 801f37e:	2200      	movs	r2, #0
 801f380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f382:	f7fb fbbd 	bl	801ab00 <HAL_GetTick>
 801f386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f388:	e00e      	b.n	801f3a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f38a:	f7fb fbb9 	bl	801ab00 <HAL_GetTick>
 801f38e:	4602      	mov	r2, r0
 801f390:	693b      	ldr	r3, [r7, #16]
 801f392:	1ad3      	subs	r3, r2, r3
 801f394:	2b02      	cmp	r3, #2
 801f396:	d907      	bls.n	801f3a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801f398:	2303      	movs	r3, #3
 801f39a:	e150      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
 801f39c:	40023800 	.word	0x40023800
 801f3a0:	42470000 	.word	0x42470000
 801f3a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f3a8:	4b88      	ldr	r3, [pc, #544]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f3ac:	f003 0302 	and.w	r3, r3, #2
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d1ea      	bne.n	801f38a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	f003 0304 	and.w	r3, r3, #4
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	f000 8097 	beq.w	801f4f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f3c2:	2300      	movs	r3, #0
 801f3c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f3c6:	4b81      	ldr	r3, [pc, #516]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d10f      	bne.n	801f3f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f3d2:	2300      	movs	r3, #0
 801f3d4:	60bb      	str	r3, [r7, #8]
 801f3d6:	4b7d      	ldr	r3, [pc, #500]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3da:	4a7c      	ldr	r2, [pc, #496]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f3e0:	6413      	str	r3, [r2, #64]	; 0x40
 801f3e2:	4b7a      	ldr	r3, [pc, #488]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f3ea:	60bb      	str	r3, [r7, #8]
 801f3ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f3ee:	2301      	movs	r3, #1
 801f3f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f3f2:	4b77      	ldr	r3, [pc, #476]	; (801f5d0 <HAL_RCC_OscConfig+0x474>)
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d118      	bne.n	801f430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f3fe:	4b74      	ldr	r3, [pc, #464]	; (801f5d0 <HAL_RCC_OscConfig+0x474>)
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	4a73      	ldr	r2, [pc, #460]	; (801f5d0 <HAL_RCC_OscConfig+0x474>)
 801f404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f40a:	f7fb fb79 	bl	801ab00 <HAL_GetTick>
 801f40e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f410:	e008      	b.n	801f424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f412:	f7fb fb75 	bl	801ab00 <HAL_GetTick>
 801f416:	4602      	mov	r2, r0
 801f418:	693b      	ldr	r3, [r7, #16]
 801f41a:	1ad3      	subs	r3, r2, r3
 801f41c:	2b02      	cmp	r3, #2
 801f41e:	d901      	bls.n	801f424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801f420:	2303      	movs	r3, #3
 801f422:	e10c      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f424:	4b6a      	ldr	r3, [pc, #424]	; (801f5d0 <HAL_RCC_OscConfig+0x474>)
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d0f0      	beq.n	801f412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	689b      	ldr	r3, [r3, #8]
 801f434:	2b01      	cmp	r3, #1
 801f436:	d106      	bne.n	801f446 <HAL_RCC_OscConfig+0x2ea>
 801f438:	4b64      	ldr	r3, [pc, #400]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f43c:	4a63      	ldr	r2, [pc, #396]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f43e:	f043 0301 	orr.w	r3, r3, #1
 801f442:	6713      	str	r3, [r2, #112]	; 0x70
 801f444:	e01c      	b.n	801f480 <HAL_RCC_OscConfig+0x324>
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	689b      	ldr	r3, [r3, #8]
 801f44a:	2b05      	cmp	r3, #5
 801f44c:	d10c      	bne.n	801f468 <HAL_RCC_OscConfig+0x30c>
 801f44e:	4b5f      	ldr	r3, [pc, #380]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f452:	4a5e      	ldr	r2, [pc, #376]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f454:	f043 0304 	orr.w	r3, r3, #4
 801f458:	6713      	str	r3, [r2, #112]	; 0x70
 801f45a:	4b5c      	ldr	r3, [pc, #368]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f45e:	4a5b      	ldr	r2, [pc, #364]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f460:	f043 0301 	orr.w	r3, r3, #1
 801f464:	6713      	str	r3, [r2, #112]	; 0x70
 801f466:	e00b      	b.n	801f480 <HAL_RCC_OscConfig+0x324>
 801f468:	4b58      	ldr	r3, [pc, #352]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f46c:	4a57      	ldr	r2, [pc, #348]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f46e:	f023 0301 	bic.w	r3, r3, #1
 801f472:	6713      	str	r3, [r2, #112]	; 0x70
 801f474:	4b55      	ldr	r3, [pc, #340]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f478:	4a54      	ldr	r2, [pc, #336]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f47a:	f023 0304 	bic.w	r3, r3, #4
 801f47e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	689b      	ldr	r3, [r3, #8]
 801f484:	2b00      	cmp	r3, #0
 801f486:	d015      	beq.n	801f4b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f488:	f7fb fb3a 	bl	801ab00 <HAL_GetTick>
 801f48c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f48e:	e00a      	b.n	801f4a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f490:	f7fb fb36 	bl	801ab00 <HAL_GetTick>
 801f494:	4602      	mov	r2, r0
 801f496:	693b      	ldr	r3, [r7, #16]
 801f498:	1ad3      	subs	r3, r2, r3
 801f49a:	f241 3288 	movw	r2, #5000	; 0x1388
 801f49e:	4293      	cmp	r3, r2
 801f4a0:	d901      	bls.n	801f4a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801f4a2:	2303      	movs	r3, #3
 801f4a4:	e0cb      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f4a6:	4b49      	ldr	r3, [pc, #292]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f4aa:	f003 0302 	and.w	r3, r3, #2
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d0ee      	beq.n	801f490 <HAL_RCC_OscConfig+0x334>
 801f4b2:	e014      	b.n	801f4de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f4b4:	f7fb fb24 	bl	801ab00 <HAL_GetTick>
 801f4b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f4ba:	e00a      	b.n	801f4d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f4bc:	f7fb fb20 	bl	801ab00 <HAL_GetTick>
 801f4c0:	4602      	mov	r2, r0
 801f4c2:	693b      	ldr	r3, [r7, #16]
 801f4c4:	1ad3      	subs	r3, r2, r3
 801f4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 801f4ca:	4293      	cmp	r3, r2
 801f4cc:	d901      	bls.n	801f4d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801f4ce:	2303      	movs	r3, #3
 801f4d0:	e0b5      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f4d2:	4b3e      	ldr	r3, [pc, #248]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f4d6:	f003 0302 	and.w	r3, r3, #2
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d1ee      	bne.n	801f4bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f4de:	7dfb      	ldrb	r3, [r7, #23]
 801f4e0:	2b01      	cmp	r3, #1
 801f4e2:	d105      	bne.n	801f4f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f4e4:	4b39      	ldr	r3, [pc, #228]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4e8:	4a38      	ldr	r2, [pc, #224]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f4ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f4ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	699b      	ldr	r3, [r3, #24]
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	f000 80a1 	beq.w	801f63c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f4fa:	4b34      	ldr	r3, [pc, #208]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f4fc:	689b      	ldr	r3, [r3, #8]
 801f4fe:	f003 030c 	and.w	r3, r3, #12
 801f502:	2b08      	cmp	r3, #8
 801f504:	d05c      	beq.n	801f5c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	699b      	ldr	r3, [r3, #24]
 801f50a:	2b02      	cmp	r3, #2
 801f50c:	d141      	bne.n	801f592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f50e:	4b31      	ldr	r3, [pc, #196]	; (801f5d4 <HAL_RCC_OscConfig+0x478>)
 801f510:	2200      	movs	r2, #0
 801f512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f514:	f7fb faf4 	bl	801ab00 <HAL_GetTick>
 801f518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f51a:	e008      	b.n	801f52e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f51c:	f7fb faf0 	bl	801ab00 <HAL_GetTick>
 801f520:	4602      	mov	r2, r0
 801f522:	693b      	ldr	r3, [r7, #16]
 801f524:	1ad3      	subs	r3, r2, r3
 801f526:	2b02      	cmp	r3, #2
 801f528:	d901      	bls.n	801f52e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801f52a:	2303      	movs	r3, #3
 801f52c:	e087      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f52e:	4b27      	ldr	r3, [pc, #156]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f536:	2b00      	cmp	r3, #0
 801f538:	d1f0      	bne.n	801f51c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	69da      	ldr	r2, [r3, #28]
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	6a1b      	ldr	r3, [r3, #32]
 801f542:	431a      	orrs	r2, r3
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f548:	019b      	lsls	r3, r3, #6
 801f54a:	431a      	orrs	r2, r3
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f550:	085b      	lsrs	r3, r3, #1
 801f552:	3b01      	subs	r3, #1
 801f554:	041b      	lsls	r3, r3, #16
 801f556:	431a      	orrs	r2, r3
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f55c:	061b      	lsls	r3, r3, #24
 801f55e:	491b      	ldr	r1, [pc, #108]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f560:	4313      	orrs	r3, r2
 801f562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f564:	4b1b      	ldr	r3, [pc, #108]	; (801f5d4 <HAL_RCC_OscConfig+0x478>)
 801f566:	2201      	movs	r2, #1
 801f568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f56a:	f7fb fac9 	bl	801ab00 <HAL_GetTick>
 801f56e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f570:	e008      	b.n	801f584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f572:	f7fb fac5 	bl	801ab00 <HAL_GetTick>
 801f576:	4602      	mov	r2, r0
 801f578:	693b      	ldr	r3, [r7, #16]
 801f57a:	1ad3      	subs	r3, r2, r3
 801f57c:	2b02      	cmp	r3, #2
 801f57e:	d901      	bls.n	801f584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801f580:	2303      	movs	r3, #3
 801f582:	e05c      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f584:	4b11      	ldr	r3, [pc, #68]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d0f0      	beq.n	801f572 <HAL_RCC_OscConfig+0x416>
 801f590:	e054      	b.n	801f63c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f592:	4b10      	ldr	r3, [pc, #64]	; (801f5d4 <HAL_RCC_OscConfig+0x478>)
 801f594:	2200      	movs	r2, #0
 801f596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f598:	f7fb fab2 	bl	801ab00 <HAL_GetTick>
 801f59c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f59e:	e008      	b.n	801f5b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f5a0:	f7fb faae 	bl	801ab00 <HAL_GetTick>
 801f5a4:	4602      	mov	r2, r0
 801f5a6:	693b      	ldr	r3, [r7, #16]
 801f5a8:	1ad3      	subs	r3, r2, r3
 801f5aa:	2b02      	cmp	r3, #2
 801f5ac:	d901      	bls.n	801f5b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801f5ae:	2303      	movs	r3, #3
 801f5b0:	e045      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f5b2:	4b06      	ldr	r3, [pc, #24]	; (801f5cc <HAL_RCC_OscConfig+0x470>)
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d1f0      	bne.n	801f5a0 <HAL_RCC_OscConfig+0x444>
 801f5be:	e03d      	b.n	801f63c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	699b      	ldr	r3, [r3, #24]
 801f5c4:	2b01      	cmp	r3, #1
 801f5c6:	d107      	bne.n	801f5d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801f5c8:	2301      	movs	r3, #1
 801f5ca:	e038      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
 801f5cc:	40023800 	.word	0x40023800
 801f5d0:	40007000 	.word	0x40007000
 801f5d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f5d8:	4b1b      	ldr	r3, [pc, #108]	; (801f648 <HAL_RCC_OscConfig+0x4ec>)
 801f5da:	685b      	ldr	r3, [r3, #4]
 801f5dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	699b      	ldr	r3, [r3, #24]
 801f5e2:	2b01      	cmp	r3, #1
 801f5e4:	d028      	beq.n	801f638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f5e6:	68fb      	ldr	r3, [r7, #12]
 801f5e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f5f0:	429a      	cmp	r2, r3
 801f5f2:	d121      	bne.n	801f638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f5f4:	68fb      	ldr	r3, [r7, #12]
 801f5f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f5fe:	429a      	cmp	r2, r3
 801f600:	d11a      	bne.n	801f638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f602:	68fa      	ldr	r2, [r7, #12]
 801f604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f608:	4013      	ands	r3, r2
 801f60a:	687a      	ldr	r2, [r7, #4]
 801f60c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801f60e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801f610:	4293      	cmp	r3, r2
 801f612:	d111      	bne.n	801f638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f614:	68fb      	ldr	r3, [r7, #12]
 801f616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f61e:	085b      	lsrs	r3, r3, #1
 801f620:	3b01      	subs	r3, #1
 801f622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801f624:	429a      	cmp	r2, r3
 801f626:	d107      	bne.n	801f638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801f634:	429a      	cmp	r2, r3
 801f636:	d001      	beq.n	801f63c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801f638:	2301      	movs	r3, #1
 801f63a:	e000      	b.n	801f63e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801f63c:	2300      	movs	r3, #0
}
 801f63e:	4618      	mov	r0, r3
 801f640:	3718      	adds	r7, #24
 801f642:	46bd      	mov	sp, r7
 801f644:	bd80      	pop	{r7, pc}
 801f646:	bf00      	nop
 801f648:	40023800 	.word	0x40023800

0801f64c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f64c:	b580      	push	{r7, lr}
 801f64e:	b084      	sub	sp, #16
 801f650:	af00      	add	r7, sp, #0
 801f652:	6078      	str	r0, [r7, #4]
 801f654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d101      	bne.n	801f660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f65c:	2301      	movs	r3, #1
 801f65e:	e0cc      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801f660:	4b68      	ldr	r3, [pc, #416]	; (801f804 <HAL_RCC_ClockConfig+0x1b8>)
 801f662:	681b      	ldr	r3, [r3, #0]
 801f664:	f003 0307 	and.w	r3, r3, #7
 801f668:	683a      	ldr	r2, [r7, #0]
 801f66a:	429a      	cmp	r2, r3
 801f66c:	d90c      	bls.n	801f688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f66e:	4b65      	ldr	r3, [pc, #404]	; (801f804 <HAL_RCC_ClockConfig+0x1b8>)
 801f670:	683a      	ldr	r2, [r7, #0]
 801f672:	b2d2      	uxtb	r2, r2
 801f674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f676:	4b63      	ldr	r3, [pc, #396]	; (801f804 <HAL_RCC_ClockConfig+0x1b8>)
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	f003 0307 	and.w	r3, r3, #7
 801f67e:	683a      	ldr	r2, [r7, #0]
 801f680:	429a      	cmp	r2, r3
 801f682:	d001      	beq.n	801f688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801f684:	2301      	movs	r3, #1
 801f686:	e0b8      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	f003 0302 	and.w	r3, r3, #2
 801f690:	2b00      	cmp	r3, #0
 801f692:	d020      	beq.n	801f6d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	f003 0304 	and.w	r3, r3, #4
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	d005      	beq.n	801f6ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801f6a0:	4b59      	ldr	r3, [pc, #356]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6a2:	689b      	ldr	r3, [r3, #8]
 801f6a4:	4a58      	ldr	r2, [pc, #352]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801f6aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	f003 0308 	and.w	r3, r3, #8
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d005      	beq.n	801f6c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801f6b8:	4b53      	ldr	r3, [pc, #332]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6ba:	689b      	ldr	r3, [r3, #8]
 801f6bc:	4a52      	ldr	r2, [pc, #328]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801f6c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f6c4:	4b50      	ldr	r3, [pc, #320]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6c6:	689b      	ldr	r3, [r3, #8]
 801f6c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	689b      	ldr	r3, [r3, #8]
 801f6d0:	494d      	ldr	r1, [pc, #308]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6d2:	4313      	orrs	r3, r2
 801f6d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	f003 0301 	and.w	r3, r3, #1
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d044      	beq.n	801f76c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	685b      	ldr	r3, [r3, #4]
 801f6e6:	2b01      	cmp	r3, #1
 801f6e8:	d107      	bne.n	801f6fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f6ea:	4b47      	ldr	r3, [pc, #284]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d119      	bne.n	801f72a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f6f6:	2301      	movs	r3, #1
 801f6f8:	e07f      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	685b      	ldr	r3, [r3, #4]
 801f6fe:	2b02      	cmp	r3, #2
 801f700:	d003      	beq.n	801f70a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f706:	2b03      	cmp	r3, #3
 801f708:	d107      	bne.n	801f71a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f70a:	4b3f      	ldr	r3, [pc, #252]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f70c:	681b      	ldr	r3, [r3, #0]
 801f70e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f712:	2b00      	cmp	r3, #0
 801f714:	d109      	bne.n	801f72a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f716:	2301      	movs	r3, #1
 801f718:	e06f      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f71a:	4b3b      	ldr	r3, [pc, #236]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	f003 0302 	and.w	r3, r3, #2
 801f722:	2b00      	cmp	r3, #0
 801f724:	d101      	bne.n	801f72a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f726:	2301      	movs	r3, #1
 801f728:	e067      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801f72a:	4b37      	ldr	r3, [pc, #220]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f72c:	689b      	ldr	r3, [r3, #8]
 801f72e:	f023 0203 	bic.w	r2, r3, #3
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	685b      	ldr	r3, [r3, #4]
 801f736:	4934      	ldr	r1, [pc, #208]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f738:	4313      	orrs	r3, r2
 801f73a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801f73c:	f7fb f9e0 	bl	801ab00 <HAL_GetTick>
 801f740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f742:	e00a      	b.n	801f75a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f744:	f7fb f9dc 	bl	801ab00 <HAL_GetTick>
 801f748:	4602      	mov	r2, r0
 801f74a:	68fb      	ldr	r3, [r7, #12]
 801f74c:	1ad3      	subs	r3, r2, r3
 801f74e:	f241 3288 	movw	r2, #5000	; 0x1388
 801f752:	4293      	cmp	r3, r2
 801f754:	d901      	bls.n	801f75a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801f756:	2303      	movs	r3, #3
 801f758:	e04f      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f75a:	4b2b      	ldr	r3, [pc, #172]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f75c:	689b      	ldr	r3, [r3, #8]
 801f75e:	f003 020c 	and.w	r2, r3, #12
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	685b      	ldr	r3, [r3, #4]
 801f766:	009b      	lsls	r3, r3, #2
 801f768:	429a      	cmp	r2, r3
 801f76a:	d1eb      	bne.n	801f744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801f76c:	4b25      	ldr	r3, [pc, #148]	; (801f804 <HAL_RCC_ClockConfig+0x1b8>)
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	f003 0307 	and.w	r3, r3, #7
 801f774:	683a      	ldr	r2, [r7, #0]
 801f776:	429a      	cmp	r2, r3
 801f778:	d20c      	bcs.n	801f794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f77a:	4b22      	ldr	r3, [pc, #136]	; (801f804 <HAL_RCC_ClockConfig+0x1b8>)
 801f77c:	683a      	ldr	r2, [r7, #0]
 801f77e:	b2d2      	uxtb	r2, r2
 801f780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f782:	4b20      	ldr	r3, [pc, #128]	; (801f804 <HAL_RCC_ClockConfig+0x1b8>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	f003 0307 	and.w	r3, r3, #7
 801f78a:	683a      	ldr	r2, [r7, #0]
 801f78c:	429a      	cmp	r2, r3
 801f78e:	d001      	beq.n	801f794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801f790:	2301      	movs	r3, #1
 801f792:	e032      	b.n	801f7fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	f003 0304 	and.w	r3, r3, #4
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d008      	beq.n	801f7b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801f7a0:	4b19      	ldr	r3, [pc, #100]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f7a2:	689b      	ldr	r3, [r3, #8]
 801f7a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	68db      	ldr	r3, [r3, #12]
 801f7ac:	4916      	ldr	r1, [pc, #88]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f7ae:	4313      	orrs	r3, r2
 801f7b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	f003 0308 	and.w	r3, r3, #8
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d009      	beq.n	801f7d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801f7be:	4b12      	ldr	r3, [pc, #72]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f7c0:	689b      	ldr	r3, [r3, #8]
 801f7c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	691b      	ldr	r3, [r3, #16]
 801f7ca:	00db      	lsls	r3, r3, #3
 801f7cc:	490e      	ldr	r1, [pc, #56]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f7ce:	4313      	orrs	r3, r2
 801f7d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801f7d2:	f000 f821 	bl	801f818 <HAL_RCC_GetSysClockFreq>
 801f7d6:	4602      	mov	r2, r0
 801f7d8:	4b0b      	ldr	r3, [pc, #44]	; (801f808 <HAL_RCC_ClockConfig+0x1bc>)
 801f7da:	689b      	ldr	r3, [r3, #8]
 801f7dc:	091b      	lsrs	r3, r3, #4
 801f7de:	f003 030f 	and.w	r3, r3, #15
 801f7e2:	490a      	ldr	r1, [pc, #40]	; (801f80c <HAL_RCC_ClockConfig+0x1c0>)
 801f7e4:	5ccb      	ldrb	r3, [r1, r3]
 801f7e6:	fa22 f303 	lsr.w	r3, r2, r3
 801f7ea:	4a09      	ldr	r2, [pc, #36]	; (801f810 <HAL_RCC_ClockConfig+0x1c4>)
 801f7ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801f7ee:	4b09      	ldr	r3, [pc, #36]	; (801f814 <HAL_RCC_ClockConfig+0x1c8>)
 801f7f0:	681b      	ldr	r3, [r3, #0]
 801f7f2:	4618      	mov	r0, r3
 801f7f4:	f7fb f940 	bl	801aa78 <HAL_InitTick>

  return HAL_OK;
 801f7f8:	2300      	movs	r3, #0
}
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	3710      	adds	r7, #16
 801f7fe:	46bd      	mov	sp, r7
 801f800:	bd80      	pop	{r7, pc}
 801f802:	bf00      	nop
 801f804:	40023c00 	.word	0x40023c00
 801f808:	40023800 	.word	0x40023800
 801f80c:	08026c70 	.word	0x08026c70
 801f810:	20000020 	.word	0x20000020
 801f814:	20000090 	.word	0x20000090

0801f818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f81c:	b094      	sub	sp, #80	; 0x50
 801f81e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801f820:	2300      	movs	r3, #0
 801f822:	647b      	str	r3, [r7, #68]	; 0x44
 801f824:	2300      	movs	r3, #0
 801f826:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f828:	2300      	movs	r3, #0
 801f82a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801f82c:	2300      	movs	r3, #0
 801f82e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f830:	4b79      	ldr	r3, [pc, #484]	; (801fa18 <HAL_RCC_GetSysClockFreq+0x200>)
 801f832:	689b      	ldr	r3, [r3, #8]
 801f834:	f003 030c 	and.w	r3, r3, #12
 801f838:	2b08      	cmp	r3, #8
 801f83a:	d00d      	beq.n	801f858 <HAL_RCC_GetSysClockFreq+0x40>
 801f83c:	2b08      	cmp	r3, #8
 801f83e:	f200 80e1 	bhi.w	801fa04 <HAL_RCC_GetSysClockFreq+0x1ec>
 801f842:	2b00      	cmp	r3, #0
 801f844:	d002      	beq.n	801f84c <HAL_RCC_GetSysClockFreq+0x34>
 801f846:	2b04      	cmp	r3, #4
 801f848:	d003      	beq.n	801f852 <HAL_RCC_GetSysClockFreq+0x3a>
 801f84a:	e0db      	b.n	801fa04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801f84c:	4b73      	ldr	r3, [pc, #460]	; (801fa1c <HAL_RCC_GetSysClockFreq+0x204>)
 801f84e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801f850:	e0db      	b.n	801fa0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801f852:	4b73      	ldr	r3, [pc, #460]	; (801fa20 <HAL_RCC_GetSysClockFreq+0x208>)
 801f854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801f856:	e0d8      	b.n	801fa0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801f858:	4b6f      	ldr	r3, [pc, #444]	; (801fa18 <HAL_RCC_GetSysClockFreq+0x200>)
 801f85a:	685b      	ldr	r3, [r3, #4]
 801f85c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f860:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801f862:	4b6d      	ldr	r3, [pc, #436]	; (801fa18 <HAL_RCC_GetSysClockFreq+0x200>)
 801f864:	685b      	ldr	r3, [r3, #4]
 801f866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	d063      	beq.n	801f936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801f86e:	4b6a      	ldr	r3, [pc, #424]	; (801fa18 <HAL_RCC_GetSysClockFreq+0x200>)
 801f870:	685b      	ldr	r3, [r3, #4]
 801f872:	099b      	lsrs	r3, r3, #6
 801f874:	2200      	movs	r2, #0
 801f876:	63bb      	str	r3, [r7, #56]	; 0x38
 801f878:	63fa      	str	r2, [r7, #60]	; 0x3c
 801f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f880:	633b      	str	r3, [r7, #48]	; 0x30
 801f882:	2300      	movs	r3, #0
 801f884:	637b      	str	r3, [r7, #52]	; 0x34
 801f886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801f88a:	4622      	mov	r2, r4
 801f88c:	462b      	mov	r3, r5
 801f88e:	f04f 0000 	mov.w	r0, #0
 801f892:	f04f 0100 	mov.w	r1, #0
 801f896:	0159      	lsls	r1, r3, #5
 801f898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801f89c:	0150      	lsls	r0, r2, #5
 801f89e:	4602      	mov	r2, r0
 801f8a0:	460b      	mov	r3, r1
 801f8a2:	4621      	mov	r1, r4
 801f8a4:	1a51      	subs	r1, r2, r1
 801f8a6:	6139      	str	r1, [r7, #16]
 801f8a8:	4629      	mov	r1, r5
 801f8aa:	eb63 0301 	sbc.w	r3, r3, r1
 801f8ae:	617b      	str	r3, [r7, #20]
 801f8b0:	f04f 0200 	mov.w	r2, #0
 801f8b4:	f04f 0300 	mov.w	r3, #0
 801f8b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801f8bc:	4659      	mov	r1, fp
 801f8be:	018b      	lsls	r3, r1, #6
 801f8c0:	4651      	mov	r1, sl
 801f8c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801f8c6:	4651      	mov	r1, sl
 801f8c8:	018a      	lsls	r2, r1, #6
 801f8ca:	4651      	mov	r1, sl
 801f8cc:	ebb2 0801 	subs.w	r8, r2, r1
 801f8d0:	4659      	mov	r1, fp
 801f8d2:	eb63 0901 	sbc.w	r9, r3, r1
 801f8d6:	f04f 0200 	mov.w	r2, #0
 801f8da:	f04f 0300 	mov.w	r3, #0
 801f8de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801f8e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801f8e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801f8ea:	4690      	mov	r8, r2
 801f8ec:	4699      	mov	r9, r3
 801f8ee:	4623      	mov	r3, r4
 801f8f0:	eb18 0303 	adds.w	r3, r8, r3
 801f8f4:	60bb      	str	r3, [r7, #8]
 801f8f6:	462b      	mov	r3, r5
 801f8f8:	eb49 0303 	adc.w	r3, r9, r3
 801f8fc:	60fb      	str	r3, [r7, #12]
 801f8fe:	f04f 0200 	mov.w	r2, #0
 801f902:	f04f 0300 	mov.w	r3, #0
 801f906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801f90a:	4629      	mov	r1, r5
 801f90c:	024b      	lsls	r3, r1, #9
 801f90e:	4621      	mov	r1, r4
 801f910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801f914:	4621      	mov	r1, r4
 801f916:	024a      	lsls	r2, r1, #9
 801f918:	4610      	mov	r0, r2
 801f91a:	4619      	mov	r1, r3
 801f91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f91e:	2200      	movs	r2, #0
 801f920:	62bb      	str	r3, [r7, #40]	; 0x28
 801f922:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801f928:	f7e1 fab4 	bl	8000e94 <__aeabi_uldivmod>
 801f92c:	4602      	mov	r2, r0
 801f92e:	460b      	mov	r3, r1
 801f930:	4613      	mov	r3, r2
 801f932:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f934:	e058      	b.n	801f9e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801f936:	4b38      	ldr	r3, [pc, #224]	; (801fa18 <HAL_RCC_GetSysClockFreq+0x200>)
 801f938:	685b      	ldr	r3, [r3, #4]
 801f93a:	099b      	lsrs	r3, r3, #6
 801f93c:	2200      	movs	r2, #0
 801f93e:	4618      	mov	r0, r3
 801f940:	4611      	mov	r1, r2
 801f942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801f946:	623b      	str	r3, [r7, #32]
 801f948:	2300      	movs	r3, #0
 801f94a:	627b      	str	r3, [r7, #36]	; 0x24
 801f94c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801f950:	4642      	mov	r2, r8
 801f952:	464b      	mov	r3, r9
 801f954:	f04f 0000 	mov.w	r0, #0
 801f958:	f04f 0100 	mov.w	r1, #0
 801f95c:	0159      	lsls	r1, r3, #5
 801f95e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801f962:	0150      	lsls	r0, r2, #5
 801f964:	4602      	mov	r2, r0
 801f966:	460b      	mov	r3, r1
 801f968:	4641      	mov	r1, r8
 801f96a:	ebb2 0a01 	subs.w	sl, r2, r1
 801f96e:	4649      	mov	r1, r9
 801f970:	eb63 0b01 	sbc.w	fp, r3, r1
 801f974:	f04f 0200 	mov.w	r2, #0
 801f978:	f04f 0300 	mov.w	r3, #0
 801f97c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801f980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801f984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801f988:	ebb2 040a 	subs.w	r4, r2, sl
 801f98c:	eb63 050b 	sbc.w	r5, r3, fp
 801f990:	f04f 0200 	mov.w	r2, #0
 801f994:	f04f 0300 	mov.w	r3, #0
 801f998:	00eb      	lsls	r3, r5, #3
 801f99a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801f99e:	00e2      	lsls	r2, r4, #3
 801f9a0:	4614      	mov	r4, r2
 801f9a2:	461d      	mov	r5, r3
 801f9a4:	4643      	mov	r3, r8
 801f9a6:	18e3      	adds	r3, r4, r3
 801f9a8:	603b      	str	r3, [r7, #0]
 801f9aa:	464b      	mov	r3, r9
 801f9ac:	eb45 0303 	adc.w	r3, r5, r3
 801f9b0:	607b      	str	r3, [r7, #4]
 801f9b2:	f04f 0200 	mov.w	r2, #0
 801f9b6:	f04f 0300 	mov.w	r3, #0
 801f9ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 801f9be:	4629      	mov	r1, r5
 801f9c0:	028b      	lsls	r3, r1, #10
 801f9c2:	4621      	mov	r1, r4
 801f9c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801f9c8:	4621      	mov	r1, r4
 801f9ca:	028a      	lsls	r2, r1, #10
 801f9cc:	4610      	mov	r0, r2
 801f9ce:	4619      	mov	r1, r3
 801f9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f9d2:	2200      	movs	r2, #0
 801f9d4:	61bb      	str	r3, [r7, #24]
 801f9d6:	61fa      	str	r2, [r7, #28]
 801f9d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801f9dc:	f7e1 fa5a 	bl	8000e94 <__aeabi_uldivmod>
 801f9e0:	4602      	mov	r2, r0
 801f9e2:	460b      	mov	r3, r1
 801f9e4:	4613      	mov	r3, r2
 801f9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801f9e8:	4b0b      	ldr	r3, [pc, #44]	; (801fa18 <HAL_RCC_GetSysClockFreq+0x200>)
 801f9ea:	685b      	ldr	r3, [r3, #4]
 801f9ec:	0c1b      	lsrs	r3, r3, #16
 801f9ee:	f003 0303 	and.w	r3, r3, #3
 801f9f2:	3301      	adds	r3, #1
 801f9f4:	005b      	lsls	r3, r3, #1
 801f9f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801f9f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 801fa00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801fa02:	e002      	b.n	801fa0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801fa04:	4b05      	ldr	r3, [pc, #20]	; (801fa1c <HAL_RCC_GetSysClockFreq+0x204>)
 801fa06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801fa08:	bf00      	nop
    }
  }
  return sysclockfreq;
 801fa0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	3750      	adds	r7, #80	; 0x50
 801fa10:	46bd      	mov	sp, r7
 801fa12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801fa16:	bf00      	nop
 801fa18:	40023800 	.word	0x40023800
 801fa1c:	00f42400 	.word	0x00f42400
 801fa20:	007a1200 	.word	0x007a1200

0801fa24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fa24:	b480      	push	{r7}
 801fa26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801fa28:	4b03      	ldr	r3, [pc, #12]	; (801fa38 <HAL_RCC_GetHCLKFreq+0x14>)
 801fa2a:	681b      	ldr	r3, [r3, #0]
}
 801fa2c:	4618      	mov	r0, r3
 801fa2e:	46bd      	mov	sp, r7
 801fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa34:	4770      	bx	lr
 801fa36:	bf00      	nop
 801fa38:	20000020 	.word	0x20000020

0801fa3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fa3c:	b580      	push	{r7, lr}
 801fa3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801fa40:	f7ff fff0 	bl	801fa24 <HAL_RCC_GetHCLKFreq>
 801fa44:	4602      	mov	r2, r0
 801fa46:	4b05      	ldr	r3, [pc, #20]	; (801fa5c <HAL_RCC_GetPCLK1Freq+0x20>)
 801fa48:	689b      	ldr	r3, [r3, #8]
 801fa4a:	0a9b      	lsrs	r3, r3, #10
 801fa4c:	f003 0307 	and.w	r3, r3, #7
 801fa50:	4903      	ldr	r1, [pc, #12]	; (801fa60 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fa52:	5ccb      	ldrb	r3, [r1, r3]
 801fa54:	fa22 f303 	lsr.w	r3, r2, r3
}
 801fa58:	4618      	mov	r0, r3
 801fa5a:	bd80      	pop	{r7, pc}
 801fa5c:	40023800 	.word	0x40023800
 801fa60:	08026c80 	.word	0x08026c80

0801fa64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fa64:	b580      	push	{r7, lr}
 801fa66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801fa68:	f7ff ffdc 	bl	801fa24 <HAL_RCC_GetHCLKFreq>
 801fa6c:	4602      	mov	r2, r0
 801fa6e:	4b05      	ldr	r3, [pc, #20]	; (801fa84 <HAL_RCC_GetPCLK2Freq+0x20>)
 801fa70:	689b      	ldr	r3, [r3, #8]
 801fa72:	0b5b      	lsrs	r3, r3, #13
 801fa74:	f003 0307 	and.w	r3, r3, #7
 801fa78:	4903      	ldr	r1, [pc, #12]	; (801fa88 <HAL_RCC_GetPCLK2Freq+0x24>)
 801fa7a:	5ccb      	ldrb	r3, [r1, r3]
 801fa7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801fa80:	4618      	mov	r0, r3
 801fa82:	bd80      	pop	{r7, pc}
 801fa84:	40023800 	.word	0x40023800
 801fa88:	08026c80 	.word	0x08026c80

0801fa8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fa8c:	b580      	push	{r7, lr}
 801fa8e:	b082      	sub	sp, #8
 801fa90:	af00      	add	r7, sp, #0
 801fa92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d101      	bne.n	801fa9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fa9a:	2301      	movs	r3, #1
 801fa9c:	e041      	b.n	801fb22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801faa4:	b2db      	uxtb	r3, r3
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d106      	bne.n	801fab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	2200      	movs	r2, #0
 801faae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	f7e3 fe66 	bl	8003784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	2202      	movs	r2, #2
 801fabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	681a      	ldr	r2, [r3, #0]
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	3304      	adds	r3, #4
 801fac8:	4619      	mov	r1, r3
 801faca:	4610      	mov	r0, r2
 801facc:	f000 fd14 	bl	80204f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	2201      	movs	r2, #1
 801fad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	2201      	movs	r2, #1
 801fadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	2201      	movs	r2, #1
 801fae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	2201      	movs	r2, #1
 801faec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	2201      	movs	r2, #1
 801faf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	2201      	movs	r2, #1
 801fafc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	2201      	movs	r2, #1
 801fb04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fb08:	687b      	ldr	r3, [r7, #4]
 801fb0a:	2201      	movs	r2, #1
 801fb0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	2201      	movs	r2, #1
 801fb14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	2201      	movs	r2, #1
 801fb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fb20:	2300      	movs	r3, #0
}
 801fb22:	4618      	mov	r0, r3
 801fb24:	3708      	adds	r7, #8
 801fb26:	46bd      	mov	sp, r7
 801fb28:	bd80      	pop	{r7, pc}

0801fb2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fb2a:	b580      	push	{r7, lr}
 801fb2c:	b082      	sub	sp, #8
 801fb2e:	af00      	add	r7, sp, #0
 801fb30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	d101      	bne.n	801fb3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fb38:	2301      	movs	r3, #1
 801fb3a:	e041      	b.n	801fbc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fb42:	b2db      	uxtb	r3, r3
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d106      	bne.n	801fb56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	2200      	movs	r2, #0
 801fb4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fb50:	6878      	ldr	r0, [r7, #4]
 801fb52:	f000 f839 	bl	801fbc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	2202      	movs	r2, #2
 801fb5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	681a      	ldr	r2, [r3, #0]
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	3304      	adds	r3, #4
 801fb66:	4619      	mov	r1, r3
 801fb68:	4610      	mov	r0, r2
 801fb6a:	f000 fcc5 	bl	80204f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	2201      	movs	r2, #1
 801fb72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	2201      	movs	r2, #1
 801fb7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	2201      	movs	r2, #1
 801fb82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	2201      	movs	r2, #1
 801fb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	2201      	movs	r2, #1
 801fb92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	2201      	movs	r2, #1
 801fb9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	2201      	movs	r2, #1
 801fba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	2201      	movs	r2, #1
 801fbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	2201      	movs	r2, #1
 801fbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	2201      	movs	r2, #1
 801fbba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fbbe:	2300      	movs	r3, #0
}
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	3708      	adds	r7, #8
 801fbc4:	46bd      	mov	sp, r7
 801fbc6:	bd80      	pop	{r7, pc}

0801fbc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fbc8:	b480      	push	{r7}
 801fbca:	b083      	sub	sp, #12
 801fbcc:	af00      	add	r7, sp, #0
 801fbce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fbd0:	bf00      	nop
 801fbd2:	370c      	adds	r7, #12
 801fbd4:	46bd      	mov	sp, r7
 801fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbda:	4770      	bx	lr

0801fbdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fbdc:	b580      	push	{r7, lr}
 801fbde:	b084      	sub	sp, #16
 801fbe0:	af00      	add	r7, sp, #0
 801fbe2:	6078      	str	r0, [r7, #4]
 801fbe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801fbe6:	683b      	ldr	r3, [r7, #0]
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	d109      	bne.n	801fc00 <HAL_TIM_PWM_Start+0x24>
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fbf2:	b2db      	uxtb	r3, r3
 801fbf4:	2b01      	cmp	r3, #1
 801fbf6:	bf14      	ite	ne
 801fbf8:	2301      	movne	r3, #1
 801fbfa:	2300      	moveq	r3, #0
 801fbfc:	b2db      	uxtb	r3, r3
 801fbfe:	e022      	b.n	801fc46 <HAL_TIM_PWM_Start+0x6a>
 801fc00:	683b      	ldr	r3, [r7, #0]
 801fc02:	2b04      	cmp	r3, #4
 801fc04:	d109      	bne.n	801fc1a <HAL_TIM_PWM_Start+0x3e>
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801fc0c:	b2db      	uxtb	r3, r3
 801fc0e:	2b01      	cmp	r3, #1
 801fc10:	bf14      	ite	ne
 801fc12:	2301      	movne	r3, #1
 801fc14:	2300      	moveq	r3, #0
 801fc16:	b2db      	uxtb	r3, r3
 801fc18:	e015      	b.n	801fc46 <HAL_TIM_PWM_Start+0x6a>
 801fc1a:	683b      	ldr	r3, [r7, #0]
 801fc1c:	2b08      	cmp	r3, #8
 801fc1e:	d109      	bne.n	801fc34 <HAL_TIM_PWM_Start+0x58>
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fc26:	b2db      	uxtb	r3, r3
 801fc28:	2b01      	cmp	r3, #1
 801fc2a:	bf14      	ite	ne
 801fc2c:	2301      	movne	r3, #1
 801fc2e:	2300      	moveq	r3, #0
 801fc30:	b2db      	uxtb	r3, r3
 801fc32:	e008      	b.n	801fc46 <HAL_TIM_PWM_Start+0x6a>
 801fc34:	687b      	ldr	r3, [r7, #4]
 801fc36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fc3a:	b2db      	uxtb	r3, r3
 801fc3c:	2b01      	cmp	r3, #1
 801fc3e:	bf14      	ite	ne
 801fc40:	2301      	movne	r3, #1
 801fc42:	2300      	moveq	r3, #0
 801fc44:	b2db      	uxtb	r3, r3
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d001      	beq.n	801fc4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801fc4a:	2301      	movs	r3, #1
 801fc4c:	e068      	b.n	801fd20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fc4e:	683b      	ldr	r3, [r7, #0]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d104      	bne.n	801fc5e <HAL_TIM_PWM_Start+0x82>
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	2202      	movs	r2, #2
 801fc58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fc5c:	e013      	b.n	801fc86 <HAL_TIM_PWM_Start+0xaa>
 801fc5e:	683b      	ldr	r3, [r7, #0]
 801fc60:	2b04      	cmp	r3, #4
 801fc62:	d104      	bne.n	801fc6e <HAL_TIM_PWM_Start+0x92>
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	2202      	movs	r2, #2
 801fc68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fc6c:	e00b      	b.n	801fc86 <HAL_TIM_PWM_Start+0xaa>
 801fc6e:	683b      	ldr	r3, [r7, #0]
 801fc70:	2b08      	cmp	r3, #8
 801fc72:	d104      	bne.n	801fc7e <HAL_TIM_PWM_Start+0xa2>
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	2202      	movs	r2, #2
 801fc78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fc7c:	e003      	b.n	801fc86 <HAL_TIM_PWM_Start+0xaa>
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	2202      	movs	r2, #2
 801fc82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	681b      	ldr	r3, [r3, #0]
 801fc8a:	2201      	movs	r2, #1
 801fc8c:	6839      	ldr	r1, [r7, #0]
 801fc8e:	4618      	mov	r0, r3
 801fc90:	f000 fed8 	bl	8020a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	4a23      	ldr	r2, [pc, #140]	; (801fd28 <HAL_TIM_PWM_Start+0x14c>)
 801fc9a:	4293      	cmp	r3, r2
 801fc9c:	d107      	bne.n	801fcae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	681b      	ldr	r3, [r3, #0]
 801fca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801fcac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	4a1d      	ldr	r2, [pc, #116]	; (801fd28 <HAL_TIM_PWM_Start+0x14c>)
 801fcb4:	4293      	cmp	r3, r2
 801fcb6:	d018      	beq.n	801fcea <HAL_TIM_PWM_Start+0x10e>
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fcc0:	d013      	beq.n	801fcea <HAL_TIM_PWM_Start+0x10e>
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	4a19      	ldr	r2, [pc, #100]	; (801fd2c <HAL_TIM_PWM_Start+0x150>)
 801fcc8:	4293      	cmp	r3, r2
 801fcca:	d00e      	beq.n	801fcea <HAL_TIM_PWM_Start+0x10e>
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	4a17      	ldr	r2, [pc, #92]	; (801fd30 <HAL_TIM_PWM_Start+0x154>)
 801fcd2:	4293      	cmp	r3, r2
 801fcd4:	d009      	beq.n	801fcea <HAL_TIM_PWM_Start+0x10e>
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	681b      	ldr	r3, [r3, #0]
 801fcda:	4a16      	ldr	r2, [pc, #88]	; (801fd34 <HAL_TIM_PWM_Start+0x158>)
 801fcdc:	4293      	cmp	r3, r2
 801fcde:	d004      	beq.n	801fcea <HAL_TIM_PWM_Start+0x10e>
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	4a14      	ldr	r2, [pc, #80]	; (801fd38 <HAL_TIM_PWM_Start+0x15c>)
 801fce6:	4293      	cmp	r3, r2
 801fce8:	d111      	bne.n	801fd0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	689b      	ldr	r3, [r3, #8]
 801fcf0:	f003 0307 	and.w	r3, r3, #7
 801fcf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fcf6:	68fb      	ldr	r3, [r7, #12]
 801fcf8:	2b06      	cmp	r3, #6
 801fcfa:	d010      	beq.n	801fd1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801fcfc:	687b      	ldr	r3, [r7, #4]
 801fcfe:	681b      	ldr	r3, [r3, #0]
 801fd00:	681a      	ldr	r2, [r3, #0]
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	f042 0201 	orr.w	r2, r2, #1
 801fd0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fd0c:	e007      	b.n	801fd1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	681a      	ldr	r2, [r3, #0]
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	f042 0201 	orr.w	r2, r2, #1
 801fd1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801fd1e:	2300      	movs	r3, #0
}
 801fd20:	4618      	mov	r0, r3
 801fd22:	3710      	adds	r7, #16
 801fd24:	46bd      	mov	sp, r7
 801fd26:	bd80      	pop	{r7, pc}
 801fd28:	40010000 	.word	0x40010000
 801fd2c:	40000400 	.word	0x40000400
 801fd30:	40000800 	.word	0x40000800
 801fd34:	40000c00 	.word	0x40000c00
 801fd38:	40014000 	.word	0x40014000

0801fd3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fd3c:	b580      	push	{r7, lr}
 801fd3e:	b084      	sub	sp, #16
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	6078      	str	r0, [r7, #4]
 801fd44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fd46:	2300      	movs	r3, #0
 801fd48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801fd4a:	683b      	ldr	r3, [r7, #0]
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	d104      	bne.n	801fd5a <HAL_TIM_IC_Start_IT+0x1e>
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fd56:	b2db      	uxtb	r3, r3
 801fd58:	e013      	b.n	801fd82 <HAL_TIM_IC_Start_IT+0x46>
 801fd5a:	683b      	ldr	r3, [r7, #0]
 801fd5c:	2b04      	cmp	r3, #4
 801fd5e:	d104      	bne.n	801fd6a <HAL_TIM_IC_Start_IT+0x2e>
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801fd66:	b2db      	uxtb	r3, r3
 801fd68:	e00b      	b.n	801fd82 <HAL_TIM_IC_Start_IT+0x46>
 801fd6a:	683b      	ldr	r3, [r7, #0]
 801fd6c:	2b08      	cmp	r3, #8
 801fd6e:	d104      	bne.n	801fd7a <HAL_TIM_IC_Start_IT+0x3e>
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fd76:	b2db      	uxtb	r3, r3
 801fd78:	e003      	b.n	801fd82 <HAL_TIM_IC_Start_IT+0x46>
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fd80:	b2db      	uxtb	r3, r3
 801fd82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801fd84:	683b      	ldr	r3, [r7, #0]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d104      	bne.n	801fd94 <HAL_TIM_IC_Start_IT+0x58>
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801fd90:	b2db      	uxtb	r3, r3
 801fd92:	e013      	b.n	801fdbc <HAL_TIM_IC_Start_IT+0x80>
 801fd94:	683b      	ldr	r3, [r7, #0]
 801fd96:	2b04      	cmp	r3, #4
 801fd98:	d104      	bne.n	801fda4 <HAL_TIM_IC_Start_IT+0x68>
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fda0:	b2db      	uxtb	r3, r3
 801fda2:	e00b      	b.n	801fdbc <HAL_TIM_IC_Start_IT+0x80>
 801fda4:	683b      	ldr	r3, [r7, #0]
 801fda6:	2b08      	cmp	r3, #8
 801fda8:	d104      	bne.n	801fdb4 <HAL_TIM_IC_Start_IT+0x78>
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fdb0:	b2db      	uxtb	r3, r3
 801fdb2:	e003      	b.n	801fdbc <HAL_TIM_IC_Start_IT+0x80>
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fdba:	b2db      	uxtb	r3, r3
 801fdbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801fdbe:	7bbb      	ldrb	r3, [r7, #14]
 801fdc0:	2b01      	cmp	r3, #1
 801fdc2:	d102      	bne.n	801fdca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801fdc4:	7b7b      	ldrb	r3, [r7, #13]
 801fdc6:	2b01      	cmp	r3, #1
 801fdc8:	d001      	beq.n	801fdce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 801fdca:	2301      	movs	r3, #1
 801fdcc:	e0c2      	b.n	801ff54 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fdce:	683b      	ldr	r3, [r7, #0]
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	d104      	bne.n	801fdde <HAL_TIM_IC_Start_IT+0xa2>
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	2202      	movs	r2, #2
 801fdd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fddc:	e013      	b.n	801fe06 <HAL_TIM_IC_Start_IT+0xca>
 801fdde:	683b      	ldr	r3, [r7, #0]
 801fde0:	2b04      	cmp	r3, #4
 801fde2:	d104      	bne.n	801fdee <HAL_TIM_IC_Start_IT+0xb2>
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	2202      	movs	r2, #2
 801fde8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fdec:	e00b      	b.n	801fe06 <HAL_TIM_IC_Start_IT+0xca>
 801fdee:	683b      	ldr	r3, [r7, #0]
 801fdf0:	2b08      	cmp	r3, #8
 801fdf2:	d104      	bne.n	801fdfe <HAL_TIM_IC_Start_IT+0xc2>
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	2202      	movs	r2, #2
 801fdf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fdfc:	e003      	b.n	801fe06 <HAL_TIM_IC_Start_IT+0xca>
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	2202      	movs	r2, #2
 801fe02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d104      	bne.n	801fe16 <HAL_TIM_IC_Start_IT+0xda>
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	2202      	movs	r2, #2
 801fe10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fe14:	e013      	b.n	801fe3e <HAL_TIM_IC_Start_IT+0x102>
 801fe16:	683b      	ldr	r3, [r7, #0]
 801fe18:	2b04      	cmp	r3, #4
 801fe1a:	d104      	bne.n	801fe26 <HAL_TIM_IC_Start_IT+0xea>
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	2202      	movs	r2, #2
 801fe20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fe24:	e00b      	b.n	801fe3e <HAL_TIM_IC_Start_IT+0x102>
 801fe26:	683b      	ldr	r3, [r7, #0]
 801fe28:	2b08      	cmp	r3, #8
 801fe2a:	d104      	bne.n	801fe36 <HAL_TIM_IC_Start_IT+0xfa>
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	2202      	movs	r2, #2
 801fe30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fe34:	e003      	b.n	801fe3e <HAL_TIM_IC_Start_IT+0x102>
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	2202      	movs	r2, #2
 801fe3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	2b0c      	cmp	r3, #12
 801fe42:	d841      	bhi.n	801fec8 <HAL_TIM_IC_Start_IT+0x18c>
 801fe44:	a201      	add	r2, pc, #4	; (adr r2, 801fe4c <HAL_TIM_IC_Start_IT+0x110>)
 801fe46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe4a:	bf00      	nop
 801fe4c:	0801fe81 	.word	0x0801fe81
 801fe50:	0801fec9 	.word	0x0801fec9
 801fe54:	0801fec9 	.word	0x0801fec9
 801fe58:	0801fec9 	.word	0x0801fec9
 801fe5c:	0801fe93 	.word	0x0801fe93
 801fe60:	0801fec9 	.word	0x0801fec9
 801fe64:	0801fec9 	.word	0x0801fec9
 801fe68:	0801fec9 	.word	0x0801fec9
 801fe6c:	0801fea5 	.word	0x0801fea5
 801fe70:	0801fec9 	.word	0x0801fec9
 801fe74:	0801fec9 	.word	0x0801fec9
 801fe78:	0801fec9 	.word	0x0801fec9
 801fe7c:	0801feb7 	.word	0x0801feb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801fe80:	687b      	ldr	r3, [r7, #4]
 801fe82:	681b      	ldr	r3, [r3, #0]
 801fe84:	68da      	ldr	r2, [r3, #12]
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	f042 0202 	orr.w	r2, r2, #2
 801fe8e:	60da      	str	r2, [r3, #12]
      break;
 801fe90:	e01d      	b.n	801fece <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	68da      	ldr	r2, [r3, #12]
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	f042 0204 	orr.w	r2, r2, #4
 801fea0:	60da      	str	r2, [r3, #12]
      break;
 801fea2:	e014      	b.n	801fece <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	681b      	ldr	r3, [r3, #0]
 801fea8:	68da      	ldr	r2, [r3, #12]
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	f042 0208 	orr.w	r2, r2, #8
 801feb2:	60da      	str	r2, [r3, #12]
      break;
 801feb4:	e00b      	b.n	801fece <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	68da      	ldr	r2, [r3, #12]
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	f042 0210 	orr.w	r2, r2, #16
 801fec4:	60da      	str	r2, [r3, #12]
      break;
 801fec6:	e002      	b.n	801fece <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 801fec8:	2301      	movs	r3, #1
 801feca:	73fb      	strb	r3, [r7, #15]
      break;
 801fecc:	bf00      	nop
  }

  if (status == HAL_OK)
 801fece:	7bfb      	ldrb	r3, [r7, #15]
 801fed0:	2b00      	cmp	r3, #0
 801fed2:	d13e      	bne.n	801ff52 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	681b      	ldr	r3, [r3, #0]
 801fed8:	2201      	movs	r2, #1
 801feda:	6839      	ldr	r1, [r7, #0]
 801fedc:	4618      	mov	r0, r3
 801fede:	f000 fdb1 	bl	8020a44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	4a1d      	ldr	r2, [pc, #116]	; (801ff5c <HAL_TIM_IC_Start_IT+0x220>)
 801fee8:	4293      	cmp	r3, r2
 801feea:	d018      	beq.n	801ff1e <HAL_TIM_IC_Start_IT+0x1e2>
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fef4:	d013      	beq.n	801ff1e <HAL_TIM_IC_Start_IT+0x1e2>
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	4a19      	ldr	r2, [pc, #100]	; (801ff60 <HAL_TIM_IC_Start_IT+0x224>)
 801fefc:	4293      	cmp	r3, r2
 801fefe:	d00e      	beq.n	801ff1e <HAL_TIM_IC_Start_IT+0x1e2>
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	4a17      	ldr	r2, [pc, #92]	; (801ff64 <HAL_TIM_IC_Start_IT+0x228>)
 801ff06:	4293      	cmp	r3, r2
 801ff08:	d009      	beq.n	801ff1e <HAL_TIM_IC_Start_IT+0x1e2>
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	4a16      	ldr	r2, [pc, #88]	; (801ff68 <HAL_TIM_IC_Start_IT+0x22c>)
 801ff10:	4293      	cmp	r3, r2
 801ff12:	d004      	beq.n	801ff1e <HAL_TIM_IC_Start_IT+0x1e2>
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	4a14      	ldr	r2, [pc, #80]	; (801ff6c <HAL_TIM_IC_Start_IT+0x230>)
 801ff1a:	4293      	cmp	r3, r2
 801ff1c:	d111      	bne.n	801ff42 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	689b      	ldr	r3, [r3, #8]
 801ff24:	f003 0307 	and.w	r3, r3, #7
 801ff28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ff2a:	68bb      	ldr	r3, [r7, #8]
 801ff2c:	2b06      	cmp	r3, #6
 801ff2e:	d010      	beq.n	801ff52 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	681a      	ldr	r2, [r3, #0]
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	f042 0201 	orr.w	r2, r2, #1
 801ff3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ff40:	e007      	b.n	801ff52 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	681a      	ldr	r2, [r3, #0]
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	f042 0201 	orr.w	r2, r2, #1
 801ff50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 801ff52:	7bfb      	ldrb	r3, [r7, #15]
}
 801ff54:	4618      	mov	r0, r3
 801ff56:	3710      	adds	r7, #16
 801ff58:	46bd      	mov	sp, r7
 801ff5a:	bd80      	pop	{r7, pc}
 801ff5c:	40010000 	.word	0x40010000
 801ff60:	40000400 	.word	0x40000400
 801ff64:	40000800 	.word	0x40000800
 801ff68:	40000c00 	.word	0x40000c00
 801ff6c:	40014000 	.word	0x40014000

0801ff70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ff70:	b580      	push	{r7, lr}
 801ff72:	b082      	sub	sp, #8
 801ff74:	af00      	add	r7, sp, #0
 801ff76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	691b      	ldr	r3, [r3, #16]
 801ff7e:	f003 0302 	and.w	r3, r3, #2
 801ff82:	2b02      	cmp	r3, #2
 801ff84:	d122      	bne.n	801ffcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	68db      	ldr	r3, [r3, #12]
 801ff8c:	f003 0302 	and.w	r3, r3, #2
 801ff90:	2b02      	cmp	r3, #2
 801ff92:	d11b      	bne.n	801ffcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	f06f 0202 	mvn.w	r2, #2
 801ff9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	2201      	movs	r2, #1
 801ffa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	681b      	ldr	r3, [r3, #0]
 801ffa8:	699b      	ldr	r3, [r3, #24]
 801ffaa:	f003 0303 	and.w	r3, r3, #3
 801ffae:	2b00      	cmp	r3, #0
 801ffb0:	d003      	beq.n	801ffba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ffb2:	6878      	ldr	r0, [r7, #4]
 801ffb4:	f000 fa81 	bl	80204ba <HAL_TIM_IC_CaptureCallback>
 801ffb8:	e005      	b.n	801ffc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ffba:	6878      	ldr	r0, [r7, #4]
 801ffbc:	f000 fa73 	bl	80204a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ffc0:	6878      	ldr	r0, [r7, #4]
 801ffc2:	f000 fa84 	bl	80204ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	2200      	movs	r2, #0
 801ffca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	691b      	ldr	r3, [r3, #16]
 801ffd2:	f003 0304 	and.w	r3, r3, #4
 801ffd6:	2b04      	cmp	r3, #4
 801ffd8:	d122      	bne.n	8020020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	68db      	ldr	r3, [r3, #12]
 801ffe0:	f003 0304 	and.w	r3, r3, #4
 801ffe4:	2b04      	cmp	r3, #4
 801ffe6:	d11b      	bne.n	8020020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ffe8:	687b      	ldr	r3, [r7, #4]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	f06f 0204 	mvn.w	r2, #4
 801fff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	2202      	movs	r2, #2
 801fff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	699b      	ldr	r3, [r3, #24]
 801fffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020002:	2b00      	cmp	r3, #0
 8020004:	d003      	beq.n	802000e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020006:	6878      	ldr	r0, [r7, #4]
 8020008:	f000 fa57 	bl	80204ba <HAL_TIM_IC_CaptureCallback>
 802000c:	e005      	b.n	802001a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802000e:	6878      	ldr	r0, [r7, #4]
 8020010:	f000 fa49 	bl	80204a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020014:	6878      	ldr	r0, [r7, #4]
 8020016:	f000 fa5a 	bl	80204ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	2200      	movs	r2, #0
 802001e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	691b      	ldr	r3, [r3, #16]
 8020026:	f003 0308 	and.w	r3, r3, #8
 802002a:	2b08      	cmp	r3, #8
 802002c:	d122      	bne.n	8020074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	68db      	ldr	r3, [r3, #12]
 8020034:	f003 0308 	and.w	r3, r3, #8
 8020038:	2b08      	cmp	r3, #8
 802003a:	d11b      	bne.n	8020074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	f06f 0208 	mvn.w	r2, #8
 8020044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	2204      	movs	r2, #4
 802004a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802004c:	687b      	ldr	r3, [r7, #4]
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	69db      	ldr	r3, [r3, #28]
 8020052:	f003 0303 	and.w	r3, r3, #3
 8020056:	2b00      	cmp	r3, #0
 8020058:	d003      	beq.n	8020062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802005a:	6878      	ldr	r0, [r7, #4]
 802005c:	f000 fa2d 	bl	80204ba <HAL_TIM_IC_CaptureCallback>
 8020060:	e005      	b.n	802006e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020062:	6878      	ldr	r0, [r7, #4]
 8020064:	f000 fa1f 	bl	80204a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020068:	6878      	ldr	r0, [r7, #4]
 802006a:	f000 fa30 	bl	80204ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	2200      	movs	r2, #0
 8020072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	691b      	ldr	r3, [r3, #16]
 802007a:	f003 0310 	and.w	r3, r3, #16
 802007e:	2b10      	cmp	r3, #16
 8020080:	d122      	bne.n	80200c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	68db      	ldr	r3, [r3, #12]
 8020088:	f003 0310 	and.w	r3, r3, #16
 802008c:	2b10      	cmp	r3, #16
 802008e:	d11b      	bne.n	80200c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	f06f 0210 	mvn.w	r2, #16
 8020098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	2208      	movs	r2, #8
 802009e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	681b      	ldr	r3, [r3, #0]
 80200a4:	69db      	ldr	r3, [r3, #28]
 80200a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	d003      	beq.n	80200b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80200ae:	6878      	ldr	r0, [r7, #4]
 80200b0:	f000 fa03 	bl	80204ba <HAL_TIM_IC_CaptureCallback>
 80200b4:	e005      	b.n	80200c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80200b6:	6878      	ldr	r0, [r7, #4]
 80200b8:	f000 f9f5 	bl	80204a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80200bc:	6878      	ldr	r0, [r7, #4]
 80200be:	f000 fa06 	bl	80204ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	2200      	movs	r2, #0
 80200c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	691b      	ldr	r3, [r3, #16]
 80200ce:	f003 0301 	and.w	r3, r3, #1
 80200d2:	2b01      	cmp	r3, #1
 80200d4:	d10e      	bne.n	80200f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	68db      	ldr	r3, [r3, #12]
 80200dc:	f003 0301 	and.w	r3, r3, #1
 80200e0:	2b01      	cmp	r3, #1
 80200e2:	d107      	bne.n	80200f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	f06f 0201 	mvn.w	r2, #1
 80200ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80200ee:	6878      	ldr	r0, [r7, #4]
 80200f0:	f000 f9cf 	bl	8020492 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80200f4:	687b      	ldr	r3, [r7, #4]
 80200f6:	681b      	ldr	r3, [r3, #0]
 80200f8:	691b      	ldr	r3, [r3, #16]
 80200fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80200fe:	2b80      	cmp	r3, #128	; 0x80
 8020100:	d10e      	bne.n	8020120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	68db      	ldr	r3, [r3, #12]
 8020108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802010c:	2b80      	cmp	r3, #128	; 0x80
 802010e:	d107      	bne.n	8020120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802011a:	6878      	ldr	r0, [r7, #4]
 802011c:	f000 fd30 	bl	8020b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	691b      	ldr	r3, [r3, #16]
 8020126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802012a:	2b40      	cmp	r3, #64	; 0x40
 802012c:	d10e      	bne.n	802014c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	68db      	ldr	r3, [r3, #12]
 8020134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020138:	2b40      	cmp	r3, #64	; 0x40
 802013a:	d107      	bne.n	802014c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	681b      	ldr	r3, [r3, #0]
 8020140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8020144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8020146:	6878      	ldr	r0, [r7, #4]
 8020148:	f000 f9cb 	bl	80204e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	681b      	ldr	r3, [r3, #0]
 8020150:	691b      	ldr	r3, [r3, #16]
 8020152:	f003 0320 	and.w	r3, r3, #32
 8020156:	2b20      	cmp	r3, #32
 8020158:	d10e      	bne.n	8020178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	681b      	ldr	r3, [r3, #0]
 802015e:	68db      	ldr	r3, [r3, #12]
 8020160:	f003 0320 	and.w	r3, r3, #32
 8020164:	2b20      	cmp	r3, #32
 8020166:	d107      	bne.n	8020178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	f06f 0220 	mvn.w	r2, #32
 8020170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8020172:	6878      	ldr	r0, [r7, #4]
 8020174:	f000 fcfa 	bl	8020b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020178:	bf00      	nop
 802017a:	3708      	adds	r7, #8
 802017c:	46bd      	mov	sp, r7
 802017e:	bd80      	pop	{r7, pc}

08020180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8020180:	b580      	push	{r7, lr}
 8020182:	b086      	sub	sp, #24
 8020184:	af00      	add	r7, sp, #0
 8020186:	60f8      	str	r0, [r7, #12]
 8020188:	60b9      	str	r1, [r7, #8]
 802018a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802018c:	2300      	movs	r3, #0
 802018e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020196:	2b01      	cmp	r3, #1
 8020198:	d101      	bne.n	802019e <HAL_TIM_PWM_ConfigChannel+0x1e>
 802019a:	2302      	movs	r3, #2
 802019c:	e0ae      	b.n	80202fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 802019e:	68fb      	ldr	r3, [r7, #12]
 80201a0:	2201      	movs	r2, #1
 80201a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	2b0c      	cmp	r3, #12
 80201aa:	f200 809f 	bhi.w	80202ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80201ae:	a201      	add	r2, pc, #4	; (adr r2, 80201b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80201b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201b4:	080201e9 	.word	0x080201e9
 80201b8:	080202ed 	.word	0x080202ed
 80201bc:	080202ed 	.word	0x080202ed
 80201c0:	080202ed 	.word	0x080202ed
 80201c4:	08020229 	.word	0x08020229
 80201c8:	080202ed 	.word	0x080202ed
 80201cc:	080202ed 	.word	0x080202ed
 80201d0:	080202ed 	.word	0x080202ed
 80201d4:	0802026b 	.word	0x0802026b
 80201d8:	080202ed 	.word	0x080202ed
 80201dc:	080202ed 	.word	0x080202ed
 80201e0:	080202ed 	.word	0x080202ed
 80201e4:	080202ab 	.word	0x080202ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80201e8:	68fb      	ldr	r3, [r7, #12]
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	68b9      	ldr	r1, [r7, #8]
 80201ee:	4618      	mov	r0, r3
 80201f0:	f000 fa02 	bl	80205f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80201f4:	68fb      	ldr	r3, [r7, #12]
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	699a      	ldr	r2, [r3, #24]
 80201fa:	68fb      	ldr	r3, [r7, #12]
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	f042 0208 	orr.w	r2, r2, #8
 8020202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020204:	68fb      	ldr	r3, [r7, #12]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	699a      	ldr	r2, [r3, #24]
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	f022 0204 	bic.w	r2, r2, #4
 8020212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020214:	68fb      	ldr	r3, [r7, #12]
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	6999      	ldr	r1, [r3, #24]
 802021a:	68bb      	ldr	r3, [r7, #8]
 802021c:	691a      	ldr	r2, [r3, #16]
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	430a      	orrs	r2, r1
 8020224:	619a      	str	r2, [r3, #24]
      break;
 8020226:	e064      	b.n	80202f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020228:	68fb      	ldr	r3, [r7, #12]
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	68b9      	ldr	r1, [r7, #8]
 802022e:	4618      	mov	r0, r3
 8020230:	f000 fa48 	bl	80206c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020234:	68fb      	ldr	r3, [r7, #12]
 8020236:	681b      	ldr	r3, [r3, #0]
 8020238:	699a      	ldr	r2, [r3, #24]
 802023a:	68fb      	ldr	r3, [r7, #12]
 802023c:	681b      	ldr	r3, [r3, #0]
 802023e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020244:	68fb      	ldr	r3, [r7, #12]
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	699a      	ldr	r2, [r3, #24]
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020254:	68fb      	ldr	r3, [r7, #12]
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	6999      	ldr	r1, [r3, #24]
 802025a:	68bb      	ldr	r3, [r7, #8]
 802025c:	691b      	ldr	r3, [r3, #16]
 802025e:	021a      	lsls	r2, r3, #8
 8020260:	68fb      	ldr	r3, [r7, #12]
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	430a      	orrs	r2, r1
 8020266:	619a      	str	r2, [r3, #24]
      break;
 8020268:	e043      	b.n	80202f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	68b9      	ldr	r1, [r7, #8]
 8020270:	4618      	mov	r0, r3
 8020272:	f000 fa93 	bl	802079c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	69da      	ldr	r2, [r3, #28]
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	f042 0208 	orr.w	r2, r2, #8
 8020284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	69da      	ldr	r2, [r3, #28]
 802028c:	68fb      	ldr	r3, [r7, #12]
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	f022 0204 	bic.w	r2, r2, #4
 8020294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020296:	68fb      	ldr	r3, [r7, #12]
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	69d9      	ldr	r1, [r3, #28]
 802029c:	68bb      	ldr	r3, [r7, #8]
 802029e:	691a      	ldr	r2, [r3, #16]
 80202a0:	68fb      	ldr	r3, [r7, #12]
 80202a2:	681b      	ldr	r3, [r3, #0]
 80202a4:	430a      	orrs	r2, r1
 80202a6:	61da      	str	r2, [r3, #28]
      break;
 80202a8:	e023      	b.n	80202f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80202aa:	68fb      	ldr	r3, [r7, #12]
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	68b9      	ldr	r1, [r7, #8]
 80202b0:	4618      	mov	r0, r3
 80202b2:	f000 fadd 	bl	8020870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	69da      	ldr	r2, [r3, #28]
 80202bc:	68fb      	ldr	r3, [r7, #12]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80202c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80202c6:	68fb      	ldr	r3, [r7, #12]
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	69da      	ldr	r2, [r3, #28]
 80202cc:	68fb      	ldr	r3, [r7, #12]
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80202d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	69d9      	ldr	r1, [r3, #28]
 80202dc:	68bb      	ldr	r3, [r7, #8]
 80202de:	691b      	ldr	r3, [r3, #16]
 80202e0:	021a      	lsls	r2, r3, #8
 80202e2:	68fb      	ldr	r3, [r7, #12]
 80202e4:	681b      	ldr	r3, [r3, #0]
 80202e6:	430a      	orrs	r2, r1
 80202e8:	61da      	str	r2, [r3, #28]
      break;
 80202ea:	e002      	b.n	80202f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80202ec:	2301      	movs	r3, #1
 80202ee:	75fb      	strb	r3, [r7, #23]
      break;
 80202f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80202f2:	68fb      	ldr	r3, [r7, #12]
 80202f4:	2200      	movs	r2, #0
 80202f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80202fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80202fc:	4618      	mov	r0, r3
 80202fe:	3718      	adds	r7, #24
 8020300:	46bd      	mov	sp, r7
 8020302:	bd80      	pop	{r7, pc}

08020304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020304:	b580      	push	{r7, lr}
 8020306:	b084      	sub	sp, #16
 8020308:	af00      	add	r7, sp, #0
 802030a:	6078      	str	r0, [r7, #4]
 802030c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802030e:	2300      	movs	r3, #0
 8020310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020318:	2b01      	cmp	r3, #1
 802031a:	d101      	bne.n	8020320 <HAL_TIM_ConfigClockSource+0x1c>
 802031c:	2302      	movs	r3, #2
 802031e:	e0b4      	b.n	802048a <HAL_TIM_ConfigClockSource+0x186>
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	2201      	movs	r2, #1
 8020324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	2202      	movs	r2, #2
 802032c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	689b      	ldr	r3, [r3, #8]
 8020336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020338:	68bb      	ldr	r3, [r7, #8]
 802033a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802033e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020340:	68bb      	ldr	r3, [r7, #8]
 8020342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	68ba      	ldr	r2, [r7, #8]
 802034e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020350:	683b      	ldr	r3, [r7, #0]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020358:	d03e      	beq.n	80203d8 <HAL_TIM_ConfigClockSource+0xd4>
 802035a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802035e:	f200 8087 	bhi.w	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020366:	f000 8086 	beq.w	8020476 <HAL_TIM_ConfigClockSource+0x172>
 802036a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802036e:	d87f      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020370:	2b70      	cmp	r3, #112	; 0x70
 8020372:	d01a      	beq.n	80203aa <HAL_TIM_ConfigClockSource+0xa6>
 8020374:	2b70      	cmp	r3, #112	; 0x70
 8020376:	d87b      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020378:	2b60      	cmp	r3, #96	; 0x60
 802037a:	d050      	beq.n	802041e <HAL_TIM_ConfigClockSource+0x11a>
 802037c:	2b60      	cmp	r3, #96	; 0x60
 802037e:	d877      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020380:	2b50      	cmp	r3, #80	; 0x50
 8020382:	d03c      	beq.n	80203fe <HAL_TIM_ConfigClockSource+0xfa>
 8020384:	2b50      	cmp	r3, #80	; 0x50
 8020386:	d873      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020388:	2b40      	cmp	r3, #64	; 0x40
 802038a:	d058      	beq.n	802043e <HAL_TIM_ConfigClockSource+0x13a>
 802038c:	2b40      	cmp	r3, #64	; 0x40
 802038e:	d86f      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020390:	2b30      	cmp	r3, #48	; 0x30
 8020392:	d064      	beq.n	802045e <HAL_TIM_ConfigClockSource+0x15a>
 8020394:	2b30      	cmp	r3, #48	; 0x30
 8020396:	d86b      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 8020398:	2b20      	cmp	r3, #32
 802039a:	d060      	beq.n	802045e <HAL_TIM_ConfigClockSource+0x15a>
 802039c:	2b20      	cmp	r3, #32
 802039e:	d867      	bhi.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d05c      	beq.n	802045e <HAL_TIM_ConfigClockSource+0x15a>
 80203a4:	2b10      	cmp	r3, #16
 80203a6:	d05a      	beq.n	802045e <HAL_TIM_ConfigClockSource+0x15a>
 80203a8:	e062      	b.n	8020470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	6818      	ldr	r0, [r3, #0]
 80203ae:	683b      	ldr	r3, [r7, #0]
 80203b0:	6899      	ldr	r1, [r3, #8]
 80203b2:	683b      	ldr	r3, [r7, #0]
 80203b4:	685a      	ldr	r2, [r3, #4]
 80203b6:	683b      	ldr	r3, [r7, #0]
 80203b8:	68db      	ldr	r3, [r3, #12]
 80203ba:	f000 fb23 	bl	8020a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	681b      	ldr	r3, [r3, #0]
 80203c2:	689b      	ldr	r3, [r3, #8]
 80203c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80203c6:	68bb      	ldr	r3, [r7, #8]
 80203c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80203cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	68ba      	ldr	r2, [r7, #8]
 80203d4:	609a      	str	r2, [r3, #8]
      break;
 80203d6:	e04f      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	6818      	ldr	r0, [r3, #0]
 80203dc:	683b      	ldr	r3, [r7, #0]
 80203de:	6899      	ldr	r1, [r3, #8]
 80203e0:	683b      	ldr	r3, [r7, #0]
 80203e2:	685a      	ldr	r2, [r3, #4]
 80203e4:	683b      	ldr	r3, [r7, #0]
 80203e6:	68db      	ldr	r3, [r3, #12]
 80203e8:	f000 fb0c 	bl	8020a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	689a      	ldr	r2, [r3, #8]
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80203fa:	609a      	str	r2, [r3, #8]
      break;
 80203fc:	e03c      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	6818      	ldr	r0, [r3, #0]
 8020402:	683b      	ldr	r3, [r7, #0]
 8020404:	6859      	ldr	r1, [r3, #4]
 8020406:	683b      	ldr	r3, [r7, #0]
 8020408:	68db      	ldr	r3, [r3, #12]
 802040a:	461a      	mov	r2, r3
 802040c:	f000 fa80 	bl	8020910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	2150      	movs	r1, #80	; 0x50
 8020416:	4618      	mov	r0, r3
 8020418:	f000 fad9 	bl	80209ce <TIM_ITRx_SetConfig>
      break;
 802041c:	e02c      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	6818      	ldr	r0, [r3, #0]
 8020422:	683b      	ldr	r3, [r7, #0]
 8020424:	6859      	ldr	r1, [r3, #4]
 8020426:	683b      	ldr	r3, [r7, #0]
 8020428:	68db      	ldr	r3, [r3, #12]
 802042a:	461a      	mov	r2, r3
 802042c:	f000 fa9f 	bl	802096e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	2160      	movs	r1, #96	; 0x60
 8020436:	4618      	mov	r0, r3
 8020438:	f000 fac9 	bl	80209ce <TIM_ITRx_SetConfig>
      break;
 802043c:	e01c      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	6818      	ldr	r0, [r3, #0]
 8020442:	683b      	ldr	r3, [r7, #0]
 8020444:	6859      	ldr	r1, [r3, #4]
 8020446:	683b      	ldr	r3, [r7, #0]
 8020448:	68db      	ldr	r3, [r3, #12]
 802044a:	461a      	mov	r2, r3
 802044c:	f000 fa60 	bl	8020910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	2140      	movs	r1, #64	; 0x40
 8020456:	4618      	mov	r0, r3
 8020458:	f000 fab9 	bl	80209ce <TIM_ITRx_SetConfig>
      break;
 802045c:	e00c      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	681a      	ldr	r2, [r3, #0]
 8020462:	683b      	ldr	r3, [r7, #0]
 8020464:	681b      	ldr	r3, [r3, #0]
 8020466:	4619      	mov	r1, r3
 8020468:	4610      	mov	r0, r2
 802046a:	f000 fab0 	bl	80209ce <TIM_ITRx_SetConfig>
      break;
 802046e:	e003      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8020470:	2301      	movs	r3, #1
 8020472:	73fb      	strb	r3, [r7, #15]
      break;
 8020474:	e000      	b.n	8020478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8020476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	2201      	movs	r2, #1
 802047c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	2200      	movs	r2, #0
 8020484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8020488:	7bfb      	ldrb	r3, [r7, #15]
}
 802048a:	4618      	mov	r0, r3
 802048c:	3710      	adds	r7, #16
 802048e:	46bd      	mov	sp, r7
 8020490:	bd80      	pop	{r7, pc}

08020492 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020492:	b480      	push	{r7}
 8020494:	b083      	sub	sp, #12
 8020496:	af00      	add	r7, sp, #0
 8020498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 802049a:	bf00      	nop
 802049c:	370c      	adds	r7, #12
 802049e:	46bd      	mov	sp, r7
 80204a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204a4:	4770      	bx	lr

080204a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80204a6:	b480      	push	{r7}
 80204a8:	b083      	sub	sp, #12
 80204aa:	af00      	add	r7, sp, #0
 80204ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80204ae:	bf00      	nop
 80204b0:	370c      	adds	r7, #12
 80204b2:	46bd      	mov	sp, r7
 80204b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b8:	4770      	bx	lr

080204ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80204ba:	b480      	push	{r7}
 80204bc:	b083      	sub	sp, #12
 80204be:	af00      	add	r7, sp, #0
 80204c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80204c2:	bf00      	nop
 80204c4:	370c      	adds	r7, #12
 80204c6:	46bd      	mov	sp, r7
 80204c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204cc:	4770      	bx	lr

080204ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80204ce:	b480      	push	{r7}
 80204d0:	b083      	sub	sp, #12
 80204d2:	af00      	add	r7, sp, #0
 80204d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80204d6:	bf00      	nop
 80204d8:	370c      	adds	r7, #12
 80204da:	46bd      	mov	sp, r7
 80204dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e0:	4770      	bx	lr

080204e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80204e2:	b480      	push	{r7}
 80204e4:	b083      	sub	sp, #12
 80204e6:	af00      	add	r7, sp, #0
 80204e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80204ea:	bf00      	nop
 80204ec:	370c      	adds	r7, #12
 80204ee:	46bd      	mov	sp, r7
 80204f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204f4:	4770      	bx	lr
	...

080204f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80204f8:	b480      	push	{r7}
 80204fa:	b085      	sub	sp, #20
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	6078      	str	r0, [r7, #4]
 8020500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	4a34      	ldr	r2, [pc, #208]	; (80205dc <TIM_Base_SetConfig+0xe4>)
 802050c:	4293      	cmp	r3, r2
 802050e:	d00f      	beq.n	8020530 <TIM_Base_SetConfig+0x38>
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020516:	d00b      	beq.n	8020530 <TIM_Base_SetConfig+0x38>
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	4a31      	ldr	r2, [pc, #196]	; (80205e0 <TIM_Base_SetConfig+0xe8>)
 802051c:	4293      	cmp	r3, r2
 802051e:	d007      	beq.n	8020530 <TIM_Base_SetConfig+0x38>
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	4a30      	ldr	r2, [pc, #192]	; (80205e4 <TIM_Base_SetConfig+0xec>)
 8020524:	4293      	cmp	r3, r2
 8020526:	d003      	beq.n	8020530 <TIM_Base_SetConfig+0x38>
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	4a2f      	ldr	r2, [pc, #188]	; (80205e8 <TIM_Base_SetConfig+0xf0>)
 802052c:	4293      	cmp	r3, r2
 802052e:	d108      	bne.n	8020542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020530:	68fb      	ldr	r3, [r7, #12]
 8020532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020538:	683b      	ldr	r3, [r7, #0]
 802053a:	685b      	ldr	r3, [r3, #4]
 802053c:	68fa      	ldr	r2, [r7, #12]
 802053e:	4313      	orrs	r3, r2
 8020540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	4a25      	ldr	r2, [pc, #148]	; (80205dc <TIM_Base_SetConfig+0xe4>)
 8020546:	4293      	cmp	r3, r2
 8020548:	d01b      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020550:	d017      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	4a22      	ldr	r2, [pc, #136]	; (80205e0 <TIM_Base_SetConfig+0xe8>)
 8020556:	4293      	cmp	r3, r2
 8020558:	d013      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	4a21      	ldr	r2, [pc, #132]	; (80205e4 <TIM_Base_SetConfig+0xec>)
 802055e:	4293      	cmp	r3, r2
 8020560:	d00f      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	4a20      	ldr	r2, [pc, #128]	; (80205e8 <TIM_Base_SetConfig+0xf0>)
 8020566:	4293      	cmp	r3, r2
 8020568:	d00b      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	4a1f      	ldr	r2, [pc, #124]	; (80205ec <TIM_Base_SetConfig+0xf4>)
 802056e:	4293      	cmp	r3, r2
 8020570:	d007      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	4a1e      	ldr	r2, [pc, #120]	; (80205f0 <TIM_Base_SetConfig+0xf8>)
 8020576:	4293      	cmp	r3, r2
 8020578:	d003      	beq.n	8020582 <TIM_Base_SetConfig+0x8a>
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	4a1d      	ldr	r2, [pc, #116]	; (80205f4 <TIM_Base_SetConfig+0xfc>)
 802057e:	4293      	cmp	r3, r2
 8020580:	d108      	bne.n	8020594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802058a:	683b      	ldr	r3, [r7, #0]
 802058c:	68db      	ldr	r3, [r3, #12]
 802058e:	68fa      	ldr	r2, [r7, #12]
 8020590:	4313      	orrs	r3, r2
 8020592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802059a:	683b      	ldr	r3, [r7, #0]
 802059c:	695b      	ldr	r3, [r3, #20]
 802059e:	4313      	orrs	r3, r2
 80205a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	68fa      	ldr	r2, [r7, #12]
 80205a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	689a      	ldr	r2, [r3, #8]
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80205b0:	683b      	ldr	r3, [r7, #0]
 80205b2:	681a      	ldr	r2, [r3, #0]
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	4a08      	ldr	r2, [pc, #32]	; (80205dc <TIM_Base_SetConfig+0xe4>)
 80205bc:	4293      	cmp	r3, r2
 80205be:	d103      	bne.n	80205c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80205c0:	683b      	ldr	r3, [r7, #0]
 80205c2:	691a      	ldr	r2, [r3, #16]
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	2201      	movs	r2, #1
 80205cc:	615a      	str	r2, [r3, #20]
}
 80205ce:	bf00      	nop
 80205d0:	3714      	adds	r7, #20
 80205d2:	46bd      	mov	sp, r7
 80205d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d8:	4770      	bx	lr
 80205da:	bf00      	nop
 80205dc:	40010000 	.word	0x40010000
 80205e0:	40000400 	.word	0x40000400
 80205e4:	40000800 	.word	0x40000800
 80205e8:	40000c00 	.word	0x40000c00
 80205ec:	40014000 	.word	0x40014000
 80205f0:	40014400 	.word	0x40014400
 80205f4:	40014800 	.word	0x40014800

080205f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80205f8:	b480      	push	{r7}
 80205fa:	b087      	sub	sp, #28
 80205fc:	af00      	add	r7, sp, #0
 80205fe:	6078      	str	r0, [r7, #4]
 8020600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	6a1b      	ldr	r3, [r3, #32]
 8020606:	f023 0201 	bic.w	r2, r3, #1
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802060e:	687b      	ldr	r3, [r7, #4]
 8020610:	6a1b      	ldr	r3, [r3, #32]
 8020612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	685b      	ldr	r3, [r3, #4]
 8020618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	699b      	ldr	r3, [r3, #24]
 802061e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020620:	68fb      	ldr	r3, [r7, #12]
 8020622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020628:	68fb      	ldr	r3, [r7, #12]
 802062a:	f023 0303 	bic.w	r3, r3, #3
 802062e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020630:	683b      	ldr	r3, [r7, #0]
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	68fa      	ldr	r2, [r7, #12]
 8020636:	4313      	orrs	r3, r2
 8020638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802063a:	697b      	ldr	r3, [r7, #20]
 802063c:	f023 0302 	bic.w	r3, r3, #2
 8020640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020642:	683b      	ldr	r3, [r7, #0]
 8020644:	689b      	ldr	r3, [r3, #8]
 8020646:	697a      	ldr	r2, [r7, #20]
 8020648:	4313      	orrs	r3, r2
 802064a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	4a1c      	ldr	r2, [pc, #112]	; (80206c0 <TIM_OC1_SetConfig+0xc8>)
 8020650:	4293      	cmp	r3, r2
 8020652:	d10c      	bne.n	802066e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020654:	697b      	ldr	r3, [r7, #20]
 8020656:	f023 0308 	bic.w	r3, r3, #8
 802065a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802065c:	683b      	ldr	r3, [r7, #0]
 802065e:	68db      	ldr	r3, [r3, #12]
 8020660:	697a      	ldr	r2, [r7, #20]
 8020662:	4313      	orrs	r3, r2
 8020664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020666:	697b      	ldr	r3, [r7, #20]
 8020668:	f023 0304 	bic.w	r3, r3, #4
 802066c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	4a13      	ldr	r2, [pc, #76]	; (80206c0 <TIM_OC1_SetConfig+0xc8>)
 8020672:	4293      	cmp	r3, r2
 8020674:	d111      	bne.n	802069a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020676:	693b      	ldr	r3, [r7, #16]
 8020678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802067c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802067e:	693b      	ldr	r3, [r7, #16]
 8020680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020686:	683b      	ldr	r3, [r7, #0]
 8020688:	695b      	ldr	r3, [r3, #20]
 802068a:	693a      	ldr	r2, [r7, #16]
 802068c:	4313      	orrs	r3, r2
 802068e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020690:	683b      	ldr	r3, [r7, #0]
 8020692:	699b      	ldr	r3, [r3, #24]
 8020694:	693a      	ldr	r2, [r7, #16]
 8020696:	4313      	orrs	r3, r2
 8020698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	693a      	ldr	r2, [r7, #16]
 802069e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	68fa      	ldr	r2, [r7, #12]
 80206a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80206a6:	683b      	ldr	r3, [r7, #0]
 80206a8:	685a      	ldr	r2, [r3, #4]
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	697a      	ldr	r2, [r7, #20]
 80206b2:	621a      	str	r2, [r3, #32]
}
 80206b4:	bf00      	nop
 80206b6:	371c      	adds	r7, #28
 80206b8:	46bd      	mov	sp, r7
 80206ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206be:	4770      	bx	lr
 80206c0:	40010000 	.word	0x40010000

080206c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80206c4:	b480      	push	{r7}
 80206c6:	b087      	sub	sp, #28
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	6078      	str	r0, [r7, #4]
 80206cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	6a1b      	ldr	r3, [r3, #32]
 80206d2:	f023 0210 	bic.w	r2, r3, #16
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	6a1b      	ldr	r3, [r3, #32]
 80206de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	685b      	ldr	r3, [r3, #4]
 80206e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	699b      	ldr	r3, [r3, #24]
 80206ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80206ec:	68fb      	ldr	r3, [r7, #12]
 80206ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80206f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80206fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80206fc:	683b      	ldr	r3, [r7, #0]
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	021b      	lsls	r3, r3, #8
 8020702:	68fa      	ldr	r2, [r7, #12]
 8020704:	4313      	orrs	r3, r2
 8020706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020708:	697b      	ldr	r3, [r7, #20]
 802070a:	f023 0320 	bic.w	r3, r3, #32
 802070e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020710:	683b      	ldr	r3, [r7, #0]
 8020712:	689b      	ldr	r3, [r3, #8]
 8020714:	011b      	lsls	r3, r3, #4
 8020716:	697a      	ldr	r2, [r7, #20]
 8020718:	4313      	orrs	r3, r2
 802071a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	4a1e      	ldr	r2, [pc, #120]	; (8020798 <TIM_OC2_SetConfig+0xd4>)
 8020720:	4293      	cmp	r3, r2
 8020722:	d10d      	bne.n	8020740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020724:	697b      	ldr	r3, [r7, #20]
 8020726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802072a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802072c:	683b      	ldr	r3, [r7, #0]
 802072e:	68db      	ldr	r3, [r3, #12]
 8020730:	011b      	lsls	r3, r3, #4
 8020732:	697a      	ldr	r2, [r7, #20]
 8020734:	4313      	orrs	r3, r2
 8020736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020738:	697b      	ldr	r3, [r7, #20]
 802073a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802073e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	4a15      	ldr	r2, [pc, #84]	; (8020798 <TIM_OC2_SetConfig+0xd4>)
 8020744:	4293      	cmp	r3, r2
 8020746:	d113      	bne.n	8020770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020748:	693b      	ldr	r3, [r7, #16]
 802074a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802074e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020750:	693b      	ldr	r3, [r7, #16]
 8020752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020758:	683b      	ldr	r3, [r7, #0]
 802075a:	695b      	ldr	r3, [r3, #20]
 802075c:	009b      	lsls	r3, r3, #2
 802075e:	693a      	ldr	r2, [r7, #16]
 8020760:	4313      	orrs	r3, r2
 8020762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020764:	683b      	ldr	r3, [r7, #0]
 8020766:	699b      	ldr	r3, [r3, #24]
 8020768:	009b      	lsls	r3, r3, #2
 802076a:	693a      	ldr	r2, [r7, #16]
 802076c:	4313      	orrs	r3, r2
 802076e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	693a      	ldr	r2, [r7, #16]
 8020774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	68fa      	ldr	r2, [r7, #12]
 802077a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802077c:	683b      	ldr	r3, [r7, #0]
 802077e:	685a      	ldr	r2, [r3, #4]
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	697a      	ldr	r2, [r7, #20]
 8020788:	621a      	str	r2, [r3, #32]
}
 802078a:	bf00      	nop
 802078c:	371c      	adds	r7, #28
 802078e:	46bd      	mov	sp, r7
 8020790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020794:	4770      	bx	lr
 8020796:	bf00      	nop
 8020798:	40010000 	.word	0x40010000

0802079c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802079c:	b480      	push	{r7}
 802079e:	b087      	sub	sp, #28
 80207a0:	af00      	add	r7, sp, #0
 80207a2:	6078      	str	r0, [r7, #4]
 80207a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	6a1b      	ldr	r3, [r3, #32]
 80207aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	6a1b      	ldr	r3, [r3, #32]
 80207b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	685b      	ldr	r3, [r3, #4]
 80207bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	69db      	ldr	r3, [r3, #28]
 80207c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80207c4:	68fb      	ldr	r3, [r7, #12]
 80207c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80207ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80207cc:	68fb      	ldr	r3, [r7, #12]
 80207ce:	f023 0303 	bic.w	r3, r3, #3
 80207d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80207d4:	683b      	ldr	r3, [r7, #0]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	68fa      	ldr	r2, [r7, #12]
 80207da:	4313      	orrs	r3, r2
 80207dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80207de:	697b      	ldr	r3, [r7, #20]
 80207e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80207e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80207e6:	683b      	ldr	r3, [r7, #0]
 80207e8:	689b      	ldr	r3, [r3, #8]
 80207ea:	021b      	lsls	r3, r3, #8
 80207ec:	697a      	ldr	r2, [r7, #20]
 80207ee:	4313      	orrs	r3, r2
 80207f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	4a1d      	ldr	r2, [pc, #116]	; (802086c <TIM_OC3_SetConfig+0xd0>)
 80207f6:	4293      	cmp	r3, r2
 80207f8:	d10d      	bne.n	8020816 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80207fa:	697b      	ldr	r3, [r7, #20]
 80207fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020802:	683b      	ldr	r3, [r7, #0]
 8020804:	68db      	ldr	r3, [r3, #12]
 8020806:	021b      	lsls	r3, r3, #8
 8020808:	697a      	ldr	r2, [r7, #20]
 802080a:	4313      	orrs	r3, r2
 802080c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802080e:	697b      	ldr	r3, [r7, #20]
 8020810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	4a14      	ldr	r2, [pc, #80]	; (802086c <TIM_OC3_SetConfig+0xd0>)
 802081a:	4293      	cmp	r3, r2
 802081c:	d113      	bne.n	8020846 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802081e:	693b      	ldr	r3, [r7, #16]
 8020820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020826:	693b      	ldr	r3, [r7, #16]
 8020828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802082c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802082e:	683b      	ldr	r3, [r7, #0]
 8020830:	695b      	ldr	r3, [r3, #20]
 8020832:	011b      	lsls	r3, r3, #4
 8020834:	693a      	ldr	r2, [r7, #16]
 8020836:	4313      	orrs	r3, r2
 8020838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802083a:	683b      	ldr	r3, [r7, #0]
 802083c:	699b      	ldr	r3, [r3, #24]
 802083e:	011b      	lsls	r3, r3, #4
 8020840:	693a      	ldr	r2, [r7, #16]
 8020842:	4313      	orrs	r3, r2
 8020844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	693a      	ldr	r2, [r7, #16]
 802084a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	68fa      	ldr	r2, [r7, #12]
 8020850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020852:	683b      	ldr	r3, [r7, #0]
 8020854:	685a      	ldr	r2, [r3, #4]
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	697a      	ldr	r2, [r7, #20]
 802085e:	621a      	str	r2, [r3, #32]
}
 8020860:	bf00      	nop
 8020862:	371c      	adds	r7, #28
 8020864:	46bd      	mov	sp, r7
 8020866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802086a:	4770      	bx	lr
 802086c:	40010000 	.word	0x40010000

08020870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020870:	b480      	push	{r7}
 8020872:	b087      	sub	sp, #28
 8020874:	af00      	add	r7, sp, #0
 8020876:	6078      	str	r0, [r7, #4]
 8020878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	6a1b      	ldr	r3, [r3, #32]
 802087e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	6a1b      	ldr	r3, [r3, #32]
 802088a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	685b      	ldr	r3, [r3, #4]
 8020890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	69db      	ldr	r3, [r3, #28]
 8020896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802089e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80208a0:	68fb      	ldr	r3, [r7, #12]
 80208a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80208a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80208a8:	683b      	ldr	r3, [r7, #0]
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	021b      	lsls	r3, r3, #8
 80208ae:	68fa      	ldr	r2, [r7, #12]
 80208b0:	4313      	orrs	r3, r2
 80208b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80208b4:	693b      	ldr	r3, [r7, #16]
 80208b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80208ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	689b      	ldr	r3, [r3, #8]
 80208c0:	031b      	lsls	r3, r3, #12
 80208c2:	693a      	ldr	r2, [r7, #16]
 80208c4:	4313      	orrs	r3, r2
 80208c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	4a10      	ldr	r2, [pc, #64]	; (802090c <TIM_OC4_SetConfig+0x9c>)
 80208cc:	4293      	cmp	r3, r2
 80208ce:	d109      	bne.n	80208e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80208d0:	697b      	ldr	r3, [r7, #20]
 80208d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80208d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80208d8:	683b      	ldr	r3, [r7, #0]
 80208da:	695b      	ldr	r3, [r3, #20]
 80208dc:	019b      	lsls	r3, r3, #6
 80208de:	697a      	ldr	r2, [r7, #20]
 80208e0:	4313      	orrs	r3, r2
 80208e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	697a      	ldr	r2, [r7, #20]
 80208e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	68fa      	ldr	r2, [r7, #12]
 80208ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80208f0:	683b      	ldr	r3, [r7, #0]
 80208f2:	685a      	ldr	r2, [r3, #4]
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	693a      	ldr	r2, [r7, #16]
 80208fc:	621a      	str	r2, [r3, #32]
}
 80208fe:	bf00      	nop
 8020900:	371c      	adds	r7, #28
 8020902:	46bd      	mov	sp, r7
 8020904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020908:	4770      	bx	lr
 802090a:	bf00      	nop
 802090c:	40010000 	.word	0x40010000

08020910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020910:	b480      	push	{r7}
 8020912:	b087      	sub	sp, #28
 8020914:	af00      	add	r7, sp, #0
 8020916:	60f8      	str	r0, [r7, #12]
 8020918:	60b9      	str	r1, [r7, #8]
 802091a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802091c:	68fb      	ldr	r3, [r7, #12]
 802091e:	6a1b      	ldr	r3, [r3, #32]
 8020920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020922:	68fb      	ldr	r3, [r7, #12]
 8020924:	6a1b      	ldr	r3, [r3, #32]
 8020926:	f023 0201 	bic.w	r2, r3, #1
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802092e:	68fb      	ldr	r3, [r7, #12]
 8020930:	699b      	ldr	r3, [r3, #24]
 8020932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020934:	693b      	ldr	r3, [r7, #16]
 8020936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802093a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	011b      	lsls	r3, r3, #4
 8020940:	693a      	ldr	r2, [r7, #16]
 8020942:	4313      	orrs	r3, r2
 8020944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020946:	697b      	ldr	r3, [r7, #20]
 8020948:	f023 030a 	bic.w	r3, r3, #10
 802094c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802094e:	697a      	ldr	r2, [r7, #20]
 8020950:	68bb      	ldr	r3, [r7, #8]
 8020952:	4313      	orrs	r3, r2
 8020954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020956:	68fb      	ldr	r3, [r7, #12]
 8020958:	693a      	ldr	r2, [r7, #16]
 802095a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802095c:	68fb      	ldr	r3, [r7, #12]
 802095e:	697a      	ldr	r2, [r7, #20]
 8020960:	621a      	str	r2, [r3, #32]
}
 8020962:	bf00      	nop
 8020964:	371c      	adds	r7, #28
 8020966:	46bd      	mov	sp, r7
 8020968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802096c:	4770      	bx	lr

0802096e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802096e:	b480      	push	{r7}
 8020970:	b087      	sub	sp, #28
 8020972:	af00      	add	r7, sp, #0
 8020974:	60f8      	str	r0, [r7, #12]
 8020976:	60b9      	str	r1, [r7, #8]
 8020978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	6a1b      	ldr	r3, [r3, #32]
 802097e:	f023 0210 	bic.w	r2, r3, #16
 8020982:	68fb      	ldr	r3, [r7, #12]
 8020984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020986:	68fb      	ldr	r3, [r7, #12]
 8020988:	699b      	ldr	r3, [r3, #24]
 802098a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802098c:	68fb      	ldr	r3, [r7, #12]
 802098e:	6a1b      	ldr	r3, [r3, #32]
 8020990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020992:	697b      	ldr	r3, [r7, #20]
 8020994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	031b      	lsls	r3, r3, #12
 802099e:	697a      	ldr	r2, [r7, #20]
 80209a0:	4313      	orrs	r3, r2
 80209a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80209a4:	693b      	ldr	r3, [r7, #16]
 80209a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80209aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80209ac:	68bb      	ldr	r3, [r7, #8]
 80209ae:	011b      	lsls	r3, r3, #4
 80209b0:	693a      	ldr	r2, [r7, #16]
 80209b2:	4313      	orrs	r3, r2
 80209b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80209b6:	68fb      	ldr	r3, [r7, #12]
 80209b8:	697a      	ldr	r2, [r7, #20]
 80209ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80209bc:	68fb      	ldr	r3, [r7, #12]
 80209be:	693a      	ldr	r2, [r7, #16]
 80209c0:	621a      	str	r2, [r3, #32]
}
 80209c2:	bf00      	nop
 80209c4:	371c      	adds	r7, #28
 80209c6:	46bd      	mov	sp, r7
 80209c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209cc:	4770      	bx	lr

080209ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80209ce:	b480      	push	{r7}
 80209d0:	b085      	sub	sp, #20
 80209d2:	af00      	add	r7, sp, #0
 80209d4:	6078      	str	r0, [r7, #4]
 80209d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	689b      	ldr	r3, [r3, #8]
 80209dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80209de:	68fb      	ldr	r3, [r7, #12]
 80209e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80209e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80209e6:	683a      	ldr	r2, [r7, #0]
 80209e8:	68fb      	ldr	r3, [r7, #12]
 80209ea:	4313      	orrs	r3, r2
 80209ec:	f043 0307 	orr.w	r3, r3, #7
 80209f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	68fa      	ldr	r2, [r7, #12]
 80209f6:	609a      	str	r2, [r3, #8]
}
 80209f8:	bf00      	nop
 80209fa:	3714      	adds	r7, #20
 80209fc:	46bd      	mov	sp, r7
 80209fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a02:	4770      	bx	lr

08020a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020a04:	b480      	push	{r7}
 8020a06:	b087      	sub	sp, #28
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	60f8      	str	r0, [r7, #12]
 8020a0c:	60b9      	str	r1, [r7, #8]
 8020a0e:	607a      	str	r2, [r7, #4]
 8020a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020a12:	68fb      	ldr	r3, [r7, #12]
 8020a14:	689b      	ldr	r3, [r3, #8]
 8020a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020a18:	697b      	ldr	r3, [r7, #20]
 8020a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020a20:	683b      	ldr	r3, [r7, #0]
 8020a22:	021a      	lsls	r2, r3, #8
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	431a      	orrs	r2, r3
 8020a28:	68bb      	ldr	r3, [r7, #8]
 8020a2a:	4313      	orrs	r3, r2
 8020a2c:	697a      	ldr	r2, [r7, #20]
 8020a2e:	4313      	orrs	r3, r2
 8020a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	697a      	ldr	r2, [r7, #20]
 8020a36:	609a      	str	r2, [r3, #8]
}
 8020a38:	bf00      	nop
 8020a3a:	371c      	adds	r7, #28
 8020a3c:	46bd      	mov	sp, r7
 8020a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a42:	4770      	bx	lr

08020a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020a44:	b480      	push	{r7}
 8020a46:	b087      	sub	sp, #28
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	60f8      	str	r0, [r7, #12]
 8020a4c:	60b9      	str	r1, [r7, #8]
 8020a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020a50:	68bb      	ldr	r3, [r7, #8]
 8020a52:	f003 031f 	and.w	r3, r3, #31
 8020a56:	2201      	movs	r2, #1
 8020a58:	fa02 f303 	lsl.w	r3, r2, r3
 8020a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020a5e:	68fb      	ldr	r3, [r7, #12]
 8020a60:	6a1a      	ldr	r2, [r3, #32]
 8020a62:	697b      	ldr	r3, [r7, #20]
 8020a64:	43db      	mvns	r3, r3
 8020a66:	401a      	ands	r2, r3
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020a6c:	68fb      	ldr	r3, [r7, #12]
 8020a6e:	6a1a      	ldr	r2, [r3, #32]
 8020a70:	68bb      	ldr	r3, [r7, #8]
 8020a72:	f003 031f 	and.w	r3, r3, #31
 8020a76:	6879      	ldr	r1, [r7, #4]
 8020a78:	fa01 f303 	lsl.w	r3, r1, r3
 8020a7c:	431a      	orrs	r2, r3
 8020a7e:	68fb      	ldr	r3, [r7, #12]
 8020a80:	621a      	str	r2, [r3, #32]
}
 8020a82:	bf00      	nop
 8020a84:	371c      	adds	r7, #28
 8020a86:	46bd      	mov	sp, r7
 8020a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8c:	4770      	bx	lr
	...

08020a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020a90:	b480      	push	{r7}
 8020a92:	b085      	sub	sp, #20
 8020a94:	af00      	add	r7, sp, #0
 8020a96:	6078      	str	r0, [r7, #4]
 8020a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020aa0:	2b01      	cmp	r3, #1
 8020aa2:	d101      	bne.n	8020aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020aa4:	2302      	movs	r3, #2
 8020aa6:	e050      	b.n	8020b4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	2201      	movs	r2, #1
 8020aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	2202      	movs	r2, #2
 8020ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	685b      	ldr	r3, [r3, #4]
 8020abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	689b      	ldr	r3, [r3, #8]
 8020ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020ac8:	68fb      	ldr	r3, [r7, #12]
 8020aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020ad0:	683b      	ldr	r3, [r7, #0]
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	68fa      	ldr	r2, [r7, #12]
 8020ad6:	4313      	orrs	r3, r2
 8020ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020ada:	687b      	ldr	r3, [r7, #4]
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	68fa      	ldr	r2, [r7, #12]
 8020ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	4a1c      	ldr	r2, [pc, #112]	; (8020b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8020ae8:	4293      	cmp	r3, r2
 8020aea:	d018      	beq.n	8020b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	681b      	ldr	r3, [r3, #0]
 8020af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020af4:	d013      	beq.n	8020b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	4a18      	ldr	r2, [pc, #96]	; (8020b5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8020afc:	4293      	cmp	r3, r2
 8020afe:	d00e      	beq.n	8020b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	4a16      	ldr	r2, [pc, #88]	; (8020b60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8020b06:	4293      	cmp	r3, r2
 8020b08:	d009      	beq.n	8020b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	4a15      	ldr	r2, [pc, #84]	; (8020b64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8020b10:	4293      	cmp	r3, r2
 8020b12:	d004      	beq.n	8020b1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	4a13      	ldr	r2, [pc, #76]	; (8020b68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8020b1a:	4293      	cmp	r3, r2
 8020b1c:	d10c      	bne.n	8020b38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020b1e:	68bb      	ldr	r3, [r7, #8]
 8020b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020b26:	683b      	ldr	r3, [r7, #0]
 8020b28:	685b      	ldr	r3, [r3, #4]
 8020b2a:	68ba      	ldr	r2, [r7, #8]
 8020b2c:	4313      	orrs	r3, r2
 8020b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	68ba      	ldr	r2, [r7, #8]
 8020b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020b38:	687b      	ldr	r3, [r7, #4]
 8020b3a:	2201      	movs	r2, #1
 8020b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	2200      	movs	r2, #0
 8020b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020b48:	2300      	movs	r3, #0
}
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	3714      	adds	r7, #20
 8020b4e:	46bd      	mov	sp, r7
 8020b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b54:	4770      	bx	lr
 8020b56:	bf00      	nop
 8020b58:	40010000 	.word	0x40010000
 8020b5c:	40000400 	.word	0x40000400
 8020b60:	40000800 	.word	0x40000800
 8020b64:	40000c00 	.word	0x40000c00
 8020b68:	40014000 	.word	0x40014000

08020b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020b6c:	b480      	push	{r7}
 8020b6e:	b083      	sub	sp, #12
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020b74:	bf00      	nop
 8020b76:	370c      	adds	r7, #12
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b7e:	4770      	bx	lr

08020b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020b80:	b480      	push	{r7}
 8020b82:	b083      	sub	sp, #12
 8020b84:	af00      	add	r7, sp, #0
 8020b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020b88:	bf00      	nop
 8020b8a:	370c      	adds	r7, #12
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b92:	4770      	bx	lr

08020b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b082      	sub	sp, #8
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d101      	bne.n	8020ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020ba2:	2301      	movs	r3, #1
 8020ba4:	e03f      	b.n	8020c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020bac:	b2db      	uxtb	r3, r3
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d106      	bne.n	8020bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020bba:	6878      	ldr	r0, [r7, #4]
 8020bbc:	f7e2 fe78 	bl	80038b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	2224      	movs	r2, #36	; 0x24
 8020bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	68da      	ldr	r2, [r3, #12]
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	681b      	ldr	r3, [r3, #0]
 8020bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8020bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8020bd8:	6878      	ldr	r0, [r7, #4]
 8020bda:	f000 fec7 	bl	802196c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	691a      	ldr	r2, [r3, #16]
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	681b      	ldr	r3, [r3, #0]
 8020be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	695a      	ldr	r2, [r3, #20]
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	681b      	ldr	r3, [r3, #0]
 8020bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	68da      	ldr	r2, [r3, #12]
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	681b      	ldr	r3, [r3, #0]
 8020c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8020c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	2200      	movs	r2, #0
 8020c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	2220      	movs	r2, #32
 8020c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	2220      	movs	r2, #32
 8020c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8020c24:	2300      	movs	r3, #0
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	3708      	adds	r7, #8
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	bd80      	pop	{r7, pc}

08020c2e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8020c2e:	b580      	push	{r7, lr}
 8020c30:	b082      	sub	sp, #8
 8020c32:	af00      	add	r7, sp, #0
 8020c34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	d101      	bne.n	8020c40 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8020c3c:	2301      	movs	r3, #1
 8020c3e:	e021      	b.n	8020c84 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	2224      	movs	r2, #36	; 0x24
 8020c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	68da      	ldr	r2, [r3, #12]
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	681b      	ldr	r3, [r3, #0]
 8020c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8020c56:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	f7e2 fef3 	bl	8003a44 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	2200      	movs	r2, #0
 8020c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	2200      	movs	r2, #0
 8020c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	2200      	movs	r2, #0
 8020c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	2200      	movs	r2, #0
 8020c78:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8020c7a:	687b      	ldr	r3, [r7, #4]
 8020c7c:	2200      	movs	r2, #0
 8020c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020c82:	2300      	movs	r3, #0
}
 8020c84:	4618      	mov	r0, r3
 8020c86:	3708      	adds	r7, #8
 8020c88:	46bd      	mov	sp, r7
 8020c8a:	bd80      	pop	{r7, pc}

08020c8c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8020c8c:	b480      	push	{r7}
 8020c8e:	b085      	sub	sp, #20
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	60f8      	str	r0, [r7, #12]
 8020c94:	60b9      	str	r1, [r7, #8]
 8020c96:	4613      	mov	r3, r2
 8020c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8020c9a:	68fb      	ldr	r3, [r7, #12]
 8020c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020ca0:	b2db      	uxtb	r3, r3
 8020ca2:	2b20      	cmp	r3, #32
 8020ca4:	d130      	bne.n	8020d08 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8020ca6:	68bb      	ldr	r3, [r7, #8]
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d002      	beq.n	8020cb2 <HAL_UART_Transmit_IT+0x26>
 8020cac:	88fb      	ldrh	r3, [r7, #6]
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d101      	bne.n	8020cb6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8020cb2:	2301      	movs	r3, #1
 8020cb4:	e029      	b.n	8020d0a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020cb6:	68fb      	ldr	r3, [r7, #12]
 8020cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020cbc:	2b01      	cmp	r3, #1
 8020cbe:	d101      	bne.n	8020cc4 <HAL_UART_Transmit_IT+0x38>
 8020cc0:	2302      	movs	r3, #2
 8020cc2:	e022      	b.n	8020d0a <HAL_UART_Transmit_IT+0x7e>
 8020cc4:	68fb      	ldr	r3, [r7, #12]
 8020cc6:	2201      	movs	r2, #1
 8020cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8020ccc:	68fb      	ldr	r3, [r7, #12]
 8020cce:	68ba      	ldr	r2, [r7, #8]
 8020cd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8020cd2:	68fb      	ldr	r3, [r7, #12]
 8020cd4:	88fa      	ldrh	r2, [r7, #6]
 8020cd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8020cd8:	68fb      	ldr	r3, [r7, #12]
 8020cda:	88fa      	ldrh	r2, [r7, #6]
 8020cdc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020cde:	68fb      	ldr	r3, [r7, #12]
 8020ce0:	2200      	movs	r2, #0
 8020ce2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	2221      	movs	r2, #33	; 0x21
 8020ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8020cec:	68fb      	ldr	r3, [r7, #12]
 8020cee:	2200      	movs	r2, #0
 8020cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8020cf4:	68fb      	ldr	r3, [r7, #12]
 8020cf6:	681b      	ldr	r3, [r3, #0]
 8020cf8:	68da      	ldr	r2, [r3, #12]
 8020cfa:	68fb      	ldr	r3, [r7, #12]
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020d02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8020d04:	2300      	movs	r3, #0
 8020d06:	e000      	b.n	8020d0a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8020d08:	2302      	movs	r3, #2
  }
}
 8020d0a:	4618      	mov	r0, r3
 8020d0c:	3714      	adds	r7, #20
 8020d0e:	46bd      	mov	sp, r7
 8020d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d14:	4770      	bx	lr

08020d16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020d16:	b580      	push	{r7, lr}
 8020d18:	b084      	sub	sp, #16
 8020d1a:	af00      	add	r7, sp, #0
 8020d1c:	60f8      	str	r0, [r7, #12]
 8020d1e:	60b9      	str	r1, [r7, #8]
 8020d20:	4613      	mov	r3, r2
 8020d22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020d24:	68fb      	ldr	r3, [r7, #12]
 8020d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020d2a:	b2db      	uxtb	r3, r3
 8020d2c:	2b20      	cmp	r3, #32
 8020d2e:	d11d      	bne.n	8020d6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8020d30:	68bb      	ldr	r3, [r7, #8]
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	d002      	beq.n	8020d3c <HAL_UART_Receive_IT+0x26>
 8020d36:	88fb      	ldrh	r3, [r7, #6]
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d101      	bne.n	8020d40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8020d3c:	2301      	movs	r3, #1
 8020d3e:	e016      	b.n	8020d6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8020d40:	68fb      	ldr	r3, [r7, #12]
 8020d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020d46:	2b01      	cmp	r3, #1
 8020d48:	d101      	bne.n	8020d4e <HAL_UART_Receive_IT+0x38>
 8020d4a:	2302      	movs	r3, #2
 8020d4c:	e00f      	b.n	8020d6e <HAL_UART_Receive_IT+0x58>
 8020d4e:	68fb      	ldr	r3, [r7, #12]
 8020d50:	2201      	movs	r2, #1
 8020d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020d56:	68fb      	ldr	r3, [r7, #12]
 8020d58:	2200      	movs	r2, #0
 8020d5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8020d5c:	88fb      	ldrh	r3, [r7, #6]
 8020d5e:	461a      	mov	r2, r3
 8020d60:	68b9      	ldr	r1, [r7, #8]
 8020d62:	68f8      	ldr	r0, [r7, #12]
 8020d64:	f000 fbca 	bl	80214fc <UART_Start_Receive_IT>
 8020d68:	4603      	mov	r3, r0
 8020d6a:	e000      	b.n	8020d6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8020d6c:	2302      	movs	r3, #2
  }
}
 8020d6e:	4618      	mov	r0, r3
 8020d70:	3710      	adds	r7, #16
 8020d72:	46bd      	mov	sp, r7
 8020d74:	bd80      	pop	{r7, pc}
	...

08020d78 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8020d78:	b580      	push	{r7, lr}
 8020d7a:	b0a2      	sub	sp, #136	; 0x88
 8020d7c:	af00      	add	r7, sp, #0
 8020d7e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8020d80:	2301      	movs	r3, #1
 8020d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	681b      	ldr	r3, [r3, #0]
 8020d8a:	330c      	adds	r3, #12
 8020d8c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020d90:	e853 3f00 	ldrex	r3, [r3]
 8020d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8020d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020d98:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8020d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	330c      	adds	r3, #12
 8020da6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8020daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8020dac:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020dae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8020db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020db2:	e841 2300 	strex	r3, r2, [r1]
 8020db6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8020db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	d1e3      	bne.n	8020d86 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	681b      	ldr	r3, [r3, #0]
 8020dc2:	3314      	adds	r3, #20
 8020dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020dc8:	e853 3f00 	ldrex	r3, [r3]
 8020dcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8020dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020dd0:	f023 0301 	bic.w	r3, r3, #1
 8020dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020dd6:	687b      	ldr	r3, [r7, #4]
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	3314      	adds	r3, #20
 8020ddc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8020dde:	65ba      	str	r2, [r7, #88]	; 0x58
 8020de0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020de2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8020de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8020de6:	e841 2300 	strex	r3, r2, [r1]
 8020dea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8020dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d1e5      	bne.n	8020dbe <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020df2:	687b      	ldr	r3, [r7, #4]
 8020df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020df6:	2b01      	cmp	r3, #1
 8020df8:	d119      	bne.n	8020e2e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	330c      	adds	r3, #12
 8020e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020e04:	e853 3f00 	ldrex	r3, [r3]
 8020e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8020e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020e0c:	f023 0310 	bic.w	r3, r3, #16
 8020e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	681b      	ldr	r3, [r3, #0]
 8020e16:	330c      	adds	r3, #12
 8020e18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020e1a:	647a      	str	r2, [r7, #68]	; 0x44
 8020e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8020e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020e22:	e841 2300 	strex	r3, r2, [r1]
 8020e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8020e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d1e5      	bne.n	8020dfa <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	d00f      	beq.n	8020e56 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	695b      	ldr	r3, [r3, #20]
 8020e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020e40:	2b80      	cmp	r3, #128	; 0x80
 8020e42:	d104      	bne.n	8020e4e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020e48:	4a53      	ldr	r2, [pc, #332]	; (8020f98 <HAL_UART_Abort_IT+0x220>)
 8020e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8020e4c:	e003      	b.n	8020e56 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020e52:	2200      	movs	r2, #0
 8020e54:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d00f      	beq.n	8020e7e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	681b      	ldr	r3, [r3, #0]
 8020e62:	695b      	ldr	r3, [r3, #20]
 8020e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020e68:	2b40      	cmp	r3, #64	; 0x40
 8020e6a:	d104      	bne.n	8020e76 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e70:	4a4a      	ldr	r2, [pc, #296]	; (8020f9c <HAL_UART_Abort_IT+0x224>)
 8020e72:	651a      	str	r2, [r3, #80]	; 0x50
 8020e74:	e003      	b.n	8020e7e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e7a:	2200      	movs	r2, #0
 8020e7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	695b      	ldr	r3, [r3, #20]
 8020e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020e88:	2b80      	cmp	r3, #128	; 0x80
 8020e8a:	d12d      	bne.n	8020ee8 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	681b      	ldr	r3, [r3, #0]
 8020e90:	3314      	adds	r3, #20
 8020e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e96:	e853 3f00 	ldrex	r3, [r3]
 8020e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8020e9c:	6a3b      	ldr	r3, [r7, #32]
 8020e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020ea2:	677b      	str	r3, [r7, #116]	; 0x74
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	3314      	adds	r3, #20
 8020eaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8020eac:	633a      	str	r2, [r7, #48]	; 0x30
 8020eae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020eb4:	e841 2300 	strex	r3, r2, [r1]
 8020eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8020eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d1e5      	bne.n	8020e8c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	d00f      	beq.n	8020ee8 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ecc:	4618      	mov	r0, r3
 8020ece:	f7fa fcdf 	bl	801b890 <HAL_DMA_Abort_IT>
 8020ed2:	4603      	mov	r3, r0
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d004      	beq.n	8020ee2 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020edc:	2200      	movs	r2, #0
 8020ede:	651a      	str	r2, [r3, #80]	; 0x50
 8020ee0:	e002      	b.n	8020ee8 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	681b      	ldr	r3, [r3, #0]
 8020eec:	695b      	ldr	r3, [r3, #20]
 8020eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020ef2:	2b40      	cmp	r3, #64	; 0x40
 8020ef4:	d130      	bne.n	8020f58 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	3314      	adds	r3, #20
 8020efc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020efe:	693b      	ldr	r3, [r7, #16]
 8020f00:	e853 3f00 	ldrex	r3, [r3]
 8020f04:	60fb      	str	r3, [r7, #12]
   return(result);
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020f0c:	673b      	str	r3, [r7, #112]	; 0x70
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	3314      	adds	r3, #20
 8020f14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8020f16:	61fa      	str	r2, [r7, #28]
 8020f18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020f1a:	69b9      	ldr	r1, [r7, #24]
 8020f1c:	69fa      	ldr	r2, [r7, #28]
 8020f1e:	e841 2300 	strex	r3, r2, [r1]
 8020f22:	617b      	str	r3, [r7, #20]
   return(result);
 8020f24:	697b      	ldr	r3, [r7, #20]
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d1e5      	bne.n	8020ef6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f2e:	2b00      	cmp	r3, #0
 8020f30:	d012      	beq.n	8020f58 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f36:	4618      	mov	r0, r3
 8020f38:	f7fa fcaa 	bl	801b890 <HAL_DMA_Abort_IT>
 8020f3c:	4603      	mov	r3, r0
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d007      	beq.n	8020f52 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f46:	2200      	movs	r2, #0
 8020f48:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8020f4a:	2301      	movs	r3, #1
 8020f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8020f50:	e002      	b.n	8020f58 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8020f52:	2300      	movs	r3, #0
 8020f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8020f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8020f5c:	2b01      	cmp	r3, #1
 8020f5e:	d116      	bne.n	8020f8e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	2200      	movs	r2, #0
 8020f64:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	2200      	movs	r2, #0
 8020f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	2200      	movs	r2, #0
 8020f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	2220      	movs	r2, #32
 8020f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	2220      	movs	r2, #32
 8020f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	2200      	movs	r2, #0
 8020f86:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8020f88:	6878      	ldr	r0, [r7, #4]
 8020f8a:	f000 faa1 	bl	80214d0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8020f8e:	2300      	movs	r3, #0
}
 8020f90:	4618      	mov	r0, r3
 8020f92:	3788      	adds	r7, #136	; 0x88
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}
 8020f98:	08021667 	.word	0x08021667
 8020f9c:	080216c7 	.word	0x080216c7

08020fa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8020fa0:	b580      	push	{r7, lr}
 8020fa2:	b0ba      	sub	sp, #232	; 0xe8
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	681b      	ldr	r3, [r3, #0]
 8020fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	68db      	ldr	r3, [r3, #12]
 8020fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8020fbc:	687b      	ldr	r3, [r7, #4]
 8020fbe:	681b      	ldr	r3, [r3, #0]
 8020fc0:	695b      	ldr	r3, [r3, #20]
 8020fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8020fcc:	2300      	movs	r3, #0
 8020fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8020fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020fd6:	f003 030f 	and.w	r3, r3, #15
 8020fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8020fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d10f      	bne.n	8021006 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8020fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020fea:	f003 0320 	and.w	r3, r3, #32
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d009      	beq.n	8021006 <HAL_UART_IRQHandler+0x66>
 8020ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020ff6:	f003 0320 	and.w	r3, r3, #32
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d003      	beq.n	8021006 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8020ffe:	6878      	ldr	r0, [r7, #4]
 8021000:	f000 fbf9 	bl	80217f6 <UART_Receive_IT>
      return;
 8021004:	e256      	b.n	80214b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8021006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802100a:	2b00      	cmp	r3, #0
 802100c:	f000 80de 	beq.w	80211cc <HAL_UART_IRQHandler+0x22c>
 8021010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021014:	f003 0301 	and.w	r3, r3, #1
 8021018:	2b00      	cmp	r3, #0
 802101a:	d106      	bne.n	802102a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802101c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021020:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021024:	2b00      	cmp	r3, #0
 8021026:	f000 80d1 	beq.w	80211cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802102a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802102e:	f003 0301 	and.w	r3, r3, #1
 8021032:	2b00      	cmp	r3, #0
 8021034:	d00b      	beq.n	802104e <HAL_UART_IRQHandler+0xae>
 8021036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802103a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802103e:	2b00      	cmp	r3, #0
 8021040:	d005      	beq.n	802104e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021046:	f043 0201 	orr.w	r2, r3, #1
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802104e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021052:	f003 0304 	and.w	r3, r3, #4
 8021056:	2b00      	cmp	r3, #0
 8021058:	d00b      	beq.n	8021072 <HAL_UART_IRQHandler+0xd2>
 802105a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802105e:	f003 0301 	and.w	r3, r3, #1
 8021062:	2b00      	cmp	r3, #0
 8021064:	d005      	beq.n	8021072 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802106a:	f043 0202 	orr.w	r2, r3, #2
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021076:	f003 0302 	and.w	r3, r3, #2
 802107a:	2b00      	cmp	r3, #0
 802107c:	d00b      	beq.n	8021096 <HAL_UART_IRQHandler+0xf6>
 802107e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8021082:	f003 0301 	and.w	r3, r3, #1
 8021086:	2b00      	cmp	r3, #0
 8021088:	d005      	beq.n	8021096 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802108a:	687b      	ldr	r3, [r7, #4]
 802108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802108e:	f043 0204 	orr.w	r2, r3, #4
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8021096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802109a:	f003 0308 	and.w	r3, r3, #8
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d011      	beq.n	80210c6 <HAL_UART_IRQHandler+0x126>
 80210a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80210a6:	f003 0320 	and.w	r3, r3, #32
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d105      	bne.n	80210ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80210ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80210b2:	f003 0301 	and.w	r3, r3, #1
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	d005      	beq.n	80210c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80210be:	f043 0208 	orr.w	r2, r3, #8
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80210c6:	687b      	ldr	r3, [r7, #4]
 80210c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	f000 81ed 	beq.w	80214aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80210d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80210d4:	f003 0320 	and.w	r3, r3, #32
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d008      	beq.n	80210ee <HAL_UART_IRQHandler+0x14e>
 80210dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80210e0:	f003 0320 	and.w	r3, r3, #32
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d002      	beq.n	80210ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80210e8:	6878      	ldr	r0, [r7, #4]
 80210ea:	f000 fb84 	bl	80217f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	695b      	ldr	r3, [r3, #20]
 80210f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80210f8:	2b40      	cmp	r3, #64	; 0x40
 80210fa:	bf0c      	ite	eq
 80210fc:	2301      	moveq	r3, #1
 80210fe:	2300      	movne	r3, #0
 8021100:	b2db      	uxtb	r3, r3
 8021102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802110a:	f003 0308 	and.w	r3, r3, #8
 802110e:	2b00      	cmp	r3, #0
 8021110:	d103      	bne.n	802111a <HAL_UART_IRQHandler+0x17a>
 8021112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021116:	2b00      	cmp	r3, #0
 8021118:	d04f      	beq.n	80211ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802111a:	6878      	ldr	r0, [r7, #4]
 802111c:	f000 fa2c 	bl	8021578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	681b      	ldr	r3, [r3, #0]
 8021124:	695b      	ldr	r3, [r3, #20]
 8021126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802112a:	2b40      	cmp	r3, #64	; 0x40
 802112c:	d141      	bne.n	80211b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	3314      	adds	r3, #20
 8021134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802113c:	e853 3f00 	ldrex	r3, [r3]
 8021140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8021144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802114c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	681b      	ldr	r3, [r3, #0]
 8021154:	3314      	adds	r3, #20
 8021156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802115a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802115e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8021166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802116a:	e841 2300 	strex	r3, r2, [r1]
 802116e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8021172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021176:	2b00      	cmp	r3, #0
 8021178:	d1d9      	bne.n	802112e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802117e:	2b00      	cmp	r3, #0
 8021180:	d013      	beq.n	80211aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021186:	4a7d      	ldr	r2, [pc, #500]	; (802137c <HAL_UART_IRQHandler+0x3dc>)
 8021188:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802118a:	687b      	ldr	r3, [r7, #4]
 802118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802118e:	4618      	mov	r0, r3
 8021190:	f7fa fb7e 	bl	801b890 <HAL_DMA_Abort_IT>
 8021194:	4603      	mov	r3, r0
 8021196:	2b00      	cmp	r3, #0
 8021198:	d016      	beq.n	80211c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802119e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80211a0:	687a      	ldr	r2, [r7, #4]
 80211a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80211a4:	4610      	mov	r0, r2
 80211a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80211a8:	e00e      	b.n	80211c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80211aa:	6878      	ldr	r0, [r7, #4]
 80211ac:	f000 f986 	bl	80214bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80211b0:	e00a      	b.n	80211c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80211b2:	6878      	ldr	r0, [r7, #4]
 80211b4:	f000 f982 	bl	80214bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80211b8:	e006      	b.n	80211c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80211ba:	6878      	ldr	r0, [r7, #4]
 80211bc:	f000 f97e 	bl	80214bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	2200      	movs	r2, #0
 80211c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80211c6:	e170      	b.n	80214aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80211c8:	bf00      	nop
    return;
 80211ca:	e16e      	b.n	80214aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211d0:	2b01      	cmp	r3, #1
 80211d2:	f040 814a 	bne.w	802146a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80211d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80211da:	f003 0310 	and.w	r3, r3, #16
 80211de:	2b00      	cmp	r3, #0
 80211e0:	f000 8143 	beq.w	802146a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80211e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80211e8:	f003 0310 	and.w	r3, r3, #16
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	f000 813c 	beq.w	802146a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80211f2:	2300      	movs	r3, #0
 80211f4:	60bb      	str	r3, [r7, #8]
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	60bb      	str	r3, [r7, #8]
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	681b      	ldr	r3, [r3, #0]
 8021202:	685b      	ldr	r3, [r3, #4]
 8021204:	60bb      	str	r3, [r7, #8]
 8021206:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	681b      	ldr	r3, [r3, #0]
 802120c:	695b      	ldr	r3, [r3, #20]
 802120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021212:	2b40      	cmp	r3, #64	; 0x40
 8021214:	f040 80b4 	bne.w	8021380 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	685b      	ldr	r3, [r3, #4]
 8021220:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8021224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8021228:	2b00      	cmp	r3, #0
 802122a:	f000 8140 	beq.w	80214ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8021232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021236:	429a      	cmp	r2, r3
 8021238:	f080 8139 	bcs.w	80214ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021242:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021248:	69db      	ldr	r3, [r3, #28]
 802124a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802124e:	f000 8088 	beq.w	8021362 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	330c      	adds	r3, #12
 8021258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802125c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021260:	e853 3f00 	ldrex	r3, [r3]
 8021264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8021268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802126c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	330c      	adds	r3, #12
 802127a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802127e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8021282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021286:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802128a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802128e:	e841 2300 	strex	r3, r2, [r1]
 8021292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8021296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802129a:	2b00      	cmp	r3, #0
 802129c:	d1d9      	bne.n	8021252 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	681b      	ldr	r3, [r3, #0]
 80212a2:	3314      	adds	r3, #20
 80212a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80212a8:	e853 3f00 	ldrex	r3, [r3]
 80212ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80212ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80212b0:	f023 0301 	bic.w	r3, r3, #1
 80212b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	3314      	adds	r3, #20
 80212be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80212c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80212c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80212c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80212ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80212ce:	e841 2300 	strex	r3, r2, [r1]
 80212d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80212d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	d1e1      	bne.n	802129e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80212da:	687b      	ldr	r3, [r7, #4]
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	3314      	adds	r3, #20
 80212e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80212e4:	e853 3f00 	ldrex	r3, [r3]
 80212e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80212ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80212ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80212f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	3314      	adds	r3, #20
 80212fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80212fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021300:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021304:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021306:	e841 2300 	strex	r3, r2, [r1]
 802130a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802130c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802130e:	2b00      	cmp	r3, #0
 8021310:	d1e3      	bne.n	80212da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	2220      	movs	r2, #32
 8021316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	2200      	movs	r2, #0
 802131e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	330c      	adds	r3, #12
 8021326:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802132a:	e853 3f00 	ldrex	r3, [r3]
 802132e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021332:	f023 0310 	bic.w	r3, r3, #16
 8021336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	330c      	adds	r3, #12
 8021340:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8021344:	65ba      	str	r2, [r7, #88]	; 0x58
 8021346:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802134a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802134c:	e841 2300 	strex	r3, r2, [r1]
 8021350:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8021352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021354:	2b00      	cmp	r3, #0
 8021356:	d1e3      	bne.n	8021320 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8021358:	687b      	ldr	r3, [r7, #4]
 802135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802135c:	4618      	mov	r0, r3
 802135e:	f7fa fa27 	bl	801b7b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802136a:	b29b      	uxth	r3, r3
 802136c:	1ad3      	subs	r3, r2, r3
 802136e:	b29b      	uxth	r3, r3
 8021370:	4619      	mov	r1, r3
 8021372:	6878      	ldr	r0, [r7, #4]
 8021374:	f000 f8b6 	bl	80214e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021378:	e099      	b.n	80214ae <HAL_UART_IRQHandler+0x50e>
 802137a:	bf00      	nop
 802137c:	0802163f 	.word	0x0802163f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021388:	b29b      	uxth	r3, r3
 802138a:	1ad3      	subs	r3, r2, r3
 802138c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021394:	b29b      	uxth	r3, r3
 8021396:	2b00      	cmp	r3, #0
 8021398:	f000 808b 	beq.w	80214b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802139c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	f000 8086 	beq.w	80214b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	681b      	ldr	r3, [r3, #0]
 80213aa:	330c      	adds	r3, #12
 80213ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213b0:	e853 3f00 	ldrex	r3, [r3]
 80213b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80213b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80213b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80213bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80213c0:	687b      	ldr	r3, [r7, #4]
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	330c      	adds	r3, #12
 80213c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80213ca:	647a      	str	r2, [r7, #68]	; 0x44
 80213cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80213d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80213d2:	e841 2300 	strex	r3, r2, [r1]
 80213d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80213d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d1e3      	bne.n	80213a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80213de:	687b      	ldr	r3, [r7, #4]
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	3314      	adds	r3, #20
 80213e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213e8:	e853 3f00 	ldrex	r3, [r3]
 80213ec:	623b      	str	r3, [r7, #32]
   return(result);
 80213ee:	6a3b      	ldr	r3, [r7, #32]
 80213f0:	f023 0301 	bic.w	r3, r3, #1
 80213f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	3314      	adds	r3, #20
 80213fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8021402:	633a      	str	r2, [r7, #48]	; 0x30
 8021404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802140a:	e841 2300 	strex	r3, r2, [r1]
 802140e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021412:	2b00      	cmp	r3, #0
 8021414:	d1e3      	bne.n	80213de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	2220      	movs	r2, #32
 802141a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	2200      	movs	r2, #0
 8021422:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	330c      	adds	r3, #12
 802142a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802142c:	693b      	ldr	r3, [r7, #16]
 802142e:	e853 3f00 	ldrex	r3, [r3]
 8021432:	60fb      	str	r3, [r7, #12]
   return(result);
 8021434:	68fb      	ldr	r3, [r7, #12]
 8021436:	f023 0310 	bic.w	r3, r3, #16
 802143a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	330c      	adds	r3, #12
 8021444:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8021448:	61fa      	str	r2, [r7, #28]
 802144a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802144c:	69b9      	ldr	r1, [r7, #24]
 802144e:	69fa      	ldr	r2, [r7, #28]
 8021450:	e841 2300 	strex	r3, r2, [r1]
 8021454:	617b      	str	r3, [r7, #20]
   return(result);
 8021456:	697b      	ldr	r3, [r7, #20]
 8021458:	2b00      	cmp	r3, #0
 802145a:	d1e3      	bne.n	8021424 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802145c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021460:	4619      	mov	r1, r3
 8021462:	6878      	ldr	r0, [r7, #4]
 8021464:	f000 f83e 	bl	80214e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8021468:	e023      	b.n	80214b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802146a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021472:	2b00      	cmp	r3, #0
 8021474:	d009      	beq.n	802148a <HAL_UART_IRQHandler+0x4ea>
 8021476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802147e:	2b00      	cmp	r3, #0
 8021480:	d003      	beq.n	802148a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8021482:	6878      	ldr	r0, [r7, #4]
 8021484:	f000 f94f 	bl	8021726 <UART_Transmit_IT>
    return;
 8021488:	e014      	b.n	80214b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802148a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021492:	2b00      	cmp	r3, #0
 8021494:	d00e      	beq.n	80214b4 <HAL_UART_IRQHandler+0x514>
 8021496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802149a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802149e:	2b00      	cmp	r3, #0
 80214a0:	d008      	beq.n	80214b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80214a2:	6878      	ldr	r0, [r7, #4]
 80214a4:	f000 f98f 	bl	80217c6 <UART_EndTransmit_IT>
    return;
 80214a8:	e004      	b.n	80214b4 <HAL_UART_IRQHandler+0x514>
    return;
 80214aa:	bf00      	nop
 80214ac:	e002      	b.n	80214b4 <HAL_UART_IRQHandler+0x514>
      return;
 80214ae:	bf00      	nop
 80214b0:	e000      	b.n	80214b4 <HAL_UART_IRQHandler+0x514>
      return;
 80214b2:	bf00      	nop
  }
}
 80214b4:	37e8      	adds	r7, #232	; 0xe8
 80214b6:	46bd      	mov	sp, r7
 80214b8:	bd80      	pop	{r7, pc}
 80214ba:	bf00      	nop

080214bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80214bc:	b480      	push	{r7}
 80214be:	b083      	sub	sp, #12
 80214c0:	af00      	add	r7, sp, #0
 80214c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80214c4:	bf00      	nop
 80214c6:	370c      	adds	r7, #12
 80214c8:	46bd      	mov	sp, r7
 80214ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ce:	4770      	bx	lr

080214d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80214d0:	b480      	push	{r7}
 80214d2:	b083      	sub	sp, #12
 80214d4:	af00      	add	r7, sp, #0
 80214d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80214d8:	bf00      	nop
 80214da:	370c      	adds	r7, #12
 80214dc:	46bd      	mov	sp, r7
 80214de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214e2:	4770      	bx	lr

080214e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80214e4:	b480      	push	{r7}
 80214e6:	b083      	sub	sp, #12
 80214e8:	af00      	add	r7, sp, #0
 80214ea:	6078      	str	r0, [r7, #4]
 80214ec:	460b      	mov	r3, r1
 80214ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80214f0:	bf00      	nop
 80214f2:	370c      	adds	r7, #12
 80214f4:	46bd      	mov	sp, r7
 80214f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214fa:	4770      	bx	lr

080214fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80214fc:	b480      	push	{r7}
 80214fe:	b085      	sub	sp, #20
 8021500:	af00      	add	r7, sp, #0
 8021502:	60f8      	str	r0, [r7, #12]
 8021504:	60b9      	str	r1, [r7, #8]
 8021506:	4613      	mov	r3, r2
 8021508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	68ba      	ldr	r2, [r7, #8]
 802150e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8021510:	68fb      	ldr	r3, [r7, #12]
 8021512:	88fa      	ldrh	r2, [r7, #6]
 8021514:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8021516:	68fb      	ldr	r3, [r7, #12]
 8021518:	88fa      	ldrh	r2, [r7, #6]
 802151a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802151c:	68fb      	ldr	r3, [r7, #12]
 802151e:	2200      	movs	r2, #0
 8021520:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	2222      	movs	r2, #34	; 0x22
 8021526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802152a:	68fb      	ldr	r3, [r7, #12]
 802152c:	2200      	movs	r2, #0
 802152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	691b      	ldr	r3, [r3, #16]
 8021536:	2b00      	cmp	r3, #0
 8021538:	d007      	beq.n	802154a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802153a:	68fb      	ldr	r3, [r7, #12]
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	68da      	ldr	r2, [r3, #12]
 8021540:	68fb      	ldr	r3, [r7, #12]
 8021542:	681b      	ldr	r3, [r3, #0]
 8021544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021548:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802154a:	68fb      	ldr	r3, [r7, #12]
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	695a      	ldr	r2, [r3, #20]
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	681b      	ldr	r3, [r3, #0]
 8021554:	f042 0201 	orr.w	r2, r2, #1
 8021558:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802155a:	68fb      	ldr	r3, [r7, #12]
 802155c:	681b      	ldr	r3, [r3, #0]
 802155e:	68da      	ldr	r2, [r3, #12]
 8021560:	68fb      	ldr	r3, [r7, #12]
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	f042 0220 	orr.w	r2, r2, #32
 8021568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802156a:	2300      	movs	r3, #0
}
 802156c:	4618      	mov	r0, r3
 802156e:	3714      	adds	r7, #20
 8021570:	46bd      	mov	sp, r7
 8021572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021576:	4770      	bx	lr

08021578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021578:	b480      	push	{r7}
 802157a:	b095      	sub	sp, #84	; 0x54
 802157c:	af00      	add	r7, sp, #0
 802157e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	330c      	adds	r3, #12
 8021586:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802158a:	e853 3f00 	ldrex	r3, [r3]
 802158e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8021590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	681b      	ldr	r3, [r3, #0]
 802159c:	330c      	adds	r3, #12
 802159e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80215a0:	643a      	str	r2, [r7, #64]	; 0x40
 80215a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80215a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80215a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80215a8:	e841 2300 	strex	r3, r2, [r1]
 80215ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80215ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d1e5      	bne.n	8021580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	681b      	ldr	r3, [r3, #0]
 80215b8:	3314      	adds	r3, #20
 80215ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80215bc:	6a3b      	ldr	r3, [r7, #32]
 80215be:	e853 3f00 	ldrex	r3, [r3]
 80215c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80215c4:	69fb      	ldr	r3, [r7, #28]
 80215c6:	f023 0301 	bic.w	r3, r3, #1
 80215ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	3314      	adds	r3, #20
 80215d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80215d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80215d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80215d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80215da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80215dc:	e841 2300 	strex	r3, r2, [r1]
 80215e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80215e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d1e5      	bne.n	80215b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215ec:	2b01      	cmp	r3, #1
 80215ee:	d119      	bne.n	8021624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	681b      	ldr	r3, [r3, #0]
 80215f4:	330c      	adds	r3, #12
 80215f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80215f8:	68fb      	ldr	r3, [r7, #12]
 80215fa:	e853 3f00 	ldrex	r3, [r3]
 80215fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8021600:	68bb      	ldr	r3, [r7, #8]
 8021602:	f023 0310 	bic.w	r3, r3, #16
 8021606:	647b      	str	r3, [r7, #68]	; 0x44
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	681b      	ldr	r3, [r3, #0]
 802160c:	330c      	adds	r3, #12
 802160e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021610:	61ba      	str	r2, [r7, #24]
 8021612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021614:	6979      	ldr	r1, [r7, #20]
 8021616:	69ba      	ldr	r2, [r7, #24]
 8021618:	e841 2300 	strex	r3, r2, [r1]
 802161c:	613b      	str	r3, [r7, #16]
   return(result);
 802161e:	693b      	ldr	r3, [r7, #16]
 8021620:	2b00      	cmp	r3, #0
 8021622:	d1e5      	bne.n	80215f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	2220      	movs	r2, #32
 8021628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	2200      	movs	r2, #0
 8021630:	631a      	str	r2, [r3, #48]	; 0x30
}
 8021632:	bf00      	nop
 8021634:	3754      	adds	r7, #84	; 0x54
 8021636:	46bd      	mov	sp, r7
 8021638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802163c:	4770      	bx	lr

0802163e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802163e:	b580      	push	{r7, lr}
 8021640:	b084      	sub	sp, #16
 8021642:	af00      	add	r7, sp, #0
 8021644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802164a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802164c:	68fb      	ldr	r3, [r7, #12]
 802164e:	2200      	movs	r2, #0
 8021650:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	2200      	movs	r2, #0
 8021656:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8021658:	68f8      	ldr	r0, [r7, #12]
 802165a:	f7ff ff2f 	bl	80214bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802165e:	bf00      	nop
 8021660:	3710      	adds	r7, #16
 8021662:	46bd      	mov	sp, r7
 8021664:	bd80      	pop	{r7, pc}

08021666 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8021666:	b580      	push	{r7, lr}
 8021668:	b084      	sub	sp, #16
 802166a:	af00      	add	r7, sp, #0
 802166c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802166e:	687b      	ldr	r3, [r7, #4]
 8021670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021672:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021678:	2200      	movs	r2, #0
 802167a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 802167c:	68fb      	ldr	r3, [r7, #12]
 802167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021680:	2b00      	cmp	r3, #0
 8021682:	d004      	beq.n	802168e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8021684:	68fb      	ldr	r3, [r7, #12]
 8021686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802168a:	2b00      	cmp	r3, #0
 802168c:	d117      	bne.n	80216be <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802168e:	68fb      	ldr	r3, [r7, #12]
 8021690:	2200      	movs	r2, #0
 8021692:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8021694:	68fb      	ldr	r3, [r7, #12]
 8021696:	2200      	movs	r2, #0
 8021698:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802169a:	68fb      	ldr	r3, [r7, #12]
 802169c:	2200      	movs	r2, #0
 802169e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80216a0:	68fb      	ldr	r3, [r7, #12]
 80216a2:	2220      	movs	r2, #32
 80216a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80216a8:	68fb      	ldr	r3, [r7, #12]
 80216aa:	2220      	movs	r2, #32
 80216ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80216b0:	68fb      	ldr	r3, [r7, #12]
 80216b2:	2200      	movs	r2, #0
 80216b4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80216b6:	68f8      	ldr	r0, [r7, #12]
 80216b8:	f7ff ff0a 	bl	80214d0 <HAL_UART_AbortCpltCallback>
 80216bc:	e000      	b.n	80216c0 <UART_DMATxAbortCallback+0x5a>
      return;
 80216be:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80216c0:	3710      	adds	r7, #16
 80216c2:	46bd      	mov	sp, r7
 80216c4:	bd80      	pop	{r7, pc}

080216c6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80216c6:	b580      	push	{r7, lr}
 80216c8:	b084      	sub	sp, #16
 80216ca:	af00      	add	r7, sp, #0
 80216cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216d2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216d8:	2200      	movs	r2, #0
 80216da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80216dc:	68fb      	ldr	r3, [r7, #12]
 80216de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	d004      	beq.n	80216ee <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80216e4:	68fb      	ldr	r3, [r7, #12]
 80216e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80216e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80216ea:	2b00      	cmp	r3, #0
 80216ec:	d117      	bne.n	802171e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80216ee:	68fb      	ldr	r3, [r7, #12]
 80216f0:	2200      	movs	r2, #0
 80216f2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80216f4:	68fb      	ldr	r3, [r7, #12]
 80216f6:	2200      	movs	r2, #0
 80216f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80216fa:	68fb      	ldr	r3, [r7, #12]
 80216fc:	2200      	movs	r2, #0
 80216fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8021700:	68fb      	ldr	r3, [r7, #12]
 8021702:	2220      	movs	r2, #32
 8021704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021708:	68fb      	ldr	r3, [r7, #12]
 802170a:	2220      	movs	r2, #32
 802170c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021710:	68fb      	ldr	r3, [r7, #12]
 8021712:	2200      	movs	r2, #0
 8021714:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8021716:	68f8      	ldr	r0, [r7, #12]
 8021718:	f7ff feda 	bl	80214d0 <HAL_UART_AbortCpltCallback>
 802171c:	e000      	b.n	8021720 <UART_DMARxAbortCallback+0x5a>
      return;
 802171e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8021720:	3710      	adds	r7, #16
 8021722:	46bd      	mov	sp, r7
 8021724:	bd80      	pop	{r7, pc}

08021726 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8021726:	b480      	push	{r7}
 8021728:	b085      	sub	sp, #20
 802172a:	af00      	add	r7, sp, #0
 802172c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021734:	b2db      	uxtb	r3, r3
 8021736:	2b21      	cmp	r3, #33	; 0x21
 8021738:	d13e      	bne.n	80217b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	689b      	ldr	r3, [r3, #8]
 802173e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021742:	d114      	bne.n	802176e <UART_Transmit_IT+0x48>
 8021744:	687b      	ldr	r3, [r7, #4]
 8021746:	691b      	ldr	r3, [r3, #16]
 8021748:	2b00      	cmp	r3, #0
 802174a:	d110      	bne.n	802176e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	6a1b      	ldr	r3, [r3, #32]
 8021750:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8021752:	68fb      	ldr	r3, [r7, #12]
 8021754:	881b      	ldrh	r3, [r3, #0]
 8021756:	461a      	mov	r2, r3
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	681b      	ldr	r3, [r3, #0]
 802175c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021760:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	6a1b      	ldr	r3, [r3, #32]
 8021766:	1c9a      	adds	r2, r3, #2
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	621a      	str	r2, [r3, #32]
 802176c:	e008      	b.n	8021780 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	6a1b      	ldr	r3, [r3, #32]
 8021772:	1c59      	adds	r1, r3, #1
 8021774:	687a      	ldr	r2, [r7, #4]
 8021776:	6211      	str	r1, [r2, #32]
 8021778:	781a      	ldrb	r2, [r3, #0]
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	681b      	ldr	r3, [r3, #0]
 802177e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021784:	b29b      	uxth	r3, r3
 8021786:	3b01      	subs	r3, #1
 8021788:	b29b      	uxth	r3, r3
 802178a:	687a      	ldr	r2, [r7, #4]
 802178c:	4619      	mov	r1, r3
 802178e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8021790:	2b00      	cmp	r3, #0
 8021792:	d10f      	bne.n	80217b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	68da      	ldr	r2, [r3, #12]
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80217a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	681b      	ldr	r3, [r3, #0]
 80217a8:	68da      	ldr	r2, [r3, #12]
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	681b      	ldr	r3, [r3, #0]
 80217ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80217b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80217b4:	2300      	movs	r3, #0
 80217b6:	e000      	b.n	80217ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80217b8:	2302      	movs	r3, #2
  }
}
 80217ba:	4618      	mov	r0, r3
 80217bc:	3714      	adds	r7, #20
 80217be:	46bd      	mov	sp, r7
 80217c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217c4:	4770      	bx	lr

080217c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80217c6:	b580      	push	{r7, lr}
 80217c8:	b082      	sub	sp, #8
 80217ca:	af00      	add	r7, sp, #0
 80217cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	681b      	ldr	r3, [r3, #0]
 80217d2:	68da      	ldr	r2, [r3, #12]
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80217dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	2220      	movs	r2, #32
 80217e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80217e6:	6878      	ldr	r0, [r7, #4]
 80217e8:	f7e0 fe52 	bl	8002490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80217ec:	2300      	movs	r3, #0
}
 80217ee:	4618      	mov	r0, r3
 80217f0:	3708      	adds	r7, #8
 80217f2:	46bd      	mov	sp, r7
 80217f4:	bd80      	pop	{r7, pc}

080217f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80217f6:	b580      	push	{r7, lr}
 80217f8:	b08c      	sub	sp, #48	; 0x30
 80217fa:	af00      	add	r7, sp, #0
 80217fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021804:	b2db      	uxtb	r3, r3
 8021806:	2b22      	cmp	r3, #34	; 0x22
 8021808:	f040 80ab 	bne.w	8021962 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	689b      	ldr	r3, [r3, #8]
 8021810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021814:	d117      	bne.n	8021846 <UART_Receive_IT+0x50>
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	691b      	ldr	r3, [r3, #16]
 802181a:	2b00      	cmp	r3, #0
 802181c:	d113      	bne.n	8021846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802181e:	2300      	movs	r3, #0
 8021820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021826:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8021828:	687b      	ldr	r3, [r7, #4]
 802182a:	681b      	ldr	r3, [r3, #0]
 802182c:	685b      	ldr	r3, [r3, #4]
 802182e:	b29b      	uxth	r3, r3
 8021830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021834:	b29a      	uxth	r2, r3
 8021836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802183a:	687b      	ldr	r3, [r7, #4]
 802183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802183e:	1c9a      	adds	r2, r3, #2
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	629a      	str	r2, [r3, #40]	; 0x28
 8021844:	e026      	b.n	8021894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802184a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802184c:	2300      	movs	r3, #0
 802184e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	689b      	ldr	r3, [r3, #8]
 8021854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021858:	d007      	beq.n	802186a <UART_Receive_IT+0x74>
 802185a:	687b      	ldr	r3, [r7, #4]
 802185c:	689b      	ldr	r3, [r3, #8]
 802185e:	2b00      	cmp	r3, #0
 8021860:	d10a      	bne.n	8021878 <UART_Receive_IT+0x82>
 8021862:	687b      	ldr	r3, [r7, #4]
 8021864:	691b      	ldr	r3, [r3, #16]
 8021866:	2b00      	cmp	r3, #0
 8021868:	d106      	bne.n	8021878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	685b      	ldr	r3, [r3, #4]
 8021870:	b2da      	uxtb	r2, r3
 8021872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021874:	701a      	strb	r2, [r3, #0]
 8021876:	e008      	b.n	802188a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	681b      	ldr	r3, [r3, #0]
 802187c:	685b      	ldr	r3, [r3, #4]
 802187e:	b2db      	uxtb	r3, r3
 8021880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021884:	b2da      	uxtb	r2, r3
 8021886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802188a:	687b      	ldr	r3, [r7, #4]
 802188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802188e:	1c5a      	adds	r2, r3, #1
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021898:	b29b      	uxth	r3, r3
 802189a:	3b01      	subs	r3, #1
 802189c:	b29b      	uxth	r3, r3
 802189e:	687a      	ldr	r2, [r7, #4]
 80218a0:	4619      	mov	r1, r3
 80218a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d15a      	bne.n	802195e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	68da      	ldr	r2, [r3, #12]
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	681b      	ldr	r3, [r3, #0]
 80218b2:	f022 0220 	bic.w	r2, r2, #32
 80218b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	681b      	ldr	r3, [r3, #0]
 80218bc:	68da      	ldr	r2, [r3, #12]
 80218be:	687b      	ldr	r3, [r7, #4]
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80218c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	681b      	ldr	r3, [r3, #0]
 80218cc:	695a      	ldr	r2, [r3, #20]
 80218ce:	687b      	ldr	r3, [r7, #4]
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	f022 0201 	bic.w	r2, r2, #1
 80218d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	2220      	movs	r2, #32
 80218dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218e4:	2b01      	cmp	r3, #1
 80218e6:	d135      	bne.n	8021954 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	2200      	movs	r2, #0
 80218ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	330c      	adds	r3, #12
 80218f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80218f6:	697b      	ldr	r3, [r7, #20]
 80218f8:	e853 3f00 	ldrex	r3, [r3]
 80218fc:	613b      	str	r3, [r7, #16]
   return(result);
 80218fe:	693b      	ldr	r3, [r7, #16]
 8021900:	f023 0310 	bic.w	r3, r3, #16
 8021904:	627b      	str	r3, [r7, #36]	; 0x24
 8021906:	687b      	ldr	r3, [r7, #4]
 8021908:	681b      	ldr	r3, [r3, #0]
 802190a:	330c      	adds	r3, #12
 802190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802190e:	623a      	str	r2, [r7, #32]
 8021910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021912:	69f9      	ldr	r1, [r7, #28]
 8021914:	6a3a      	ldr	r2, [r7, #32]
 8021916:	e841 2300 	strex	r3, r2, [r1]
 802191a:	61bb      	str	r3, [r7, #24]
   return(result);
 802191c:	69bb      	ldr	r3, [r7, #24]
 802191e:	2b00      	cmp	r3, #0
 8021920:	d1e5      	bne.n	80218ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	681b      	ldr	r3, [r3, #0]
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	f003 0310 	and.w	r3, r3, #16
 802192c:	2b10      	cmp	r3, #16
 802192e:	d10a      	bne.n	8021946 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021930:	2300      	movs	r3, #0
 8021932:	60fb      	str	r3, [r7, #12]
 8021934:	687b      	ldr	r3, [r7, #4]
 8021936:	681b      	ldr	r3, [r3, #0]
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	60fb      	str	r3, [r7, #12]
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	685b      	ldr	r3, [r3, #4]
 8021942:	60fb      	str	r3, [r7, #12]
 8021944:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802194a:	4619      	mov	r1, r3
 802194c:	6878      	ldr	r0, [r7, #4]
 802194e:	f7ff fdc9 	bl	80214e4 <HAL_UARTEx_RxEventCallback>
 8021952:	e002      	b.n	802195a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8021954:	6878      	ldr	r0, [r7, #4]
 8021956:	f7e0 fe23 	bl	80025a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802195a:	2300      	movs	r3, #0
 802195c:	e002      	b.n	8021964 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802195e:	2300      	movs	r3, #0
 8021960:	e000      	b.n	8021964 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8021962:	2302      	movs	r3, #2
  }
}
 8021964:	4618      	mov	r0, r3
 8021966:	3730      	adds	r7, #48	; 0x30
 8021968:	46bd      	mov	sp, r7
 802196a:	bd80      	pop	{r7, pc}

0802196c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802196c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021970:	b0c0      	sub	sp, #256	; 0x100
 8021972:	af00      	add	r7, sp, #0
 8021974:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802197c:	681b      	ldr	r3, [r3, #0]
 802197e:	691b      	ldr	r3, [r3, #16]
 8021980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8021984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021988:	68d9      	ldr	r1, [r3, #12]
 802198a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802198e:	681a      	ldr	r2, [r3, #0]
 8021990:	ea40 0301 	orr.w	r3, r0, r1
 8021994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802199a:	689a      	ldr	r2, [r3, #8]
 802199c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219a0:	691b      	ldr	r3, [r3, #16]
 80219a2:	431a      	orrs	r2, r3
 80219a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219a8:	695b      	ldr	r3, [r3, #20]
 80219aa:	431a      	orrs	r2, r3
 80219ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219b0:	69db      	ldr	r3, [r3, #28]
 80219b2:	4313      	orrs	r3, r2
 80219b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80219b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219bc:	681b      	ldr	r3, [r3, #0]
 80219be:	68db      	ldr	r3, [r3, #12]
 80219c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80219c4:	f021 010c 	bic.w	r1, r1, #12
 80219c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219cc:	681a      	ldr	r2, [r3, #0]
 80219ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80219d2:	430b      	orrs	r3, r1
 80219d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80219d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219da:	681b      	ldr	r3, [r3, #0]
 80219dc:	695b      	ldr	r3, [r3, #20]
 80219de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80219e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219e6:	6999      	ldr	r1, [r3, #24]
 80219e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219ec:	681a      	ldr	r2, [r3, #0]
 80219ee:	ea40 0301 	orr.w	r3, r0, r1
 80219f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80219f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80219f8:	681a      	ldr	r2, [r3, #0]
 80219fa:	4b8f      	ldr	r3, [pc, #572]	; (8021c38 <UART_SetConfig+0x2cc>)
 80219fc:	429a      	cmp	r2, r3
 80219fe:	d005      	beq.n	8021a0c <UART_SetConfig+0xa0>
 8021a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021a04:	681a      	ldr	r2, [r3, #0]
 8021a06:	4b8d      	ldr	r3, [pc, #564]	; (8021c3c <UART_SetConfig+0x2d0>)
 8021a08:	429a      	cmp	r2, r3
 8021a0a:	d104      	bne.n	8021a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021a0c:	f7fe f82a 	bl	801fa64 <HAL_RCC_GetPCLK2Freq>
 8021a10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8021a14:	e003      	b.n	8021a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021a16:	f7fe f811 	bl	801fa3c <HAL_RCC_GetPCLK1Freq>
 8021a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021a22:	69db      	ldr	r3, [r3, #28]
 8021a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021a28:	f040 810c 	bne.w	8021c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021a30:	2200      	movs	r2, #0
 8021a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8021a36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8021a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8021a3e:	4622      	mov	r2, r4
 8021a40:	462b      	mov	r3, r5
 8021a42:	1891      	adds	r1, r2, r2
 8021a44:	65b9      	str	r1, [r7, #88]	; 0x58
 8021a46:	415b      	adcs	r3, r3
 8021a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8021a4e:	4621      	mov	r1, r4
 8021a50:	eb12 0801 	adds.w	r8, r2, r1
 8021a54:	4629      	mov	r1, r5
 8021a56:	eb43 0901 	adc.w	r9, r3, r1
 8021a5a:	f04f 0200 	mov.w	r2, #0
 8021a5e:	f04f 0300 	mov.w	r3, #0
 8021a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021a6e:	4690      	mov	r8, r2
 8021a70:	4699      	mov	r9, r3
 8021a72:	4623      	mov	r3, r4
 8021a74:	eb18 0303 	adds.w	r3, r8, r3
 8021a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8021a7c:	462b      	mov	r3, r5
 8021a7e:	eb49 0303 	adc.w	r3, r9, r3
 8021a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8021a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021a8a:	685b      	ldr	r3, [r3, #4]
 8021a8c:	2200      	movs	r2, #0
 8021a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8021a92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8021a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8021a9a:	460b      	mov	r3, r1
 8021a9c:	18db      	adds	r3, r3, r3
 8021a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8021aa0:	4613      	mov	r3, r2
 8021aa2:	eb42 0303 	adc.w	r3, r2, r3
 8021aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8021aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8021aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8021ab0:	f7df f9f0 	bl	8000e94 <__aeabi_uldivmod>
 8021ab4:	4602      	mov	r2, r0
 8021ab6:	460b      	mov	r3, r1
 8021ab8:	4b61      	ldr	r3, [pc, #388]	; (8021c40 <UART_SetConfig+0x2d4>)
 8021aba:	fba3 2302 	umull	r2, r3, r3, r2
 8021abe:	095b      	lsrs	r3, r3, #5
 8021ac0:	011c      	lsls	r4, r3, #4
 8021ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021ac6:	2200      	movs	r2, #0
 8021ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021acc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8021ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8021ad4:	4642      	mov	r2, r8
 8021ad6:	464b      	mov	r3, r9
 8021ad8:	1891      	adds	r1, r2, r2
 8021ada:	64b9      	str	r1, [r7, #72]	; 0x48
 8021adc:	415b      	adcs	r3, r3
 8021ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8021ae4:	4641      	mov	r1, r8
 8021ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8021aea:	4649      	mov	r1, r9
 8021aec:	eb43 0b01 	adc.w	fp, r3, r1
 8021af0:	f04f 0200 	mov.w	r2, #0
 8021af4:	f04f 0300 	mov.w	r3, #0
 8021af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8021afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8021b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021b04:	4692      	mov	sl, r2
 8021b06:	469b      	mov	fp, r3
 8021b08:	4643      	mov	r3, r8
 8021b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8021b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021b12:	464b      	mov	r3, r9
 8021b14:	eb4b 0303 	adc.w	r3, fp, r3
 8021b18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8021b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021b20:	685b      	ldr	r3, [r3, #4]
 8021b22:	2200      	movs	r2, #0
 8021b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8021b28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8021b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8021b30:	460b      	mov	r3, r1
 8021b32:	18db      	adds	r3, r3, r3
 8021b34:	643b      	str	r3, [r7, #64]	; 0x40
 8021b36:	4613      	mov	r3, r2
 8021b38:	eb42 0303 	adc.w	r3, r2, r3
 8021b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8021b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8021b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8021b46:	f7df f9a5 	bl	8000e94 <__aeabi_uldivmod>
 8021b4a:	4602      	mov	r2, r0
 8021b4c:	460b      	mov	r3, r1
 8021b4e:	4611      	mov	r1, r2
 8021b50:	4b3b      	ldr	r3, [pc, #236]	; (8021c40 <UART_SetConfig+0x2d4>)
 8021b52:	fba3 2301 	umull	r2, r3, r3, r1
 8021b56:	095b      	lsrs	r3, r3, #5
 8021b58:	2264      	movs	r2, #100	; 0x64
 8021b5a:	fb02 f303 	mul.w	r3, r2, r3
 8021b5e:	1acb      	subs	r3, r1, r3
 8021b60:	00db      	lsls	r3, r3, #3
 8021b62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8021b66:	4b36      	ldr	r3, [pc, #216]	; (8021c40 <UART_SetConfig+0x2d4>)
 8021b68:	fba3 2302 	umull	r2, r3, r3, r2
 8021b6c:	095b      	lsrs	r3, r3, #5
 8021b6e:	005b      	lsls	r3, r3, #1
 8021b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021b74:	441c      	add	r4, r3
 8021b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021b7a:	2200      	movs	r2, #0
 8021b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8021b80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8021b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8021b88:	4642      	mov	r2, r8
 8021b8a:	464b      	mov	r3, r9
 8021b8c:	1891      	adds	r1, r2, r2
 8021b8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8021b90:	415b      	adcs	r3, r3
 8021b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8021b98:	4641      	mov	r1, r8
 8021b9a:	1851      	adds	r1, r2, r1
 8021b9c:	6339      	str	r1, [r7, #48]	; 0x30
 8021b9e:	4649      	mov	r1, r9
 8021ba0:	414b      	adcs	r3, r1
 8021ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8021ba4:	f04f 0200 	mov.w	r2, #0
 8021ba8:	f04f 0300 	mov.w	r3, #0
 8021bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8021bb0:	4659      	mov	r1, fp
 8021bb2:	00cb      	lsls	r3, r1, #3
 8021bb4:	4651      	mov	r1, sl
 8021bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021bba:	4651      	mov	r1, sl
 8021bbc:	00ca      	lsls	r2, r1, #3
 8021bbe:	4610      	mov	r0, r2
 8021bc0:	4619      	mov	r1, r3
 8021bc2:	4603      	mov	r3, r0
 8021bc4:	4642      	mov	r2, r8
 8021bc6:	189b      	adds	r3, r3, r2
 8021bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8021bcc:	464b      	mov	r3, r9
 8021bce:	460a      	mov	r2, r1
 8021bd0:	eb42 0303 	adc.w	r3, r2, r3
 8021bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8021bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021bdc:	685b      	ldr	r3, [r3, #4]
 8021bde:	2200      	movs	r2, #0
 8021be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8021be4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8021be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8021bec:	460b      	mov	r3, r1
 8021bee:	18db      	adds	r3, r3, r3
 8021bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8021bf2:	4613      	mov	r3, r2
 8021bf4:	eb42 0303 	adc.w	r3, r2, r3
 8021bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8021bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8021c02:	f7df f947 	bl	8000e94 <__aeabi_uldivmod>
 8021c06:	4602      	mov	r2, r0
 8021c08:	460b      	mov	r3, r1
 8021c0a:	4b0d      	ldr	r3, [pc, #52]	; (8021c40 <UART_SetConfig+0x2d4>)
 8021c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8021c10:	095b      	lsrs	r3, r3, #5
 8021c12:	2164      	movs	r1, #100	; 0x64
 8021c14:	fb01 f303 	mul.w	r3, r1, r3
 8021c18:	1ad3      	subs	r3, r2, r3
 8021c1a:	00db      	lsls	r3, r3, #3
 8021c1c:	3332      	adds	r3, #50	; 0x32
 8021c1e:	4a08      	ldr	r2, [pc, #32]	; (8021c40 <UART_SetConfig+0x2d4>)
 8021c20:	fba2 2303 	umull	r2, r3, r2, r3
 8021c24:	095b      	lsrs	r3, r3, #5
 8021c26:	f003 0207 	and.w	r2, r3, #7
 8021c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021c2e:	681b      	ldr	r3, [r3, #0]
 8021c30:	4422      	add	r2, r4
 8021c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8021c34:	e105      	b.n	8021e42 <UART_SetConfig+0x4d6>
 8021c36:	bf00      	nop
 8021c38:	40011000 	.word	0x40011000
 8021c3c:	40011400 	.word	0x40011400
 8021c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021c48:	2200      	movs	r2, #0
 8021c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8021c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8021c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8021c56:	4642      	mov	r2, r8
 8021c58:	464b      	mov	r3, r9
 8021c5a:	1891      	adds	r1, r2, r2
 8021c5c:	6239      	str	r1, [r7, #32]
 8021c5e:	415b      	adcs	r3, r3
 8021c60:	627b      	str	r3, [r7, #36]	; 0x24
 8021c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8021c66:	4641      	mov	r1, r8
 8021c68:	1854      	adds	r4, r2, r1
 8021c6a:	4649      	mov	r1, r9
 8021c6c:	eb43 0501 	adc.w	r5, r3, r1
 8021c70:	f04f 0200 	mov.w	r2, #0
 8021c74:	f04f 0300 	mov.w	r3, #0
 8021c78:	00eb      	lsls	r3, r5, #3
 8021c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8021c7e:	00e2      	lsls	r2, r4, #3
 8021c80:	4614      	mov	r4, r2
 8021c82:	461d      	mov	r5, r3
 8021c84:	4643      	mov	r3, r8
 8021c86:	18e3      	adds	r3, r4, r3
 8021c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8021c8c:	464b      	mov	r3, r9
 8021c8e:	eb45 0303 	adc.w	r3, r5, r3
 8021c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8021c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021c9a:	685b      	ldr	r3, [r3, #4]
 8021c9c:	2200      	movs	r2, #0
 8021c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8021ca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8021ca6:	f04f 0200 	mov.w	r2, #0
 8021caa:	f04f 0300 	mov.w	r3, #0
 8021cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8021cb2:	4629      	mov	r1, r5
 8021cb4:	008b      	lsls	r3, r1, #2
 8021cb6:	4621      	mov	r1, r4
 8021cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021cbc:	4621      	mov	r1, r4
 8021cbe:	008a      	lsls	r2, r1, #2
 8021cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8021cc4:	f7df f8e6 	bl	8000e94 <__aeabi_uldivmod>
 8021cc8:	4602      	mov	r2, r0
 8021cca:	460b      	mov	r3, r1
 8021ccc:	4b60      	ldr	r3, [pc, #384]	; (8021e50 <UART_SetConfig+0x4e4>)
 8021cce:	fba3 2302 	umull	r2, r3, r3, r2
 8021cd2:	095b      	lsrs	r3, r3, #5
 8021cd4:	011c      	lsls	r4, r3, #4
 8021cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021cda:	2200      	movs	r2, #0
 8021cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8021ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8021ce8:	4642      	mov	r2, r8
 8021cea:	464b      	mov	r3, r9
 8021cec:	1891      	adds	r1, r2, r2
 8021cee:	61b9      	str	r1, [r7, #24]
 8021cf0:	415b      	adcs	r3, r3
 8021cf2:	61fb      	str	r3, [r7, #28]
 8021cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021cf8:	4641      	mov	r1, r8
 8021cfa:	1851      	adds	r1, r2, r1
 8021cfc:	6139      	str	r1, [r7, #16]
 8021cfe:	4649      	mov	r1, r9
 8021d00:	414b      	adcs	r3, r1
 8021d02:	617b      	str	r3, [r7, #20]
 8021d04:	f04f 0200 	mov.w	r2, #0
 8021d08:	f04f 0300 	mov.w	r3, #0
 8021d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021d10:	4659      	mov	r1, fp
 8021d12:	00cb      	lsls	r3, r1, #3
 8021d14:	4651      	mov	r1, sl
 8021d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021d1a:	4651      	mov	r1, sl
 8021d1c:	00ca      	lsls	r2, r1, #3
 8021d1e:	4610      	mov	r0, r2
 8021d20:	4619      	mov	r1, r3
 8021d22:	4603      	mov	r3, r0
 8021d24:	4642      	mov	r2, r8
 8021d26:	189b      	adds	r3, r3, r2
 8021d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021d2c:	464b      	mov	r3, r9
 8021d2e:	460a      	mov	r2, r1
 8021d30:	eb42 0303 	adc.w	r3, r2, r3
 8021d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021d3c:	685b      	ldr	r3, [r3, #4]
 8021d3e:	2200      	movs	r2, #0
 8021d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8021d42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8021d44:	f04f 0200 	mov.w	r2, #0
 8021d48:	f04f 0300 	mov.w	r3, #0
 8021d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8021d50:	4649      	mov	r1, r9
 8021d52:	008b      	lsls	r3, r1, #2
 8021d54:	4641      	mov	r1, r8
 8021d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021d5a:	4641      	mov	r1, r8
 8021d5c:	008a      	lsls	r2, r1, #2
 8021d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8021d62:	f7df f897 	bl	8000e94 <__aeabi_uldivmod>
 8021d66:	4602      	mov	r2, r0
 8021d68:	460b      	mov	r3, r1
 8021d6a:	4b39      	ldr	r3, [pc, #228]	; (8021e50 <UART_SetConfig+0x4e4>)
 8021d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8021d70:	095b      	lsrs	r3, r3, #5
 8021d72:	2164      	movs	r1, #100	; 0x64
 8021d74:	fb01 f303 	mul.w	r3, r1, r3
 8021d78:	1ad3      	subs	r3, r2, r3
 8021d7a:	011b      	lsls	r3, r3, #4
 8021d7c:	3332      	adds	r3, #50	; 0x32
 8021d7e:	4a34      	ldr	r2, [pc, #208]	; (8021e50 <UART_SetConfig+0x4e4>)
 8021d80:	fba2 2303 	umull	r2, r3, r2, r3
 8021d84:	095b      	lsrs	r3, r3, #5
 8021d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d8a:	441c      	add	r4, r3
 8021d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021d90:	2200      	movs	r2, #0
 8021d92:	673b      	str	r3, [r7, #112]	; 0x70
 8021d94:	677a      	str	r2, [r7, #116]	; 0x74
 8021d96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8021d9a:	4642      	mov	r2, r8
 8021d9c:	464b      	mov	r3, r9
 8021d9e:	1891      	adds	r1, r2, r2
 8021da0:	60b9      	str	r1, [r7, #8]
 8021da2:	415b      	adcs	r3, r3
 8021da4:	60fb      	str	r3, [r7, #12]
 8021da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021daa:	4641      	mov	r1, r8
 8021dac:	1851      	adds	r1, r2, r1
 8021dae:	6039      	str	r1, [r7, #0]
 8021db0:	4649      	mov	r1, r9
 8021db2:	414b      	adcs	r3, r1
 8021db4:	607b      	str	r3, [r7, #4]
 8021db6:	f04f 0200 	mov.w	r2, #0
 8021dba:	f04f 0300 	mov.w	r3, #0
 8021dbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8021dc2:	4659      	mov	r1, fp
 8021dc4:	00cb      	lsls	r3, r1, #3
 8021dc6:	4651      	mov	r1, sl
 8021dc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8021dcc:	4651      	mov	r1, sl
 8021dce:	00ca      	lsls	r2, r1, #3
 8021dd0:	4610      	mov	r0, r2
 8021dd2:	4619      	mov	r1, r3
 8021dd4:	4603      	mov	r3, r0
 8021dd6:	4642      	mov	r2, r8
 8021dd8:	189b      	adds	r3, r3, r2
 8021dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8021ddc:	464b      	mov	r3, r9
 8021dde:	460a      	mov	r2, r1
 8021de0:	eb42 0303 	adc.w	r3, r2, r3
 8021de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021dea:	685b      	ldr	r3, [r3, #4]
 8021dec:	2200      	movs	r2, #0
 8021dee:	663b      	str	r3, [r7, #96]	; 0x60
 8021df0:	667a      	str	r2, [r7, #100]	; 0x64
 8021df2:	f04f 0200 	mov.w	r2, #0
 8021df6:	f04f 0300 	mov.w	r3, #0
 8021dfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8021dfe:	4649      	mov	r1, r9
 8021e00:	008b      	lsls	r3, r1, #2
 8021e02:	4641      	mov	r1, r8
 8021e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8021e08:	4641      	mov	r1, r8
 8021e0a:	008a      	lsls	r2, r1, #2
 8021e0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8021e10:	f7df f840 	bl	8000e94 <__aeabi_uldivmod>
 8021e14:	4602      	mov	r2, r0
 8021e16:	460b      	mov	r3, r1
 8021e18:	4b0d      	ldr	r3, [pc, #52]	; (8021e50 <UART_SetConfig+0x4e4>)
 8021e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8021e1e:	095b      	lsrs	r3, r3, #5
 8021e20:	2164      	movs	r1, #100	; 0x64
 8021e22:	fb01 f303 	mul.w	r3, r1, r3
 8021e26:	1ad3      	subs	r3, r2, r3
 8021e28:	011b      	lsls	r3, r3, #4
 8021e2a:	3332      	adds	r3, #50	; 0x32
 8021e2c:	4a08      	ldr	r2, [pc, #32]	; (8021e50 <UART_SetConfig+0x4e4>)
 8021e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8021e32:	095b      	lsrs	r3, r3, #5
 8021e34:	f003 020f 	and.w	r2, r3, #15
 8021e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021e3c:	681b      	ldr	r3, [r3, #0]
 8021e3e:	4422      	add	r2, r4
 8021e40:	609a      	str	r2, [r3, #8]
}
 8021e42:	bf00      	nop
 8021e44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8021e48:	46bd      	mov	sp, r7
 8021e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021e4e:	bf00      	nop
 8021e50:	51eb851f 	.word	0x51eb851f

08021e54 <atoi>:
 8021e54:	220a      	movs	r2, #10
 8021e56:	2100      	movs	r1, #0
 8021e58:	f000 ba6a 	b.w	8022330 <strtol>

08021e5c <calloc>:
 8021e5c:	4b02      	ldr	r3, [pc, #8]	; (8021e68 <calloc+0xc>)
 8021e5e:	460a      	mov	r2, r1
 8021e60:	4601      	mov	r1, r0
 8021e62:	6818      	ldr	r0, [r3, #0]
 8021e64:	f000 b852 	b.w	8021f0c <_calloc_r>
 8021e68:	20000098 	.word	0x20000098

08021e6c <__errno>:
 8021e6c:	4b01      	ldr	r3, [pc, #4]	; (8021e74 <__errno+0x8>)
 8021e6e:	6818      	ldr	r0, [r3, #0]
 8021e70:	4770      	bx	lr
 8021e72:	bf00      	nop
 8021e74:	20000098 	.word	0x20000098

08021e78 <__libc_init_array>:
 8021e78:	b570      	push	{r4, r5, r6, lr}
 8021e7a:	4d0d      	ldr	r5, [pc, #52]	; (8021eb0 <__libc_init_array+0x38>)
 8021e7c:	4c0d      	ldr	r4, [pc, #52]	; (8021eb4 <__libc_init_array+0x3c>)
 8021e7e:	1b64      	subs	r4, r4, r5
 8021e80:	10a4      	asrs	r4, r4, #2
 8021e82:	2600      	movs	r6, #0
 8021e84:	42a6      	cmp	r6, r4
 8021e86:	d109      	bne.n	8021e9c <__libc_init_array+0x24>
 8021e88:	4d0b      	ldr	r5, [pc, #44]	; (8021eb8 <__libc_init_array+0x40>)
 8021e8a:	4c0c      	ldr	r4, [pc, #48]	; (8021ebc <__libc_init_array+0x44>)
 8021e8c:	f002 ff00 	bl	8024c90 <_init>
 8021e90:	1b64      	subs	r4, r4, r5
 8021e92:	10a4      	asrs	r4, r4, #2
 8021e94:	2600      	movs	r6, #0
 8021e96:	42a6      	cmp	r6, r4
 8021e98:	d105      	bne.n	8021ea6 <__libc_init_array+0x2e>
 8021e9a:	bd70      	pop	{r4, r5, r6, pc}
 8021e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021ea0:	4798      	blx	r3
 8021ea2:	3601      	adds	r6, #1
 8021ea4:	e7ee      	b.n	8021e84 <__libc_init_array+0xc>
 8021ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8021eaa:	4798      	blx	r3
 8021eac:	3601      	adds	r6, #1
 8021eae:	e7f2      	b.n	8021e96 <__libc_init_array+0x1e>
 8021eb0:	08028a60 	.word	0x08028a60
 8021eb4:	08028a60 	.word	0x08028a60
 8021eb8:	08028a60 	.word	0x08028a60
 8021ebc:	08028a64 	.word	0x08028a64

08021ec0 <malloc>:
 8021ec0:	4b02      	ldr	r3, [pc, #8]	; (8021ecc <malloc+0xc>)
 8021ec2:	4601      	mov	r1, r0
 8021ec4:	6818      	ldr	r0, [r3, #0]
 8021ec6:	f000 b8a3 	b.w	8022010 <_malloc_r>
 8021eca:	bf00      	nop
 8021ecc:	20000098 	.word	0x20000098

08021ed0 <free>:
 8021ed0:	4b02      	ldr	r3, [pc, #8]	; (8021edc <free+0xc>)
 8021ed2:	4601      	mov	r1, r0
 8021ed4:	6818      	ldr	r0, [r3, #0]
 8021ed6:	f000 b82f 	b.w	8021f38 <_free_r>
 8021eda:	bf00      	nop
 8021edc:	20000098 	.word	0x20000098

08021ee0 <memcpy>:
 8021ee0:	440a      	add	r2, r1
 8021ee2:	4291      	cmp	r1, r2
 8021ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8021ee8:	d100      	bne.n	8021eec <memcpy+0xc>
 8021eea:	4770      	bx	lr
 8021eec:	b510      	push	{r4, lr}
 8021eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021ef6:	4291      	cmp	r1, r2
 8021ef8:	d1f9      	bne.n	8021eee <memcpy+0xe>
 8021efa:	bd10      	pop	{r4, pc}

08021efc <memset>:
 8021efc:	4402      	add	r2, r0
 8021efe:	4603      	mov	r3, r0
 8021f00:	4293      	cmp	r3, r2
 8021f02:	d100      	bne.n	8021f06 <memset+0xa>
 8021f04:	4770      	bx	lr
 8021f06:	f803 1b01 	strb.w	r1, [r3], #1
 8021f0a:	e7f9      	b.n	8021f00 <memset+0x4>

08021f0c <_calloc_r>:
 8021f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021f0e:	fba1 2402 	umull	r2, r4, r1, r2
 8021f12:	b94c      	cbnz	r4, 8021f28 <_calloc_r+0x1c>
 8021f14:	4611      	mov	r1, r2
 8021f16:	9201      	str	r2, [sp, #4]
 8021f18:	f000 f87a 	bl	8022010 <_malloc_r>
 8021f1c:	9a01      	ldr	r2, [sp, #4]
 8021f1e:	4605      	mov	r5, r0
 8021f20:	b930      	cbnz	r0, 8021f30 <_calloc_r+0x24>
 8021f22:	4628      	mov	r0, r5
 8021f24:	b003      	add	sp, #12
 8021f26:	bd30      	pop	{r4, r5, pc}
 8021f28:	220c      	movs	r2, #12
 8021f2a:	6002      	str	r2, [r0, #0]
 8021f2c:	2500      	movs	r5, #0
 8021f2e:	e7f8      	b.n	8021f22 <_calloc_r+0x16>
 8021f30:	4621      	mov	r1, r4
 8021f32:	f7ff ffe3 	bl	8021efc <memset>
 8021f36:	e7f4      	b.n	8021f22 <_calloc_r+0x16>

08021f38 <_free_r>:
 8021f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021f3a:	2900      	cmp	r1, #0
 8021f3c:	d044      	beq.n	8021fc8 <_free_r+0x90>
 8021f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f42:	9001      	str	r0, [sp, #4]
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	f1a1 0404 	sub.w	r4, r1, #4
 8021f4a:	bfb8      	it	lt
 8021f4c:	18e4      	addlt	r4, r4, r3
 8021f4e:	f000 f9f9 	bl	8022344 <__malloc_lock>
 8021f52:	4a1e      	ldr	r2, [pc, #120]	; (8021fcc <_free_r+0x94>)
 8021f54:	9801      	ldr	r0, [sp, #4]
 8021f56:	6813      	ldr	r3, [r2, #0]
 8021f58:	b933      	cbnz	r3, 8021f68 <_free_r+0x30>
 8021f5a:	6063      	str	r3, [r4, #4]
 8021f5c:	6014      	str	r4, [r2, #0]
 8021f5e:	b003      	add	sp, #12
 8021f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021f64:	f000 b9f4 	b.w	8022350 <__malloc_unlock>
 8021f68:	42a3      	cmp	r3, r4
 8021f6a:	d908      	bls.n	8021f7e <_free_r+0x46>
 8021f6c:	6825      	ldr	r5, [r4, #0]
 8021f6e:	1961      	adds	r1, r4, r5
 8021f70:	428b      	cmp	r3, r1
 8021f72:	bf01      	itttt	eq
 8021f74:	6819      	ldreq	r1, [r3, #0]
 8021f76:	685b      	ldreq	r3, [r3, #4]
 8021f78:	1949      	addeq	r1, r1, r5
 8021f7a:	6021      	streq	r1, [r4, #0]
 8021f7c:	e7ed      	b.n	8021f5a <_free_r+0x22>
 8021f7e:	461a      	mov	r2, r3
 8021f80:	685b      	ldr	r3, [r3, #4]
 8021f82:	b10b      	cbz	r3, 8021f88 <_free_r+0x50>
 8021f84:	42a3      	cmp	r3, r4
 8021f86:	d9fa      	bls.n	8021f7e <_free_r+0x46>
 8021f88:	6811      	ldr	r1, [r2, #0]
 8021f8a:	1855      	adds	r5, r2, r1
 8021f8c:	42a5      	cmp	r5, r4
 8021f8e:	d10b      	bne.n	8021fa8 <_free_r+0x70>
 8021f90:	6824      	ldr	r4, [r4, #0]
 8021f92:	4421      	add	r1, r4
 8021f94:	1854      	adds	r4, r2, r1
 8021f96:	42a3      	cmp	r3, r4
 8021f98:	6011      	str	r1, [r2, #0]
 8021f9a:	d1e0      	bne.n	8021f5e <_free_r+0x26>
 8021f9c:	681c      	ldr	r4, [r3, #0]
 8021f9e:	685b      	ldr	r3, [r3, #4]
 8021fa0:	6053      	str	r3, [r2, #4]
 8021fa2:	4421      	add	r1, r4
 8021fa4:	6011      	str	r1, [r2, #0]
 8021fa6:	e7da      	b.n	8021f5e <_free_r+0x26>
 8021fa8:	d902      	bls.n	8021fb0 <_free_r+0x78>
 8021faa:	230c      	movs	r3, #12
 8021fac:	6003      	str	r3, [r0, #0]
 8021fae:	e7d6      	b.n	8021f5e <_free_r+0x26>
 8021fb0:	6825      	ldr	r5, [r4, #0]
 8021fb2:	1961      	adds	r1, r4, r5
 8021fb4:	428b      	cmp	r3, r1
 8021fb6:	bf04      	itt	eq
 8021fb8:	6819      	ldreq	r1, [r3, #0]
 8021fba:	685b      	ldreq	r3, [r3, #4]
 8021fbc:	6063      	str	r3, [r4, #4]
 8021fbe:	bf04      	itt	eq
 8021fc0:	1949      	addeq	r1, r1, r5
 8021fc2:	6021      	streq	r1, [r4, #0]
 8021fc4:	6054      	str	r4, [r2, #4]
 8021fc6:	e7ca      	b.n	8021f5e <_free_r+0x26>
 8021fc8:	b003      	add	sp, #12
 8021fca:	bd30      	pop	{r4, r5, pc}
 8021fcc:	2000227c 	.word	0x2000227c

08021fd0 <sbrk_aligned>:
 8021fd0:	b570      	push	{r4, r5, r6, lr}
 8021fd2:	4e0e      	ldr	r6, [pc, #56]	; (802200c <sbrk_aligned+0x3c>)
 8021fd4:	460c      	mov	r4, r1
 8021fd6:	6831      	ldr	r1, [r6, #0]
 8021fd8:	4605      	mov	r5, r0
 8021fda:	b911      	cbnz	r1, 8021fe2 <sbrk_aligned+0x12>
 8021fdc:	f000 f88c 	bl	80220f8 <_sbrk_r>
 8021fe0:	6030      	str	r0, [r6, #0]
 8021fe2:	4621      	mov	r1, r4
 8021fe4:	4628      	mov	r0, r5
 8021fe6:	f000 f887 	bl	80220f8 <_sbrk_r>
 8021fea:	1c43      	adds	r3, r0, #1
 8021fec:	d00a      	beq.n	8022004 <sbrk_aligned+0x34>
 8021fee:	1cc4      	adds	r4, r0, #3
 8021ff0:	f024 0403 	bic.w	r4, r4, #3
 8021ff4:	42a0      	cmp	r0, r4
 8021ff6:	d007      	beq.n	8022008 <sbrk_aligned+0x38>
 8021ff8:	1a21      	subs	r1, r4, r0
 8021ffa:	4628      	mov	r0, r5
 8021ffc:	f000 f87c 	bl	80220f8 <_sbrk_r>
 8022000:	3001      	adds	r0, #1
 8022002:	d101      	bne.n	8022008 <sbrk_aligned+0x38>
 8022004:	f04f 34ff 	mov.w	r4, #4294967295
 8022008:	4620      	mov	r0, r4
 802200a:	bd70      	pop	{r4, r5, r6, pc}
 802200c:	20002280 	.word	0x20002280

08022010 <_malloc_r>:
 8022010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022014:	1ccd      	adds	r5, r1, #3
 8022016:	f025 0503 	bic.w	r5, r5, #3
 802201a:	3508      	adds	r5, #8
 802201c:	2d0c      	cmp	r5, #12
 802201e:	bf38      	it	cc
 8022020:	250c      	movcc	r5, #12
 8022022:	2d00      	cmp	r5, #0
 8022024:	4607      	mov	r7, r0
 8022026:	db01      	blt.n	802202c <_malloc_r+0x1c>
 8022028:	42a9      	cmp	r1, r5
 802202a:	d905      	bls.n	8022038 <_malloc_r+0x28>
 802202c:	230c      	movs	r3, #12
 802202e:	603b      	str	r3, [r7, #0]
 8022030:	2600      	movs	r6, #0
 8022032:	4630      	mov	r0, r6
 8022034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022038:	4e2e      	ldr	r6, [pc, #184]	; (80220f4 <_malloc_r+0xe4>)
 802203a:	f000 f983 	bl	8022344 <__malloc_lock>
 802203e:	6833      	ldr	r3, [r6, #0]
 8022040:	461c      	mov	r4, r3
 8022042:	bb34      	cbnz	r4, 8022092 <_malloc_r+0x82>
 8022044:	4629      	mov	r1, r5
 8022046:	4638      	mov	r0, r7
 8022048:	f7ff ffc2 	bl	8021fd0 <sbrk_aligned>
 802204c:	1c43      	adds	r3, r0, #1
 802204e:	4604      	mov	r4, r0
 8022050:	d14d      	bne.n	80220ee <_malloc_r+0xde>
 8022052:	6834      	ldr	r4, [r6, #0]
 8022054:	4626      	mov	r6, r4
 8022056:	2e00      	cmp	r6, #0
 8022058:	d140      	bne.n	80220dc <_malloc_r+0xcc>
 802205a:	6823      	ldr	r3, [r4, #0]
 802205c:	4631      	mov	r1, r6
 802205e:	4638      	mov	r0, r7
 8022060:	eb04 0803 	add.w	r8, r4, r3
 8022064:	f000 f848 	bl	80220f8 <_sbrk_r>
 8022068:	4580      	cmp	r8, r0
 802206a:	d13a      	bne.n	80220e2 <_malloc_r+0xd2>
 802206c:	6821      	ldr	r1, [r4, #0]
 802206e:	3503      	adds	r5, #3
 8022070:	1a6d      	subs	r5, r5, r1
 8022072:	f025 0503 	bic.w	r5, r5, #3
 8022076:	3508      	adds	r5, #8
 8022078:	2d0c      	cmp	r5, #12
 802207a:	bf38      	it	cc
 802207c:	250c      	movcc	r5, #12
 802207e:	4629      	mov	r1, r5
 8022080:	4638      	mov	r0, r7
 8022082:	f7ff ffa5 	bl	8021fd0 <sbrk_aligned>
 8022086:	3001      	adds	r0, #1
 8022088:	d02b      	beq.n	80220e2 <_malloc_r+0xd2>
 802208a:	6823      	ldr	r3, [r4, #0]
 802208c:	442b      	add	r3, r5
 802208e:	6023      	str	r3, [r4, #0]
 8022090:	e00e      	b.n	80220b0 <_malloc_r+0xa0>
 8022092:	6822      	ldr	r2, [r4, #0]
 8022094:	1b52      	subs	r2, r2, r5
 8022096:	d41e      	bmi.n	80220d6 <_malloc_r+0xc6>
 8022098:	2a0b      	cmp	r2, #11
 802209a:	d916      	bls.n	80220ca <_malloc_r+0xba>
 802209c:	1961      	adds	r1, r4, r5
 802209e:	42a3      	cmp	r3, r4
 80220a0:	6025      	str	r5, [r4, #0]
 80220a2:	bf18      	it	ne
 80220a4:	6059      	strne	r1, [r3, #4]
 80220a6:	6863      	ldr	r3, [r4, #4]
 80220a8:	bf08      	it	eq
 80220aa:	6031      	streq	r1, [r6, #0]
 80220ac:	5162      	str	r2, [r4, r5]
 80220ae:	604b      	str	r3, [r1, #4]
 80220b0:	4638      	mov	r0, r7
 80220b2:	f104 060b 	add.w	r6, r4, #11
 80220b6:	f000 f94b 	bl	8022350 <__malloc_unlock>
 80220ba:	f026 0607 	bic.w	r6, r6, #7
 80220be:	1d23      	adds	r3, r4, #4
 80220c0:	1af2      	subs	r2, r6, r3
 80220c2:	d0b6      	beq.n	8022032 <_malloc_r+0x22>
 80220c4:	1b9b      	subs	r3, r3, r6
 80220c6:	50a3      	str	r3, [r4, r2]
 80220c8:	e7b3      	b.n	8022032 <_malloc_r+0x22>
 80220ca:	6862      	ldr	r2, [r4, #4]
 80220cc:	42a3      	cmp	r3, r4
 80220ce:	bf0c      	ite	eq
 80220d0:	6032      	streq	r2, [r6, #0]
 80220d2:	605a      	strne	r2, [r3, #4]
 80220d4:	e7ec      	b.n	80220b0 <_malloc_r+0xa0>
 80220d6:	4623      	mov	r3, r4
 80220d8:	6864      	ldr	r4, [r4, #4]
 80220da:	e7b2      	b.n	8022042 <_malloc_r+0x32>
 80220dc:	4634      	mov	r4, r6
 80220de:	6876      	ldr	r6, [r6, #4]
 80220e0:	e7b9      	b.n	8022056 <_malloc_r+0x46>
 80220e2:	230c      	movs	r3, #12
 80220e4:	603b      	str	r3, [r7, #0]
 80220e6:	4638      	mov	r0, r7
 80220e8:	f000 f932 	bl	8022350 <__malloc_unlock>
 80220ec:	e7a1      	b.n	8022032 <_malloc_r+0x22>
 80220ee:	6025      	str	r5, [r4, #0]
 80220f0:	e7de      	b.n	80220b0 <_malloc_r+0xa0>
 80220f2:	bf00      	nop
 80220f4:	2000227c 	.word	0x2000227c

080220f8 <_sbrk_r>:
 80220f8:	b538      	push	{r3, r4, r5, lr}
 80220fa:	4d06      	ldr	r5, [pc, #24]	; (8022114 <_sbrk_r+0x1c>)
 80220fc:	2300      	movs	r3, #0
 80220fe:	4604      	mov	r4, r0
 8022100:	4608      	mov	r0, r1
 8022102:	602b      	str	r3, [r5, #0]
 8022104:	f7e1 fd8a 	bl	8003c1c <_sbrk>
 8022108:	1c43      	adds	r3, r0, #1
 802210a:	d102      	bne.n	8022112 <_sbrk_r+0x1a>
 802210c:	682b      	ldr	r3, [r5, #0]
 802210e:	b103      	cbz	r3, 8022112 <_sbrk_r+0x1a>
 8022110:	6023      	str	r3, [r4, #0]
 8022112:	bd38      	pop	{r3, r4, r5, pc}
 8022114:	20002284 	.word	0x20002284

08022118 <strcasecmp>:
 8022118:	b530      	push	{r4, r5, lr}
 802211a:	4d0b      	ldr	r5, [pc, #44]	; (8022148 <strcasecmp+0x30>)
 802211c:	4604      	mov	r4, r0
 802211e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022122:	5d5a      	ldrb	r2, [r3, r5]
 8022124:	f002 0203 	and.w	r2, r2, #3
 8022128:	2a01      	cmp	r2, #1
 802212a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802212e:	5ca8      	ldrb	r0, [r5, r2]
 8022130:	f000 0003 	and.w	r0, r0, #3
 8022134:	bf08      	it	eq
 8022136:	3320      	addeq	r3, #32
 8022138:	2801      	cmp	r0, #1
 802213a:	bf08      	it	eq
 802213c:	3220      	addeq	r2, #32
 802213e:	1a98      	subs	r0, r3, r2
 8022140:	d101      	bne.n	8022146 <strcasecmp+0x2e>
 8022142:	2a00      	cmp	r2, #0
 8022144:	d1eb      	bne.n	802211e <strcasecmp+0x6>
 8022146:	bd30      	pop	{r4, r5, pc}
 8022148:	0802834d 	.word	0x0802834d

0802214c <strcat>:
 802214c:	b510      	push	{r4, lr}
 802214e:	4602      	mov	r2, r0
 8022150:	7814      	ldrb	r4, [r2, #0]
 8022152:	4613      	mov	r3, r2
 8022154:	3201      	adds	r2, #1
 8022156:	2c00      	cmp	r4, #0
 8022158:	d1fa      	bne.n	8022150 <strcat+0x4>
 802215a:	3b01      	subs	r3, #1
 802215c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022160:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022164:	2a00      	cmp	r2, #0
 8022166:	d1f9      	bne.n	802215c <strcat+0x10>
 8022168:	bd10      	pop	{r4, pc}

0802216a <strchr>:
 802216a:	b2c9      	uxtb	r1, r1
 802216c:	4603      	mov	r3, r0
 802216e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022172:	b11a      	cbz	r2, 802217c <strchr+0x12>
 8022174:	428a      	cmp	r2, r1
 8022176:	d1f9      	bne.n	802216c <strchr+0x2>
 8022178:	4618      	mov	r0, r3
 802217a:	4770      	bx	lr
 802217c:	2900      	cmp	r1, #0
 802217e:	bf18      	it	ne
 8022180:	2300      	movne	r3, #0
 8022182:	e7f9      	b.n	8022178 <strchr+0xe>

08022184 <strcpy>:
 8022184:	4603      	mov	r3, r0
 8022186:	f811 2b01 	ldrb.w	r2, [r1], #1
 802218a:	f803 2b01 	strb.w	r2, [r3], #1
 802218e:	2a00      	cmp	r2, #0
 8022190:	d1f9      	bne.n	8022186 <strcpy+0x2>
 8022192:	4770      	bx	lr

08022194 <strncasecmp>:
 8022194:	b570      	push	{r4, r5, r6, lr}
 8022196:	4e0f      	ldr	r6, [pc, #60]	; (80221d4 <strncasecmp+0x40>)
 8022198:	4604      	mov	r4, r0
 802219a:	440a      	add	r2, r1
 802219c:	428a      	cmp	r2, r1
 802219e:	d101      	bne.n	80221a4 <strncasecmp+0x10>
 80221a0:	2000      	movs	r0, #0
 80221a2:	e013      	b.n	80221cc <strncasecmp+0x38>
 80221a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80221a8:	5d98      	ldrb	r0, [r3, r6]
 80221aa:	f000 0003 	and.w	r0, r0, #3
 80221ae:	2801      	cmp	r0, #1
 80221b0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80221b4:	5c35      	ldrb	r5, [r6, r0]
 80221b6:	f005 0503 	and.w	r5, r5, #3
 80221ba:	bf08      	it	eq
 80221bc:	3320      	addeq	r3, #32
 80221be:	2d01      	cmp	r5, #1
 80221c0:	bf08      	it	eq
 80221c2:	3020      	addeq	r0, #32
 80221c4:	1a1b      	subs	r3, r3, r0
 80221c6:	d102      	bne.n	80221ce <strncasecmp+0x3a>
 80221c8:	2800      	cmp	r0, #0
 80221ca:	d1e7      	bne.n	802219c <strncasecmp+0x8>
 80221cc:	bd70      	pop	{r4, r5, r6, pc}
 80221ce:	4618      	mov	r0, r3
 80221d0:	e7fc      	b.n	80221cc <strncasecmp+0x38>
 80221d2:	bf00      	nop
 80221d4:	0802834d 	.word	0x0802834d

080221d8 <strncpy>:
 80221d8:	b510      	push	{r4, lr}
 80221da:	3901      	subs	r1, #1
 80221dc:	4603      	mov	r3, r0
 80221de:	b132      	cbz	r2, 80221ee <strncpy+0x16>
 80221e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80221e4:	f803 4b01 	strb.w	r4, [r3], #1
 80221e8:	3a01      	subs	r2, #1
 80221ea:	2c00      	cmp	r4, #0
 80221ec:	d1f7      	bne.n	80221de <strncpy+0x6>
 80221ee:	441a      	add	r2, r3
 80221f0:	2100      	movs	r1, #0
 80221f2:	4293      	cmp	r3, r2
 80221f4:	d100      	bne.n	80221f8 <strncpy+0x20>
 80221f6:	bd10      	pop	{r4, pc}
 80221f8:	f803 1b01 	strb.w	r1, [r3], #1
 80221fc:	e7f9      	b.n	80221f2 <strncpy+0x1a>

080221fe <strstr>:
 80221fe:	780a      	ldrb	r2, [r1, #0]
 8022200:	b570      	push	{r4, r5, r6, lr}
 8022202:	b96a      	cbnz	r2, 8022220 <strstr+0x22>
 8022204:	bd70      	pop	{r4, r5, r6, pc}
 8022206:	429a      	cmp	r2, r3
 8022208:	d109      	bne.n	802221e <strstr+0x20>
 802220a:	460c      	mov	r4, r1
 802220c:	4605      	mov	r5, r0
 802220e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022212:	2b00      	cmp	r3, #0
 8022214:	d0f6      	beq.n	8022204 <strstr+0x6>
 8022216:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802221a:	429e      	cmp	r6, r3
 802221c:	d0f7      	beq.n	802220e <strstr+0x10>
 802221e:	3001      	adds	r0, #1
 8022220:	7803      	ldrb	r3, [r0, #0]
 8022222:	2b00      	cmp	r3, #0
 8022224:	d1ef      	bne.n	8022206 <strstr+0x8>
 8022226:	4618      	mov	r0, r3
 8022228:	e7ec      	b.n	8022204 <strstr+0x6>
	...

0802222c <_strtol_l.constprop.0>:
 802222c:	2b01      	cmp	r3, #1
 802222e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022232:	d001      	beq.n	8022238 <_strtol_l.constprop.0+0xc>
 8022234:	2b24      	cmp	r3, #36	; 0x24
 8022236:	d906      	bls.n	8022246 <_strtol_l.constprop.0+0x1a>
 8022238:	f7ff fe18 	bl	8021e6c <__errno>
 802223c:	2316      	movs	r3, #22
 802223e:	6003      	str	r3, [r0, #0]
 8022240:	2000      	movs	r0, #0
 8022242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022246:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802232c <_strtol_l.constprop.0+0x100>
 802224a:	460d      	mov	r5, r1
 802224c:	462e      	mov	r6, r5
 802224e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022252:	f814 700c 	ldrb.w	r7, [r4, ip]
 8022256:	f017 0708 	ands.w	r7, r7, #8
 802225a:	d1f7      	bne.n	802224c <_strtol_l.constprop.0+0x20>
 802225c:	2c2d      	cmp	r4, #45	; 0x2d
 802225e:	d132      	bne.n	80222c6 <_strtol_l.constprop.0+0x9a>
 8022260:	782c      	ldrb	r4, [r5, #0]
 8022262:	2701      	movs	r7, #1
 8022264:	1cb5      	adds	r5, r6, #2
 8022266:	2b00      	cmp	r3, #0
 8022268:	d05b      	beq.n	8022322 <_strtol_l.constprop.0+0xf6>
 802226a:	2b10      	cmp	r3, #16
 802226c:	d109      	bne.n	8022282 <_strtol_l.constprop.0+0x56>
 802226e:	2c30      	cmp	r4, #48	; 0x30
 8022270:	d107      	bne.n	8022282 <_strtol_l.constprop.0+0x56>
 8022272:	782c      	ldrb	r4, [r5, #0]
 8022274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022278:	2c58      	cmp	r4, #88	; 0x58
 802227a:	d14d      	bne.n	8022318 <_strtol_l.constprop.0+0xec>
 802227c:	786c      	ldrb	r4, [r5, #1]
 802227e:	2310      	movs	r3, #16
 8022280:	3502      	adds	r5, #2
 8022282:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022286:	f108 38ff 	add.w	r8, r8, #4294967295
 802228a:	f04f 0c00 	mov.w	ip, #0
 802228e:	fbb8 f9f3 	udiv	r9, r8, r3
 8022292:	4666      	mov	r6, ip
 8022294:	fb03 8a19 	mls	sl, r3, r9, r8
 8022298:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802229c:	f1be 0f09 	cmp.w	lr, #9
 80222a0:	d816      	bhi.n	80222d0 <_strtol_l.constprop.0+0xa4>
 80222a2:	4674      	mov	r4, lr
 80222a4:	42a3      	cmp	r3, r4
 80222a6:	dd24      	ble.n	80222f2 <_strtol_l.constprop.0+0xc6>
 80222a8:	f1bc 0f00 	cmp.w	ip, #0
 80222ac:	db1e      	blt.n	80222ec <_strtol_l.constprop.0+0xc0>
 80222ae:	45b1      	cmp	r9, r6
 80222b0:	d31c      	bcc.n	80222ec <_strtol_l.constprop.0+0xc0>
 80222b2:	d101      	bne.n	80222b8 <_strtol_l.constprop.0+0x8c>
 80222b4:	45a2      	cmp	sl, r4
 80222b6:	db19      	blt.n	80222ec <_strtol_l.constprop.0+0xc0>
 80222b8:	fb06 4603 	mla	r6, r6, r3, r4
 80222bc:	f04f 0c01 	mov.w	ip, #1
 80222c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80222c4:	e7e8      	b.n	8022298 <_strtol_l.constprop.0+0x6c>
 80222c6:	2c2b      	cmp	r4, #43	; 0x2b
 80222c8:	bf04      	itt	eq
 80222ca:	782c      	ldrbeq	r4, [r5, #0]
 80222cc:	1cb5      	addeq	r5, r6, #2
 80222ce:	e7ca      	b.n	8022266 <_strtol_l.constprop.0+0x3a>
 80222d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80222d4:	f1be 0f19 	cmp.w	lr, #25
 80222d8:	d801      	bhi.n	80222de <_strtol_l.constprop.0+0xb2>
 80222da:	3c37      	subs	r4, #55	; 0x37
 80222dc:	e7e2      	b.n	80222a4 <_strtol_l.constprop.0+0x78>
 80222de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80222e2:	f1be 0f19 	cmp.w	lr, #25
 80222e6:	d804      	bhi.n	80222f2 <_strtol_l.constprop.0+0xc6>
 80222e8:	3c57      	subs	r4, #87	; 0x57
 80222ea:	e7db      	b.n	80222a4 <_strtol_l.constprop.0+0x78>
 80222ec:	f04f 3cff 	mov.w	ip, #4294967295
 80222f0:	e7e6      	b.n	80222c0 <_strtol_l.constprop.0+0x94>
 80222f2:	f1bc 0f00 	cmp.w	ip, #0
 80222f6:	da05      	bge.n	8022304 <_strtol_l.constprop.0+0xd8>
 80222f8:	2322      	movs	r3, #34	; 0x22
 80222fa:	6003      	str	r3, [r0, #0]
 80222fc:	4646      	mov	r6, r8
 80222fe:	b942      	cbnz	r2, 8022312 <_strtol_l.constprop.0+0xe6>
 8022300:	4630      	mov	r0, r6
 8022302:	e79e      	b.n	8022242 <_strtol_l.constprop.0+0x16>
 8022304:	b107      	cbz	r7, 8022308 <_strtol_l.constprop.0+0xdc>
 8022306:	4276      	negs	r6, r6
 8022308:	2a00      	cmp	r2, #0
 802230a:	d0f9      	beq.n	8022300 <_strtol_l.constprop.0+0xd4>
 802230c:	f1bc 0f00 	cmp.w	ip, #0
 8022310:	d000      	beq.n	8022314 <_strtol_l.constprop.0+0xe8>
 8022312:	1e69      	subs	r1, r5, #1
 8022314:	6011      	str	r1, [r2, #0]
 8022316:	e7f3      	b.n	8022300 <_strtol_l.constprop.0+0xd4>
 8022318:	2430      	movs	r4, #48	; 0x30
 802231a:	2b00      	cmp	r3, #0
 802231c:	d1b1      	bne.n	8022282 <_strtol_l.constprop.0+0x56>
 802231e:	2308      	movs	r3, #8
 8022320:	e7af      	b.n	8022282 <_strtol_l.constprop.0+0x56>
 8022322:	2c30      	cmp	r4, #48	; 0x30
 8022324:	d0a5      	beq.n	8022272 <_strtol_l.constprop.0+0x46>
 8022326:	230a      	movs	r3, #10
 8022328:	e7ab      	b.n	8022282 <_strtol_l.constprop.0+0x56>
 802232a:	bf00      	nop
 802232c:	0802834d 	.word	0x0802834d

08022330 <strtol>:
 8022330:	4613      	mov	r3, r2
 8022332:	460a      	mov	r2, r1
 8022334:	4601      	mov	r1, r0
 8022336:	4802      	ldr	r0, [pc, #8]	; (8022340 <strtol+0x10>)
 8022338:	6800      	ldr	r0, [r0, #0]
 802233a:	f7ff bf77 	b.w	802222c <_strtol_l.constprop.0>
 802233e:	bf00      	nop
 8022340:	20000098 	.word	0x20000098

08022344 <__malloc_lock>:
 8022344:	4801      	ldr	r0, [pc, #4]	; (802234c <__malloc_lock+0x8>)
 8022346:	f000 b809 	b.w	802235c <__retarget_lock_acquire_recursive>
 802234a:	bf00      	nop
 802234c:	20002288 	.word	0x20002288

08022350 <__malloc_unlock>:
 8022350:	4801      	ldr	r0, [pc, #4]	; (8022358 <__malloc_unlock+0x8>)
 8022352:	f000 b804 	b.w	802235e <__retarget_lock_release_recursive>
 8022356:	bf00      	nop
 8022358:	20002288 	.word	0x20002288

0802235c <__retarget_lock_acquire_recursive>:
 802235c:	4770      	bx	lr

0802235e <__retarget_lock_release_recursive>:
 802235e:	4770      	bx	lr

08022360 <cos>:
 8022360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022362:	ec53 2b10 	vmov	r2, r3, d0
 8022366:	4826      	ldr	r0, [pc, #152]	; (8022400 <cos+0xa0>)
 8022368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802236c:	4281      	cmp	r1, r0
 802236e:	dc06      	bgt.n	802237e <cos+0x1e>
 8022370:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80223f8 <cos+0x98>
 8022374:	b005      	add	sp, #20
 8022376:	f85d eb04 	ldr.w	lr, [sp], #4
 802237a:	f001 b9c1 	b.w	8023700 <__kernel_cos>
 802237e:	4821      	ldr	r0, [pc, #132]	; (8022404 <cos+0xa4>)
 8022380:	4281      	cmp	r1, r0
 8022382:	dd09      	ble.n	8022398 <cos+0x38>
 8022384:	ee10 0a10 	vmov	r0, s0
 8022388:	4619      	mov	r1, r3
 802238a:	f7dd ff3b 	bl	8000204 <__aeabi_dsub>
 802238e:	ec41 0b10 	vmov	d0, r0, r1
 8022392:	b005      	add	sp, #20
 8022394:	f85d fb04 	ldr.w	pc, [sp], #4
 8022398:	4668      	mov	r0, sp
 802239a:	f000 f9fd 	bl	8022798 <__ieee754_rem_pio2>
 802239e:	f000 0003 	and.w	r0, r0, #3
 80223a2:	2801      	cmp	r0, #1
 80223a4:	d00b      	beq.n	80223be <cos+0x5e>
 80223a6:	2802      	cmp	r0, #2
 80223a8:	d016      	beq.n	80223d8 <cos+0x78>
 80223aa:	b9e0      	cbnz	r0, 80223e6 <cos+0x86>
 80223ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80223b0:	ed9d 0b00 	vldr	d0, [sp]
 80223b4:	f001 f9a4 	bl	8023700 <__kernel_cos>
 80223b8:	ec51 0b10 	vmov	r0, r1, d0
 80223bc:	e7e7      	b.n	802238e <cos+0x2e>
 80223be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80223c2:	ed9d 0b00 	vldr	d0, [sp]
 80223c6:	f001 fdb3 	bl	8023f30 <__kernel_sin>
 80223ca:	ec53 2b10 	vmov	r2, r3, d0
 80223ce:	ee10 0a10 	vmov	r0, s0
 80223d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80223d6:	e7da      	b.n	802238e <cos+0x2e>
 80223d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80223dc:	ed9d 0b00 	vldr	d0, [sp]
 80223e0:	f001 f98e 	bl	8023700 <__kernel_cos>
 80223e4:	e7f1      	b.n	80223ca <cos+0x6a>
 80223e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80223ea:	ed9d 0b00 	vldr	d0, [sp]
 80223ee:	2001      	movs	r0, #1
 80223f0:	f001 fd9e 	bl	8023f30 <__kernel_sin>
 80223f4:	e7e0      	b.n	80223b8 <cos+0x58>
 80223f6:	bf00      	nop
	...
 8022400:	3fe921fb 	.word	0x3fe921fb
 8022404:	7fefffff 	.word	0x7fefffff

08022408 <sin>:
 8022408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802240a:	ec53 2b10 	vmov	r2, r3, d0
 802240e:	4828      	ldr	r0, [pc, #160]	; (80224b0 <sin+0xa8>)
 8022410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022414:	4281      	cmp	r1, r0
 8022416:	dc07      	bgt.n	8022428 <sin+0x20>
 8022418:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80224a8 <sin+0xa0>
 802241c:	2000      	movs	r0, #0
 802241e:	b005      	add	sp, #20
 8022420:	f85d eb04 	ldr.w	lr, [sp], #4
 8022424:	f001 bd84 	b.w	8023f30 <__kernel_sin>
 8022428:	4822      	ldr	r0, [pc, #136]	; (80224b4 <sin+0xac>)
 802242a:	4281      	cmp	r1, r0
 802242c:	dd09      	ble.n	8022442 <sin+0x3a>
 802242e:	ee10 0a10 	vmov	r0, s0
 8022432:	4619      	mov	r1, r3
 8022434:	f7dd fee6 	bl	8000204 <__aeabi_dsub>
 8022438:	ec41 0b10 	vmov	d0, r0, r1
 802243c:	b005      	add	sp, #20
 802243e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022442:	4668      	mov	r0, sp
 8022444:	f000 f9a8 	bl	8022798 <__ieee754_rem_pio2>
 8022448:	f000 0003 	and.w	r0, r0, #3
 802244c:	2801      	cmp	r0, #1
 802244e:	d00c      	beq.n	802246a <sin+0x62>
 8022450:	2802      	cmp	r0, #2
 8022452:	d011      	beq.n	8022478 <sin+0x70>
 8022454:	b9f0      	cbnz	r0, 8022494 <sin+0x8c>
 8022456:	ed9d 1b02 	vldr	d1, [sp, #8]
 802245a:	ed9d 0b00 	vldr	d0, [sp]
 802245e:	2001      	movs	r0, #1
 8022460:	f001 fd66 	bl	8023f30 <__kernel_sin>
 8022464:	ec51 0b10 	vmov	r0, r1, d0
 8022468:	e7e6      	b.n	8022438 <sin+0x30>
 802246a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802246e:	ed9d 0b00 	vldr	d0, [sp]
 8022472:	f001 f945 	bl	8023700 <__kernel_cos>
 8022476:	e7f5      	b.n	8022464 <sin+0x5c>
 8022478:	ed9d 1b02 	vldr	d1, [sp, #8]
 802247c:	ed9d 0b00 	vldr	d0, [sp]
 8022480:	2001      	movs	r0, #1
 8022482:	f001 fd55 	bl	8023f30 <__kernel_sin>
 8022486:	ec53 2b10 	vmov	r2, r3, d0
 802248a:	ee10 0a10 	vmov	r0, s0
 802248e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022492:	e7d1      	b.n	8022438 <sin+0x30>
 8022494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022498:	ed9d 0b00 	vldr	d0, [sp]
 802249c:	f001 f930 	bl	8023700 <__kernel_cos>
 80224a0:	e7f1      	b.n	8022486 <sin+0x7e>
 80224a2:	bf00      	nop
 80224a4:	f3af 8000 	nop.w
	...
 80224b0:	3fe921fb 	.word	0x3fe921fb
 80224b4:	7fefffff 	.word	0x7fefffff

080224b8 <cosf>:
 80224b8:	ee10 3a10 	vmov	r3, s0
 80224bc:	b507      	push	{r0, r1, r2, lr}
 80224be:	4a1e      	ldr	r2, [pc, #120]	; (8022538 <cosf+0x80>)
 80224c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80224c4:	4293      	cmp	r3, r2
 80224c6:	dc06      	bgt.n	80224d6 <cosf+0x1e>
 80224c8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802253c <cosf+0x84>
 80224cc:	b003      	add	sp, #12
 80224ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80224d2:	f001 bdeb 	b.w	80240ac <__kernel_cosf>
 80224d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80224da:	db04      	blt.n	80224e6 <cosf+0x2e>
 80224dc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80224e0:	b003      	add	sp, #12
 80224e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80224e6:	4668      	mov	r0, sp
 80224e8:	f000 ffc8 	bl	802347c <__ieee754_rem_pio2f>
 80224ec:	f000 0003 	and.w	r0, r0, #3
 80224f0:	2801      	cmp	r0, #1
 80224f2:	d009      	beq.n	8022508 <cosf+0x50>
 80224f4:	2802      	cmp	r0, #2
 80224f6:	d010      	beq.n	802251a <cosf+0x62>
 80224f8:	b9b0      	cbnz	r0, 8022528 <cosf+0x70>
 80224fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80224fe:	ed9d 0a00 	vldr	s0, [sp]
 8022502:	f001 fdd3 	bl	80240ac <__kernel_cosf>
 8022506:	e7eb      	b.n	80224e0 <cosf+0x28>
 8022508:	eddd 0a01 	vldr	s1, [sp, #4]
 802250c:	ed9d 0a00 	vldr	s0, [sp]
 8022510:	f002 f8a2 	bl	8024658 <__kernel_sinf>
 8022514:	eeb1 0a40 	vneg.f32	s0, s0
 8022518:	e7e2      	b.n	80224e0 <cosf+0x28>
 802251a:	eddd 0a01 	vldr	s1, [sp, #4]
 802251e:	ed9d 0a00 	vldr	s0, [sp]
 8022522:	f001 fdc3 	bl	80240ac <__kernel_cosf>
 8022526:	e7f5      	b.n	8022514 <cosf+0x5c>
 8022528:	eddd 0a01 	vldr	s1, [sp, #4]
 802252c:	ed9d 0a00 	vldr	s0, [sp]
 8022530:	2001      	movs	r0, #1
 8022532:	f002 f891 	bl	8024658 <__kernel_sinf>
 8022536:	e7d3      	b.n	80224e0 <cosf+0x28>
 8022538:	3f490fd8 	.word	0x3f490fd8
 802253c:	00000000 	.word	0x00000000

08022540 <lrintf>:
 8022540:	ee10 3a10 	vmov	r3, s0
 8022544:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8022548:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 802254c:	281e      	cmp	r0, #30
 802254e:	b082      	sub	sp, #8
 8022550:	dc2e      	bgt.n	80225b0 <lrintf+0x70>
 8022552:	1c41      	adds	r1, r0, #1
 8022554:	da02      	bge.n	802255c <lrintf+0x1c>
 8022556:	2000      	movs	r0, #0
 8022558:	b002      	add	sp, #8
 802255a:	4770      	bx	lr
 802255c:	2816      	cmp	r0, #22
 802255e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8022562:	dd09      	ble.n	8022578 <lrintf+0x38>
 8022564:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8022568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802256c:	3a96      	subs	r2, #150	; 0x96
 802256e:	4090      	lsls	r0, r2
 8022570:	2900      	cmp	r1, #0
 8022572:	d0f1      	beq.n	8022558 <lrintf+0x18>
 8022574:	4240      	negs	r0, r0
 8022576:	e7ef      	b.n	8022558 <lrintf+0x18>
 8022578:	4b10      	ldr	r3, [pc, #64]	; (80225bc <lrintf+0x7c>)
 802257a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802257e:	ed93 7a00 	vldr	s14, [r3]
 8022582:	ee37 0a00 	vadd.f32	s0, s14, s0
 8022586:	ed8d 0a01 	vstr	s0, [sp, #4]
 802258a:	eddd 7a01 	vldr	s15, [sp, #4]
 802258e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022592:	ee17 3a90 	vmov	r3, s15
 8022596:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802259a:	d0dc      	beq.n	8022556 <lrintf+0x16>
 802259c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80225a0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80225a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80225a8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80225ac:	40d8      	lsrs	r0, r3
 80225ae:	e7df      	b.n	8022570 <lrintf+0x30>
 80225b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80225b4:	ee17 0a90 	vmov	r0, s15
 80225b8:	e7ce      	b.n	8022558 <lrintf+0x18>
 80225ba:	bf00      	nop
 80225bc:	08028450 	.word	0x08028450

080225c0 <sinf>:
 80225c0:	ee10 3a10 	vmov	r3, s0
 80225c4:	b507      	push	{r0, r1, r2, lr}
 80225c6:	4a1f      	ldr	r2, [pc, #124]	; (8022644 <sinf+0x84>)
 80225c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80225cc:	4293      	cmp	r3, r2
 80225ce:	dc07      	bgt.n	80225e0 <sinf+0x20>
 80225d0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8022648 <sinf+0x88>
 80225d4:	2000      	movs	r0, #0
 80225d6:	b003      	add	sp, #12
 80225d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80225dc:	f002 b83c 	b.w	8024658 <__kernel_sinf>
 80225e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80225e4:	db04      	blt.n	80225f0 <sinf+0x30>
 80225e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80225ea:	b003      	add	sp, #12
 80225ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80225f0:	4668      	mov	r0, sp
 80225f2:	f000 ff43 	bl	802347c <__ieee754_rem_pio2f>
 80225f6:	f000 0003 	and.w	r0, r0, #3
 80225fa:	2801      	cmp	r0, #1
 80225fc:	d00a      	beq.n	8022614 <sinf+0x54>
 80225fe:	2802      	cmp	r0, #2
 8022600:	d00f      	beq.n	8022622 <sinf+0x62>
 8022602:	b9c0      	cbnz	r0, 8022636 <sinf+0x76>
 8022604:	eddd 0a01 	vldr	s1, [sp, #4]
 8022608:	ed9d 0a00 	vldr	s0, [sp]
 802260c:	2001      	movs	r0, #1
 802260e:	f002 f823 	bl	8024658 <__kernel_sinf>
 8022612:	e7ea      	b.n	80225ea <sinf+0x2a>
 8022614:	eddd 0a01 	vldr	s1, [sp, #4]
 8022618:	ed9d 0a00 	vldr	s0, [sp]
 802261c:	f001 fd46 	bl	80240ac <__kernel_cosf>
 8022620:	e7e3      	b.n	80225ea <sinf+0x2a>
 8022622:	eddd 0a01 	vldr	s1, [sp, #4]
 8022626:	ed9d 0a00 	vldr	s0, [sp]
 802262a:	2001      	movs	r0, #1
 802262c:	f002 f814 	bl	8024658 <__kernel_sinf>
 8022630:	eeb1 0a40 	vneg.f32	s0, s0
 8022634:	e7d9      	b.n	80225ea <sinf+0x2a>
 8022636:	eddd 0a01 	vldr	s1, [sp, #4]
 802263a:	ed9d 0a00 	vldr	s0, [sp]
 802263e:	f001 fd35 	bl	80240ac <__kernel_cosf>
 8022642:	e7f5      	b.n	8022630 <sinf+0x70>
 8022644:	3f490fd8 	.word	0x3f490fd8
 8022648:	00000000 	.word	0x00000000

0802264c <acosf>:
 802264c:	b508      	push	{r3, lr}
 802264e:	ed2d 8b02 	vpush	{d8}
 8022652:	eeb0 8a40 	vmov.f32	s16, s0
 8022656:	f000 faab 	bl	8022bb0 <__ieee754_acosf>
 802265a:	eeb4 8a48 	vcmp.f32	s16, s16
 802265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022662:	eef0 8a40 	vmov.f32	s17, s0
 8022666:	d615      	bvs.n	8022694 <acosf+0x48>
 8022668:	eeb0 0a48 	vmov.f32	s0, s16
 802266c:	f002 fa42 	bl	8024af4 <fabsf>
 8022670:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022674:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802267c:	dd0a      	ble.n	8022694 <acosf+0x48>
 802267e:	f7ff fbf5 	bl	8021e6c <__errno>
 8022682:	ecbd 8b02 	vpop	{d8}
 8022686:	2321      	movs	r3, #33	; 0x21
 8022688:	6003      	str	r3, [r0, #0]
 802268a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802268e:	4804      	ldr	r0, [pc, #16]	; (80226a0 <acosf+0x54>)
 8022690:	f002 ba86 	b.w	8024ba0 <nanf>
 8022694:	eeb0 0a68 	vmov.f32	s0, s17
 8022698:	ecbd 8b02 	vpop	{d8}
 802269c:	bd08      	pop	{r3, pc}
 802269e:	bf00      	nop
 80226a0:	08028458 	.word	0x08028458

080226a4 <atan2f>:
 80226a4:	f000 bb7c 	b.w	8022da0 <__ieee754_atan2f>

080226a8 <powf>:
 80226a8:	b508      	push	{r3, lr}
 80226aa:	ed2d 8b04 	vpush	{d8-d9}
 80226ae:	eeb0 8a60 	vmov.f32	s16, s1
 80226b2:	eeb0 9a40 	vmov.f32	s18, s0
 80226b6:	f000 fc13 	bl	8022ee0 <__ieee754_powf>
 80226ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80226be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226c2:	eef0 8a40 	vmov.f32	s17, s0
 80226c6:	d63e      	bvs.n	8022746 <powf+0x9e>
 80226c8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80226cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226d0:	d112      	bne.n	80226f8 <powf+0x50>
 80226d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80226d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226da:	d039      	beq.n	8022750 <powf+0xa8>
 80226dc:	eeb0 0a48 	vmov.f32	s0, s16
 80226e0:	f002 fa0f 	bl	8024b02 <finitef>
 80226e4:	b378      	cbz	r0, 8022746 <powf+0x9e>
 80226e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80226ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226ee:	d52a      	bpl.n	8022746 <powf+0x9e>
 80226f0:	f7ff fbbc 	bl	8021e6c <__errno>
 80226f4:	2322      	movs	r3, #34	; 0x22
 80226f6:	e014      	b.n	8022722 <powf+0x7a>
 80226f8:	f002 fa03 	bl	8024b02 <finitef>
 80226fc:	b998      	cbnz	r0, 8022726 <powf+0x7e>
 80226fe:	eeb0 0a49 	vmov.f32	s0, s18
 8022702:	f002 f9fe 	bl	8024b02 <finitef>
 8022706:	b170      	cbz	r0, 8022726 <powf+0x7e>
 8022708:	eeb0 0a48 	vmov.f32	s0, s16
 802270c:	f002 f9f9 	bl	8024b02 <finitef>
 8022710:	b148      	cbz	r0, 8022726 <powf+0x7e>
 8022712:	eef4 8a68 	vcmp.f32	s17, s17
 8022716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802271a:	d7e9      	bvc.n	80226f0 <powf+0x48>
 802271c:	f7ff fba6 	bl	8021e6c <__errno>
 8022720:	2321      	movs	r3, #33	; 0x21
 8022722:	6003      	str	r3, [r0, #0]
 8022724:	e00f      	b.n	8022746 <powf+0x9e>
 8022726:	eef5 8a40 	vcmp.f32	s17, #0.0
 802272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802272e:	d10a      	bne.n	8022746 <powf+0x9e>
 8022730:	eeb0 0a49 	vmov.f32	s0, s18
 8022734:	f002 f9e5 	bl	8024b02 <finitef>
 8022738:	b128      	cbz	r0, 8022746 <powf+0x9e>
 802273a:	eeb0 0a48 	vmov.f32	s0, s16
 802273e:	f002 f9e0 	bl	8024b02 <finitef>
 8022742:	2800      	cmp	r0, #0
 8022744:	d1d4      	bne.n	80226f0 <powf+0x48>
 8022746:	eeb0 0a68 	vmov.f32	s0, s17
 802274a:	ecbd 8b04 	vpop	{d8-d9}
 802274e:	bd08      	pop	{r3, pc}
 8022750:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8022754:	e7f7      	b.n	8022746 <powf+0x9e>
	...

08022758 <sqrtf>:
 8022758:	b508      	push	{r3, lr}
 802275a:	ed2d 8b02 	vpush	{d8}
 802275e:	eeb0 8a40 	vmov.f32	s16, s0
 8022762:	f000 ffc7 	bl	80236f4 <__ieee754_sqrtf>
 8022766:	eeb4 8a48 	vcmp.f32	s16, s16
 802276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802276e:	d60c      	bvs.n	802278a <sqrtf+0x32>
 8022770:	eddf 8a07 	vldr	s17, [pc, #28]	; 8022790 <sqrtf+0x38>
 8022774:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8022778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802277c:	d505      	bpl.n	802278a <sqrtf+0x32>
 802277e:	f7ff fb75 	bl	8021e6c <__errno>
 8022782:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8022786:	2321      	movs	r3, #33	; 0x21
 8022788:	6003      	str	r3, [r0, #0]
 802278a:	ecbd 8b02 	vpop	{d8}
 802278e:	bd08      	pop	{r3, pc}
	...

08022798 <__ieee754_rem_pio2>:
 8022798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802279c:	ed2d 8b02 	vpush	{d8}
 80227a0:	ec55 4b10 	vmov	r4, r5, d0
 80227a4:	4bca      	ldr	r3, [pc, #808]	; (8022ad0 <__ieee754_rem_pio2+0x338>)
 80227a6:	b08b      	sub	sp, #44	; 0x2c
 80227a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80227ac:	4598      	cmp	r8, r3
 80227ae:	4682      	mov	sl, r0
 80227b0:	9502      	str	r5, [sp, #8]
 80227b2:	dc08      	bgt.n	80227c6 <__ieee754_rem_pio2+0x2e>
 80227b4:	2200      	movs	r2, #0
 80227b6:	2300      	movs	r3, #0
 80227b8:	ed80 0b00 	vstr	d0, [r0]
 80227bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80227c0:	f04f 0b00 	mov.w	fp, #0
 80227c4:	e028      	b.n	8022818 <__ieee754_rem_pio2+0x80>
 80227c6:	4bc3      	ldr	r3, [pc, #780]	; (8022ad4 <__ieee754_rem_pio2+0x33c>)
 80227c8:	4598      	cmp	r8, r3
 80227ca:	dc78      	bgt.n	80228be <__ieee754_rem_pio2+0x126>
 80227cc:	9b02      	ldr	r3, [sp, #8]
 80227ce:	4ec2      	ldr	r6, [pc, #776]	; (8022ad8 <__ieee754_rem_pio2+0x340>)
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	ee10 0a10 	vmov	r0, s0
 80227d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8022a98 <__ieee754_rem_pio2+0x300>)
 80227d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227dc:	4629      	mov	r1, r5
 80227de:	dd39      	ble.n	8022854 <__ieee754_rem_pio2+0xbc>
 80227e0:	f7dd fd10 	bl	8000204 <__aeabi_dsub>
 80227e4:	45b0      	cmp	r8, r6
 80227e6:	4604      	mov	r4, r0
 80227e8:	460d      	mov	r5, r1
 80227ea:	d01b      	beq.n	8022824 <__ieee754_rem_pio2+0x8c>
 80227ec:	a3ac      	add	r3, pc, #688	; (adr r3, 8022aa0 <__ieee754_rem_pio2+0x308>)
 80227ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227f2:	f7dd fd07 	bl	8000204 <__aeabi_dsub>
 80227f6:	4602      	mov	r2, r0
 80227f8:	460b      	mov	r3, r1
 80227fa:	e9ca 2300 	strd	r2, r3, [sl]
 80227fe:	4620      	mov	r0, r4
 8022800:	4629      	mov	r1, r5
 8022802:	f7dd fcff 	bl	8000204 <__aeabi_dsub>
 8022806:	a3a6      	add	r3, pc, #664	; (adr r3, 8022aa0 <__ieee754_rem_pio2+0x308>)
 8022808:	e9d3 2300 	ldrd	r2, r3, [r3]
 802280c:	f7dd fcfa 	bl	8000204 <__aeabi_dsub>
 8022810:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022814:	f04f 0b01 	mov.w	fp, #1
 8022818:	4658      	mov	r0, fp
 802281a:	b00b      	add	sp, #44	; 0x2c
 802281c:	ecbd 8b02 	vpop	{d8}
 8022820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022824:	a3a0      	add	r3, pc, #640	; (adr r3, 8022aa8 <__ieee754_rem_pio2+0x310>)
 8022826:	e9d3 2300 	ldrd	r2, r3, [r3]
 802282a:	f7dd fceb 	bl	8000204 <__aeabi_dsub>
 802282e:	a3a0      	add	r3, pc, #640	; (adr r3, 8022ab0 <__ieee754_rem_pio2+0x318>)
 8022830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022834:	4604      	mov	r4, r0
 8022836:	460d      	mov	r5, r1
 8022838:	f7dd fce4 	bl	8000204 <__aeabi_dsub>
 802283c:	4602      	mov	r2, r0
 802283e:	460b      	mov	r3, r1
 8022840:	e9ca 2300 	strd	r2, r3, [sl]
 8022844:	4620      	mov	r0, r4
 8022846:	4629      	mov	r1, r5
 8022848:	f7dd fcdc 	bl	8000204 <__aeabi_dsub>
 802284c:	a398      	add	r3, pc, #608	; (adr r3, 8022ab0 <__ieee754_rem_pio2+0x318>)
 802284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022852:	e7db      	b.n	802280c <__ieee754_rem_pio2+0x74>
 8022854:	f7dd fcd8 	bl	8000208 <__adddf3>
 8022858:	45b0      	cmp	r8, r6
 802285a:	4604      	mov	r4, r0
 802285c:	460d      	mov	r5, r1
 802285e:	d016      	beq.n	802288e <__ieee754_rem_pio2+0xf6>
 8022860:	a38f      	add	r3, pc, #572	; (adr r3, 8022aa0 <__ieee754_rem_pio2+0x308>)
 8022862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022866:	f7dd fccf 	bl	8000208 <__adddf3>
 802286a:	4602      	mov	r2, r0
 802286c:	460b      	mov	r3, r1
 802286e:	e9ca 2300 	strd	r2, r3, [sl]
 8022872:	4620      	mov	r0, r4
 8022874:	4629      	mov	r1, r5
 8022876:	f7dd fcc5 	bl	8000204 <__aeabi_dsub>
 802287a:	a389      	add	r3, pc, #548	; (adr r3, 8022aa0 <__ieee754_rem_pio2+0x308>)
 802287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022880:	f7dd fcc2 	bl	8000208 <__adddf3>
 8022884:	f04f 3bff 	mov.w	fp, #4294967295
 8022888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802288c:	e7c4      	b.n	8022818 <__ieee754_rem_pio2+0x80>
 802288e:	a386      	add	r3, pc, #536	; (adr r3, 8022aa8 <__ieee754_rem_pio2+0x310>)
 8022890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022894:	f7dd fcb8 	bl	8000208 <__adddf3>
 8022898:	a385      	add	r3, pc, #532	; (adr r3, 8022ab0 <__ieee754_rem_pio2+0x318>)
 802289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802289e:	4604      	mov	r4, r0
 80228a0:	460d      	mov	r5, r1
 80228a2:	f7dd fcb1 	bl	8000208 <__adddf3>
 80228a6:	4602      	mov	r2, r0
 80228a8:	460b      	mov	r3, r1
 80228aa:	e9ca 2300 	strd	r2, r3, [sl]
 80228ae:	4620      	mov	r0, r4
 80228b0:	4629      	mov	r1, r5
 80228b2:	f7dd fca7 	bl	8000204 <__aeabi_dsub>
 80228b6:	a37e      	add	r3, pc, #504	; (adr r3, 8022ab0 <__ieee754_rem_pio2+0x318>)
 80228b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228bc:	e7e0      	b.n	8022880 <__ieee754_rem_pio2+0xe8>
 80228be:	4b87      	ldr	r3, [pc, #540]	; (8022adc <__ieee754_rem_pio2+0x344>)
 80228c0:	4598      	cmp	r8, r3
 80228c2:	f300 80d9 	bgt.w	8022a78 <__ieee754_rem_pio2+0x2e0>
 80228c6:	f001 ff31 	bl	802472c <fabs>
 80228ca:	ec55 4b10 	vmov	r4, r5, d0
 80228ce:	ee10 0a10 	vmov	r0, s0
 80228d2:	a379      	add	r3, pc, #484	; (adr r3, 8022ab8 <__ieee754_rem_pio2+0x320>)
 80228d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228d8:	4629      	mov	r1, r5
 80228da:	f7dd fe4b 	bl	8000574 <__aeabi_dmul>
 80228de:	4b80      	ldr	r3, [pc, #512]	; (8022ae0 <__ieee754_rem_pio2+0x348>)
 80228e0:	2200      	movs	r2, #0
 80228e2:	f7dd fc91 	bl	8000208 <__adddf3>
 80228e6:	f7de f8df 	bl	8000aa8 <__aeabi_d2iz>
 80228ea:	4683      	mov	fp, r0
 80228ec:	f7dd fdd8 	bl	80004a0 <__aeabi_i2d>
 80228f0:	4602      	mov	r2, r0
 80228f2:	460b      	mov	r3, r1
 80228f4:	ec43 2b18 	vmov	d8, r2, r3
 80228f8:	a367      	add	r3, pc, #412	; (adr r3, 8022a98 <__ieee754_rem_pio2+0x300>)
 80228fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228fe:	f7dd fe39 	bl	8000574 <__aeabi_dmul>
 8022902:	4602      	mov	r2, r0
 8022904:	460b      	mov	r3, r1
 8022906:	4620      	mov	r0, r4
 8022908:	4629      	mov	r1, r5
 802290a:	f7dd fc7b 	bl	8000204 <__aeabi_dsub>
 802290e:	a364      	add	r3, pc, #400	; (adr r3, 8022aa0 <__ieee754_rem_pio2+0x308>)
 8022910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022914:	4606      	mov	r6, r0
 8022916:	460f      	mov	r7, r1
 8022918:	ec51 0b18 	vmov	r0, r1, d8
 802291c:	f7dd fe2a 	bl	8000574 <__aeabi_dmul>
 8022920:	f1bb 0f1f 	cmp.w	fp, #31
 8022924:	4604      	mov	r4, r0
 8022926:	460d      	mov	r5, r1
 8022928:	dc0d      	bgt.n	8022946 <__ieee754_rem_pio2+0x1ae>
 802292a:	4b6e      	ldr	r3, [pc, #440]	; (8022ae4 <__ieee754_rem_pio2+0x34c>)
 802292c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8022930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022934:	4543      	cmp	r3, r8
 8022936:	d006      	beq.n	8022946 <__ieee754_rem_pio2+0x1ae>
 8022938:	4622      	mov	r2, r4
 802293a:	462b      	mov	r3, r5
 802293c:	4630      	mov	r0, r6
 802293e:	4639      	mov	r1, r7
 8022940:	f7dd fc60 	bl	8000204 <__aeabi_dsub>
 8022944:	e00f      	b.n	8022966 <__ieee754_rem_pio2+0x1ce>
 8022946:	462b      	mov	r3, r5
 8022948:	4622      	mov	r2, r4
 802294a:	4630      	mov	r0, r6
 802294c:	4639      	mov	r1, r7
 802294e:	f7dd fc59 	bl	8000204 <__aeabi_dsub>
 8022952:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022956:	9303      	str	r3, [sp, #12]
 8022958:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802295c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8022960:	f1b8 0f10 	cmp.w	r8, #16
 8022964:	dc02      	bgt.n	802296c <__ieee754_rem_pio2+0x1d4>
 8022966:	e9ca 0100 	strd	r0, r1, [sl]
 802296a:	e039      	b.n	80229e0 <__ieee754_rem_pio2+0x248>
 802296c:	a34e      	add	r3, pc, #312	; (adr r3, 8022aa8 <__ieee754_rem_pio2+0x310>)
 802296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022972:	ec51 0b18 	vmov	r0, r1, d8
 8022976:	f7dd fdfd 	bl	8000574 <__aeabi_dmul>
 802297a:	4604      	mov	r4, r0
 802297c:	460d      	mov	r5, r1
 802297e:	4602      	mov	r2, r0
 8022980:	460b      	mov	r3, r1
 8022982:	4630      	mov	r0, r6
 8022984:	4639      	mov	r1, r7
 8022986:	f7dd fc3d 	bl	8000204 <__aeabi_dsub>
 802298a:	4602      	mov	r2, r0
 802298c:	460b      	mov	r3, r1
 802298e:	4680      	mov	r8, r0
 8022990:	4689      	mov	r9, r1
 8022992:	4630      	mov	r0, r6
 8022994:	4639      	mov	r1, r7
 8022996:	f7dd fc35 	bl	8000204 <__aeabi_dsub>
 802299a:	4622      	mov	r2, r4
 802299c:	462b      	mov	r3, r5
 802299e:	f7dd fc31 	bl	8000204 <__aeabi_dsub>
 80229a2:	a343      	add	r3, pc, #268	; (adr r3, 8022ab0 <__ieee754_rem_pio2+0x318>)
 80229a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229a8:	4604      	mov	r4, r0
 80229aa:	460d      	mov	r5, r1
 80229ac:	ec51 0b18 	vmov	r0, r1, d8
 80229b0:	f7dd fde0 	bl	8000574 <__aeabi_dmul>
 80229b4:	4622      	mov	r2, r4
 80229b6:	462b      	mov	r3, r5
 80229b8:	f7dd fc24 	bl	8000204 <__aeabi_dsub>
 80229bc:	4602      	mov	r2, r0
 80229be:	460b      	mov	r3, r1
 80229c0:	4604      	mov	r4, r0
 80229c2:	460d      	mov	r5, r1
 80229c4:	4640      	mov	r0, r8
 80229c6:	4649      	mov	r1, r9
 80229c8:	f7dd fc1c 	bl	8000204 <__aeabi_dsub>
 80229cc:	9a03      	ldr	r2, [sp, #12]
 80229ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80229d2:	1ad3      	subs	r3, r2, r3
 80229d4:	2b31      	cmp	r3, #49	; 0x31
 80229d6:	dc24      	bgt.n	8022a22 <__ieee754_rem_pio2+0x28a>
 80229d8:	e9ca 0100 	strd	r0, r1, [sl]
 80229dc:	4646      	mov	r6, r8
 80229de:	464f      	mov	r7, r9
 80229e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80229e4:	4630      	mov	r0, r6
 80229e6:	4642      	mov	r2, r8
 80229e8:	464b      	mov	r3, r9
 80229ea:	4639      	mov	r1, r7
 80229ec:	f7dd fc0a 	bl	8000204 <__aeabi_dsub>
 80229f0:	462b      	mov	r3, r5
 80229f2:	4622      	mov	r2, r4
 80229f4:	f7dd fc06 	bl	8000204 <__aeabi_dsub>
 80229f8:	9b02      	ldr	r3, [sp, #8]
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022a00:	f6bf af0a 	bge.w	8022818 <__ieee754_rem_pio2+0x80>
 8022a04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022a08:	f8ca 3004 	str.w	r3, [sl, #4]
 8022a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022a10:	f8ca 8000 	str.w	r8, [sl]
 8022a14:	f8ca 0008 	str.w	r0, [sl, #8]
 8022a18:	f8ca 300c 	str.w	r3, [sl, #12]
 8022a1c:	f1cb 0b00 	rsb	fp, fp, #0
 8022a20:	e6fa      	b.n	8022818 <__ieee754_rem_pio2+0x80>
 8022a22:	a327      	add	r3, pc, #156	; (adr r3, 8022ac0 <__ieee754_rem_pio2+0x328>)
 8022a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a28:	ec51 0b18 	vmov	r0, r1, d8
 8022a2c:	f7dd fda2 	bl	8000574 <__aeabi_dmul>
 8022a30:	4604      	mov	r4, r0
 8022a32:	460d      	mov	r5, r1
 8022a34:	4602      	mov	r2, r0
 8022a36:	460b      	mov	r3, r1
 8022a38:	4640      	mov	r0, r8
 8022a3a:	4649      	mov	r1, r9
 8022a3c:	f7dd fbe2 	bl	8000204 <__aeabi_dsub>
 8022a40:	4602      	mov	r2, r0
 8022a42:	460b      	mov	r3, r1
 8022a44:	4606      	mov	r6, r0
 8022a46:	460f      	mov	r7, r1
 8022a48:	4640      	mov	r0, r8
 8022a4a:	4649      	mov	r1, r9
 8022a4c:	f7dd fbda 	bl	8000204 <__aeabi_dsub>
 8022a50:	4622      	mov	r2, r4
 8022a52:	462b      	mov	r3, r5
 8022a54:	f7dd fbd6 	bl	8000204 <__aeabi_dsub>
 8022a58:	a31b      	add	r3, pc, #108	; (adr r3, 8022ac8 <__ieee754_rem_pio2+0x330>)
 8022a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a5e:	4604      	mov	r4, r0
 8022a60:	460d      	mov	r5, r1
 8022a62:	ec51 0b18 	vmov	r0, r1, d8
 8022a66:	f7dd fd85 	bl	8000574 <__aeabi_dmul>
 8022a6a:	4622      	mov	r2, r4
 8022a6c:	462b      	mov	r3, r5
 8022a6e:	f7dd fbc9 	bl	8000204 <__aeabi_dsub>
 8022a72:	4604      	mov	r4, r0
 8022a74:	460d      	mov	r5, r1
 8022a76:	e75f      	b.n	8022938 <__ieee754_rem_pio2+0x1a0>
 8022a78:	4b1b      	ldr	r3, [pc, #108]	; (8022ae8 <__ieee754_rem_pio2+0x350>)
 8022a7a:	4598      	cmp	r8, r3
 8022a7c:	dd36      	ble.n	8022aec <__ieee754_rem_pio2+0x354>
 8022a7e:	ee10 2a10 	vmov	r2, s0
 8022a82:	462b      	mov	r3, r5
 8022a84:	4620      	mov	r0, r4
 8022a86:	4629      	mov	r1, r5
 8022a88:	f7dd fbbc 	bl	8000204 <__aeabi_dsub>
 8022a8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022a90:	e9ca 0100 	strd	r0, r1, [sl]
 8022a94:	e694      	b.n	80227c0 <__ieee754_rem_pio2+0x28>
 8022a96:	bf00      	nop
 8022a98:	54400000 	.word	0x54400000
 8022a9c:	3ff921fb 	.word	0x3ff921fb
 8022aa0:	1a626331 	.word	0x1a626331
 8022aa4:	3dd0b461 	.word	0x3dd0b461
 8022aa8:	1a600000 	.word	0x1a600000
 8022aac:	3dd0b461 	.word	0x3dd0b461
 8022ab0:	2e037073 	.word	0x2e037073
 8022ab4:	3ba3198a 	.word	0x3ba3198a
 8022ab8:	6dc9c883 	.word	0x6dc9c883
 8022abc:	3fe45f30 	.word	0x3fe45f30
 8022ac0:	2e000000 	.word	0x2e000000
 8022ac4:	3ba3198a 	.word	0x3ba3198a
 8022ac8:	252049c1 	.word	0x252049c1
 8022acc:	397b839a 	.word	0x397b839a
 8022ad0:	3fe921fb 	.word	0x3fe921fb
 8022ad4:	4002d97b 	.word	0x4002d97b
 8022ad8:	3ff921fb 	.word	0x3ff921fb
 8022adc:	413921fb 	.word	0x413921fb
 8022ae0:	3fe00000 	.word	0x3fe00000
 8022ae4:	0802845c 	.word	0x0802845c
 8022ae8:	7fefffff 	.word	0x7fefffff
 8022aec:	ea4f 5428 	mov.w	r4, r8, asr #20
 8022af0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8022af4:	ee10 0a10 	vmov	r0, s0
 8022af8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8022afc:	ee10 6a10 	vmov	r6, s0
 8022b00:	460f      	mov	r7, r1
 8022b02:	f7dd ffd1 	bl	8000aa8 <__aeabi_d2iz>
 8022b06:	f7dd fccb 	bl	80004a0 <__aeabi_i2d>
 8022b0a:	4602      	mov	r2, r0
 8022b0c:	460b      	mov	r3, r1
 8022b0e:	4630      	mov	r0, r6
 8022b10:	4639      	mov	r1, r7
 8022b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022b16:	f7dd fb75 	bl	8000204 <__aeabi_dsub>
 8022b1a:	4b23      	ldr	r3, [pc, #140]	; (8022ba8 <__ieee754_rem_pio2+0x410>)
 8022b1c:	2200      	movs	r2, #0
 8022b1e:	f7dd fd29 	bl	8000574 <__aeabi_dmul>
 8022b22:	460f      	mov	r7, r1
 8022b24:	4606      	mov	r6, r0
 8022b26:	f7dd ffbf 	bl	8000aa8 <__aeabi_d2iz>
 8022b2a:	f7dd fcb9 	bl	80004a0 <__aeabi_i2d>
 8022b2e:	4602      	mov	r2, r0
 8022b30:	460b      	mov	r3, r1
 8022b32:	4630      	mov	r0, r6
 8022b34:	4639      	mov	r1, r7
 8022b36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022b3a:	f7dd fb63 	bl	8000204 <__aeabi_dsub>
 8022b3e:	4b1a      	ldr	r3, [pc, #104]	; (8022ba8 <__ieee754_rem_pio2+0x410>)
 8022b40:	2200      	movs	r2, #0
 8022b42:	f7dd fd17 	bl	8000574 <__aeabi_dmul>
 8022b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022b4a:	ad04      	add	r5, sp, #16
 8022b4c:	f04f 0803 	mov.w	r8, #3
 8022b50:	46a9      	mov	r9, r5
 8022b52:	2600      	movs	r6, #0
 8022b54:	2700      	movs	r7, #0
 8022b56:	4632      	mov	r2, r6
 8022b58:	463b      	mov	r3, r7
 8022b5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8022b5e:	46c3      	mov	fp, r8
 8022b60:	3d08      	subs	r5, #8
 8022b62:	f108 38ff 	add.w	r8, r8, #4294967295
 8022b66:	f7dd ff6d 	bl	8000a44 <__aeabi_dcmpeq>
 8022b6a:	2800      	cmp	r0, #0
 8022b6c:	d1f3      	bne.n	8022b56 <__ieee754_rem_pio2+0x3be>
 8022b6e:	4b0f      	ldr	r3, [pc, #60]	; (8022bac <__ieee754_rem_pio2+0x414>)
 8022b70:	9301      	str	r3, [sp, #4]
 8022b72:	2302      	movs	r3, #2
 8022b74:	9300      	str	r3, [sp, #0]
 8022b76:	4622      	mov	r2, r4
 8022b78:	465b      	mov	r3, fp
 8022b7a:	4651      	mov	r1, sl
 8022b7c:	4648      	mov	r0, r9
 8022b7e:	f000 fe87 	bl	8023890 <__kernel_rem_pio2>
 8022b82:	9b02      	ldr	r3, [sp, #8]
 8022b84:	2b00      	cmp	r3, #0
 8022b86:	4683      	mov	fp, r0
 8022b88:	f6bf ae46 	bge.w	8022818 <__ieee754_rem_pio2+0x80>
 8022b8c:	e9da 2100 	ldrd	r2, r1, [sl]
 8022b90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b94:	e9ca 2300 	strd	r2, r3, [sl]
 8022b98:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8022b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022ba0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8022ba4:	e73a      	b.n	8022a1c <__ieee754_rem_pio2+0x284>
 8022ba6:	bf00      	nop
 8022ba8:	41700000 	.word	0x41700000
 8022bac:	080284dc 	.word	0x080284dc

08022bb0 <__ieee754_acosf>:
 8022bb0:	b508      	push	{r3, lr}
 8022bb2:	ee10 3a10 	vmov	r3, s0
 8022bb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8022bba:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8022bbe:	ed2d 8b0c 	vpush	{d8-d13}
 8022bc2:	d10a      	bne.n	8022bda <__ieee754_acosf+0x2a>
 8022bc4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8022d5c <__ieee754_acosf+0x1ac>
 8022bc8:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8022d60 <__ieee754_acosf+0x1b0>
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	bfd8      	it	le
 8022bd0:	eeb0 0a48 	vmovle.f32	s0, s16
 8022bd4:	ecbd 8b0c 	vpop	{d8-d13}
 8022bd8:	bd08      	pop	{r3, pc}
 8022bda:	dd04      	ble.n	8022be6 <__ieee754_acosf+0x36>
 8022bdc:	ee30 8a40 	vsub.f32	s16, s0, s0
 8022be0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8022be4:	e7f6      	b.n	8022bd4 <__ieee754_acosf+0x24>
 8022be6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8022bea:	da3c      	bge.n	8022c66 <__ieee754_acosf+0xb6>
 8022bec:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8022bf0:	f340 80b1 	ble.w	8022d56 <__ieee754_acosf+0x1a6>
 8022bf4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8022bf8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8022d64 <__ieee754_acosf+0x1b4>
 8022bfc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8022d68 <__ieee754_acosf+0x1b8>
 8022c00:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8022d6c <__ieee754_acosf+0x1bc>
 8022c04:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8022d70 <__ieee754_acosf+0x1c0>
 8022c08:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8022c0c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8022d74 <__ieee754_acosf+0x1c4>
 8022c10:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022c14:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8022d78 <__ieee754_acosf+0x1c8>
 8022c18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022c1c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8022d7c <__ieee754_acosf+0x1cc>
 8022c20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022c24:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8022d80 <__ieee754_acosf+0x1d0>
 8022c28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022c2c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8022d84 <__ieee754_acosf+0x1d4>
 8022c30:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8022c34:	eddf 6a54 	vldr	s13, [pc, #336]	; 8022d88 <__ieee754_acosf+0x1d8>
 8022c38:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022c3c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8022d8c <__ieee754_acosf+0x1dc>
 8022c40:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8022c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022c48:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8022c54:	eea0 8a67 	vfms.f32	s16, s0, s15
 8022c58:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8022d90 <__ieee754_acosf+0x1e0>
 8022c5c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022c60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022c64:	e7b6      	b.n	8022bd4 <__ieee754_acosf+0x24>
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	eddf da3e 	vldr	s27, [pc, #248]	; 8022d64 <__ieee754_acosf+0x1b4>
 8022c6c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8022d68 <__ieee754_acosf+0x1b8>
 8022c70:	ed9f ca40 	vldr	s24, [pc, #256]	; 8022d74 <__ieee754_acosf+0x1c4>
 8022c74:	eddf ba40 	vldr	s23, [pc, #256]	; 8022d78 <__ieee754_acosf+0x1c8>
 8022c78:	ed9f ba40 	vldr	s22, [pc, #256]	; 8022d7c <__ieee754_acosf+0x1cc>
 8022c7c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8022d80 <__ieee754_acosf+0x1d0>
 8022c80:	ed9f da40 	vldr	s26, [pc, #256]	; 8022d84 <__ieee754_acosf+0x1d4>
 8022c84:	eddf aa39 	vldr	s21, [pc, #228]	; 8022d6c <__ieee754_acosf+0x1bc>
 8022c88:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8022d88 <__ieee754_acosf+0x1d8>
 8022c8c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8022d8c <__ieee754_acosf+0x1dc>
 8022c90:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8022c94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022c98:	da28      	bge.n	8022cec <__ieee754_acosf+0x13c>
 8022c9a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8022c9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022ca2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8022ca6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8022caa:	eeac ca80 	vfma.f32	s24, s25, s0
 8022cae:	eeaa aa80 	vfma.f32	s20, s21, s0
 8022cb2:	eeec ba00 	vfma.f32	s23, s24, s0
 8022cb6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8022cba:	eeab ba80 	vfma.f32	s22, s23, s0
 8022cbe:	eea9 9a80 	vfma.f32	s18, s19, s0
 8022cc2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8022cc6:	ee68 8a80 	vmul.f32	s17, s17, s0
 8022cca:	f000 fd13 	bl	80236f4 <__ieee754_sqrtf>
 8022cce:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8022cd2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8022d94 <__ieee754_acosf+0x1e4>
 8022cd6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022cda:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022cde:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022ce2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8022d98 <__ieee754_acosf+0x1e8>
 8022ce6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8022cea:	e773      	b.n	8022bd4 <__ieee754_acosf+0x24>
 8022cec:	ee39 8a40 	vsub.f32	s16, s18, s0
 8022cf0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8022cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8022cf8:	f000 fcfc 	bl	80236f4 <__ieee754_sqrtf>
 8022cfc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8022d00:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8022d04:	eeac ca88 	vfma.f32	s24, s25, s16
 8022d08:	eeaa aa88 	vfma.f32	s20, s21, s16
 8022d0c:	eeec ba08 	vfma.f32	s23, s24, s16
 8022d10:	ee10 3a10 	vmov	r3, s0
 8022d14:	eeab ba88 	vfma.f32	s22, s23, s16
 8022d18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8022d1c:	f023 030f 	bic.w	r3, r3, #15
 8022d20:	eeea 9a08 	vfma.f32	s19, s20, s16
 8022d24:	ee07 3a90 	vmov	s15, r3
 8022d28:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8022d2c:	eeb0 6a48 	vmov.f32	s12, s16
 8022d30:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8022d34:	eea9 9a88 	vfma.f32	s18, s19, s16
 8022d38:	ee70 6a27 	vadd.f32	s13, s0, s15
 8022d3c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8022d40:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8022d44:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8022d48:	eea0 7a26 	vfma.f32	s14, s0, s13
 8022d4c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8022d50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022d54:	e73e      	b.n	8022bd4 <__ieee754_acosf+0x24>
 8022d56:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8022d9c <__ieee754_acosf+0x1ec>
 8022d5a:	e73b      	b.n	8022bd4 <__ieee754_acosf+0x24>
 8022d5c:	00000000 	.word	0x00000000
 8022d60:	40490fdb 	.word	0x40490fdb
 8022d64:	3811ef08 	.word	0x3811ef08
 8022d68:	3a4f7f04 	.word	0x3a4f7f04
 8022d6c:	bf303361 	.word	0xbf303361
 8022d70:	33a22168 	.word	0x33a22168
 8022d74:	bd241146 	.word	0xbd241146
 8022d78:	3e4e0aa8 	.word	0x3e4e0aa8
 8022d7c:	bea6b090 	.word	0xbea6b090
 8022d80:	3e2aaaab 	.word	0x3e2aaaab
 8022d84:	3d9dc62e 	.word	0x3d9dc62e
 8022d88:	4001572d 	.word	0x4001572d
 8022d8c:	c019d139 	.word	0xc019d139
 8022d90:	3fc90fda 	.word	0x3fc90fda
 8022d94:	b3a22168 	.word	0xb3a22168
 8022d98:	40490fda 	.word	0x40490fda
 8022d9c:	3fc90fdb 	.word	0x3fc90fdb

08022da0 <__ieee754_atan2f>:
 8022da0:	ee10 2a90 	vmov	r2, s1
 8022da4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8022da8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022dac:	b510      	push	{r4, lr}
 8022dae:	eef0 7a40 	vmov.f32	s15, s0
 8022db2:	dc06      	bgt.n	8022dc2 <__ieee754_atan2f+0x22>
 8022db4:	ee10 0a10 	vmov	r0, s0
 8022db8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8022dbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022dc0:	dd04      	ble.n	8022dcc <__ieee754_atan2f+0x2c>
 8022dc2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8022dca:	bd10      	pop	{r4, pc}
 8022dcc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8022dd0:	d103      	bne.n	8022dda <__ieee754_atan2f+0x3a>
 8022dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022dd6:	f001 bdb9 	b.w	802494c <atanf>
 8022dda:	1794      	asrs	r4, r2, #30
 8022ddc:	f004 0402 	and.w	r4, r4, #2
 8022de0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022de4:	b943      	cbnz	r3, 8022df8 <__ieee754_atan2f+0x58>
 8022de6:	2c02      	cmp	r4, #2
 8022de8:	d05e      	beq.n	8022ea8 <__ieee754_atan2f+0x108>
 8022dea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8022ebc <__ieee754_atan2f+0x11c>
 8022dee:	2c03      	cmp	r4, #3
 8022df0:	bf08      	it	eq
 8022df2:	eef0 7a47 	vmoveq.f32	s15, s14
 8022df6:	e7e6      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022df8:	b941      	cbnz	r1, 8022e0c <__ieee754_atan2f+0x6c>
 8022dfa:	eddf 7a31 	vldr	s15, [pc, #196]	; 8022ec0 <__ieee754_atan2f+0x120>
 8022dfe:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8022ec4 <__ieee754_atan2f+0x124>
 8022e02:	2800      	cmp	r0, #0
 8022e04:	bfb8      	it	lt
 8022e06:	eef0 7a40 	vmovlt.f32	s15, s0
 8022e0a:	e7dc      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022e0c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022e10:	d110      	bne.n	8022e34 <__ieee754_atan2f+0x94>
 8022e12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022e16:	f104 34ff 	add.w	r4, r4, #4294967295
 8022e1a:	d107      	bne.n	8022e2c <__ieee754_atan2f+0x8c>
 8022e1c:	2c02      	cmp	r4, #2
 8022e1e:	d846      	bhi.n	8022eae <__ieee754_atan2f+0x10e>
 8022e20:	4b29      	ldr	r3, [pc, #164]	; (8022ec8 <__ieee754_atan2f+0x128>)
 8022e22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022e26:	edd4 7a00 	vldr	s15, [r4]
 8022e2a:	e7cc      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022e2c:	2c02      	cmp	r4, #2
 8022e2e:	d841      	bhi.n	8022eb4 <__ieee754_atan2f+0x114>
 8022e30:	4b26      	ldr	r3, [pc, #152]	; (8022ecc <__ieee754_atan2f+0x12c>)
 8022e32:	e7f6      	b.n	8022e22 <__ieee754_atan2f+0x82>
 8022e34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022e38:	d0df      	beq.n	8022dfa <__ieee754_atan2f+0x5a>
 8022e3a:	1a5b      	subs	r3, r3, r1
 8022e3c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8022e40:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022e44:	da1a      	bge.n	8022e7c <__ieee754_atan2f+0xdc>
 8022e46:	2a00      	cmp	r2, #0
 8022e48:	da01      	bge.n	8022e4e <__ieee754_atan2f+0xae>
 8022e4a:	313c      	adds	r1, #60	; 0x3c
 8022e4c:	db19      	blt.n	8022e82 <__ieee754_atan2f+0xe2>
 8022e4e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022e52:	f001 fe4f 	bl	8024af4 <fabsf>
 8022e56:	f001 fd79 	bl	802494c <atanf>
 8022e5a:	eef0 7a40 	vmov.f32	s15, s0
 8022e5e:	2c01      	cmp	r4, #1
 8022e60:	d012      	beq.n	8022e88 <__ieee754_atan2f+0xe8>
 8022e62:	2c02      	cmp	r4, #2
 8022e64:	d017      	beq.n	8022e96 <__ieee754_atan2f+0xf6>
 8022e66:	2c00      	cmp	r4, #0
 8022e68:	d0ad      	beq.n	8022dc6 <__ieee754_atan2f+0x26>
 8022e6a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8022ed0 <__ieee754_atan2f+0x130>
 8022e6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022e72:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8022ed4 <__ieee754_atan2f+0x134>
 8022e76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022e7a:	e7a4      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022e7c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8022ec0 <__ieee754_atan2f+0x120>
 8022e80:	e7ed      	b.n	8022e5e <__ieee754_atan2f+0xbe>
 8022e82:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022ed8 <__ieee754_atan2f+0x138>
 8022e86:	e7ea      	b.n	8022e5e <__ieee754_atan2f+0xbe>
 8022e88:	ee17 3a90 	vmov	r3, s15
 8022e8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022e90:	ee07 3a90 	vmov	s15, r3
 8022e94:	e797      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022e96:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8022ed0 <__ieee754_atan2f+0x130>
 8022e9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022e9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8022ed4 <__ieee754_atan2f+0x134>
 8022ea2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022ea6:	e78e      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022ea8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8022ed4 <__ieee754_atan2f+0x134>
 8022eac:	e78b      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022eae:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8022edc <__ieee754_atan2f+0x13c>
 8022eb2:	e788      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022eb4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022ed8 <__ieee754_atan2f+0x138>
 8022eb8:	e785      	b.n	8022dc6 <__ieee754_atan2f+0x26>
 8022eba:	bf00      	nop
 8022ebc:	c0490fdb 	.word	0xc0490fdb
 8022ec0:	3fc90fdb 	.word	0x3fc90fdb
 8022ec4:	bfc90fdb 	.word	0xbfc90fdb
 8022ec8:	080285e4 	.word	0x080285e4
 8022ecc:	080285f0 	.word	0x080285f0
 8022ed0:	33bbbd2e 	.word	0x33bbbd2e
 8022ed4:	40490fdb 	.word	0x40490fdb
 8022ed8:	00000000 	.word	0x00000000
 8022edc:	3f490fdb 	.word	0x3f490fdb

08022ee0 <__ieee754_powf>:
 8022ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ee4:	ee10 4a90 	vmov	r4, s1
 8022ee8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8022eec:	ed2d 8b02 	vpush	{d8}
 8022ef0:	ee10 6a10 	vmov	r6, s0
 8022ef4:	eeb0 8a40 	vmov.f32	s16, s0
 8022ef8:	eef0 8a60 	vmov.f32	s17, s1
 8022efc:	d10c      	bne.n	8022f18 <__ieee754_powf+0x38>
 8022efe:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8022f02:	0076      	lsls	r6, r6, #1
 8022f04:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8022f08:	f240 8296 	bls.w	8023438 <__ieee754_powf+0x558>
 8022f0c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8022f10:	ecbd 8b02 	vpop	{d8}
 8022f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f18:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8022f1c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022f20:	dcf4      	bgt.n	8022f0c <__ieee754_powf+0x2c>
 8022f22:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8022f26:	dd08      	ble.n	8022f3a <__ieee754_powf+0x5a>
 8022f28:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8022f2c:	d1ee      	bne.n	8022f0c <__ieee754_powf+0x2c>
 8022f2e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8022f32:	0064      	lsls	r4, r4, #1
 8022f34:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8022f38:	e7e6      	b.n	8022f08 <__ieee754_powf+0x28>
 8022f3a:	2e00      	cmp	r6, #0
 8022f3c:	da20      	bge.n	8022f80 <__ieee754_powf+0xa0>
 8022f3e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8022f42:	da2d      	bge.n	8022fa0 <__ieee754_powf+0xc0>
 8022f44:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8022f48:	f2c0 827f 	blt.w	802344a <__ieee754_powf+0x56a>
 8022f4c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8022f50:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8022f54:	fa48 f703 	asr.w	r7, r8, r3
 8022f58:	fa07 f303 	lsl.w	r3, r7, r3
 8022f5c:	4543      	cmp	r3, r8
 8022f5e:	f040 8274 	bne.w	802344a <__ieee754_powf+0x56a>
 8022f62:	f007 0701 	and.w	r7, r7, #1
 8022f66:	f1c7 0702 	rsb	r7, r7, #2
 8022f6a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8022f6e:	d11f      	bne.n	8022fb0 <__ieee754_powf+0xd0>
 8022f70:	2c00      	cmp	r4, #0
 8022f72:	f280 8267 	bge.w	8023444 <__ieee754_powf+0x564>
 8022f76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022f7a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8022f7e:	e7c7      	b.n	8022f10 <__ieee754_powf+0x30>
 8022f80:	2700      	movs	r7, #0
 8022f82:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8022f86:	d1f0      	bne.n	8022f6a <__ieee754_powf+0x8a>
 8022f88:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8022f8c:	f000 8254 	beq.w	8023438 <__ieee754_powf+0x558>
 8022f90:	dd08      	ble.n	8022fa4 <__ieee754_powf+0xc4>
 8022f92:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 802329c <__ieee754_powf+0x3bc>
 8022f96:	2c00      	cmp	r4, #0
 8022f98:	bfa8      	it	ge
 8022f9a:	eeb0 0a68 	vmovge.f32	s0, s17
 8022f9e:	e7b7      	b.n	8022f10 <__ieee754_powf+0x30>
 8022fa0:	2702      	movs	r7, #2
 8022fa2:	e7ee      	b.n	8022f82 <__ieee754_powf+0xa2>
 8022fa4:	2c00      	cmp	r4, #0
 8022fa6:	f280 824a 	bge.w	802343e <__ieee754_powf+0x55e>
 8022faa:	eeb1 0a68 	vneg.f32	s0, s17
 8022fae:	e7af      	b.n	8022f10 <__ieee754_powf+0x30>
 8022fb0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8022fb4:	d102      	bne.n	8022fbc <__ieee754_powf+0xdc>
 8022fb6:	ee28 0a08 	vmul.f32	s0, s16, s16
 8022fba:	e7a9      	b.n	8022f10 <__ieee754_powf+0x30>
 8022fbc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8022fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8022fc4:	d107      	bne.n	8022fd6 <__ieee754_powf+0xf6>
 8022fc6:	2e00      	cmp	r6, #0
 8022fc8:	db05      	blt.n	8022fd6 <__ieee754_powf+0xf6>
 8022fca:	ecbd 8b02 	vpop	{d8}
 8022fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022fd2:	f000 bb8f 	b.w	80236f4 <__ieee754_sqrtf>
 8022fd6:	f001 fd8d 	bl	8024af4 <fabsf>
 8022fda:	b125      	cbz	r5, 8022fe6 <__ieee754_powf+0x106>
 8022fdc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8022fe0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8022fe4:	d116      	bne.n	8023014 <__ieee754_powf+0x134>
 8022fe6:	2c00      	cmp	r4, #0
 8022fe8:	bfbc      	itt	lt
 8022fea:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8022fee:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8022ff2:	2e00      	cmp	r6, #0
 8022ff4:	da8c      	bge.n	8022f10 <__ieee754_powf+0x30>
 8022ff6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8022ffa:	ea55 0307 	orrs.w	r3, r5, r7
 8022ffe:	d104      	bne.n	802300a <__ieee754_powf+0x12a>
 8023000:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023004:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8023008:	e782      	b.n	8022f10 <__ieee754_powf+0x30>
 802300a:	2f01      	cmp	r7, #1
 802300c:	d180      	bne.n	8022f10 <__ieee754_powf+0x30>
 802300e:	eeb1 0a40 	vneg.f32	s0, s0
 8023012:	e77d      	b.n	8022f10 <__ieee754_powf+0x30>
 8023014:	0ff0      	lsrs	r0, r6, #31
 8023016:	3801      	subs	r0, #1
 8023018:	ea57 0300 	orrs.w	r3, r7, r0
 802301c:	d104      	bne.n	8023028 <__ieee754_powf+0x148>
 802301e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8023022:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023026:	e773      	b.n	8022f10 <__ieee754_powf+0x30>
 8023028:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802302c:	dd74      	ble.n	8023118 <__ieee754_powf+0x238>
 802302e:	4b9c      	ldr	r3, [pc, #624]	; (80232a0 <__ieee754_powf+0x3c0>)
 8023030:	429d      	cmp	r5, r3
 8023032:	dc08      	bgt.n	8023046 <__ieee754_powf+0x166>
 8023034:	2c00      	cmp	r4, #0
 8023036:	da0b      	bge.n	8023050 <__ieee754_powf+0x170>
 8023038:	2000      	movs	r0, #0
 802303a:	ecbd 8b02 	vpop	{d8}
 802303e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023042:	f001 bb6d 	b.w	8024720 <__math_oflowf>
 8023046:	4b97      	ldr	r3, [pc, #604]	; (80232a4 <__ieee754_powf+0x3c4>)
 8023048:	429d      	cmp	r5, r3
 802304a:	dd08      	ble.n	802305e <__ieee754_powf+0x17e>
 802304c:	2c00      	cmp	r4, #0
 802304e:	dcf3      	bgt.n	8023038 <__ieee754_powf+0x158>
 8023050:	2000      	movs	r0, #0
 8023052:	ecbd 8b02 	vpop	{d8}
 8023056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802305a:	f001 bb5b 	b.w	8024714 <__math_uflowf>
 802305e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023062:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023066:	eddf 6a90 	vldr	s13, [pc, #576]	; 80232a8 <__ieee754_powf+0x3c8>
 802306a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802306e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8023072:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023076:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802307a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023082:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80232ac <__ieee754_powf+0x3cc>
 8023086:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802308a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80232b0 <__ieee754_powf+0x3d0>
 802308e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023092:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80232b4 <__ieee754_powf+0x3d4>
 8023096:	eef0 6a67 	vmov.f32	s13, s15
 802309a:	eee0 6a07 	vfma.f32	s13, s0, s14
 802309e:	ee16 3a90 	vmov	r3, s13
 80230a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80230a6:	f023 030f 	bic.w	r3, r3, #15
 80230aa:	ee00 3a90 	vmov	s1, r3
 80230ae:	eee0 0a47 	vfms.f32	s1, s0, s14
 80230b2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80230b6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80230ba:	f024 040f 	bic.w	r4, r4, #15
 80230be:	ee07 4a10 	vmov	s14, r4
 80230c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80230c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80230ca:	ee07 3a90 	vmov	s15, r3
 80230ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 80230d2:	3f01      	subs	r7, #1
 80230d4:	ea57 0200 	orrs.w	r2, r7, r0
 80230d8:	ee07 4a10 	vmov	s14, r4
 80230dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80230e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80230e4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80230e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80230ec:	ee17 4a10 	vmov	r4, s14
 80230f0:	bf08      	it	eq
 80230f2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80230f6:	2c00      	cmp	r4, #0
 80230f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80230fc:	f340 817e 	ble.w	80233fc <__ieee754_powf+0x51c>
 8023100:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8023104:	f340 80f8 	ble.w	80232f8 <__ieee754_powf+0x418>
 8023108:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023110:	bf4c      	ite	mi
 8023112:	2001      	movmi	r0, #1
 8023114:	2000      	movpl	r0, #0
 8023116:	e790      	b.n	802303a <__ieee754_powf+0x15a>
 8023118:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 802311c:	bf01      	itttt	eq
 802311e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80232b8 <__ieee754_powf+0x3d8>
 8023122:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8023126:	f06f 0217 	mvneq.w	r2, #23
 802312a:	ee17 5a90 	vmoveq	r5, s15
 802312e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8023132:	bf18      	it	ne
 8023134:	2200      	movne	r2, #0
 8023136:	3b7f      	subs	r3, #127	; 0x7f
 8023138:	4413      	add	r3, r2
 802313a:	4a60      	ldr	r2, [pc, #384]	; (80232bc <__ieee754_powf+0x3dc>)
 802313c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8023140:	4295      	cmp	r5, r2
 8023142:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8023146:	dd06      	ble.n	8023156 <__ieee754_powf+0x276>
 8023148:	4a5d      	ldr	r2, [pc, #372]	; (80232c0 <__ieee754_powf+0x3e0>)
 802314a:	4295      	cmp	r5, r2
 802314c:	f340 80a4 	ble.w	8023298 <__ieee754_powf+0x3b8>
 8023150:	3301      	adds	r3, #1
 8023152:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8023156:	2500      	movs	r5, #0
 8023158:	4a5a      	ldr	r2, [pc, #360]	; (80232c4 <__ieee754_powf+0x3e4>)
 802315a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802315e:	ee07 1a90 	vmov	s15, r1
 8023162:	ed92 7a00 	vldr	s14, [r2]
 8023166:	4a58      	ldr	r2, [pc, #352]	; (80232c8 <__ieee754_powf+0x3e8>)
 8023168:	ee37 6a27 	vadd.f32	s12, s14, s15
 802316c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8023170:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8023174:	1049      	asrs	r1, r1, #1
 8023176:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802317a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802317e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8023182:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8023186:	ee06 1a10 	vmov	s12, r1
 802318a:	ee65 4a26 	vmul.f32	s9, s10, s13
 802318e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8023192:	ee14 6a90 	vmov	r6, s9
 8023196:	4016      	ands	r6, r2
 8023198:	ee05 6a90 	vmov	s11, r6
 802319c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80231a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80231a4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80232cc <__ieee754_powf+0x3ec>
 80231a8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80231ac:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80231b0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80231b4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80232d0 <__ieee754_powf+0x3f0>
 80231b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80231bc:	eddf 6a45 	vldr	s13, [pc, #276]	; 80232d4 <__ieee754_powf+0x3f4>
 80231c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80231c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80232a8 <__ieee754_powf+0x3c8>
 80231c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80231cc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80232d8 <__ieee754_powf+0x3f8>
 80231d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80231d4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80232dc <__ieee754_powf+0x3fc>
 80231d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80231dc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80231e0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80231e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80231e8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80231ec:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80231f0:	eef0 7a45 	vmov.f32	s15, s10
 80231f4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80231f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80231fc:	ee17 1a90 	vmov	r1, s15
 8023200:	4011      	ands	r1, r2
 8023202:	ee07 1a90 	vmov	s15, r1
 8023206:	ee37 7ac5 	vsub.f32	s14, s15, s10
 802320a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 802320e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8023212:	ee27 7a24 	vmul.f32	s14, s14, s9
 8023216:	eea6 7a27 	vfma.f32	s14, s12, s15
 802321a:	eeb0 6a47 	vmov.f32	s12, s14
 802321e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8023222:	ee16 1a10 	vmov	r1, s12
 8023226:	4011      	ands	r1, r2
 8023228:	ee06 1a90 	vmov	s13, r1
 802322c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8023230:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80232e0 <__ieee754_powf+0x400>
 8023234:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80232e4 <__ieee754_powf+0x404>
 8023238:	ee37 7a66 	vsub.f32	s14, s14, s13
 802323c:	ee06 1a10 	vmov	s12, r1
 8023240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023244:	eddf 7a28 	vldr	s15, [pc, #160]	; 80232e8 <__ieee754_powf+0x408>
 8023248:	4928      	ldr	r1, [pc, #160]	; (80232ec <__ieee754_powf+0x40c>)
 802324a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802324e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8023252:	edd1 7a00 	vldr	s15, [r1]
 8023256:	ee37 7a27 	vadd.f32	s14, s14, s15
 802325a:	ee07 3a90 	vmov	s15, r3
 802325e:	4b24      	ldr	r3, [pc, #144]	; (80232f0 <__ieee754_powf+0x410>)
 8023260:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8023264:	eef0 7a47 	vmov.f32	s15, s14
 8023268:	eee6 7a25 	vfma.f32	s15, s12, s11
 802326c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8023270:	edd5 0a00 	vldr	s1, [r5]
 8023274:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802327c:	ee17 3a90 	vmov	r3, s15
 8023280:	4013      	ands	r3, r2
 8023282:	ee07 3a90 	vmov	s15, r3
 8023286:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802328a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 802328e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8023292:	ee77 7a66 	vsub.f32	s15, s14, s13
 8023296:	e70e      	b.n	80230b6 <__ieee754_powf+0x1d6>
 8023298:	2501      	movs	r5, #1
 802329a:	e75d      	b.n	8023158 <__ieee754_powf+0x278>
 802329c:	00000000 	.word	0x00000000
 80232a0:	3f7ffff3 	.word	0x3f7ffff3
 80232a4:	3f800007 	.word	0x3f800007
 80232a8:	3eaaaaab 	.word	0x3eaaaaab
 80232ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80232b0:	36eca570 	.word	0x36eca570
 80232b4:	3fb8aa00 	.word	0x3fb8aa00
 80232b8:	4b800000 	.word	0x4b800000
 80232bc:	001cc471 	.word	0x001cc471
 80232c0:	005db3d6 	.word	0x005db3d6
 80232c4:	080285fc 	.word	0x080285fc
 80232c8:	fffff000 	.word	0xfffff000
 80232cc:	3e6c3255 	.word	0x3e6c3255
 80232d0:	3e53f142 	.word	0x3e53f142
 80232d4:	3e8ba305 	.word	0x3e8ba305
 80232d8:	3edb6db7 	.word	0x3edb6db7
 80232dc:	3f19999a 	.word	0x3f19999a
 80232e0:	3f76384f 	.word	0x3f76384f
 80232e4:	3f763800 	.word	0x3f763800
 80232e8:	369dc3a0 	.word	0x369dc3a0
 80232ec:	0802860c 	.word	0x0802860c
 80232f0:	08028604 	.word	0x08028604
 80232f4:	3338aa3c 	.word	0x3338aa3c
 80232f8:	f040 8095 	bne.w	8023426 <__ieee754_powf+0x546>
 80232fc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80232f4 <__ieee754_powf+0x414>
 8023300:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023304:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8023308:	eef4 6ac7 	vcmpe.f32	s13, s14
 802330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023310:	f73f aefa 	bgt.w	8023108 <__ieee754_powf+0x228>
 8023314:	15db      	asrs	r3, r3, #23
 8023316:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 802331a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802331e:	4103      	asrs	r3, r0
 8023320:	4423      	add	r3, r4
 8023322:	494b      	ldr	r1, [pc, #300]	; (8023450 <__ieee754_powf+0x570>)
 8023324:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023328:	3a7f      	subs	r2, #127	; 0x7f
 802332a:	4111      	asrs	r1, r2
 802332c:	ea23 0101 	bic.w	r1, r3, r1
 8023330:	ee07 1a10 	vmov	s14, r1
 8023334:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023338:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802333c:	f1c2 0217 	rsb	r2, r2, #23
 8023340:	4110      	asrs	r0, r2
 8023342:	2c00      	cmp	r4, #0
 8023344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023348:	bfb8      	it	lt
 802334a:	4240      	neglt	r0, r0
 802334c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8023350:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8023454 <__ieee754_powf+0x574>
 8023354:	eddf 6a40 	vldr	s13, [pc, #256]	; 8023458 <__ieee754_powf+0x578>
 8023358:	ee17 3a10 	vmov	r3, s14
 802335c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023360:	f023 030f 	bic.w	r3, r3, #15
 8023364:	ee07 3a10 	vmov	s14, r3
 8023368:	ee77 7a67 	vsub.f32	s15, s14, s15
 802336c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8023370:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8023374:	eddf 7a39 	vldr	s15, [pc, #228]	; 802345c <__ieee754_powf+0x57c>
 8023378:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802337c:	eef0 7a40 	vmov.f32	s15, s0
 8023380:	eee7 7a26 	vfma.f32	s15, s14, s13
 8023384:	eeb0 6a67 	vmov.f32	s12, s15
 8023388:	eea7 6a66 	vfms.f32	s12, s14, s13
 802338c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8023390:	ee30 0a46 	vsub.f32	s0, s0, s12
 8023394:	eddf 6a32 	vldr	s13, [pc, #200]	; 8023460 <__ieee754_powf+0x580>
 8023398:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8023464 <__ieee754_powf+0x584>
 802339c:	eee7 6a06 	vfma.f32	s13, s14, s12
 80233a0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8023468 <__ieee754_powf+0x588>
 80233a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80233a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 802346c <__ieee754_powf+0x58c>
 80233ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80233b0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8023470 <__ieee754_powf+0x590>
 80233b4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80233b8:	eef0 6a67 	vmov.f32	s13, s15
 80233bc:	eee6 6a47 	vfms.f32	s13, s12, s14
 80233c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80233c4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80233c8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80233cc:	eea7 0a80 	vfma.f32	s0, s15, s0
 80233d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80233d4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80233d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80233dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80233e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80233e4:	ee10 3a10 	vmov	r3, s0
 80233e8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80233ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80233f0:	da1f      	bge.n	8023432 <__ieee754_powf+0x552>
 80233f2:	f001 fbdb 	bl	8024bac <scalbnf>
 80233f6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80233fa:	e589      	b.n	8022f10 <__ieee754_powf+0x30>
 80233fc:	4a1d      	ldr	r2, [pc, #116]	; (8023474 <__ieee754_powf+0x594>)
 80233fe:	4293      	cmp	r3, r2
 8023400:	dd07      	ble.n	8023412 <__ieee754_powf+0x532>
 8023402:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802340a:	bf4c      	ite	mi
 802340c:	2001      	movmi	r0, #1
 802340e:	2000      	movpl	r0, #0
 8023410:	e61f      	b.n	8023052 <__ieee754_powf+0x172>
 8023412:	d108      	bne.n	8023426 <__ieee754_powf+0x546>
 8023414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023418:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023420:	f6ff af78 	blt.w	8023314 <__ieee754_powf+0x434>
 8023424:	e7ed      	b.n	8023402 <__ieee754_powf+0x522>
 8023426:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802342a:	f73f af73 	bgt.w	8023314 <__ieee754_powf+0x434>
 802342e:	2000      	movs	r0, #0
 8023430:	e78c      	b.n	802334c <__ieee754_powf+0x46c>
 8023432:	ee00 3a10 	vmov	s0, r3
 8023436:	e7de      	b.n	80233f6 <__ieee754_powf+0x516>
 8023438:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802343c:	e568      	b.n	8022f10 <__ieee754_powf+0x30>
 802343e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8023478 <__ieee754_powf+0x598>
 8023442:	e565      	b.n	8022f10 <__ieee754_powf+0x30>
 8023444:	eeb0 0a48 	vmov.f32	s0, s16
 8023448:	e562      	b.n	8022f10 <__ieee754_powf+0x30>
 802344a:	2700      	movs	r7, #0
 802344c:	e58d      	b.n	8022f6a <__ieee754_powf+0x8a>
 802344e:	bf00      	nop
 8023450:	007fffff 	.word	0x007fffff
 8023454:	35bfbe8c 	.word	0x35bfbe8c
 8023458:	3f317200 	.word	0x3f317200
 802345c:	3f317218 	.word	0x3f317218
 8023460:	b5ddea0e 	.word	0xb5ddea0e
 8023464:	3331bb4c 	.word	0x3331bb4c
 8023468:	388ab355 	.word	0x388ab355
 802346c:	bb360b61 	.word	0xbb360b61
 8023470:	3e2aaaab 	.word	0x3e2aaaab
 8023474:	43160000 	.word	0x43160000
 8023478:	00000000 	.word	0x00000000

0802347c <__ieee754_rem_pio2f>:
 802347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802347e:	ee10 6a10 	vmov	r6, s0
 8023482:	4b8e      	ldr	r3, [pc, #568]	; (80236bc <__ieee754_rem_pio2f+0x240>)
 8023484:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8023488:	429d      	cmp	r5, r3
 802348a:	b087      	sub	sp, #28
 802348c:	eef0 7a40 	vmov.f32	s15, s0
 8023490:	4604      	mov	r4, r0
 8023492:	dc05      	bgt.n	80234a0 <__ieee754_rem_pio2f+0x24>
 8023494:	2300      	movs	r3, #0
 8023496:	ed80 0a00 	vstr	s0, [r0]
 802349a:	6043      	str	r3, [r0, #4]
 802349c:	2000      	movs	r0, #0
 802349e:	e01a      	b.n	80234d6 <__ieee754_rem_pio2f+0x5a>
 80234a0:	4b87      	ldr	r3, [pc, #540]	; (80236c0 <__ieee754_rem_pio2f+0x244>)
 80234a2:	429d      	cmp	r5, r3
 80234a4:	dc46      	bgt.n	8023534 <__ieee754_rem_pio2f+0xb8>
 80234a6:	2e00      	cmp	r6, #0
 80234a8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80236c4 <__ieee754_rem_pio2f+0x248>
 80234ac:	4b86      	ldr	r3, [pc, #536]	; (80236c8 <__ieee754_rem_pio2f+0x24c>)
 80234ae:	f025 050f 	bic.w	r5, r5, #15
 80234b2:	dd1f      	ble.n	80234f4 <__ieee754_rem_pio2f+0x78>
 80234b4:	429d      	cmp	r5, r3
 80234b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80234ba:	d00e      	beq.n	80234da <__ieee754_rem_pio2f+0x5e>
 80234bc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80236cc <__ieee754_rem_pio2f+0x250>
 80234c0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80234c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80234c8:	ed80 0a00 	vstr	s0, [r0]
 80234cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80234d0:	2001      	movs	r0, #1
 80234d2:	edc4 7a01 	vstr	s15, [r4, #4]
 80234d6:	b007      	add	sp, #28
 80234d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234da:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80236d0 <__ieee754_rem_pio2f+0x254>
 80234de:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80236d4 <__ieee754_rem_pio2f+0x258>
 80234e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80234e6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80234ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80234ee:	edc0 6a00 	vstr	s13, [r0]
 80234f2:	e7eb      	b.n	80234cc <__ieee754_rem_pio2f+0x50>
 80234f4:	429d      	cmp	r5, r3
 80234f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80234fa:	d00e      	beq.n	802351a <__ieee754_rem_pio2f+0x9e>
 80234fc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80236cc <__ieee754_rem_pio2f+0x250>
 8023500:	ee37 0a87 	vadd.f32	s0, s15, s14
 8023504:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023508:	ed80 0a00 	vstr	s0, [r0]
 802350c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023510:	f04f 30ff 	mov.w	r0, #4294967295
 8023514:	edc4 7a01 	vstr	s15, [r4, #4]
 8023518:	e7dd      	b.n	80234d6 <__ieee754_rem_pio2f+0x5a>
 802351a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80236d0 <__ieee754_rem_pio2f+0x254>
 802351e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80236d4 <__ieee754_rem_pio2f+0x258>
 8023522:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023526:	ee77 6a87 	vadd.f32	s13, s15, s14
 802352a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802352e:	edc0 6a00 	vstr	s13, [r0]
 8023532:	e7eb      	b.n	802350c <__ieee754_rem_pio2f+0x90>
 8023534:	4b68      	ldr	r3, [pc, #416]	; (80236d8 <__ieee754_rem_pio2f+0x25c>)
 8023536:	429d      	cmp	r5, r3
 8023538:	dc72      	bgt.n	8023620 <__ieee754_rem_pio2f+0x1a4>
 802353a:	f001 fadb 	bl	8024af4 <fabsf>
 802353e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80236dc <__ieee754_rem_pio2f+0x260>
 8023542:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023546:	eee0 7a07 	vfma.f32	s15, s0, s14
 802354a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802354e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023552:	ee17 0a90 	vmov	r0, s15
 8023556:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80236c4 <__ieee754_rem_pio2f+0x248>
 802355a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802355e:	281f      	cmp	r0, #31
 8023560:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80236cc <__ieee754_rem_pio2f+0x250>
 8023564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023568:	eeb1 6a47 	vneg.f32	s12, s14
 802356c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8023570:	ee16 2a90 	vmov	r2, s13
 8023574:	dc1c      	bgt.n	80235b0 <__ieee754_rem_pio2f+0x134>
 8023576:	495a      	ldr	r1, [pc, #360]	; (80236e0 <__ieee754_rem_pio2f+0x264>)
 8023578:	1e47      	subs	r7, r0, #1
 802357a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802357e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8023582:	428b      	cmp	r3, r1
 8023584:	d014      	beq.n	80235b0 <__ieee754_rem_pio2f+0x134>
 8023586:	6022      	str	r2, [r4, #0]
 8023588:	ed94 7a00 	vldr	s14, [r4]
 802358c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023590:	2e00      	cmp	r6, #0
 8023592:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023596:	ed84 0a01 	vstr	s0, [r4, #4]
 802359a:	da9c      	bge.n	80234d6 <__ieee754_rem_pio2f+0x5a>
 802359c:	eeb1 7a47 	vneg.f32	s14, s14
 80235a0:	eeb1 0a40 	vneg.f32	s0, s0
 80235a4:	ed84 7a00 	vstr	s14, [r4]
 80235a8:	ed84 0a01 	vstr	s0, [r4, #4]
 80235ac:	4240      	negs	r0, r0
 80235ae:	e792      	b.n	80234d6 <__ieee754_rem_pio2f+0x5a>
 80235b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80235b4:	15eb      	asrs	r3, r5, #23
 80235b6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80235ba:	2d08      	cmp	r5, #8
 80235bc:	dde3      	ble.n	8023586 <__ieee754_rem_pio2f+0x10a>
 80235be:	eddf 7a44 	vldr	s15, [pc, #272]	; 80236d0 <__ieee754_rem_pio2f+0x254>
 80235c2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80236d4 <__ieee754_rem_pio2f+0x258>
 80235c6:	eef0 6a40 	vmov.f32	s13, s0
 80235ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 80235ce:	ee30 0a66 	vsub.f32	s0, s0, s13
 80235d2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80235d6:	eef0 7a40 	vmov.f32	s15, s0
 80235da:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80235de:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80235e2:	ee15 2a90 	vmov	r2, s11
 80235e6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80235ea:	1a5b      	subs	r3, r3, r1
 80235ec:	2b19      	cmp	r3, #25
 80235ee:	dc04      	bgt.n	80235fa <__ieee754_rem_pio2f+0x17e>
 80235f0:	edc4 5a00 	vstr	s11, [r4]
 80235f4:	eeb0 0a66 	vmov.f32	s0, s13
 80235f8:	e7c6      	b.n	8023588 <__ieee754_rem_pio2f+0x10c>
 80235fa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80236e4 <__ieee754_rem_pio2f+0x268>
 80235fe:	eeb0 0a66 	vmov.f32	s0, s13
 8023602:	eea6 0a25 	vfma.f32	s0, s12, s11
 8023606:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802360a:	eddf 6a37 	vldr	s13, [pc, #220]	; 80236e8 <__ieee754_rem_pio2f+0x26c>
 802360e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8023612:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8023616:	ee30 7a67 	vsub.f32	s14, s0, s15
 802361a:	ed84 7a00 	vstr	s14, [r4]
 802361e:	e7b3      	b.n	8023588 <__ieee754_rem_pio2f+0x10c>
 8023620:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8023624:	db06      	blt.n	8023634 <__ieee754_rem_pio2f+0x1b8>
 8023626:	ee70 7a40 	vsub.f32	s15, s0, s0
 802362a:	edc0 7a01 	vstr	s15, [r0, #4]
 802362e:	edc0 7a00 	vstr	s15, [r0]
 8023632:	e733      	b.n	802349c <__ieee754_rem_pio2f+0x20>
 8023634:	15ea      	asrs	r2, r5, #23
 8023636:	3a86      	subs	r2, #134	; 0x86
 8023638:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802363c:	ee07 3a90 	vmov	s15, r3
 8023640:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8023644:	eddf 6a29 	vldr	s13, [pc, #164]	; 80236ec <__ieee754_rem_pio2f+0x270>
 8023648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802364c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023650:	ed8d 7a03 	vstr	s14, [sp, #12]
 8023654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023658:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802365c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023660:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023664:	ed8d 7a04 	vstr	s14, [sp, #16]
 8023668:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802366c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8023670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023674:	edcd 7a05 	vstr	s15, [sp, #20]
 8023678:	d11e      	bne.n	80236b8 <__ieee754_rem_pio2f+0x23c>
 802367a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023682:	bf14      	ite	ne
 8023684:	2302      	movne	r3, #2
 8023686:	2301      	moveq	r3, #1
 8023688:	4919      	ldr	r1, [pc, #100]	; (80236f0 <__ieee754_rem_pio2f+0x274>)
 802368a:	9101      	str	r1, [sp, #4]
 802368c:	2102      	movs	r1, #2
 802368e:	9100      	str	r1, [sp, #0]
 8023690:	a803      	add	r0, sp, #12
 8023692:	4621      	mov	r1, r4
 8023694:	f000 fd6a 	bl	802416c <__kernel_rem_pio2f>
 8023698:	2e00      	cmp	r6, #0
 802369a:	f6bf af1c 	bge.w	80234d6 <__ieee754_rem_pio2f+0x5a>
 802369e:	edd4 7a00 	vldr	s15, [r4]
 80236a2:	eef1 7a67 	vneg.f32	s15, s15
 80236a6:	edc4 7a00 	vstr	s15, [r4]
 80236aa:	edd4 7a01 	vldr	s15, [r4, #4]
 80236ae:	eef1 7a67 	vneg.f32	s15, s15
 80236b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80236b6:	e779      	b.n	80235ac <__ieee754_rem_pio2f+0x130>
 80236b8:	2303      	movs	r3, #3
 80236ba:	e7e5      	b.n	8023688 <__ieee754_rem_pio2f+0x20c>
 80236bc:	3f490fd8 	.word	0x3f490fd8
 80236c0:	4016cbe3 	.word	0x4016cbe3
 80236c4:	3fc90f80 	.word	0x3fc90f80
 80236c8:	3fc90fd0 	.word	0x3fc90fd0
 80236cc:	37354443 	.word	0x37354443
 80236d0:	37354400 	.word	0x37354400
 80236d4:	2e85a308 	.word	0x2e85a308
 80236d8:	43490f80 	.word	0x43490f80
 80236dc:	3f22f984 	.word	0x3f22f984
 80236e0:	08028614 	.word	0x08028614
 80236e4:	2e85a300 	.word	0x2e85a300
 80236e8:	248d3132 	.word	0x248d3132
 80236ec:	43800000 	.word	0x43800000
 80236f0:	08028694 	.word	0x08028694

080236f4 <__ieee754_sqrtf>:
 80236f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80236f8:	4770      	bx	lr
 80236fa:	0000      	movs	r0, r0
 80236fc:	0000      	movs	r0, r0
	...

08023700 <__kernel_cos>:
 8023700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023704:	ec57 6b10 	vmov	r6, r7, d0
 8023708:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802370c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8023710:	ed8d 1b00 	vstr	d1, [sp]
 8023714:	da07      	bge.n	8023726 <__kernel_cos+0x26>
 8023716:	ee10 0a10 	vmov	r0, s0
 802371a:	4639      	mov	r1, r7
 802371c:	f7dd f9c4 	bl	8000aa8 <__aeabi_d2iz>
 8023720:	2800      	cmp	r0, #0
 8023722:	f000 8088 	beq.w	8023836 <__kernel_cos+0x136>
 8023726:	4632      	mov	r2, r6
 8023728:	463b      	mov	r3, r7
 802372a:	4630      	mov	r0, r6
 802372c:	4639      	mov	r1, r7
 802372e:	f7dc ff21 	bl	8000574 <__aeabi_dmul>
 8023732:	4b51      	ldr	r3, [pc, #324]	; (8023878 <__kernel_cos+0x178>)
 8023734:	2200      	movs	r2, #0
 8023736:	4604      	mov	r4, r0
 8023738:	460d      	mov	r5, r1
 802373a:	f7dc ff1b 	bl	8000574 <__aeabi_dmul>
 802373e:	a340      	add	r3, pc, #256	; (adr r3, 8023840 <__kernel_cos+0x140>)
 8023740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023744:	4682      	mov	sl, r0
 8023746:	468b      	mov	fp, r1
 8023748:	4620      	mov	r0, r4
 802374a:	4629      	mov	r1, r5
 802374c:	f7dc ff12 	bl	8000574 <__aeabi_dmul>
 8023750:	a33d      	add	r3, pc, #244	; (adr r3, 8023848 <__kernel_cos+0x148>)
 8023752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023756:	f7dc fd57 	bl	8000208 <__adddf3>
 802375a:	4622      	mov	r2, r4
 802375c:	462b      	mov	r3, r5
 802375e:	f7dc ff09 	bl	8000574 <__aeabi_dmul>
 8023762:	a33b      	add	r3, pc, #236	; (adr r3, 8023850 <__kernel_cos+0x150>)
 8023764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023768:	f7dc fd4c 	bl	8000204 <__aeabi_dsub>
 802376c:	4622      	mov	r2, r4
 802376e:	462b      	mov	r3, r5
 8023770:	f7dc ff00 	bl	8000574 <__aeabi_dmul>
 8023774:	a338      	add	r3, pc, #224	; (adr r3, 8023858 <__kernel_cos+0x158>)
 8023776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802377a:	f7dc fd45 	bl	8000208 <__adddf3>
 802377e:	4622      	mov	r2, r4
 8023780:	462b      	mov	r3, r5
 8023782:	f7dc fef7 	bl	8000574 <__aeabi_dmul>
 8023786:	a336      	add	r3, pc, #216	; (adr r3, 8023860 <__kernel_cos+0x160>)
 8023788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802378c:	f7dc fd3a 	bl	8000204 <__aeabi_dsub>
 8023790:	4622      	mov	r2, r4
 8023792:	462b      	mov	r3, r5
 8023794:	f7dc feee 	bl	8000574 <__aeabi_dmul>
 8023798:	a333      	add	r3, pc, #204	; (adr r3, 8023868 <__kernel_cos+0x168>)
 802379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802379e:	f7dc fd33 	bl	8000208 <__adddf3>
 80237a2:	4622      	mov	r2, r4
 80237a4:	462b      	mov	r3, r5
 80237a6:	f7dc fee5 	bl	8000574 <__aeabi_dmul>
 80237aa:	4622      	mov	r2, r4
 80237ac:	462b      	mov	r3, r5
 80237ae:	f7dc fee1 	bl	8000574 <__aeabi_dmul>
 80237b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80237b6:	4604      	mov	r4, r0
 80237b8:	460d      	mov	r5, r1
 80237ba:	4630      	mov	r0, r6
 80237bc:	4639      	mov	r1, r7
 80237be:	f7dc fed9 	bl	8000574 <__aeabi_dmul>
 80237c2:	460b      	mov	r3, r1
 80237c4:	4602      	mov	r2, r0
 80237c6:	4629      	mov	r1, r5
 80237c8:	4620      	mov	r0, r4
 80237ca:	f7dc fd1b 	bl	8000204 <__aeabi_dsub>
 80237ce:	4b2b      	ldr	r3, [pc, #172]	; (802387c <__kernel_cos+0x17c>)
 80237d0:	4598      	cmp	r8, r3
 80237d2:	4606      	mov	r6, r0
 80237d4:	460f      	mov	r7, r1
 80237d6:	dc10      	bgt.n	80237fa <__kernel_cos+0xfa>
 80237d8:	4602      	mov	r2, r0
 80237da:	460b      	mov	r3, r1
 80237dc:	4650      	mov	r0, sl
 80237de:	4659      	mov	r1, fp
 80237e0:	f7dc fd10 	bl	8000204 <__aeabi_dsub>
 80237e4:	460b      	mov	r3, r1
 80237e6:	4926      	ldr	r1, [pc, #152]	; (8023880 <__kernel_cos+0x180>)
 80237e8:	4602      	mov	r2, r0
 80237ea:	2000      	movs	r0, #0
 80237ec:	f7dc fd0a 	bl	8000204 <__aeabi_dsub>
 80237f0:	ec41 0b10 	vmov	d0, r0, r1
 80237f4:	b003      	add	sp, #12
 80237f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237fa:	4b22      	ldr	r3, [pc, #136]	; (8023884 <__kernel_cos+0x184>)
 80237fc:	4920      	ldr	r1, [pc, #128]	; (8023880 <__kernel_cos+0x180>)
 80237fe:	4598      	cmp	r8, r3
 8023800:	bfcc      	ite	gt
 8023802:	4d21      	ldrgt	r5, [pc, #132]	; (8023888 <__kernel_cos+0x188>)
 8023804:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8023808:	2400      	movs	r4, #0
 802380a:	4622      	mov	r2, r4
 802380c:	462b      	mov	r3, r5
 802380e:	2000      	movs	r0, #0
 8023810:	f7dc fcf8 	bl	8000204 <__aeabi_dsub>
 8023814:	4622      	mov	r2, r4
 8023816:	4680      	mov	r8, r0
 8023818:	4689      	mov	r9, r1
 802381a:	462b      	mov	r3, r5
 802381c:	4650      	mov	r0, sl
 802381e:	4659      	mov	r1, fp
 8023820:	f7dc fcf0 	bl	8000204 <__aeabi_dsub>
 8023824:	4632      	mov	r2, r6
 8023826:	463b      	mov	r3, r7
 8023828:	f7dc fcec 	bl	8000204 <__aeabi_dsub>
 802382c:	4602      	mov	r2, r0
 802382e:	460b      	mov	r3, r1
 8023830:	4640      	mov	r0, r8
 8023832:	4649      	mov	r1, r9
 8023834:	e7da      	b.n	80237ec <__kernel_cos+0xec>
 8023836:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8023870 <__kernel_cos+0x170>
 802383a:	e7db      	b.n	80237f4 <__kernel_cos+0xf4>
 802383c:	f3af 8000 	nop.w
 8023840:	be8838d4 	.word	0xbe8838d4
 8023844:	bda8fae9 	.word	0xbda8fae9
 8023848:	bdb4b1c4 	.word	0xbdb4b1c4
 802384c:	3e21ee9e 	.word	0x3e21ee9e
 8023850:	809c52ad 	.word	0x809c52ad
 8023854:	3e927e4f 	.word	0x3e927e4f
 8023858:	19cb1590 	.word	0x19cb1590
 802385c:	3efa01a0 	.word	0x3efa01a0
 8023860:	16c15177 	.word	0x16c15177
 8023864:	3f56c16c 	.word	0x3f56c16c
 8023868:	5555554c 	.word	0x5555554c
 802386c:	3fa55555 	.word	0x3fa55555
 8023870:	00000000 	.word	0x00000000
 8023874:	3ff00000 	.word	0x3ff00000
 8023878:	3fe00000 	.word	0x3fe00000
 802387c:	3fd33332 	.word	0x3fd33332
 8023880:	3ff00000 	.word	0x3ff00000
 8023884:	3fe90000 	.word	0x3fe90000
 8023888:	3fd20000 	.word	0x3fd20000
 802388c:	00000000 	.word	0x00000000

08023890 <__kernel_rem_pio2>:
 8023890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023894:	ed2d 8b02 	vpush	{d8}
 8023898:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802389c:	f112 0f14 	cmn.w	r2, #20
 80238a0:	9308      	str	r3, [sp, #32]
 80238a2:	9101      	str	r1, [sp, #4]
 80238a4:	4bc4      	ldr	r3, [pc, #784]	; (8023bb8 <__kernel_rem_pio2+0x328>)
 80238a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80238a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80238aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80238ae:	9302      	str	r3, [sp, #8]
 80238b0:	9b08      	ldr	r3, [sp, #32]
 80238b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80238b6:	bfa8      	it	ge
 80238b8:	1ed4      	subge	r4, r2, #3
 80238ba:	9306      	str	r3, [sp, #24]
 80238bc:	bfb2      	itee	lt
 80238be:	2400      	movlt	r4, #0
 80238c0:	2318      	movge	r3, #24
 80238c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80238c6:	f06f 0317 	mvn.w	r3, #23
 80238ca:	fb04 3303 	mla	r3, r4, r3, r3
 80238ce:	eb03 0a02 	add.w	sl, r3, r2
 80238d2:	9b02      	ldr	r3, [sp, #8]
 80238d4:	9a06      	ldr	r2, [sp, #24]
 80238d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8023ba8 <__kernel_rem_pio2+0x318>
 80238da:	eb03 0802 	add.w	r8, r3, r2
 80238de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80238e0:	1aa7      	subs	r7, r4, r2
 80238e2:	ae22      	add	r6, sp, #136	; 0x88
 80238e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80238e8:	2500      	movs	r5, #0
 80238ea:	4545      	cmp	r5, r8
 80238ec:	dd13      	ble.n	8023916 <__kernel_rem_pio2+0x86>
 80238ee:	9b08      	ldr	r3, [sp, #32]
 80238f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8023ba8 <__kernel_rem_pio2+0x318>
 80238f4:	aa22      	add	r2, sp, #136	; 0x88
 80238f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80238fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80238fe:	f04f 0800 	mov.w	r8, #0
 8023902:	9b02      	ldr	r3, [sp, #8]
 8023904:	4598      	cmp	r8, r3
 8023906:	dc2f      	bgt.n	8023968 <__kernel_rem_pio2+0xd8>
 8023908:	ed8d 8b04 	vstr	d8, [sp, #16]
 802390c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8023910:	462f      	mov	r7, r5
 8023912:	2600      	movs	r6, #0
 8023914:	e01b      	b.n	802394e <__kernel_rem_pio2+0xbe>
 8023916:	42ef      	cmn	r7, r5
 8023918:	d407      	bmi.n	802392a <__kernel_rem_pio2+0x9a>
 802391a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802391e:	f7dc fdbf 	bl	80004a0 <__aeabi_i2d>
 8023922:	e8e6 0102 	strd	r0, r1, [r6], #8
 8023926:	3501      	adds	r5, #1
 8023928:	e7df      	b.n	80238ea <__kernel_rem_pio2+0x5a>
 802392a:	ec51 0b18 	vmov	r0, r1, d8
 802392e:	e7f8      	b.n	8023922 <__kernel_rem_pio2+0x92>
 8023930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023934:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8023938:	f7dc fe1c 	bl	8000574 <__aeabi_dmul>
 802393c:	4602      	mov	r2, r0
 802393e:	460b      	mov	r3, r1
 8023940:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023944:	f7dc fc60 	bl	8000208 <__adddf3>
 8023948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802394c:	3601      	adds	r6, #1
 802394e:	9b06      	ldr	r3, [sp, #24]
 8023950:	429e      	cmp	r6, r3
 8023952:	f1a7 0708 	sub.w	r7, r7, #8
 8023956:	ddeb      	ble.n	8023930 <__kernel_rem_pio2+0xa0>
 8023958:	ed9d 7b04 	vldr	d7, [sp, #16]
 802395c:	f108 0801 	add.w	r8, r8, #1
 8023960:	ecab 7b02 	vstmia	fp!, {d7}
 8023964:	3508      	adds	r5, #8
 8023966:	e7cc      	b.n	8023902 <__kernel_rem_pio2+0x72>
 8023968:	9b02      	ldr	r3, [sp, #8]
 802396a:	aa0e      	add	r2, sp, #56	; 0x38
 802396c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023970:	930d      	str	r3, [sp, #52]	; 0x34
 8023972:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8023974:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023978:	9c02      	ldr	r4, [sp, #8]
 802397a:	930c      	str	r3, [sp, #48]	; 0x30
 802397c:	00e3      	lsls	r3, r4, #3
 802397e:	930a      	str	r3, [sp, #40]	; 0x28
 8023980:	ab9a      	add	r3, sp, #616	; 0x268
 8023982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023986:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 802398a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 802398e:	ab72      	add	r3, sp, #456	; 0x1c8
 8023990:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8023994:	46c3      	mov	fp, r8
 8023996:	46a1      	mov	r9, r4
 8023998:	f1b9 0f00 	cmp.w	r9, #0
 802399c:	f1a5 0508 	sub.w	r5, r5, #8
 80239a0:	dc77      	bgt.n	8023a92 <__kernel_rem_pio2+0x202>
 80239a2:	ec47 6b10 	vmov	d0, r6, r7
 80239a6:	4650      	mov	r0, sl
 80239a8:	f000 ff4a 	bl	8024840 <scalbn>
 80239ac:	ec57 6b10 	vmov	r6, r7, d0
 80239b0:	2200      	movs	r2, #0
 80239b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80239b6:	ee10 0a10 	vmov	r0, s0
 80239ba:	4639      	mov	r1, r7
 80239bc:	f7dc fdda 	bl	8000574 <__aeabi_dmul>
 80239c0:	ec41 0b10 	vmov	d0, r0, r1
 80239c4:	f000 febc 	bl	8024740 <floor>
 80239c8:	4b7c      	ldr	r3, [pc, #496]	; (8023bbc <__kernel_rem_pio2+0x32c>)
 80239ca:	ec51 0b10 	vmov	r0, r1, d0
 80239ce:	2200      	movs	r2, #0
 80239d0:	f7dc fdd0 	bl	8000574 <__aeabi_dmul>
 80239d4:	4602      	mov	r2, r0
 80239d6:	460b      	mov	r3, r1
 80239d8:	4630      	mov	r0, r6
 80239da:	4639      	mov	r1, r7
 80239dc:	f7dc fc12 	bl	8000204 <__aeabi_dsub>
 80239e0:	460f      	mov	r7, r1
 80239e2:	4606      	mov	r6, r0
 80239e4:	f7dd f860 	bl	8000aa8 <__aeabi_d2iz>
 80239e8:	9004      	str	r0, [sp, #16]
 80239ea:	f7dc fd59 	bl	80004a0 <__aeabi_i2d>
 80239ee:	4602      	mov	r2, r0
 80239f0:	460b      	mov	r3, r1
 80239f2:	4630      	mov	r0, r6
 80239f4:	4639      	mov	r1, r7
 80239f6:	f7dc fc05 	bl	8000204 <__aeabi_dsub>
 80239fa:	f1ba 0f00 	cmp.w	sl, #0
 80239fe:	4606      	mov	r6, r0
 8023a00:	460f      	mov	r7, r1
 8023a02:	dd6d      	ble.n	8023ae0 <__kernel_rem_pio2+0x250>
 8023a04:	1e62      	subs	r2, r4, #1
 8023a06:	ab0e      	add	r3, sp, #56	; 0x38
 8023a08:	9d04      	ldr	r5, [sp, #16]
 8023a0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023a0e:	f1ca 0118 	rsb	r1, sl, #24
 8023a12:	fa40 f301 	asr.w	r3, r0, r1
 8023a16:	441d      	add	r5, r3
 8023a18:	408b      	lsls	r3, r1
 8023a1a:	1ac0      	subs	r0, r0, r3
 8023a1c:	ab0e      	add	r3, sp, #56	; 0x38
 8023a1e:	9504      	str	r5, [sp, #16]
 8023a20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8023a24:	f1ca 0317 	rsb	r3, sl, #23
 8023a28:	fa40 fb03 	asr.w	fp, r0, r3
 8023a2c:	f1bb 0f00 	cmp.w	fp, #0
 8023a30:	dd65      	ble.n	8023afe <__kernel_rem_pio2+0x26e>
 8023a32:	9b04      	ldr	r3, [sp, #16]
 8023a34:	2200      	movs	r2, #0
 8023a36:	3301      	adds	r3, #1
 8023a38:	9304      	str	r3, [sp, #16]
 8023a3a:	4615      	mov	r5, r2
 8023a3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023a40:	4294      	cmp	r4, r2
 8023a42:	f300 809c 	bgt.w	8023b7e <__kernel_rem_pio2+0x2ee>
 8023a46:	f1ba 0f00 	cmp.w	sl, #0
 8023a4a:	dd07      	ble.n	8023a5c <__kernel_rem_pio2+0x1cc>
 8023a4c:	f1ba 0f01 	cmp.w	sl, #1
 8023a50:	f000 80c0 	beq.w	8023bd4 <__kernel_rem_pio2+0x344>
 8023a54:	f1ba 0f02 	cmp.w	sl, #2
 8023a58:	f000 80c6 	beq.w	8023be8 <__kernel_rem_pio2+0x358>
 8023a5c:	f1bb 0f02 	cmp.w	fp, #2
 8023a60:	d14d      	bne.n	8023afe <__kernel_rem_pio2+0x26e>
 8023a62:	4632      	mov	r2, r6
 8023a64:	463b      	mov	r3, r7
 8023a66:	4956      	ldr	r1, [pc, #344]	; (8023bc0 <__kernel_rem_pio2+0x330>)
 8023a68:	2000      	movs	r0, #0
 8023a6a:	f7dc fbcb 	bl	8000204 <__aeabi_dsub>
 8023a6e:	4606      	mov	r6, r0
 8023a70:	460f      	mov	r7, r1
 8023a72:	2d00      	cmp	r5, #0
 8023a74:	d043      	beq.n	8023afe <__kernel_rem_pio2+0x26e>
 8023a76:	4650      	mov	r0, sl
 8023a78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8023bb0 <__kernel_rem_pio2+0x320>
 8023a7c:	f000 fee0 	bl	8024840 <scalbn>
 8023a80:	4630      	mov	r0, r6
 8023a82:	4639      	mov	r1, r7
 8023a84:	ec53 2b10 	vmov	r2, r3, d0
 8023a88:	f7dc fbbc 	bl	8000204 <__aeabi_dsub>
 8023a8c:	4606      	mov	r6, r0
 8023a8e:	460f      	mov	r7, r1
 8023a90:	e035      	b.n	8023afe <__kernel_rem_pio2+0x26e>
 8023a92:	4b4c      	ldr	r3, [pc, #304]	; (8023bc4 <__kernel_rem_pio2+0x334>)
 8023a94:	2200      	movs	r2, #0
 8023a96:	4630      	mov	r0, r6
 8023a98:	4639      	mov	r1, r7
 8023a9a:	f7dc fd6b 	bl	8000574 <__aeabi_dmul>
 8023a9e:	f7dd f803 	bl	8000aa8 <__aeabi_d2iz>
 8023aa2:	f7dc fcfd 	bl	80004a0 <__aeabi_i2d>
 8023aa6:	4602      	mov	r2, r0
 8023aa8:	460b      	mov	r3, r1
 8023aaa:	ec43 2b18 	vmov	d8, r2, r3
 8023aae:	4b46      	ldr	r3, [pc, #280]	; (8023bc8 <__kernel_rem_pio2+0x338>)
 8023ab0:	2200      	movs	r2, #0
 8023ab2:	f7dc fd5f 	bl	8000574 <__aeabi_dmul>
 8023ab6:	4602      	mov	r2, r0
 8023ab8:	460b      	mov	r3, r1
 8023aba:	4630      	mov	r0, r6
 8023abc:	4639      	mov	r1, r7
 8023abe:	f7dc fba1 	bl	8000204 <__aeabi_dsub>
 8023ac2:	f7dc fff1 	bl	8000aa8 <__aeabi_d2iz>
 8023ac6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023aca:	f84b 0b04 	str.w	r0, [fp], #4
 8023ace:	ec51 0b18 	vmov	r0, r1, d8
 8023ad2:	f7dc fb99 	bl	8000208 <__adddf3>
 8023ad6:	f109 39ff 	add.w	r9, r9, #4294967295
 8023ada:	4606      	mov	r6, r0
 8023adc:	460f      	mov	r7, r1
 8023ade:	e75b      	b.n	8023998 <__kernel_rem_pio2+0x108>
 8023ae0:	d106      	bne.n	8023af0 <__kernel_rem_pio2+0x260>
 8023ae2:	1e63      	subs	r3, r4, #1
 8023ae4:	aa0e      	add	r2, sp, #56	; 0x38
 8023ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8023aea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8023aee:	e79d      	b.n	8023a2c <__kernel_rem_pio2+0x19c>
 8023af0:	4b36      	ldr	r3, [pc, #216]	; (8023bcc <__kernel_rem_pio2+0x33c>)
 8023af2:	2200      	movs	r2, #0
 8023af4:	f7dc ffc4 	bl	8000a80 <__aeabi_dcmpge>
 8023af8:	2800      	cmp	r0, #0
 8023afa:	d13d      	bne.n	8023b78 <__kernel_rem_pio2+0x2e8>
 8023afc:	4683      	mov	fp, r0
 8023afe:	2200      	movs	r2, #0
 8023b00:	2300      	movs	r3, #0
 8023b02:	4630      	mov	r0, r6
 8023b04:	4639      	mov	r1, r7
 8023b06:	f7dc ff9d 	bl	8000a44 <__aeabi_dcmpeq>
 8023b0a:	2800      	cmp	r0, #0
 8023b0c:	f000 80c0 	beq.w	8023c90 <__kernel_rem_pio2+0x400>
 8023b10:	1e65      	subs	r5, r4, #1
 8023b12:	462b      	mov	r3, r5
 8023b14:	2200      	movs	r2, #0
 8023b16:	9902      	ldr	r1, [sp, #8]
 8023b18:	428b      	cmp	r3, r1
 8023b1a:	da6c      	bge.n	8023bf6 <__kernel_rem_pio2+0x366>
 8023b1c:	2a00      	cmp	r2, #0
 8023b1e:	f000 8089 	beq.w	8023c34 <__kernel_rem_pio2+0x3a4>
 8023b22:	ab0e      	add	r3, sp, #56	; 0x38
 8023b24:	f1aa 0a18 	sub.w	sl, sl, #24
 8023b28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	f000 80ad 	beq.w	8023c8c <__kernel_rem_pio2+0x3fc>
 8023b32:	4650      	mov	r0, sl
 8023b34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8023bb0 <__kernel_rem_pio2+0x320>
 8023b38:	f000 fe82 	bl	8024840 <scalbn>
 8023b3c:	ab9a      	add	r3, sp, #616	; 0x268
 8023b3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023b42:	ec57 6b10 	vmov	r6, r7, d0
 8023b46:	00ec      	lsls	r4, r5, #3
 8023b48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8023b4c:	46aa      	mov	sl, r5
 8023b4e:	f1ba 0f00 	cmp.w	sl, #0
 8023b52:	f280 80d6 	bge.w	8023d02 <__kernel_rem_pio2+0x472>
 8023b56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8023ba8 <__kernel_rem_pio2+0x318>
 8023b5a:	462e      	mov	r6, r5
 8023b5c:	2e00      	cmp	r6, #0
 8023b5e:	f2c0 8104 	blt.w	8023d6a <__kernel_rem_pio2+0x4da>
 8023b62:	ab72      	add	r3, sp, #456	; 0x1c8
 8023b64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8023b68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8023bd0 <__kernel_rem_pio2+0x340>
 8023b6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8023b70:	f04f 0800 	mov.w	r8, #0
 8023b74:	1baf      	subs	r7, r5, r6
 8023b76:	e0ea      	b.n	8023d4e <__kernel_rem_pio2+0x4be>
 8023b78:	f04f 0b02 	mov.w	fp, #2
 8023b7c:	e759      	b.n	8023a32 <__kernel_rem_pio2+0x1a2>
 8023b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8023b82:	b955      	cbnz	r5, 8023b9a <__kernel_rem_pio2+0x30a>
 8023b84:	b123      	cbz	r3, 8023b90 <__kernel_rem_pio2+0x300>
 8023b86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023b8a:	f8c8 3000 	str.w	r3, [r8]
 8023b8e:	2301      	movs	r3, #1
 8023b90:	3201      	adds	r2, #1
 8023b92:	f108 0804 	add.w	r8, r8, #4
 8023b96:	461d      	mov	r5, r3
 8023b98:	e752      	b.n	8023a40 <__kernel_rem_pio2+0x1b0>
 8023b9a:	1acb      	subs	r3, r1, r3
 8023b9c:	f8c8 3000 	str.w	r3, [r8]
 8023ba0:	462b      	mov	r3, r5
 8023ba2:	e7f5      	b.n	8023b90 <__kernel_rem_pio2+0x300>
 8023ba4:	f3af 8000 	nop.w
	...
 8023bb4:	3ff00000 	.word	0x3ff00000
 8023bb8:	080289f0 	.word	0x080289f0
 8023bbc:	40200000 	.word	0x40200000
 8023bc0:	3ff00000 	.word	0x3ff00000
 8023bc4:	3e700000 	.word	0x3e700000
 8023bc8:	41700000 	.word	0x41700000
 8023bcc:	3fe00000 	.word	0x3fe00000
 8023bd0:	080289b0 	.word	0x080289b0
 8023bd4:	1e62      	subs	r2, r4, #1
 8023bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8023bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023bdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023be0:	a90e      	add	r1, sp, #56	; 0x38
 8023be2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023be6:	e739      	b.n	8023a5c <__kernel_rem_pio2+0x1cc>
 8023be8:	1e62      	subs	r2, r4, #1
 8023bea:	ab0e      	add	r3, sp, #56	; 0x38
 8023bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023bf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8023bf4:	e7f4      	b.n	8023be0 <__kernel_rem_pio2+0x350>
 8023bf6:	a90e      	add	r1, sp, #56	; 0x38
 8023bf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8023bfc:	3b01      	subs	r3, #1
 8023bfe:	430a      	orrs	r2, r1
 8023c00:	e789      	b.n	8023b16 <__kernel_rem_pio2+0x286>
 8023c02:	3301      	adds	r3, #1
 8023c04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023c08:	2900      	cmp	r1, #0
 8023c0a:	d0fa      	beq.n	8023c02 <__kernel_rem_pio2+0x372>
 8023c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8023c12:	446a      	add	r2, sp
 8023c14:	3a98      	subs	r2, #152	; 0x98
 8023c16:	920a      	str	r2, [sp, #40]	; 0x28
 8023c18:	9a08      	ldr	r2, [sp, #32]
 8023c1a:	18e3      	adds	r3, r4, r3
 8023c1c:	18a5      	adds	r5, r4, r2
 8023c1e:	aa22      	add	r2, sp, #136	; 0x88
 8023c20:	f104 0801 	add.w	r8, r4, #1
 8023c24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8023c28:	9304      	str	r3, [sp, #16]
 8023c2a:	9b04      	ldr	r3, [sp, #16]
 8023c2c:	4543      	cmp	r3, r8
 8023c2e:	da04      	bge.n	8023c3a <__kernel_rem_pio2+0x3aa>
 8023c30:	461c      	mov	r4, r3
 8023c32:	e6a3      	b.n	802397c <__kernel_rem_pio2+0xec>
 8023c34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023c36:	2301      	movs	r3, #1
 8023c38:	e7e4      	b.n	8023c04 <__kernel_rem_pio2+0x374>
 8023c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023c40:	f7dc fc2e 	bl	80004a0 <__aeabi_i2d>
 8023c44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8023c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c4a:	46ab      	mov	fp, r5
 8023c4c:	461c      	mov	r4, r3
 8023c4e:	f04f 0900 	mov.w	r9, #0
 8023c52:	2600      	movs	r6, #0
 8023c54:	2700      	movs	r7, #0
 8023c56:	9b06      	ldr	r3, [sp, #24]
 8023c58:	4599      	cmp	r9, r3
 8023c5a:	dd06      	ble.n	8023c6a <__kernel_rem_pio2+0x3da>
 8023c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8023c62:	f108 0801 	add.w	r8, r8, #1
 8023c66:	930a      	str	r3, [sp, #40]	; 0x28
 8023c68:	e7df      	b.n	8023c2a <__kernel_rem_pio2+0x39a>
 8023c6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8023c6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023c72:	f7dc fc7f 	bl	8000574 <__aeabi_dmul>
 8023c76:	4602      	mov	r2, r0
 8023c78:	460b      	mov	r3, r1
 8023c7a:	4630      	mov	r0, r6
 8023c7c:	4639      	mov	r1, r7
 8023c7e:	f7dc fac3 	bl	8000208 <__adddf3>
 8023c82:	f109 0901 	add.w	r9, r9, #1
 8023c86:	4606      	mov	r6, r0
 8023c88:	460f      	mov	r7, r1
 8023c8a:	e7e4      	b.n	8023c56 <__kernel_rem_pio2+0x3c6>
 8023c8c:	3d01      	subs	r5, #1
 8023c8e:	e748      	b.n	8023b22 <__kernel_rem_pio2+0x292>
 8023c90:	ec47 6b10 	vmov	d0, r6, r7
 8023c94:	f1ca 0000 	rsb	r0, sl, #0
 8023c98:	f000 fdd2 	bl	8024840 <scalbn>
 8023c9c:	ec57 6b10 	vmov	r6, r7, d0
 8023ca0:	4ba0      	ldr	r3, [pc, #640]	; (8023f24 <__kernel_rem_pio2+0x694>)
 8023ca2:	ee10 0a10 	vmov	r0, s0
 8023ca6:	2200      	movs	r2, #0
 8023ca8:	4639      	mov	r1, r7
 8023caa:	f7dc fee9 	bl	8000a80 <__aeabi_dcmpge>
 8023cae:	b1f8      	cbz	r0, 8023cf0 <__kernel_rem_pio2+0x460>
 8023cb0:	4b9d      	ldr	r3, [pc, #628]	; (8023f28 <__kernel_rem_pio2+0x698>)
 8023cb2:	2200      	movs	r2, #0
 8023cb4:	4630      	mov	r0, r6
 8023cb6:	4639      	mov	r1, r7
 8023cb8:	f7dc fc5c 	bl	8000574 <__aeabi_dmul>
 8023cbc:	f7dc fef4 	bl	8000aa8 <__aeabi_d2iz>
 8023cc0:	4680      	mov	r8, r0
 8023cc2:	f7dc fbed 	bl	80004a0 <__aeabi_i2d>
 8023cc6:	4b97      	ldr	r3, [pc, #604]	; (8023f24 <__kernel_rem_pio2+0x694>)
 8023cc8:	2200      	movs	r2, #0
 8023cca:	f7dc fc53 	bl	8000574 <__aeabi_dmul>
 8023cce:	460b      	mov	r3, r1
 8023cd0:	4602      	mov	r2, r0
 8023cd2:	4639      	mov	r1, r7
 8023cd4:	4630      	mov	r0, r6
 8023cd6:	f7dc fa95 	bl	8000204 <__aeabi_dsub>
 8023cda:	f7dc fee5 	bl	8000aa8 <__aeabi_d2iz>
 8023cde:	1c65      	adds	r5, r4, #1
 8023ce0:	ab0e      	add	r3, sp, #56	; 0x38
 8023ce2:	f10a 0a18 	add.w	sl, sl, #24
 8023ce6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023cea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8023cee:	e720      	b.n	8023b32 <__kernel_rem_pio2+0x2a2>
 8023cf0:	4630      	mov	r0, r6
 8023cf2:	4639      	mov	r1, r7
 8023cf4:	f7dc fed8 	bl	8000aa8 <__aeabi_d2iz>
 8023cf8:	ab0e      	add	r3, sp, #56	; 0x38
 8023cfa:	4625      	mov	r5, r4
 8023cfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023d00:	e717      	b.n	8023b32 <__kernel_rem_pio2+0x2a2>
 8023d02:	ab0e      	add	r3, sp, #56	; 0x38
 8023d04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8023d08:	f7dc fbca 	bl	80004a0 <__aeabi_i2d>
 8023d0c:	4632      	mov	r2, r6
 8023d0e:	463b      	mov	r3, r7
 8023d10:	f7dc fc30 	bl	8000574 <__aeabi_dmul>
 8023d14:	4b84      	ldr	r3, [pc, #528]	; (8023f28 <__kernel_rem_pio2+0x698>)
 8023d16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8023d1a:	2200      	movs	r2, #0
 8023d1c:	4630      	mov	r0, r6
 8023d1e:	4639      	mov	r1, r7
 8023d20:	f7dc fc28 	bl	8000574 <__aeabi_dmul>
 8023d24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023d28:	4606      	mov	r6, r0
 8023d2a:	460f      	mov	r7, r1
 8023d2c:	e70f      	b.n	8023b4e <__kernel_rem_pio2+0x2be>
 8023d2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8023d32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8023d36:	f7dc fc1d 	bl	8000574 <__aeabi_dmul>
 8023d3a:	4602      	mov	r2, r0
 8023d3c:	460b      	mov	r3, r1
 8023d3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023d42:	f7dc fa61 	bl	8000208 <__adddf3>
 8023d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023d4a:	f108 0801 	add.w	r8, r8, #1
 8023d4e:	9b02      	ldr	r3, [sp, #8]
 8023d50:	4598      	cmp	r8, r3
 8023d52:	dc01      	bgt.n	8023d58 <__kernel_rem_pio2+0x4c8>
 8023d54:	45b8      	cmp	r8, r7
 8023d56:	ddea      	ble.n	8023d2e <__kernel_rem_pio2+0x49e>
 8023d58:	ed9d 7b06 	vldr	d7, [sp, #24]
 8023d5c:	ab4a      	add	r3, sp, #296	; 0x128
 8023d5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8023d62:	ed87 7b00 	vstr	d7, [r7]
 8023d66:	3e01      	subs	r6, #1
 8023d68:	e6f8      	b.n	8023b5c <__kernel_rem_pio2+0x2cc>
 8023d6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023d6c:	2b02      	cmp	r3, #2
 8023d6e:	dc0b      	bgt.n	8023d88 <__kernel_rem_pio2+0x4f8>
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	dc35      	bgt.n	8023de0 <__kernel_rem_pio2+0x550>
 8023d74:	d059      	beq.n	8023e2a <__kernel_rem_pio2+0x59a>
 8023d76:	9b04      	ldr	r3, [sp, #16]
 8023d78:	f003 0007 	and.w	r0, r3, #7
 8023d7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8023d80:	ecbd 8b02 	vpop	{d8}
 8023d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023d8a:	2b03      	cmp	r3, #3
 8023d8c:	d1f3      	bne.n	8023d76 <__kernel_rem_pio2+0x4e6>
 8023d8e:	ab4a      	add	r3, sp, #296	; 0x128
 8023d90:	4423      	add	r3, r4
 8023d92:	9306      	str	r3, [sp, #24]
 8023d94:	461c      	mov	r4, r3
 8023d96:	469a      	mov	sl, r3
 8023d98:	9502      	str	r5, [sp, #8]
 8023d9a:	9b02      	ldr	r3, [sp, #8]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	f1aa 0a08 	sub.w	sl, sl, #8
 8023da2:	dc6b      	bgt.n	8023e7c <__kernel_rem_pio2+0x5ec>
 8023da4:	46aa      	mov	sl, r5
 8023da6:	f1ba 0f01 	cmp.w	sl, #1
 8023daa:	f1a4 0408 	sub.w	r4, r4, #8
 8023dae:	f300 8085 	bgt.w	8023ebc <__kernel_rem_pio2+0x62c>
 8023db2:	9c06      	ldr	r4, [sp, #24]
 8023db4:	2000      	movs	r0, #0
 8023db6:	3408      	adds	r4, #8
 8023db8:	2100      	movs	r1, #0
 8023dba:	2d01      	cmp	r5, #1
 8023dbc:	f300 809d 	bgt.w	8023efa <__kernel_rem_pio2+0x66a>
 8023dc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8023dc4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8023dc8:	f1bb 0f00 	cmp.w	fp, #0
 8023dcc:	f040 809b 	bne.w	8023f06 <__kernel_rem_pio2+0x676>
 8023dd0:	9b01      	ldr	r3, [sp, #4]
 8023dd2:	e9c3 5600 	strd	r5, r6, [r3]
 8023dd6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8023dda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023dde:	e7ca      	b.n	8023d76 <__kernel_rem_pio2+0x4e6>
 8023de0:	3408      	adds	r4, #8
 8023de2:	ab4a      	add	r3, sp, #296	; 0x128
 8023de4:	441c      	add	r4, r3
 8023de6:	462e      	mov	r6, r5
 8023de8:	2000      	movs	r0, #0
 8023dea:	2100      	movs	r1, #0
 8023dec:	2e00      	cmp	r6, #0
 8023dee:	da36      	bge.n	8023e5e <__kernel_rem_pio2+0x5ce>
 8023df0:	f1bb 0f00 	cmp.w	fp, #0
 8023df4:	d039      	beq.n	8023e6a <__kernel_rem_pio2+0x5da>
 8023df6:	4602      	mov	r2, r0
 8023df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023dfc:	9c01      	ldr	r4, [sp, #4]
 8023dfe:	e9c4 2300 	strd	r2, r3, [r4]
 8023e02:	4602      	mov	r2, r0
 8023e04:	460b      	mov	r3, r1
 8023e06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8023e0a:	f7dc f9fb 	bl	8000204 <__aeabi_dsub>
 8023e0e:	ae4c      	add	r6, sp, #304	; 0x130
 8023e10:	2401      	movs	r4, #1
 8023e12:	42a5      	cmp	r5, r4
 8023e14:	da2c      	bge.n	8023e70 <__kernel_rem_pio2+0x5e0>
 8023e16:	f1bb 0f00 	cmp.w	fp, #0
 8023e1a:	d002      	beq.n	8023e22 <__kernel_rem_pio2+0x592>
 8023e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023e20:	4619      	mov	r1, r3
 8023e22:	9b01      	ldr	r3, [sp, #4]
 8023e24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023e28:	e7a5      	b.n	8023d76 <__kernel_rem_pio2+0x4e6>
 8023e2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8023e2e:	eb0d 0403 	add.w	r4, sp, r3
 8023e32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8023e36:	2000      	movs	r0, #0
 8023e38:	2100      	movs	r1, #0
 8023e3a:	2d00      	cmp	r5, #0
 8023e3c:	da09      	bge.n	8023e52 <__kernel_rem_pio2+0x5c2>
 8023e3e:	f1bb 0f00 	cmp.w	fp, #0
 8023e42:	d002      	beq.n	8023e4a <__kernel_rem_pio2+0x5ba>
 8023e44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023e48:	4619      	mov	r1, r3
 8023e4a:	9b01      	ldr	r3, [sp, #4]
 8023e4c:	e9c3 0100 	strd	r0, r1, [r3]
 8023e50:	e791      	b.n	8023d76 <__kernel_rem_pio2+0x4e6>
 8023e52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023e56:	f7dc f9d7 	bl	8000208 <__adddf3>
 8023e5a:	3d01      	subs	r5, #1
 8023e5c:	e7ed      	b.n	8023e3a <__kernel_rem_pio2+0x5aa>
 8023e5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023e62:	f7dc f9d1 	bl	8000208 <__adddf3>
 8023e66:	3e01      	subs	r6, #1
 8023e68:	e7c0      	b.n	8023dec <__kernel_rem_pio2+0x55c>
 8023e6a:	4602      	mov	r2, r0
 8023e6c:	460b      	mov	r3, r1
 8023e6e:	e7c5      	b.n	8023dfc <__kernel_rem_pio2+0x56c>
 8023e70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8023e74:	f7dc f9c8 	bl	8000208 <__adddf3>
 8023e78:	3401      	adds	r4, #1
 8023e7a:	e7ca      	b.n	8023e12 <__kernel_rem_pio2+0x582>
 8023e7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8023e80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8023e84:	9b02      	ldr	r3, [sp, #8]
 8023e86:	3b01      	subs	r3, #1
 8023e88:	9302      	str	r3, [sp, #8]
 8023e8a:	4632      	mov	r2, r6
 8023e8c:	463b      	mov	r3, r7
 8023e8e:	4640      	mov	r0, r8
 8023e90:	4649      	mov	r1, r9
 8023e92:	f7dc f9b9 	bl	8000208 <__adddf3>
 8023e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023e9a:	4602      	mov	r2, r0
 8023e9c:	460b      	mov	r3, r1
 8023e9e:	4640      	mov	r0, r8
 8023ea0:	4649      	mov	r1, r9
 8023ea2:	f7dc f9af 	bl	8000204 <__aeabi_dsub>
 8023ea6:	4632      	mov	r2, r6
 8023ea8:	463b      	mov	r3, r7
 8023eaa:	f7dc f9ad 	bl	8000208 <__adddf3>
 8023eae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8023eb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023eb6:	ed8a 7b00 	vstr	d7, [sl]
 8023eba:	e76e      	b.n	8023d9a <__kernel_rem_pio2+0x50a>
 8023ebc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023ec0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8023ec4:	4640      	mov	r0, r8
 8023ec6:	4632      	mov	r2, r6
 8023ec8:	463b      	mov	r3, r7
 8023eca:	4649      	mov	r1, r9
 8023ecc:	f7dc f99c 	bl	8000208 <__adddf3>
 8023ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023ed4:	4602      	mov	r2, r0
 8023ed6:	460b      	mov	r3, r1
 8023ed8:	4640      	mov	r0, r8
 8023eda:	4649      	mov	r1, r9
 8023edc:	f7dc f992 	bl	8000204 <__aeabi_dsub>
 8023ee0:	4632      	mov	r2, r6
 8023ee2:	463b      	mov	r3, r7
 8023ee4:	f7dc f990 	bl	8000208 <__adddf3>
 8023ee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023eec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023ef0:	ed84 7b00 	vstr	d7, [r4]
 8023ef4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023ef8:	e755      	b.n	8023da6 <__kernel_rem_pio2+0x516>
 8023efa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023efe:	f7dc f983 	bl	8000208 <__adddf3>
 8023f02:	3d01      	subs	r5, #1
 8023f04:	e759      	b.n	8023dba <__kernel_rem_pio2+0x52a>
 8023f06:	9b01      	ldr	r3, [sp, #4]
 8023f08:	9a01      	ldr	r2, [sp, #4]
 8023f0a:	601d      	str	r5, [r3, #0]
 8023f0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8023f10:	605c      	str	r4, [r3, #4]
 8023f12:	609f      	str	r7, [r3, #8]
 8023f14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8023f18:	60d3      	str	r3, [r2, #12]
 8023f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023f1e:	6110      	str	r0, [r2, #16]
 8023f20:	6153      	str	r3, [r2, #20]
 8023f22:	e728      	b.n	8023d76 <__kernel_rem_pio2+0x4e6>
 8023f24:	41700000 	.word	0x41700000
 8023f28:	3e700000 	.word	0x3e700000
 8023f2c:	00000000 	.word	0x00000000

08023f30 <__kernel_sin>:
 8023f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f34:	ed2d 8b04 	vpush	{d8-d9}
 8023f38:	eeb0 8a41 	vmov.f32	s16, s2
 8023f3c:	eef0 8a61 	vmov.f32	s17, s3
 8023f40:	ec55 4b10 	vmov	r4, r5, d0
 8023f44:	b083      	sub	sp, #12
 8023f46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023f4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023f4e:	9001      	str	r0, [sp, #4]
 8023f50:	da06      	bge.n	8023f60 <__kernel_sin+0x30>
 8023f52:	ee10 0a10 	vmov	r0, s0
 8023f56:	4629      	mov	r1, r5
 8023f58:	f7dc fda6 	bl	8000aa8 <__aeabi_d2iz>
 8023f5c:	2800      	cmp	r0, #0
 8023f5e:	d051      	beq.n	8024004 <__kernel_sin+0xd4>
 8023f60:	4622      	mov	r2, r4
 8023f62:	462b      	mov	r3, r5
 8023f64:	4620      	mov	r0, r4
 8023f66:	4629      	mov	r1, r5
 8023f68:	f7dc fb04 	bl	8000574 <__aeabi_dmul>
 8023f6c:	4682      	mov	sl, r0
 8023f6e:	468b      	mov	fp, r1
 8023f70:	4602      	mov	r2, r0
 8023f72:	460b      	mov	r3, r1
 8023f74:	4620      	mov	r0, r4
 8023f76:	4629      	mov	r1, r5
 8023f78:	f7dc fafc 	bl	8000574 <__aeabi_dmul>
 8023f7c:	a341      	add	r3, pc, #260	; (adr r3, 8024084 <__kernel_sin+0x154>)
 8023f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f82:	4680      	mov	r8, r0
 8023f84:	4689      	mov	r9, r1
 8023f86:	4650      	mov	r0, sl
 8023f88:	4659      	mov	r1, fp
 8023f8a:	f7dc faf3 	bl	8000574 <__aeabi_dmul>
 8023f8e:	a33f      	add	r3, pc, #252	; (adr r3, 802408c <__kernel_sin+0x15c>)
 8023f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f94:	f7dc f936 	bl	8000204 <__aeabi_dsub>
 8023f98:	4652      	mov	r2, sl
 8023f9a:	465b      	mov	r3, fp
 8023f9c:	f7dc faea 	bl	8000574 <__aeabi_dmul>
 8023fa0:	a33c      	add	r3, pc, #240	; (adr r3, 8024094 <__kernel_sin+0x164>)
 8023fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fa6:	f7dc f92f 	bl	8000208 <__adddf3>
 8023faa:	4652      	mov	r2, sl
 8023fac:	465b      	mov	r3, fp
 8023fae:	f7dc fae1 	bl	8000574 <__aeabi_dmul>
 8023fb2:	a33a      	add	r3, pc, #232	; (adr r3, 802409c <__kernel_sin+0x16c>)
 8023fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb8:	f7dc f924 	bl	8000204 <__aeabi_dsub>
 8023fbc:	4652      	mov	r2, sl
 8023fbe:	465b      	mov	r3, fp
 8023fc0:	f7dc fad8 	bl	8000574 <__aeabi_dmul>
 8023fc4:	a337      	add	r3, pc, #220	; (adr r3, 80240a4 <__kernel_sin+0x174>)
 8023fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fca:	f7dc f91d 	bl	8000208 <__adddf3>
 8023fce:	9b01      	ldr	r3, [sp, #4]
 8023fd0:	4606      	mov	r6, r0
 8023fd2:	460f      	mov	r7, r1
 8023fd4:	b9eb      	cbnz	r3, 8024012 <__kernel_sin+0xe2>
 8023fd6:	4602      	mov	r2, r0
 8023fd8:	460b      	mov	r3, r1
 8023fda:	4650      	mov	r0, sl
 8023fdc:	4659      	mov	r1, fp
 8023fde:	f7dc fac9 	bl	8000574 <__aeabi_dmul>
 8023fe2:	a325      	add	r3, pc, #148	; (adr r3, 8024078 <__kernel_sin+0x148>)
 8023fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fe8:	f7dc f90c 	bl	8000204 <__aeabi_dsub>
 8023fec:	4642      	mov	r2, r8
 8023fee:	464b      	mov	r3, r9
 8023ff0:	f7dc fac0 	bl	8000574 <__aeabi_dmul>
 8023ff4:	4602      	mov	r2, r0
 8023ff6:	460b      	mov	r3, r1
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	4629      	mov	r1, r5
 8023ffc:	f7dc f904 	bl	8000208 <__adddf3>
 8024000:	4604      	mov	r4, r0
 8024002:	460d      	mov	r5, r1
 8024004:	ec45 4b10 	vmov	d0, r4, r5
 8024008:	b003      	add	sp, #12
 802400a:	ecbd 8b04 	vpop	{d8-d9}
 802400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024012:	4b1b      	ldr	r3, [pc, #108]	; (8024080 <__kernel_sin+0x150>)
 8024014:	ec51 0b18 	vmov	r0, r1, d8
 8024018:	2200      	movs	r2, #0
 802401a:	f7dc faab 	bl	8000574 <__aeabi_dmul>
 802401e:	4632      	mov	r2, r6
 8024020:	ec41 0b19 	vmov	d9, r0, r1
 8024024:	463b      	mov	r3, r7
 8024026:	4640      	mov	r0, r8
 8024028:	4649      	mov	r1, r9
 802402a:	f7dc faa3 	bl	8000574 <__aeabi_dmul>
 802402e:	4602      	mov	r2, r0
 8024030:	460b      	mov	r3, r1
 8024032:	ec51 0b19 	vmov	r0, r1, d9
 8024036:	f7dc f8e5 	bl	8000204 <__aeabi_dsub>
 802403a:	4652      	mov	r2, sl
 802403c:	465b      	mov	r3, fp
 802403e:	f7dc fa99 	bl	8000574 <__aeabi_dmul>
 8024042:	ec53 2b18 	vmov	r2, r3, d8
 8024046:	f7dc f8dd 	bl	8000204 <__aeabi_dsub>
 802404a:	a30b      	add	r3, pc, #44	; (adr r3, 8024078 <__kernel_sin+0x148>)
 802404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024050:	4606      	mov	r6, r0
 8024052:	460f      	mov	r7, r1
 8024054:	4640      	mov	r0, r8
 8024056:	4649      	mov	r1, r9
 8024058:	f7dc fa8c 	bl	8000574 <__aeabi_dmul>
 802405c:	4602      	mov	r2, r0
 802405e:	460b      	mov	r3, r1
 8024060:	4630      	mov	r0, r6
 8024062:	4639      	mov	r1, r7
 8024064:	f7dc f8d0 	bl	8000208 <__adddf3>
 8024068:	4602      	mov	r2, r0
 802406a:	460b      	mov	r3, r1
 802406c:	4620      	mov	r0, r4
 802406e:	4629      	mov	r1, r5
 8024070:	f7dc f8c8 	bl	8000204 <__aeabi_dsub>
 8024074:	e7c4      	b.n	8024000 <__kernel_sin+0xd0>
 8024076:	bf00      	nop
 8024078:	55555549 	.word	0x55555549
 802407c:	3fc55555 	.word	0x3fc55555
 8024080:	3fe00000 	.word	0x3fe00000
 8024084:	5acfd57c 	.word	0x5acfd57c
 8024088:	3de5d93a 	.word	0x3de5d93a
 802408c:	8a2b9ceb 	.word	0x8a2b9ceb
 8024090:	3e5ae5e6 	.word	0x3e5ae5e6
 8024094:	57b1fe7d 	.word	0x57b1fe7d
 8024098:	3ec71de3 	.word	0x3ec71de3
 802409c:	19c161d5 	.word	0x19c161d5
 80240a0:	3f2a01a0 	.word	0x3f2a01a0
 80240a4:	1110f8a6 	.word	0x1110f8a6
 80240a8:	3f811111 	.word	0x3f811111

080240ac <__kernel_cosf>:
 80240ac:	ee10 3a10 	vmov	r3, s0
 80240b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80240b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80240b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80240bc:	da05      	bge.n	80240ca <__kernel_cosf+0x1e>
 80240be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80240c2:	ee17 2a90 	vmov	r2, s15
 80240c6:	2a00      	cmp	r2, #0
 80240c8:	d03d      	beq.n	8024146 <__kernel_cosf+0x9a>
 80240ca:	ee60 5a00 	vmul.f32	s11, s0, s0
 80240ce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802414c <__kernel_cosf+0xa0>
 80240d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024150 <__kernel_cosf+0xa4>
 80240d6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8024154 <__kernel_cosf+0xa8>
 80240da:	4a1f      	ldr	r2, [pc, #124]	; (8024158 <__kernel_cosf+0xac>)
 80240dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80240e0:	4293      	cmp	r3, r2
 80240e2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802415c <__kernel_cosf+0xb0>
 80240e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80240ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024160 <__kernel_cosf+0xb4>
 80240ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80240f2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8024164 <__kernel_cosf+0xb8>
 80240f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80240fa:	eeb0 7a66 	vmov.f32	s14, s13
 80240fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024102:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8024106:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802410a:	ee67 6a25 	vmul.f32	s13, s14, s11
 802410e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8024112:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024116:	dc04      	bgt.n	8024122 <__kernel_cosf+0x76>
 8024118:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802411c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8024120:	4770      	bx	lr
 8024122:	4a11      	ldr	r2, [pc, #68]	; (8024168 <__kernel_cosf+0xbc>)
 8024124:	4293      	cmp	r3, r2
 8024126:	bfda      	itte	le
 8024128:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802412c:	ee06 3a90 	vmovle	s13, r3
 8024130:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8024134:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024138:	ee36 0a66 	vsub.f32	s0, s12, s13
 802413c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024140:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024144:	4770      	bx	lr
 8024146:	eeb0 0a46 	vmov.f32	s0, s12
 802414a:	4770      	bx	lr
 802414c:	ad47d74e 	.word	0xad47d74e
 8024150:	310f74f6 	.word	0x310f74f6
 8024154:	3d2aaaab 	.word	0x3d2aaaab
 8024158:	3e999999 	.word	0x3e999999
 802415c:	b493f27c 	.word	0xb493f27c
 8024160:	37d00d01 	.word	0x37d00d01
 8024164:	bab60b61 	.word	0xbab60b61
 8024168:	3f480000 	.word	0x3f480000

0802416c <__kernel_rem_pio2f>:
 802416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024170:	ed2d 8b04 	vpush	{d8-d9}
 8024174:	b0d9      	sub	sp, #356	; 0x164
 8024176:	4688      	mov	r8, r1
 8024178:	9002      	str	r0, [sp, #8]
 802417a:	49bb      	ldr	r1, [pc, #748]	; (8024468 <__kernel_rem_pio2f+0x2fc>)
 802417c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802417e:	9301      	str	r3, [sp, #4]
 8024180:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8024184:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8024188:	1e59      	subs	r1, r3, #1
 802418a:	1d13      	adds	r3, r2, #4
 802418c:	db27      	blt.n	80241de <__kernel_rem_pio2f+0x72>
 802418e:	f1b2 0b03 	subs.w	fp, r2, #3
 8024192:	bf48      	it	mi
 8024194:	f102 0b04 	addmi.w	fp, r2, #4
 8024198:	ea4f 00eb 	mov.w	r0, fp, asr #3
 802419c:	1c45      	adds	r5, r0, #1
 802419e:	00ec      	lsls	r4, r5, #3
 80241a0:	1a47      	subs	r7, r0, r1
 80241a2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8024478 <__kernel_rem_pio2f+0x30c>
 80241a6:	9403      	str	r4, [sp, #12]
 80241a8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80241ac:	eb0a 0c01 	add.w	ip, sl, r1
 80241b0:	ae1c      	add	r6, sp, #112	; 0x70
 80241b2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80241b6:	2400      	movs	r4, #0
 80241b8:	4564      	cmp	r4, ip
 80241ba:	dd12      	ble.n	80241e2 <__kernel_rem_pio2f+0x76>
 80241bc:	9b01      	ldr	r3, [sp, #4]
 80241be:	ac1c      	add	r4, sp, #112	; 0x70
 80241c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80241c4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80241c8:	f04f 0c00 	mov.w	ip, #0
 80241cc:	45d4      	cmp	ip, sl
 80241ce:	dc27      	bgt.n	8024220 <__kernel_rem_pio2f+0xb4>
 80241d0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80241d4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8024478 <__kernel_rem_pio2f+0x30c>
 80241d8:	4627      	mov	r7, r4
 80241da:	2600      	movs	r6, #0
 80241dc:	e016      	b.n	802420c <__kernel_rem_pio2f+0xa0>
 80241de:	2000      	movs	r0, #0
 80241e0:	e7dc      	b.n	802419c <__kernel_rem_pio2f+0x30>
 80241e2:	42e7      	cmn	r7, r4
 80241e4:	bf5d      	ittte	pl
 80241e6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80241ea:	ee07 3a90 	vmovpl	s15, r3
 80241ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80241f2:	eef0 7a47 	vmovmi.f32	s15, s14
 80241f6:	ece6 7a01 	vstmia	r6!, {s15}
 80241fa:	3401      	adds	r4, #1
 80241fc:	e7dc      	b.n	80241b8 <__kernel_rem_pio2f+0x4c>
 80241fe:	ecf9 6a01 	vldmia	r9!, {s13}
 8024202:	ed97 7a00 	vldr	s14, [r7]
 8024206:	eee6 7a87 	vfma.f32	s15, s13, s14
 802420a:	3601      	adds	r6, #1
 802420c:	428e      	cmp	r6, r1
 802420e:	f1a7 0704 	sub.w	r7, r7, #4
 8024212:	ddf4      	ble.n	80241fe <__kernel_rem_pio2f+0x92>
 8024214:	eceb 7a01 	vstmia	fp!, {s15}
 8024218:	f10c 0c01 	add.w	ip, ip, #1
 802421c:	3404      	adds	r4, #4
 802421e:	e7d5      	b.n	80241cc <__kernel_rem_pio2f+0x60>
 8024220:	ab08      	add	r3, sp, #32
 8024222:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8024226:	eddf 8a93 	vldr	s17, [pc, #588]	; 8024474 <__kernel_rem_pio2f+0x308>
 802422a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8024470 <__kernel_rem_pio2f+0x304>
 802422e:	9304      	str	r3, [sp, #16]
 8024230:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8024234:	4656      	mov	r6, sl
 8024236:	00b3      	lsls	r3, r6, #2
 8024238:	9305      	str	r3, [sp, #20]
 802423a:	ab58      	add	r3, sp, #352	; 0x160
 802423c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8024240:	ac08      	add	r4, sp, #32
 8024242:	ab44      	add	r3, sp, #272	; 0x110
 8024244:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8024248:	46a4      	mov	ip, r4
 802424a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802424e:	4637      	mov	r7, r6
 8024250:	2f00      	cmp	r7, #0
 8024252:	f1a0 0004 	sub.w	r0, r0, #4
 8024256:	dc4f      	bgt.n	80242f8 <__kernel_rem_pio2f+0x18c>
 8024258:	4628      	mov	r0, r5
 802425a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802425e:	f000 fca5 	bl	8024bac <scalbnf>
 8024262:	eeb0 8a40 	vmov.f32	s16, s0
 8024266:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802426a:	ee28 0a00 	vmul.f32	s0, s16, s0
 802426e:	f000 fc55 	bl	8024b1c <floorf>
 8024272:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8024276:	eea0 8a67 	vfms.f32	s16, s0, s15
 802427a:	2d00      	cmp	r5, #0
 802427c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024280:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8024284:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8024288:	ee17 9a90 	vmov	r9, s15
 802428c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024290:	dd44      	ble.n	802431c <__kernel_rem_pio2f+0x1b0>
 8024292:	f106 3cff 	add.w	ip, r6, #4294967295
 8024296:	ab08      	add	r3, sp, #32
 8024298:	f1c5 0e08 	rsb	lr, r5, #8
 802429c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80242a0:	fa47 f00e 	asr.w	r0, r7, lr
 80242a4:	4481      	add	r9, r0
 80242a6:	fa00 f00e 	lsl.w	r0, r0, lr
 80242aa:	1a3f      	subs	r7, r7, r0
 80242ac:	f1c5 0007 	rsb	r0, r5, #7
 80242b0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80242b4:	4107      	asrs	r7, r0
 80242b6:	2f00      	cmp	r7, #0
 80242b8:	dd3f      	ble.n	802433a <__kernel_rem_pio2f+0x1ce>
 80242ba:	f04f 0e00 	mov.w	lr, #0
 80242be:	f109 0901 	add.w	r9, r9, #1
 80242c2:	4673      	mov	r3, lr
 80242c4:	4576      	cmp	r6, lr
 80242c6:	dc6b      	bgt.n	80243a0 <__kernel_rem_pio2f+0x234>
 80242c8:	2d00      	cmp	r5, #0
 80242ca:	dd04      	ble.n	80242d6 <__kernel_rem_pio2f+0x16a>
 80242cc:	2d01      	cmp	r5, #1
 80242ce:	d078      	beq.n	80243c2 <__kernel_rem_pio2f+0x256>
 80242d0:	2d02      	cmp	r5, #2
 80242d2:	f000 8081 	beq.w	80243d8 <__kernel_rem_pio2f+0x26c>
 80242d6:	2f02      	cmp	r7, #2
 80242d8:	d12f      	bne.n	802433a <__kernel_rem_pio2f+0x1ce>
 80242da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80242de:	ee30 8a48 	vsub.f32	s16, s0, s16
 80242e2:	b353      	cbz	r3, 802433a <__kernel_rem_pio2f+0x1ce>
 80242e4:	4628      	mov	r0, r5
 80242e6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80242ea:	f000 fc5f 	bl	8024bac <scalbnf>
 80242ee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80242f2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80242f6:	e020      	b.n	802433a <__kernel_rem_pio2f+0x1ce>
 80242f8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80242fc:	3f01      	subs	r7, #1
 80242fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024306:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802430a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802430e:	ecac 0a01 	vstmia	ip!, {s0}
 8024312:	ed90 0a00 	vldr	s0, [r0]
 8024316:	ee37 0a80 	vadd.f32	s0, s15, s0
 802431a:	e799      	b.n	8024250 <__kernel_rem_pio2f+0xe4>
 802431c:	d105      	bne.n	802432a <__kernel_rem_pio2f+0x1be>
 802431e:	1e70      	subs	r0, r6, #1
 8024320:	ab08      	add	r3, sp, #32
 8024322:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8024326:	11ff      	asrs	r7, r7, #7
 8024328:	e7c5      	b.n	80242b6 <__kernel_rem_pio2f+0x14a>
 802432a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802432e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8024332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024336:	da31      	bge.n	802439c <__kernel_rem_pio2f+0x230>
 8024338:	2700      	movs	r7, #0
 802433a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024342:	f040 809b 	bne.w	802447c <__kernel_rem_pio2f+0x310>
 8024346:	1e74      	subs	r4, r6, #1
 8024348:	46a4      	mov	ip, r4
 802434a:	2000      	movs	r0, #0
 802434c:	45d4      	cmp	ip, sl
 802434e:	da4a      	bge.n	80243e6 <__kernel_rem_pio2f+0x27a>
 8024350:	2800      	cmp	r0, #0
 8024352:	d07a      	beq.n	802444a <__kernel_rem_pio2f+0x2de>
 8024354:	ab08      	add	r3, sp, #32
 8024356:	3d08      	subs	r5, #8
 8024358:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802435c:	2b00      	cmp	r3, #0
 802435e:	f000 8081 	beq.w	8024464 <__kernel_rem_pio2f+0x2f8>
 8024362:	4628      	mov	r0, r5
 8024364:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024368:	00a5      	lsls	r5, r4, #2
 802436a:	f000 fc1f 	bl	8024bac <scalbnf>
 802436e:	aa44      	add	r2, sp, #272	; 0x110
 8024370:	1d2b      	adds	r3, r5, #4
 8024372:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8024474 <__kernel_rem_pio2f+0x308>
 8024376:	18d1      	adds	r1, r2, r3
 8024378:	4622      	mov	r2, r4
 802437a:	2a00      	cmp	r2, #0
 802437c:	f280 80ae 	bge.w	80244dc <__kernel_rem_pio2f+0x370>
 8024380:	4622      	mov	r2, r4
 8024382:	2a00      	cmp	r2, #0
 8024384:	f2c0 80cc 	blt.w	8024520 <__kernel_rem_pio2f+0x3b4>
 8024388:	a944      	add	r1, sp, #272	; 0x110
 802438a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 802438e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802446c <__kernel_rem_pio2f+0x300>
 8024392:	eddf 7a39 	vldr	s15, [pc, #228]	; 8024478 <__kernel_rem_pio2f+0x30c>
 8024396:	2000      	movs	r0, #0
 8024398:	1aa1      	subs	r1, r4, r2
 802439a:	e0b6      	b.n	802450a <__kernel_rem_pio2f+0x39e>
 802439c:	2702      	movs	r7, #2
 802439e:	e78c      	b.n	80242ba <__kernel_rem_pio2f+0x14e>
 80243a0:	6820      	ldr	r0, [r4, #0]
 80243a2:	b94b      	cbnz	r3, 80243b8 <__kernel_rem_pio2f+0x24c>
 80243a4:	b118      	cbz	r0, 80243ae <__kernel_rem_pio2f+0x242>
 80243a6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80243aa:	6020      	str	r0, [r4, #0]
 80243ac:	2001      	movs	r0, #1
 80243ae:	f10e 0e01 	add.w	lr, lr, #1
 80243b2:	3404      	adds	r4, #4
 80243b4:	4603      	mov	r3, r0
 80243b6:	e785      	b.n	80242c4 <__kernel_rem_pio2f+0x158>
 80243b8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80243bc:	6020      	str	r0, [r4, #0]
 80243be:	4618      	mov	r0, r3
 80243c0:	e7f5      	b.n	80243ae <__kernel_rem_pio2f+0x242>
 80243c2:	1e74      	subs	r4, r6, #1
 80243c4:	a808      	add	r0, sp, #32
 80243c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80243ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80243ce:	f10d 0c20 	add.w	ip, sp, #32
 80243d2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80243d6:	e77e      	b.n	80242d6 <__kernel_rem_pio2f+0x16a>
 80243d8:	1e74      	subs	r4, r6, #1
 80243da:	a808      	add	r0, sp, #32
 80243dc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80243e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80243e4:	e7f3      	b.n	80243ce <__kernel_rem_pio2f+0x262>
 80243e6:	ab08      	add	r3, sp, #32
 80243e8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80243ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80243f0:	4318      	orrs	r0, r3
 80243f2:	e7ab      	b.n	802434c <__kernel_rem_pio2f+0x1e0>
 80243f4:	f10c 0c01 	add.w	ip, ip, #1
 80243f8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80243fc:	2c00      	cmp	r4, #0
 80243fe:	d0f9      	beq.n	80243f4 <__kernel_rem_pio2f+0x288>
 8024400:	9b05      	ldr	r3, [sp, #20]
 8024402:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8024406:	eb0d 0003 	add.w	r0, sp, r3
 802440a:	9b01      	ldr	r3, [sp, #4]
 802440c:	18f4      	adds	r4, r6, r3
 802440e:	ab1c      	add	r3, sp, #112	; 0x70
 8024410:	1c77      	adds	r7, r6, #1
 8024412:	384c      	subs	r0, #76	; 0x4c
 8024414:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024418:	4466      	add	r6, ip
 802441a:	42be      	cmp	r6, r7
 802441c:	f6ff af0b 	blt.w	8024236 <__kernel_rem_pio2f+0xca>
 8024420:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8024424:	f8dd e008 	ldr.w	lr, [sp, #8]
 8024428:	ee07 3a90 	vmov	s15, r3
 802442c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024430:	f04f 0c00 	mov.w	ip, #0
 8024434:	ece4 7a01 	vstmia	r4!, {s15}
 8024438:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8024478 <__kernel_rem_pio2f+0x30c>
 802443c:	46a1      	mov	r9, r4
 802443e:	458c      	cmp	ip, r1
 8024440:	dd07      	ble.n	8024452 <__kernel_rem_pio2f+0x2e6>
 8024442:	ece0 7a01 	vstmia	r0!, {s15}
 8024446:	3701      	adds	r7, #1
 8024448:	e7e7      	b.n	802441a <__kernel_rem_pio2f+0x2ae>
 802444a:	9804      	ldr	r0, [sp, #16]
 802444c:	f04f 0c01 	mov.w	ip, #1
 8024450:	e7d2      	b.n	80243f8 <__kernel_rem_pio2f+0x28c>
 8024452:	ecfe 6a01 	vldmia	lr!, {s13}
 8024456:	ed39 7a01 	vldmdb	r9!, {s14}
 802445a:	f10c 0c01 	add.w	ip, ip, #1
 802445e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024462:	e7ec      	b.n	802443e <__kernel_rem_pio2f+0x2d2>
 8024464:	3c01      	subs	r4, #1
 8024466:	e775      	b.n	8024354 <__kernel_rem_pio2f+0x1e8>
 8024468:	08028a2c 	.word	0x08028a2c
 802446c:	08028a00 	.word	0x08028a00
 8024470:	43800000 	.word	0x43800000
 8024474:	3b800000 	.word	0x3b800000
 8024478:	00000000 	.word	0x00000000
 802447c:	9b03      	ldr	r3, [sp, #12]
 802447e:	eeb0 0a48 	vmov.f32	s0, s16
 8024482:	1a98      	subs	r0, r3, r2
 8024484:	f000 fb92 	bl	8024bac <scalbnf>
 8024488:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8024470 <__kernel_rem_pio2f+0x304>
 802448c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8024490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024494:	db19      	blt.n	80244ca <__kernel_rem_pio2f+0x35e>
 8024496:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8024474 <__kernel_rem_pio2f+0x308>
 802449a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802449e:	aa08      	add	r2, sp, #32
 80244a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80244a4:	1c74      	adds	r4, r6, #1
 80244a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80244aa:	3508      	adds	r5, #8
 80244ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80244b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80244b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80244b8:	ee10 3a10 	vmov	r3, s0
 80244bc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80244c0:	ee17 3a90 	vmov	r3, s15
 80244c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80244c8:	e74b      	b.n	8024362 <__kernel_rem_pio2f+0x1f6>
 80244ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80244ce:	aa08      	add	r2, sp, #32
 80244d0:	ee10 3a10 	vmov	r3, s0
 80244d4:	4634      	mov	r4, r6
 80244d6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80244da:	e742      	b.n	8024362 <__kernel_rem_pio2f+0x1f6>
 80244dc:	a808      	add	r0, sp, #32
 80244de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80244e2:	9001      	str	r0, [sp, #4]
 80244e4:	ee07 0a90 	vmov	s15, r0
 80244e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80244ec:	3a01      	subs	r2, #1
 80244ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80244f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80244f6:	ed61 7a01 	vstmdb	r1!, {s15}
 80244fa:	e73e      	b.n	802437a <__kernel_rem_pio2f+0x20e>
 80244fc:	ecfc 6a01 	vldmia	ip!, {s13}
 8024500:	ecb6 7a01 	vldmia	r6!, {s14}
 8024504:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024508:	3001      	adds	r0, #1
 802450a:	4550      	cmp	r0, sl
 802450c:	dc01      	bgt.n	8024512 <__kernel_rem_pio2f+0x3a6>
 802450e:	4288      	cmp	r0, r1
 8024510:	ddf4      	ble.n	80244fc <__kernel_rem_pio2f+0x390>
 8024512:	a858      	add	r0, sp, #352	; 0x160
 8024514:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8024518:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802451c:	3a01      	subs	r2, #1
 802451e:	e730      	b.n	8024382 <__kernel_rem_pio2f+0x216>
 8024520:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8024522:	2a02      	cmp	r2, #2
 8024524:	dc09      	bgt.n	802453a <__kernel_rem_pio2f+0x3ce>
 8024526:	2a00      	cmp	r2, #0
 8024528:	dc2a      	bgt.n	8024580 <__kernel_rem_pio2f+0x414>
 802452a:	d043      	beq.n	80245b4 <__kernel_rem_pio2f+0x448>
 802452c:	f009 0007 	and.w	r0, r9, #7
 8024530:	b059      	add	sp, #356	; 0x164
 8024532:	ecbd 8b04 	vpop	{d8-d9}
 8024536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802453a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802453c:	2b03      	cmp	r3, #3
 802453e:	d1f5      	bne.n	802452c <__kernel_rem_pio2f+0x3c0>
 8024540:	ab30      	add	r3, sp, #192	; 0xc0
 8024542:	442b      	add	r3, r5
 8024544:	461a      	mov	r2, r3
 8024546:	4619      	mov	r1, r3
 8024548:	4620      	mov	r0, r4
 802454a:	2800      	cmp	r0, #0
 802454c:	f1a1 0104 	sub.w	r1, r1, #4
 8024550:	dc51      	bgt.n	80245f6 <__kernel_rem_pio2f+0x48a>
 8024552:	4621      	mov	r1, r4
 8024554:	2901      	cmp	r1, #1
 8024556:	f1a2 0204 	sub.w	r2, r2, #4
 802455a:	dc5c      	bgt.n	8024616 <__kernel_rem_pio2f+0x4aa>
 802455c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8024478 <__kernel_rem_pio2f+0x30c>
 8024560:	3304      	adds	r3, #4
 8024562:	2c01      	cmp	r4, #1
 8024564:	dc67      	bgt.n	8024636 <__kernel_rem_pio2f+0x4ca>
 8024566:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802456a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802456e:	2f00      	cmp	r7, #0
 8024570:	d167      	bne.n	8024642 <__kernel_rem_pio2f+0x4d6>
 8024572:	edc8 6a00 	vstr	s13, [r8]
 8024576:	ed88 7a01 	vstr	s14, [r8, #4]
 802457a:	edc8 7a02 	vstr	s15, [r8, #8]
 802457e:	e7d5      	b.n	802452c <__kernel_rem_pio2f+0x3c0>
 8024580:	aa30      	add	r2, sp, #192	; 0xc0
 8024582:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8024478 <__kernel_rem_pio2f+0x30c>
 8024586:	4413      	add	r3, r2
 8024588:	4622      	mov	r2, r4
 802458a:	2a00      	cmp	r2, #0
 802458c:	da24      	bge.n	80245d8 <__kernel_rem_pio2f+0x46c>
 802458e:	b34f      	cbz	r7, 80245e4 <__kernel_rem_pio2f+0x478>
 8024590:	eef1 7a47 	vneg.f32	s15, s14
 8024594:	edc8 7a00 	vstr	s15, [r8]
 8024598:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802459c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80245a0:	aa31      	add	r2, sp, #196	; 0xc4
 80245a2:	2301      	movs	r3, #1
 80245a4:	429c      	cmp	r4, r3
 80245a6:	da20      	bge.n	80245ea <__kernel_rem_pio2f+0x47e>
 80245a8:	b10f      	cbz	r7, 80245ae <__kernel_rem_pio2f+0x442>
 80245aa:	eef1 7a67 	vneg.f32	s15, s15
 80245ae:	edc8 7a01 	vstr	s15, [r8, #4]
 80245b2:	e7bb      	b.n	802452c <__kernel_rem_pio2f+0x3c0>
 80245b4:	aa30      	add	r2, sp, #192	; 0xc0
 80245b6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8024478 <__kernel_rem_pio2f+0x30c>
 80245ba:	4413      	add	r3, r2
 80245bc:	2c00      	cmp	r4, #0
 80245be:	da05      	bge.n	80245cc <__kernel_rem_pio2f+0x460>
 80245c0:	b10f      	cbz	r7, 80245c6 <__kernel_rem_pio2f+0x45a>
 80245c2:	eef1 7a67 	vneg.f32	s15, s15
 80245c6:	edc8 7a00 	vstr	s15, [r8]
 80245ca:	e7af      	b.n	802452c <__kernel_rem_pio2f+0x3c0>
 80245cc:	ed33 7a01 	vldmdb	r3!, {s14}
 80245d0:	3c01      	subs	r4, #1
 80245d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80245d6:	e7f1      	b.n	80245bc <__kernel_rem_pio2f+0x450>
 80245d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80245dc:	3a01      	subs	r2, #1
 80245de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80245e2:	e7d2      	b.n	802458a <__kernel_rem_pio2f+0x41e>
 80245e4:	eef0 7a47 	vmov.f32	s15, s14
 80245e8:	e7d4      	b.n	8024594 <__kernel_rem_pio2f+0x428>
 80245ea:	ecb2 7a01 	vldmia	r2!, {s14}
 80245ee:	3301      	adds	r3, #1
 80245f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80245f4:	e7d6      	b.n	80245a4 <__kernel_rem_pio2f+0x438>
 80245f6:	edd1 7a00 	vldr	s15, [r1]
 80245fa:	edd1 6a01 	vldr	s13, [r1, #4]
 80245fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024602:	3801      	subs	r0, #1
 8024604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024608:	ed81 7a00 	vstr	s14, [r1]
 802460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024610:	edc1 7a01 	vstr	s15, [r1, #4]
 8024614:	e799      	b.n	802454a <__kernel_rem_pio2f+0x3de>
 8024616:	edd2 7a00 	vldr	s15, [r2]
 802461a:	edd2 6a01 	vldr	s13, [r2, #4]
 802461e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024622:	3901      	subs	r1, #1
 8024624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024628:	ed82 7a00 	vstr	s14, [r2]
 802462c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024630:	edc2 7a01 	vstr	s15, [r2, #4]
 8024634:	e78e      	b.n	8024554 <__kernel_rem_pio2f+0x3e8>
 8024636:	ed33 7a01 	vldmdb	r3!, {s14}
 802463a:	3c01      	subs	r4, #1
 802463c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024640:	e78f      	b.n	8024562 <__kernel_rem_pio2f+0x3f6>
 8024642:	eef1 6a66 	vneg.f32	s13, s13
 8024646:	eeb1 7a47 	vneg.f32	s14, s14
 802464a:	edc8 6a00 	vstr	s13, [r8]
 802464e:	ed88 7a01 	vstr	s14, [r8, #4]
 8024652:	eef1 7a67 	vneg.f32	s15, s15
 8024656:	e790      	b.n	802457a <__kernel_rem_pio2f+0x40e>

08024658 <__kernel_sinf>:
 8024658:	ee10 3a10 	vmov	r3, s0
 802465c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024660:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8024664:	da04      	bge.n	8024670 <__kernel_sinf+0x18>
 8024666:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802466a:	ee17 3a90 	vmov	r3, s15
 802466e:	b35b      	cbz	r3, 80246c8 <__kernel_sinf+0x70>
 8024670:	ee20 7a00 	vmul.f32	s14, s0, s0
 8024674:	eddf 7a15 	vldr	s15, [pc, #84]	; 80246cc <__kernel_sinf+0x74>
 8024678:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80246d0 <__kernel_sinf+0x78>
 802467c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024680:	eddf 7a14 	vldr	s15, [pc, #80]	; 80246d4 <__kernel_sinf+0x7c>
 8024684:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024688:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80246d8 <__kernel_sinf+0x80>
 802468c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024690:	eddf 7a12 	vldr	s15, [pc, #72]	; 80246dc <__kernel_sinf+0x84>
 8024694:	ee60 6a07 	vmul.f32	s13, s0, s14
 8024698:	eee6 7a07 	vfma.f32	s15, s12, s14
 802469c:	b930      	cbnz	r0, 80246ac <__kernel_sinf+0x54>
 802469e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80246e0 <__kernel_sinf+0x88>
 80246a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80246a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80246aa:	4770      	bx	lr
 80246ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80246b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80246b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80246b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80246bc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80246e4 <__kernel_sinf+0x8c>
 80246c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80246c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80246c8:	4770      	bx	lr
 80246ca:	bf00      	nop
 80246cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80246d0:	b2d72f34 	.word	0xb2d72f34
 80246d4:	3638ef1b 	.word	0x3638ef1b
 80246d8:	b9500d01 	.word	0xb9500d01
 80246dc:	3c088889 	.word	0x3c088889
 80246e0:	be2aaaab 	.word	0xbe2aaaab
 80246e4:	3e2aaaab 	.word	0x3e2aaaab

080246e8 <with_errnof>:
 80246e8:	b513      	push	{r0, r1, r4, lr}
 80246ea:	4604      	mov	r4, r0
 80246ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 80246f0:	f7fd fbbc 	bl	8021e6c <__errno>
 80246f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80246f8:	6004      	str	r4, [r0, #0]
 80246fa:	b002      	add	sp, #8
 80246fc:	bd10      	pop	{r4, pc}

080246fe <xflowf>:
 80246fe:	b130      	cbz	r0, 802470e <xflowf+0x10>
 8024700:	eef1 7a40 	vneg.f32	s15, s0
 8024704:	ee27 0a80 	vmul.f32	s0, s15, s0
 8024708:	2022      	movs	r0, #34	; 0x22
 802470a:	f7ff bfed 	b.w	80246e8 <with_errnof>
 802470e:	eef0 7a40 	vmov.f32	s15, s0
 8024712:	e7f7      	b.n	8024704 <xflowf+0x6>

08024714 <__math_uflowf>:
 8024714:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802471c <__math_uflowf+0x8>
 8024718:	f7ff bff1 	b.w	80246fe <xflowf>
 802471c:	10000000 	.word	0x10000000

08024720 <__math_oflowf>:
 8024720:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024728 <__math_oflowf+0x8>
 8024724:	f7ff bfeb 	b.w	80246fe <xflowf>
 8024728:	70000000 	.word	0x70000000

0802472c <fabs>:
 802472c:	ec51 0b10 	vmov	r0, r1, d0
 8024730:	ee10 2a10 	vmov	r2, s0
 8024734:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024738:	ec43 2b10 	vmov	d0, r2, r3
 802473c:	4770      	bx	lr
	...

08024740 <floor>:
 8024740:	ec51 0b10 	vmov	r0, r1, d0
 8024744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024748:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802474c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024750:	2e13      	cmp	r6, #19
 8024752:	ee10 5a10 	vmov	r5, s0
 8024756:	ee10 8a10 	vmov	r8, s0
 802475a:	460c      	mov	r4, r1
 802475c:	dc32      	bgt.n	80247c4 <floor+0x84>
 802475e:	2e00      	cmp	r6, #0
 8024760:	da14      	bge.n	802478c <floor+0x4c>
 8024762:	a333      	add	r3, pc, #204	; (adr r3, 8024830 <floor+0xf0>)
 8024764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024768:	f7db fd4e 	bl	8000208 <__adddf3>
 802476c:	2200      	movs	r2, #0
 802476e:	2300      	movs	r3, #0
 8024770:	f7dc f990 	bl	8000a94 <__aeabi_dcmpgt>
 8024774:	b138      	cbz	r0, 8024786 <floor+0x46>
 8024776:	2c00      	cmp	r4, #0
 8024778:	da57      	bge.n	802482a <floor+0xea>
 802477a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802477e:	431d      	orrs	r5, r3
 8024780:	d001      	beq.n	8024786 <floor+0x46>
 8024782:	4c2d      	ldr	r4, [pc, #180]	; (8024838 <floor+0xf8>)
 8024784:	2500      	movs	r5, #0
 8024786:	4621      	mov	r1, r4
 8024788:	4628      	mov	r0, r5
 802478a:	e025      	b.n	80247d8 <floor+0x98>
 802478c:	4f2b      	ldr	r7, [pc, #172]	; (802483c <floor+0xfc>)
 802478e:	4137      	asrs	r7, r6
 8024790:	ea01 0307 	and.w	r3, r1, r7
 8024794:	4303      	orrs	r3, r0
 8024796:	d01f      	beq.n	80247d8 <floor+0x98>
 8024798:	a325      	add	r3, pc, #148	; (adr r3, 8024830 <floor+0xf0>)
 802479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802479e:	f7db fd33 	bl	8000208 <__adddf3>
 80247a2:	2200      	movs	r2, #0
 80247a4:	2300      	movs	r3, #0
 80247a6:	f7dc f975 	bl	8000a94 <__aeabi_dcmpgt>
 80247aa:	2800      	cmp	r0, #0
 80247ac:	d0eb      	beq.n	8024786 <floor+0x46>
 80247ae:	2c00      	cmp	r4, #0
 80247b0:	bfbe      	ittt	lt
 80247b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80247b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80247ba:	19a4      	addlt	r4, r4, r6
 80247bc:	ea24 0407 	bic.w	r4, r4, r7
 80247c0:	2500      	movs	r5, #0
 80247c2:	e7e0      	b.n	8024786 <floor+0x46>
 80247c4:	2e33      	cmp	r6, #51	; 0x33
 80247c6:	dd0b      	ble.n	80247e0 <floor+0xa0>
 80247c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80247cc:	d104      	bne.n	80247d8 <floor+0x98>
 80247ce:	ee10 2a10 	vmov	r2, s0
 80247d2:	460b      	mov	r3, r1
 80247d4:	f7db fd18 	bl	8000208 <__adddf3>
 80247d8:	ec41 0b10 	vmov	d0, r0, r1
 80247dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80247e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80247e4:	f04f 33ff 	mov.w	r3, #4294967295
 80247e8:	fa23 f707 	lsr.w	r7, r3, r7
 80247ec:	4207      	tst	r7, r0
 80247ee:	d0f3      	beq.n	80247d8 <floor+0x98>
 80247f0:	a30f      	add	r3, pc, #60	; (adr r3, 8024830 <floor+0xf0>)
 80247f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247f6:	f7db fd07 	bl	8000208 <__adddf3>
 80247fa:	2200      	movs	r2, #0
 80247fc:	2300      	movs	r3, #0
 80247fe:	f7dc f949 	bl	8000a94 <__aeabi_dcmpgt>
 8024802:	2800      	cmp	r0, #0
 8024804:	d0bf      	beq.n	8024786 <floor+0x46>
 8024806:	2c00      	cmp	r4, #0
 8024808:	da02      	bge.n	8024810 <floor+0xd0>
 802480a:	2e14      	cmp	r6, #20
 802480c:	d103      	bne.n	8024816 <floor+0xd6>
 802480e:	3401      	adds	r4, #1
 8024810:	ea25 0507 	bic.w	r5, r5, r7
 8024814:	e7b7      	b.n	8024786 <floor+0x46>
 8024816:	2301      	movs	r3, #1
 8024818:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802481c:	fa03 f606 	lsl.w	r6, r3, r6
 8024820:	4435      	add	r5, r6
 8024822:	4545      	cmp	r5, r8
 8024824:	bf38      	it	cc
 8024826:	18e4      	addcc	r4, r4, r3
 8024828:	e7f2      	b.n	8024810 <floor+0xd0>
 802482a:	2500      	movs	r5, #0
 802482c:	462c      	mov	r4, r5
 802482e:	e7aa      	b.n	8024786 <floor+0x46>
 8024830:	8800759c 	.word	0x8800759c
 8024834:	7e37e43c 	.word	0x7e37e43c
 8024838:	bff00000 	.word	0xbff00000
 802483c:	000fffff 	.word	0x000fffff

08024840 <scalbn>:
 8024840:	b570      	push	{r4, r5, r6, lr}
 8024842:	ec55 4b10 	vmov	r4, r5, d0
 8024846:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802484a:	4606      	mov	r6, r0
 802484c:	462b      	mov	r3, r5
 802484e:	b99a      	cbnz	r2, 8024878 <scalbn+0x38>
 8024850:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024854:	4323      	orrs	r3, r4
 8024856:	d036      	beq.n	80248c6 <scalbn+0x86>
 8024858:	4b39      	ldr	r3, [pc, #228]	; (8024940 <scalbn+0x100>)
 802485a:	4629      	mov	r1, r5
 802485c:	ee10 0a10 	vmov	r0, s0
 8024860:	2200      	movs	r2, #0
 8024862:	f7db fe87 	bl	8000574 <__aeabi_dmul>
 8024866:	4b37      	ldr	r3, [pc, #220]	; (8024944 <scalbn+0x104>)
 8024868:	429e      	cmp	r6, r3
 802486a:	4604      	mov	r4, r0
 802486c:	460d      	mov	r5, r1
 802486e:	da10      	bge.n	8024892 <scalbn+0x52>
 8024870:	a32b      	add	r3, pc, #172	; (adr r3, 8024920 <scalbn+0xe0>)
 8024872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024876:	e03a      	b.n	80248ee <scalbn+0xae>
 8024878:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802487c:	428a      	cmp	r2, r1
 802487e:	d10c      	bne.n	802489a <scalbn+0x5a>
 8024880:	ee10 2a10 	vmov	r2, s0
 8024884:	4620      	mov	r0, r4
 8024886:	4629      	mov	r1, r5
 8024888:	f7db fcbe 	bl	8000208 <__adddf3>
 802488c:	4604      	mov	r4, r0
 802488e:	460d      	mov	r5, r1
 8024890:	e019      	b.n	80248c6 <scalbn+0x86>
 8024892:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024896:	460b      	mov	r3, r1
 8024898:	3a36      	subs	r2, #54	; 0x36
 802489a:	4432      	add	r2, r6
 802489c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80248a0:	428a      	cmp	r2, r1
 80248a2:	dd08      	ble.n	80248b6 <scalbn+0x76>
 80248a4:	2d00      	cmp	r5, #0
 80248a6:	a120      	add	r1, pc, #128	; (adr r1, 8024928 <scalbn+0xe8>)
 80248a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248ac:	da1c      	bge.n	80248e8 <scalbn+0xa8>
 80248ae:	a120      	add	r1, pc, #128	; (adr r1, 8024930 <scalbn+0xf0>)
 80248b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248b4:	e018      	b.n	80248e8 <scalbn+0xa8>
 80248b6:	2a00      	cmp	r2, #0
 80248b8:	dd08      	ble.n	80248cc <scalbn+0x8c>
 80248ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80248be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80248c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80248c6:	ec45 4b10 	vmov	d0, r4, r5
 80248ca:	bd70      	pop	{r4, r5, r6, pc}
 80248cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80248d0:	da19      	bge.n	8024906 <scalbn+0xc6>
 80248d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80248d6:	429e      	cmp	r6, r3
 80248d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80248dc:	dd0a      	ble.n	80248f4 <scalbn+0xb4>
 80248de:	a112      	add	r1, pc, #72	; (adr r1, 8024928 <scalbn+0xe8>)
 80248e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248e4:	2b00      	cmp	r3, #0
 80248e6:	d1e2      	bne.n	80248ae <scalbn+0x6e>
 80248e8:	a30f      	add	r3, pc, #60	; (adr r3, 8024928 <scalbn+0xe8>)
 80248ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248ee:	f7db fe41 	bl	8000574 <__aeabi_dmul>
 80248f2:	e7cb      	b.n	802488c <scalbn+0x4c>
 80248f4:	a10a      	add	r1, pc, #40	; (adr r1, 8024920 <scalbn+0xe0>)
 80248f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	d0b8      	beq.n	8024870 <scalbn+0x30>
 80248fe:	a10e      	add	r1, pc, #56	; (adr r1, 8024938 <scalbn+0xf8>)
 8024900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024904:	e7b4      	b.n	8024870 <scalbn+0x30>
 8024906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802490a:	3236      	adds	r2, #54	; 0x36
 802490c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024910:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024914:	4620      	mov	r0, r4
 8024916:	4b0c      	ldr	r3, [pc, #48]	; (8024948 <scalbn+0x108>)
 8024918:	2200      	movs	r2, #0
 802491a:	e7e8      	b.n	80248ee <scalbn+0xae>
 802491c:	f3af 8000 	nop.w
 8024920:	c2f8f359 	.word	0xc2f8f359
 8024924:	01a56e1f 	.word	0x01a56e1f
 8024928:	8800759c 	.word	0x8800759c
 802492c:	7e37e43c 	.word	0x7e37e43c
 8024930:	8800759c 	.word	0x8800759c
 8024934:	fe37e43c 	.word	0xfe37e43c
 8024938:	c2f8f359 	.word	0xc2f8f359
 802493c:	81a56e1f 	.word	0x81a56e1f
 8024940:	43500000 	.word	0x43500000
 8024944:	ffff3cb0 	.word	0xffff3cb0
 8024948:	3c900000 	.word	0x3c900000

0802494c <atanf>:
 802494c:	b538      	push	{r3, r4, r5, lr}
 802494e:	ee10 5a10 	vmov	r5, s0
 8024952:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8024956:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802495a:	eef0 7a40 	vmov.f32	s15, s0
 802495e:	db10      	blt.n	8024982 <atanf+0x36>
 8024960:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8024964:	dd04      	ble.n	8024970 <atanf+0x24>
 8024966:	ee70 7a00 	vadd.f32	s15, s0, s0
 802496a:	eeb0 0a67 	vmov.f32	s0, s15
 802496e:	bd38      	pop	{r3, r4, r5, pc}
 8024970:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024aa8 <atanf+0x15c>
 8024974:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8024aac <atanf+0x160>
 8024978:	2d00      	cmp	r5, #0
 802497a:	bfd8      	it	le
 802497c:	eef0 7a40 	vmovle.f32	s15, s0
 8024980:	e7f3      	b.n	802496a <atanf+0x1e>
 8024982:	4b4b      	ldr	r3, [pc, #300]	; (8024ab0 <atanf+0x164>)
 8024984:	429c      	cmp	r4, r3
 8024986:	dc10      	bgt.n	80249aa <atanf+0x5e>
 8024988:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802498c:	da0a      	bge.n	80249a4 <atanf+0x58>
 802498e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8024ab4 <atanf+0x168>
 8024992:	ee30 7a07 	vadd.f32	s14, s0, s14
 8024996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802499a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249a2:	dce2      	bgt.n	802496a <atanf+0x1e>
 80249a4:	f04f 33ff 	mov.w	r3, #4294967295
 80249a8:	e013      	b.n	80249d2 <atanf+0x86>
 80249aa:	f000 f8a3 	bl	8024af4 <fabsf>
 80249ae:	4b42      	ldr	r3, [pc, #264]	; (8024ab8 <atanf+0x16c>)
 80249b0:	429c      	cmp	r4, r3
 80249b2:	dc4f      	bgt.n	8024a54 <atanf+0x108>
 80249b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80249b8:	429c      	cmp	r4, r3
 80249ba:	dc41      	bgt.n	8024a40 <atanf+0xf4>
 80249bc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80249c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80249c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80249c8:	2300      	movs	r3, #0
 80249ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80249ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80249d2:	1c5a      	adds	r2, r3, #1
 80249d4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80249d8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8024abc <atanf+0x170>
 80249dc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8024ac0 <atanf+0x174>
 80249e0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8024ac4 <atanf+0x178>
 80249e4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80249e8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80249ec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8024ac8 <atanf+0x17c>
 80249f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80249f4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8024acc <atanf+0x180>
 80249f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80249fc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8024ad0 <atanf+0x184>
 8024a00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024a04:	eddf 5a33 	vldr	s11, [pc, #204]	; 8024ad4 <atanf+0x188>
 8024a08:	eee7 5a26 	vfma.f32	s11, s14, s13
 8024a0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8024ad8 <atanf+0x18c>
 8024a10:	eea6 5a87 	vfma.f32	s10, s13, s14
 8024a14:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8024adc <atanf+0x190>
 8024a18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8024a1c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8024ae0 <atanf+0x194>
 8024a20:	eea7 5a26 	vfma.f32	s10, s14, s13
 8024a24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8024ae4 <atanf+0x198>
 8024a28:	eea5 7a26 	vfma.f32	s14, s10, s13
 8024a2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8024a30:	eea5 7a86 	vfma.f32	s14, s11, s12
 8024a34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8024a38:	d121      	bne.n	8024a7e <atanf+0x132>
 8024a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024a3e:	e794      	b.n	802496a <atanf+0x1e>
 8024a40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024a44:	ee30 7a67 	vsub.f32	s14, s0, s15
 8024a48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024a4c:	2301      	movs	r3, #1
 8024a4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a52:	e7be      	b.n	80249d2 <atanf+0x86>
 8024a54:	4b24      	ldr	r3, [pc, #144]	; (8024ae8 <atanf+0x19c>)
 8024a56:	429c      	cmp	r4, r3
 8024a58:	dc0b      	bgt.n	8024a72 <atanf+0x126>
 8024a5a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8024a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024a62:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024a66:	2302      	movs	r3, #2
 8024a68:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024a70:	e7af      	b.n	80249d2 <atanf+0x86>
 8024a72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024a76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a7a:	2303      	movs	r3, #3
 8024a7c:	e7a9      	b.n	80249d2 <atanf+0x86>
 8024a7e:	4a1b      	ldr	r2, [pc, #108]	; (8024aec <atanf+0x1a0>)
 8024a80:	491b      	ldr	r1, [pc, #108]	; (8024af0 <atanf+0x1a4>)
 8024a82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8024a86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024a8a:	ed93 0a00 	vldr	s0, [r3]
 8024a8e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8024a92:	ed92 0a00 	vldr	s0, [r2]
 8024a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024a9a:	2d00      	cmp	r5, #0
 8024a9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024aa0:	bfb8      	it	lt
 8024aa2:	eef1 7a67 	vneglt.f32	s15, s15
 8024aa6:	e760      	b.n	802496a <atanf+0x1e>
 8024aa8:	3fc90fdb 	.word	0x3fc90fdb
 8024aac:	bfc90fdb 	.word	0xbfc90fdb
 8024ab0:	3edfffff 	.word	0x3edfffff
 8024ab4:	7149f2ca 	.word	0x7149f2ca
 8024ab8:	3f97ffff 	.word	0x3f97ffff
 8024abc:	3c8569d7 	.word	0x3c8569d7
 8024ac0:	3d4bda59 	.word	0x3d4bda59
 8024ac4:	bd6ef16b 	.word	0xbd6ef16b
 8024ac8:	3d886b35 	.word	0x3d886b35
 8024acc:	3dba2e6e 	.word	0x3dba2e6e
 8024ad0:	3e124925 	.word	0x3e124925
 8024ad4:	3eaaaaab 	.word	0x3eaaaaab
 8024ad8:	bd15a221 	.word	0xbd15a221
 8024adc:	bd9d8795 	.word	0xbd9d8795
 8024ae0:	bde38e38 	.word	0xbde38e38
 8024ae4:	be4ccccd 	.word	0xbe4ccccd
 8024ae8:	401bffff 	.word	0x401bffff
 8024aec:	08028a38 	.word	0x08028a38
 8024af0:	08028a48 	.word	0x08028a48

08024af4 <fabsf>:
 8024af4:	ee10 3a10 	vmov	r3, s0
 8024af8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024afc:	ee00 3a10 	vmov	s0, r3
 8024b00:	4770      	bx	lr

08024b02 <finitef>:
 8024b02:	b082      	sub	sp, #8
 8024b04:	ed8d 0a01 	vstr	s0, [sp, #4]
 8024b08:	9801      	ldr	r0, [sp, #4]
 8024b0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024b0e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8024b12:	bfac      	ite	ge
 8024b14:	2000      	movge	r0, #0
 8024b16:	2001      	movlt	r0, #1
 8024b18:	b002      	add	sp, #8
 8024b1a:	4770      	bx	lr

08024b1c <floorf>:
 8024b1c:	ee10 3a10 	vmov	r3, s0
 8024b20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024b24:	3a7f      	subs	r2, #127	; 0x7f
 8024b26:	2a16      	cmp	r2, #22
 8024b28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024b2c:	dc2a      	bgt.n	8024b84 <floorf+0x68>
 8024b2e:	2a00      	cmp	r2, #0
 8024b30:	da11      	bge.n	8024b56 <floorf+0x3a>
 8024b32:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024b94 <floorf+0x78>
 8024b36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024b3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b42:	dd05      	ble.n	8024b50 <floorf+0x34>
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	da23      	bge.n	8024b90 <floorf+0x74>
 8024b48:	4a13      	ldr	r2, [pc, #76]	; (8024b98 <floorf+0x7c>)
 8024b4a:	2900      	cmp	r1, #0
 8024b4c:	bf18      	it	ne
 8024b4e:	4613      	movne	r3, r2
 8024b50:	ee00 3a10 	vmov	s0, r3
 8024b54:	4770      	bx	lr
 8024b56:	4911      	ldr	r1, [pc, #68]	; (8024b9c <floorf+0x80>)
 8024b58:	4111      	asrs	r1, r2
 8024b5a:	420b      	tst	r3, r1
 8024b5c:	d0fa      	beq.n	8024b54 <floorf+0x38>
 8024b5e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024b94 <floorf+0x78>
 8024b62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024b66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b6e:	ddef      	ble.n	8024b50 <floorf+0x34>
 8024b70:	2b00      	cmp	r3, #0
 8024b72:	bfbe      	ittt	lt
 8024b74:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8024b78:	fa40 f202 	asrlt.w	r2, r0, r2
 8024b7c:	189b      	addlt	r3, r3, r2
 8024b7e:	ea23 0301 	bic.w	r3, r3, r1
 8024b82:	e7e5      	b.n	8024b50 <floorf+0x34>
 8024b84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024b88:	d3e4      	bcc.n	8024b54 <floorf+0x38>
 8024b8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024b8e:	4770      	bx	lr
 8024b90:	2300      	movs	r3, #0
 8024b92:	e7dd      	b.n	8024b50 <floorf+0x34>
 8024b94:	7149f2ca 	.word	0x7149f2ca
 8024b98:	bf800000 	.word	0xbf800000
 8024b9c:	007fffff 	.word	0x007fffff

08024ba0 <nanf>:
 8024ba0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8024ba8 <nanf+0x8>
 8024ba4:	4770      	bx	lr
 8024ba6:	bf00      	nop
 8024ba8:	7fc00000 	.word	0x7fc00000

08024bac <scalbnf>:
 8024bac:	ee10 3a10 	vmov	r3, s0
 8024bb0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8024bb4:	d025      	beq.n	8024c02 <scalbnf+0x56>
 8024bb6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8024bba:	d302      	bcc.n	8024bc2 <scalbnf+0x16>
 8024bbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024bc0:	4770      	bx	lr
 8024bc2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8024bc6:	d122      	bne.n	8024c0e <scalbnf+0x62>
 8024bc8:	4b2a      	ldr	r3, [pc, #168]	; (8024c74 <scalbnf+0xc8>)
 8024bca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8024c78 <scalbnf+0xcc>
 8024bce:	4298      	cmp	r0, r3
 8024bd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024bd4:	db16      	blt.n	8024c04 <scalbnf+0x58>
 8024bd6:	ee10 3a10 	vmov	r3, s0
 8024bda:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024bde:	3a19      	subs	r2, #25
 8024be0:	4402      	add	r2, r0
 8024be2:	2afe      	cmp	r2, #254	; 0xfe
 8024be4:	dd15      	ble.n	8024c12 <scalbnf+0x66>
 8024be6:	ee10 3a10 	vmov	r3, s0
 8024bea:	eddf 7a24 	vldr	s15, [pc, #144]	; 8024c7c <scalbnf+0xd0>
 8024bee:	eddf 6a24 	vldr	s13, [pc, #144]	; 8024c80 <scalbnf+0xd4>
 8024bf2:	2b00      	cmp	r3, #0
 8024bf4:	eeb0 7a67 	vmov.f32	s14, s15
 8024bf8:	bfb8      	it	lt
 8024bfa:	eef0 7a66 	vmovlt.f32	s15, s13
 8024bfe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8024c02:	4770      	bx	lr
 8024c04:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024c84 <scalbnf+0xd8>
 8024c08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024c0c:	4770      	bx	lr
 8024c0e:	0dd2      	lsrs	r2, r2, #23
 8024c10:	e7e6      	b.n	8024be0 <scalbnf+0x34>
 8024c12:	2a00      	cmp	r2, #0
 8024c14:	dd06      	ble.n	8024c24 <scalbnf+0x78>
 8024c16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024c1a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8024c1e:	ee00 3a10 	vmov	s0, r3
 8024c22:	4770      	bx	lr
 8024c24:	f112 0f16 	cmn.w	r2, #22
 8024c28:	da1a      	bge.n	8024c60 <scalbnf+0xb4>
 8024c2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024c2e:	4298      	cmp	r0, r3
 8024c30:	ee10 3a10 	vmov	r3, s0
 8024c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8024c38:	dd0a      	ble.n	8024c50 <scalbnf+0xa4>
 8024c3a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8024c7c <scalbnf+0xd0>
 8024c3e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8024c80 <scalbnf+0xd4>
 8024c42:	eef0 7a40 	vmov.f32	s15, s0
 8024c46:	2b00      	cmp	r3, #0
 8024c48:	bf18      	it	ne
 8024c4a:	eeb0 0a47 	vmovne.f32	s0, s14
 8024c4e:	e7db      	b.n	8024c08 <scalbnf+0x5c>
 8024c50:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024c84 <scalbnf+0xd8>
 8024c54:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8024c88 <scalbnf+0xdc>
 8024c58:	eef0 7a40 	vmov.f32	s15, s0
 8024c5c:	2b00      	cmp	r3, #0
 8024c5e:	e7f3      	b.n	8024c48 <scalbnf+0x9c>
 8024c60:	3219      	adds	r2, #25
 8024c62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024c66:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8024c6a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8024c8c <scalbnf+0xe0>
 8024c6e:	ee07 3a10 	vmov	s14, r3
 8024c72:	e7c4      	b.n	8024bfe <scalbnf+0x52>
 8024c74:	ffff3cb0 	.word	0xffff3cb0
 8024c78:	4c000000 	.word	0x4c000000
 8024c7c:	7149f2ca 	.word	0x7149f2ca
 8024c80:	f149f2ca 	.word	0xf149f2ca
 8024c84:	0da24260 	.word	0x0da24260
 8024c88:	8da24260 	.word	0x8da24260
 8024c8c:	33000000 	.word	0x33000000

08024c90 <_init>:
 8024c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c92:	bf00      	nop
 8024c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024c96:	bc08      	pop	{r3}
 8024c98:	469e      	mov	lr, r3
 8024c9a:	4770      	bx	lr

08024c9c <_fini>:
 8024c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c9e:	bf00      	nop
 8024ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024ca2:	bc08      	pop	{r3}
 8024ca4:	469e      	mov	lr, r3
 8024ca6:	4770      	bx	lr
