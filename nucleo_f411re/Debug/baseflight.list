
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025c50  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004010  08025de8  08025de8  00035de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029df8  08029df8  000401bc  2**0
                  CONTENTS
  4 .ARM          00000008  08029df8  08029df8  00039df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029e00  08029e00  000401bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029e00  08029e00  00039e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029e04  08029e04  00039e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08029e08  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  200001c0  08029fc4  000401c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  08029fc4  00041e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045979  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a83  00000000  00000000  00085b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002778  00000000  00000000  0008f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002448  00000000  00000000  00091d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b2f  00000000  00000000  000941a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000361e5  00000000  00000000  000b4cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f39  00000000  00000000  000eaebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af58  00000000  00000000  00194e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c0 	.word	0x200001c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08025dd0 	.word	0x08025dd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001c4 	.word	0x200001c4
 80001d4:	08025dd0 	.word	0x08025dd0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ldivmod>:
 8000de0:	b97b      	cbnz	r3, 8000e02 <__aeabi_ldivmod+0x22>
 8000de2:	b972      	cbnz	r2, 8000e02 <__aeabi_ldivmod+0x22>
 8000de4:	2900      	cmp	r1, #0
 8000de6:	bfbe      	ittt	lt
 8000de8:	2000      	movlt	r0, #0
 8000dea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dee:	e006      	blt.n	8000dfe <__aeabi_ldivmod+0x1e>
 8000df0:	bf08      	it	eq
 8000df2:	2800      	cmpeq	r0, #0
 8000df4:	bf1c      	itt	ne
 8000df6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfe:	f000 b9bf 	b.w	8001180 <__aeabi_idiv0>
 8000e02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	db09      	blt.n	8000e22 <__aeabi_ldivmod+0x42>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db1a      	blt.n	8000e48 <__aeabi_ldivmod+0x68>
 8000e12:	f000 f84d 	bl	8000eb0 <__udivmoddi4>
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db1b      	blt.n	8000e64 <__aeabi_ldivmod+0x84>
 8000e2c:	f000 f840 	bl	8000eb0 <__udivmoddi4>
 8000e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	b004      	add	sp, #16
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f82f 	bl	8000eb0 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e62:	4770      	bx	lr
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	f000 f821 	bl	8000eb0 <__udivmoddi4>
 8000e6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e76:	b004      	add	sp, #16
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_uldivmod>:
 8000e80:	b953      	cbnz	r3, 8000e98 <__aeabi_uldivmod+0x18>
 8000e82:	b94a      	cbnz	r2, 8000e98 <__aeabi_uldivmod+0x18>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	bf08      	it	eq
 8000e88:	2800      	cmpeq	r0, #0
 8000e8a:	bf1c      	itt	ne
 8000e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e90:	f04f 30ff 	movne.w	r0, #4294967295
 8000e94:	f000 b974 	b.w	8001180 <__aeabi_idiv0>
 8000e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea0:	f000 f806 	bl	8000eb0 <__udivmoddi4>
 8000ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 800118c:	2204      	movs	r2, #4
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <adcInit+0x1c>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <adcInit+0x20>)
 8001192:	f01a fda5 	bl	801bce0 <HAL_ADC_Start_DMA>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001dc 	.word	0x200001dc
 80011a4:	200004d4 	.word	0x200004d4

080011a8 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <actGetAdcChannel+0x20>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001dc 	.word	0x200001dc

080011cc <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <actGetBatteryVoltage+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001200 <actGetBatteryVoltage+0x34>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001204 <actGetBatteryVoltage+0x38>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001dc 	.word	0x200001dc
 8001200:	40533333 	.word	0x40533333
 8001204:	457ff000 	.word	0x457ff000

08001208 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <actGetBatteryCurrent+0x28>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <actGetBatteryCurrent+0x2c>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	4413      	add	r3, r2
 8001224:	0adb      	lsrs	r3, r3, #11
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200001dc 	.word	0x200001dc
 8001234:	00100101 	.word	0x00100101

08001238 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU6500", "HMC5883L", "MS5611" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	PifGy86Param param;

    (void)p_param;

    if (!pifGy86_Detect(&g_i2c_port)) {
 8001242:	4845      	ldr	r0, [pc, #276]	; (8001358 <gy86Detect+0x120>)
 8001244:	f017 fb0f 	bl	8018866 <pifGy86_Detect>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <gy86Detect+0x22>
        pifLog_Printf(LT_ERROR, "GY-86: Not found");
 800124e:	4943      	ldr	r1, [pc, #268]	; (800135c <gy86Detect+0x124>)
 8001250:	2004      	movs	r0, #4
 8001252:	f012 f92b 	bl	80134ac <pifLog_Printf>
        return false;
 8001256:	2300      	movs	r3, #0
 8001258:	e07a      	b.n	8001350 <gy86Detect+0x118>
    }

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    p_sensor_set->acc.acc_1G = 512 * 8;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001260:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <gy86Detect+0x128>)
 8001268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    memset(&param, 0, sizeof(PifGy86Param));
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2214      	movs	r2, #20
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f021 fee1 	bl	802303c <memset>

    param.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 800127a:	2303      	movs	r3, #3
 800127c:	737b      	strb	r3, [r7, #13]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d102      	bne.n	800128e <gy86Detect+0x56>
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001288:	2300      	movs	r3, #0
 800128a:	73bb      	strb	r3, [r7, #14]
 800128c:	e029      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 188)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001294:	2bbb      	cmp	r3, #187	; 0xbb
 8001296:	d902      	bls.n	800129e <gy86Detect+0x66>
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001298:	2301      	movs	r3, #1
 800129a:	73bb      	strb	r3, [r7, #14]
 800129c:	e021      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 98)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012a4:	2b61      	cmp	r3, #97	; 0x61
 80012a6:	d902      	bls.n	80012ae <gy86Detect+0x76>
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 80012a8:	2302      	movs	r3, #2
 80012aa:	73bb      	strb	r3, [r7, #14]
 80012ac:	e019      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 42)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012b4:	2b29      	cmp	r3, #41	; 0x29
 80012b6:	d902      	bls.n	80012be <gy86Detect+0x86>
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012b8:	2303      	movs	r3, #3
 80012ba:	73bb      	strb	r3, [r7, #14]
 80012bc:	e011      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012c4:	2b13      	cmp	r3, #19
 80012c6:	d902      	bls.n	80012ce <gy86Detect+0x96>
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012c8:	2304      	movs	r3, #4
 80012ca:	73bb      	strb	r3, [r7, #14]
 80012cc:	e009      	b.n	80012e2 <gy86Detect+0xaa>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d902      	bls.n	80012de <gy86Detect+0xa6>
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012d8:	2305      	movs	r3, #5
 80012da:	73bb      	strb	r3, [r7, #14]
 80012dc:	e001      	b.n	80012e2 <gy86Detect+0xaa>
    else
    	param.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012de:	2306      	movs	r3, #6
 80012e0:	73bb      	strb	r3, [r7, #14]
    param.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012e2:	2303      	movs	r3, #3
 80012e4:	73fb      	strb	r3, [r7, #15]
    param.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012e6:	2302      	movs	r3, #2
 80012e8:	733b      	strb	r3, [r7, #12]
    param.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012ea:	230d      	movs	r3, #13
 80012ec:	743b      	strb	r3, [r7, #16]

    param.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012ee:	2301      	movs	r3, #1
 80012f0:	74bb      	strb	r3, [r7, #18]
    param.hmc5883_samples = HMC5883_SAMPLES_8;
 80012f2:	2303      	movs	r3, #3
 80012f4:	753b      	strb	r3, [r7, #20]
    param.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012f6:	2306      	movs	r3, #6
 80012f8:	747b      	strb	r3, [r7, #17]
    param.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012fa:	2300      	movs	r3, #0
 80012fc:	74fb      	strb	r3, [r7, #19]

#ifdef BARO
    param.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 80012fe:	2301      	movs	r3, #1
 8001300:	773b      	strb	r3, [r7, #28]
    param.ms5611_osr = MS5611_OSR_4096;
 8001302:	2308      	movs	r3, #8
 8001304:	757b      	strb	r3, [r7, #21]
    param.ms5611_read_period = 25;												// 25ms
 8001306:	2319      	movs	r3, #25
 8001308:	82fb      	strh	r3, [r7, #22]
    param.ms5611_evt_read = p_sensor_set->baro.evt_read;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001310:	61bb      	str	r3, [r7, #24]
#endif

    // initialize the device
    if (!mpu6050Init(p_sensor_set, &param)) return false;
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f825 	bl	8001368 <mpu6050Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <gy86Detect+0xf0>
 8001324:	2300      	movs	r3, #0
 8001326:	e013      	b.n	8001350 <gy86Detect+0x118>

    p_sensor_set->gyro.hardware = hw_Names[0];
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <gy86Detect+0x12c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	675a      	str	r2, [r3, #116]	; 0x74
    p_sensor_set->acc.hardware = hw_Names[0];
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <gy86Detect+0x12c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_sensor_set->mag.hardware = hw_Names[1];
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <gy86Detect+0x12c>)
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    p_sensor_set->baro.hardware = hw_Names[2];
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <gy86Detect+0x12c>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return true;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000153c 	.word	0x2000153c
 800135c:	08025e04 	.word	0x08025e04
 8001360:	31924418 	.word	0x31924418
 8001364:	20000000 	.word	0x20000000

08001368 <mpu6050Init>:

static BOOL mpu6050Init(sensorSet_t *p_sensor_set, PifGy86Param* p_param)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, p_param, &p_sensor_set->imu_sensor)) return FALSE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <mpu6050Init+0x68>)
 800137a:	2100      	movs	r1, #0
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <mpu6050Init+0x6c>)
 800137e:	f017 fa85 	bl	801888c <pifGy86_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <mpu6050Init+0x24>
 8001388:	2300      	movs	r3, #0
 800138a:	e01c      	b.n	80013c6 <mpu6050Init+0x5e>
    s_gy86._mpu6050.gyro_scale = 4;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <mpu6050Init+0x6c>)
 800138e:	2204      	movs	r2, #4
 8001390:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <mpu6050Init+0x6c>)
 8001394:	2264      	movs	r2, #100	; 0x64
 8001396:	719a      	strb	r2, [r3, #6]

    p_sensor_set->acc.init = mpuAccInit;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <mpu6050Init+0x70>)
 800139c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_sensor_set->acc.read = mpuAccRead;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <mpu6050Init+0x74>)
 80013a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_sensor_set->gyro.init = mpuGyroInit;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <mpu6050Init+0x78>)
 80013ac:	679a      	str	r2, [r3, #120]	; 0x78
    p_sensor_set->gyro.read = mpuGyroRead;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <mpu6050Init+0x7c>)
 80013b2:	67da      	str	r2, [r3, #124]	; 0x7c
    p_sensor_set->mag.init = hmc5883lInit;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <mpu6050Init+0x80>)
 80013b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_sensor_set->mag.read = hmc5883lRead;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <mpu6050Init+0x84>)
 80013c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return TRUE;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000153c 	.word	0x2000153c
 80013d4:	200001ec 	.word	0x200001ec
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	08001413 	.word	0x08001413
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001453 	.word	0x08001453
 80013e8:	08001471 	.word	0x08001471
 80013ec:	080014a1 	.word	0x080014a1

080013f0 <mpuAccInit>:

static BOOL mpuAccInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetAccelAlign(&p_sensor_set->imu_sensor, align);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f018 fbb5 	bl	8019b72 <pifImuSensor_SetAccelAlign>
    return TRUE;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <mpuAccRead>:

static BOOL mpuAccRead(sensorSet_t *p_sensor_set, float *accData)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
    return pifImuSensor_ReadRawAccel(&p_sensor_set->imu_sensor, accData);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f018 fbb8 	bl	8019b96 <pifImuSensor_ReadRawAccel>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <mpuGyroInit>:

static BOOL mpuGyroInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetGyroAlign(&p_sensor_set->imu_sensor, align);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f018 fb44 	bl	8019ad0 <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <mpuGyroRead>:

static BOOL mpuGyroRead(sensorSet_t *p_sensor_set, float *gyroData)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
	return pifImuSensor_ReadRawGyro(&p_sensor_set->imu_sensor, gyroData);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f018 fb47 	bl	8019af4 <pifImuSensor_ReadRawGyro>
 8001466:	4603      	mov	r3, r0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <hmc5883lInit>:

static BOOL hmc5883lInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetMagAlign(&p_sensor_set->imu_sensor, align);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f018 fbc6 	bl	8019c14 <pifImuSensor_SetMagAlign>

    s_gy86._ms5611._p_task->pause = FALSE;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <hmc5883lInit+0x2c>)
 800148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148c:	2200      	movs	r2, #0
 800148e:	711a      	strb	r2, [r3, #4]
    return TRUE;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001ec 	.word	0x200001ec

080014a0 <hmc5883lRead>:

static BOOL hmc5883lRead(sensorSet_t *p_sensor_set, float *magData)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    // During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	return pifImuSensor_ReadRawMag(&p_sensor_set->imu_sensor, magData);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f018 fbc3 	bl	8019c3a <pifImuSensor_ReadRawMag>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	461a      	mov	r2, r3
 80014ce:	2101      	movs	r1, #1
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <_actHcSr04Trigger+0x24>)
 80014d2:	f01b ff8b 	bl	801d3ec <HAL_GPIO_WritePin>
    s_echo_state = 0;
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <_actHcSr04Trigger+0x28>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000270 	.word	0x20000270

080014ec <hcsr04Echo>:

void hcsr04Echo()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <hcsr04Echo+0x24>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <hcsr04Echo+0x24>)
 80014fc:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <hcsr04Echo+0x24>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <hcsr04Echo+0x28>)
 8001506:	f017 fd4b 	bl	8018fa0 <pifHcSr04_sigReceiveEcho>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000270 	.word	0x20000270
 8001514:	20000250 	.word	0x20000250

08001518 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <_evtHcSr04Distance+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
 8001528:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <_evtHcSr04Distance+0x44>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a03 	vldr	s14, [r7, #12]
 8001536:	eeb4 7a67 	vcmp.f32	s14, s15
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d007      	beq.n	8001550 <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 8001540:	ed97 0a03 	vldr	s0, [r7, #12]
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <_evtHcSr04Distance+0x48>)
 8001546:	f017 fd03 	bl	8018f50 <pifHcSr04_SetTemperature>
        pretemp = temp;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <_evtHcSr04Distance+0x44>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6013      	str	r3, [r2, #0]
    }
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000274 	.word	0x20000274
 800155c:	20000278 	.word	0x20000278
 8001560:	20000250 	.word	0x20000250

08001564 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 8001570:	2100      	movs	r1, #0
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <hcsr04Init+0x50>)
 8001574:	f017 fc60 	bl	8018e38 <pifHcSr04_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <hcsr04Init+0x1e>
 800157e:	2300      	movs	r3, #0
 8001580:	e013      	b.n	80015aa <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <hcsr04Init+0x50>)
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <hcsr04Init+0x54>)
 8001586:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_read = _evtHcSr04Distance;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <hcsr04Init+0x50>)
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <hcsr04Init+0x58>)
 800158c:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4619      	mov	r1, r3
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <hcsr04Init+0x50>)
 8001594:	f017 fcb8 	bl	8018f08 <pifHcSr04_StartTrigger>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <hcsr04Init+0x3e>
 800159e:	2300      	movs	r3, #0
 80015a0:	e003      	b.n	80015aa <hcsr04Init+0x46>

	funcSonarDistance = func;
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <hcsr04Init+0x5c>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6013      	str	r3, [r2, #0]
    return TRUE;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000250 	.word	0x20000250
 80015b8:	080014c1 	.word	0x080014c1
 80015bc:	08001519 	.word	0x08001519
 80015c0:	20000274 	.word	0x20000274

080015c4 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	4613      	mov	r3, r2
 80015d4:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d019      	beq.n	8001610 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	b299      	uxth	r1, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	b298      	uxth	r0, r3
 80015f2:	8b3b      	ldrh	r3, [r7, #24]
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4603      	mov	r3, r0
 80015fc:	480f      	ldr	r0, [pc, #60]	; (800163c <actI2cRead+0x78>)
 80015fe:	f01c fc2f 	bl	801de60 <HAL_I2C_Mem_Read_DMA>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <actI2cRead+0x48>
 8001608:	2300      	movs	r3, #0
 800160a:	e013      	b.n	8001634 <actI2cRead+0x70>
 800160c:	2302      	movs	r3, #2
 800160e:	e011      	b.n	8001634 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b21b      	sxth	r3, r3
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	b21b      	sxth	r3, r3
 800161c:	b299      	uxth	r1, r3
 800161e:	8b3b      	ldrh	r3, [r7, #24]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <actI2cRead+0x78>)
 8001624:	f01c f988 	bl	801d938 <HAL_I2C_Master_Receive_DMA>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <actI2cRead+0x6e>
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <actI2cRead+0x70>
 8001632:	2302      	movs	r3, #2
	}
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000057c 	.word	0x2000057c

08001640 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	4613      	mov	r3, r2
 8001650:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001652:	7bbb      	ldrb	r3, [r7, #14]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d016      	beq.n	8001686 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	b29b      	uxth	r3, r3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b299      	uxth	r1, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	b29a      	uxth	r2, r3
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	b298      	uxth	r0, r3
 8001668:	8b3b      	ldrh	r3, [r7, #24]
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <actI2cWrite+0x6c>)
 8001674:	f01c fa90 	bl	801db98 <HAL_I2C_Mem_Write_DMA>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <actI2cWrite+0x42>
 800167e:	2300      	movs	r3, #0
 8001680:	e010      	b.n	80016a4 <actI2cWrite+0x64>
 8001682:	2302      	movs	r3, #2
 8001684:	e00e      	b.n	80016a4 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	b29b      	uxth	r3, r3
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	b299      	uxth	r1, r3
 800168e:	8b3b      	ldrh	r3, [r7, #24]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <actI2cWrite+0x6c>)
 8001694:	f01c f820 	bl	801d6d8 <HAL_I2C_Master_Transmit_DMA>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <actI2cWrite+0x62>
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <actI2cWrite+0x64>
 80016a2:	2302      	movs	r3, #2
	}
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000057c 	.word	0x2000057c

080016b0 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_I2C_MemRxCpltCallback+0x24>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d103      	bne.n	80016ca <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 80016c2:	2101      	movs	r1, #1
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80016c6:	f010 ffab 	bl	8012620 <pifI2cPort_sigEndTransfer>
	}
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	2000153c 	.word	0x2000153c

080016dc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d103      	bne.n	80016f6 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 80016ee:	2101      	movs	r1, #1
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80016f2:	f010 ff95 	bl	8012620 <pifI2cPort_sigEndTransfer>
	}
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	2000153c 	.word	0x2000153c

08001708 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_I2C_MemTxCpltCallback+0x24>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d103      	bne.n	8001722 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 800171a:	2101      	movs	r1, #1
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <HAL_I2C_MemTxCpltCallback+0x28>)
 800171e:	f010 ff7f 	bl	8012620 <pifI2cPort_sigEndTransfer>
	}
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40005400 	.word	0x40005400
 8001730:	2000153c 	.word	0x2000153c

08001734 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d103      	bne.n	800174e <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001746:	2101      	movs	r1, #1
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <HAL_I2C_MasterTxCpltCallback+0x28>)
 800174a:	f010 ff69 	bl	8012620 <pifI2cPort_sigEndTransfer>
	}
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40005400 	.word	0x40005400
 800175c:	2000153c 	.word	0x2000153c

08001760 <i2cInit>:

#endif

BOOL i2cInit()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) return FALSE;
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	2205      	movs	r2, #5
 8001768:	2100      	movs	r1, #0
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <i2cInit+0x2c>)
 800176c:	f010 fc56 	bl	801201c <pifI2cPort_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <i2cInit+0x1a>
 8001776:	2300      	movs	r3, #0
 8001778:	e006      	b.n	8001788 <i2cInit+0x28>
    g_i2c_port.act_read = actI2cRead;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <i2cInit+0x2c>)
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <i2cInit+0x30>)
 800177e:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <i2cInit+0x2c>)
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <i2cInit+0x34>)
 8001784:	609a      	str	r2, [r3, #8]
    return TRUE;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000153c 	.word	0x2000153c
 8001790:	080015c5 	.word	0x080015c5
 8001794:	08001641 	.word	0x08001641

08001798 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d811      	bhi.n	80017d2 <failsafeCheck+0x3a>
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <failsafeCheck+0x78>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	88ba      	ldrh	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d90c      	bls.n	80017d2 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2201      	movs	r2, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <failsafeCheck+0x7c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <failsafeCheck+0x7c>)
 80017d0:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <failsafeCheck+0x7c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d114      	bne.n	8001804 <failsafeCheck+0x6c>
        goodPulses = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <failsafeCheck+0x7c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <failsafeCheck+0x80>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	2b14      	cmp	r3, #20
 80017e8:	dd09      	ble.n	80017fe <failsafeCheck+0x66>
            failsafeCnt -= 20;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <failsafeCheck+0x80>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b14      	subs	r3, #20
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <failsafeCheck+0x80>)
 80017fa:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 80017fc:	e002      	b.n	8001804 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <failsafeCheck+0x80>)
 8001800:	2200      	movs	r2, #0
 8001802:	801a      	strh	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	2000000c 	.word	0x2000000c
 8001814:	20000381 	.word	0x20000381
 8001818:	2000176c 	.word	0x2000176c

0800181c <pwmReadRc>:

void pwmReadRc()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <pwmReadRc+0x3c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4798      	blx	r3
 8001828:	4603      	mov	r3, r0
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <pwmReadRc+0x40>)
 800182e:	f016 ff32 	bl	8018696 <pifRcPpm_sigTick>
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <pwmReadRc+0x40>)
 800183e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ffa5 	bl	8001798 <failsafeCheck>
    }
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20001c7c 	.word	0x20001c7c
 800185c:	2000027c 	.word	0x2000027c

08001860 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e00b      	b.n	800188e <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	8819      	ldrh	r1, [r3, #0]
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <_evtRcReceive+0x48>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	461a      	mov	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4293      	cmp	r3, r2
 8001898:	dbed      	blt.n	8001876 <_evtRcReceive+0x16>
	}
    pifTask_SetTrigger(p_task);
 800189a:	6938      	ldr	r0, [r7, #16]
 800189c:	f012 feca 	bl	8014634 <pifTask_SetTrigger>
}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000308 	.word	0x20000308

080018ac <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	460a      	mov	r2, r1
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <pwmWriteStandard+0x8c>)
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d830      	bhi.n	800192c <pwmWriteStandard+0x80>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <pwmWriteStandard+0x24>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	08001905 	.word	0x08001905
 80018d4:	0800192d 	.word	0x0800192d
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800190f 	.word	0x0800190f
 80018e4:	0800192d 	.word	0x0800192d
 80018e8:	0800192d 	.word	0x0800192d
 80018ec:	0800192d 	.word	0x0800192d
 80018f0:	08001919 	.word	0x08001919
 80018f4:	0800192d 	.word	0x0800192d
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	08001923 	.word	0x08001923
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <pwmWriteStandard+0x90>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	88ba      	ldrh	r2, [r7, #4]
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
 800190c:	e00e      	b.n	800192c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <pwmWriteStandard+0x90>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	639a      	str	r2, [r3, #56]	; 0x38
 8001916:	e009      	b.n	800192c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <pwmWriteStandard+0x90>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	88ba      	ldrh	r2, [r7, #4]
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001920:	e004      	b.n	800192c <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <pwmWriteStandard+0x90>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
 800192a:	bf00      	nop
	}
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000328 	.word	0x20000328
 800193c:	2000072c 	.word	0x2000072c

08001940 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	8a5a      	ldrh	r2, [r3, #18]
 8001950:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <pwmInit+0x244>)
 8001952:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	79da      	ldrb	r2, [r3, #7]
 8001958:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <pwmInit+0x248>)
 800195a:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7d1a      	ldrb	r2, [r3, #20]
 8001960:	4b8a      	ldr	r3, [pc, #552]	; (8001b8c <pwmInit+0x24c>)
 8001962:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	799b      	ldrb	r3, [r3, #6]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 800196c:	2302      	movs	r3, #2
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <pwmInit+0x3e>
        i++; // next index is for PPM
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	3301      	adds	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 800197e:	4a84      	ldr	r2, [pc, #528]	; (8001b90 <pwmInit+0x250>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	e0ae      	b.n	8001aec <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4413      	add	r3, r2
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	f000 809f 	beq.w	8001af6 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 80019b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <pwmInit+0x98>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	f083 0301 	eor.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <pwmInit+0x98>
        	type = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 80019d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <pwmInit+0x254>)
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <pwmInit+0x258>)
 80019f0:	2208      	movs	r2, #8
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	e077      	b.n	8001ae6 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 80019f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d171      	bne.n	8001ae6 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001a02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04e      	beq.n	8001aac <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	895b      	ldrh	r3, [r3, #10]
 8001a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a16:	d803      	bhi.n	8001a20 <pwmInit+0xe0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7d5b      	ldrb	r3, [r3, #21]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001a20:	2308      	movs	r3, #8
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	e001      	b.n	8001a2a <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4a5b      	ldr	r2, [pc, #364]	; (8001b9c <pwmInit+0x25c>)
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7d5b      	ldrb	r3, [r3, #21]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <pwmInit+0x10a>
                period = hz / 4000;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <pwmInit+0x260>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a48:	e006      	b.n	8001a58 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	895b      	ldrh	r3, [r3, #10]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a56:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	494e      	ldr	r1, [pc, #312]	; (8001b94 <pwmInit+0x254>)
 8001a5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001a5e:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	7891      	ldrb	r1, [r2, #2]
 8001a72:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <pwmInit+0x254>)
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	460a      	mov	r2, r1
 8001a7a:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <pwmInit+0x254>)
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4846      	ldr	r0, [pc, #280]	; (8001ba4 <pwmInit+0x264>)
 8001a8a:	f01f f947 	bl	8020d1c <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001a8e:	7dfa      	ldrb	r2, [r7, #23]
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <pwmInit+0x268>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	1c59      	adds	r1, r3, #1
 8001a96:	b2c8      	uxtb	r0, r1
 8001a98:	4943      	ldr	r1, [pc, #268]	; (8001ba8 <pwmInit+0x268>)
 8001a9a:	7008      	strb	r0, [r1, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	0093      	lsls	r3, r2, #2
 8001aa0:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <pwmInit+0x254>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a41      	ldr	r2, [pc, #260]	; (8001bac <pwmInit+0x26c>)
 8001aa6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001aaa:	e01c      	b.n	8001ae6 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001aac:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da18      	bge.n	8001ae6 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	899b      	ldrh	r3, [r3, #12]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <pwmInit+0x25c>)
 8001abc:	fb93 f2f2 	sdiv	r2, r3, r2
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	b291      	uxth	r1, r2
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <pwmInit+0x254>)
 8001ac6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001aca:	7dfa      	ldrb	r2, [r7, #23]
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <pwmInit+0x270>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	b2c8      	uxtb	r0, r1
 8001ad4:	4936      	ldr	r1, [pc, #216]	; (8001bb0 <pwmInit+0x270>)
 8001ad6:	7008      	strb	r0, [r1, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	0093      	lsls	r3, r2, #2
 8001adc:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <pwmInit+0x254>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a34      	ldr	r2, [pc, #208]	; (8001bb4 <pwmInit+0x274>)
 8001ae2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2b0d      	cmp	r3, #13
 8001af0:	f77f af4d 	ble.w	800198e <pwmInit+0x4e>
 8001af4:	e000      	b.n	8001af8 <pwmInit+0x1b8>
            break;
 8001af6:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d035      	beq.n	8001b6c <pwmInit+0x22c>
		if (init->usePPM) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d019      	beq.n	8001b3c <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <pwmInit+0x258>)
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001b10:	2100      	movs	r1, #0
 8001b12:	4829      	ldr	r0, [pc, #164]	; (8001bb8 <pwmInit+0x278>)
 8001b14:	f016 fd4c 	bl	80185b0 <pifRcPpm_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d026      	beq.n	8001b6c <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001b1e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001b22:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001b26:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <pwmInit+0x278>)
 8001b28:	f016 fd94 	bl	8018654 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <pwmInit+0x27c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4923      	ldr	r1, [pc, #140]	; (8001bc0 <pwmInit+0x280>)
 8001b34:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <pwmInit+0x278>)
 8001b36:	f016 fc5f 	bl	80183f8 <pifRc_AttachEvtReceive>
 8001b3a:	e017      	b.n	8001b6c <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <pwmInit+0x258>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <pwmInit+0x278>)
 8001b46:	f016 fdf3 	bl	8018730 <pifRcPwm_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00d      	beq.n	8001b6c <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001b50:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001b54:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001b58:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <pwmInit+0x278>)
 8001b5a:	f016 fe63 	bl	8018824 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <pwmInit+0x27c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <pwmInit+0x280>)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <pwmInit+0x278>)
 8001b68:	f016 fc46 	bl	80183f8 <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <pwmInit+0x284>)
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <pwmInit+0x288>)
 8001b70:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <pwmInit+0x270>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	759a      	strb	r2, [r3, #22]

    return false;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	2000037f 	.word	0x2000037f
 8001b8c:	20000380 	.word	0x20000380
 8001b90:	08027f94 	.word	0x08027f94
 8001b94:	200002d0 	.word	0x200002d0
 8001b98:	2000037e 	.word	0x2000037e
 8001b9c:	000f4240 	.word	0x000f4240
 8001ba0:	10624dd3 	.word	0x10624dd3
 8001ba4:	2000072c 	.word	0x2000072c
 8001ba8:	2000037c 	.word	0x2000037c
 8001bac:	20000328 	.word	0x20000328
 8001bb0:	2000037d 	.word	0x2000037d
 8001bb4:	20000358 	.word	0x20000358
 8001bb8:	2000027c 	.word	0x2000027c
 8001bbc:	20001594 	.word	0x20001594
 8001bc0:	08001861 	.word	0x08001861
 8001bc4:	20000378 	.word	0x20000378
 8001bc8:	080018ad 	.word	0x080018ad

08001bcc <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <actPwmWriteMotor+0x30>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	79fa      	ldrb	r2, [r7, #7]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d205      	bcs.n	8001bf2 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <actPwmWriteMotor+0x34>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	88b9      	ldrh	r1, [r7, #4]
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4798      	blx	r3
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000037c 	.word	0x2000037c
 8001c00:	20000378 	.word	0x20000378

08001c04 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <actPwmRead+0x20>)
 8001c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000308 	.word	0x20000308

08001c44 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001c4e:	f000 f8ad 	bl	8001dac <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f852 	bl	8001cfc <actLed0State>
    actLed1State(OFF);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f87b 	bl	8001d54 <actLed1State>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <failureMode>:

void failureMode(uint8_t mode)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
#ifndef __PIF_NO_LOG__
    pifLog_SendAndExit();
 8001c6c:	f011 fce6 	bl	801363c <pifLog_SendAndExit>
#endif
    actLed1State(OFF);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 f86f 	bl	8001d54 <actLed1State>
    actLed0State(ON);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f000 f840 	bl	8001cfc <actLed0State>
    while (1) {
        actLed1Toggle();
 8001c7c:	f000 f880 	bl	8001d80 <actLed1Toggle>
        actLed0Toggle();
 8001c80:	f000 f852 	bl	8001d28 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	441a      	add	r2, r3
 8001c8e:	0152      	lsls	r2, r2, #5
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	0091      	lsls	r1, r2, #2
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b02      	subs	r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00f fa5c 	bl	8011160 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001cae:	f000 f87d 	bl	8001dac <actBuzzerAction>
        pif_Delay1ms(25);
 8001cb2:	2019      	movs	r0, #25
 8001cb4:	f00f fa54 	bl	8011160 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001cbe:	f000 f875 	bl	8001dac <actBuzzerAction>
        actLed1Toggle();
 8001cc2:	e7db      	b.n	8001c7c <failureMode+0x1a>

08001cc4 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <systemReset+0x2c>)
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f011 fbe9 	bl	80134ac <pifLog_Printf>
	pif_Delay1ms(2000);
 8001cda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cde:	f00f fa3f 	bl	8011160 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <systemReset+0x30>)
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <systemReset+0x34>)
 8001ce6:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	08025e18 	.word	0x08025e18
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <actLed0State+0x24>)
 8001d0e:	f01b fb6d 	bl	801d3ec <HAL_GPIO_WritePin>
    len0_state = state;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <actLed0State+0x28>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020800 	.word	0x40020800
 8001d24:	200003cc 	.word	0x200003cc

08001d28 <actLed0Toggle>:

void actLed0Toggle()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <actLed0Toggle+0x24>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <actLed0Toggle+0x24>)
 8001d38:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <actLed0Toggle+0x24>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2110      	movs	r1, #16
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <actLed0Toggle+0x28>)
 8001d44:	f01b fb52 	bl	801d3ec <HAL_GPIO_WritePin>
#endif
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200003cc 	.word	0x200003cc
 8001d50:	40020800 	.word	0x40020800

08001d54 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	461a      	mov	r2, r3
 8001d62:	2104      	movs	r1, #4
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <actLed1State+0x24>)
 8001d66:	f01b fb41 	bl	801d3ec <HAL_GPIO_WritePin>
    len1_state = state;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <actLed1State+0x28>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	200003cd 	.word	0x200003cd

08001d80 <actLed1Toggle>:

void actLed1Toggle()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <actLed1Toggle+0x24>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <actLed1Toggle+0x24>)
 8001d90:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <actLed1Toggle+0x24>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	2104      	movs	r1, #4
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <actLed1Toggle+0x28>)
 8001d9c:	f01b fb26 	bl	801d3ec <HAL_GPIO_WritePin>
#endif
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200003cd 	.word	0x200003cd
 8001da8:	40020400 	.word	0x40020400

08001dac <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <actBuzzerAction+0x24>)
 8001dc4:	f01b fb12 	bl	801d3ec <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <HAL_GPIO_EXTI_Callback>:
    (void)state;
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
	extern void hcsr04Echo();

    switch (GPIO_Pin) {
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d005      	beq.n	8001df0 <HAL_GPIO_EXTI_Callback+0x1c>
 8001de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de8:	d105      	bne.n	8001df6 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 8001dea:	f7ff fd17 	bl	800181c <pwmReadRc>
		break;
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8001df0:	f7ff fb7c 	bl	80014ec <hcsr04Echo>
    	break;
 8001df4:	bf00      	nop
    }
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8001e06:	2100      	movs	r1, #0
 8001e08:	4822      	ldr	r0, [pc, #136]	; (8001e94 <storageInit+0x94>)
 8001e0a:	f019 f9f3 	bl	801b1f4 <pifStorageVar_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <storageInit+0x18>
 8001e14:	2300      	movs	r3, #0
 8001e16:	e039      	b.n	8001e8c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8001e18:	230a      	movs	r3, #10
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	2250      	movs	r2, #80	; 0x50
 8001e20:	491d      	ldr	r1, [pc, #116]	; (8001e98 <storageInit+0x98>)
 8001e22:	481c      	ldr	r0, [pc, #112]	; (8001e94 <storageInit+0x94>)
 8001e24:	f019 fb2e 	bl	801b484 <pifStorageVar_AttachI2c>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d027      	beq.n	8001e7e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	4817      	ldr	r0, [pc, #92]	; (8001e94 <storageInit+0x94>)
 8001e38:	f019 fa52 	bl	801b2e0 <pifStorageVar_SetMedia>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01f      	beq.n	8001e82 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <storageInit+0x94>)
 8001e44:	f019 fb37 	bl	801b4b6 <pifStorageVar_IsFormat>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <storageInit+0x9c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <storageInit+0xa0>)
 8001e56:	2002      	movs	r0, #2
 8001e58:	f011 fb28 	bl	80134ac <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 8001e5c:	480d      	ldr	r0, [pc, #52]	; (8001e94 <storageInit+0x94>)
 8001e5e:	f019 f8e6 	bl	801b02e <pifStorage_Format>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d104      	bne.n	8001e72 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <storageInit+0xa4>)
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f011 fb1e 	bl	80134ac <pifLog_Printf>
			goto fail;
 8001e70:	e008      	b.n	8001e84 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <storageInit+0xa8>)
 8001e74:	2002      	movs	r0, #2
 8001e76:	f011 fb19 	bl	80134ac <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <storageInit+0x94>)
 8001e7c:	e006      	b.n	8001e8c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8001e82:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <storageInit+0x94>)
 8001e86:	f019 fa01 	bl	801b28c <pifStorageVar_Clear>
#endif
	return NULL;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000384 	.word	0x20000384
 8001e98:	2000153c 	.word	0x2000153c
 8001e9c:	20001c55 	.word	0x20001c55
 8001ea0:	08025e30 	.word	0x08025e30
 8001ea4:	08025e48 	.word	0x08025e48
 8001ea8:	08025e60 	.word	0x08025e60

08001eac <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	8a9b      	ldrh	r3, [r3, #20]
 8001eba:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <actUartSetBaudRate+0x6c>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d101      	bne.n	8001edc <actUartSetBaudRate+0x30>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e018      	b.n	8001f0e <actUartSetBaudRate+0x62>

	HAL_UART_Abort_IT(p_uart->p_huart);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f01f ffe9 	bl	8021eb8 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(p_uart->p_huart);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	4618      	mov	r0, r3
 8001eec:	f01f ff3f 	bl	8021d6e <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) return FALSE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	4618      	mov	r0, r3
 8001efe:	f01f fee9 	bl	8021cd4 <HAL_UART_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <actUartSetBaudRate+0x60>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <actUartSetBaudRate+0x62>
	return TRUE;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000408 	.word	0x20000408

08001f1c <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8a9b      	ldrh	r3, [r3, #20]
 8001f28:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <actUartStartTransfer+0x68>)
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f00f ff9e 	bl	8011e90 <pifComm_StartGetTxData>
 8001f54:	4603      	mov	r3, r0
 8001f56:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <actUartStartTransfer+0x5c>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f01f ff2c 	bl	8021dcc <HAL_UART_Transmit_IT>
		return TRUE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <actUartStartTransfer+0x5e>
	}
	return FALSE;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000408 	.word	0x20000408

08001f88 <actLogStartTransfer>:

#ifndef __PIF_NO_LOG__

static BOOL actLogStartTransfer(PifComm* p_comm)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	uint8_t *p_data, state;

	s_usLogTx = 0;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <actLogStartTransfer+0x48>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	801a      	strh	r2, [r3, #0]
	state = pifComm_StartGetTxData(p_comm, &p_data, &s_usLogTx);
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <actLogStartTransfer+0x48>)
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f00f ff76 	bl	8011e90 <pifComm_StartGetTxData>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <actLogStartTransfer+0x3c>
		HAL_UART_Transmit_IT(&huart2, p_data, s_usLogTx);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <actLogStartTransfer+0x48>)
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <actLogStartTransfer+0x4c>)
 8001fbc:	f01f ff06 	bl	8021dcc <HAL_UART_Transmit_IT>
		return TRUE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <actLogStartTransfer+0x3e>
	}
	return FALSE;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000404 	.word	0x20000404
 8001fd4:	200007b8 	.word	0x200007b8

08001fd8 <logOpen>:

BOOL logOpen()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af02      	add	r7, sp, #8
	pifLog_Init();
 8001fde:	f011 f979 	bl	80132d4 <pifLog_Init>

	if (!pifComm_Init(&s_comm_log, PIF_ID_AUTO)) return FALSE;
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4816      	ldr	r0, [pc, #88]	; (8002040 <logOpen+0x68>)
 8001fe6:	f00f fe3d 	bl	8011c64 <pifComm_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <logOpen+0x1c>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e022      	b.n	800203a <logOpen+0x62>
	if (!pifComm_AttachTask(&s_comm_log, TM_PERIOD_MS, 1, TRUE, "C-Log")) return FALSE;			// 1ms
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <logOpen+0x6c>)
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4810      	ldr	r0, [pc, #64]	; (8002040 <logOpen+0x68>)
 8002000:	f00f ffda 	bl	8011fb8 <pifComm_AttachTask>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <logOpen+0x36>
 800200a:	2300      	movs	r3, #0
 800200c:	e015      	b.n	800203a <logOpen+0x62>
	if (!pifComm_AllocTxBuffer(&s_comm_log, 256)) return FALSE;
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <logOpen+0x68>)
 8002014:	f00f feba 	bl	8011d8c <pifComm_AllocTxBuffer>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <logOpen+0x4a>
 800201e:	2300      	movs	r3, #0
 8002020:	e00b      	b.n	800203a <logOpen+0x62>
	s_comm_log.act_start_transfer = actLogStartTransfer;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <logOpen+0x68>)
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <logOpen+0x70>)
 8002026:	60da      	str	r2, [r3, #12]

	if (!pifLog_AttachComm(&s_comm_log)) return FALSE;
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <logOpen+0x68>)
 800202a:	f011 facd 	bl	80135c8 <pifLog_AttachComm>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <logOpen+0x60>
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <logOpen+0x62>
	return TRUE;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200003d0 	.word	0x200003d0
 8002044:	08025e88 	.word	0x08025e88
 8002048:	08001f89 	.word	0x08001f89

0800204c <uartOpen>:

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode, uint8_t period)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	460b      	mov	r3, r1
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	4613      	mov	r3, r2
 8002060:	71bb      	strb	r3, [r7, #6]
    uartPort_t *s = NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t rx_size = 16, tx_size = 64;
 8002066:	2310      	movs	r3, #16
 8002068:	847b      	strh	r3, [r7, #34]	; 0x22
 800206a:	2340      	movs	r3, #64	; 0x40
 800206c:	843b      	strh	r3, [r7, #32]
	uint16_t tmp;
	const char* names[] = { "Comm-1", "Comm-2", "Comm-3" };
 800206e:	4a46      	ldr	r2, [pc, #280]	; (8002188 <uartOpen+0x13c>)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	ca07      	ldmia	r2, {r0, r1, r2}
 8002076:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (port == UART_PORT_1) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <uartOpen+0x40>
        s = &uartPort[0];
 8002080:	4b42      	ldr	r3, [pc, #264]	; (800218c <uartOpen+0x140>)
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart1;
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	4a42      	ldr	r2, [pc, #264]	; (8002190 <uartOpen+0x144>)
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c
 800208a:	e00a      	b.n	80020a2 <uartOpen+0x56>
    else if (port == UART_PORT_2) {
        s = &uartPort[1];
        s->p_huart = &huart2;
    }
#endif
    else if (port == UART_PORT_3) {
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d105      	bne.n	800209e <uartOpen+0x52>
        s = &uartPort[2];
 8002092:	4b40      	ldr	r3, [pc, #256]	; (8002194 <uartOpen+0x148>)
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart6;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	4a3f      	ldr	r2, [pc, #252]	; (8002198 <uartOpen+0x14c>)
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
 800209c:	e001      	b.n	80020a2 <uartOpen+0x56>
    }
    else return NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	e06d      	b.n	800217e <uartOpen+0x132>

    tmp = period * 115200 / 10000;
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	4a3b      	ldr	r2, [pc, #236]	; (800219c <uartOpen+0x150>)
 80020ae:	fb82 1203 	smull	r1, r2, r2, r3
 80020b2:	1312      	asrs	r2, r2, #12
 80020b4:	17db      	asrs	r3, r3, #31
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	83fb      	strh	r3, [r7, #30]
    while (tmp >= rx_size) rx_size <<= 1;
 80020ba:	e002      	b.n	80020c2 <uartOpen+0x76>
 80020bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80020c2:	8bfa      	ldrh	r2, [r7, #30]
 80020c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d2f8      	bcs.n	80020bc <uartOpen+0x70>
	s->init = TRUE;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	if (!pifComm_Init(&s->port.comm, PIF_ID_UART(port - 1))) return FALSE;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1d1a      	adds	r2, r3, #4
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	33ff      	adds	r3, #255	; 0xff
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f00f fdbf 	bl	8011c64 <pifComm_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <uartOpen+0xa4>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e046      	b.n	800217e <uartOpen+0x132>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, period, TRUE, names[port - 1])) return FALSE;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	1d18      	adds	r0, r3, #4
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3328      	adds	r3, #40	; 0x28
 8002100:	443b      	add	r3, r7
 8002102:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	2102      	movs	r1, #2
 800210c:	f00f ff54 	bl	8011fb8 <pifComm_AttachTask>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <uartOpen+0xce>
 8002116:	2300      	movs	r3, #0
 8002118:	e031      	b.n	800217e <uartOpen+0x132>
	if (!pifComm_AllocRxBuffer(&s->port.comm, rx_size, 100)) return FALSE;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	3304      	adds	r3, #4
 800211e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002120:	2264      	movs	r2, #100	; 0x64
 8002122:	4618      	mov	r0, r3
 8002124:	f00f fdee 	bl	8011d04 <pifComm_AllocRxBuffer>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <uartOpen+0xe6>
 800212e:	2300      	movs	r3, #0
 8002130:	e025      	b.n	800217e <uartOpen+0x132>
	if (!pifComm_AllocTxBuffer(&s->port.comm, tx_size)) return FALSE;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	3304      	adds	r3, #4
 8002136:	8c3a      	ldrh	r2, [r7, #32]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f00f fe26 	bl	8011d8c <pifComm_AllocTxBuffer>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <uartOpen+0xfe>
 8002146:	2300      	movs	r3, #0
 8002148:	e019      	b.n	800217e <uartOpen+0x132>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <uartOpen+0x154>)
 800214e:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <uartOpen+0x158>)
 8002154:	611a      	str	r2, [r3, #16]

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f8f2 	bl	8002344 <serialSetBaudRate>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <uartOpen+0x128>
    	pifComm_Clear(&s->port.comm);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3304      	adds	r3, #4
 800216a:	4618      	mov	r0, r3
 800216c:	f00f fda4 	bl	8011cb8 <pifComm_Clear>
    	return FALSE;
 8002170:	2300      	movs	r3, #0
 8002172:	e004      	b.n	800217e <uartOpen+0x132>
    }

	s->init = FALSE;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    return (serialPort_t *)s;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800217e:	4618      	mov	r0, r3
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	08025e90 	.word	0x08025e90
 800218c:	20000408 	.word	0x20000408
 8002190:	20000774 	.word	0x20000774
 8002194:	20000490 	.word	0x20000490
 8002198:	200007fc 	.word	0x200007fc
 800219c:	68db8bad 	.word	0x68db8bad
 80021a0:	08001ead 	.word	0x08001ead
 80021a4:	08001f1d 	.word	0x08001f1d

080021a8 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_UART_TxCpltCallback+0xf8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d102      	bne.n	80021c0 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <HAL_UART_TxCpltCallback+0xfc>)
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e035      	b.n	800222c <HAL_UART_TxCpltCallback+0x84>
	}
	else if (huart->Instance == USART2) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <HAL_UART_TxCpltCallback+0x100>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d129      	bne.n	800221e <HAL_UART_TxCpltCallback+0x76>
#ifndef __PIF_NO_LOG__
		state = pifComm_EndGetTxData(&s_comm_log, s_usLogTx);
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_UART_TxCpltCallback+0x104>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4837      	ldr	r0, [pc, #220]	; (80022b0 <HAL_UART_TxCpltCallback+0x108>)
 80021d2:	f00f fe95 	bl	8011f00 <pifComm_EndGetTxData>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74fb      	strb	r3, [r7, #19]
		if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_UART_TxCpltCallback+0x44>
			pifComm_FinishTransfer(&s_comm_log);
 80021e4:	4832      	ldr	r0, [pc, #200]	; (80022b0 <HAL_UART_TxCpltCallback+0x108>)
 80021e6:	f00f fea4 	bl	8011f32 <pifComm_FinishTransfer>
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
 80021ea:	e053      	b.n	8002294 <HAL_UART_TxCpltCallback+0xec>
			s_usLogTx = 0;
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <HAL_UART_TxCpltCallback+0x104>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
			state = pifComm_StartGetTxData(&s_comm_log, &p_data, &s_usLogTx);
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <HAL_UART_TxCpltCallback+0x104>)
 80021f8:	4619      	mov	r1, r3
 80021fa:	482d      	ldr	r0, [pc, #180]	; (80022b0 <HAL_UART_TxCpltCallback+0x108>)
 80021fc:	f00f fe48 	bl	8011e90 <pifComm_StartGetTxData>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
			if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d042      	beq.n	8002294 <HAL_UART_TxCpltCallback+0xec>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <HAL_UART_TxCpltCallback+0x104>)
 8002212:	8812      	ldrh	r2, [r2, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f01f fdd8 	bl	8021dcc <HAL_UART_Transmit_IT>
		return;
 800221c:	e03a      	b.n	8002294 <HAL_UART_TxCpltCallback+0xec>
#else
		p_uart = &uartPort[1];
#endif
	}
	else if (huart->Instance == USART6) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_UART_TxCpltCallback+0x10c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d137      	bne.n	8002298 <HAL_UART_TxCpltCallback+0xf0>
		p_uart = &uartPort[2];
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_UART_TxCpltCallback+0x110>)
 800222a:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1d1a      	adds	r2, r3, #4
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f00f fe61 	bl	8011f00 <pifComm_EndGetTxData>
 800223e:	4603      	mov	r3, r0
 8002240:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_UART_TxCpltCallback+0xb0>
		pifComm_FinishTransfer(&p_uart->port.comm);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3304      	adds	r3, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f00f fe6e 	bl	8011f32 <pifComm_FinishTransfer>
 8002256:	e020      	b.n	800229a <HAL_UART_TxCpltCallback+0xf2>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2208      	movs	r2, #8
 800225c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1d18      	adds	r0, r3, #4
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4619      	mov	r1, r3
 8002270:	f00f fe0e 	bl	8011e90 <pifComm_StartGetTxData>
 8002274:	4603      	mov	r3, r0
 8002276:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_UART_TxCpltCallback+0xf2>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800228a:	461a      	mov	r2, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f01f fd9d 	bl	8021dcc <HAL_UART_Transmit_IT>
 8002292:	e002      	b.n	800229a <HAL_UART_TxCpltCallback+0xf2>
		return;
 8002294:	bf00      	nop
 8002296:	e000      	b.n	800229a <HAL_UART_TxCpltCallback+0xf2>
	else return;
 8002298:	bf00      	nop
		}
	}
}
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40011000 	.word	0x40011000
 80022a4:	20000408 	.word	0x20000408
 80022a8:	40004400 	.word	0x40004400
 80022ac:	20000404 	.word	0x20000404
 80022b0:	200003d0 	.word	0x200003d0
 80022b4:	40011400 	.word	0x40011400
 80022b8:	20000490 	.word	0x20000490

080022bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_UART_RxCpltCallback+0x70>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d102      	bne.n	80022d4 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_UART_RxCpltCallback+0x74>)
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e00e      	b.n	80022f2 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_UART_RxCpltCallback+0x78>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d102      	bne.n	80022e4 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_UART_RxCpltCallback+0x7c>)
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e006      	b.n	80022f2 <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_UART_RxCpltCallback+0x80>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d117      	bne.n	800231e <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_UART_RxCpltCallback+0x84>)
 80022f0:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1d1a      	adds	r2, r3, #4
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f00f fd94 	bl	8011e36 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3342      	adds	r3, #66	; 0x42
 8002312:	2201      	movs	r2, #1
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f01f fd9d 	bl	8021e56 <HAL_UART_Receive_IT>
 800231c:	e002      	b.n	8002324 <HAL_UART_RxCpltCallback+0x68>
	else return;
 800231e:	bf00      	nop
 8002320:	e000      	b.n	8002324 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 8002322:	bf00      	nop
}
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40011000 	.word	0x40011000
 8002330:	20000408 	.word	0x20000408
 8002334:	40004400 	.word	0x40004400
 8002338:	2000044c 	.word	0x2000044c
 800233c:	40011400 	.word	0x40011400
 8002340:	20000490 	.word	0x20000490

08002344 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
   	if (!(*instance->comm.act_set_baudrate)(&instance->comm, baudRate)) return FALSE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	3204      	adds	r2, #4
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	4610      	mov	r0, r2
 800235a:	4798      	blx	r3
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <serialSetBaudRate+0x22>
 8002362:	2300      	movs	r3, #0
 8002364:	e00a      	b.n	800237c <serialSetBaudRate+0x38>
	if (!serialStartReceiveFunc(&instance->comm)) return FALSE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f80a 	bl	8002384 <serialStartReceiveFunc>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <serialSetBaudRate+0x36>
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <serialSetBaudRate+0x38>
	return TRUE;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8a9b      	ldrh	r3, [r3, #20]
 8002390:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <serialStartReceiveFunc+0x44>)
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3342      	adds	r3, #66	; 0x42
 80023aa:	2201      	movs	r2, #1
 80023ac:	4619      	mov	r1, r3
 80023ae:	f01f fd52 	bl	8021e56 <HAL_UART_Receive_IT>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <serialStartReceiveFunc+0x38>
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <serialStartReceiveFunc+0x3a>
	return TRUE;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000408 	.word	0x20000408

080023cc <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8a9b      	ldrh	r3, [r3, #20]
 80023d8:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <serialStopReceiveFunc+0x34>)
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f01f fd62 	bl	8021eb8 <HAL_UART_Abort_IT>
	return TRUE;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000408 	.word	0x20000408

08002404 <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <micros+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	200006e4 	.word	0x200006e4

0800241c <featureDefault>:

static void featureDefault(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 8002420:	2002      	movs	r0, #2
 8002422:	f004 fceb 	bl	8006dfc <featureSet>
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <actTaskSignal>:

#ifndef __PIF_NO_LOG__

void actTaskSignal(BOOL state)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, state);
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	461a      	mov	r2, r3
 800243a:	2120      	movs	r1, #32
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <actTaskSignal+0x20>)
 800243e:	f01a ffd5 	bl	801d3ec <HAL_GPIO_WritePin>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020000 	.word	0x40020000

08002450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b08f      	sub	sp, #60	; 0x3c
 8002454:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245c:	f019 fb8a 	bl	801bb74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002460:	f000 fb36 	bl	8002ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002464:	f000 fe1c 	bl	80030a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002468:	f000 fddc 	bl	8003024 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800246c:	f000 fd86 	bl	8002f7c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002470:	f000 fc14 	bl	8002c9c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002474:	f000 fcba 	bl	8002dec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002478:	f000 fd56 	bl	8002f28 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800247c:	f000 fda8 	bl	8002fd0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002480:	f000 fb90 	bl	8002ba4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002484:	f000 fc66 	bl	8002d54 <MX_TIM2_Init>
  MX_I2C2_Init();
 8002488:	f000 fc36 	bl	8002cf8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800248c:	2100      	movs	r1, #0
 800248e:	4896      	ldr	r0, [pc, #600]	; (80026e8 <main+0x298>)
 8002490:	f01e fcf4 	bl	8020e7c <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 8002494:	4895      	ldr	r0, [pc, #596]	; (80026ec <main+0x29c>)
 8002496:	f00e fd8f 	bl	8010fb8 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 800249a:	2014      	movs	r0, #20
 800249c:	f012 f92a 	bl	80146f4 <pifTaskManager_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <main+0x5c>
 80024a6:	23af      	movs	r3, #175	; 0xaf
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024aa:	e2f7      	b.n	8002a9c <main+0x64c>

#ifdef __PIF_DEBUG__
    pif_act_task_signal = actTaskSignal;
 80024ac:	4b90      	ldr	r3, [pc, #576]	; (80026f0 <main+0x2a0>)
 80024ae:	4a91      	ldr	r2, [pc, #580]	; (80026f4 <main+0x2a4>)
 80024b0:	601a      	str	r2, [r3, #0]
#endif

#ifndef __PIF_NO_LOG__
    logOpen();
 80024b2:	f7ff fd91 	bl	8001fd8 <logOpen>
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80024b6:	2303      	movs	r3, #3
 80024b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024bc:	2100      	movs	r1, #0
 80024be:	488e      	ldr	r0, [pc, #568]	; (80026f8 <main+0x2a8>)
 80024c0:	f012 fd82 	bl	8014fc8 <pifTimerManager_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <main+0x80>
 80024ca:	23b9      	movs	r3, #185	; 0xb9
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ce:	e2e5      	b.n	8002a9c <main+0x64c>

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
 80024d0:	f240 526c 	movw	r2, #1388	; 0x56c
 80024d4:	4989      	ldr	r1, [pc, #548]	; (80026fc <main+0x2ac>)
 80024d6:	2002      	movs	r0, #2
 80024d8:	f010 ffe8 	bl	80134ac <pifLog_Printf>
#endif

    if (!buzzerInit()) FAIL;
 80024dc:	f001 fc8a 	bl	8003df4 <buzzerInit>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <main+0xa2>
 80024ec:	23bf      	movs	r3, #191	; 0xbf
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f0:	e2d4      	b.n	8002a9c <main+0x64c>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80024f2:	4b83      	ldr	r3, [pc, #524]	; (8002700 <main+0x2b0>)
 80024f4:	4a83      	ldr	r2, [pc, #524]	; (8002704 <main+0x2b4>)
 80024f6:	601a      	str	r2, [r3, #0]

    if (!i2cInit()) FAIL;
 80024f8:	f7ff f932 	bl	8001760 <i2cInit>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <main+0xb8>
 8002502:	23c6      	movs	r3, #198	; 0xc6
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
 8002506:	e2c9      	b.n	8002a9c <main+0x64c>

    if (!initEEPROM(storageInit())) FAIL;
 8002508:	f7ff fc7a 	bl	8001e00 <storageInit>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f003 febc 	bl	800628c <initEEPROM>
 8002514:	4603      	mov	r3, r0
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <main+0xd6>
 8002520:	23c8      	movs	r3, #200	; 0xc8
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
 8002524:	e2ba      	b.n	8002a9c <main+0x64c>
    if (!checkFirstTime(false)) FAIL;
 8002526:	2000      	movs	r0, #0
 8002528:	f004 f8f2 	bl	8006710 <checkFirstTime>
 800252c:	4603      	mov	r3, r0
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <main+0xee>
 8002538:	23c9      	movs	r3, #201	; 0xc9
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
 800253c:	e2ae      	b.n	8002a9c <main+0x64c>
    readEEPROM();
 800253e:	f003 ff51 	bl	80063e4 <readEEPROM>

    systemInit();
 8002542:	f7ff fb7f 	bl	8001c44 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 8002546:	2064      	movs	r0, #100	; 0x64
 8002548:	f00e fe0a 	bl	8011160 <pif_Delay1ms>

    activateConfig();
 800254c:	f003 ff94 	bl	8006478 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 8002550:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <main+0x2b8>)
 8002552:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01b      	beq.n	8002592 <main+0x142>
 800255a:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <main+0x2b8>)
 800255c:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002560:	2b01      	cmp	r3, #1
 8002562:	d009      	beq.n	8002578 <main+0x128>
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <main+0x2b8>)
 8002566:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800256a:	2b09      	cmp	r3, #9
 800256c:	d004      	beq.n	8002578 <main+0x128>
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <main+0x2b8>)
 8002570:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002574:	2b05      	cmp	r3, #5
 8002576:	d10c      	bne.n	8002592 <main+0x142>
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <main+0x2b8>)
 800257a:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 800257e:	4b62      	ldr	r3, [pc, #392]	; (8002708 <main+0x2b8>)
 8002580:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002584:	429a      	cmp	r2, r3
 8002586:	d004      	beq.n	8002592 <main+0x142>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002588:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <main+0x2b8>)
 800258a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800258e:	717b      	strb	r3, [r7, #5]
 8002590:	e005      	b.n	800259e <main+0x14e>
    else {
        adc_params.rssiAdcChannel = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	717b      	strb	r3, [r7, #5]
        mcfg.rssi_adc_channel = 0;
 8002596:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <main+0x2b8>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fdef 	bl	8001184 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 80025a6:	2002      	movs	r0, #2
 80025a8:	f004 fc12 	bl	8006dd0 <feature>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <main+0x166>
        batteryInit();
 80025b2:	f00b fffb 	bl	800e5ac <batteryInit>
    initBoardAlignment();
 80025b6:	f001 fac3 	bl	8003b40 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <main+0x2bc>)
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	4b54      	ldr	r3, [pc, #336]	; (8002710 <main+0x2c0>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <main+0x2c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4854      	ldr	r0, [pc, #336]	; (8002718 <main+0x2c8>)
 80025c8:	f00b fe8e 	bl	800e2e8 <sensorsAutodetect>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
 80025d2:	f004 fbf1 	bl	8006db8 <sensorsMask>
 80025d6:	4602      	mov	r2, r0
 80025d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025dc:	494f      	ldr	r1, [pc, #316]	; (800271c <main+0x2cc>)
 80025de:	2002      	movs	r0, #2
 80025e0:	f010 ff64 	bl	80134ac <pifLog_Printf>
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80025e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <main+0x1a8>
        failureMode(3);
 80025f2:	2003      	movs	r0, #3
 80025f4:	f7ff fb35 	bl	8001c62 <failureMode>

    actLed1State(ON);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff fbab 	bl	8001d54 <actLed1State>
    actLed0State(OFF);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fb7c 	bl	8001cfc <actLed0State>
    for (i = 0; i < 10; i++) {
 8002604:	2300      	movs	r3, #0
 8002606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800260a:	e018      	b.n	800263e <main+0x1ee>
        actLed1Toggle();
 800260c:	f7ff fbb8 	bl	8001d80 <actLed1Toggle>
        actLed0Toggle();
 8002610:	f7ff fb8a 	bl	8001d28 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 8002614:	2019      	movs	r0, #25
 8002616:	f012 fbb5 	bl	8014d84 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 800261a:	2101      	movs	r1, #1
 800261c:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002620:	f7ff fbc4 	bl	8001dac <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 8002624:	2019      	movs	r0, #25
 8002626:	f012 fbad 	bl	8014d84 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 800262a:	2100      	movs	r1, #0
 800262c:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002630:	f7ff fbbc 	bl	8001dac <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 8002634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002638:	3301      	adds	r3, #1
 800263a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800263e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002642:	2b09      	cmp	r3, #9
 8002644:	d9e2      	bls.n	800260c <main+0x1bc>
    }
    actLed0State(OFF);
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff fb58 	bl	8001cfc <actLed0State>
    actLed1State(OFF);
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff fb81 	bl	8001d54 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 8002652:	f007 f8dd 	bl	8009810 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 8002656:	f008 fbc3 	bl	800ade0 <mixerInit>

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <main+0x2b8>)
 800265c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002660:	461a      	mov	r2, r3
 8002662:	492f      	ldr	r1, [pc, #188]	; (8002720 <main+0x2d0>)
 8002664:	2002      	movs	r0, #2
 8002666:	f010 ff21 	bl	80134ac <pifLog_Printf>
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <main+0x2b8>)
 800266c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002670:	2200      	movs	r2, #0
 8002672:	4619      	mov	r1, r3
 8002674:	2001      	movs	r0, #1
 8002676:	f00c fe4f 	bl	800f318 <serialInit>
#else
    serialInit(UART_PORT_1, mcfg.serial_baudrate, feature(FEATURE_SERIALRX) ? UART_PORT_NONE : UART_PORT_2);
#endif

    g_task_compute_rc = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskComputeRc, NULL, FALSE);
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <main+0x2d4>)
 8002682:	2100      	movs	r1, #0
 8002684:	2007      	movs	r0, #7
 8002686:	f012 f85b 	bl	8014740 <pifTaskManager_Add>
 800268a:	4603      	mov	r3, r0
 800268c:	4a26      	ldr	r2, [pc, #152]	; (8002728 <main+0x2d8>)
 800268e:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <main+0x2d8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d103      	bne.n	80026a0 <main+0x250>
 8002698:	f240 1303 	movw	r3, #259	; 0x103
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
 800269e:	e1fd      	b.n	8002a9c <main+0x64c>
    g_task_compute_rc->name = "RC";
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <main+0x2d8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <main+0x2dc>)
 80026a6:	601a      	str	r2, [r3, #0]

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <main+0x2b8>)
 80026aa:	795b      	ldrb	r3, [r3, #5]
 80026ac:	2b0e      	cmp	r3, #14
 80026ae:	d007      	beq.n	80026c0 <main+0x270>
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <main+0x2b8>)
 80026b2:	795b      	ldrb	r3, [r3, #5]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d003      	beq.n	80026c0 <main+0x270>
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <main+0x2b8>)
 80026ba:	795b      	ldrb	r3, [r3, #5]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d102      	bne.n	80026c6 <main+0x276>
        pwm_params.airplane = true;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73bb      	strb	r3, [r7, #14]
 80026c4:	e001      	b.n	80026ca <main+0x27a>
    else
        pwm_params.airplane = false;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73bb      	strb	r3, [r7, #14]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 80026ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026ce:	f004 fb7f 	bl	8006dd0 <feature>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <main+0x294>
 80026d8:	2008      	movs	r0, #8
 80026da:	f004 fb79 	bl	8006dd0 <feature>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d025      	beq.n	8002730 <main+0x2e0>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e024      	b.n	8002732 <main+0x2e2>
 80026e8:	200006e4 	.word	0x200006e4
 80026ec:	08002405 	.word	0x08002405
 80026f0:	20001d0c 	.word	0x20001d0c
 80026f4:	0800242d 	.word	0x0800242d
 80026f8:	2000156c 	.word	0x2000156c
 80026fc:	08025e9c 	.word	0x08025e9c
 8002700:	20001720 	.word	0x20001720
 8002704:	0800241d 	.word	0x0800241d
 8002708:	200008f8 	.word	0x200008f8
 800270c:	20000858 	.word	0x20000858
 8002710:	2000085c 	.word	0x2000085c
 8002714:	20000860 	.word	0x20000860
 8002718:	20000010 	.word	0x20000010
 800271c:	08025eb4 	.word	0x08025eb4
 8002720:	08025ec8 	.word	0x08025ec8
 8002724:	0800d0c5 	.word	0x0800d0c5
 8002728:	20001594 	.word	0x20001594
 800272c:	08025ed4 	.word	0x08025ed4
 8002730:	2300      	movs	r3, #0
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	72bb      	strb	r3, [r7, #10]
    pwm_params.useSoftSerial = false;
 800273a:	2300      	movs	r3, #0
 800273c:	72fb      	strb	r3, [r7, #11]
    pwm_params.usePPM = feature(FEATURE_PPM);
 800273e:	2001      	movs	r0, #1
 8002740:	f004 fb46 	bl	8006dd0 <feature>
 8002744:	4603      	mov	r3, r0
 8002746:	727b      	strb	r3, [r7, #9]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 8002748:	2008      	movs	r0, #8
 800274a:	f004 fb41 	bl	8006dd0 <feature>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	723b      	strb	r3, [r7, #8]
    pwm_params.useServos = core.useServo;
 8002768:	4baa      	ldr	r3, [pc, #680]	; (8002a14 <main+0x5c4>)
 800276a:	7d5b      	ldrb	r3, [r3, #21]
 800276c:	733b      	strb	r3, [r7, #12]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 800276e:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <main+0x5c8>)
 8002770:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	737b      	strb	r3, [r7, #13]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 8002784:	4ba5      	ldr	r3, [pc, #660]	; (8002a1c <main+0x5cc>)
 8002786:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 800278a:	827b      	strh	r3, [r7, #18]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 800278c:	4ba3      	ldr	r3, [pc, #652]	; (8002a1c <main+0x5cc>)
 800278e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002792:	82bb      	strh	r3, [r7, #20]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 8002794:	4ba1      	ldr	r3, [pc, #644]	; (8002a1c <main+0x5cc>)
 8002796:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800279a:	73fb      	strb	r3, [r7, #15]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 800279c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a0:	82fb      	strh	r3, [r7, #22]
    if (feature(FEATURE_3D))
 80027a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027a6:	f004 fb13 	bl	8006dd0 <feature>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <main+0x368>
        pwm_params.idlePulse = mcfg.neutral3d;
 80027b0:	4b9a      	ldr	r3, [pc, #616]	; (8002a1c <main+0x5cc>)
 80027b2:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 80027b6:	82fb      	strh	r3, [r7, #22]
    if (pwm_params.motorPwmRate > 500)
 80027b8:	8a7b      	ldrh	r3, [r7, #18]
 80027ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027be:	d901      	bls.n	80027c4 <main+0x374>
        pwm_params.idlePulse = 0; // brushed motors
 80027c0:	2300      	movs	r3, #0
 80027c2:	82fb      	strh	r3, [r7, #22]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 80027c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80027c8:	f004 fb02 	bl	8006dd0 <feature>
 80027cc:	4603      	mov	r3, r0
 80027ce:	773b      	strb	r3, [r7, #28]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 80027d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027d4:	f004 fafc 	bl	8006dd0 <feature>
 80027d8:	4603      	mov	r3, r0
 80027da:	777b      	strb	r3, [r7, #29]
    pwm_params.servoCenterPulse = mcfg.midrc;
 80027dc:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <main+0x5cc>)
 80027de:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80027e2:	833b      	strh	r3, [r7, #24]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 80027e4:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <main+0x5c8>)
 80027e6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80027ea:	837b      	strh	r3, [r7, #26]
    switch (mcfg.power_adc_channel) {
 80027ec:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <main+0x5cc>)
 80027ee:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d002      	beq.n	80027fc <main+0x3ac>
 80027f6:	2b09      	cmp	r3, #9
 80027f8:	d003      	beq.n	8002802 <main+0x3b2>
 80027fa:	e005      	b.n	8002808 <main+0x3b8>
        case 1:
            pwm_params.adcChannel = PWM2;
 80027fc:	2301      	movs	r3, #1
 80027fe:	743b      	strb	r3, [r7, #16]
            break;
 8002800:	e005      	b.n	800280e <main+0x3be>
        case 9:
            pwm_params.adcChannel = PWM8;
 8002802:	2307      	movs	r3, #7
 8002804:	743b      	strb	r3, [r7, #16]
            break;
 8002806:	e002      	b.n	800280e <main+0x3be>
        default:
            pwm_params.adcChannel = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	743b      	strb	r3, [r7, #16]
            break;
 800280c:	bf00      	nop
    }

    pwmInit(&pwm_params);
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f894 	bl	8001940 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002818:	7fba      	ldrb	r2, [r7, #30]
 800281a:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <main+0x5c4>)
 800281c:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002824:	e00b      	b.n	800283e <main+0x3ee>
        rcData[i] = 1502;
 8002826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800282a:	4a7d      	ldr	r2, [pc, #500]	; (8002a20 <main+0x5d0>)
 800282c:	f240 51de 	movw	r1, #1502	; 0x5de
 8002830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 8002834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002838:	3301      	adds	r3, #1
 800283a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800283e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002842:	2b11      	cmp	r3, #17
 8002844:	d9ef      	bls.n	8002826 <main+0x3d6>
    rcReadRawFunc = pwmReadRawRC;
 8002846:	4b77      	ldr	r3, [pc, #476]	; (8002a24 <main+0x5d4>)
 8002848:	4a77      	ldr	r2, [pc, #476]	; (8002a28 <main+0x5d8>)
 800284a:	601a      	str	r2, [r3, #0]
    }
#endif

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 800284c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002850:	f004 fabe 	bl	8006dd0 <feature>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <main+0x41a>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 800285a:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <main+0x5cc>)
 800285c:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	2003      	movs	r0, #3
 8002866:	f005 fae5 	bl	8007e34 <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 800286a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800286e:	f004 faaf 	bl	8006dd0 <feature>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <main+0x430>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002878:	2102      	movs	r1, #2
 800287a:	486c      	ldr	r0, [pc, #432]	; (8002a2c <main+0x5dc>)
 800287c:	f00c fcb6 	bl	800f1ec <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002880:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <main+0x5cc>)
 8002882:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002886:	3b04      	subs	r3, #4
 8002888:	2208      	movs	r2, #8
 800288a:	2104      	movs	r1, #4
 800288c:	4618      	mov	r0, r3
 800288e:	f001 f93d 	bl	8003b0c <constrain>
 8002892:	4603      	mov	r3, r0
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <main+0x5c4>)
 8002898:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 800289a:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <main+0x5cc>)
 800289c:	795b      	ldrb	r3, [r3, #5]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d103      	bne.n	80028aa <main+0x45a>
        calibratingA = CALIBRATING_ACC_CYCLES;
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <main+0x5e0>)
 80028a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80028a8:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 80028aa:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <main+0x5e4>)
 80028ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028b0:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <main+0x5e8>)
 80028b4:	22c8      	movs	r2, #200	; 0xc8
 80028b6:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 80028b8:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <main+0x5ec>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	735a      	strb	r2, [r3, #13]

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 10, taskLoop, NULL, TRUE);         								// 1ms
 80028be:	2301      	movs	r3, #1
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2300      	movs	r3, #0
 80028c4:	4a5e      	ldr	r2, [pc, #376]	; (8002a40 <main+0x5f0>)
 80028c6:	210a      	movs	r1, #10
 80028c8:	2002      	movs	r0, #2
 80028ca:	f011 ff39 	bl	8014740 <pifTaskManager_Add>
 80028ce:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <main+0x48e>
 80028d6:	f240 1367 	movw	r3, #359	; 0x167
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
 80028dc:	e0de      	b.n	8002a9c <main+0x64c>
    p_task->name = "Loop";
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	4a58      	ldr	r2, [pc, #352]	; (8002a44 <main+0x5f4>)
 80028e2:	601a      	str	r2, [r3, #0]

    if (mcfg.looptime) {
 80028e4:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <main+0x5cc>)
 80028e6:	899b      	ldrh	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00c      	beq.n	8002906 <main+0x4b6>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <main+0x5cc>)
 80028ee:	8999      	ldrh	r1, [r3, #12]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2300      	movs	r3, #0
 80028f6:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <main+0x5f8>)
 80028f8:	2003      	movs	r0, #3
 80028fa:	f011 ff21 	bl	8014740 <pifTaskManager_Add>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <main+0x5fc>)
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e00a      	b.n	800291c <main+0x4cc>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002906:	2301      	movs	r3, #1
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2300      	movs	r3, #0
 800290c:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <main+0x5f8>)
 800290e:	2100      	movs	r1, #0
 8002910:	2001      	movs	r0, #1
 8002912:	f011 ff15 	bl	8014740 <pifTaskManager_Add>
 8002916:	4603      	mov	r3, r0
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <main+0x5fc>)
 800291a:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 800291c:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <main+0x5fc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <main+0x4dc>
 8002924:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
 800292a:	e0b7      	b.n	8002a9c <main+0x64c>
    g_task_compute_imu->name = "IMU";
 800292c:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <main+0x5fc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a47      	ldr	r2, [pc, #284]	; (8002a50 <main+0x600>)
 8002932:	601a      	str	r2, [r3, #0]
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002934:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <main+0x5fc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	715a      	strb	r2, [r3, #5]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 800293c:	2008      	movs	r0, #8
 800293e:	f004 f9ff 	bl	8006d40 <sensors>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01e      	beq.n	8002986 <main+0x536>
        sensor_set.mag.p_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002948:	2301      	movs	r3, #1
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2300      	movs	r3, #0
 800294e:	4a41      	ldr	r2, [pc, #260]	; (8002a54 <main+0x604>)
 8002950:	2164      	movs	r1, #100	; 0x64
 8002952:	2002      	movs	r0, #2
 8002954:	f011 fef4 	bl	8014740 <pifTaskManager_Add>
 8002958:	4603      	mov	r3, r0
 800295a:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <main+0x608>)
 800295c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        if (!sensor_set.mag.p_task) FAIL;
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <main+0x608>)
 8002962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <main+0x522>
 800296a:	f240 1377 	movw	r3, #375	; 0x177
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002970:	e094      	b.n	8002a9c <main+0x64c>
        sensor_set.mag.p_task->name = "Mag";
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <main+0x608>)
 8002974:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002978:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <main+0x60c>)
 800297a:	601a      	str	r2, [r3, #0]
        sensor_set.mag.p_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <main+0x608>)
 800297e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002982:	2201      	movs	r2, #1
 8002984:	715a      	strb	r2, [r3, #5]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002986:	2004      	movs	r0, #4
 8002988:	f004 f9da 	bl	8006d40 <sensors>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d019      	beq.n	80029c6 <main+0x576>
        sensor_set.baro.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002992:	2300      	movs	r3, #0
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <main+0x610>)
 800299a:	2100      	movs	r1, #0
 800299c:	2007      	movs	r0, #7
 800299e:	f011 fecf 	bl	8014740 <pifTaskManager_Add>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a2c      	ldr	r2, [pc, #176]	; (8002a58 <main+0x608>)
 80029a6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        if (!sensor_set.baro.p_task) FAIL;
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <main+0x608>)
 80029ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <main+0x56c>
 80029b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ba:	e06f      	b.n	8002a9c <main+0x64c>
        sensor_set.baro.p_task->name = "Baro";
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <main+0x608>)
 80029be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <main+0x614>)
 80029c4:	601a      	str	r2, [r3, #0]
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGpsNewData, NULL, FALSE);
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <main+0x618>)
 80029ce:	2100      	movs	r1, #0
 80029d0:	2007      	movs	r0, #7
 80029d2:	f011 feb5 	bl	8014740 <pifTaskManager_Add>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <main+0x61c>)
 80029da:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <main+0x61c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <main+0x59c>
 80029e4:	f240 1387 	movw	r3, #391	; 0x187
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	e057      	b.n	8002a9c <main+0x64c>
    g_task_gps->name = "GPS";
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <main+0x61c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <main+0x620>)
 80029f2:	601a      	str	r2, [r3, #0]
#endif

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE);									// 50ms
 80029f4:	2301      	movs	r3, #1
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <main+0x624>)
 80029fc:	2132      	movs	r1, #50	; 0x32
 80029fe:	2002      	movs	r0, #2
 8002a00:	f011 fe9e 	bl	8014740 <pifTaskManager_Add>
 8002a04:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d135      	bne.n	8002a78 <main+0x628>
 8002a0c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a12:	e043      	b.n	8002a9c <main+0x64c>
 8002a14:	20000840 	.word	0x20000840
 8002a18:	20000e64 	.word	0x20000e64
 8002a1c:	200008f8 	.word	0x200008f8
 8002a20:	20001770 	.word	0x20001770
 8002a24:	200017c8 	.word	0x200017c8
 8002a28:	0800c89d 	.word	0x0800c89d
 8002a2c:	08001565 	.word	0x08001565
 8002a30:	20001a02 	.word	0x20001a02
 8002a34:	20001a06 	.word	0x20001a06
 8002a38:	20001a04 	.word	0x20001a04
 8002a3c:	20001738 	.word	0x20001738
 8002a40:	0800dc95 	.word	0x0800dc95
 8002a44:	08025ed8 	.word	0x08025ed8
 8002a48:	0800dcfd 	.word	0x0800dcfd
 8002a4c:	20001590 	.word	0x20001590
 8002a50:	08025ee0 	.word	0x08025ee0
 8002a54:	0800eef5 	.word	0x0800eef5
 8002a58:	2000005c 	.word	0x2000005c
 8002a5c:	08025ee4 	.word	0x08025ee4
 8002a60:	0800a661 	.word	0x0800a661
 8002a64:	08025ee8 	.word	0x08025ee8
 8002a68:	08008845 	.word	0x08008845
 8002a6c:	20001598 	.word	0x20001598
 8002a70:	08025ef0 	.word	0x08025ef0
 8002a74:	0800c5e1 	.word	0x0800c5e1
    p_task->name = "Loop";
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <main+0x66c>)
 8002a7c:	601a      	str	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_INFO, "Task=%d Timer1ms=%d\n", pifTaskManager_Count(),
 8002a7e:	f011 feff 	bl	8014880 <pifTaskManager_Count>
 8002a82:	4604      	mov	r4, r0
 8002a84:	480e      	ldr	r0, [pc, #56]	; (8002ac0 <main+0x670>)
 8002a86:	f012 fb3c 	bl	8015102 <pifTimerManager_Count>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	490d      	ldr	r1, [pc, #52]	; (8002ac4 <main+0x674>)
 8002a90:	2002      	movs	r0, #2
 8002a92:	f010 fd0b 	bl	80134ac <pifLog_Printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002a96:	f011 fefd 	bl	8014894 <pifTaskManager_Loop>
 8002a9a:	e7fc      	b.n	8002a96 <main+0x646>
  }
  return 0;

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <main+0x678>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	4909      	ldr	r1, [pc, #36]	; (8002acc <main+0x67c>)
 8002aa6:	2004      	movs	r0, #4
 8002aa8:	f010 fd00 	bl	80134ac <pifLog_Printf>
	pifLog_SendAndExit();
 8002aac:	f010 fdc6 	bl	801363c <pifLog_SendAndExit>
#endif
  return -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3734      	adds	r7, #52	; 0x34
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	08025ed8 	.word	0x08025ed8
 8002ac0:	2000156c 	.word	0x2000156c
 8002ac4:	08025ef4 	.word	0x08025ef4
 8002ac8:	20001c55 	.word	0x20001c55
 8002acc:	08025f0c 	.word	0x08025f0c

08002ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b094      	sub	sp, #80	; 0x50
 8002ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad6:	f107 0320 	add.w	r3, r7, #32
 8002ada:	2230      	movs	r2, #48	; 0x30
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f020 faac 	bl	802303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <SystemClock_Config+0xcc>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <SystemClock_Config+0xcc>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <SystemClock_Config+0xcc>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <SystemClock_Config+0xd0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <SystemClock_Config+0xd0>)
 8002b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <SystemClock_Config+0xd0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b30:	2301      	movs	r3, #1
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002b34:	230d      	movs	r3, #13
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002b40:	2310      	movs	r3, #16
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b52:	f107 0320 	add.w	r3, r7, #32
 8002b56:	4618      	mov	r0, r3
 8002b58:	f01d fba0 	bl	802029c <HAL_RCC_OscConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b62:	f000 fb5f 	bl	8003224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b66:	230f      	movs	r3, #15
 8002b68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f01d fe02 	bl	802078c <HAL_RCC_ClockConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b8e:	f000 fb49 	bl	8003224 <Error_Handler>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3750      	adds	r7, #80	; 0x50
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000

08002ba4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bb8:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <MX_ADC1_Init+0xf0>)
 8002bba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002be6:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <MX_ADC1_Init+0xf4>)
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c04:	4822      	ldr	r0, [pc, #136]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002c06:	f019 f827 	bl	801bc58 <HAL_ADC_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c10:	f000 fb08 	bl	8003224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c14:	2306      	movs	r3, #6
 8002c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c20:	463b      	mov	r3, r7
 8002c22:	4619      	mov	r1, r3
 8002c24:	481a      	ldr	r0, [pc, #104]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002c26:	f019 f969 	bl	801befc <HAL_ADC_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c30:	f000 faf8 	bl	8003224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002c34:	2309      	movs	r3, #9
 8002c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002c42:	f019 f95b 	bl	801befc <HAL_ADC_ConfigChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002c4c:	f000 faea 	bl	8003224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002c50:	2307      	movs	r3, #7
 8002c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002c54:	2303      	movs	r3, #3
 8002c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c58:	463b      	mov	r3, r7
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002c5e:	f019 f94d 	bl	801befc <HAL_ADC_ConfigChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002c68:	f000 fadc 	bl	8003224 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002c70:	2304      	movs	r3, #4
 8002c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_ADC1_Init+0xec>)
 8002c7a:	f019 f93f 	bl	801befc <HAL_ADC_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002c84:	f000 face 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200004d4 	.word	0x200004d4
 8002c94:	40012000 	.word	0x40012000
 8002c98:	0f000001 	.word	0x0f000001

08002c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <MX_I2C1_Init+0x50>)
 8002ca2:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <MX_I2C1_Init+0x54>)
 8002ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <MX_I2C1_Init+0x50>)
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <MX_I2C1_Init+0x58>)
 8002caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <MX_I2C1_Init+0x50>)
 8002cda:	f01a fbb9 	bl	801d450 <HAL_I2C_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ce4:	f000 fa9e 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000057c 	.word	0x2000057c
 8002cf0:	40005400 	.word	0x40005400
 8002cf4:	00061a80 	.word	0x00061a80

08002cf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <MX_I2C2_Init+0x54>)
 8002d00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <MX_I2C2_Init+0x58>)
 8002d06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_I2C2_Init+0x50>)
 8002d36:	f01a fb8b 	bl	801d450 <HAL_I2C_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002d40:	f000 fa70 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200005d0 	.word	0x200005d0
 8002d4c:	40005800 	.word	0x40005800
 8002d50:	000186a0 	.word	0x000186a0

08002d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d7a:	2253      	movs	r2, #83	; 0x53
 8002d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d98:	4813      	ldr	r0, [pc, #76]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002d9a:	f01d ff17 	bl	8020bcc <HAL_TIM_Base_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002da4:	f000 fa3e 	bl	8003224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	4619      	mov	r1, r3
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002db6:	f01e fb45 	bl	8021444 <HAL_TIM_ConfigClockSource>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002dc0:	f000 fa30 	bl	8003224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dcc:	463b      	mov	r3, r7
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_TIM2_Init+0x94>)
 8002dd2:	f01e fefd 	bl	8021bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ddc:	f000 fa22 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002de0:	bf00      	nop
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200006e4 	.word	0x200006e4

08002dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08e      	sub	sp, #56	; 0x38
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
 8002e18:	615a      	str	r2, [r3, #20]
 8002e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e1e:	4a41      	ldr	r2, [pc, #260]	; (8002f24 <MX_TIM3_Init+0x138>)
 8002e20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e24:	2253      	movs	r2, #83	; 0x53
 8002e26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e30:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002e34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e42:	4837      	ldr	r0, [pc, #220]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e44:	f01d fec2 	bl	8020bcc <HAL_TIM_Base_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002e4e:	f000 f9e9 	bl	8003224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4830      	ldr	r0, [pc, #192]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e60:	f01e faf0 	bl	8021444 <HAL_TIM_ConfigClockSource>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002e6a:	f000 f9db 	bl	8003224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e6e:	482c      	ldr	r0, [pc, #176]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e70:	f01d fefb 	bl	8020c6a <HAL_TIM_PWM_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e7a:	f000 f9d3 	bl	8003224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4824      	ldr	r0, [pc, #144]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002e8e:	f01e fe9f 	bl	8021bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e98:	f000 f9c4 	bl	8003224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e9c:	2360      	movs	r3, #96	; 0x60
 8002e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	481a      	ldr	r0, [pc, #104]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002eb6:	f01e fa03 	bl	80212c0 <HAL_TIM_PWM_ConfigChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ec0:	f000 f9b0 	bl	8003224 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4815      	ldr	r0, [pc, #84]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002ecc:	f01e f9f8 	bl	80212c0 <HAL_TIM_PWM_ConfigChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002ed6:	f000 f9a5 	bl	8003224 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480e      	ldr	r0, [pc, #56]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002ee6:	f01e f9eb 	bl	80212c0 <HAL_TIM_PWM_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8002ef0:	f000 f998 	bl	8003224 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8002ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	220c      	movs	r2, #12
 8002efe:	4619      	mov	r1, r3
 8002f00:	4807      	ldr	r0, [pc, #28]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002f02:	f01e f9dd 	bl	80212c0 <HAL_TIM_PWM_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8002f0c:	f000 f98a 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <MX_TIM3_Init+0x134>)
 8002f12:	f000 fba3 	bl	800365c <HAL_TIM_MspPostInit>

}
 8002f16:	bf00      	nop
 8002f18:	3738      	adds	r7, #56	; 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	2000072c 	.word	0x2000072c
 8002f24:	40000400 	.word	0x40000400

08002f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <MX_USART1_UART_Init+0x50>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f5e:	4805      	ldr	r0, [pc, #20]	; (8002f74 <MX_USART1_UART_Init+0x4c>)
 8002f60:	f01e feb8 	bl	8021cd4 <HAL_UART_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f6a:	f000 f95b 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000774 	.word	0x20000774
 8002f78:	40011000 	.word	0x40011000

08002f7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <MX_USART2_UART_Init+0x50>)
 8002f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_USART2_UART_Init+0x4c>)
 8002fb4:	f01e fe8e 	bl	8021cd4 <HAL_UART_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fbe:	f000 f931 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200007b8 	.word	0x200007b8
 8002fcc:	40004400 	.word	0x40004400

08002fd0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <MX_USART6_UART_Init+0x50>)
 8002fd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002fe0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_USART6_UART_Init+0x4c>)
 8003008:	f01e fe64 	bl	8021cd4 <HAL_UART_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003012:	f000 f907 	bl	8003224 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200007fc 	.word	0x200007fc
 8003020:	40011400 	.word	0x40011400

08003024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <MX_DMA_Init+0x78>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a1a      	ldr	r2, [pc, #104]	; (800309c <MX_DMA_Init+0x78>)
 8003034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <MX_DMA_Init+0x78>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <MX_DMA_Init+0x78>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a13      	ldr	r2, [pc, #76]	; (800309c <MX_DMA_Init+0x78>)
 8003050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b11      	ldr	r3, [pc, #68]	; (800309c <MX_DMA_Init+0x78>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	200b      	movs	r0, #11
 8003068:	f019 faf7 	bl	801c65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800306c:	200b      	movs	r0, #11
 800306e:	f019 fb10 	bl	801c692 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	200c      	movs	r0, #12
 8003078:	f019 faef 	bl	801c65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800307c:	200c      	movs	r0, #12
 800307e:	f019 fb08 	bl	801c692 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	2038      	movs	r0, #56	; 0x38
 8003088:	f019 fae7 	bl	801c65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800308c:	2038      	movs	r0, #56	; 0x38
 800308e:	f019 fb00 	bl	801c692 <HAL_NVIC_EnableIRQ>

}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b56      	ldr	r3, [pc, #344]	; (8003214 <MX_GPIO_Init+0x174>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a55      	ldr	r2, [pc, #340]	; (8003214 <MX_GPIO_Init+0x174>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b53      	ldr	r3, [pc, #332]	; (8003214 <MX_GPIO_Init+0x174>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <MX_GPIO_Init+0x174>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a4e      	ldr	r2, [pc, #312]	; (8003214 <MX_GPIO_Init+0x174>)
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <MX_GPIO_Init+0x174>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <MX_GPIO_Init+0x174>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4a47      	ldr	r2, [pc, #284]	; (8003214 <MX_GPIO_Init+0x174>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
 80030fe:	4b45      	ldr	r3, [pc, #276]	; (8003214 <MX_GPIO_Init+0x174>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <MX_GPIO_Init+0x174>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a40      	ldr	r2, [pc, #256]	; (8003214 <MX_GPIO_Init+0x174>)
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b3e      	ldr	r3, [pc, #248]	; (8003214 <MX_GPIO_Init+0x174>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2131      	movs	r1, #49	; 0x31
 800312a:	483b      	ldr	r0, [pc, #236]	; (8003218 <MX_GPIO_Init+0x178>)
 800312c:	f01a f95e 	bl	801d3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	2120      	movs	r1, #32
 8003134:	4839      	ldr	r0, [pc, #228]	; (800321c <MX_GPIO_Init+0x17c>)
 8003136:	f01a f959 	bl	801d3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	2104      	movs	r1, #4
 800313e:	4838      	ldr	r0, [pc, #224]	; (8003220 <MX_GPIO_Init+0x180>)
 8003140:	f01a f954 	bl	801d3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800314a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	482f      	ldr	r0, [pc, #188]	; (8003218 <MX_GPIO_Init+0x178>)
 800315c:	f019 fede 	bl	801cf1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 8003160:	2331      	movs	r3, #49	; 0x31
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003164:	2301      	movs	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4619      	mov	r1, r3
 8003176:	4828      	ldr	r0, [pc, #160]	; (8003218 <MX_GPIO_Init+0x178>)
 8003178:	f019 fed0 	bl	801cf1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 800317c:	2302      	movs	r3, #2
 800317e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003180:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	4821      	ldr	r0, [pc, #132]	; (8003218 <MX_GPIO_Init+0x178>)
 8003192:	f019 fec3 	bl	801cf1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003196:	2320      	movs	r3, #32
 8003198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319a:	2301      	movs	r3, #1
 800319c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	481b      	ldr	r0, [pc, #108]	; (800321c <MX_GPIO_Init+0x17c>)
 80031ae:	f019 feb5 	bl	801cf1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80031b2:	2304      	movs	r3, #4
 80031b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4619      	mov	r1, r3
 80031c8:	4815      	ldr	r0, [pc, #84]	; (8003220 <MX_GPIO_Init+0x180>)
 80031ca:	f019 fea7 	bl	801cf1c <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 80031ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	480c      	ldr	r0, [pc, #48]	; (8003218 <MX_GPIO_Init+0x178>)
 80031e6:	f019 fe99 	bl	801cf1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	2007      	movs	r0, #7
 80031f0:	f019 fa33 	bl	801c65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031f4:	2007      	movs	r0, #7
 80031f6:	f019 fa4c 	bl	801c692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2028      	movs	r0, #40	; 0x28
 8003200:	f019 fa2b 	bl	801c65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003204:	2028      	movs	r0, #40	; 0x28
 8003206:	f019 fa44 	bl	801c692 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40020800 	.word	0x40020800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400

08003224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003228:	b672      	cpsid	i
}
 800322a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800322c:	e7fe      	b.n	800322c <Error_Handler+0x8>
	...

08003230 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_MspInit+0x4c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a0f      	ldr	r2, [pc, #60]	; (800327c <HAL_MspInit+0x4c>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <HAL_MspInit+0x4c>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_MspInit+0x4c>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_MspInit+0x4c>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_MspInit+0x4c>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800326e:	2007      	movs	r0, #7
 8003270:	f019 f9e8 	bl	801c644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <HAL_ADC_MspInit+0x144>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	f040 808c 	bne.w	80033bc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	4a46      	ldr	r2, [pc, #280]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b2:	6453      	str	r3, [r2, #68]	; 0x44
 80032b4:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a3f      	ldr	r2, [pc, #252]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6313      	str	r3, [r2, #48]	; 0x30
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_ADC_MspInit+0x148>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 8003314:	2304      	movs	r3, #4
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003318:	2303      	movs	r3, #3
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	4619      	mov	r1, r3
 8003326:	4829      	ldr	r0, [pc, #164]	; (80033cc <HAL_ADC_MspInit+0x14c>)
 8003328:	f019 fdf8 	bl	801cf1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003330:	2303      	movs	r3, #3
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	4824      	ldr	r0, [pc, #144]	; (80033d0 <HAL_ADC_MspInit+0x150>)
 8003340:	f019 fdec 	bl	801cf1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 8003344:	2302      	movs	r3, #2
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003348:	2303      	movs	r3, #3
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 031c 	add.w	r3, r7, #28
 8003354:	4619      	mov	r1, r3
 8003356:	481f      	ldr	r0, [pc, #124]	; (80033d4 <HAL_ADC_MspInit+0x154>)
 8003358:	f019 fde0 	bl	801cf1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_ADC_MspInit+0x15c>)
 8003360:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 8003364:	2200      	movs	r2, #0
 8003366:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 8003376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 800337e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003382:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 8003386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800338a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 800338e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003392:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 8003396:	2200      	movs	r2, #0
 8003398:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 800339c:	2200      	movs	r2, #0
 800339e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033a0:	480d      	ldr	r0, [pc, #52]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 80033a2:	f019 f99f 	bl	801c6e4 <HAL_DMA_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80033ac:	f7ff ff3a 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <HAL_ADC_MspInit+0x158>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033bc:	bf00      	nop
 80033be:	3730      	adds	r7, #48	; 0x30
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40012000 	.word	0x40012000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40020800 	.word	0x40020800
 80033d0:	40020000 	.word	0x40020000
 80033d4:	40020400 	.word	0x40020400
 80033d8:	2000051c 	.word	0x2000051c
 80033dc:	40026410 	.word	0x40026410

080033e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a71      	ldr	r2, [pc, #452]	; (80035c4 <HAL_I2C_MspInit+0x1e4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 8098 	bne.w	8003534 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4a6e      	ldr	r2, [pc, #440]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	6313      	str	r3, [r2, #48]	; 0x30
 8003414:	4b6c      	ldr	r3, [pc, #432]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003420:	23c0      	movs	r3, #192	; 0xc0
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003424:	2312      	movs	r3, #18
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342c:	2303      	movs	r3, #3
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003430:	2304      	movs	r3, #4
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4619      	mov	r1, r3
 800343a:	4864      	ldr	r0, [pc, #400]	; (80035cc <HAL_I2C_MspInit+0x1ec>)
 800343c:	f019 fd6e 	bl	801cf1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	4a5f      	ldr	r2, [pc, #380]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 800344a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800344e:	6413      	str	r3, [r2, #64]	; 0x40
 8003450:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800345c:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 800345e:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_I2C_MspInit+0x1f4>)
 8003460:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003468:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800346a:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003470:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003476:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800347c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003484:	4b52      	ldr	r3, [pc, #328]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003486:	2200      	movs	r2, #0
 8003488:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800348a:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003490:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003492:	2200      	movs	r2, #0
 8003494:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003496:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 8003498:	2200      	movs	r2, #0
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800349c:	484c      	ldr	r0, [pc, #304]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 800349e:	f019 f921 	bl	801c6e4 <HAL_DMA_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80034a8:	f7ff febc 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
 80034b2:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <HAL_I2C_MspInit+0x1f0>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80034b8:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034ba:	4a48      	ldr	r2, [pc, #288]	; (80035dc <HAL_I2C_MspInit+0x1fc>)
 80034bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80034be:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c4:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d8:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034da:	2200      	movs	r2, #0
 80034dc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034de:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034e4:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80034f6:	4838      	ldr	r0, [pc, #224]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 80034f8:	f019 f8f4 	bl	801c6e4 <HAL_DMA_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8003502:	f7ff fe8f 	bl	8003224 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a33      	ldr	r2, [pc, #204]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 800350a:	635a      	str	r2, [r3, #52]	; 0x34
 800350c:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_I2C_MspInit+0x1f8>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	201f      	movs	r0, #31
 8003518:	f019 f89f 	bl	801c65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800351c:	201f      	movs	r0, #31
 800351e:	f019 f8b8 	bl	801c692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	2020      	movs	r0, #32
 8003528:	f019 f897 	bl	801c65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800352c:	2020      	movs	r0, #32
 800352e:	f019 f8b0 	bl	801c692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003532:	e042      	b.n	80035ba <HAL_I2C_MspInit+0x1da>
  else if(hi2c->Instance==I2C2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_I2C_MspInit+0x200>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d13d      	bne.n	80035ba <HAL_I2C_MspInit+0x1da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800355e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003560:	2312      	movs	r3, #18
 8003562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003568:	2303      	movs	r3, #3
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800356c:	2304      	movs	r3, #4
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	4619      	mov	r1, r3
 8003576:	4815      	ldr	r0, [pc, #84]	; (80035cc <HAL_I2C_MspInit+0x1ec>)
 8003578:	f019 fcd0 	bl	801cf1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003582:	2312      	movs	r3, #18
 8003584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800358e:	2309      	movs	r3, #9
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	480c      	ldr	r0, [pc, #48]	; (80035cc <HAL_I2C_MspInit+0x1ec>)
 800359a:	f019 fcbf 	bl	801cf1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 80035a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_I2C_MspInit+0x1e8>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	bf00      	nop
 80035bc:	3730      	adds	r7, #48	; 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40005400 	.word	0x40005400
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020400 	.word	0x40020400
 80035d0:	20000624 	.word	0x20000624
 80035d4:	40026010 	.word	0x40026010
 80035d8:	20000684 	.word	0x20000684
 80035dc:	40026028 	.word	0x40026028
 80035e0:	40005800 	.word	0x40005800

080035e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003612:	e01a      	b.n	800364a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <HAL_TIM_Base_MspInit+0x74>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d115      	bne.n	800364a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_TIM_Base_MspInit+0x70>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	201d      	movs	r0, #29
 8003640:	f019 f80b 	bl	801c65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003644:	201d      	movs	r0, #29
 8003646:	f019 f824 	bl	801c692 <HAL_NVIC_EnableIRQ>
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40000400 	.word	0x40000400

0800365c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_TIM_MspPostInit+0xa4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d13c      	bne.n	80036f8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_TIM_MspPostInit+0xa8>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_TIM_MspPostInit+0xa8>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_TIM_MspPostInit+0xa8>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_TIM_MspPostInit+0xa8>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_TIM_MspPostInit+0xa8>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_TIM_MspPostInit+0xa8>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036b6:	2301      	movs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036c6:	2302      	movs	r3, #2
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <HAL_TIM_MspPostInit+0xac>)
 80036d2:	f019 fc23 	bl	801cf1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80036d6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e4:	2300      	movs	r3, #0
 80036e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036e8:	2302      	movs	r3, #2
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4619      	mov	r1, r3
 80036f2:	4806      	ldr	r0, [pc, #24]	; (800370c <HAL_TIM_MspPostInit+0xb0>)
 80036f4:	f019 fc12 	bl	801cf1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036f8:	bf00      	nop
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40000400 	.word	0x40000400
 8003704:	40023800 	.word	0x40023800
 8003708:	40020400 	.word	0x40020400
 800370c:	40020800 	.word	0x40020800

08003710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	; 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a58      	ldr	r2, [pc, #352]	; (8003890 <HAL_UART_MspInit+0x180>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d135      	bne.n	800379e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a56      	ldr	r2, [pc, #344]	; (8003894 <HAL_UART_MspInit+0x184>)
 800373c:	f043 0310 	orr.w	r3, r3, #16
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	4b50      	ldr	r3, [pc, #320]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a4f      	ldr	r2, [pc, #316]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800376a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800377c:	2307      	movs	r3, #7
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003784:	4619      	mov	r1, r3
 8003786:	4844      	ldr	r0, [pc, #272]	; (8003898 <HAL_UART_MspInit+0x188>)
 8003788:	f019 fbc8 	bl	801cf1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	2025      	movs	r0, #37	; 0x25
 8003792:	f018 ff62 	bl	801c65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003796:	2025      	movs	r0, #37	; 0x25
 8003798:	f018 ff7b 	bl	801c692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800379c:	e073      	b.n	8003886 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3e      	ldr	r2, [pc, #248]	; (800389c <HAL_UART_MspInit+0x18c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d134      	bne.n	8003812 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_UART_MspInit+0x184>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_UART_MspInit+0x184>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	6413      	str	r3, [r2, #64]	; 0x40
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <HAL_UART_MspInit+0x184>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_UART_MspInit+0x184>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a31      	ldr	r2, [pc, #196]	; (8003894 <HAL_UART_MspInit+0x184>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6313      	str	r3, [r2, #48]	; 0x30
 80037d4:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_UART_MspInit+0x184>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037e0:	230c      	movs	r3, #12
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037f0:	2307      	movs	r3, #7
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	4619      	mov	r1, r3
 80037fa:	4827      	ldr	r0, [pc, #156]	; (8003898 <HAL_UART_MspInit+0x188>)
 80037fc:	f019 fb8e 	bl	801cf1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2026      	movs	r0, #38	; 0x26
 8003806:	f018 ff28 	bl	801c65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800380a:	2026      	movs	r0, #38	; 0x26
 800380c:	f018 ff41 	bl	801c692 <HAL_NVIC_EnableIRQ>
}
 8003810:	e039      	b.n	8003886 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_UART_MspInit+0x190>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d134      	bne.n	8003886 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003826:	f043 0320 	orr.w	r3, r3, #32
 800382a:	6453      	str	r3, [r2, #68]	; 0x44
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_UART_MspInit+0x184>)
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_UART_MspInit+0x184>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <HAL_UART_MspInit+0x184>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6313      	str	r3, [r2, #48]	; 0x30
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_UART_MspInit+0x184>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003854:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003862:	2303      	movs	r3, #3
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003866:	2308      	movs	r3, #8
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386e:	4619      	mov	r1, r3
 8003870:	4809      	ldr	r0, [pc, #36]	; (8003898 <HAL_UART_MspInit+0x188>)
 8003872:	f019 fb53 	bl	801cf1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	2047      	movs	r0, #71	; 0x47
 800387c:	f018 feed 	bl	801c65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003880:	2047      	movs	r0, #71	; 0x47
 8003882:	f018 ff06 	bl	801c692 <HAL_NVIC_EnableIRQ>
}
 8003886:	bf00      	nop
 8003888:	3738      	adds	r7, #56	; 0x38
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40011000 	.word	0x40011000
 8003894:	40023800 	.word	0x40023800
 8003898:	40020000 	.word	0x40020000
 800389c:	40004400 	.word	0x40004400
 80038a0:	40011400 	.word	0x40011400

080038a4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_UART_MspDeInit+0x84>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10e      	bne.n	80038d4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_UART_MspDeInit+0x88>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_UART_MspDeInit+0x88>)
 80038bc:	f023 0310 	bic.w	r3, r3, #16
 80038c0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80038c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038c6:	481a      	ldr	r0, [pc, #104]	; (8003930 <HAL_UART_MspDeInit+0x8c>)
 80038c8:	f019 fcac 	bl	801d224 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80038cc:	2025      	movs	r0, #37	; 0x25
 80038ce:	f018 feee 	bl	801c6ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80038d2:	e025      	b.n	8003920 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a16      	ldr	r2, [pc, #88]	; (8003934 <HAL_UART_MspDeInit+0x90>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_UART_MspDeInit+0x88>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <HAL_UART_MspDeInit+0x88>)
 80038e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 80038ea:	210c      	movs	r1, #12
 80038ec:	4810      	ldr	r0, [pc, #64]	; (8003930 <HAL_UART_MspDeInit+0x8c>)
 80038ee:	f019 fc99 	bl	801d224 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80038f2:	2026      	movs	r0, #38	; 0x26
 80038f4:	f018 fedb 	bl	801c6ae <HAL_NVIC_DisableIRQ>
}
 80038f8:	e012      	b.n	8003920 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_UART_MspDeInit+0x94>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d10d      	bne.n	8003920 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_UART_MspDeInit+0x88>)
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <HAL_UART_MspDeInit+0x88>)
 800390a:	f023 0320 	bic.w	r3, r3, #32
 800390e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003910:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003914:	4806      	ldr	r0, [pc, #24]	; (8003930 <HAL_UART_MspDeInit+0x8c>)
 8003916:	f019 fc85 	bl	801d224 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800391a:	2047      	movs	r0, #71	; 0x47
 800391c:	f018 fec7 	bl	801c6ae <HAL_NVIC_DisableIRQ>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40011000 	.word	0x40011000
 800392c:	40023800 	.word	0x40023800
 8003930:	40020000 	.word	0x40020000
 8003934:	40004400 	.word	0x40004400
 8003938:	40011400 	.word	0x40011400

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <NMI_Handler+0x4>

08003942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003946:	e7fe      	b.n	8003946 <HardFault_Handler+0x4>

08003948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800394c:	e7fe      	b.n	800394c <MemManage_Handler+0x4>

0800394e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003952:	e7fe      	b.n	8003952 <BusFault_Handler+0x4>

08003954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <UsageFault_Handler+0x4>

0800395a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003988:	f00d fb2e 	bl	8010fe8 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 800398c:	4803      	ldr	r0, [pc, #12]	; (800399c <SysTick_Handler+0x18>)
 800398e:	f011 fc1c 	bl	80151ca <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003992:	f018 f941 	bl	801bc18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000156c 	.word	0x2000156c

080039a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 80039a4:	2002      	movs	r0, #2
 80039a6:	f019 fd3b 	bl	801d420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <DMA1_Stream0_IRQHandler+0x10>)
 80039b6:	f019 f82d 	bl	801ca14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000624 	.word	0x20000624

080039c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <DMA1_Stream1_IRQHandler+0x10>)
 80039ca:	f019 f823 	bl	801ca14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000684 	.word	0x20000684

080039d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <TIM3_IRQHandler+0x10>)
 80039de:	f01d fb67 	bl	80210b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	2000072c 	.word	0x2000072c

080039ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <I2C1_EV_IRQHandler+0x10>)
 80039f2:	f01a fbc9 	bl	801e188 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	2000057c 	.word	0x2000057c

08003a00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <I2C1_ER_IRQHandler+0x10>)
 8003a06:	f01a fd30 	bl	801e46a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000057c 	.word	0x2000057c

08003a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <USART1_IRQHandler+0x10>)
 8003a1a:	f01e fb61 	bl	80220e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000774 	.word	0x20000774

08003a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <USART2_IRQHandler+0x10>)
 8003a2e:	f01e fb57 	bl	80220e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200007b8 	.word	0x200007b8

08003a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003a40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a44:	f019 fcec 	bl	801d420 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003a48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a4c:	f019 fce8 	bl	801d420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <DMA2_Stream0_IRQHandler+0x10>)
 8003a5a:	f018 ffdb 	bl	801ca14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000051c 	.word	0x2000051c

08003a68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <USART6_IRQHandler+0x10>)
 8003a6e:	f01e fb37 	bl	80220e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200007fc 	.word	0x200007fc

08003a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <_sbrk+0x5c>)
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <_sbrk+0x60>)
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <_sbrk+0x64>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_sbrk+0x64>)
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <_sbrk+0x68>)
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <_sbrk+0x64>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d207      	bcs.n	8003abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aac:	f01f fa7e 	bl	8022fac <__errno>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	e009      	b.n	8003ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <_sbrk+0x64>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <_sbrk+0x64>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <_sbrk+0x64>)
 8003acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20020000 	.word	0x20020000
 8003adc:	00000400 	.word	0x00000400
 8003ae0:	20000864 	.word	0x20000864
 8003ae4:	20001e00 	.word	0x20001e00

08003ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <SystemInit+0x20>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <SystemInit+0x20>)
 8003af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	da01      	bge.n	8003b24 <constrain+0x18>
        return low;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	e006      	b.n	8003b32 <constrain+0x26>
    else if (amt > high)
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	dd01      	ble.n	8003b30 <constrain+0x24>
        return high;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	e000      	b.n	8003b32 <constrain+0x26>
    else
        return amt;
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	; 0x38
 8003b44:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003b46:	4b8a      	ldr	r3, [pc, #552]	; (8003d70 <initBoardAlignment+0x230>)
 8003b48:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <initBoardAlignment+0x26>
 8003b50:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <initBoardAlignment+0x230>)
 8003b52:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <initBoardAlignment+0x26>
 8003b5a:	4b85      	ldr	r3, [pc, #532]	; (8003d70 <initBoardAlignment+0x230>)
 8003b5c:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80fd 	beq.w	8003d60 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003b66:	4b83      	ldr	r3, [pc, #524]	; (8003d74 <initBoardAlignment+0x234>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003b6c:	4b80      	ldr	r3, [pc, #512]	; (8003d70 <initBoardAlignment+0x230>)
 8003b6e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fc8a 	bl	800048c <__aeabi_i2d>
 8003b78:	a37b      	add	r3, pc, #492	; (adr r3, 8003d68 <initBoardAlignment+0x228>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f7fc fcef 	bl	8000560 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <initBoardAlignment+0x238>)
 8003b90:	f7fc fe10 	bl	80007b4 <__aeabi_ddiv>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fc ffc2 	bl	8000b24 <__aeabi_d2f>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003ba4:	4b72      	ldr	r3, [pc, #456]	; (8003d70 <initBoardAlignment+0x230>)
 8003ba6:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fc6e 	bl	800048c <__aeabi_i2d>
 8003bb0:	a36d      	add	r3, pc, #436	; (adr r3, 8003d68 <initBoardAlignment+0x228>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	f7fc fcd3 	bl	8000560 <__aeabi_dmul>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <initBoardAlignment+0x238>)
 8003bc8:	f7fc fdf4 	bl	80007b4 <__aeabi_ddiv>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc ffa6 	bl	8000b24 <__aeabi_d2f>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003bdc:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <initBoardAlignment+0x230>)
 8003bde:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fc52 	bl	800048c <__aeabi_i2d>
 8003be8:	a35f      	add	r3, pc, #380	; (adr r3, 8003d68 <initBoardAlignment+0x228>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc fcb7 	bl	8000560 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <initBoardAlignment+0x238>)
 8003c00:	f7fc fdd8 	bl	80007b4 <__aeabi_ddiv>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f7fc ff8a 	bl	8000b24 <__aeabi_d2f>
 8003c10:	4603      	mov	r3, r0
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003c14:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003c18:	f01f fcee 	bl	80235f8 <cosf>
 8003c1c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003c20:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003c24:	f01f fd6c 	bl	8023700 <sinf>
 8003c28:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003c2c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003c30:	f01f fce2 	bl	80235f8 <cosf>
 8003c34:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003c38:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003c3c:	f01f fd60 	bl	8023700 <sinf>
 8003c40:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003c44:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003c48:	f01f fcd6 	bl	80235f8 <cosf>
 8003c4c:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003c50:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003c54:	f01f fd54 	bl	8023700 <sinf>
 8003c58:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003c5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c70:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c78:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003c7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c88:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003c8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c98:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003c9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca8:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003cac:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <initBoardAlignment+0x23c>)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003cb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cb6:	eeb1 7a67 	vneg.f32	s14, s15
 8003cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <initBoardAlignment+0x23c>)
 8003cc4:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <initBoardAlignment+0x23c>)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003cce:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce2:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <initBoardAlignment+0x23c>)
 8003ce4:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003ce8:	ed97 7a00 	vldr	s14, [r7]
 8003cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <initBoardAlignment+0x23c>)
 8003cfe:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003d02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d06:	eeb1 7a67 	vneg.f32	s14, s15
 8003d0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <initBoardAlignment+0x23c>)
 8003d14:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003d18:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	ed97 7a00 	vldr	s14, [r7]
 8003d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <initBoardAlignment+0x23c>)
 8003d2e:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003d32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <initBoardAlignment+0x23c>)
 8003d48:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003d4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003d50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <initBoardAlignment+0x23c>)
 8003d5a:	edc3 7a08 	vstr	s15, [r3, #32]
 8003d5e:	e000      	b.n	8003d62 <initBoardAlignment+0x222>
        return;
 8003d60:	bf00      	nop
}
 8003d62:	3738      	adds	r7, #56	; 0x38
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	54442d18 	.word	0x54442d18
 8003d6c:	400921fb 	.word	0x400921fb
 8003d70:	200008f8 	.word	0x200008f8
 8003d74:	20000024 	.word	0x20000024
 8003d78:	40668000 	.word	0x40668000
 8003d7c:	20000868 	.word	0x20000868

08003d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d84:	480d      	ldr	r0, [pc, #52]	; (8003dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d86:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d88:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d8c:	e002      	b.n	8003d94 <LoopCopyDataInit>

08003d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d92:	3304      	adds	r3, #4

08003d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d98:	d3f9      	bcc.n	8003d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d9a:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d9c:	4c0b      	ldr	r4, [pc, #44]	; (8003dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da0:	e001      	b.n	8003da6 <LoopFillZerobss>

08003da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da4:	3204      	adds	r2, #4

08003da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003da8:	d3fb      	bcc.n	8003da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003daa:	f7ff fe9d 	bl	8003ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dae:	f01f f903 	bl	8022fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003db2:	f7fe fb4d 	bl	8002450 <main>
  bx  lr    
 8003db6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc0:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8003dc4:	08029e08 	.word	0x08029e08
  ldr r2, =_sbss
 8003dc8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8003dcc:	20001e00 	.word	0x20001e00

08003dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd0:	e7fe      	b.n	8003dd0 <ADC_IRQHandler>
	...

08003dd4 <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <_evtBuzzerFinish+0x1c>)
 8003de0:	220d      	movs	r2, #13
 8003de2:	701a      	strb	r2, [r3, #0]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000025 	.word	0x20000025

08003df4 <buzzerInit>:

bool buzzerInit()
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <buzzerInit+0x28>)
 8003dfa:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003dfe:	4808      	ldr	r0, [pc, #32]	; (8003e20 <buzzerInit+0x2c>)
 8003e00:	f016 ff78 	bl	801acf4 <pifBuzzer_Init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <buzzerInit+0x1a>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e003      	b.n	8003e16 <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <buzzerInit+0x2c>)
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <buzzerInit+0x30>)
 8003e12:	601a      	str	r2, [r3, #0]
    return true;
 8003e14:	2301      	movs	r3, #1
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08001dad 	.word	0x08001dad
 8003e20:	200008a4 	.word	0x200008a4
 8003e24:	08003dd5 	.word	0x08003dd5

08003e28 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8003e36:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <buzzer+0x198>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	79fa      	ldrb	r2, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	f080 80b7 	bcs.w	8003fb0 <buzzer+0x188>
        return;

    switch (mode) {
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f200 80b5 	bhi.w	8003fb4 <buzzer+0x18c>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <buzzer+0x28>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003f03 	.word	0x08003f03
 8003e58:	08003ef3 	.word	0x08003ef3
 8003e5c:	08003ee3 	.word	0x08003ee3
 8003e60:	08003f13 	.word	0x08003f13
 8003e64:	08003eb3 	.word	0x08003eb3
 8003e68:	08003eb3 	.word	0x08003eb3
 8003e6c:	08003f23 	.word	0x08003f23
 8003e70:	08003f33 	.word	0x08003f33
 8003e74:	08003f13 	.word	0x08003f13
 8003e78:	08003ec3 	.word	0x08003ec3
 8003e7c:	08003ed3 	.word	0x08003ed3
 8003e80:	08003e93 	.word	0x08003e93
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8003e84:	4b4e      	ldr	r3, [pc, #312]	; (8003fc0 <buzzer+0x198>)
 8003e86:	220d      	movs	r2, #13
 8003e88:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 8003e8a:	484e      	ldr	r0, [pc, #312]	; (8003fc4 <buzzer+0x19c>)
 8003e8c:	f016 ff9e 	bl	801adcc <pifBuzzer_Stop>
            break;
 8003e90:	e093      	b.n	8003fba <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8003e92:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <buzzer+0x1a0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 808e 	bne.w	8003fb8 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 8003e9c:	494b      	ldr	r1, [pc, #300]	; (8003fcc <buzzer+0x1a4>)
 8003e9e:	4849      	ldr	r0, [pc, #292]	; (8003fc4 <buzzer+0x19c>)
 8003ea0:	f016 ff72 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ea4:	4a46      	ldr	r2, [pc, #280]	; (8003fc0 <buzzer+0x198>)
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <buzzer+0x1a0>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	701a      	strb	r2, [r3, #0]
            break;
 8003eb0:	e083      	b.n	8003fba <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8003eb2:	4947      	ldr	r1, [pc, #284]	; (8003fd0 <buzzer+0x1a8>)
 8003eb4:	4843      	ldr	r0, [pc, #268]	; (8003fc4 <buzzer+0x19c>)
 8003eb6:	f016 ff67 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003eba:	4a41      	ldr	r2, [pc, #260]	; (8003fc0 <buzzer+0x198>)
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	7013      	strb	r3, [r2, #0]
            break;
 8003ec0:	e07b      	b.n	8003fba <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8003ec2:	4944      	ldr	r1, [pc, #272]	; (8003fd4 <buzzer+0x1ac>)
 8003ec4:	483f      	ldr	r0, [pc, #252]	; (8003fc4 <buzzer+0x19c>)
 8003ec6:	f016 ff5f 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003eca:	4a3d      	ldr	r2, [pc, #244]	; (8003fc0 <buzzer+0x198>)
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	7013      	strb	r3, [r2, #0]
            break;
 8003ed0:	e073      	b.n	8003fba <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 8003ed2:	4941      	ldr	r1, [pc, #260]	; (8003fd8 <buzzer+0x1b0>)
 8003ed4:	483b      	ldr	r0, [pc, #236]	; (8003fc4 <buzzer+0x19c>)
 8003ed6:	f016 ff57 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <buzzer+0x198>)
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	7013      	strb	r3, [r2, #0]
            break;
 8003ee0:	e06b      	b.n	8003fba <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 8003ee2:	493e      	ldr	r1, [pc, #248]	; (8003fdc <buzzer+0x1b4>)
 8003ee4:	4837      	ldr	r0, [pc, #220]	; (8003fc4 <buzzer+0x19c>)
 8003ee6:	f016 ff4f 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003eea:	4a35      	ldr	r2, [pc, #212]	; (8003fc0 <buzzer+0x198>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	7013      	strb	r3, [r2, #0]
            break;
 8003ef0:	e063      	b.n	8003fba <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 8003ef2:	493b      	ldr	r1, [pc, #236]	; (8003fe0 <buzzer+0x1b8>)
 8003ef4:	4833      	ldr	r0, [pc, #204]	; (8003fc4 <buzzer+0x19c>)
 8003ef6:	f016 ff47 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003efa:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <buzzer+0x198>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	7013      	strb	r3, [r2, #0]
            break;
 8003f00:	e05b      	b.n	8003fba <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 8003f02:	4938      	ldr	r1, [pc, #224]	; (8003fe4 <buzzer+0x1bc>)
 8003f04:	482f      	ldr	r0, [pc, #188]	; (8003fc4 <buzzer+0x19c>)
 8003f06:	f016 ff3f 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f0a:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <buzzer+0x198>)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	7013      	strb	r3, [r2, #0]
            break;
 8003f10:	e053      	b.n	8003fba <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 8003f12:	4935      	ldr	r1, [pc, #212]	; (8003fe8 <buzzer+0x1c0>)
 8003f14:	482b      	ldr	r0, [pc, #172]	; (8003fc4 <buzzer+0x19c>)
 8003f16:	f016 ff37 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f1a:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <buzzer+0x198>)
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	7013      	strb	r3, [r2, #0]
            break;
 8003f20:	e04b      	b.n	8003fba <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 8003f22:	4932      	ldr	r1, [pc, #200]	; (8003fec <buzzer+0x1c4>)
 8003f24:	4827      	ldr	r0, [pc, #156]	; (8003fc4 <buzzer+0x19c>)
 8003f26:	f016 ff2f 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <buzzer+0x198>)
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	7013      	strb	r3, [r2, #0]
            break;
 8003f30:	e043      	b.n	8003fba <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8003f32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f36:	f002 ff4b 	bl	8006dd0 <feature>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02f      	beq.n	8003fa0 <buzzer+0x178>
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <buzzer+0x1c8>)
 8003f42:	7adb      	ldrb	r3, [r3, #11]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02b      	beq.n	8003fa0 <buzzer+0x178>
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <buzzer+0x1cc>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d927      	bls.n	8003fa0 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <buzzer+0x1d0>)
 8003f54:	2105      	movs	r1, #5
 8003f56:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <buzzer+0x1d0>)
 8003f5e:	210f      	movs	r1, #15
 8003f60:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3302      	adds	r3, #2
 8003f66:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b13      	cmp	r3, #19
 8003f6c:	d806      	bhi.n	8003f7c <buzzer+0x154>
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <buzzer+0x1cc>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d3e9      	bcc.n	8003f50 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <buzzer+0x1d0>)
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <buzzer+0x1d0>)
 8003f8c:	21f0      	movs	r1, #240	; 0xf0
 8003f8e:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8003f90:	4919      	ldr	r1, [pc, #100]	; (8003ff8 <buzzer+0x1d0>)
 8003f92:	480c      	ldr	r0, [pc, #48]	; (8003fc4 <buzzer+0x19c>)
 8003f94:	f016 fef8 	bl	801ad88 <pifBuzzer_Start>
                buzzerMode = mode;
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <buzzer+0x198>)
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	7013      	strb	r3, [r2, #0]
                break;
 8003f9e:	e00c      	b.n	8003fba <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 8003fa0:	4916      	ldr	r1, [pc, #88]	; (8003ffc <buzzer+0x1d4>)
 8003fa2:	4808      	ldr	r0, [pc, #32]	; (8003fc4 <buzzer+0x19c>)
 8003fa4:	f016 fef0 	bl	801ad88 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fa8:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <buzzer+0x198>)
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	7013      	strb	r3, [r2, #0]
            break;
 8003fae:	e004      	b.n	8003fba <buzzer+0x192>
        return;
 8003fb0:	bf00      	nop
 8003fb2:	e002      	b.n	8003fba <buzzer+0x192>

        default:
            return;
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <buzzer+0x192>
                return;
 8003fb8:	bf00      	nop
    }
}
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000025 	.word	0x20000025
 8003fc4:	200008a4 	.word	0x200008a4
 8003fc8:	200008a2 	.word	0x200008a2
 8003fcc:	08028000 	.word	0x08028000
 8003fd0:	08027fd4 	.word	0x08027fd4
 8003fd4:	08028010 	.word	0x08028010
 8003fd8:	08028018 	.word	0x08028018
 8003fdc:	08027fe0 	.word	0x08027fe0
 8003fe0:	08027fdc 	.word	0x08027fdc
 8003fe4:	08027fd0 	.word	0x08027fd0
 8003fe8:	08027fd8 	.word	0x08027fd8
 8003fec:	08027ff4 	.word	0x08027ff4
 8003ff0:	20001738 	.word	0x20001738
 8003ff4:	2000181c 	.word	0x2000181c
 8003ff8:	2000088c 	.word	0x2000088c
 8003ffc:	08027fcc 	.word	0x08027fcc

08004000 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <buzzerUpdate+0x20>)
 8004006:	7b5b      	ldrb	r3, [r3, #13]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <buzzerUpdate+0x24>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d902      	bls.n	800401a <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 8004014:	2008      	movs	r0, #8
 8004016:	f7ff ff07 	bl	8003e28 <buzzer>
    }
}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200017d8 	.word	0x200017d8
 8004024:	20000025 	.word	0x20000025

08004028 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d309      	bcc.n	8004050 <i2a+0x28>
        a = i2a(i / r, a, r);
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ffed 	bl	8004028 <i2a>
 800404e:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	fbb3 f2f2 	udiv	r2, r3, r2
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	fb01 f202 	mul.w	r2, r1, r2
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	4a04      	ldr	r2, [pc, #16]	; (8004074 <i2a+0x4c>)
 8004062:	5cd2      	ldrb	r2, [r2, r3]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3301      	adds	r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	08026c14 	.word	0x08026c14

08004078 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	dd02      	ble.n	8004090 <itoa+0x18>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b24      	cmp	r3, #36	; 0x24
 800408e:	dd01      	ble.n	8004094 <itoa+0x1c>
        r = 10;
 8004090:	230a      	movs	r3, #10
 8004092:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	da0e      	bge.n	80040b8 <itoa+0x40>
        *a = '-';
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	222d      	movs	r2, #45	; 0x2d
 800409e:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4258      	negs	r0, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3301      	adds	r3, #1
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7ff ffbc 	bl	8004028 <i2a>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e008      	b.n	80040ca <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ffb2 	bl	8004028 <i2a>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
    return a;
 80040ca:	68bb      	ldr	r3, [r7, #8]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
    int frac = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 80040e0:	e002      	b.n	80040e8 <_atof+0x14>
        p += 1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3301      	adds	r3, #1
 80040e6:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d0f8      	beq.n	80040e2 <_atof+0xe>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d0f4      	beq.n	80040e2 <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80040f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040fc:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b2d      	cmp	r3, #45	; 0x2d
 8004104:	d105      	bne.n	8004112 <_atof+0x3e>
        sign = -1.0f;
 8004106:	4b6a      	ldr	r3, [pc, #424]	; (80042b0 <_atof+0x1dc>)
 8004108:	61bb      	str	r3, [r7, #24]
        p += 1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3301      	adds	r3, #1
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	e006      	b.n	8004120 <_atof+0x4c>

    } else if (*p == '+') {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b2b      	cmp	r3, #43	; 0x2b
 8004118:	d102      	bne.n	8004120 <_atof+0x4c>
        p += 1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3301      	adds	r3, #1
 800411e:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 8004126:	e013      	b.n	8004150 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 8004128:	edd7 7a05 	vldr	s15, [r7, #20]
 800412c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	3b30      	subs	r3, #48	; 0x30
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004146:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3301      	adds	r3, #1
 800414e:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b2f      	cmp	r3, #47	; 0x2f
 8004156:	d903      	bls.n	8004160 <_atof+0x8c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b39      	cmp	r3, #57	; 0x39
 800415e:	d9e3      	bls.n	8004128 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b2e      	cmp	r3, #46	; 0x2e
 8004166:	d129      	bne.n	80041bc <_atof+0xe8>
        float pow10 = 10.0f;
 8004168:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <_atof+0x1e0>)
 800416a:	60fb      	str	r3, [r7, #12]
        p += 1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 8004172:	e01b      	b.n	80041ac <_atof+0xd8>
            value += (*p - '0') / pow10;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	3b30      	subs	r3, #48	; 0x30
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004182:	ed97 7a03 	vldr	s14, [r7, #12]
 8004186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800418a:	ed97 7a05 	vldr	s14, [r7, #20]
 800418e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004192:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 8004196:	edd7 7a03 	vldr	s15, [r7, #12]
 800419a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800419e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a2:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3301      	adds	r3, #1
 80041aa:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b2f      	cmp	r3, #47	; 0x2f
 80041b2:	d903      	bls.n	80041bc <_atof+0xe8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b39      	cmp	r3, #57	; 0x39
 80041ba:	d9db      	bls.n	8004174 <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 80041bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041c0:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b65      	cmp	r3, #101	; 0x65
 80041c8:	d003      	beq.n	80041d2 <_atof+0xfe>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b45      	cmp	r3, #69	; 0x45
 80041d0:	d153      	bne.n	800427a <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3301      	adds	r3, #1
 80041d6:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b2d      	cmp	r3, #45	; 0x2d
 80041e2:	d105      	bne.n	80041f0 <_atof+0x11c>
            frac = 1;
 80041e4:	2301      	movs	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
            p += 1;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3301      	adds	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	e006      	b.n	80041fe <_atof+0x12a>

        } else if (*p == '+') {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b2b      	cmp	r3, #43	; 0x2b
 80041f6:	d102      	bne.n	80041fe <_atof+0x12a>
            p += 1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3301      	adds	r3, #1
 80041fc:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 8004202:	e00d      	b.n	8004220 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4413      	add	r3, r2
 8004216:	3b30      	subs	r3, #48	; 0x30
 8004218:	60bb      	str	r3, [r7, #8]
            p += 1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3301      	adds	r3, #1
 800421e:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b2f      	cmp	r3, #47	; 0x2f
 8004226:	d903      	bls.n	8004230 <_atof+0x15c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b39      	cmp	r3, #57	; 0x39
 800422e:	d9e9      	bls.n	8004204 <_atof+0x130>
        }
        if (expon > 308)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004236:	d90e      	bls.n	8004256 <_atof+0x182>
            expon = 308;
 8004238:	f44f 739a 	mov.w	r3, #308	; 0x134
 800423c:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 800423e:	e00a      	b.n	8004256 <_atof+0x182>
            scale *= 1E8f;
 8004240:	edd7 7a04 	vldr	s15, [r7, #16]
 8004244:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80042b8 <_atof+0x1e4>
 8004248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424c:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	3b08      	subs	r3, #8
 8004254:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b07      	cmp	r3, #7
 800425a:	d8f1      	bhi.n	8004240 <_atof+0x16c>
        }
        while (expon >   0) {
 800425c:	e00a      	b.n	8004274 <_atof+0x1a0>
            scale *= 10.0f;
 800425e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004262:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800426a:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3b01      	subs	r3, #1
 8004272:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f1      	bne.n	800425e <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <_atof+0x1ba>
 8004280:	edd7 6a05 	vldr	s13, [r7, #20]
 8004284:	ed97 7a04 	vldr	s14, [r7, #16]
 8004288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800428c:	e005      	b.n	800429a <_atof+0x1c6>
 800428e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004292:	edd7 7a04 	vldr	s15, [r7, #16]
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	ed97 7a06 	vldr	s14, [r7, #24]
 800429e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80042a2:	eeb0 0a67 	vmov.f32	s0, s15
 80042a6:	3724      	adds	r7, #36	; 0x24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	bf800000 	.word	0xbf800000
 80042b4:	41200000 	.word	0x41200000
 80042b8:	4cbebc20 	.word	0x4cbebc20

080042bc <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80042c6:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	f107 0310 	add.w	r3, r7, #16
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 80042d6:	4b54      	ldr	r3, [pc, #336]	; (8004428 <ftoa+0x16c>)
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 80042da:	edd7 7a01 	vldr	s15, [r7, #4]
 80042de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	dd08      	ble.n	80042fa <ftoa+0x3e>
        x += 0.0005f;
 80042e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042ec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800442c <ftoa+0x170>
 80042f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80042f8:	e007      	b.n	800430a <ftoa+0x4e>
    else
        x -= 0.0005f;
 80042fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80042fe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800442c <ftoa+0x170>
 8004302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004306:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 800430a:	edd7 7a01 	vldr	s15, [r7, #4]
 800430e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004430 <ftoa+0x174>
 8004312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800431a:	ee17 3a90 	vmov	r3, s15
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	bfb8      	it	lt
 8004326:	425b      	neglt	r3, r3
 8004328:	f107 0118 	add.w	r1, r7, #24
 800432c:	220a      	movs	r2, #10
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fea2 	bl	8004078 <itoa>

    if (value >= 0)
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	db02      	blt.n	8004340 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 800433a:	2320      	movs	r3, #32
 800433c:	733b      	strb	r3, [r7, #12]
 800433e:	e001      	b.n	8004344 <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004340:	232d      	movs	r3, #45	; 0x2d
 8004342:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 8004344:	f107 0318 	add.w	r3, r7, #24
 8004348:	4618      	mov	r0, r3
 800434a:	f7fb ff45 	bl	80001d8 <strlen>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d10e      	bne.n	8004372 <ftoa+0xb6>
        intString2[1] = '0';
 8004354:	2330      	movs	r3, #48	; 0x30
 8004356:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004358:	2330      	movs	r3, #48	; 0x30
 800435a:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 800435c:	2330      	movs	r3, #48	; 0x30
 800435e:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004360:	f107 0218 	add.w	r2, r7, #24
 8004364:	f107 030c 	add.w	r3, r7, #12
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f01e ff8e 	bl	802328c <strcat>
 8004370:	e02f      	b.n	80043d2 <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 8004372:	f107 0318 	add.w	r3, r7, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7fb ff2e 	bl	80001d8 <strlen>
 800437c:	4603      	mov	r3, r0
 800437e:	2b02      	cmp	r3, #2
 8004380:	d10c      	bne.n	800439c <ftoa+0xe0>
        intString2[1] = '0';
 8004382:	2330      	movs	r3, #48	; 0x30
 8004384:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004386:	2330      	movs	r3, #48	; 0x30
 8004388:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 800438a:	f107 0218 	add.w	r2, r7, #24
 800438e:	f107 030c 	add.w	r3, r7, #12
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f01e ff79 	bl	802328c <strcat>
 800439a:	e01a      	b.n	80043d2 <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 800439c:	f107 0318 	add.w	r3, r7, #24
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fb ff19 	bl	80001d8 <strlen>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d10a      	bne.n	80043c2 <ftoa+0x106>
        intString2[1] = '0';
 80043ac:	2330      	movs	r3, #48	; 0x30
 80043ae:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 80043b0:	f107 0218 	add.w	r2, r7, #24
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f01e ff66 	bl	802328c <strcat>
 80043c0:	e007      	b.n	80043d2 <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 80043c2:	f107 0218 	add.w	r2, r7, #24
 80043c6:	f107 030c 	add.w	r3, r7, #12
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f01e ff5d 	bl	802328c <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 80043d2:	f107 030c 	add.w	r3, r7, #12
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fb fefe 	bl	80001d8 <strlen>
 80043dc:	4603      	mov	r3, r0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3b03      	subs	r3, #3
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 80043e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	4619      	mov	r1, r3
 80043f0:	6838      	ldr	r0, [r7, #0]
 80043f2:	f01e ff91 	bl	8023318 <strncpy>
    floatString[dpLocation] = '\0';
 80043f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	4413      	add	r3, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 8004402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004404:	6838      	ldr	r0, [r7, #0]
 8004406:	f01e ff41 	bl	802328c <strcat>
    strcat(floatString, intString2 + dpLocation);
 800440a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800440e:	f107 020c 	add.w	r2, r7, #12
 8004412:	4413      	add	r3, r2
 8004414:	4619      	mov	r1, r3
 8004416:	6838      	ldr	r0, [r7, #0]
 8004418:	f01e ff38 	bl	802328c <strcat>

    return floatString;
 800441c:	683b      	ldr	r3, [r7, #0]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	08026c3c 	.word	0x08026c3c
 800442c:	3a03126f 	.word	0x3a03126f
 8004430:	447a0000 	.word	0x447a0000

08004434 <cliAux>:

static int cliAux(int argc, char *argv[])
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d114      	bne.n	8004472 <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e00d      	b.n	800446a <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <cliAux+0x90>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3312      	adds	r3, #18
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	491a      	ldr	r1, [pc, #104]	; (80044c8 <cliAux+0x94>)
 800445e:	2000      	movs	r0, #0
 8004460:	f00f f824 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b18      	cmp	r3, #24
 800446e:	ddee      	ble.n	800444e <cliAux+0x1a>
 8004470:	e023      	b.n	80044ba <cliAux+0x86>
    } else if (argc > 1) {
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b01      	cmp	r3, #1
 8004476:	dd1d      	ble.n	80044b4 <cliAux+0x80>
        i = atoi(argv[0]);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f01e fd89 	bl	8022f94 <atoi>
 8004482:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b18      	cmp	r3, #24
 8004488:	dc0e      	bgt.n	80044a8 <cliAux+0x74>
            val = atoi(argv[1]);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f01e fd7f 	bl	8022f94 <atoi>
 8004496:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	490a      	ldr	r1, [pc, #40]	; (80044c4 <cliAux+0x90>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3312      	adds	r3, #18
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	e008      	b.n	80044ba <cliAux+0x86>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 80044a8:	2219      	movs	r2, #25
 80044aa:	4908      	ldr	r1, [pc, #32]	; (80044cc <cliAux+0x98>)
 80044ac:	2000      	movs	r0, #0
 80044ae:	f00e fffd 	bl	80134ac <pifLog_Printf>
 80044b2:	e002      	b.n	80044ba <cliAux+0x86>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80044b4:	f06f 0302 	mvn.w	r3, #2
 80044b8:	e000      	b.n	80044bc <cliAux+0x88>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000e64 	.word	0x20000e64
 80044c8:	08026c40 	.word	0x08026c40
 80044cc:	08026c4c 	.word	0x08026c4c

080044d0 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	; 0x30
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 0) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 80d8 	bne.w	800469a <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80044ea:	4999      	ldr	r1, [pc, #612]	; (8004750 <cliCMix+0x280>)
 80044ec:	2000      	movs	r0, #0
 80044ee:	f00e ff4f 	bl	8013390 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80044f2:	2300      	movs	r3, #0
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f6:	e069      	b.n	80045cc <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80044f8:	4a96      	ldr	r2, [pc, #600]	; (8004754 <cliCMix+0x284>)
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	3301      	adds	r3, #1
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	edd3 7a00 	vldr	s15, [r3]
 8004506:	eef5 7a40 	vcmp.f32	s15, #0.0
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	d061      	beq.n	80045d4 <cliCMix+0x104>
                break;
            num_motors++;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	3301      	adds	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	3301      	adds	r3, #1
 800451a:	461a      	mov	r2, r3
 800451c:	498e      	ldr	r1, [pc, #568]	; (8004758 <cliCMix+0x288>)
 800451e:	2000      	movs	r0, #0
 8004520:	f00e ffc4 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 8004524:	4a8b      	ldr	r2, [pc, #556]	; (8004754 <cliCMix+0x284>)
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	3301      	adds	r3, #1
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	4413      	add	r3, r2
 800452e:	edd3 7a00 	vldr	s15, [r3]
 8004532:	f107 0314 	add.w	r3, r7, #20
 8004536:	4618      	mov	r0, r3
 8004538:	eeb0 0a67 	vmov.f32	s0, s15
 800453c:	f7ff febe 	bl	80042bc <ftoa>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	4985      	ldr	r1, [pc, #532]	; (800475c <cliCMix+0x28c>)
 8004546:	2000      	movs	r0, #0
 8004548:	f00e ffb0 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 800454c:	4a81      	ldr	r2, [pc, #516]	; (8004754 <cliCMix+0x284>)
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	3301      	adds	r3, #1
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	4413      	add	r3, r2
 8004556:	3304      	adds	r3, #4
 8004558:	edd3 7a00 	vldr	s15, [r3]
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	4618      	mov	r0, r3
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	f7ff fea9 	bl	80042bc <ftoa>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	497b      	ldr	r1, [pc, #492]	; (800475c <cliCMix+0x28c>)
 8004570:	2000      	movs	r0, #0
 8004572:	f00e ff9b 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 8004576:	4a77      	ldr	r2, [pc, #476]	; (8004754 <cliCMix+0x284>)
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	4413      	add	r3, r2
 800457e:	3318      	adds	r3, #24
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4618      	mov	r0, r3
 800458a:	eeb0 0a67 	vmov.f32	s0, s15
 800458e:	f7ff fe95 	bl	80042bc <ftoa>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	4971      	ldr	r1, [pc, #452]	; (800475c <cliCMix+0x28c>)
 8004598:	2000      	movs	r0, #0
 800459a:	f00e ff87 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 800459e:	4a6d      	ldr	r2, [pc, #436]	; (8004754 <cliCMix+0x284>)
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	4413      	add	r3, r2
 80045a6:	331c      	adds	r3, #28
 80045a8:	edd3 7a00 	vldr	s15, [r3]
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4618      	mov	r0, r3
 80045b2:	eeb0 0a67 	vmov.f32	s0, s15
 80045b6:	f7ff fe81 	bl	80042bc <ftoa>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	4968      	ldr	r1, [pc, #416]	; (8004760 <cliCMix+0x290>)
 80045c0:	2000      	movs	r0, #0
 80045c2:	f00e ff73 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	3301      	adds	r3, #1
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	2b0b      	cmp	r3, #11
 80045d0:	dd92      	ble.n	80044f8 <cliCMix+0x28>
 80045d2:	e000      	b.n	80045d6 <cliCMix+0x106>
                break;
 80045d4:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 80045e4:	2300      	movs	r3, #0
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e8:	e02a      	b.n	8004640 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80045ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80045ee:	4a59      	ldr	r2, [pc, #356]	; (8004754 <cliCMix+0x284>)
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	3301      	adds	r3, #1
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	edd3 7a00 	vldr	s15, [r3]
 80045fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004602:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 8004606:	ed97 7a03 	vldr	s14, [r7, #12]
 800460a:	4a52      	ldr	r2, [pc, #328]	; (8004754 <cliCMix+0x284>)
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	3318      	adds	r3, #24
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800461c:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 8004620:	ed97 7a04 	vldr	s14, [r7, #16]
 8004624:	4a4b      	ldr	r2, [pc, #300]	; (8004754 <cliCMix+0x284>)
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4413      	add	r3, r2
 800462c:	331c      	adds	r3, #28
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004636:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	3301      	adds	r3, #1
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	429a      	cmp	r2, r3
 8004646:	dbd0      	blt.n	80045ea <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 8004648:	4946      	ldr	r1, [pc, #280]	; (8004764 <cliCMix+0x294>)
 800464a:	2000      	movs	r0, #0
 800464c:	f00e fea0 	bl	8013390 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004650:	2300      	movs	r3, #0
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004654:	e019      	b.n	800468a <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	3330      	adds	r3, #48	; 0x30
 800465c:	443b      	add	r3, r7
 800465e:	3b28      	subs	r3, #40	; 0x28
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	eef0 7ae7 	vabs.f32	s15, s15
 8004668:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004768 <cliCMix+0x298>
 800466c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	dd01      	ble.n	800467a <cliCMix+0x1aa>
 8004676:	4b3d      	ldr	r3, [pc, #244]	; (800476c <cliCMix+0x29c>)
 8004678:	e000      	b.n	800467c <cliCMix+0x1ac>
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <cliCMix+0x2a0>)
 800467c:	4619      	mov	r1, r3
 800467e:	2000      	movs	r0, #0
 8004680:	f00e fe86 	bl	8013390 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	3301      	adds	r3, #1
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	2b02      	cmp	r3, #2
 800468e:	dde2      	ble.n	8004656 <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004690:	4938      	ldr	r1, [pc, #224]	; (8004774 <cliCMix+0x2a4>)
 8004692:	2000      	movs	r0, #0
 8004694:	f00e fe7c 	bl	8013390 <pifLog_Print>
 8004698:	e0eb      	b.n	8004872 <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4936      	ldr	r1, [pc, #216]	; (8004778 <cliCMix+0x2a8>)
 80046a0:	4618      	mov	r0, r3
 80046a2:	f01e fdd9 	bl	8023258 <strcasecmp>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <cliCMix+0x200>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b0:	e00a      	b.n	80046c8 <cliCMix+0x1f8>
            mcfg.customMixer[i].throttle = 0.0f;
 80046b2:	4a28      	ldr	r2, [pc, #160]	; (8004754 <cliCMix+0x284>)
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	3301      	adds	r3, #1
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4413      	add	r3, r2
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	3301      	adds	r3, #1
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	2b0b      	cmp	r3, #11
 80046cc:	ddf1      	ble.n	80046b2 <cliCMix+0x1e2>
 80046ce:	e0d0      	b.n	8004872 <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "load") == 0) {
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4929      	ldr	r1, [pc, #164]	; (800477c <cliCMix+0x2ac>)
 80046d6:	4618      	mov	r0, r3
 80046d8:	f01e fdbe 	bl	8023258 <strcasecmp>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d154      	bne.n	800478c <cliCMix+0x2bc>
        if (argc > 1) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	dd2f      	ble.n	8004748 <cliCMix+0x278>
            for (i = 0; ; i++) {
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <cliCMix+0x2b0>)
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <cliCMix+0x232>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80046f8:	4922      	ldr	r1, [pc, #136]	; (8004784 <cliCMix+0x2b4>)
 80046fa:	2000      	movs	r0, #0
 80046fc:	f00e fe48 	bl	8013390 <pifLog_Print>
                    break;
 8004700:	e0b7      	b.n	8004872 <cliCMix+0x3a2>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	491d      	ldr	r1, [pc, #116]	; (8004780 <cliCMix+0x2b0>)
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f01e fda0 	bl	8023258 <strcasecmp>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d110      	bne.n	8004740 <cliCMix+0x270>
                    mixerLoadMix(i);
 800471e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004720:	f006 fd2c 	bl	800b17c <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004724:	4a16      	ldr	r2, [pc, #88]	; (8004780 <cliCMix+0x2b0>)
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472c:	461a      	mov	r2, r3
 800472e:	4916      	ldr	r1, [pc, #88]	; (8004788 <cliCMix+0x2b8>)
 8004730:	2000      	movs	r0, #0
 8004732:	f00e febb 	bl	80134ac <pifLog_Printf>
                    cliCMix(1, NULL);
 8004736:	2100      	movs	r1, #0
 8004738:	2001      	movs	r0, #1
 800473a:	f7ff fec9 	bl	80044d0 <cliCMix>
                    break;
 800473e:	e098      	b.n	8004872 <cliCMix+0x3a2>
            for (i = 0; ; i++) {
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	3301      	adds	r3, #1
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 8004746:	e7d1      	b.n	80046ec <cliCMix+0x21c>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004748:	f06f 0302 	mvn.w	r3, #2
 800474c:	e092      	b.n	8004874 <cliCMix+0x3a4>
 800474e:	bf00      	nop
 8004750:	08026c74 	.word	0x08026c74
 8004754:	200008f8 	.word	0x200008f8
 8004758:	08026ca0 	.word	0x08026ca0
 800475c:	08026ca8 	.word	0x08026ca8
 8004760:	08026cac 	.word	0x08026cac
 8004764:	08026cb4 	.word	0x08026cb4
 8004768:	3c23d70a 	.word	0x3c23d70a
 800476c:	08026cc4 	.word	0x08026cc4
 8004770:	08026cc8 	.word	0x08026cc8
 8004774:	08026ccc 	.word	0x08026ccc
 8004778:	08026cd0 	.word	0x08026cd0
 800477c:	08026cd8 	.word	0x08026cd8
 8004780:	08028020 	.word	0x08028020
 8004784:	08026ce0 	.word	0x08026ce0
 8004788:	08026cf8 	.word	0x08026cf8
        }
    } else {
        i = atoi(argv[0]); // get motor number
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f01e fbff 	bl	8022f94 <atoi>
 8004796:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	3b01      	subs	r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2b0b      	cmp	r3, #11
 80047a2:	dc61      	bgt.n	8004868 <cliCMix+0x398>
            if (argc > 1) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	dd11      	ble.n	80047ce <cliCMix+0x2fe>
                mcfg.customMixer[i].throttle = _atof(argv[1]);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fc8f 	bl	80040d4 <_atof>
 80047b6:	eef0 7a40 	vmov.f32	s15, s0
 80047ba:	4a30      	ldr	r2, [pc, #192]	; (800487c <cliCMix+0x3ac>)
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	3301      	adds	r3, #1
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4413      	add	r3, r2
 80047c4:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	3301      	adds	r3, #1
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 2) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	dd12      	ble.n	80047fa <cliCMix+0x32a>
                mcfg.customMixer[i].roll = _atof(argv[2]);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc7a 	bl	80040d4 <_atof>
 80047e0:	eef0 7a40 	vmov.f32	s15, s0
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <cliCMix+0x3ac>)
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	3301      	adds	r3, #1
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	3301      	adds	r3, #1
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	dd11      	ble.n	8004824 <cliCMix+0x354>
                mcfg.customMixer[i].pitch = _atof(argv[3]);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fc64 	bl	80040d4 <_atof>
 800480c:	eef0 7a40 	vmov.f32	s15, s0
 8004810:	4a1a      	ldr	r2, [pc, #104]	; (800487c <cliCMix+0x3ac>)
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	4413      	add	r3, r2
 8004818:	3318      	adds	r3, #24
 800481a:	edc3 7a00 	vstr	s15, [r3]
                check++;
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	3301      	adds	r3, #1
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b04      	cmp	r3, #4
 8004828:	dd11      	ble.n	800484e <cliCMix+0x37e>
                mcfg.customMixer[i].yaw = _atof(argv[4]);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	3310      	adds	r3, #16
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fc4f 	bl	80040d4 <_atof>
 8004836:	eef0 7a40 	vmov.f32	s15, s0
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <cliCMix+0x3ac>)
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	4413      	add	r3, r2
 8004842:	331c      	adds	r3, #28
 8004844:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	3301      	adds	r3, #1
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2b04      	cmp	r3, #4
 8004852:	d004      	beq.n	800485e <cliCMix+0x38e>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 8004854:	490a      	ldr	r1, [pc, #40]	; (8004880 <cliCMix+0x3b0>)
 8004856:	2000      	movs	r0, #0
 8004858:	f00e fd9a 	bl	8013390 <pifLog_Print>
 800485c:	e009      	b.n	8004872 <cliCMix+0x3a2>
            } else {
                cliCMix(1, NULL);
 800485e:	2100      	movs	r1, #0
 8004860:	2001      	movs	r0, #1
 8004862:	f7ff fe35 	bl	80044d0 <cliCMix>
 8004866:	e004      	b.n	8004872 <cliCMix+0x3a2>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004868:	220c      	movs	r2, #12
 800486a:	4906      	ldr	r1, [pc, #24]	; (8004884 <cliCMix+0x3b4>)
 800486c:	2000      	movs	r0, #0
 800486e:	f00e fe1d 	bl	80134ac <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3730      	adds	r7, #48	; 0x30
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	200008f8 	.word	0x200008f8
 8004880:	08026d0c 	.word	0x08026d0c
 8004884:	08026d48 	.word	0x08026d48

08004888 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	; 0x30
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004892:	4aa0      	ldr	r2, [pc, #640]	; (8004b14 <cliServo+0x28c>)
 8004894:	f107 0320 	add.w	r3, r7, #32
 8004898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800489c:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 0) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d15c      	bne.n	8004960 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 80048a6:	499c      	ldr	r1, [pc, #624]	; (8004b18 <cliServo+0x290>)
 80048a8:	2000      	movs	r0, #0
 80048aa:	f00e fd71 	bl	8013390 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 80048ae:	2300      	movs	r3, #0
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	e049      	b.n	8004948 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	3301      	adds	r3, #1
 80048b8:	461a      	mov	r2, r3
 80048ba:	4998      	ldr	r1, [pc, #608]	; (8004b1c <cliServo+0x294>)
 80048bc:	2000      	movs	r0, #0
 80048be:	f00e fdf5 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 80048c2:	4997      	ldr	r1, [pc, #604]	; (8004b20 <cliServo+0x298>)
 80048c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	440b      	add	r3, r1
 80048d0:	33b8      	adds	r3, #184	; 0xb8
 80048d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4992      	ldr	r1, [pc, #584]	; (8004b24 <cliServo+0x29c>)
 80048da:	2000      	movs	r0, #0
 80048dc:	f00e fde6 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 80048e0:	498f      	ldr	r1, [pc, #572]	; (8004b20 <cliServo+0x298>)
 80048e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	440b      	add	r3, r1
 80048ee:	33bc      	adds	r3, #188	; 0xbc
 80048f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f4:	461a      	mov	r2, r3
 80048f6:	498b      	ldr	r1, [pc, #556]	; (8004b24 <cliServo+0x29c>)
 80048f8:	2000      	movs	r0, #0
 80048fa:	f00e fdd7 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 80048fe:	4988      	ldr	r1, [pc, #544]	; (8004b20 <cliServo+0x298>)
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	440b      	add	r3, r1
 800490c:	33ba      	adds	r3, #186	; 0xba
 800490e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004912:	461a      	mov	r2, r3
 8004914:	4983      	ldr	r1, [pc, #524]	; (8004b24 <cliServo+0x29c>)
 8004916:	2000      	movs	r0, #0
 8004918:	f00e fdc8 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 800491c:	4980      	ldr	r1, [pc, #512]	; (8004b20 <cliServo+0x298>)
 800491e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	440b      	add	r3, r1
 800492a:	33be      	adds	r3, #190	; 0xbe
 800492c:	f993 3000 	ldrsb.w	r3, [r3]
 8004930:	461a      	mov	r2, r3
 8004932:	497c      	ldr	r1, [pc, #496]	; (8004b24 <cliServo+0x29c>)
 8004934:	2000      	movs	r0, #0
 8004936:	f00e fdb9 	bl	80134ac <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 800493a:	497b      	ldr	r1, [pc, #492]	; (8004b28 <cliServo+0x2a0>)
 800493c:	2000      	movs	r0, #0
 800493e:	f00e fd27 	bl	8013390 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	3301      	adds	r3, #1
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	2b07      	cmp	r3, #7
 800494c:	ddb2      	ble.n	80048b4 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 800494e:	4976      	ldr	r1, [pc, #472]	; (8004b28 <cliServo+0x2a0>)
 8004950:	2000      	movs	r0, #0
 8004952:	f00e fd1d 	bl	8013390 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004956:	4975      	ldr	r1, [pc, #468]	; (8004b2c <cliServo+0x2a4>)
 8004958:	2000      	movs	r0, #0
 800495a:	f00e fd19 	bl	8013390 <pifLog_Print>
 800495e:	e0d4      	b.n	8004b0a <cliServo+0x282>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4972      	ldr	r1, [pc, #456]	; (8004b30 <cliServo+0x2a8>)
 8004966:	4618      	mov	r0, r3
 8004968:	f01e fc76 	bl	8023258 <strcasecmp>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13a      	bne.n	80049e8 <cliServo+0x160>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004972:	2300      	movs	r3, #0
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004976:	e033      	b.n	80049e0 <cliServo+0x158>
            cfg.servoConf[i].min = 1020;
 8004978:	4969      	ldr	r1, [pc, #420]	; (8004b20 <cliServo+0x298>)
 800497a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	440b      	add	r3, r1
 8004986:	33b8      	adds	r3, #184	; 0xb8
 8004988:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800498c:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 800498e:	4964      	ldr	r1, [pc, #400]	; (8004b20 <cliServo+0x298>)
 8004990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	440b      	add	r3, r1
 800499c:	33ba      	adds	r3, #186	; 0xba
 800499e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049a2:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 80049a4:	495e      	ldr	r1, [pc, #376]	; (8004b20 <cliServo+0x298>)
 80049a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	440b      	add	r3, r1
 80049b2:	33bc      	adds	r3, #188	; 0xbc
 80049b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80049b8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 80049ba:	f107 0220 	add.w	r2, r7, #32
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	4413      	add	r3, r2
 80049c2:	f993 0000 	ldrsb.w	r0, [r3]
 80049c6:	4956      	ldr	r1, [pc, #344]	; (8004b20 <cliServo+0x298>)
 80049c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	440b      	add	r3, r1
 80049d4:	33be      	adds	r3, #190	; 0xbe
 80049d6:	4602      	mov	r2, r0
 80049d8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	3301      	adds	r3, #1
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	2b07      	cmp	r3, #7
 80049e4:	ddc8      	ble.n	8004978 <cliServo+0xf0>
 80049e6:	e090      	b.n	8004b0a <cliServo+0x282>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check < argc && check < ARGS_COUNT) {
 80049ec:	e011      	b.n	8004a12 <cliServo+0x18a>
            args[check] = atoi(argv[check]);
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f01e facb 	bl	8022f94 <atoi>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	3330      	adds	r3, #48	; 0x30
 8004a06:	443b      	add	r3, r7
 8004a08:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	3301      	adds	r3, #1
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check < argc && check < ARGS_COUNT) {
 8004a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	da02      	bge.n	8004a20 <cliServo+0x198>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	dde6      	ble.n	80049ee <cliServo+0x166>
        }

        if (check != ARGS_COUNT) {
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	2b05      	cmp	r3, #5
 8004a24:	d005      	beq.n	8004a32 <cliServo+0x1aa>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004a26:	4943      	ldr	r1, [pc, #268]	; (8004b34 <cliServo+0x2ac>)
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f00e fcb1 	bl	8013390 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e06c      	b.n	8004b0c <cliServo+0x284>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dd60      	ble.n	8004afa <cliServo+0x272>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	dc5d      	bgt.n	8004afa <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004a3e:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004a40:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004a44:	db59      	blt.n	8004afa <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f640 0234 	movw	r2, #2100	; 0x834
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	dc54      	bgt.n	8004afa <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004a50:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004a52:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004a56:	db50      	blt.n	8004afa <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f640 0234 	movw	r2, #2100	; 0x834
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	dc4b      	bgt.n	8004afa <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004a62:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004a64:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004a68:	db47      	blt.n	8004afa <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f640 0234 	movw	r2, #2100	; 0x834
 8004a70:	4293      	cmp	r3, r2
 8004a72:	dc42      	bgt.n	8004afa <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004a74:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004a76:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004a7a:	db3e      	blt.n	8004afa <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	dc3b      	bgt.n	8004afa <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004a86:	429a      	cmp	r2, r3
 8004a88:	dc37      	bgt.n	8004afa <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	dc33      	bgt.n	8004afa <cliServo+0x272>
            args[SERVO]--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	b218      	sxth	r0, r3
 8004a9e:	4920      	ldr	r1, [pc, #128]	; (8004b20 <cliServo+0x298>)
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	440b      	add	r3, r1
 8004aaa:	33b8      	adds	r3, #184	; 0xb8
 8004aac:	4602      	mov	r2, r0
 8004aae:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	b218      	sxth	r0, r3
 8004ab6:	491a      	ldr	r1, [pc, #104]	; (8004b20 <cliServo+0x298>)
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	440b      	add	r3, r1
 8004ac2:	33ba      	adds	r3, #186	; 0xba
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	b218      	sxth	r0, r3
 8004ace:	4914      	ldr	r1, [pc, #80]	; (8004b20 <cliServo+0x298>)
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	440b      	add	r3, r1
 8004ada:	33bc      	adds	r3, #188	; 0xbc
 8004adc:	4602      	mov	r2, r0
 8004ade:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	b258      	sxtb	r0, r3
 8004ae6:	490e      	ldr	r1, [pc, #56]	; (8004b20 <cliServo+0x298>)
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	33be      	adds	r3, #190	; 0xbe
 8004af4:	4602      	mov	r2, r0
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e003      	b.n	8004b02 <cliServo+0x27a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004afa:	490f      	ldr	r1, [pc, #60]	; (8004b38 <cliServo+0x2b0>)
 8004afc:	2000      	movs	r0, #0
 8004afe:	f00e fc47 	bl	8013390 <pifLog_Print>
        cliServo(1, NULL);
 8004b02:	2100      	movs	r1, #0
 8004b04:	2001      	movs	r0, #1
 8004b06:	f7ff febf 	bl	8004888 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3730      	adds	r7, #48	; 0x30
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	08026e84 	.word	0x08026e84
 8004b18:	08026d70 	.word	0x08026d70
 8004b1c:	08026ca0 	.word	0x08026ca0
 8004b20:	20000e64 	.word	0x20000e64
 8004b24:	08026d9c 	.word	0x08026d9c
 8004b28:	08026ccc 	.word	0x08026ccc
 8004b2c:	08026da0 	.word	0x08026da0
 8004b30:	08026cd0 	.word	0x08026cd0
 8004b34:	08026dbc 	.word	0x08026dbc
 8004b38:	08026e08 	.word	0x08026e08

08004b3c <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b090      	sub	sp, #64	; 0x40
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 0) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f040 808a 	bne.w	8004c66 <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004b52:	49aa      	ldr	r1, [pc, #680]	; (8004dfc <cliServoMix+0x2c0>)
 8004b54:	2000      	movs	r0, #0
 8004b56:	f00e fc1b 	bl	8013390 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004b5a:	49a9      	ldr	r1, [pc, #676]	; (8004e00 <cliServoMix+0x2c4>)
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f00e fc17 	bl	8013390 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004b62:	2300      	movs	r3, #0
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b66:	e074      	b.n	8004c52 <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004b68:	49a6      	ldr	r1, [pc, #664]	; (8004e04 <cliServoMix+0x2c8>)
 8004b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	440b      	add	r3, r1
 8004b74:	33d2      	adds	r3, #210	; 0xd2
 8004b76:	f993 3000 	ldrsb.w	r3, [r3]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d06d      	beq.n	8004c5a <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	3301      	adds	r3, #1
 8004b82:	461a      	mov	r2, r3
 8004b84:	49a0      	ldr	r1, [pc, #640]	; (8004e08 <cliServoMix+0x2cc>)
 8004b86:	2000      	movs	r0, #0
 8004b88:	f00e fc90 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004b8c:	499d      	ldr	r1, [pc, #628]	; (8004e04 <cliServoMix+0x2c8>)
 8004b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	440b      	add	r3, r1
 8004b98:	33d0      	adds	r3, #208	; 0xd0
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	499a      	ldr	r1, [pc, #616]	; (8004e0c <cliServoMix+0x2d0>)
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f00e fc82 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004ba8:	4996      	ldr	r1, [pc, #600]	; (8004e04 <cliServoMix+0x2c8>)
 8004baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	33d1      	adds	r3, #209	; 0xd1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4993      	ldr	r1, [pc, #588]	; (8004e0c <cliServoMix+0x2d0>)
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f00e fc74 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004bc4:	498f      	ldr	r1, [pc, #572]	; (8004e04 <cliServoMix+0x2c8>)
 8004bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	440b      	add	r3, r1
 8004bd0:	33d2      	adds	r3, #210	; 0xd2
 8004bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	498c      	ldr	r1, [pc, #560]	; (8004e0c <cliServoMix+0x2d0>)
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f00e fc66 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004be0:	4988      	ldr	r1, [pc, #544]	; (8004e04 <cliServoMix+0x2c8>)
 8004be2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	33d3      	adds	r3, #211	; 0xd3
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4986      	ldr	r1, [pc, #536]	; (8004e0c <cliServoMix+0x2d0>)
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f00e fc59 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004bfa:	4982      	ldr	r1, [pc, #520]	; (8004e04 <cliServoMix+0x2c8>)
 8004bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	33d4      	adds	r3, #212	; 0xd4
 8004c08:	f993 3000 	ldrsb.w	r3, [r3]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	497f      	ldr	r1, [pc, #508]	; (8004e0c <cliServoMix+0x2d0>)
 8004c10:	2000      	movs	r0, #0
 8004c12:	f00e fc4b 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004c16:	497b      	ldr	r1, [pc, #492]	; (8004e04 <cliServoMix+0x2c8>)
 8004c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	33d5      	adds	r3, #213	; 0xd5
 8004c24:	f993 3000 	ldrsb.w	r3, [r3]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4978      	ldr	r1, [pc, #480]	; (8004e0c <cliServoMix+0x2d0>)
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f00e fc3d 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004c32:	4974      	ldr	r1, [pc, #464]	; (8004e04 <cliServoMix+0x2c8>)
 8004c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	33d6      	adds	r3, #214	; 0xd6
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	4972      	ldr	r1, [pc, #456]	; (8004e10 <cliServoMix+0x2d4>)
 8004c46:	2000      	movs	r0, #0
 8004c48:	f00e fc30 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	3301      	adds	r3, #1
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c54:	2b0f      	cmp	r3, #15
 8004c56:	dd87      	ble.n	8004b68 <cliServoMix+0x2c>
 8004c58:	e000      	b.n	8004c5c <cliServoMix+0x120>
                break;
 8004c5a:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004c5c:	496d      	ldr	r1, [pc, #436]	; (8004e14 <cliServoMix+0x2d8>)
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f00e fb96 	bl	8013390 <pifLog_Print>
 8004c64:	e235      	b.n	80050d2 <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	496b      	ldr	r1, [pc, #428]	; (8004e18 <cliServoMix+0x2dc>)
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f01e faf3 	bl	8023258 <strcasecmp>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d118      	bne.n	8004caa <cliServoMix+0x16e>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004c78:	2270      	movs	r2, #112	; 0x70
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4867      	ldr	r0, [pc, #412]	; (8004e1c <cliServoMix+0x2e0>)
 8004c7e:	f01e f9dd 	bl	802303c <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c86:	e00c      	b.n	8004ca2 <cliServoMix+0x166>
            cfg.servoConf[i].direction = 0;
 8004c88:	4965      	ldr	r1, [pc, #404]	; (8004e20 <cliServoMix+0x2e4>)
 8004c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	440b      	add	r3, r1
 8004c96:	33c0      	adds	r3, #192	; 0xc0
 8004c98:	2200      	movs	r2, #0
 8004c9a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	2b07      	cmp	r3, #7
 8004ca6:	ddef      	ble.n	8004c88 <cliServoMix+0x14c>
 8004ca8:	e213      	b.n	80050d2 <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	495d      	ldr	r1, [pc, #372]	; (8004e24 <cliServoMix+0x2e8>)
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f01e fad1 	bl	8023258 <strcasecmp>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d135      	bne.n	8004d28 <cliServoMix+0x1ec>
        if (argc > 1) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	dd2f      	ble.n	8004d22 <cliServoMix+0x1e6>
            for (i = 0; ; i++) {
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004cc6:	4a58      	ldr	r2, [pc, #352]	; (8004e28 <cliServoMix+0x2ec>)
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <cliServoMix+0x1a0>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004cd2:	4956      	ldr	r1, [pc, #344]	; (8004e2c <cliServoMix+0x2f0>)
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f00e fb5b 	bl	8013390 <pifLog_Print>
                    break;
 8004cda:	e1fa      	b.n	80050d2 <cliServoMix+0x596>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4951      	ldr	r1, [pc, #324]	; (8004e28 <cliServoMix+0x2ec>)
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f01e fab3 	bl	8023258 <strcasecmp>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d110      	bne.n	8004d1a <cliServoMix+0x1de>
                    servoMixerLoadMix(i);
 8004cf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cfa:	f006 f9c7 	bl	800b08c <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004cfe:	4a4a      	ldr	r2, [pc, #296]	; (8004e28 <cliServoMix+0x2ec>)
 8004d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d06:	461a      	mov	r2, r3
 8004d08:	4949      	ldr	r1, [pc, #292]	; (8004e30 <cliServoMix+0x2f4>)
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f00e fbce 	bl	80134ac <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004d10:	2100      	movs	r1, #0
 8004d12:	2001      	movs	r0, #1
 8004d14:	f7ff ff12 	bl	8004b3c <cliServoMix>
                    break;
 8004d18:	e1db      	b.n	80050d2 <cliServoMix+0x596>
            for (i = 0; ; i++) {
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004d20:	e7d1      	b.n	8004cc6 <cliServoMix+0x18a>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004d22:	f06f 0302 	mvn.w	r3, #2
 8004d26:	e1d5      	b.n	80050d4 <cliServoMix+0x598>
        }
    } else if (strcasecmp(argv[0], "direction") == 0) {
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4941      	ldr	r1, [pc, #260]	; (8004e34 <cliServoMix+0x2f8>)
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f01e fa92 	bl	8023258 <strcasecmp>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 8126 	bne.w	8004f88 <cliServoMix+0x44c>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004d3c:	4a3e      	ldr	r2, [pc, #248]	; (8004e38 <cliServoMix+0x2fc>)
 8004d3e:	f107 0308 	add.w	r3, r7, #8
 8004d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d46:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 1) {
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f040 8095 	bne.w	8004e7c <cliServoMix+0x340>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004d52:	493a      	ldr	r1, [pc, #232]	; (8004e3c <cliServoMix+0x300>)
 8004d54:	2000      	movs	r0, #0
 8004d56:	f00e fb1b 	bl	8013390 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004d5a:	4939      	ldr	r1, [pc, #228]	; (8004e40 <cliServoMix+0x304>)
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f00e fb17 	bl	8013390 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	e009      	b.n	8004d7c <cliServoMix+0x240>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4935      	ldr	r1, [pc, #212]	; (8004e44 <cliServoMix+0x308>)
 8004d70:	2000      	movs	r0, #0
 8004d72:	f00e fb9b 	bl	80134ac <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	3301      	adds	r3, #1
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2b0b      	cmp	r3, #11
 8004d80:	ddf2      	ble.n	8004d68 <cliServoMix+0x22c>
            pifLog_Print(LT_NONE, "\r\n");
 8004d82:	4924      	ldr	r1, [pc, #144]	; (8004e14 <cliServoMix+0x2d8>)
 8004d84:	2000      	movs	r0, #0
 8004d86:	f00e fb03 	bl	8013390 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	e02f      	b.n	8004df0 <cliServoMix+0x2b4>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d92:	3301      	adds	r3, #1
 8004d94:	461a      	mov	r2, r3
 8004d96:	492c      	ldr	r1, [pc, #176]	; (8004e48 <cliServoMix+0x30c>)
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f00e fb87 	bl	80134ac <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
 8004da2:	e01b      	b.n	8004ddc <cliServoMix+0x2a0>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004da4:	491e      	ldr	r1, [pc, #120]	; (8004e20 <cliServoMix+0x2e4>)
 8004da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	440b      	add	r3, r1
 8004db2:	33c0      	adds	r3, #192	; 0xc0
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	fa42 f303 	asr.w	r3, r2, r3
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <cliServoMix+0x28e>
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <cliServoMix+0x310>)
 8004dc8:	e000      	b.n	8004dcc <cliServoMix+0x290>
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <cliServoMix+0x314>)
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4921      	ldr	r1, [pc, #132]	; (8004e54 <cliServoMix+0x318>)
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f00e fb6b 	bl	80134ac <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	3301      	adds	r3, #1
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2b0b      	cmp	r3, #11
 8004de0:	dde0      	ble.n	8004da4 <cliServoMix+0x268>
                pifLog_Print(LT_NONE, "\r\n");
 8004de2:	490c      	ldr	r1, [pc, #48]	; (8004e14 <cliServoMix+0x2d8>)
 8004de4:	2000      	movs	r0, #0
 8004de6:	f00e fad3 	bl	8013390 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dec:	3301      	adds	r3, #1
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	2b07      	cmp	r3, #7
 8004df4:	ddcc      	ble.n	8004d90 <cliServoMix+0x254>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e16c      	b.n	80050d4 <cliServoMix+0x598>
 8004dfa:	bf00      	nop
 8004dfc:	08026e8c 	.word	0x08026e8c
 8004e00:	08026ef4 	.word	0x08026ef4
 8004e04:	200008f8 	.word	0x200008f8
 8004e08:	08026ca0 	.word	0x08026ca0
 8004e0c:	08026d9c 	.word	0x08026d9c
 8004e10:	08026f54 	.word	0x08026f54
 8004e14:	08026ccc 	.word	0x08026ccc
 8004e18:	08026cd0 	.word	0x08026cd0
 8004e1c:	200009c8 	.word	0x200009c8
 8004e20:	20000e64 	.word	0x20000e64
 8004e24:	08026cd8 	.word	0x08026cd8
 8004e28:	08028020 	.word	0x08028020
 8004e2c:	08026ce0 	.word	0x08026ce0
 8004e30:	08026cf8 	.word	0x08026cf8
 8004e34:	08025f28 	.word	0x08025f28
 8004e38:	08027090 	.word	0x08027090
 8004e3c:	08026f5c 	.word	0x08026f5c
 8004e40:	08026fac 	.word	0x08026fac
 8004e44:	08026fb0 	.word	0x08026fb0
 8004e48:	08026fb8 	.word	0x08026fb8
 8004e4c:	08026fbc 	.word	0x08026fbc
 8004e50:	08026fc0 	.word	0x08026fc0
 8004e54:	08026fc4 	.word	0x08026fc4
        }

        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f01e f896 	bl	8022f94 <atoi>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	3340      	adds	r3, #64	; 0x40
 8004e70:	443b      	add	r3, r7
 8004e72:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	3301      	adds	r3, #1
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8004e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	da02      	bge.n	8004e8a <cliServoMix+0x34e>
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	dde6      	ble.n	8004e58 <cliServoMix+0x31c>
        }

        if (check != ARGS_COUNT) {
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d005      	beq.n	8004e9c <cliServoMix+0x360>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8004e90:	4992      	ldr	r1, [pc, #584]	; (80050dc <cliServoMix+0x5a0>)
 8004e92:	2000      	movs	r0, #0
 8004e94:	f00e fa7c 	bl	8013390 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e11b      	b.n	80050d4 <cliServoMix+0x598>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	dd55      	ble.n	8004f4e <cliServoMix+0x412>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	dc52      	bgt.n	8004f4e <cliServoMix+0x412>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dd4f      	ble.n	8004f4e <cliServoMix+0x412>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	dc4c      	bgt.n	8004f4e <cliServoMix+0x412>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d002      	beq.n	8004ec2 <cliServoMix+0x386>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d145      	bne.n	8004f4e <cliServoMix+0x412>
            args[SERVO] -= 1;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d11c      	bne.n	8004f10 <cliServoMix+0x3d4>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4981      	ldr	r1, [pc, #516]	; (80050e0 <cliServoMix+0x5a4>)
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	440b      	add	r3, r1
 8004ee4:	33c0      	adds	r3, #192	; 0xc0
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b21a      	sxth	r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	b21b      	sxth	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b21b      	sxth	r3, r3
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	b298      	uxth	r0, r3
 8004efc:	4978      	ldr	r1, [pc, #480]	; (80050e0 <cliServoMix+0x5a4>)
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	440b      	add	r3, r1
 8004f08:	33c0      	adds	r3, #192	; 0xc0
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8004f0e:	e022      	b.n	8004f56 <cliServoMix+0x41a>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4973      	ldr	r1, [pc, #460]	; (80050e0 <cliServoMix+0x5a4>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	440b      	add	r3, r1
 8004f1e:	33c0      	adds	r3, #192	; 0xc0
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b21a      	sxth	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	b21b      	sxth	r3, r3
 8004f32:	4013      	ands	r3, r2
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	b298      	uxth	r0, r3
 8004f3a:	4969      	ldr	r1, [pc, #420]	; (80050e0 <cliServoMix+0x5a4>)
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	440b      	add	r3, r1
 8004f46:	33c0      	adds	r3, #192	; 0xc0
 8004f48:	4602      	mov	r2, r0
 8004f4a:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 8004f4c:	e003      	b.n	8004f56 <cliServoMix+0x41a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 8004f4e:	4965      	ldr	r1, [pc, #404]	; (80050e4 <cliServoMix+0x5a8>)
 8004f50:	2000      	movs	r0, #0
 8004f52:	f00e fa1d 	bl	8013390 <pifLog_Print>

        cliServoMix(2, smix_dir);
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	2002      	movs	r0, #2
 8004f5e:	f7ff fded 	bl	8004b3c <cliServoMix>
 8004f62:	e0b6      	b.n	80050d2 <cliServoMix+0x596>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f01e f810 	bl	8022f94 <atoi>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	3340      	adds	r3, #64	; 0x40
 8004f7c:	443b      	add	r3, r7
 8004f7e:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	3301      	adds	r3, #1
 8004f86:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8004f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	da02      	bge.n	8004f96 <cliServoMix+0x45a>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	2b07      	cmp	r3, #7
 8004f94:	dde6      	ble.n	8004f64 <cliServoMix+0x428>
        }

        if (check != ARGS_COUNT) {
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d005      	beq.n	8004fa8 <cliServoMix+0x46c>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 8004f9c:	4952      	ldr	r1, [pc, #328]	; (80050e8 <cliServoMix+0x5ac>)
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f00e f9f6 	bl	8013390 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e095      	b.n	80050d4 <cliServoMix+0x598>
        }

        i = args[RULE] - 1;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8004fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f2c0 808a 	blt.w	80050ca <cliServoMix+0x58e>
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	2b0f      	cmp	r3, #15
 8004fba:	f300 8086 	bgt.w	80050ca <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8004fbe:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f340 8082 	ble.w	80050ca <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	dc7e      	bgt.n	80050ca <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8004fcc:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dd7b      	ble.n	80050ca <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	dc78      	bgt.n	80050ca <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004fd8:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 8004fda:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004fde:	db74      	blt.n	80050ca <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b64      	cmp	r3, #100	; 0x64
 8004fe4:	dc71      	bgt.n	80050ca <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db6e      	blt.n	80050ca <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	2bff      	cmp	r3, #255	; 0xff
 8004ff0:	dc6b      	bgt.n	80050ca <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db68      	blt.n	80050ca <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	dc65      	bgt.n	80050ca <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005000:	2b00      	cmp	r3, #0
 8005002:	db62      	blt.n	80050ca <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	dc5f      	bgt.n	80050ca <cliServoMix+0x58e>
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	429a      	cmp	r2, r3
 8005010:	da5b      	bge.n	80050ca <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005014:	2b00      	cmp	r3, #0
 8005016:	db58      	blt.n	80050ca <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	2b03      	cmp	r3, #3
 800501c:	dc55      	bgt.n	80050ca <cliServoMix+0x58e>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b2d8      	uxtb	r0, r3
 8005026:	4931      	ldr	r1, [pc, #196]	; (80050ec <cliServoMix+0x5b0>)
 8005028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	440b      	add	r3, r1
 8005032:	33d0      	adds	r3, #208	; 0xd0
 8005034:	4602      	mov	r2, r0
 8005036:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b2d8      	uxtb	r0, r3
 8005040:	492a      	ldr	r1, [pc, #168]	; (80050ec <cliServoMix+0x5b0>)
 8005042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	440b      	add	r3, r1
 800504c:	33d1      	adds	r3, #209	; 0xd1
 800504e:	4602      	mov	r2, r0
 8005050:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	b258      	sxtb	r0, r3
 8005056:	4925      	ldr	r1, [pc, #148]	; (80050ec <cliServoMix+0x5b0>)
 8005058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	440b      	add	r3, r1
 8005062:	33d2      	adds	r3, #210	; 0xd2
 8005064:	4602      	mov	r2, r0
 8005066:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	b2d8      	uxtb	r0, r3
 800506c:	491f      	ldr	r1, [pc, #124]	; (80050ec <cliServoMix+0x5b0>)
 800506e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	440b      	add	r3, r1
 8005078:	33d3      	adds	r3, #211	; 0xd3
 800507a:	4602      	mov	r2, r0
 800507c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	b258      	sxtb	r0, r3
 8005082:	491a      	ldr	r1, [pc, #104]	; (80050ec <cliServoMix+0x5b0>)
 8005084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	440b      	add	r3, r1
 800508e:	33d4      	adds	r3, #212	; 0xd4
 8005090:	4602      	mov	r2, r0
 8005092:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	b258      	sxtb	r0, r3
 8005098:	4914      	ldr	r1, [pc, #80]	; (80050ec <cliServoMix+0x5b0>)
 800509a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	33d5      	adds	r3, #213	; 0xd5
 80050a6:	4602      	mov	r2, r0
 80050a8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	b2d8      	uxtb	r0, r3
 80050ae:	490f      	ldr	r1, [pc, #60]	; (80050ec <cliServoMix+0x5b0>)
 80050b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	440b      	add	r3, r1
 80050ba:	33d6      	adds	r3, #214	; 0xd6
 80050bc:	4602      	mov	r2, r0
 80050be:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 80050c0:	2100      	movs	r1, #0
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7ff fd3a 	bl	8004b3c <cliServoMix>
 80050c8:	e003      	b.n	80050d2 <cliServoMix+0x596>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 80050ca:	4906      	ldr	r1, [pc, #24]	; (80050e4 <cliServoMix+0x5a8>)
 80050cc:	2000      	movs	r0, #0
 80050ce:	f00e f95f 	bl	8013390 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3740      	adds	r7, #64	; 0x40
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	08026fcc 	.word	0x08026fcc
 80050e0:	20000e64 	.word	0x20000e64
 80050e4:	08027008 	.word	0x08027008
 80050e8:	0802702c 	.word	0x0802702c
 80050ec:	200008f8 	.word	0x200008f8

080050f0 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80050fa:	490b      	ldr	r1, [pc, #44]	; (8005128 <cliDefaults+0x38>)
 80050fc:	2000      	movs	r0, #0
 80050fe:	f00e f947 	bl	8013390 <pifLog_Print>
    checkFirstTime(true);
 8005102:	2001      	movs	r0, #1
 8005104:	f001 fb04 	bl	8006710 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 8005108:	4908      	ldr	r1, [pc, #32]	; (800512c <cliDefaults+0x3c>)
 800510a:	2000      	movs	r0, #0
 800510c:	f00e f940 	bl	8013390 <pifLog_Print>
    pif_Delay1ms(10);
 8005110:	200a      	movs	r0, #10
 8005112:	f00c f825 	bl	8011160 <pif_Delay1ms>
    systemReset(false);
 8005116:	2000      	movs	r0, #0
 8005118:	f7fc fdd4 	bl	8001cc4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	08027098 	.word	0x08027098
 800512c:	080270b4 	.word	0x080270b4

08005130 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 8005130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005132:	b093      	sub	sp, #76	; 0x4c
 8005134:	af04      	add	r7, sp, #16
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 800513a:	2100      	movs	r1, #0
 800513c:	2001      	movs	r0, #1
 800513e:	f001 f85d 	bl	80061fc <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 8005142:	49bc      	ldr	r1, [pc, #752]	; (8005434 <cliDump+0x304>)
 8005144:	2000      	movs	r0, #0
 8005146:	f00e f923 	bl	8013390 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 800514a:	2100      	movs	r1, #0
 800514c:	2001      	movs	r0, #1
 800514e:	f7ff f971 	bl	8004434 <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005152:	4bb9      	ldr	r3, [pc, #740]	; (8005438 <cliDump+0x308>)
 8005154:	795b      	ldrb	r3, [r3, #5]
 8005156:	3b01      	subs	r3, #1
 8005158:	4ab8      	ldr	r2, [pc, #736]	; (800543c <cliDump+0x30c>)
 800515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515e:	461a      	mov	r2, r3
 8005160:	49b7      	ldr	r1, [pc, #732]	; (8005440 <cliDump+0x310>)
 8005162:	2000      	movs	r0, #0
 8005164:	f00e f9a2 	bl	80134ac <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005168:	4bb3      	ldr	r3, [pc, #716]	; (8005438 <cliDump+0x308>)
 800516a:	edd3 7a04 	vldr	s15, [r3, #16]
 800516e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005176:	f000 80a4 	beq.w	80052c2 <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 800517a:	2300      	movs	r3, #0
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
 800517e:	e093      	b.n	80052a8 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005180:	4aad      	ldr	r2, [pc, #692]	; (8005438 <cliDump+0x308>)
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	3301      	adds	r3, #1
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	4413      	add	r3, r2
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	f000 808c 	beq.w	80052b2 <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 800519a:	4aa7      	ldr	r2, [pc, #668]	; (8005438 <cliDump+0x308>)
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	3301      	adds	r3, #1
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	4413      	add	r3, r2
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 80051a8:	4aa3      	ldr	r2, [pc, #652]	; (8005438 <cliDump+0x308>)
 80051aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ac:	3301      	adds	r3, #1
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 80051b8:	4a9f      	ldr	r2, [pc, #636]	; (8005438 <cliDump+0x308>)
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	4413      	add	r3, r2
 80051c0:	3318      	adds	r3, #24
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 80051c6:	4a9c      	ldr	r2, [pc, #624]	; (8005438 <cliDump+0x308>)
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	4413      	add	r3, r2
 80051ce:	331c      	adds	r3, #28
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	3301      	adds	r3, #1
 80051d8:	461a      	mov	r2, r3
 80051da:	499a      	ldr	r1, [pc, #616]	; (8005444 <cliDump+0x314>)
 80051dc:	2000      	movs	r0, #0
 80051de:	f00e f965 	bl	80134ac <pifLog_Printf>
            if (thr < 0)
 80051e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80051e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d503      	bpl.n	80051f8 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80051f0:	4995      	ldr	r1, [pc, #596]	; (8005448 <cliDump+0x318>)
 80051f2:	2000      	movs	r0, #0
 80051f4:	f00e f8cc 	bl	8013390 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80051f8:	f107 0308 	add.w	r3, r7, #8
 80051fc:	4618      	mov	r0, r3
 80051fe:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005202:	f7ff f85b 	bl	80042bc <ftoa>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	4990      	ldr	r1, [pc, #576]	; (800544c <cliDump+0x31c>)
 800520c:	2000      	movs	r0, #0
 800520e:	f00e f94d 	bl	80134ac <pifLog_Printf>
            if (roll < 0)
 8005212:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d503      	bpl.n	8005228 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 8005220:	4989      	ldr	r1, [pc, #548]	; (8005448 <cliDump+0x318>)
 8005222:	2000      	movs	r0, #0
 8005224:	f00e f8b4 	bl	8013390 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 8005228:	f107 0308 	add.w	r3, r7, #8
 800522c:	4618      	mov	r0, r3
 800522e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005232:	f7ff f843 	bl	80042bc <ftoa>
 8005236:	4603      	mov	r3, r0
 8005238:	461a      	mov	r2, r3
 800523a:	4984      	ldr	r1, [pc, #528]	; (800544c <cliDump+0x31c>)
 800523c:	2000      	movs	r0, #0
 800523e:	f00e f935 	bl	80134ac <pifLog_Printf>
            if (pitch < 0)
 8005242:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524e:	d503      	bpl.n	8005258 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005250:	497d      	ldr	r1, [pc, #500]	; (8005448 <cliDump+0x318>)
 8005252:	2000      	movs	r0, #0
 8005254:	f00e f89c 	bl	8013390 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005258:	f107 0308 	add.w	r3, r7, #8
 800525c:	4618      	mov	r0, r3
 800525e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005262:	f7ff f82b 	bl	80042bc <ftoa>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	4978      	ldr	r1, [pc, #480]	; (800544c <cliDump+0x31c>)
 800526c:	2000      	movs	r0, #0
 800526e:	f00e f91d 	bl	80134ac <pifLog_Printf>
            if (yaw < 0)
 8005272:	edd7 7a08 	vldr	s15, [r7, #32]
 8005276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	d503      	bpl.n	8005288 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005280:	4971      	ldr	r1, [pc, #452]	; (8005448 <cliDump+0x318>)
 8005282:	2000      	movs	r0, #0
 8005284:	f00e f884 	bl	8013390 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005288:	f107 0308 	add.w	r3, r7, #8
 800528c:	4618      	mov	r0, r3
 800528e:	ed97 0a08 	vldr	s0, [r7, #32]
 8005292:	f7ff f813 	bl	80042bc <ftoa>
 8005296:	4603      	mov	r3, r0
 8005298:	461a      	mov	r2, r3
 800529a:	496d      	ldr	r1, [pc, #436]	; (8005450 <cliDump+0x320>)
 800529c:	2000      	movs	r0, #0
 800529e:	f00e f905 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	3301      	adds	r3, #1
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	2b0b      	cmp	r3, #11
 80052ac:	f67f af68 	bls.w	8005180 <cliDump+0x50>
 80052b0:	e000      	b.n	80052b4 <cliDump+0x184>
                break;
 80052b2:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	3301      	adds	r3, #1
 80052b8:	461a      	mov	r2, r3
 80052ba:	4966      	ldr	r1, [pc, #408]	; (8005454 <cliDump+0x324>)
 80052bc:	2000      	movs	r0, #0
 80052be:	f00e f8f5 	bl	80134ac <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 80052c2:	4b5d      	ldr	r3, [pc, #372]	; (8005438 <cliDump+0x308>)
 80052c4:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8084 	beq.w	80053d6 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80052ce:	2300      	movs	r3, #0
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
 80052d2:	e074      	b.n	80053be <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 80052d4:	4958      	ldr	r1, [pc, #352]	; (8005438 <cliDump+0x308>)
 80052d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	440b      	add	r3, r1
 80052e0:	33d2      	adds	r3, #210	; 0xd2
 80052e2:	f993 3000 	ldrsb.w	r3, [r3]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d06d      	beq.n	80053c6 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	3301      	adds	r3, #1
 80052ee:	461a      	mov	r2, r3
 80052f0:	4959      	ldr	r1, [pc, #356]	; (8005458 <cliDump+0x328>)
 80052f2:	2000      	movs	r0, #0
 80052f4:	f00e f8da 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80052f8:	494f      	ldr	r1, [pc, #316]	; (8005438 <cliDump+0x308>)
 80052fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	440b      	add	r3, r1
 8005304:	33d0      	adds	r3, #208	; 0xd0
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	461a      	mov	r2, r3
 800530c:	4953      	ldr	r1, [pc, #332]	; (800545c <cliDump+0x32c>)
 800530e:	2000      	movs	r0, #0
 8005310:	f00e f8cc 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 8005314:	4948      	ldr	r1, [pc, #288]	; (8005438 <cliDump+0x308>)
 8005316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	440b      	add	r3, r1
 8005320:	33d1      	adds	r3, #209	; 0xd1
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	3301      	adds	r3, #1
 8005326:	461a      	mov	r2, r3
 8005328:	494c      	ldr	r1, [pc, #304]	; (800545c <cliDump+0x32c>)
 800532a:	2000      	movs	r0, #0
 800532c:	f00e f8be 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 8005330:	4941      	ldr	r1, [pc, #260]	; (8005438 <cliDump+0x308>)
 8005332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	440b      	add	r3, r1
 800533c:	33d2      	adds	r3, #210	; 0xd2
 800533e:	f993 3000 	ldrsb.w	r3, [r3]
 8005342:	461a      	mov	r2, r3
 8005344:	4945      	ldr	r1, [pc, #276]	; (800545c <cliDump+0x32c>)
 8005346:	2000      	movs	r0, #0
 8005348:	f00e f8b0 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 800534c:	493a      	ldr	r1, [pc, #232]	; (8005438 <cliDump+0x308>)
 800534e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	440b      	add	r3, r1
 8005358:	33d3      	adds	r3, #211	; 0xd3
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	493f      	ldr	r1, [pc, #252]	; (800545c <cliDump+0x32c>)
 8005360:	2000      	movs	r0, #0
 8005362:	f00e f8a3 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005366:	4934      	ldr	r1, [pc, #208]	; (8005438 <cliDump+0x308>)
 8005368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536a:	4613      	mov	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	440b      	add	r3, r1
 8005372:	33d4      	adds	r3, #212	; 0xd4
 8005374:	f993 3000 	ldrsb.w	r3, [r3]
 8005378:	461a      	mov	r2, r3
 800537a:	4938      	ldr	r1, [pc, #224]	; (800545c <cliDump+0x32c>)
 800537c:	2000      	movs	r0, #0
 800537e:	f00e f895 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 8005382:	492d      	ldr	r1, [pc, #180]	; (8005438 <cliDump+0x308>)
 8005384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	440b      	add	r3, r1
 800538e:	33d5      	adds	r3, #213	; 0xd5
 8005390:	f993 3000 	ldrsb.w	r3, [r3]
 8005394:	461a      	mov	r2, r3
 8005396:	4931      	ldr	r1, [pc, #196]	; (800545c <cliDump+0x32c>)
 8005398:	2000      	movs	r0, #0
 800539a:	f00e f887 	bl	80134ac <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 800539e:	4926      	ldr	r1, [pc, #152]	; (8005438 <cliDump+0x308>)
 80053a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	440b      	add	r3, r1
 80053aa:	33d6      	adds	r3, #214	; 0xd6
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	492b      	ldr	r1, [pc, #172]	; (8005460 <cliDump+0x330>)
 80053b2:	2000      	movs	r0, #0
 80053b4:	f00e f87a 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	3301      	adds	r3, #1
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	2b0f      	cmp	r3, #15
 80053c2:	d987      	bls.n	80052d4 <cliDump+0x1a4>
 80053c4:	e000      	b.n	80053c8 <cliDump+0x298>
                break;
 80053c6:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	3301      	adds	r3, #1
 80053cc:	461a      	mov	r2, r3
 80053ce:	4925      	ldr	r1, [pc, #148]	; (8005464 <cliDump+0x334>)
 80053d0:	2000      	movs	r0, #0
 80053d2:	f00e f86b 	bl	80134ac <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
 80053da:	e024      	b.n	8005426 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80053dc:	2300      	movs	r3, #0
 80053de:	633b      	str	r3, [r7, #48]	; 0x30
 80053e0:	e01b      	b.n	800541a <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 80053e2:	4921      	ldr	r1, [pc, #132]	; (8005468 <cliDump+0x338>)
 80053e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	440b      	add	r3, r1
 80053f0:	33c0      	adds	r3, #192	; 0xc0
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	fa42 f303 	asr.w	r3, r2, r3
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	3301      	adds	r3, #1
 800540c:	4917      	ldr	r1, [pc, #92]	; (800546c <cliDump+0x33c>)
 800540e:	2000      	movs	r0, #0
 8005410:	f00e f84c 	bl	80134ac <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	3301      	adds	r3, #1
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2b0b      	cmp	r3, #11
 800541e:	d9e0      	bls.n	80053e2 <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	3301      	adds	r3, #1
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	2b07      	cmp	r3, #7
 800542a:	d9d7      	bls.n	80053dc <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 800542c:	2300      	movs	r3, #0
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
 8005430:	e057      	b.n	80054e2 <cliDump+0x3b2>
 8005432:	bf00      	nop
 8005434:	080270c4 	.word	0x080270c4
 8005438:	200008f8 	.word	0x200008f8
 800543c:	08028020 	.word	0x08028020
 8005440:	080270f4 	.word	0x080270f4
 8005444:	08027100 	.word	0x08027100
 8005448:	08027108 	.word	0x08027108
 800544c:	0802710c 	.word	0x0802710c
 8005450:	08026cac 	.word	0x08026cac
 8005454:	08027110 	.word	0x08027110
 8005458:	08027124 	.word	0x08027124
 800545c:	08027130 	.word	0x08027130
 8005460:	08026f54 	.word	0x08026f54
 8005464:	08027134 	.word	0x08027134
 8005468:	20000e64 	.word	0x20000e64
 800546c:	08027148 	.word	0x08027148
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	4863      	ldr	r0, [pc, #396]	; (8005604 <cliDump+0x4d4>)
 8005476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4403      	add	r3, r0
 8005482:	33b8      	adds	r3, #184	; 0xb8
 8005484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005488:	461e      	mov	r6, r3
 800548a:	485e      	ldr	r0, [pc, #376]	; (8005604 <cliDump+0x4d4>)
 800548c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4403      	add	r3, r0
 8005498:	33bc      	adds	r3, #188	; 0xbc
 800549a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800549e:	461c      	mov	r4, r3
 80054a0:	4858      	ldr	r0, [pc, #352]	; (8005604 <cliDump+0x4d4>)
 80054a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4403      	add	r3, r0
 80054ae:	33ba      	adds	r3, #186	; 0xba
 80054b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b4:	461d      	mov	r5, r3
 80054b6:	4853      	ldr	r0, [pc, #332]	; (8005604 <cliDump+0x4d4>)
 80054b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	4403      	add	r3, r0
 80054c4:	33be      	adds	r3, #190	; 0xbe
 80054c6:	f993 3000 	ldrsb.w	r3, [r3]
 80054ca:	9302      	str	r3, [sp, #8]
 80054cc:	9501      	str	r5, [sp, #4]
 80054ce:	9400      	str	r4, [sp, #0]
 80054d0:	4633      	mov	r3, r6
 80054d2:	460a      	mov	r2, r1
 80054d4:	494c      	ldr	r1, [pc, #304]	; (8005608 <cliDump+0x4d8>)
 80054d6:	2000      	movs	r0, #0
 80054d8:	f00d ffe8 	bl	80134ac <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	3301      	adds	r3, #1
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
 80054e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e4:	2b07      	cmp	r3, #7
 80054e6:	d9c3      	bls.n	8005470 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80054e8:	f001 fcba 	bl	8006e60 <featureMask>
 80054ec:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80054f2:	4a46      	ldr	r2, [pc, #280]	; (800560c <cliDump+0x4dc>)
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80054fe:	4a43      	ldr	r2, [pc, #268]	; (800560c <cliDump+0x4dc>)
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005506:	461a      	mov	r2, r3
 8005508:	4941      	ldr	r1, [pc, #260]	; (8005610 <cliDump+0x4e0>)
 800550a:	2000      	movs	r0, #0
 800550c:	f00d ffce 	bl	80134ac <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	3301      	adds	r3, #1
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005516:	e7ec      	b.n	80054f2 <cliDump+0x3c2>
            break;
 8005518:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800551e:	4a3b      	ldr	r2, [pc, #236]	; (800560c <cliDump+0x4dc>)
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d015      	beq.n	8005556 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 800552a:	2201      	movs	r2, #1
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	461a      	mov	r2, r3
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 800553c:	4a33      	ldr	r2, [pc, #204]	; (800560c <cliDump+0x4dc>)
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005544:	461a      	mov	r2, r3
 8005546:	4933      	ldr	r1, [pc, #204]	; (8005614 <cliDump+0x4e4>)
 8005548:	2000      	movs	r0, #0
 800554a:	f00d ffaf 	bl	80134ac <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	3301      	adds	r3, #1
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005554:	e7e3      	b.n	800551e <cliDump+0x3ee>
            break;
 8005556:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005558:	2300      	movs	r3, #0
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
 800555c:	e012      	b.n	8005584 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800555e:	4a2e      	ldr	r2, [pc, #184]	; (8005618 <cliDump+0x4e8>)
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005562:	4413      	add	r3, r2
 8005564:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	4619      	mov	r1, r3
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <cliDump+0x4ec>)
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	4413      	add	r3, r2
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005578:	443b      	add	r3, r7
 800557a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	3301      	adds	r3, #1
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	4b24      	ldr	r3, [pc, #144]	; (8005618 <cliDump+0x4e8>)
 8005586:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800558a:	461a      	mov	r2, r3
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	4293      	cmp	r3, r2
 8005590:	d3e5      	bcc.n	800555e <cliDump+0x42e>
    buf[i] = '\0';
 8005592:	f107 0208 	add.w	r2, r7, #8
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	4413      	add	r3, r2
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	461a      	mov	r2, r3
 80055a4:	491e      	ldr	r1, [pc, #120]	; (8005620 <cliDump+0x4f0>)
 80055a6:	2000      	movs	r0, #0
 80055a8:	f00d ff80 	bl	80134ac <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 80055ac:	2300      	movs	r3, #0
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
 80055b0:	e01f      	b.n	80055f2 <cliDump+0x4c2>
        setval = &valueTable[i];
 80055b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <cliDump+0x4f4>)
 80055be:	4413      	add	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 80055c2:	4918      	ldr	r1, [pc, #96]	; (8005624 <cliDump+0x4f4>)
 80055c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	4914      	ldr	r1, [pc, #80]	; (8005628 <cliDump+0x4f8>)
 80055d6:	2000      	movs	r0, #0
 80055d8:	f00d ff68 	bl	80134ac <pifLog_Printf>
        cliPrintVar(setval, 0);
 80055dc:	2100      	movs	r1, #0
 80055de:	69b8      	ldr	r0, [r7, #24]
 80055e0:	f000 fb4a 	bl	8005c78 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 80055e4:	4911      	ldr	r1, [pc, #68]	; (800562c <cliDump+0x4fc>)
 80055e6:	2000      	movs	r0, #0
 80055e8:	f00d fed2 	bl	8013390 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	3301      	adds	r3, #1
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	2b8e      	cmp	r3, #142	; 0x8e
 80055f6:	d9dc      	bls.n	80055b2 <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	373c      	adds	r7, #60	; 0x3c
 80055fe:	46bd      	mov	sp, r7
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005602:	bf00      	nop
 8005604:	20000e64 	.word	0x20000e64
 8005608:	08027164 	.word	0x08027164
 800560c:	08028084 	.word	0x08028084
 8005610:	0802717c 	.word	0x0802717c
 8005614:	0802718c 	.word	0x0802718c
 8005618:	200008f8 	.word	0x200008f8
 800561c:	08028d7c 	.word	0x08028d7c
 8005620:	0802719c 	.word	0x0802719c
 8005624:	08028250 	.word	0x08028250
 8005628:	080271a8 	.word	0x080271a8
 800562c:	08026ccc 	.word	0x08026ccc

08005630 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 800563a:	490c      	ldr	r1, [pc, #48]	; (800566c <cliExit+0x3c>)
 800563c:	2000      	movs	r0, #0
 800563e:	f00d fea7 	bl	8013390 <pifLog_Print>
    *cliBuffer = '\0';
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <cliExit+0x40>)
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <cliExit+0x44>)
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <cliExit+0x48>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005654:	f005 fcf0 	bl	800b038 <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 faec 	bl	8005c38 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	080271b4 	.word	0x080271b4
 8005670:	200008c4 	.word	0x200008c4
 8005674:	200008f4 	.word	0x200008f4
 8005678:	200008c0 	.word	0x200008c0

0800567c <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 8005686:	f001 fbeb 	bl	8006e60 <featureMask>
 800568a:	60f8      	str	r0, [r7, #12]

    if (argc == 0) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d127      	bne.n	80056e2 <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 8005692:	4950      	ldr	r1, [pc, #320]	; (80057d4 <cliFeature+0x158>)
 8005694:	2000      	movs	r0, #0
 8005696:	f00d fe7b 	bl	8013390 <pifLog_Print>
        for (i = 0; ; i++) {
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800569e:	4a4e      	ldr	r2, [pc, #312]	; (80057d8 <cliFeature+0x15c>)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d015      	beq.n	80056d6 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 80056aa:	2201      	movs	r2, #1
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80056bc:	4a46      	ldr	r2, [pc, #280]	; (80057d8 <cliFeature+0x15c>)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c4:	461a      	mov	r2, r3
 80056c6:	4945      	ldr	r1, [pc, #276]	; (80057dc <cliFeature+0x160>)
 80056c8:	2000      	movs	r0, #0
 80056ca:	f00d feef 	bl	80134ac <pifLog_Printf>
        for (i = 0; ; i++) {
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	3301      	adds	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80056d4:	e7e3      	b.n	800569e <cliFeature+0x22>
                break;
 80056d6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80056d8:	4941      	ldr	r1, [pc, #260]	; (80057e0 <cliFeature+0x164>)
 80056da:	2000      	movs	r0, #0
 80056dc:	f00d fe58 	bl	8013390 <pifLog_Print>
 80056e0:	e073      	b.n	80057ca <cliFeature+0x14e>
    } else if (strcasecmp(argv[0], "list") == 0) {
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	493f      	ldr	r1, [pc, #252]	; (80057e4 <cliFeature+0x168>)
 80056e8:	4618      	mov	r0, r3
 80056ea:	f01d fdb5 	bl	8023258 <strcasecmp>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d11e      	bne.n	8005732 <cliFeature+0xb6>
        pifLog_Print(LT_NONE, "Available features: ");
 80056f4:	493c      	ldr	r1, [pc, #240]	; (80057e8 <cliFeature+0x16c>)
 80056f6:	2000      	movs	r0, #0
 80056f8:	f00d fe4a 	bl	8013390 <pifLog_Print>
        for (i = 0; ; i++) {
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005700:	4a35      	ldr	r2, [pc, #212]	; (80057d8 <cliFeature+0x15c>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <cliFeature+0xaa>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800570c:	4a32      	ldr	r2, [pc, #200]	; (80057d8 <cliFeature+0x15c>)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	461a      	mov	r2, r3
 8005716:	4931      	ldr	r1, [pc, #196]	; (80057dc <cliFeature+0x160>)
 8005718:	2000      	movs	r0, #0
 800571a:	f00d fec7 	bl	80134ac <pifLog_Printf>
        for (i = 0; ; i++) {
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	3301      	adds	r3, #1
 8005722:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005724:	e7ec      	b.n	8005700 <cliFeature+0x84>
                break;
 8005726:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005728:	492d      	ldr	r1, [pc, #180]	; (80057e0 <cliFeature+0x164>)
 800572a:	2000      	movs	r0, #0
 800572c:	f00d fe30 	bl	8013390 <pifLog_Print>
 8005730:	e04b      	b.n	80057ca <cliFeature+0x14e>
    } else {
        bool remove = false;
 8005732:	2300      	movs	r3, #0
 8005734:	74fb      	strb	r3, [r7, #19]
        if (argv[0][0] == '-') {
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b2d      	cmp	r3, #45	; 0x2d
 800573e:	d101      	bne.n	8005744 <cliFeature+0xc8>
            // remove feature
            remove = true;
 8005740:	2301      	movs	r3, #1
 8005742:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <cliFeature+0x15c>)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <cliFeature+0xe2>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005754:	4925      	ldr	r1, [pc, #148]	; (80057ec <cliFeature+0x170>)
 8005756:	2000      	movs	r0, #0
 8005758:	f00d fe1a 	bl	8013390 <pifLog_Print>
                break;
 800575c:	e035      	b.n	80057ca <cliFeature+0x14e>
            }
            if (strcasecmp(argv[0] + 1, featureNames[i]) == 0) {
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	491c      	ldr	r1, [pc, #112]	; (80057d8 <cliFeature+0x15c>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f01d fd72 	bl	8023258 <strcasecmp>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d123      	bne.n	80057c2 <cliFeature+0x146>
                if (remove) {
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <cliFeature+0x11c>
                    featureClear(1 << i);
 8005780:	2201      	movs	r2, #1
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fb49 	bl	8006e20 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 800578e:	4918      	ldr	r1, [pc, #96]	; (80057f0 <cliFeature+0x174>)
 8005790:	2000      	movs	r0, #0
 8005792:	f00d fdfd 	bl	8013390 <pifLog_Print>
 8005796:	e00a      	b.n	80057ae <cliFeature+0x132>
                } else {
                    featureSet(1 << i);
 8005798:	2201      	movs	r2, #1
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fb2b 	bl	8006dfc <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 80057a6:	4913      	ldr	r1, [pc, #76]	; (80057f4 <cliFeature+0x178>)
 80057a8:	2000      	movs	r0, #0
 80057aa:	f00d fdf1 	bl	8013390 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <cliFeature+0x15c>)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b6:	461a      	mov	r2, r3
 80057b8:	490f      	ldr	r1, [pc, #60]	; (80057f8 <cliFeature+0x17c>)
 80057ba:	2000      	movs	r0, #0
 80057bc:	f00d fe76 	bl	80134ac <pifLog_Printf>
                break;
 80057c0:	e003      	b.n	80057ca <cliFeature+0x14e>
        for (i = 0; ; i++) {
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 80057c8:	e7be      	b.n	8005748 <cliFeature+0xcc>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	080271cc 	.word	0x080271cc
 80057d8:	08028084 	.word	0x08028084
 80057dc:	080271e0 	.word	0x080271e0
 80057e0:	08026ccc 	.word	0x08026ccc
 80057e4:	080271e4 	.word	0x080271e4
 80057e8:	080271ec 	.word	0x080271ec
 80057ec:	08027204 	.word	0x08027204
 80057f0:	08027220 	.word	0x08027220
 80057f4:	0802722c 	.word	0x0802722c
 80057f8:	08026cac 	.word	0x08026cac

080057fc <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 8005806:	f003 fb61 	bl	8008ecc <gpsSetPassthrough>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <cliGpsPassthrough+0x1a>
 8005810:	2b01      	cmp	r3, #1
 8005812:	d005      	beq.n	8005820 <cliGpsPassthrough+0x24>
 8005814:	e009      	b.n	800582a <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 8005816:	490a      	ldr	r1, [pc, #40]	; (8005840 <cliGpsPassthrough+0x44>)
 8005818:	2000      	movs	r0, #0
 800581a:	f00d fdb9 	bl	8013390 <pifLog_Print>
        break;
 800581e:	e009      	b.n	8005834 <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005820:	4908      	ldr	r1, [pc, #32]	; (8005844 <cliGpsPassthrough+0x48>)
 8005822:	2000      	movs	r0, #0
 8005824:	f00d fdb4 	bl	8013390 <pifLog_Print>
        break;
 8005828:	e004      	b.n	8005834 <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 800582a:	4907      	ldr	r1, [pc, #28]	; (8005848 <cliGpsPassthrough+0x4c>)
 800582c:	2000      	movs	r0, #0
 800582e:	f00d fdaf 	bl	8013390 <pifLog_Print>
        break;
 8005832:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08027238 	.word	0x08027238
 8005844:	08027258 	.word	0x08027258
 8005848:	08027278 	.word	0x08027278

0800584c <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 1) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc02      	bgt.n	8005862 <cliMap+0x16>
 800585c:	f06f 0302 	mvn.w	r3, #2
 8005860:	e096      	b.n	8005990 <cliMap+0x144>

    len = strlen(argv[0]);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fcb6 	bl	80001d8 <strlen>
 800586c:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 800586e:	4b4a      	ldr	r3, [pc, #296]	; (8005998 <cliMap+0x14c>)
 8005870:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005874:	461a      	mov	r2, r3
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4293      	cmp	r3, r2
 800587a:	d15a      	bne.n	8005932 <cliMap+0xe6>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 800587c:	2300      	movs	r3, #0
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	e01b      	b.n	80058ba <cliMap+0x6e>
            argv[0][i] = toupper((unsigned char)argv[0][i]);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	75fb      	strb	r3, [r7, #23]
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	3301      	adds	r3, #1
 8005892:	4a42      	ldr	r2, [pc, #264]	; (800599c <cliMap+0x150>)
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d102      	bne.n	80058a6 <cliMap+0x5a>
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	3b20      	subs	r3, #32
 80058a4:	e000      	b.n	80058a8 <cliMap+0x5c>
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	6811      	ldr	r1, [r2, #0]
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	4b37      	ldr	r3, [pc, #220]	; (8005998 <cliMap+0x14c>)
 80058bc:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80058c0:	461a      	mov	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d3dc      	bcc.n	8005882 <cliMap+0x36>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	e025      	b.n	800591a <cliMap+0xce>
            if (strchr(rcChannelLetters, argv[0][i]) && !strchr(argv[0] + i + 1, argv[0][i]))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	4831      	ldr	r0, [pc, #196]	; (80059a0 <cliMap+0x154>)
 80058dc:	f01d fce5 	bl	80232aa <strchr>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d013      	beq.n	800590e <cliMap+0xc2>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	18d0      	adds	r0, r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	f01d fcd5 	bl	80232aa <strchr>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <cliMap+0xc2>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3301      	adds	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e005      	b.n	800591a <cliMap+0xce>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 800590e:	4925      	ldr	r1, [pc, #148]	; (80059a4 <cliMap+0x158>)
 8005910:	2000      	movs	r0, #0
 8005912:	f00d fd3d 	bl	8013390 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005916:	2300      	movs	r3, #0
 8005918:	e03a      	b.n	8005990 <cliMap+0x144>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <cliMap+0x14c>)
 800591c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005920:	461a      	mov	r2, r3
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	4293      	cmp	r3, r2
 8005926:	d3d2      	bcc.n	80058ce <cliMap+0x82>
        }
        parseRcChannels(argv[0]);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fcc3 	bl	80062b8 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005932:	491d      	ldr	r1, [pc, #116]	; (80059a8 <cliMap+0x15c>)
 8005934:	2000      	movs	r0, #0
 8005936:	f00d fd2b 	bl	8013390 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	e012      	b.n	8005966 <cliMap+0x11a>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <cliMap+0x14c>)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <cliMap+0x154>)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	f101 0320 	add.w	r3, r1, #32
 800595a:	443b      	add	r3, r7
 800595c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3301      	adds	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <cliMap+0x14c>)
 8005968:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800596c:	461a      	mov	r2, r3
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4293      	cmp	r3, r2
 8005972:	d3e5      	bcc.n	8005940 <cliMap+0xf4>
    out[i] = '\0';
 8005974:	f107 020c 	add.w	r2, r7, #12
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005980:	f107 030c 	add.w	r3, r7, #12
 8005984:	461a      	mov	r2, r3
 8005986:	4909      	ldr	r1, [pc, #36]	; (80059ac <cliMap+0x160>)
 8005988:	2000      	movs	r0, #0
 800598a:	f00d fd8f 	bl	80134ac <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	200008f8 	.word	0x200008f8
 800599c:	080296ec 	.word	0x080296ec
 80059a0:	08028d7c 	.word	0x08028d7c
 80059a4:	080272a0 	.word	0x080272a0
 80059a8:	080272c0 	.word	0x080272c0
 80059ac:	08026cac 	.word	0x08026cac

080059b0 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10c      	bne.n	80059da <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 80059c0:	4b46      	ldr	r3, [pc, #280]	; (8005adc <cliMixer+0x12c>)
 80059c2:	795b      	ldrb	r3, [r3, #5]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	4a46      	ldr	r2, [pc, #280]	; (8005ae0 <cliMixer+0x130>)
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	461a      	mov	r2, r3
 80059ce:	4945      	ldr	r1, [pc, #276]	; (8005ae4 <cliMixer+0x134>)
 80059d0:	2000      	movs	r0, #0
 80059d2:	f00d fd6b 	bl	80134ac <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e07b      	b.n	8005ad2 <cliMixer+0x122>
    } else if (strcasecmp(argv[0], "list") == 0) {
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4942      	ldr	r1, [pc, #264]	; (8005ae8 <cliMixer+0x138>)
 80059e0:	4618      	mov	r0, r3
 80059e2:	f01d fc39 	bl	8023258 <strcasecmp>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d11f      	bne.n	8005a2c <cliMixer+0x7c>
        pifLog_Print(LT_NONE, "Available mixers: ");
 80059ec:	493f      	ldr	r1, [pc, #252]	; (8005aec <cliMixer+0x13c>)
 80059ee:	2000      	movs	r0, #0
 80059f0:	f00d fcce 	bl	8013390 <pifLog_Print>
        for (i = 0; ; i++) {
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 80059f8:	4a39      	ldr	r2, [pc, #228]	; (8005ae0 <cliMixer+0x130>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <cliMixer+0x6e>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005a04:	4a36      	ldr	r2, [pc, #216]	; (8005ae0 <cliMixer+0x130>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4938      	ldr	r1, [pc, #224]	; (8005af0 <cliMixer+0x140>)
 8005a10:	2000      	movs	r0, #0
 8005a12:	f00d fd4b 	bl	80134ac <pifLog_Printf>
        for (i = 0; ; i++) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005a1c:	e7ec      	b.n	80059f8 <cliMixer+0x48>
                break;
 8005a1e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005a20:	4934      	ldr	r1, [pc, #208]	; (8005af4 <cliMixer+0x144>)
 8005a22:	2000      	movs	r0, #0
 8005a24:	f00d fcb4 	bl	8013390 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e052      	b.n	8005ad2 <cliMixer+0x122>
    }

    for (i = 0; ; i++) {
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005a30:	4a2b      	ldr	r2, [pc, #172]	; (8005ae0 <cliMixer+0x130>)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <cliMixer+0x98>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005a3c:	492e      	ldr	r1, [pc, #184]	; (8005af8 <cliMixer+0x148>)
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f00d fca6 	bl	8013390 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e044      	b.n	8005ad2 <cliMixer+0x122>
        }
        if (strcasecmp(argv[0], mixerNames[i]) == 0) {
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4924      	ldr	r1, [pc, #144]	; (8005ae0 <cliMixer+0x130>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f01d fbfe 	bl	8023258 <strcasecmp>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d131      	bne.n	8005ac6 <cliMixer+0x116>
            mcfg.mixerConfiguration = i + 1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	3301      	adds	r3, #1
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4b1c      	ldr	r3, [pc, #112]	; (8005adc <cliMixer+0x12c>)
 8005a6c:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <cliMixer+0x130>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a76:	461a      	mov	r2, r3
 8005a78:	4920      	ldr	r1, [pc, #128]	; (8005afc <cliMixer+0x14c>)
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f00d fd16 	bl	80134ac <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <cliMixer+0x12c>)
 8005a82:	795b      	ldrb	r3, [r3, #5]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d003      	beq.n	8005a90 <cliMixer+0xe0>
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <cliMixer+0x12c>)
 8005a8a:	795b      	ldrb	r3, [r3, #5]
 8005a8c:	2b0e      	cmp	r3, #14
 8005a8e:	d11e      	bne.n	8005ace <cliMixer+0x11e>
                cfg.dynThrPID = 90;
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <cliMixer+0x150>)
 8005a92:	225a      	movs	r2, #90	; 0x5a
 8005a94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005a98:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <cliMixer+0x150>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <cliMixer+0x150>)
 8005aa2:	221e      	movs	r2, #30
 8005aa4:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005aa6:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <cliMixer+0x150>)
 8005aa8:	2214      	movs	r2, #20
 8005aaa:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <cliMixer+0x150>)
 8005aae:	222d      	movs	r2, #45	; 0x2d
 8005ab0:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <cliMixer+0x150>)
 8005ab4:	221e      	movs	r2, #30
 8005ab6:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <cliMixer+0x150>)
 8005aba:	2214      	movs	r2, #20
 8005abc:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <cliMixer+0x150>)
 8005ac0:	222d      	movs	r2, #45	; 0x2d
 8005ac2:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005ac4:	e003      	b.n	8005ace <cliMixer+0x11e>
    for (i = 0; ; i++) {
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005acc:	e7b0      	b.n	8005a30 <cliMixer+0x80>
            break;
 8005ace:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200008f8 	.word	0x200008f8
 8005ae0:	08028020 	.word	0x08028020
 8005ae4:	080272d8 	.word	0x080272d8
 8005ae8:	080271e4 	.word	0x080271e4
 8005aec:	080272ec 	.word	0x080272ec
 8005af0:	080271e0 	.word	0x080271e0
 8005af4:	08026ccc 	.word	0x08026ccc
 8005af8:	08026ce0 	.word	0x08026ce0
 8005afc:	08027300 	.word	0x08027300
 8005b00:	20000e64 	.word	0x20000e64

08005b04 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005b1c:	4926      	ldr	r1, [pc, #152]	; (8005bb8 <cliMotor+0xb4>)
 8005b1e:	2000      	movs	r0, #0
 8005b20:	f00d fc36 	bl	8013390 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e042      	b.n	8005bae <cliMotor+0xaa>
    }

    if (argc < 2) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	dc0a      	bgt.n	8005b44 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005b2e:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <cliMotor+0xb8>)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4921      	ldr	r1, [pc, #132]	; (8005bc0 <cliMotor+0xbc>)
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f00d fcb6 	bl	80134ac <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e034      	b.n	8005bae <cliMotor+0xaa>
    }

    motor_index = atoi(argv[0]);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f01d fa23 	bl	8022f94 <atoi>
 8005b4e:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[1]);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	3304      	adds	r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f01d fa1c 	bl	8022f94 <atoi>
 8005b5c:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	db02      	blt.n	8005b6a <cliMotor+0x66>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b0b      	cmp	r3, #11
 8005b68:	dd06      	ble.n	8005b78 <cliMotor+0x74>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005b6a:	220c      	movs	r2, #12
 8005b6c:	4915      	ldr	r1, [pc, #84]	; (8005bc4 <cliMotor+0xc0>)
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f00d fc9c 	bl	80134ac <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e01a      	b.n	8005bae <cliMotor+0xaa>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b7e:	db03      	blt.n	8005b88 <cliMotor+0x84>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b86:	dd05      	ble.n	8005b94 <cliMotor+0x90>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005b88:	490f      	ldr	r1, [pc, #60]	; (8005bc8 <cliMotor+0xc4>)
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f00d fc00 	bl	8013390 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e00c      	b.n	8005bae <cliMotor+0xaa>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	490c      	ldr	r1, [pc, #48]	; (8005bcc <cliMotor+0xc8>)
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f00d fc86 	bl	80134ac <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	b219      	sxth	r1, r3
 8005ba4:	4a05      	ldr	r2, [pc, #20]	; (8005bbc <cliMotor+0xb8>)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08027314 	.word	0x08027314
 8005bbc:	200015b8 	.word	0x200015b8
 8005bc0:	08027350 	.word	0x08027350
 8005bc4:	08027368 	.word	0x08027368
 8005bc8:	08027390 	.word	0x08027390
 8005bcc:	080273b4 	.word	0x080273b4

08005bd0 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d108      	bne.n	8005bf2 <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <cliProfile+0x60>)
 8005be2:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005be6:	461a      	mov	r2, r3
 8005be8:	4912      	ldr	r1, [pc, #72]	; (8005c34 <cliProfile+0x64>)
 8005bea:	2000      	movs	r0, #0
 8005bec:	f00d fc5e 	bl	80134ac <pifLog_Printf>
 8005bf0:	e018      	b.n	8005c24 <cliProfile+0x54>
    } else {
        i = atoi(argv[0]);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f01d f9cc 	bl	8022f94 <atoi>
 8005bfc:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db0f      	blt.n	8005c24 <cliProfile+0x54>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	dc0c      	bgt.n	8005c24 <cliProfile+0x54>
            mcfg.current_profile = i;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <cliProfile+0x60>)
 8005c10:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005c14:	2100      	movs	r1, #0
 8005c16:	2000      	movs	r0, #0
 8005c18:	f000 fcf8 	bl	800660c <writeEEPROM>
            cliProfile(1, NULL);
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f7ff ffd6 	bl	8005bd0 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200008f8 	.word	0x200008f8
 8005c34:	080273d0 	.word	0x080273d0

08005c38 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005c42:	490b      	ldr	r1, [pc, #44]	; (8005c70 <cliSave+0x38>)
 8005c44:	2000      	movs	r0, #0
 8005c46:	f00d fba3 	bl	8013390 <pifLog_Print>
    writeEEPROM(0, true);
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f000 fcdd 	bl	800660c <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005c52:	4908      	ldr	r1, [pc, #32]	; (8005c74 <cliSave+0x3c>)
 8005c54:	2000      	movs	r0, #0
 8005c56:	f00d fb9b 	bl	8013390 <pifLog_Print>
    pif_Delay1ms(10);
 8005c5a:	200a      	movs	r0, #10
 8005c5c:	f00b fa80 	bl	8011160 <pif_Delay1ms>
    systemReset(false);
 8005c60:	2000      	movs	r0, #0
 8005c62:	f7fc f82f 	bl	8001cc4 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	080273e8 	.word	0x080273e8
 8005c74:	080273f4 	.word	0x080273f4

08005c78 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	791b      	ldrb	r3, [r3, #4]
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	d864      	bhi.n	8005d58 <cliPrintVar+0xe0>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <cliPrintVar+0x1c>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cad 	.word	0x08005cad
 8005c98:	08005cb7 	.word	0x08005cb7
 8005c9c:	08005cc3 	.word	0x08005cc3
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005cd9 	.word	0x08005cd9
 8005ca8:	08005ce3 	.word	0x08005ce3
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	617b      	str	r3, [r7, #20]
            break;
 8005cb4:	e050      	b.n	8005d58 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f993 3000 	ldrsb.w	r3, [r3]
 8005cbe:	617b      	str	r3, [r7, #20]
            break;
 8005cc0:	e04a      	b.n	8005d58 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	617b      	str	r3, [r7, #20]
            break;
 8005cca:	e045      	b.n	8005d58 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd4:	617b      	str	r3, [r7, #20]
            break;
 8005cd6:	e03f      	b.n	8005d58 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	617b      	str	r3, [r7, #20]
            break;
 8005ce0:	e03a      	b.n	8005d58 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	edd3 7a00 	vldr	s15, [r3]
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	4618      	mov	r0, r3
 8005cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf4:	f7fe fae2 	bl	80042bc <ftoa>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4921      	ldr	r1, [pc, #132]	; (8005d84 <cliPrintVar+0x10c>)
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f00d fbd4 	bl	80134ac <pifLog_Printf>
            if (full) {
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d037      	beq.n	8005d7a <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d16:	f107 030c 	add.w	r3, r7, #12
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d20:	f7fe facc 	bl	80042bc <ftoa>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	4917      	ldr	r1, [pc, #92]	; (8005d88 <cliPrintVar+0x110>)
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f00d fbbe 	bl	80134ac <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	ee07 3a90 	vmov	s15, r3
 8005d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d3c:	f107 030c 	add.w	r3, r7, #12
 8005d40:	4618      	mov	r0, r3
 8005d42:	eeb0 0a67 	vmov.f32	s0, s15
 8005d46:	f7fe fab9 	bl	80042bc <ftoa>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	490e      	ldr	r1, [pc, #56]	; (8005d88 <cliPrintVar+0x110>)
 8005d50:	2000      	movs	r0, #0
 8005d52:	f00d fbab 	bl	80134ac <pifLog_Printf>
 8005d56:	e011      	b.n	8005d7c <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	490c      	ldr	r1, [pc, #48]	; (8005d8c <cliPrintVar+0x114>)
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f00d fba5 	bl	80134ac <pifLog_Printf>
    if (full)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	4907      	ldr	r1, [pc, #28]	; (8005d90 <cliPrintVar+0x118>)
 8005d72:	2000      	movs	r0, #0
 8005d74:	f00d fb9a 	bl	80134ac <pifLog_Printf>
 8005d78:	e000      	b.n	8005d7c <cliPrintVar+0x104>
            return; // return from case for float only
 8005d7a:	bf00      	nop
}
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	0802710c 	.word	0x0802710c
 8005d88:	08027404 	.word	0x08027404
 8005d8c:	08026fb8 	.word	0x08026fb8
 8005d90:	08027408 	.word	0x08027408

08005d94 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d824      	bhi.n	8005df0 <cliSetVar+0x5c>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <cliSetVar+0x18>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dc5 	.word	0x08005dc5
 8005db4:	08005dd1 	.word	0x08005dd1
 8005db8:	08005dd1 	.word	0x08005dd1
 8005dbc:	08005ddd 	.word	0x08005ddd
 8005dc0:	08005de7 	.word	0x08005de7
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
            break;
 8005dce:	e00f      	b.n	8005df0 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	b212      	sxth	r2, r2
 8005dd8:	801a      	strh	r2, [r3, #0]
            break;
 8005dda:	e009      	b.n	8005df0 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	601a      	str	r2, [r3, #0]
            break;
 8005de4:	e004      	b.n	8005df0 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	601a      	str	r2, [r3, #0]
            break;
 8005dee:	bf00      	nop
    }
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]

    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <cliSet+0x2e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d135      	bne.n	8005e8c <cliSet+0x90>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b2a      	cmp	r3, #42	; 0x2a
 8005e28:	d130      	bne.n	8005e8c <cliSet+0x90>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8005e2a:	4987      	ldr	r1, [pc, #540]	; (8006048 <cliSet+0x24c>)
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f00d faaf 	bl	8013390 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	e025      	b.n	8005e84 <cliSet+0x88>
            val = &valueTable[i];
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4a82      	ldr	r2, [pc, #520]	; (800604c <cliSet+0x250>)
 8005e44:	4413      	add	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8005e48:	4980      	ldr	r1, [pc, #512]	; (800604c <cliSet+0x250>)
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	497d      	ldr	r1, [pc, #500]	; (8006050 <cliSet+0x254>)
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f00d fb25 	bl	80134ac <pifLog_Printf>
            cliPrintVar(val, strlen(argv[0])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa f9b6 	bl	80001d8 <strlen>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff ff01 	bl	8005c78 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8005e76:	4977      	ldr	r1, [pc, #476]	; (8006054 <cliSet+0x258>)
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f00d fa89 	bl	8013390 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3301      	adds	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b8e      	cmp	r3, #142	; 0x8e
 8005e88:	d9d6      	bls.n	8005e38 <cliSet+0x3c>
    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 8005e8a:	e0d7      	b.n	800603c <cliSet+0x240>
        }
    } else if ((eqptr = strstr(argv[0], "=")) != NULL) {
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	213d      	movs	r1, #61	; 0x3d
 8005e92:	4618      	mov	r0, r3
 8005e94:	f01d fa09 	bl	80232aa <strchr>
 8005e98:	61b8      	str	r0, [r7, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8096 	beq.w	8005fce <cliSet+0x1d2>
        // has equal, set var
        eqptr++;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 8005ea8:	69b8      	ldr	r0, [r7, #24]
 8005eaa:	f01d f873 	bl	8022f94 <atoi>
 8005eae:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8005eb0:	69b8      	ldr	r0, [r7, #24]
 8005eb2:	f7fe f90f 	bl	80040d4 <_atof>
 8005eb6:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e07c      	b.n	8005fba <cliSet+0x1be>
            val = &valueTable[i];
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4a60      	ldr	r2, [pc, #384]	; (800604c <cliSet+0x250>)
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[0], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681c      	ldr	r4, [r3, #0]
 8005ed4:	495d      	ldr	r1, [pc, #372]	; (800604c <cliSet+0x250>)
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	681d      	ldr	r5, [r3, #0]
 8005ee4:	4959      	ldr	r1, [pc, #356]	; (800604c <cliSet+0x250>)
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fa f96f 	bl	80001d8 <strlen>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	4629      	mov	r1, r5
 8005f00:	4620      	mov	r0, r4
 8005f02:	f01d f9e7 	bl	80232d4 <strncasecmp>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d153      	bne.n	8005fb4 <cliSet+0x1b8>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8005f0c:	494f      	ldr	r1, [pc, #316]	; (800604c <cliSet+0x250>)
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f26:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	db39      	blt.n	8005fa8 <cliSet+0x1ac>
 8005f34:	4945      	ldr	r1, [pc, #276]	; (800604c <cliSet+0x250>)
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	3310      	adds	r3, #16
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5a:	d825      	bhi.n	8005fa8 <cliSet+0x1ac>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 8005f5c:	493b      	ldr	r1, [pc, #236]	; (800604c <cliSet+0x250>)
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d102      	bne.n	8005f78 <cliSet+0x17c>
                        tmp.float_value = valuef;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	e001      	b.n	8005f7c <cliSet+0x180>
                    else
                        tmp.int_value = value;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ff08 	bl	8005d94 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 8005f84:	4931      	ldr	r1, [pc, #196]	; (800604c <cliSet+0x250>)
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	4930      	ldr	r1, [pc, #192]	; (8006058 <cliSet+0x25c>)
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f00d fa87 	bl	80134ac <pifLog_Printf>
                    cliPrintVar(val, 0);
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff fe69 	bl	8005c78 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 8005fa6:	e003      	b.n	8005fb0 <cliSet+0x1b4>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 8005fa8:	492c      	ldr	r1, [pc, #176]	; (800605c <cliSet+0x260>)
 8005faa:	2000      	movs	r0, #0
 8005fac:	f00d f9f0 	bl	8013390 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e044      	b.n	800603e <cliSet+0x242>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b8e      	cmp	r3, #142	; 0x8e
 8005fbe:	f67f af7f 	bls.w	8005ec0 <cliSet+0xc4>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 8005fc2:	4927      	ldr	r1, [pc, #156]	; (8006060 <cliSet+0x264>)
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f00d f9e3 	bl	8013390 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e037      	b.n	800603e <cliSet+0x242>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	e030      	b.n	8006036 <cliSet+0x23a>
            if (strstr(valueTable[i].name, argv[0])) {
 8005fd4:	491d      	ldr	r1, [pc, #116]	; (800604c <cliSet+0x250>)
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f01d f9a7 	bl	802333e <strstr>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01c      	beq.n	8006030 <cliSet+0x234>
                val = &valueTable[i];
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4a12      	ldr	r2, [pc, #72]	; (800604c <cliSet+0x250>)
 8006002:	4413      	add	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006006:	4911      	ldr	r1, [pc, #68]	; (800604c <cliSet+0x250>)
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	490d      	ldr	r1, [pc, #52]	; (8006050 <cliSet+0x254>)
 800601a:	2000      	movs	r0, #0
 800601c:	f00d fa46 	bl	80134ac <pifLog_Printf>
                cliPrintVar(val, 0);
 8006020:	2100      	movs	r1, #0
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fe28 	bl	8005c78 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 8006028:	490a      	ldr	r1, [pc, #40]	; (8006054 <cliSet+0x258>)
 800602a:	2000      	movs	r0, #0
 800602c:	f00d f9b0 	bl	8013390 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3301      	adds	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b8e      	cmp	r3, #142	; 0x8e
 800603a:	d9cb      	bls.n	8005fd4 <cliSet+0x1d8>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bdb0      	pop	{r4, r5, r7, pc}
 8006046:	bf00      	nop
 8006048:	08027410 	.word	0x08027410
 800604c:	08028250 	.word	0x08028250
 8006050:	08027428 	.word	0x08027428
 8006054:	08026ccc 	.word	0x08026ccc
 8006058:	08027430 	.word	0x08027430
 800605c:	0802743c 	.word	0x0802743c
 8006060:	08027464 	.word	0x08027464

08006064 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af02      	add	r7, sp, #8
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 800606e:	4b4d      	ldr	r3, [pc, #308]	; (80061a4 <cliStatus+0x140>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a4d      	ldr	r2, [pc, #308]	; (80061a8 <cliStatus+0x144>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	099a      	lsrs	r2, r3, #6
 800607a:	4b4c      	ldr	r3, [pc, #304]	; (80061ac <cliStatus+0x148>)
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	4b4b      	ldr	r3, [pc, #300]	; (80061b0 <cliStatus+0x14c>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	460b      	mov	r3, r1
 8006088:	494a      	ldr	r1, [pc, #296]	; (80061b4 <cliStatus+0x150>)
 800608a:	2000      	movs	r0, #0
 800608c:	f00d fa0e 	bl	80134ac <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 8006090:	f000 fe92 	bl	8006db8 <sensorsMask>
 8006094:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 8006096:	4b48      	ldr	r3, [pc, #288]	; (80061b8 <cliStatus+0x154>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a48      	ldr	r2, [pc, #288]	; (80061bc <cliStatus+0x158>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	0c9b      	lsrs	r3, r3, #18
 80060a2:	4a47      	ldr	r2, [pc, #284]	; (80061c0 <cliStatus+0x15c>)
 80060a4:	4947      	ldr	r1, [pc, #284]	; (80061c4 <cliStatus+0x160>)
 80060a6:	2000      	movs	r0, #0
 80060a8:	f00d fa00 	bl	80134ac <pifLog_Printf>
    for (i = 0; ; i++) {
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	4a45      	ldr	r2, [pc, #276]	; (80061c8 <cliStatus+0x164>)
 80060b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	4a3d      	ldr	r2, [pc, #244]	; (80061c8 <cliStatus+0x164>)
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	461a      	mov	r2, r3
 80060d8:	493c      	ldr	r1, [pc, #240]	; (80061cc <cliStatus+0x168>)
 80060da:	2000      	movs	r0, #0
 80060dc:	f00d f9e6 	bl	80134ac <pifLog_Printf>
    for (i = 0; ; i++) {
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	3301      	adds	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80060e6:	e7e3      	b.n	80060b0 <cliStatus+0x4c>
            break;
 80060e8:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 80060ea:	4939      	ldr	r1, [pc, #228]	; (80061d0 <cliStatus+0x16c>)
 80060ec:	2000      	movs	r0, #0
 80060ee:	f00d f94f 	bl	8013390 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 80060f2:	2001      	movs	r0, #1
 80060f4:	f000 fe24 	bl	8006d40 <sensors>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 80060fe:	4b35      	ldr	r3, [pc, #212]	; (80061d4 <cliStatus+0x170>)
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	461a      	mov	r2, r3
 8006104:	4934      	ldr	r1, [pc, #208]	; (80061d8 <cliStatus+0x174>)
 8006106:	2000      	movs	r0, #0
 8006108:	f00d f9d0 	bl	80134ac <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 800610c:	2002      	movs	r0, #2
 800610e:	f000 fe17 	bl	8006d40 <sensors>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <cliStatus+0xc4>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 8006118:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <cliStatus+0x170>)
 800611a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611e:	461a      	mov	r2, r3
 8006120:	492e      	ldr	r1, [pc, #184]	; (80061dc <cliStatus+0x178>)
 8006122:	2000      	movs	r0, #0
 8006124:	f00d f9c2 	bl	80134ac <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 8006128:	2008      	movs	r0, #8
 800612a:	f000 fe09 	bl	8006d40 <sensors>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <cliStatus+0xe0>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <cliStatus+0x170>)
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800613a:	461a      	mov	r2, r3
 800613c:	4928      	ldr	r1, [pc, #160]	; (80061e0 <cliStatus+0x17c>)
 800613e:	2000      	movs	r0, #0
 8006140:	f00d f9b4 	bl	80134ac <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006144:	2004      	movs	r0, #4
 8006146:	f000 fdfb 	bl	8006d40 <sensors>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <cliStatus+0xfc>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006150:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <cliStatus+0x170>)
 8006152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006156:	461a      	mov	r2, r3
 8006158:	4922      	ldr	r1, [pc, #136]	; (80061e4 <cliStatus+0x180>)
 800615a:	2000      	movs	r0, #0
 800615c:	f00d f9a6 	bl	80134ac <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 8006160:	491b      	ldr	r1, [pc, #108]	; (80061d0 <cliStatus+0x16c>)
 8006162:	2000      	movs	r0, #0
 8006164:	f00d f914 	bl	8013390 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006168:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <cliStatus+0x184>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <cliStatus+0x188>)
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	f240 536c 	movw	r3, #1388	; 0x56c
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	460b      	mov	r3, r1
 800617c:	491c      	ldr	r1, [pc, #112]	; (80061f0 <cliStatus+0x18c>)
 800617e:	2000      	movs	r0, #0
 8006180:	f00d f994 	bl	80134ac <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 8006184:	481b      	ldr	r0, [pc, #108]	; (80061f4 <cliStatus+0x190>)
 8006186:	f00e ffbc 	bl	8015102 <pifTimerManager_Count>
 800618a:	4603      	mov	r3, r0
 800618c:	461a      	mov	r2, r3
 800618e:	491a      	ldr	r1, [pc, #104]	; (80061f8 <cliStatus+0x194>)
 8006190:	2000      	movs	r0, #0
 8006192:	f00d f98b 	bl	80134ac <pifLog_Printf>

    cliStatusCallback();
 8006196:	f000 f871 	bl	800627c <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20001c6c 	.word	0x20001c6c
 80061a8:	10624dd3 	.word	0x10624dd3
 80061ac:	2000175c 	.word	0x2000175c
 80061b0:	20000054 	.word	0x20000054
 80061b4:	08027484 	.word	0x08027484
 80061b8:	20001728 	.word	0x20001728
 80061bc:	431bde83 	.word	0x431bde83
 80061c0:	08027fa4 	.word	0x08027fa4
 80061c4:	080274c4 	.word	0x080274c4
 80061c8:	080280d0 	.word	0x080280d0
 80061cc:	080271e0 	.word	0x080271e0
 80061d0:	08026ccc 	.word	0x08026ccc
 80061d4:	2000005c 	.word	0x2000005c
 80061d8:	080274f0 	.word	0x080274f0
 80061dc:	08027500 	.word	0x08027500
 80061e0:	0802750c 	.word	0x0802750c
 80061e4:	0802751c 	.word	0x0802751c
 80061e8:	20001758 	.word	0x20001758
 80061ec:	2000153c 	.word	0x2000153c
 80061f0:	0802752c 	.word	0x0802752c
 80061f4:	2000156c 	.word	0x2000156c
 80061f8:	08027560 	.word	0x08027560

080061fc <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 8006206:	4904      	ldr	r1, [pc, #16]	; (8006218 <cliVersion+0x1c>)
 8006208:	2000      	movs	r0, #0
 800620a:	f00d f94f 	bl	80134ac <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	08027578 	.word	0x08027578

0800621c <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 8006224:	4b11      	ldr	r3, [pc, #68]	; (800626c <cliInit+0x50>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d119      	bne.n	8006260 <cliInit+0x44>
        cliMode = 1;
 800622c:	4b0f      	ldr	r3, [pc, #60]	; (800626c <cliInit+0x50>)
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
 8006232:	f00d f9ef 	bl	8013614 <pifLog_DetachComm>
#else
        pifLog_Init();
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f00d f9c6 	bl	80135c8 <pifLog_AttachComm>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <cliInit+0x2a>
 8006242:	2300      	movs	r3, #0
 8006244:	e00d      	b.n	8006262 <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 8006246:	490a      	ldr	r1, [pc, #40]	; (8006270 <cliInit+0x54>)
 8006248:	480a      	ldr	r0, [pc, #40]	; (8006274 <cliInit+0x58>)
 800624a:	f00d f86d 	bl	8013328 <pifLog_UseCommand>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <cliInit+0x3c>
 8006254:	2300      	movs	r3, #0
 8006256:	e004      	b.n	8006262 <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006258:	4907      	ldr	r1, [pc, #28]	; (8006278 <cliInit+0x5c>)
 800625a:	2000      	movs	r0, #0
 800625c:	f00d f898 	bl	8013390 <pifLog_Print>
    }
    return TRUE;
 8006260:	2301      	movs	r3, #1
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200008c0 	.word	0x200008c0
 8006270:	080275a8 	.word	0x080275a8
 8006274:	080280f0 	.word	0x080280f0
 8006278:	080275b0 	.word	0x080275b0

0800627c <cliStatusCallback>:

PIF_WEAK void cliStatusCallback()
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0

}
 8006280:	bf00      	nop
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(PifStorage* p_sto)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	if (p_sto) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <initEEPROM+0x18>
		p_storage = p_sto;
 800629a:	4a06      	ldr	r2, [pc, #24]	; (80062b4 <initEEPROM+0x28>)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6013      	str	r3, [r2, #0]
		return TRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <initEEPROM+0x1a>
	}
	return FALSE;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000fa0 	.word	0x20000fa0

080062b8 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e018      	b.n	80062f8 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	480f      	ldr	r0, [pc, #60]	; (800630c <parseRcChannels+0x54>)
 80062ce:	f01c ffec 	bl	80232aa <strchr>
 80062d2:	60b8      	str	r0, [r7, #8]
        if (s)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	1ad1      	subs	r1, r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4a0a      	ldr	r2, [pc, #40]	; (800630c <parseRcChannels+0x54>)
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	b2c9      	uxtb	r1, r1
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <parseRcChannels+0x58>)
 80062ea:	4413      	add	r3, r2
 80062ec:	460a      	mov	r2, r1
 80062ee:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e2      	bne.n	80062c6 <parseRcChannels+0xe>
    }
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	08028d7c 	.word	0x08028d7c
 8006310:	200008f8 	.word	0x200008f8

08006314 <validEEPROM>:

static uint8_t validEEPROM(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 8006322:	f240 506c 	movw	r0, #1388	; 0x56c
 8006326:	f01c fe6b 	bl	8023000 <malloc>
 800632a:	4603      	mov	r3, r0
 800632c:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <validEEPROM+0x24>
 8006334:	2300      	movs	r3, #0
 8006336:	e04e      	b.n	80063d6 <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006338:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <validEEPROM+0xcc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	214c      	movs	r1, #76	; 0x4c
 800633e:	4618      	mov	r0, r3
 8006340:	f014 fe95 	bl	801b06e <pifStorage_Open>
 8006344:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d037      	beq.n	80063bc <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 800634c:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <validEEPROM+0xcc>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	f240 536c 	movw	r3, #1388	; 0x56c
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	f014 fe9a 	bl	801b090 <pifStorage_Read>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d02e      	beq.n	80063c0 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	224c      	movs	r2, #76	; 0x4c
 8006368:	4293      	cmp	r3, r2
 800636a:	d12b      	bne.n	80063c4 <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	885b      	ldrh	r3, [r3, #2]
 8006370:	f240 526c 	movw	r2, #1388	; 0x56c
 8006374:	4293      	cmp	r3, r2
 8006376:	d127      	bne.n	80063c8 <validEEPROM+0xb4>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	791b      	ldrb	r3, [r3, #4]
 800637c:	2bbe      	cmp	r3, #190	; 0xbe
 800637e:	d123      	bne.n	80063c8 <validEEPROM+0xb4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 8006386:	2bef      	cmp	r3, #239	; 0xef
 8006388:	d11e      	bne.n	80063c8 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e007      	b.n	80063a0 <validEEPROM+0x8c>
        chk ^= *p;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	4053      	eors	r3, r2
 8006398:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d3f1      	bcc.n	8006390 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10c      	bne.n	80063cc <validEEPROM+0xb8>
        goto fail;

    free(temp);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f01c fe2c 	bl	8023010 <free>

    // looks good, let's roll!
    return 1;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e00c      	b.n	80063d6 <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 80063bc:	bf00      	nop
 80063be:	e006      	b.n	80063ce <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 80063c0:	bf00      	nop
 80063c2:	e004      	b.n	80063ce <validEEPROM+0xba>
        goto fail;
 80063c4:	bf00      	nop
 80063c6:	e002      	b.n	80063ce <validEEPROM+0xba>
        goto fail;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <validEEPROM+0xba>
        goto fail;
 80063cc:	bf00      	nop

fail:
    free(temp);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f01c fe1e 	bl	8023010 <free>
    return 0;    
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000fa0 	.word	0x20000fa0

080063e4 <readEEPROM>:

void readEEPROM(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80063ea:	f7ff ff93 	bl	8006314 <validEEPROM>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d030      	beq.n	8006456 <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <readEEPROM+0x88>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	214c      	movs	r1, #76	; 0x4c
 80063fa:	4618      	mov	r0, r3
 80063fc:	f014 fe37 	bl	801b06e <pifStorage_Open>
 8006400:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d028      	beq.n	800645a <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006408:	4b18      	ldr	r3, [pc, #96]	; (800646c <readEEPROM+0x88>)
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	f240 536c 	movw	r3, #1388	; 0x56c
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	4917      	ldr	r1, [pc, #92]	; (8006470 <readEEPROM+0x8c>)
 8006414:	f014 fe3c 	bl	801b090 <pifStorage_Read>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01f      	beq.n	800645e <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <readEEPROM+0x8c>)
 8006420:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006424:	2b02      	cmp	r3, #2
 8006426:	d903      	bls.n	8006430 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 8006428:	4b11      	ldr	r3, [pc, #68]	; (8006470 <readEEPROM+0x8c>)
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <readEEPROM+0x8c>)
 8006432:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006436:	461a      	mov	r2, r3
 8006438:	f44f 739c 	mov.w	r3, #312	; 0x138
 800643c:	fb02 f303 	mul.w	r3, r2, r3
 8006440:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006444:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <readEEPROM+0x8c>)
 8006446:	4413      	add	r3, r2
 8006448:	f44f 729c 	mov.w	r2, #312	; 0x138
 800644c:	4619      	mov	r1, r3
 800644e:	4809      	ldr	r0, [pc, #36]	; (8006474 <readEEPROM+0x90>)
 8006450:	f01c fde6 	bl	8023020 <memcpy>
    return;
 8006454:	e007      	b.n	8006466 <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 800645e:	bf00      	nop

fail:    
    failureMode(10);
 8006460:	200a      	movs	r0, #10
 8006462:	f7fb fbfe 	bl	8001c62 <failureMode>
}
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000fa0 	.word	0x20000fa0
 8006470:	200008f8 	.word	0x200008f8
 8006474:	20000e64 	.word	0x20000e64

08006478 <activateConfig>:

void activateConfig(void)
{
 8006478:	b5b0      	push	{r4, r5, r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	71fb      	strb	r3, [r7, #7]
 8006482:	e021      	b.n	80064c8 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 8006484:	4b56      	ldr	r3, [pc, #344]	; (80065e0 <activateConfig+0x168>)
 8006486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800648a:	4619      	mov	r1, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	79fa      	ldrb	r2, [r7, #7]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	3b19      	subs	r3, #25
 8006496:	fb01 f303 	mul.w	r3, r1, r3
 800649a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800649e:	79fa      	ldrb	r2, [r7, #7]
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	4a4e      	ldr	r2, [pc, #312]	; (80065e0 <activateConfig+0x168>)
 80064a6:	7fd2      	ldrb	r2, [r2, #31]
 80064a8:	fb02 f303 	mul.w	r3, r2, r3
 80064ac:	4a4d      	ldr	r2, [pc, #308]	; (80065e4 <activateConfig+0x16c>)
 80064ae:	fb82 1203 	smull	r1, r2, r2, r3
 80064b2:	1292      	asrs	r2, r2, #10
 80064b4:	17db      	asrs	r3, r3, #31
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	b211      	sxth	r1, r2
 80064bc:	4a4a      	ldr	r2, [pc, #296]	; (80065e8 <activateConfig+0x170>)
 80064be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	3301      	adds	r3, #1
 80064c6:	71fb      	strb	r3, [r7, #7]
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b06      	cmp	r3, #6
 80064cc:	d9da      	bls.n	8006484 <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80064ce:	2300      	movs	r3, #0
 80064d0:	71fb      	strb	r3, [r7, #7]
 80064d2:	e076      	b.n	80065c2 <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	4413      	add	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <activateConfig+0x168>)
 80064e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 80064f0:	2301      	movs	r3, #1
 80064f2:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 80064f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd05      	ble.n	8006508 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 80064fc:	4b38      	ldr	r3, [pc, #224]	; (80065e0 <activateConfig+0x168>)
 80064fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006502:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006506:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 8006508:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	da03      	bge.n	8006518 <activateConfig+0xa0>
            y = cfg.thrMid8;
 8006510:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <activateConfig+0x168>)
 8006512:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006516:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 8006518:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <activateConfig+0x168>)
 800651a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	0092      	lsls	r2, r2, #2
 8006524:	4413      	add	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800652e:	492c      	ldr	r1, [pc, #176]	; (80065e0 <activateConfig+0x168>)
 8006530:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006534:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 8006538:	4929      	ldr	r1, [pc, #164]	; (80065e0 <activateConfig+0x168>)
 800653a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800653e:	460d      	mov	r5, r1
 8006540:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006544:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006548:	fb04 f101 	mul.w	r1, r4, r1
 800654c:	fb01 f405 	mul.w	r4, r1, r5
 8006550:	79b9      	ldrb	r1, [r7, #6]
 8006552:	79bd      	ldrb	r5, [r7, #6]
 8006554:	fb05 f101 	mul.w	r1, r5, r1
 8006558:	fb94 f1f1 	sdiv	r1, r4, r1
 800655c:	4401      	add	r1, r0
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4922      	ldr	r1, [pc, #136]	; (80065ec <activateConfig+0x174>)
 8006564:	fb81 0103 	smull	r0, r1, r1, r3
 8006568:	1089      	asrs	r1, r1, #2
 800656a:	17db      	asrs	r3, r3, #31
 800656c:	1acb      	subs	r3, r1, r3
 800656e:	b29b      	uxth	r3, r3
 8006570:	4413      	add	r3, r2
 8006572:	b29a      	uxth	r2, r3
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	b211      	sxth	r1, r2
 8006578:	4a1d      	ldr	r2, [pc, #116]	; (80065f0 <activateConfig+0x178>)
 800657a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 800657e:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <activateConfig+0x17c>)
 8006580:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <activateConfig+0x17c>)
 8006586:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800658a:	4619      	mov	r1, r3
 800658c:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <activateConfig+0x17c>)
 800658e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8006592:	1acb      	subs	r3, r1, r3
 8006594:	79f9      	ldrb	r1, [r7, #7]
 8006596:	4816      	ldr	r0, [pc, #88]	; (80065f0 <activateConfig+0x178>)
 8006598:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	4915      	ldr	r1, [pc, #84]	; (80065f8 <activateConfig+0x180>)
 80065a2:	fb81 0103 	smull	r0, r1, r1, r3
 80065a6:	1189      	asrs	r1, r1, #6
 80065a8:	17db      	asrs	r3, r3, #31
 80065aa:	1acb      	subs	r3, r1, r3
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	4413      	add	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	b211      	sxth	r1, r2
 80065b6:	4a0e      	ldr	r2, [pc, #56]	; (80065f0 <activateConfig+0x178>)
 80065b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	3301      	adds	r3, #1
 80065c0:	71fb      	strb	r3, [r7, #7]
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	2b0b      	cmp	r3, #11
 80065c6:	d985      	bls.n	80064d4 <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <activateConfig+0x168>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f006 fd5d 	bl	800d08c <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 80065d2:	f002 fbb3 	bl	8008d3c <gpsSetPIDs>
#endif
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bdb0      	pop	{r4, r5, r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000e64 	.word	0x20000e64
 80065e4:	68db8bad 	.word	0x68db8bad
 80065e8:	2000179c 	.word	0x2000179c
 80065ec:	66666667 	.word	0x66666667
 80065f0:	200017ac 	.word	0x200017ac
 80065f4:	200008f8 	.word	0x200008f8
 80065f8:	10624dd3 	.word	0x10624dd3

080065fc <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
    readEEPROM();
 8006600:	f7ff fef0 	bl	80063e4 <readEEPROM>
    activateConfig();
 8006604:	f7ff ff38 	bl	8006478 <activateConfig>
}
 8006608:	bf00      	nop
 800660a:	bd80      	pop	{r7, pc}

0800660c <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	460a      	mov	r2, r1
 8006616:	71fb      	strb	r3, [r7, #7]
 8006618:	4613      	mov	r3, r2
 800661a:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 800661c:	2300      	movs	r3, #0
 800661e:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 8006624:	224c      	movs	r2, #76	; 0x4c
 8006626:	4b36      	ldr	r3, [pc, #216]	; (8006700 <writeEEPROM+0xf4>)
 8006628:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 800662a:	4b35      	ldr	r3, [pc, #212]	; (8006700 <writeEEPROM+0xf4>)
 800662c:	f240 526c 	movw	r2, #1388	; 0x56c
 8006630:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 8006632:	4b33      	ldr	r3, [pc, #204]	; (8006700 <writeEEPROM+0xf4>)
 8006634:	22be      	movs	r2, #190	; 0xbe
 8006636:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 8006638:	4b31      	ldr	r3, [pc, #196]	; (8006700 <writeEEPROM+0xf4>)
 800663a:	22ef      	movs	r2, #239	; 0xef
 800663c:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006640:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <writeEEPROM+0xf4>)
 8006642:	2200      	movs	r2, #0
 8006644:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006648:	79bb      	ldrb	r3, [r7, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d011      	beq.n	8006672 <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 800664e:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <writeEEPROM+0xf4>)
 8006650:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006654:	461a      	mov	r2, r3
 8006656:	f44f 739c 	mov.w	r3, #312	; 0x138
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <writeEEPROM+0xf4>)
 8006664:	4413      	add	r3, r2
 8006666:	f44f 729c 	mov.w	r2, #312	; 0x138
 800666a:	4926      	ldr	r1, [pc, #152]	; (8006704 <writeEEPROM+0xf8>)
 800666c:	4618      	mov	r0, r3
 800666e:	f01c fcd7 	bl	8023020 <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006672:	4b23      	ldr	r3, [pc, #140]	; (8006700 <writeEEPROM+0xf4>)
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e007      	b.n	8006688 <writeEEPROM+0x7c>
        chk ^= *p;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	781a      	ldrb	r2, [r3, #0]
 800667c:	7dbb      	ldrb	r3, [r7, #22]
 800667e:	4053      	eors	r3, r2
 8006680:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3301      	adds	r3, #1
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <writeEEPROM+0xfc>)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4293      	cmp	r3, r2
 800668e:	d3f3      	bcc.n	8006678 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <writeEEPROM+0xf4>)
 8006692:	7dbb      	ldrb	r3, [r7, #22]
 8006694:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <writeEEPROM+0x100>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	214c      	movs	r1, #76	; 0x4c
 800669e:	4618      	mov	r0, r3
 80066a0:	f014 fce5 	bl	801b06e <pifStorage_Open>
 80066a4:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00c      	beq.n	80066c6 <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 80066ac:	4b17      	ldr	r3, [pc, #92]	; (800670c <writeEEPROM+0x100>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	f240 536c 	movw	r3, #1388	; 0x56c
 80066b4:	4a12      	ldr	r2, [pc, #72]	; (8006700 <writeEEPROM+0xf4>)
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	f014 fcfd 	bl	801b0b6 <pifStorage_Write>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <writeEEPROM+0xba>
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	f083 0301 	eor.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <writeEEPROM+0xd0>
 80066d2:	f7ff fe1f 	bl	8006314 <validEEPROM>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <writeEEPROM+0xd6>
        failureMode(10);
 80066dc:	200a      	movs	r0, #10
 80066de:	f7fb fac0 	bl	8001c62 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80066e2:	f7ff ff8b 	bl	80065fc <loadAndActivateConfig>
    if (b)
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 80066ec:	2201      	movs	r2, #1
 80066ee:	2114      	movs	r1, #20
 80066f0:	200f      	movs	r0, #15
 80066f2:	f005 fc97 	bl	800c024 <blinkLED>
}
 80066f6:	bf00      	nop
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200008f8 	.word	0x200008f8
 8006704:	20000e64 	.word	0x20000e64
 8006708:	20000e64 	.word	0x20000e64
 800670c:	20000fa0 	.word	0x20000fa0

08006710 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 800671e:	4b24      	ldr	r3, [pc, #144]	; (80067b0 <checkFirstTime+0xa0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f014 fc76 	bl	801b014 <pifStorage_IsFormat>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10c      	bne.n	8006748 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <checkFirstTime+0xa0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f014 fc7b 	bl	801b02e <pifStorage_Format>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <checkFirstTime+0x32>
 800673e:	2300      	movs	r3, #0
 8006740:	e032      	b.n	80067a8 <checkFirstTime+0x98>
        alloc = false;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
 8006746:	e00b      	b.n	8006760 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006748:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <checkFirstTime+0xa0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	214c      	movs	r1, #76	; 0x4c
 800674e:	4618      	mov	r0, r3
 8006750:	f014 fc8d 	bl	801b06e <pifStorage_Open>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	f083 0301 	eor.w	r3, r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00e      	beq.n	800678a <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 800676c:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <checkFirstTime+0xa0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f240 526c 	movw	r2, #1388	; 0x56c
 8006774:	214c      	movs	r1, #76	; 0x4c
 8006776:	4618      	mov	r0, r3
 8006778:	f014 fc66 	bl	801b048 <pifStorage_Create>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <checkFirstTime+0x76>
 8006782:	2300      	movs	r3, #0
 8006784:	e010      	b.n	80067a8 <checkFirstTime+0x98>
        reset = true;
 8006786:	2301      	movs	r3, #1
 8006788:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 800678a:	f7ff fdc3 	bl	8006314 <validEEPROM>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <checkFirstTime+0x8a>
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <checkFirstTime+0x96>
        resetConf();
 800679a:	f000 f80b 	bl	80067b4 <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 800679e:	2100      	movs	r1, #0
 80067a0:	2000      	movs	r0, #0
 80067a2:	f7ff ff33 	bl	800660c <writeEEPROM>
    }
    return true;
 80067a6:	2301      	movs	r3, #1
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000fa0 	.word	0x20000fa0

080067b4 <resetConf>:

// Default settings
static void resetConf(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 80067ba:	4ac7      	ldr	r2, [pc, #796]	; (8006ad8 <resetConf+0x324>)
 80067bc:	1d3b      	adds	r3, r7, #4
 80067be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067c2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 80067c6:	f240 526c 	movw	r2, #1388	; 0x56c
 80067ca:	2100      	movs	r1, #0
 80067cc:	48c3      	ldr	r0, [pc, #780]	; (8006adc <resetConf+0x328>)
 80067ce:	f01c fc35 	bl	802303c <memset>
    memset(&cfg, 0, sizeof(config_t));
 80067d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80067d6:	2100      	movs	r1, #0
 80067d8:	48c1      	ldr	r0, [pc, #772]	; (8006ae0 <resetConf+0x32c>)
 80067da:	f01c fc2f 	bl	802303c <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 80067de:	224c      	movs	r2, #76	; 0x4c
 80067e0:	4bbe      	ldr	r3, [pc, #760]	; (8006adc <resetConf+0x328>)
 80067e2:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 80067e4:	4bbd      	ldr	r3, [pc, #756]	; (8006adc <resetConf+0x328>)
 80067e6:	2203      	movs	r2, #3
 80067e8:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 80067ea:	f000 fb2d 	bl	8006e48 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 80067ee:	4bbd      	ldr	r3, [pc, #756]	; (8006ae4 <resetConf+0x330>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <resetConf+0x48>
 80067f6:	4bbb      	ldr	r3, [pc, #748]	; (8006ae4 <resetConf+0x330>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 80067fc:	4bb7      	ldr	r3, [pc, #732]	; (8006adc <resetConf+0x328>)
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006804:	4bb5      	ldr	r3, [pc, #724]	; (8006adc <resetConf+0x328>)
 8006806:	f44f 7216 	mov.w	r2, #600	; 0x258
 800680a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 800680e:	4bb3      	ldr	r3, [pc, #716]	; (8006adc <resetConf+0x328>)
 8006810:	22fa      	movs	r2, #250	; 0xfa
 8006812:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 8006816:	4bb1      	ldr	r3, [pc, #708]	; (8006adc <resetConf+0x328>)
 8006818:	222a      	movs	r2, #42	; 0x2a
 800681a:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 800681e:	4baf      	ldr	r3, [pc, #700]	; (8006adc <resetConf+0x328>)
 8006820:	2200      	movs	r2, #0
 8006822:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 8006826:	4bad      	ldr	r3, [pc, #692]	; (8006adc <resetConf+0x328>)
 8006828:	2200      	movs	r2, #0
 800682a:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 800682e:	4bab      	ldr	r3, [pc, #684]	; (8006adc <resetConf+0x328>)
 8006830:	2200      	movs	r2, #0
 8006832:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006836:	4ba9      	ldr	r3, [pc, #676]	; (8006adc <resetConf+0x328>)
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 800683e:	4ba7      	ldr	r3, [pc, #668]	; (8006adc <resetConf+0x328>)
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006846:	4ba5      	ldr	r3, [pc, #660]	; (8006adc <resetConf+0x328>)
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 800684e:	4ba3      	ldr	r3, [pc, #652]	; (8006adc <resetConf+0x328>)
 8006850:	2200      	movs	r2, #0
 8006852:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006856:	4ba1      	ldr	r3, [pc, #644]	; (8006adc <resetConf+0x328>)
 8006858:	2200      	movs	r2, #0
 800685a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 800685e:	4b9f      	ldr	r3, [pc, #636]	; (8006adc <resetConf+0x328>)
 8006860:	2200      	movs	r2, #0
 8006862:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006866:	4b9d      	ldr	r3, [pc, #628]	; (8006adc <resetConf+0x328>)
 8006868:	2200      	movs	r2, #0
 800686a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 800686e:	4b9b      	ldr	r3, [pc, #620]	; (8006adc <resetConf+0x328>)
 8006870:	2200      	movs	r2, #0
 8006872:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006876:	4b99      	ldr	r3, [pc, #612]	; (8006adc <resetConf+0x328>)
 8006878:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800687c:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006880:	4b96      	ldr	r3, [pc, #600]	; (8006adc <resetConf+0x328>)
 8006882:	2201      	movs	r2, #1
 8006884:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006888:	4b94      	ldr	r3, [pc, #592]	; (8006adc <resetConf+0x328>)
 800688a:	2220      	movs	r2, #32
 800688c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006890:	4b92      	ldr	r3, [pc, #584]	; (8006adc <resetConf+0x328>)
 8006892:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006896:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 800689a:	4b90      	ldr	r3, [pc, #576]	; (8006adc <resetConf+0x328>)
 800689c:	226e      	movs	r2, #110	; 0x6e
 800689e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 80068a2:	4b8e      	ldr	r3, [pc, #568]	; (8006adc <resetConf+0x328>)
 80068a4:	222b      	movs	r2, #43	; 0x2b
 80068a6:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 80068aa:	4b8c      	ldr	r3, [pc, #560]	; (8006adc <resetConf+0x328>)
 80068ac:	2221      	movs	r2, #33	; 0x21
 80068ae:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 80068b2:	4b8a      	ldr	r3, [pc, #552]	; (8006adc <resetConf+0x328>)
 80068b4:	2223      	movs	r2, #35	; 0x23
 80068b6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 80068ba:	4b88      	ldr	r3, [pc, #544]	; (8006adc <resetConf+0x328>)
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 80068c2:	4b86      	ldr	r3, [pc, #536]	; (8006adc <resetConf+0x328>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 80068ca:	4b84      	ldr	r3, [pc, #528]	; (8006adc <resetConf+0x328>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 80068d2:	4b82      	ldr	r3, [pc, #520]	; (8006adc <resetConf+0x328>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 80068da:	4b80      	ldr	r3, [pc, #512]	; (8006adc <resetConf+0x328>)
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 80068e2:	4b7e      	ldr	r3, [pc, #504]	; (8006adc <resetConf+0x328>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 80068ea:	4b7c      	ldr	r3, [pc, #496]	; (8006adc <resetConf+0x328>)
 80068ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80068f0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 80068f4:	4b79      	ldr	r3, [pc, #484]	; (8006adc <resetConf+0x328>)
 80068f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80068fa:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 80068fe:	4b77      	ldr	r3, [pc, #476]	; (8006adc <resetConf+0x328>)
 8006900:	f240 726c 	movw	r2, #1900	; 0x76c
 8006904:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006908:	4b74      	ldr	r3, [pc, #464]	; (8006adc <resetConf+0x328>)
 800690a:	2200      	movs	r2, #0
 800690c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006910:	4b72      	ldr	r3, [pc, #456]	; (8006adc <resetConf+0x328>)
 8006912:	2201      	movs	r2, #1
 8006914:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006918:	4b70      	ldr	r3, [pc, #448]	; (8006adc <resetConf+0x328>)
 800691a:	2201      	movs	r2, #1
 800691c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006920:	4b6e      	ldr	r3, [pc, #440]	; (8006adc <resetConf+0x328>)
 8006922:	f240 427e 	movw	r2, #1150	; 0x47e
 8006926:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 800692a:	4b6c      	ldr	r3, [pc, #432]	; (8006adc <resetConf+0x328>)
 800692c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006930:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006934:	4b69      	ldr	r3, [pc, #420]	; (8006adc <resetConf+0x328>)
 8006936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800693a:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 800693e:	4b67      	ldr	r3, [pc, #412]	; (8006adc <resetConf+0x328>)
 8006940:	f240 527e 	movw	r2, #1406	; 0x57e
 8006944:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006948:	4b64      	ldr	r3, [pc, #400]	; (8006adc <resetConf+0x328>)
 800694a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800694e:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006952:	4b62      	ldr	r3, [pc, #392]	; (8006adc <resetConf+0x328>)
 8006954:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006958:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 800695c:	4b5f      	ldr	r3, [pc, #380]	; (8006adc <resetConf+0x328>)
 800695e:	2232      	movs	r2, #50	; 0x32
 8006960:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006964:	4b5d      	ldr	r3, [pc, #372]	; (8006adc <resetConf+0x328>)
 8006966:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800696a:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 800696e:	4b5b      	ldr	r3, [pc, #364]	; (8006adc <resetConf+0x328>)
 8006970:	2232      	movs	r2, #50	; 0x32
 8006972:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006976:	4b59      	ldr	r3, [pc, #356]	; (8006adc <resetConf+0x328>)
 8006978:	2205      	movs	r2, #5
 800697a:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 800697e:	4b57      	ldr	r3, [pc, #348]	; (8006adc <resetConf+0x328>)
 8006980:	2200      	movs	r2, #0
 8006982:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006986:	4b55      	ldr	r3, [pc, #340]	; (8006adc <resetConf+0x328>)
 8006988:	2200      	movs	r2, #0
 800698a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 800698e:	4b53      	ldr	r3, [pc, #332]	; (8006adc <resetConf+0x328>)
 8006990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006994:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006998:	4b50      	ldr	r3, [pc, #320]	; (8006adc <resetConf+0x328>)
 800699a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800699e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 80069a2:	4b4e      	ldr	r3, [pc, #312]	; (8006adc <resetConf+0x328>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 80069aa:	4b4c      	ldr	r3, [pc, #304]	; (8006adc <resetConf+0x328>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 80069b2:	4b4a      	ldr	r3, [pc, #296]	; (8006adc <resetConf+0x328>)
 80069b4:	f640 52ac 	movw	r2, #3500	; 0xdac
 80069b8:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 80069ba:	4b48      	ldr	r3, [pc, #288]	; (8006adc <resetConf+0x328>)
 80069bc:	2200      	movs	r2, #0
 80069be:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 80069c0:	4b46      	ldr	r3, [pc, #280]	; (8006adc <resetConf+0x328>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 80069c8:	4b44      	ldr	r3, [pc, #272]	; (8006adc <resetConf+0x328>)
 80069ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069ce:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 80069d2:	4b42      	ldr	r3, [pc, #264]	; (8006adc <resetConf+0x328>)
 80069d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80069d8:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <resetConf+0x328>)
 80069de:	2208      	movs	r2, #8
 80069e0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 80069e4:	4b3e      	ldr	r3, [pc, #248]	; (8006ae0 <resetConf+0x32c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 80069ea:	4b3d      	ldr	r3, [pc, #244]	; (8006ae0 <resetConf+0x32c>)
 80069ec:	2228      	movs	r2, #40	; 0x28
 80069ee:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 80069f0:	4b3b      	ldr	r3, [pc, #236]	; (8006ae0 <resetConf+0x32c>)
 80069f2:	221e      	movs	r2, #30
 80069f4:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 80069f6:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <resetConf+0x32c>)
 80069f8:	2217      	movs	r2, #23
 80069fa:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 80069fc:	4b38      	ldr	r3, [pc, #224]	; (8006ae0 <resetConf+0x32c>)
 80069fe:	2228      	movs	r2, #40	; 0x28
 8006a00:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006a02:	4b37      	ldr	r3, [pc, #220]	; (8006ae0 <resetConf+0x32c>)
 8006a04:	221e      	movs	r2, #30
 8006a06:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006a08:	4b35      	ldr	r3, [pc, #212]	; (8006ae0 <resetConf+0x32c>)
 8006a0a:	2217      	movs	r2, #23
 8006a0c:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <resetConf+0x32c>)
 8006a10:	2255      	movs	r2, #85	; 0x55
 8006a12:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006a14:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <resetConf+0x32c>)
 8006a16:	222d      	movs	r2, #45	; 0x2d
 8006a18:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006a1a:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <resetConf+0x32c>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006a20:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <resetConf+0x32c>)
 8006a22:	2232      	movs	r2, #50	; 0x32
 8006a24:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006a26:	4b2e      	ldr	r3, [pc, #184]	; (8006ae0 <resetConf+0x32c>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006a2c:	4b2c      	ldr	r3, [pc, #176]	; (8006ae0 <resetConf+0x32c>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006a32:	4b2b      	ldr	r3, [pc, #172]	; (8006ae0 <resetConf+0x32c>)
 8006a34:	220b      	movs	r2, #11
 8006a36:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006a38:	4b29      	ldr	r3, [pc, #164]	; (8006ae0 <resetConf+0x32c>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006a3e:	4b28      	ldr	r3, [pc, #160]	; (8006ae0 <resetConf+0x32c>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006a44:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <resetConf+0x32c>)
 8006a46:	2214      	movs	r2, #20
 8006a48:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006a4a:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <resetConf+0x32c>)
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006a50:	4b23      	ldr	r3, [pc, #140]	; (8006ae0 <resetConf+0x32c>)
 8006a52:	222d      	movs	r2, #45	; 0x2d
 8006a54:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <resetConf+0x32c>)
 8006a58:	220e      	movs	r2, #14
 8006a5a:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006a5c:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <resetConf+0x32c>)
 8006a5e:	2214      	movs	r2, #20
 8006a60:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006a62:	4b1f      	ldr	r3, [pc, #124]	; (8006ae0 <resetConf+0x32c>)
 8006a64:	2250      	movs	r2, #80	; 0x50
 8006a66:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006a68:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <resetConf+0x32c>)
 8006a6a:	225a      	movs	r2, #90	; 0x5a
 8006a6c:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <resetConf+0x32c>)
 8006a70:	220a      	movs	r2, #10
 8006a72:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <resetConf+0x32c>)
 8006a76:	2264      	movs	r2, #100	; 0x64
 8006a78:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006a7a:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <resetConf+0x32c>)
 8006a7c:	2228      	movs	r2, #40	; 0x28
 8006a7e:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006a80:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <resetConf+0x32c>)
 8006a82:	2278      	movs	r2, #120	; 0x78
 8006a84:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006a86:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <resetConf+0x32c>)
 8006a88:	222d      	movs	r2, #45	; 0x2d
 8006a8a:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006a8c:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <resetConf+0x32c>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006a92:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <resetConf+0x32c>)
 8006a94:	225a      	movs	r2, #90	; 0x5a
 8006a96:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006a98:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <resetConf+0x32c>)
 8006a9a:	2241      	movs	r2, #65	; 0x41
 8006a9c:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <resetConf+0x32c>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006aa8:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <resetConf+0x32c>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <resetConf+0x32c>)
 8006ab2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ab6:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006ab8:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <resetConf+0x32c>)
 8006aba:	2232      	movs	r2, #50	; 0x32
 8006abc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <resetConf+0x32c>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <resetConf+0x32c>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <resetConf+0x32c>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006ad4:	e008      	b.n	8006ae8 <resetConf+0x334>
 8006ad6:	bf00      	nop
 8006ad8:	080275fc 	.word	0x080275fc
 8006adc:	200008f8 	.word	0x200008f8
 8006ae0:	20000e64 	.word	0x20000e64
 8006ae4:	20001720 	.word	0x20001720
    cfg.locked_in = 0;
 8006ae8:	4b8e      	ldr	r3, [pc, #568]	; (8006d24 <resetConf+0x570>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006af0:	4b8c      	ldr	r3, [pc, #560]	; (8006d24 <resetConf+0x570>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006af6:	4b8b      	ldr	r3, [pc, #556]	; (8006d24 <resetConf+0x570>)
 8006af8:	2204      	movs	r2, #4
 8006afa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006afe:	4b89      	ldr	r3, [pc, #548]	; (8006d24 <resetConf+0x570>)
 8006b00:	2228      	movs	r2, #40	; 0x28
 8006b02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006b06:	4b87      	ldr	r3, [pc, #540]	; (8006d24 <resetConf+0x570>)
 8006b08:	2228      	movs	r2, #40	; 0x28
 8006b0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006b0e:	4b85      	ldr	r3, [pc, #532]	; (8006d24 <resetConf+0x570>)
 8006b10:	2215      	movs	r2, #21
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006b16:	4b83      	ldr	r3, [pc, #524]	; (8006d24 <resetConf+0x570>)
 8006b18:	4a83      	ldr	r2, [pc, #524]	; (8006d28 <resetConf+0x574>)
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006b1c:	4b81      	ldr	r3, [pc, #516]	; (8006d24 <resetConf+0x570>)
 8006b1e:	4a83      	ldr	r2, [pc, #524]	; (8006d2c <resetConf+0x578>)
 8006b20:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006b22:	4b80      	ldr	r3, [pc, #512]	; (8006d24 <resetConf+0x570>)
 8006b24:	4a82      	ldr	r2, [pc, #520]	; (8006d30 <resetConf+0x57c>)
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006b28:	4b7e      	ldr	r3, [pc, #504]	; (8006d24 <resetConf+0x570>)
 8006b2a:	4a82      	ldr	r2, [pc, #520]	; (8006d34 <resetConf+0x580>)
 8006b2c:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006b2e:	4b7d      	ldr	r3, [pc, #500]	; (8006d24 <resetConf+0x570>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006b36:	4b7b      	ldr	r3, [pc, #492]	; (8006d24 <resetConf+0x570>)
 8006b38:	2219      	movs	r2, #25
 8006b3a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006b3e:	487e      	ldr	r0, [pc, #504]	; (8006d38 <resetConf+0x584>)
 8006b40:	f7ff fbba 	bl	80062b8 <parseRcChannels>
    cfg.deadband = 0;
 8006b44:	4b77      	ldr	r3, [pc, #476]	; (8006d24 <resetConf+0x570>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006b4c:	4b75      	ldr	r3, [pc, #468]	; (8006d24 <resetConf+0x570>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006b54:	4b73      	ldr	r3, [pc, #460]	; (8006d24 <resetConf+0x570>)
 8006b56:	2228      	movs	r2, #40	; 0x28
 8006b58:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006b5c:	4b71      	ldr	r3, [pc, #452]	; (8006d24 <resetConf+0x570>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006b64:	4b6f      	ldr	r3, [pc, #444]	; (8006d24 <resetConf+0x570>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006b6c:	4b6d      	ldr	r3, [pc, #436]	; (8006d24 <resetConf+0x570>)
 8006b6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b72:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006b76:	4b6b      	ldr	r3, [pc, #428]	; (8006d24 <resetConf+0x570>)
 8006b78:	220a      	movs	r2, #10
 8006b7a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006b7e:	4b69      	ldr	r3, [pc, #420]	; (8006d24 <resetConf+0x570>)
 8006b80:	22c8      	movs	r2, #200	; 0xc8
 8006b82:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006b86:	4b67      	ldr	r3, [pc, #412]	; (8006d24 <resetConf+0x570>)
 8006b88:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006b8c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006b90:	4b64      	ldr	r3, [pc, #400]	; (8006d24 <resetConf+0x570>)
 8006b92:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b96:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	e032      	b.n	8006c06 <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006ba0:	4960      	ldr	r1, [pc, #384]	; (8006d24 <resetConf+0x570>)
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	440b      	add	r3, r1
 8006bae:	33b8      	adds	r3, #184	; 0xb8
 8006bb0:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006bb4:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006bb6:	495b      	ldr	r1, [pc, #364]	; (8006d24 <resetConf+0x570>)
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	440b      	add	r3, r1
 8006bc4:	33ba      	adds	r3, #186	; 0xba
 8006bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006bca:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006bcc:	4955      	ldr	r1, [pc, #340]	; (8006d24 <resetConf+0x570>)
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	440b      	add	r3, r1
 8006bda:	33bc      	adds	r3, #188	; 0xbc
 8006bdc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006be0:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006be2:	1d3a      	adds	r2, r7, #4
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f993 0000 	ldrsb.w	r0, [r3]
 8006bec:	494d      	ldr	r1, [pc, #308]	; (8006d24 <resetConf+0x570>)
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	440b      	add	r3, r1
 8006bfa:	33be      	adds	r3, #190	; 0xbe
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b07      	cmp	r3, #7
 8006c0a:	ddc9      	ble.n	8006ba0 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006c0c:	4b45      	ldr	r3, [pc, #276]	; (8006d24 <resetConf+0x570>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006c14:	4b43      	ldr	r3, [pc, #268]	; (8006d24 <resetConf+0x570>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006c1c:	4b41      	ldr	r3, [pc, #260]	; (8006d24 <resetConf+0x570>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006c24:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <resetConf+0x570>)
 8006c26:	22c8      	movs	r2, #200	; 0xc8
 8006c28:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006c2c:	4b3d      	ldr	r3, [pc, #244]	; (8006d24 <resetConf+0x570>)
 8006c2e:	2214      	movs	r2, #20
 8006c30:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006c34:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <resetConf+0x570>)
 8006c36:	221e      	movs	r2, #30
 8006c38:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006c3c:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <resetConf+0x570>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006c44:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <resetConf+0x570>)
 8006c46:	2264      	movs	r2, #100	; 0x64
 8006c48:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006c4c:	4b35      	ldr	r3, [pc, #212]	; (8006d24 <resetConf+0x570>)
 8006c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c52:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006c56:	4b33      	ldr	r3, [pc, #204]	; (8006d24 <resetConf+0x570>)
 8006c58:	2228      	movs	r2, #40	; 0x28
 8006c5a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006c5e:	4b31      	ldr	r3, [pc, #196]	; (8006d24 <resetConf+0x570>)
 8006c60:	2214      	movs	r2, #20
 8006c62:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006c66:	4b2f      	ldr	r3, [pc, #188]	; (8006d24 <resetConf+0x570>)
 8006c68:	220f      	movs	r2, #15
 8006c6a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006c6e:	4b2d      	ldr	r3, [pc, #180]	; (8006d24 <resetConf+0x570>)
 8006c70:	220f      	movs	r2, #15
 8006c72:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006c76:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <resetConf+0x570>)
 8006c78:	220f      	movs	r2, #15
 8006c7a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006c7e:	4b29      	ldr	r3, [pc, #164]	; (8006d24 <resetConf+0x570>)
 8006c80:	f240 726c 	movw	r2, #1900	; 0x76c
 8006c84:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006c88:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <resetConf+0x570>)
 8006c8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c8e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006c92:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <resetConf+0x570>)
 8006c94:	f240 5214 	movw	r2, #1300	; 0x514
 8006c98:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006c9c:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <resetConf+0x570>)
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006ca4:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <resetConf+0x570>)
 8006ca6:	2264      	movs	r2, #100	; 0x64
 8006ca8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006cac:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <resetConf+0x570>)
 8006cae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006cb2:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <resetConf+0x570>)
 8006cb8:	2232      	movs	r2, #50	; 0x32
 8006cba:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006cbe:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <resetConf+0x588>)
 8006cc0:	2252      	movs	r2, #82	; 0x52
 8006cc2:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e00a      	b.n	8006ce2 <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	; (8006d3c <resetConf+0x588>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b0b      	cmp	r3, #11
 8006ce6:	ddf1      	ble.n	8006ccc <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e011      	b.n	8006d12 <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006cf4:	fb02 f303 	mul.w	r3, r2, r3
 8006cf8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006cfc:	4a0f      	ldr	r2, [pc, #60]	; (8006d3c <resetConf+0x588>)
 8006cfe:	4413      	add	r3, r2
 8006d00:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006d04:	4907      	ldr	r1, [pc, #28]	; (8006d24 <resetConf+0x570>)
 8006d06:	4618      	mov	r0, r3
 8006d08:	f01c f98a 	bl	8023020 <memcpy>
    for (i = 0; i < 3; i++)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	ddea      	ble.n	8006cee <resetConf+0x53a>
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000e64 	.word	0x20000e64
 8006d28:	3f19999a 	.word	0x3f19999a
 8006d2c:	3f7c28f6 	.word	0x3f7c28f6
 8006d30:	3f770a3d 	.word	0x3f770a3d
 8006d34:	40a00000 	.word	0x40a00000
 8006d38:	080275e8 	.word	0x080275e8
 8006d3c:	200008f8 	.word	0x200008f8

08006d40 <sensors>:

bool sensors(uint32_t mask)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <sensors+0x28>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bf14      	ite	ne
 8006d54:	2301      	movne	r3, #1
 8006d56:	2300      	moveq	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000f9c 	.word	0x20000f9c

08006d6c <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <sensorsSet+0x20>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	4a03      	ldr	r2, [pc, #12]	; (8006d8c <sensorsSet+0x20>)
 8006d7e:	6013      	str	r3, [r2, #0]
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	20000f9c 	.word	0x20000f9c

08006d90 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <sensorsClear+0x24>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <sensorsClear+0x24>)
 8006da4:	6013      	str	r3, [r2, #0]
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000f9c 	.word	0x20000f9c

08006db8 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <sensorsMask+0x14>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000f9c 	.word	0x20000f9c

08006dd0 <feature>:

bool feature(uint32_t mask)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006dd8:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <feature+0x28>)
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	200008f8 	.word	0x200008f8

08006dfc <featureSet>:

void featureSet(uint32_t mask)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <featureSet+0x20>)
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	4a03      	ldr	r2, [pc, #12]	; (8006e1c <featureSet+0x20>)
 8006e0e:	6093      	str	r3, [r2, #8]
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	200008f8 	.word	0x200008f8

08006e20 <featureClear>:

void featureClear(uint32_t mask)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <featureClear+0x24>)
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	4013      	ands	r3, r2
 8006e32:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <featureClear+0x24>)
 8006e34:	6093      	str	r3, [r2, #8]
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	200008f8 	.word	0x200008f8

08006e48 <featureClearAll>:

void featureClearAll()
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <featureClearAll+0x14>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	609a      	str	r2, [r3, #8]
}
 8006e52:	bf00      	nop
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	200008f8 	.word	0x200008f8

08006e60 <featureMask>:

uint32_t featureMask(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <featureMask+0x14>)
 8006e66:	689b      	ldr	r3, [r3, #8]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200008f8 	.word	0x200008f8

08006e78 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8006e7e:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <fw_nav_reset+0x5c>)
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <fw_nav_reset+0x60>)
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <fw_nav_reset+0x64>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 8006e94:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <fw_nav_reset+0x68>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 8006e9a:	4b12      	ldr	r3, [pc, #72]	; (8006ee4 <fw_nav_reset+0x6c>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	71fb      	strb	r3, [r7, #7]
 8006ea4:	e00c      	b.n	8006ec0 <fw_nav_reset+0x48>
        altHist[i] = 0;
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	4a0f      	ldr	r2, [pc, #60]	; (8006ee8 <fw_nav_reset+0x70>)
 8006eaa:	2100      	movs	r1, #0
 8006eac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	4a0e      	ldr	r2, [pc, #56]	; (8006eec <fw_nav_reset+0x74>)
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	71fb      	strb	r3, [r7, #7]
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d9ef      	bls.n	8006ea6 <fw_nav_reset+0x2e>
    }
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	20000fa4 	.word	0x20000fa4
 8006ed8:	20000fa8 	.word	0x20000fa8
 8006edc:	20000fac 	.word	0x20000fac
 8006ee0:	20000fae 	.word	0x20000fae
 8006ee4:	20000fb0 	.word	0x20000fb0
 8006ee8:	20000fb4 	.word	0x20000fb4
 8006eec:	20000fc0 	.word	0x20000fc0

08006ef0 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8006ef0:	b5b0      	push	{r4, r5, r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 8006ef6:	4b48      	ldr	r3, [pc, #288]	; (8007018 <fw_FlyTo+0x128>)
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	4a48      	ldr	r2, [pc, #288]	; (800701c <fw_FlyTo+0x12c>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	08db      	lsrs	r3, r3, #3
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2bb4      	cmp	r3, #180	; 0xb4
 8006f0a:	dd03      	ble.n	8006f14 <fw_FlyTo+0x24>
        holdHeading -= 360;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006f12:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 8006f14:	4b42      	ldr	r3, [pc, #264]	; (8007020 <fw_FlyTo+0x130>)
 8006f16:	edd3 7a00 	vldr	s15, [r3]
 8006f1a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007024 <fw_FlyTo+0x134>
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b41      	ldr	r3, [pc, #260]	; (8007028 <fw_FlyTo+0x138>)
 8006f24:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f34:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f42:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800702c <fw_FlyTo+0x13c>
 8006f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f4a:	ee17 0a90 	vmov	r0, s15
 8006f4e:	f7f9 faaf 	bl	80004b0 <__aeabi_f2d>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	ec43 2b10 	vmov	d0, r2, r3
 8006f5a:	f01c faa1 	bl	80234a0 <cos>
 8006f5e:	ec53 2b10 	vmov	r2, r3, d0
 8006f62:	4610      	mov	r0, r2
 8006f64:	4619      	mov	r1, r3
 8006f66:	f7f9 fddd 	bl	8000b24 <__aeabi_d2f>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f78:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800702c <fw_FlyTo+0x13c>
 8006f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f80:	ee17 0a90 	vmov	r0, s15
 8006f84:	f7f9 fa94 	bl	80004b0 <__aeabi_f2d>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	ec43 2b10 	vmov	d0, r2, r3
 8006f90:	f01c fada 	bl	8023548 <sin>
 8006f94:	ec55 4b10 	vmov	r4, r5, d0
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <fw_FlyTo+0x130>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7f9 fa87 	bl	80004b0 <__aeabi_f2d>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 fad9 	bl	8000560 <__aeabi_dmul>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f7f9 fdb5 	bl	8000b24 <__aeabi_d2f>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	; (8007030 <fw_FlyTo+0x140>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fca:	edd7 6a01 	vldr	s13, [r7, #4]
 8006fce:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fde:	ee17 2a90 	vmov	r2, s15
 8006fe2:	4b13      	ldr	r3, [pc, #76]	; (8007030 <fw_FlyTo+0x140>)
 8006fe4:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <fw_FlyTo+0x140>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff2:	edd7 6a00 	vldr	s13, [r7]
 8006ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007006:	ee17 2a90 	vmov	r2, s15
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <fw_FlyTo+0x140>)
 800700c:	605a      	str	r2, [r3, #4]
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bdb0      	pop	{r4, r5, r7, pc}
 8007016:	bf00      	nop
 8007018:	2000182e 	.word	0x2000182e
 800701c:	cccccccd 	.word	0xcccccccd
 8007020:	20000028 	.word	0x20000028
 8007024:	42b3a9fc 	.word	0x42b3a9fc
 8007028:	20000e64 	.word	0x20000e64
 800702c:	3c8efa35 	.word	0x3c8efa35
 8007030:	200013c0 	.word	0x200013c0

08007034 <fw_nav>:

void fw_nav(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 800703a:	4b56      	ldr	r3, [pc, #344]	; (8007194 <fw_nav+0x160>)
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8007044:	4b54      	ldr	r3, [pc, #336]	; (8007198 <fw_nav+0x164>)
 8007046:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800704a:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 800704c:	2300      	movs	r3, #0
 800704e:	80bb      	strh	r3, [r7, #4]
 8007050:	2300      	movs	r3, #0
 8007052:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 8007054:	4b51      	ldr	r3, [pc, #324]	; (800719c <fw_nav+0x168>)
 8007056:	88db      	ldrh	r3, [r3, #6]
 8007058:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 800705a:	4b51      	ldr	r3, [pc, #324]	; (80071a0 <fw_nav+0x16c>)
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	4b51      	ldr	r3, [pc, #324]	; (80071a4 <fw_nav+0x170>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	b29b      	uxth	r3, r3
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	b29b      	uxth	r3, r3
 8007068:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 800706a:	4b4f      	ldr	r3, [pc, #316]	; (80071a8 <fw_nav+0x174>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	b29a      	uxth	r2, r3
 8007070:	4b4c      	ldr	r3, [pc, #304]	; (80071a4 <fw_nav+0x170>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	b29b      	uxth	r3, r3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	b29b      	uxth	r3, r3
 800707a:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 800707c:	4b4b      	ldr	r3, [pc, #300]	; (80071ac <fw_nav+0x178>)
 800707e:	7cdb      	ldrb	r3, [r3, #19]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <fw_nav+0x66>
 8007084:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007088:	7f7b      	ldrb	r3, [r7, #29]
 800708a:	429a      	cmp	r2, r3
 800708c:	da05      	bge.n	800709a <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 800708e:	4b45      	ldr	r3, [pc, #276]	; (80071a4 <fw_nav+0x170>)
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	7f7b      	ldrb	r3, [r7, #29]
 8007094:	4413      	add	r3, r2
 8007096:	4a44      	ldr	r2, [pc, #272]	; (80071a8 <fw_nav+0x174>)
 8007098:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 800709a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4618      	mov	r0, r3
 80070a8:	f002 fb74 	bl	8009794 <wrap_18000>
 80070ac:	4603      	mov	r3, r0
 80070ae:	4a40      	ldr	r2, [pc, #256]	; (80071b0 <fw_nav+0x17c>)
 80070b0:	fb82 1203 	smull	r1, r2, r2, r3
 80070b4:	1092      	asrs	r2, r2, #2
 80070b6:	17db      	asrs	r3, r3, #31
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 80070bc:	2008      	movs	r0, #8
 80070be:	f7ff fe3f 	bl	8006d40 <sensors>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d024      	beq.n	8007112 <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 80070c8:	4b3a      	ldr	r3, [pc, #232]	; (80071b4 <fw_nav+0x180>)
 80070ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ce:	4619      	mov	r1, r3
 80070d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80070d4:	4a36      	ldr	r2, [pc, #216]	; (80071b0 <fw_nav+0x17c>)
 80070d6:	fb82 0203 	smull	r0, r2, r2, r3
 80070da:	1092      	asrs	r2, r2, #2
 80070dc:	17db      	asrs	r3, r3, #31
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b21b      	sxth	r3, r3
 80070e2:	1acb      	subs	r3, r1, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfb8      	it	lt
 80070e8:	425b      	neglt	r3, r3
 80070ea:	2b0a      	cmp	r3, #10
 80070ec:	dd0d      	ble.n	800710a <fw_nav+0xd6>
 80070ee:	4b32      	ldr	r3, [pc, #200]	; (80071b8 <fw_nav+0x184>)
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	2bc8      	cmp	r3, #200	; 0xc8
 80070f4:	d909      	bls.n	800710a <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 80070f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80070fa:	4a2d      	ldr	r2, [pc, #180]	; (80071b0 <fw_nav+0x17c>)
 80070fc:	fb82 1203 	smull	r1, r2, r2, r3
 8007100:	1092      	asrs	r2, r2, #2
 8007102:	17db      	asrs	r3, r3, #31
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007108:	e00c      	b.n	8007124 <fw_nav+0xf0>
        else
            Current_Heading = heading;
 800710a:	4b2a      	ldr	r3, [pc, #168]	; (80071b4 <fw_nav+0x180>)
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007110:	e008      	b.n	8007124 <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 8007112:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007116:	4a26      	ldr	r2, [pc, #152]	; (80071b0 <fw_nav+0x17c>)
 8007118:	fb82 1203 	smull	r1, r2, r2, r3
 800711c:	1092      	asrs	r2, r2, #2
 800711e:	17db      	asrs	r3, r3, #31
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 8007124:	4b25      	ldr	r3, [pc, #148]	; (80071bc <fw_nav+0x188>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <fw_nav+0x18c>)
 800712a:	fb82 1203 	smull	r1, r2, r2, r3
 800712e:	1152      	asrs	r2, r2, #5
 8007130:	17db      	asrs	r3, r3, #31
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	b21a      	sxth	r2, r3
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <fw_nav+0x190>)
 8007138:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 800713a:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <fw_nav+0x190>)
 800713c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007140:	b29a      	uxth	r2, r3
 8007142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 800714a:	8b3a      	ldrh	r2, [r7, #24]
 800714c:	8afb      	ldrh	r3, [r7, #22]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	b29b      	uxth	r3, r3
 8007152:	b21a      	sxth	r2, r3
 8007154:	4b1c      	ldr	r3, [pc, #112]	; (80071c8 <fw_nav+0x194>)
 8007156:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007158:	4b1c      	ldr	r3, [pc, #112]	; (80071cc <fw_nav+0x198>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <fw_nav+0x19c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <fw_nav+0x1a0>)
 8007164:	8812      	ldrh	r2, [r2, #0]
 8007166:	4293      	cmp	r3, r2
 8007168:	f0c0 83e9 	bcc.w	800793e <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <fw_nav+0x198>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <fw_nav+0x19c>)
 8007172:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 8007174:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <fw_nav+0x194>)
 8007176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800717a:	2b00      	cmp	r3, #0
 800717c:	bfb8      	it	lt
 800717e:	425b      	neglt	r3, r3
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d12a      	bne.n	80071dc <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <fw_nav+0x164>)
 8007188:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800718c:	b21a      	sxth	r2, r3
 800718e:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <fw_nav+0x1a4>)
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e03f      	b.n	8007214 <fw_nav+0x1e0>
 8007194:	2000182e 	.word	0x2000182e
 8007198:	20000e64 	.word	0x20000e64
 800719c:	20001770 	.word	0x20001770
 80071a0:	20001822 	.word	0x20001822
 80071a4:	20001804 	.word	0x20001804
 80071a8:	20001810 	.word	0x20001810
 80071ac:	20001738 	.word	0x20001738
 80071b0:	66666667 	.word	0x66666667
 80071b4:	20001a08 	.word	0x20001a08
 80071b8:	20001824 	.word	0x20001824
 80071bc:	20001428 	.word	0x20001428
 80071c0:	51eb851f 	.word	0x51eb851f
 80071c4:	20000fcc 	.word	0x20000fcc
 80071c8:	20000fce 	.word	0x20000fce
 80071cc:	20001c6c 	.word	0x20001c6c
 80071d0:	20000fd0 	.word	0x20000fd0
 80071d4:	20000026 	.word	0x20000026
 80071d8:	20000fd4 	.word	0x20000fd4
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80071dc:	4b99      	ldr	r3, [pc, #612]	; (8007444 <fw_nav+0x410>)
 80071de:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80071e2:	461a      	mov	r2, r3
 80071e4:	4b98      	ldr	r3, [pc, #608]	; (8007448 <fw_nav+0x414>)
 80071e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ea:	4619      	mov	r1, r3
 80071ec:	4b95      	ldr	r3, [pc, #596]	; (8007444 <fw_nav+0x410>)
 80071ee:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	4a92      	ldr	r2, [pc, #584]	; (8007444 <fw_nav+0x410>)
 80071fa:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 80071fe:	4611      	mov	r1, r2
 8007200:	4a90      	ldr	r2, [pc, #576]	; (8007444 <fw_nav+0x410>)
 8007202:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc fc80 	bl	8003b0c <constrain>
 800720c:	4603      	mov	r3, r0
 800720e:	b21a      	sxth	r2, r3
 8007210:	4b8e      	ldr	r3, [pc, #568]	; (800744c <fw_nav+0x418>)
 8007212:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 8007214:	4b8e      	ldr	r3, [pc, #568]	; (8007450 <fw_nav+0x41c>)
 8007216:	7cdb      	ldrb	r3, [r3, #19]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <fw_nav+0x1f8>
 800721c:	4b8a      	ldr	r3, [pc, #552]	; (8007448 <fw_nav+0x414>)
 800721e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007222:	2b00      	cmp	r3, #0
 8007224:	db02      	blt.n	800722c <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 8007226:	4b8a      	ldr	r3, [pc, #552]	; (8007450 <fw_nav+0x41c>)
 8007228:	2200      	movs	r2, #0
 800722a:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 800722c:	4b88      	ldr	r3, [pc, #544]	; (8007450 <fw_nav+0x41c>)
 800722e:	79db      	ldrb	r3, [r3, #7]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d02c      	beq.n	800728e <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 8007234:	4b86      	ldr	r3, [pc, #536]	; (8007450 <fw_nav+0x41c>)
 8007236:	7cdb      	ldrb	r3, [r3, #19]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d019      	beq.n	8007270 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 800723c:	4b81      	ldr	r3, [pc, #516]	; (8007444 <fw_nav+0x410>)
 800723e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	0352      	lsls	r2, r2, #13
 8007248:	1ad2      	subs	r2, r2, r3
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	b29b      	uxth	r3, r3
 8007252:	b21a      	sxth	r2, r3
 8007254:	4b7c      	ldr	r3, [pc, #496]	; (8007448 <fw_nav+0x414>)
 8007256:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007258:	4b7a      	ldr	r3, [pc, #488]	; (8007444 <fw_nav+0x410>)
 800725a:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 800725e:	b21a      	sxth	r2, r3
 8007260:	4b7a      	ldr	r3, [pc, #488]	; (800744c <fw_nav+0x418>)
 8007262:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 8007264:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007268:	2b18      	cmp	r3, #24
 800726a:	dc01      	bgt.n	8007270 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 800726c:	2300      	movs	r3, #0
 800726e:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007270:	4b78      	ldr	r3, [pc, #480]	; (8007454 <fw_nav+0x420>)
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	2b31      	cmp	r3, #49	; 0x31
 8007276:	d80a      	bhi.n	800728e <fw_nav+0x25a>
 8007278:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800727c:	7f7b      	ldrb	r3, [r7, #29]
 800727e:	429a      	cmp	r2, r3
 8007280:	dd05      	ble.n	800728e <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 8007282:	4b75      	ldr	r3, [pc, #468]	; (8007458 <fw_nav+0x424>)
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	7f7b      	ldrb	r3, [r7, #29]
 8007288:	4413      	add	r3, r2
 800728a:	4a74      	ldr	r2, [pc, #464]	; (800745c <fw_nav+0x428>)
 800728c:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 800728e:	4b70      	ldr	r3, [pc, #448]	; (8007450 <fw_nav+0x41c>)
 8007290:	7c9b      	ldrb	r3, [r3, #18]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <fw_nav+0x280>
 8007296:	4b6f      	ldr	r3, [pc, #444]	; (8007454 <fw_nav+0x420>)
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	2b09      	cmp	r3, #9
 800729c:	d80a      	bhi.n	80072b4 <fw_nav+0x280>
            f.ARMED = 0;
 800729e:	4b6c      	ldr	r3, [pc, #432]	; (8007450 <fw_nav+0x41c>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 80072a4:	4b6a      	ldr	r3, [pc, #424]	; (8007450 <fw_nav+0x41c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 80072aa:	4b6b      	ldr	r3, [pc, #428]	; (8007458 <fw_nav+0x424>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	3305      	adds	r3, #5
 80072b0:	4a6a      	ldr	r2, [pc, #424]	; (800745c <fw_nav+0x428>)
 80072b2:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 80072b4:	4b67      	ldr	r3, [pc, #412]	; (8007454 <fw_nav+0x420>)
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	2b09      	cmp	r3, #9
 80072ba:	d80e      	bhi.n	80072da <fw_nav+0x2a6>
            navDiff *= 0.1f;
 80072bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072c8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007460 <fw_nav+0x42c>
 80072cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072d4:	ee17 3a90 	vmov	r3, s15
 80072d8:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 80072da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80072de:	2264      	movs	r2, #100	; 0x64
 80072e0:	fb02 f303 	mul.w	r3, r2, r3
 80072e4:	4618      	mov	r0, r3
 80072e6:	f002 fa55 	bl	8009794 <wrap_18000>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4a5d      	ldr	r2, [pc, #372]	; (8007464 <fw_nav+0x430>)
 80072ee:	fb82 1203 	smull	r1, r2, r2, r3
 80072f2:	1152      	asrs	r2, r2, #5
 80072f4:	17db      	asrs	r3, r3, #31
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 80072fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	425b      	neglt	r3, r3
 8007304:	b29b      	uxth	r3, r3
 8007306:	2baa      	cmp	r3, #170	; 0xaa
 8007308:	d901      	bls.n	800730e <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 800730a:	23af      	movs	r3, #175	; 0xaf
 800730c:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 800730e:	4b56      	ldr	r3, [pc, #344]	; (8007468 <fw_nav+0x434>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b56      	ldr	r3, [pc, #344]	; (800746c <fw_nav+0x438>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007320:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007470 <fw_nav+0x43c>
 8007324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007328:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 800732c:	4b4e      	ldr	r3, [pc, #312]	; (8007468 <fw_nav+0x434>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a4e      	ldr	r2, [pc, #312]	; (800746c <fw_nav+0x438>)
 8007332:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 8007334:	4b44      	ldr	r3, [pc, #272]	; (8007448 <fw_nav+0x414>)
 8007336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800733a:	2b00      	cmp	r3, #0
 800733c:	bfb8      	it	lt
 800733e:	425b      	neglt	r3, r3
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d809      	bhi.n	800735a <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 8007346:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <fw_nav+0x440>)
 8007348:	ed93 7a00 	vldr	s14, [r3]
 800734c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007354:	4b47      	ldr	r3, [pc, #284]	; (8007474 <fw_nav+0x440>)
 8007356:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 800735a:	4b3b      	ldr	r3, [pc, #236]	; (8007448 <fw_nav+0x414>)
 800735c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	0092      	lsls	r2, r2, #2
 8007366:	4413      	add	r3, r2
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	b21a      	sxth	r2, r3
 800736e:	4b36      	ldr	r3, [pc, #216]	; (8007448 <fw_nav+0x414>)
 8007370:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 8007372:	4b35      	ldr	r3, [pc, #212]	; (8007448 <fw_nav+0x414>)
 8007374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007380:	4b3d      	ldr	r3, [pc, #244]	; (8007478 <fw_nav+0x444>)
 8007382:	edd3 7a01 	vldr	s15, [r3, #4]
 8007386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800738a:	edd7 7a04 	vldr	s15, [r7, #16]
 800738e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007392:	4b38      	ldr	r3, [pc, #224]	; (8007474 <fw_nav+0x440>)
 8007394:	edd3 7a00 	vldr	s15, [r3]
 8007398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800739c:	4b35      	ldr	r3, [pc, #212]	; (8007474 <fw_nav+0x440>)
 800739e:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 80073a2:	4b34      	ldr	r3, [pc, #208]	; (8007474 <fw_nav+0x440>)
 80073a4:	edd3 7a00 	vldr	s15, [r3]
 80073a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80073b0:	4932      	ldr	r1, [pc, #200]	; (800747c <fw_nav+0x448>)
 80073b2:	ee17 0a90 	vmov	r0, s15
 80073b6:	f7fc fba9 	bl	8003b0c <constrain>
 80073ba:	ee07 0a90 	vmov	s15, r0
 80073be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073c2:	4b2c      	ldr	r3, [pc, #176]	; (8007474 <fw_nav+0x440>)
 80073c4:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 80073c8:	4b1f      	ldr	r3, [pc, #124]	; (8007448 <fw_nav+0x414>)
 80073ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	4b2b      	ldr	r3, [pc, #172]	; (8007480 <fw_nav+0x44c>)
 80073d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	b29b      	uxth	r3, r3
 80073dc:	b21b      	sxth	r3, r3
 80073de:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80073e0:	4b19      	ldr	r3, [pc, #100]	; (8007448 <fw_nav+0x414>)
 80073e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80073e6:	4b26      	ldr	r3, [pc, #152]	; (8007480 <fw_nav+0x44c>)
 80073e8:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80073ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bfb8      	it	lt
 80073f2:	425b      	neglt	r3, r3
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b64      	cmp	r3, #100	; 0x64
 80073f8:	d901      	bls.n	80073fe <fw_nav+0x3ca>
            delta[0] = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007404:	e00f      	b.n	8007426 <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 8007406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007410:	491c      	ldr	r1, [pc, #112]	; (8007484 <fw_nav+0x450>)
 8007412:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8007416:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <fw_nav+0x450>)
 8007418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800741c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007420:	3301      	adds	r3, #1
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800742a:	2b04      	cmp	r3, #4
 800742c:	d9eb      	bls.n	8007406 <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 800742e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007432:	4b14      	ldr	r3, [pc, #80]	; (8007484 <fw_nav+0x450>)
 8007434:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 8007436:	4b14      	ldr	r3, [pc, #80]	; (8007488 <fw_nav+0x454>)
 8007438:	2200      	movs	r2, #0
 800743a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007442:	e037      	b.n	80074b4 <fw_nav+0x480>
 8007444:	20000e64 	.word	0x20000e64
 8007448:	20000fce 	.word	0x20000fce
 800744c:	20000fd4 	.word	0x20000fd4
 8007450:	20001738 	.word	0x20001738
 8007454:	2000181e 	.word	0x2000181e
 8007458:	20001804 	.word	0x20001804
 800745c:	20001810 	.word	0x20001810
 8007460:	3dcccccd 	.word	0x3dcccccd
 8007464:	51eb851f 	.word	0x51eb851f
 8007468:	20001c6c 	.word	0x20001c6c
 800746c:	20000fd8 	.word	0x20000fd8
 8007470:	447a0000 	.word	0x447a0000
 8007474:	20000fa8 	.word	0x20000fa8
 8007478:	20001324 	.word	0x20001324
 800747c:	fffffe0c 	.word	0xfffffe0c
 8007480:	20000fac 	.word	0x20000fac
 8007484:	20000fb4 	.word	0x20000fb4
 8007488:	20000fdc 	.word	0x20000fdc
            ALT_deltaSum += altHist[i];
 800748c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007490:	4a64      	ldr	r2, [pc, #400]	; (8007624 <fw_nav+0x5f0>)
 8007492:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007496:	b29a      	uxth	r2, r3
 8007498:	4b63      	ldr	r3, [pc, #396]	; (8007628 <fw_nav+0x5f4>)
 800749a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	b21a      	sxth	r2, r3
 80074a6:	4b60      	ldr	r3, [pc, #384]	; (8007628 <fw_nav+0x5f4>)
 80074a8:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80074aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ae:	3301      	adds	r3, #1
 80074b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d9e7      	bls.n	800748c <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 80074bc:	4b5a      	ldr	r3, [pc, #360]	; (8007628 <fw_nav+0x5f4>)
 80074be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ca:	4b58      	ldr	r3, [pc, #352]	; (800762c <fw_nav+0x5f8>)
 80074cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80074d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80074d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80074d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e0:	ee17 3a90 	vmov	r3, s15
 80074e4:	b21a      	sxth	r2, r3
 80074e6:	4b50      	ldr	r3, [pc, #320]	; (8007628 <fw_nav+0x5f4>)
 80074e8:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80074ea:	4b51      	ldr	r3, [pc, #324]	; (8007630 <fw_nav+0x5fc>)
 80074ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074f8:	4b4c      	ldr	r3, [pc, #304]	; (800762c <fw_nav+0x5f8>)
 80074fa:	edd3 7a00 	vldr	s15, [r3]
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007506:	ee17 3a90 	vmov	r3, s15
 800750a:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 800750c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007518:	4b46      	ldr	r3, [pc, #280]	; (8007634 <fw_nav+0x600>)
 800751a:	edd3 7a00 	vldr	s15, [r3]
 800751e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007526:	ee17 3a90 	vmov	r3, s15
 800752a:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 800752c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfb8      	it	lt
 8007534:	425b      	neglt	r3, r3
 8007536:	b29b      	uxth	r3, r3
 8007538:	2b03      	cmp	r3, #3
 800753a:	d809      	bhi.n	8007550 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 800753c:	4b3e      	ldr	r3, [pc, #248]	; (8007638 <fw_nav+0x604>)
 800753e:	ed93 7a00 	vldr	s14, [r3]
 8007542:	edd7 7a04 	vldr	s15, [r7, #16]
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <fw_nav+0x604>)
 800754c:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007552:	461a      	mov	r2, r3
 8007554:	0092      	lsls	r2, r2, #2
 8007556:	4413      	add	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	b29b      	uxth	r3, r3
 800755c:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 800755e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800756a:	4b34      	ldr	r3, [pc, #208]	; (800763c <fw_nav+0x608>)
 800756c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007574:	edd7 7a04 	vldr	s15, [r7, #16]
 8007578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800757c:	4b2e      	ldr	r3, [pc, #184]	; (8007638 <fw_nav+0x604>)
 800757e:	edd3 7a00 	vldr	s15, [r3]
 8007582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007586:	4b2c      	ldr	r3, [pc, #176]	; (8007638 <fw_nav+0x604>)
 8007588:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 800758c:	4b2a      	ldr	r3, [pc, #168]	; (8007638 <fw_nav+0x604>)
 800758e:	edd3 7a00 	vldr	s15, [r3]
 8007592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007596:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800759a:	4929      	ldr	r1, [pc, #164]	; (8007640 <fw_nav+0x60c>)
 800759c:	ee17 0a90 	vmov	r0, s15
 80075a0:	f7fc fab4 	bl	8003b0c <constrain>
 80075a4:	ee07 0a90 	vmov	s15, r0
 80075a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ac:	4b22      	ldr	r3, [pc, #136]	; (8007638 <fw_nav+0x604>)
 80075ae:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 80075b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075b4:	4b23      	ldr	r3, [pc, #140]	; (8007644 <fw_nav+0x610>)
 80075b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b21b      	sxth	r3, r3
 80075c2:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 80075c4:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <fw_nav+0x610>)
 80075c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075c8:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 80075ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfb8      	it	lt
 80075d2:	425b      	neglt	r3, r3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b64      	cmp	r3, #100	; 0x64
 80075d8:	d901      	bls.n	80075de <fw_nav+0x5aa>
            delta[1] = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075e4:	e00f      	b.n	8007606 <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80075e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f0:	4915      	ldr	r1, [pc, #84]	; (8007648 <fw_nav+0x614>)
 80075f2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80075f6:	4a14      	ldr	r2, [pc, #80]	; (8007648 <fw_nav+0x614>)
 80075f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007600:	3301      	adds	r3, #1
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800760a:	2b04      	cmp	r3, #4
 800760c:	d9eb      	bls.n	80075e6 <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 800760e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007612:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <fw_nav+0x614>)
 8007614:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 8007616:	4b0d      	ldr	r3, [pc, #52]	; (800764c <fw_nav+0x618>)
 8007618:	2200      	movs	r2, #0
 800761a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800761c:	2300      	movs	r3, #0
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007622:	e029      	b.n	8007678 <fw_nav+0x644>
 8007624:	20000fb4 	.word	0x20000fb4
 8007628:	20000fdc 	.word	0x20000fdc
 800762c:	20001324 	.word	0x20001324
 8007630:	20000fce 	.word	0x20000fce
 8007634:	20000fa8 	.word	0x20000fa8
 8007638:	20000fa4 	.word	0x20000fa4
 800763c:	20001314 	.word	0x20001314
 8007640:	fffffe0c 	.word	0xfffffe0c
 8007644:	20000fae 	.word	0x20000fae
 8007648:	20000fc0 	.word	0x20000fc0
 800764c:	20000fde 	.word	0x20000fde
            NAV_deltaSum += navDif[i];
 8007650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007654:	4abc      	ldr	r2, [pc, #752]	; (8007948 <fw_nav+0x914>)
 8007656:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800765a:	b29a      	uxth	r2, r3
 800765c:	4bbb      	ldr	r3, [pc, #748]	; (800794c <fw_nav+0x918>)
 800765e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007662:	b29b      	uxth	r3, r3
 8007664:	4413      	add	r3, r2
 8007666:	b29b      	uxth	r3, r3
 8007668:	b21a      	sxth	r2, r3
 800766a:	4bb8      	ldr	r3, [pc, #736]	; (800794c <fw_nav+0x918>)
 800766c:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800766e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007672:	3301      	adds	r3, #1
 8007674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800767c:	2b04      	cmp	r3, #4
 800767e:	d9e7      	bls.n	8007650 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007680:	4bb2      	ldr	r3, [pc, #712]	; (800794c <fw_nav+0x918>)
 8007682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800768e:	4bb0      	ldr	r3, [pc, #704]	; (8007950 <fw_nav+0x91c>)
 8007690:	edd3 7a02 	vldr	s15, [r3, #8]
 8007694:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007698:	ed97 7a04 	vldr	s14, [r7, #16]
 800769c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a4:	ee17 3a90 	vmov	r3, s15
 80076a8:	b21a      	sxth	r2, r3
 80076aa:	4ba8      	ldr	r3, [pc, #672]	; (800794c <fw_nav+0x918>)
 80076ac:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 80076ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076ba:	4ba5      	ldr	r3, [pc, #660]	; (8007950 <fw_nav+0x91c>)
 80076bc:	edd3 7a00 	vldr	s15, [r3]
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076c8:	ee17 3a90 	vmov	r3, s15
 80076cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 80076ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076da:	4b9e      	ldr	r3, [pc, #632]	; (8007954 <fw_nav+0x920>)
 80076dc:	edd3 7a00 	vldr	s15, [r3]
 80076e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076e8:	ee17 3a90 	vmov	r3, s15
 80076ec:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 80076ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80076f2:	4a99      	ldr	r2, [pc, #612]	; (8007958 <fw_nav+0x924>)
 80076f4:	fb82 1203 	smull	r1, r2, r2, r3
 80076f8:	1092      	asrs	r2, r2, #2
 80076fa:	17db      	asrs	r3, r3, #31
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	b21b      	sxth	r3, r3
 8007700:	4618      	mov	r0, r3
 8007702:	4b96      	ldr	r3, [pc, #600]	; (800795c <fw_nav+0x928>)
 8007704:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007708:	461a      	mov	r2, r3
 800770a:	f06f 0309 	mvn.w	r3, #9
 800770e:	fb03 f102 	mul.w	r1, r3, r2
 8007712:	4b92      	ldr	r3, [pc, #584]	; (800795c <fw_nav+0x928>)
 8007714:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007718:	461a      	mov	r2, r3
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	461a      	mov	r2, r3
 8007724:	f7fc f9f2 	bl	8003b0c <constrain>
 8007728:	4603      	mov	r3, r0
 800772a:	b29a      	uxth	r2, r3
 800772c:	4b8c      	ldr	r3, [pc, #560]	; (8007960 <fw_nav+0x92c>)
 800772e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007732:	b29b      	uxth	r3, r3
 8007734:	4413      	add	r3, r2
 8007736:	b29b      	uxth	r3, r3
 8007738:	b21a      	sxth	r2, r3
 800773a:	4b8a      	ldr	r3, [pc, #552]	; (8007964 <fw_nav+0x930>)
 800773c:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 800773e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007742:	4a85      	ldr	r2, [pc, #532]	; (8007958 <fw_nav+0x924>)
 8007744:	fb82 1203 	smull	r1, r2, r2, r3
 8007748:	1092      	asrs	r2, r2, #2
 800774a:	17db      	asrs	r3, r3, #31
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	b21b      	sxth	r3, r3
 8007750:	4618      	mov	r0, r3
 8007752:	4b82      	ldr	r3, [pc, #520]	; (800795c <fw_nav+0x928>)
 8007754:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007758:	461a      	mov	r2, r3
 800775a:	f06f 0309 	mvn.w	r3, #9
 800775e:	fb03 f102 	mul.w	r1, r3, r2
 8007762:	4b7e      	ldr	r3, [pc, #504]	; (800795c <fw_nav+0x928>)
 8007764:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007768:	461a      	mov	r2, r3
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	461a      	mov	r2, r3
 8007774:	f7fc f9ca 	bl	8003b0c <constrain>
 8007778:	4603      	mov	r3, r0
 800777a:	b29a      	uxth	r2, r3
 800777c:	4b73      	ldr	r3, [pc, #460]	; (800794c <fw_nav+0x918>)
 800777e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007782:	b29b      	uxth	r3, r3
 8007784:	4413      	add	r3, r2
 8007786:	b29b      	uxth	r3, r3
 8007788:	b21a      	sxth	r2, r3
 800778a:	4b76      	ldr	r3, [pc, #472]	; (8007964 <fw_nav+0x930>)
 800778c:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 800778e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007792:	4a71      	ldr	r2, [pc, #452]	; (8007958 <fw_nav+0x924>)
 8007794:	fb82 1203 	smull	r1, r2, r2, r3
 8007798:	1092      	asrs	r2, r2, #2
 800779a:	17db      	asrs	r3, r3, #31
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	b21b      	sxth	r3, r3
 80077a0:	4618      	mov	r0, r3
 80077a2:	4b6e      	ldr	r3, [pc, #440]	; (800795c <fw_nav+0x928>)
 80077a4:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80077a8:	461a      	mov	r2, r3
 80077aa:	f06f 0309 	mvn.w	r3, #9
 80077ae:	fb03 f102 	mul.w	r1, r3, r2
 80077b2:	4b6a      	ldr	r3, [pc, #424]	; (800795c <fw_nav+0x928>)
 80077b4:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80077b8:	461a      	mov	r2, r3
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	461a      	mov	r2, r3
 80077c4:	f7fc f9a2 	bl	8003b0c <constrain>
 80077c8:	4603      	mov	r3, r0
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	4b5f      	ldr	r3, [pc, #380]	; (800794c <fw_nav+0x918>)
 80077ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	b21a      	sxth	r2, r3
 80077da:	4b62      	ldr	r3, [pc, #392]	; (8007964 <fw_nav+0x930>)
 80077dc:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 80077de:	4b62      	ldr	r3, [pc, #392]	; (8007968 <fw_nav+0x934>)
 80077e0:	7c5b      	ldrb	r3, [r3, #17]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 80077e6:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <fw_nav+0x930>)
 80077e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80077ec:	4618      	mov	r0, r3
 80077ee:	4b5b      	ldr	r3, [pc, #364]	; (800795c <fw_nav+0x928>)
 80077f0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80077f4:	4259      	negs	r1, r3
 80077f6:	4b59      	ldr	r3, [pc, #356]	; (800795c <fw_nav+0x928>)
 80077f8:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80077fc:	461a      	mov	r2, r3
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	461a      	mov	r2, r3
 8007808:	f7fc f980 	bl	8003b0c <constrain>
 800780c:	4603      	mov	r3, r0
 800780e:	b21a      	sxth	r2, r3
 8007810:	4b54      	ldr	r3, [pc, #336]	; (8007964 <fw_nav+0x930>)
 8007812:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007814:	4b54      	ldr	r3, [pc, #336]	; (8007968 <fw_nav+0x934>)
 8007816:	7cdb      	ldrb	r3, [r3, #19]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11b      	bne.n	8007854 <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 800781c:	4b51      	ldr	r3, [pc, #324]	; (8007964 <fw_nav+0x930>)
 800781e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007822:	b29a      	uxth	r2, r3
 8007824:	4b51      	ldr	r3, [pc, #324]	; (800796c <fw_nav+0x938>)
 8007826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfb8      	it	lt
 800782e:	425b      	neglt	r3, r3
 8007830:	b299      	uxth	r1, r3
 8007832:	4b4a      	ldr	r3, [pc, #296]	; (800795c <fw_nav+0x928>)
 8007834:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007838:	484d      	ldr	r0, [pc, #308]	; (8007970 <fw_nav+0x93c>)
 800783a:	fba0 0303 	umull	r0, r3, r0, r3
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	b2db      	uxtb	r3, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	fb11 f303 	smulbb	r3, r1, r3
 8007848:	b29b      	uxth	r3, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	b29b      	uxth	r3, r3
 800784e:	b21a      	sxth	r2, r3
 8007850:	4b44      	ldr	r3, [pc, #272]	; (8007964 <fw_nav+0x930>)
 8007852:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007854:	4b45      	ldr	r3, [pc, #276]	; (800796c <fw_nav+0x938>)
 8007856:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007862:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800786a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800786e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007872:	2100      	movs	r1, #0
 8007874:	ee17 0a90 	vmov	r0, s15
 8007878:	f7fc f948 	bl	8003b0c <constrain>
 800787c:	4601      	mov	r1, r0
 800787e:	4b3d      	ldr	r3, [pc, #244]	; (8007974 <fw_nav+0x940>)
 8007880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007884:	b29a      	uxth	r2, r3
 8007886:	b28b      	uxth	r3, r1
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	b21a      	sxth	r2, r3
 800788e:	4b39      	ldr	r3, [pc, #228]	; (8007974 <fw_nav+0x940>)
 8007890:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007892:	4b39      	ldr	r3, [pc, #228]	; (8007978 <fw_nav+0x944>)
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800789c:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800797c <fw_nav+0x948>
 80078ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b4:	ee17 3a90 	vmov	r3, s15
 80078b8:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 80078ba:	4b2f      	ldr	r3, [pc, #188]	; (8007978 <fw_nav+0x944>)
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80078c2:	d305      	bcc.n	80078d0 <fw_nav+0x89c>
 80078c4:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <fw_nav+0x944>)
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	f240 2226 	movw	r2, #550	; 0x226
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d90a      	bls.n	80078e6 <fw_nav+0x8b2>
            speedBoost += spDiff;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	4b2a      	ldr	r3, [pc, #168]	; (8007980 <fw_nav+0x94c>)
 80078d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4413      	add	r3, r2
 80078de:	b29b      	uxth	r3, r3
 80078e0:	b21a      	sxth	r2, r3
 80078e2:	4b27      	ldr	r3, [pc, #156]	; (8007980 <fw_nav+0x94c>)
 80078e4:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 80078e6:	4b26      	ldr	r3, [pc, #152]	; (8007980 <fw_nav+0x94c>)
 80078e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fc f90a 	bl	8003b0c <constrain>
 80078f8:	4603      	mov	r3, r0
 80078fa:	b21a      	sxth	r2, r3
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <fw_nav+0x94c>)
 80078fe:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007900:	4b1c      	ldr	r3, [pc, #112]	; (8007974 <fw_nav+0x940>)
 8007902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007906:	b29a      	uxth	r2, r3
 8007908:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <fw_nav+0x94c>)
 800790a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800790e:	b29b      	uxth	r3, r3
 8007910:	4413      	add	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	b21a      	sxth	r2, r3
 8007916:	4b17      	ldr	r3, [pc, #92]	; (8007974 <fw_nav+0x940>)
 8007918:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 800791a:	4b16      	ldr	r3, [pc, #88]	; (8007974 <fw_nav+0x940>)
 800791c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007920:	4618      	mov	r0, r3
 8007922:	4b0e      	ldr	r3, [pc, #56]	; (800795c <fw_nav+0x928>)
 8007924:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007928:	4619      	mov	r1, r3
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <fw_nav+0x928>)
 800792c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007930:	461a      	mov	r2, r3
 8007932:	f7fc f8eb 	bl	8003b0c <constrain>
 8007936:	4603      	mov	r3, r0
 8007938:	b21a      	sxth	r2, r3
 800793a:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <fw_nav+0x940>)
 800793c:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <fw_nav+0x934>)
 8007940:	78db      	ldrb	r3, [r3, #3]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d122      	bne.n	800798c <fw_nav+0x958>
 8007946:	e01d      	b.n	8007984 <fw_nav+0x950>
 8007948:	20000fc0 	.word	0x20000fc0
 800794c:	20000fde 	.word	0x20000fde
 8007950:	20001314 	.word	0x20001314
 8007954:	20000fa4 	.word	0x20000fa4
 8007958:	66666667 	.word	0x66666667
 800795c:	20000e64 	.word	0x20000e64
 8007960:	20000fdc 	.word	0x20000fdc
 8007964:	20001828 	.word	0x20001828
 8007968:	20001738 	.word	0x20001738
 800796c:	200014e0 	.word	0x200014e0
 8007970:	51eb851f 	.word	0x51eb851f
 8007974:	20000fd4 	.word	0x20000fd4
 8007978:	20001824 	.word	0x20001824
 800797c:	3dcccccd 	.word	0x3dcccccd
 8007980:	20000fb0 	.word	0x20000fb0
 8007984:	4b16      	ldr	r3, [pc, #88]	; (80079e0 <fw_nav+0x9ac>)
 8007986:	791b      	ldrb	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <fw_nav+0x968>
 800798c:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <fw_nav+0x9ac>)
 800798e:	7a9b      	ldrb	r3, [r3, #10]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00f      	beq.n	80079b4 <fw_nav+0x980>
 8007994:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <fw_nav+0x9ac>)
 8007996:	7c9b      	ldrb	r3, [r3, #18]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10b      	bne.n	80079b4 <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <fw_nav+0x9b0>)
 800799e:	8b7b      	ldrh	r3, [r7, #26]
 80079a0:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 80079a2:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <fw_nav+0x9b4>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 80079a8:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <fw_nav+0x9b4>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <fw_nav+0x9b4>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 80079b4:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <fw_nav+0x9b0>)
 80079b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <fw_nav+0x9b8>)
 80079bc:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <fw_nav+0x9b8>)
 80079c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <fw_nav+0x9b4>)
 80079c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	b21a      	sxth	r2, r3
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <fw_nav+0x9b8>)
 80079d6:	809a      	strh	r2, [r3, #4]
}
 80079d8:	bf00      	nop
 80079da:	3728      	adds	r7, #40	; 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20001738 	.word	0x20001738
 80079e4:	20000fd4 	.word	0x20000fd4
 80079e8:	20001828 	.word	0x20001828
 80079ec:	20001794 	.word	0x20001794

080079f0 <gpsSetState>:
static PifGpsUblox gps_ublox;
static uint8_t gps_receive = 0;


static void gpsSetState(uint8_t state)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_INFO, "GPS: Step=%d->%d", gpsData.state, state);
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <gpsSetState+0x44>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	490d      	ldr	r1, [pc, #52]	; (8007a38 <gpsSetState+0x48>)
 8007a04:	2002      	movs	r0, #2
 8007a06:	f00b fd51 	bl	80134ac <pifLog_Printf>
#endif
    gpsData.state = state;
 8007a0a:	4a0a      	ldr	r2, [pc, #40]	; (8007a34 <gpsSetState+0x44>)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <gpsSetState+0x44>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <gpsSetState+0x4c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a06      	ldr	r2, [pc, #24]	; (8007a34 <gpsSetState+0x44>)
 8007a1c:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007a1e:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <gpsSetState+0x44>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <gpsSetState+0x44>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	761a      	strb	r2, [r3, #24]
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000fe0 	.word	0x20000fe0
 8007a38:	08027604 	.word	0x08027604
 8007a3c:	20001c6c 	.word	0x20001c6c

08007a40 <_evtGpsNmeaReceive>:

static BOOL _evtGpsNmeaReceive(PifGps *p_owner, PifGpsNmeaMsgId msg_id)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
	switch (msg_id) {
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d002      	beq.n	8007a58 <_evtGpsNmeaReceive+0x18>
 8007a52:	2b0a      	cmp	r3, #10
 8007a54:	d047      	beq.n	8007ae6 <_evtGpsNmeaReceive+0xa6>
 8007a56:	e072      	b.n	8007b3e <_evtGpsNmeaReceive+0xfe>
	case PIF_GPS_NMEA_MSG_ID_GGA:
	    f.GPS_FIX = p_owner->_fix;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b40      	ldr	r3, [pc, #256]	; (8007b68 <_evtGpsNmeaReceive+0x128>)
 8007a68:	72da      	strb	r2, [r3, #11]
	    if (f.GPS_FIX) {
 8007a6a:	4b3f      	ldr	r3, [pc, #252]	; (8007b68 <_evtGpsNmeaReceive+0x128>)
 8007a6c:	7adb      	ldrb	r3, [r3, #11]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d031      	beq.n	8007ad6 <_evtGpsNmeaReceive+0x96>
	        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007a78:	a339      	add	r3, pc, #228	; (adr r3, 8007b60 <_evtGpsNmeaReceive+0x120>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 fd6f 	bl	8000560 <__aeabi_dmul>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f7f9 f803 	bl	8000a94 <__aeabi_d2iz>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4a36      	ldr	r2, [pc, #216]	; (8007b6c <_evtGpsNmeaReceive+0x12c>)
 8007a92:	6013      	str	r3, [r2, #0]
	        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007a9a:	a331      	add	r3, pc, #196	; (adr r3, 8007b60 <_evtGpsNmeaReceive+0x120>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7f8 fd5e 	bl	8000560 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f7f8 fff2 	bl	8000a94 <__aeabi_d2iz>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <_evtGpsNmeaReceive+0x12c>)
 8007ab4:	6053      	str	r3, [r2, #4]
	        GPS_numSat = p_owner->_num_sat;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007abc:	4b2c      	ldr	r3, [pc, #176]	; (8007b70 <_evtGpsNmeaReceive+0x130>)
 8007abe:	701a      	strb	r2, [r3, #0]
	        GPS_altitude = p_owner->_altitude;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7f9 f80b 	bl	8000ae4 <__aeabi_d2uiz>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <_evtGpsNmeaReceive+0x134>)
 8007ad4:	801a      	strh	r2, [r3, #0]
	    }
	    gps_receive |= 1;
 8007ad6:	4b28      	ldr	r3, [pc, #160]	; (8007b78 <_evtGpsNmeaReceive+0x138>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <_evtGpsNmeaReceive+0x138>)
 8007ae2:	701a      	strb	r2, [r3, #0]
		break;
 8007ae4:	e02b      	b.n	8007b3e <_evtGpsNmeaReceive+0xfe>

	case PIF_GPS_NMEA_MSG_ID_RMC:
	    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	4b22      	ldr	r3, [pc, #136]	; (8007b7c <_evtGpsNmeaReceive+0x13c>)
 8007af2:	f7f8 fe5f 	bl	80007b4 <__aeabi_ddiv>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4610      	mov	r0, r2
 8007afc:	4619      	mov	r1, r3
 8007afe:	f7f8 fff1 	bl	8000ae4 <__aeabi_d2uiz>
 8007b02:	4603      	mov	r3, r0
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	4b1e      	ldr	r3, [pc, #120]	; (8007b80 <_evtGpsNmeaReceive+0x140>)
 8007b08:	801a      	strh	r2, [r3, #0]
	    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <_evtGpsNmeaReceive+0x13c>)
 8007b16:	f7f8 fd23 	bl	8000560 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7f8 ffdf 	bl	8000ae4 <__aeabi_d2uiz>
 8007b26:	4603      	mov	r3, r0
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <_evtGpsNmeaReceive+0x144>)
 8007b2c:	801a      	strh	r2, [r3, #0]
	    gps_receive |= 2;
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <_evtGpsNmeaReceive+0x138>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f043 0302 	orr.w	r3, r3, #2
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <_evtGpsNmeaReceive+0x138>)
 8007b3a:	701a      	strb	r2, [r3, #0]
		break;
 8007b3c:	bf00      	nop
	}
	if (gps_receive != 3) return FALSE;
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <_evtGpsNmeaReceive+0x138>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d001      	beq.n	8007b4a <_evtGpsNmeaReceive+0x10a>
 8007b46:	2300      	movs	r3, #0
 8007b48:	e003      	b.n	8007b52 <_evtGpsNmeaReceive+0x112>

	gps_receive = 0;
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <_evtGpsNmeaReceive+0x138>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007b50:	2301      	movs	r3, #1
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w
 8007b60:	00000000 	.word	0x00000000
 8007b64:	416312d0 	.word	0x416312d0
 8007b68:	20001738 	.word	0x20001738
 8007b6c:	200017fc 	.word	0x200017fc
 8007b70:	2000181c 	.word	0x2000181c
 8007b74:	20001822 	.word	0x20001822
 8007b78:	200012f0 	.word	0x200012f0
 8007b7c:	40240000 	.word	0x40240000
 8007b80:	20001824 	.word	0x20001824
 8007b84:	2000182e 	.word	0x2000182e

08007b88 <_evtGpsUbxReceive>:

static BOOL _evtGpsUbxReceive(PifGpsUblox* p_owner, PifGpsUbxPacket* p_packet)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
	PifGps* p_parent = &p_owner->_gps;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	60fb      	str	r3, [r7, #12]

    switch (p_packet->class_id) {
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f040 8083 	bne.w	8007ca8 <_evtGpsUbxReceive+0x120>
    case GUCI_NAV:
		switch (p_packet->msg_id) {
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d002      	beq.n	8007bb0 <_evtGpsUbxReceive+0x28>
 8007baa:	2b12      	cmp	r3, #18
 8007bac:	d04f      	beq.n	8007c4e <_evtGpsUbxReceive+0xc6>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
				gps_receive |= 2;
				break;
		}
		break;
 8007bae:	e07a      	b.n	8007ca6 <_evtGpsUbxReceive+0x11e>
				f.GPS_FIX = p_parent->_fix;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4b44      	ldr	r3, [pc, #272]	; (8007cd0 <_evtGpsUbxReceive+0x148>)
 8007bc0:	72da      	strb	r2, [r3, #11]
				if (f.GPS_FIX) {
 8007bc2:	4b43      	ldr	r3, [pc, #268]	; (8007cd0 <_evtGpsUbxReceive+0x148>)
 8007bc4:	7adb      	ldrb	r3, [r3, #11]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d031      	beq.n	8007c2e <_evtGpsUbxReceive+0xa6>
					GPS_coord[LAT] = p_parent->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007bd0:	a33d      	add	r3, pc, #244	; (adr r3, 8007cc8 <_evtGpsUbxReceive+0x140>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fcc3 	bl	8000560 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4610      	mov	r0, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	f7f8 ff57 	bl	8000a94 <__aeabi_d2iz>
 8007be6:	4603      	mov	r3, r0
 8007be8:	4a3a      	ldr	r2, [pc, #232]	; (8007cd4 <_evtGpsUbxReceive+0x14c>)
 8007bea:	6013      	str	r3, [r2, #0]
					GPS_coord[LON] = p_parent->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007bf2:	a335      	add	r3, pc, #212	; (adr r3, 8007cc8 <_evtGpsUbxReceive+0x140>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 fcb2 	bl	8000560 <__aeabi_dmul>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4610      	mov	r0, r2
 8007c02:	4619      	mov	r1, r3
 8007c04:	f7f8 ff46 	bl	8000a94 <__aeabi_d2iz>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	4a32      	ldr	r2, [pc, #200]	; (8007cd4 <_evtGpsUbxReceive+0x14c>)
 8007c0c:	6053      	str	r3, [r2, #4]
					GPS_numSat = p_parent->_num_sat;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007c14:	4b30      	ldr	r3, [pc, #192]	; (8007cd8 <_evtGpsUbxReceive+0x150>)
 8007c16:	701a      	strb	r2, [r3, #0]
					GPS_altitude = p_parent->_altitude;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7f8 ff5f 	bl	8000ae4 <__aeabi_d2uiz>
 8007c26:	4603      	mov	r3, r0
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	4b2c      	ldr	r3, [pc, #176]	; (8007cdc <_evtGpsUbxReceive+0x154>)
 8007c2c:	801a      	strh	r2, [r3, #0]
				GPS_HorizontalAcc = p_parent->_horizontal_acc;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	4a2b      	ldr	r2, [pc, #172]	; (8007ce0 <_evtGpsUbxReceive+0x158>)
 8007c34:	6013      	str	r3, [r2, #0]
				GPS_VerticalAcc = p_parent->_vertical_acc;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <_evtGpsUbxReceive+0x15c>)
 8007c3c:	6013      	str	r3, [r2, #0]
				gps_receive |= 1;
 8007c3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <_evtGpsUbxReceive+0x160>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <_evtGpsUbxReceive+0x160>)
 8007c4a:	701a      	strb	r2, [r3, #0]
				break;
 8007c4c:	e02b      	b.n	8007ca6 <_evtGpsUbxReceive+0x11e>
				GPS_speed = (uint16_t)(p_parent->_ground_speed / 10);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	4b24      	ldr	r3, [pc, #144]	; (8007cec <_evtGpsUbxReceive+0x164>)
 8007c5a:	f7f8 fdab 	bl	80007b4 <__aeabi_ddiv>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4610      	mov	r0, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	f7f8 ff3d 	bl	8000ae4 <__aeabi_d2uiz>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <_evtGpsUbxReceive+0x168>)
 8007c70:	801a      	strh	r2, [r3, #0]
				GPS_ground_course = (uint16_t)(p_parent->_ground_course * 10);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <_evtGpsUbxReceive+0x164>)
 8007c7e:	f7f8 fc6f 	bl	8000560 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7f8 ff2b 	bl	8000ae4 <__aeabi_d2uiz>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <_evtGpsUbxReceive+0x16c>)
 8007c94:	801a      	strh	r2, [r3, #0]
				gps_receive |= 2;
 8007c96:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <_evtGpsUbxReceive+0x160>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f043 0302 	orr.w	r3, r3, #2
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <_evtGpsUbxReceive+0x160>)
 8007ca2:	701a      	strb	r2, [r3, #0]
				break;
 8007ca4:	bf00      	nop
		break;
 8007ca6:	bf00      	nop
    }
	if (gps_receive != 3) return FALSE;
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <_evtGpsUbxReceive+0x160>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d001      	beq.n	8007cb4 <_evtGpsUbxReceive+0x12c>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e003      	b.n	8007cbc <_evtGpsUbxReceive+0x134>

	gps_receive = 0;
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <_evtGpsUbxReceive+0x160>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8007cba:	2301      	movs	r3, #1
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	f3af 8000 	nop.w
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	416312d0 	.word	0x416312d0
 8007cd0:	20001738 	.word	0x20001738
 8007cd4:	200017fc 	.word	0x200017fc
 8007cd8:	2000181c 	.word	0x2000181c
 8007cdc:	20001822 	.word	0x20001822
 8007ce0:	200018cc 	.word	0x200018cc
 8007ce4:	200018d0 	.word	0x200018d0
 8007ce8:	200012f0 	.word	0x200012f0
 8007cec:	40240000 	.word	0x40240000
 8007cf0:	20001824 	.word	0x20001824
 8007cf4:	2000182e 	.word	0x2000182e

08007cf8 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    serialStopReceiveFunc(&core.gpsport->comm);
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <_evtGpsTimeout+0x3c>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fa fb60 	bl	80023cc <serialStopReceiveFunc>
    gps_ublox._gps.evt_nmea_receive = NULL;
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <_evtGpsTimeout+0x40>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	609a      	str	r2, [r3, #8]
    gps_ublox.evt_ubx_receive = NULL;
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <_evtGpsTimeout+0x40>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
    sensorsClear(SENSOR_GPS);
 8007d18:	2020      	movs	r0, #32
 8007d1a:	f7ff f839 	bl	8006d90 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007d1e:	2006      	movs	r0, #6
 8007d20:	f7ff fe66 	bl	80079f0 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
 8007d24:	4905      	ldr	r1, [pc, #20]	; (8007d3c <_evtGpsTimeout+0x44>)
 8007d26:	2002      	movs	r0, #2
 8007d28:	f00b fb32 	bl	8013390 <pifLog_Print>
#endif
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000840 	.word	0x20000840
 8007d38:	20001000 	.word	0x20001000
 8007d3c:	08027618 	.word	0x08027618

08007d40 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	(void)p_owner;

    if (f.GPS_FIX) {
 8007d48:	4b2c      	ldr	r3, [pc, #176]	; (8007dfc <_evtGpsReceive+0xbc>)
 8007d4a:	7adb      	ldrb	r3, [r3, #11]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <_evtGpsReceive+0x40>
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007d50:	2004      	movs	r0, #4
 8007d52:	f7fe fff5 	bl	8006d40 <sensors>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f083 0301 	eor.w	r3, r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <_evtGpsReceive+0x40>
 8007d62:	4b26      	ldr	r3, [pc, #152]	; (8007dfc <_evtGpsReceive+0xbc>)
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <_evtGpsReceive+0x40>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007d6a:	4b25      	ldr	r3, [pc, #148]	; (8007e00 <_evtGpsReceive+0xc0>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <_evtGpsReceive+0xc4>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2264      	movs	r2, #100	; 0x64
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	4a22      	ldr	r2, [pc, #136]	; (8007e08 <_evtGpsReceive+0xc8>)
 8007d7e:	6013      	str	r3, [r2, #0]
    }

    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007d80:	2008      	movs	r0, #8
 8007d82:	f7fe ffdd 	bl	8006d40 <sensors>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f083 0301 	eor.w	r3, r3, #1
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d021      	beq.n	8007dd6 <_evtGpsReceive+0x96>
 8007d92:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <_evtGpsReceive+0xcc>)
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	2b64      	cmp	r3, #100	; 0x64
 8007d98:	d91d      	bls.n	8007dd6 <_evtGpsReceive+0x96>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007d9a:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <_evtGpsReceive+0xd0>)
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fcf3 	bl	8009794 <wrap_18000>
 8007dae:	4603      	mov	r3, r0
 8007db0:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <_evtGpsReceive+0xd4>)
 8007db2:	fb82 1203 	smull	r1, r2, r2, r3
 8007db6:	1092      	asrs	r2, r2, #2
 8007db8:	17db      	asrs	r3, r3, #31
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <_evtGpsReceive+0xd0>)
 8007dc0:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007dc2:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <_evtGpsReceive+0xd0>)
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <_evtGpsReceive+0xd8>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	08db      	lsrs	r3, r3, #3
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	b21a      	sxth	r2, r3
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <_evtGpsReceive+0xdc>)
 8007dd4:	801a      	strh	r2, [r3, #0]
    }

    pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <_evtGpsReceive+0xe0>)
 8007dd8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007ddc:	4911      	ldr	r1, [pc, #68]	; (8007e24 <_evtGpsReceive+0xe4>)
 8007dde:	4812      	ldr	r0, [pc, #72]	; (8007e28 <_evtGpsReceive+0xe8>)
 8007de0:	f00d ff8a 	bl	8015cf8 <pifGps_SetTimeout>
    pifTask_SetTrigger(g_task_gps);
 8007de4:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <_evtGpsReceive+0xec>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f00c fc23 	bl	8014634 <pifTask_SetTrigger>
    gpsData.receive = TRUE;
 8007dee:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <_evtGpsReceive+0xf0>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	761a      	strb	r2, [r3, #24]
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20001738 	.word	0x20001738
 8007e00:	20001822 	.word	0x20001822
 8007e04:	20001804 	.word	0x20001804
 8007e08:	200014a4 	.word	0x200014a4
 8007e0c:	20001824 	.word	0x20001824
 8007e10:	2000182e 	.word	0x2000182e
 8007e14:	66666667 	.word	0x66666667
 8007e18:	cccccccd 	.word	0xcccccccd
 8007e1c:	20001a08 	.word	0x20001a08
 8007e20:	08007cf9 	.word	0x08007cf9
 8007e24:	2000156c 	.word	0x2000156c
 8007e28:	20001008 	.word	0x20001008
 8007e2c:	20001598 	.word	0x20001598
 8007e30:	20000fe0 	.word	0x20000fe0

08007e34 <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	4613      	mov	r3, r2
 8007e42:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7ff fdd3 	bl	80079f0 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007e4a:	4a21      	ldr	r2, [pc, #132]	; (8007ed0 <gpsInit+0x9c>)
 8007e4c:	79bb      	ldrb	r3, [r7, #6]
 8007e4e:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007e50:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <gpsInit+0xa0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <gpsInit+0x9c>)
 8007e56:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <gpsInit+0x9c>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007e5e:	f000 ff6d 	bl	8008d3c <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX, 10);    // signal GPS "thread" to initialize when it gets to it, 5ms
 8007e62:	79f8      	ldrb	r0, [r7, #7]
 8007e64:	230a      	movs	r3, #10
 8007e66:	2203      	movs	r2, #3
 8007e68:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007e6c:	f7fa f8ee 	bl	800204c <uartOpen>
 8007e70:	4603      	mov	r3, r0
 8007e72:	4a19      	ldr	r2, [pc, #100]	; (8007ed8 <gpsInit+0xa4>)
 8007e74:	6093      	str	r3, [r2, #8]
    if (!core.gpsport) goto fail;
 8007e76:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <gpsInit+0xa4>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01d      	beq.n	8007eba <gpsInit+0x86>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4816      	ldr	r0, [pc, #88]	; (8007edc <gpsInit+0xa8>)
 8007e82:	f00f fca3 	bl	80177cc <pifGpsUblox_Init>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d018      	beq.n	8007ebe <gpsInit+0x8a>
    pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007e8c:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <gpsInit+0xa4>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4619      	mov	r1, r3
 8007e94:	4811      	ldr	r0, [pc, #68]	; (8007edc <gpsInit+0xa8>)
 8007e96:	f00f fcf3 	bl	8017880 <pifGpsUblox_AttachComm>
    gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <gpsInit+0xa8>)
 8007e9c:	4a10      	ldr	r2, [pc, #64]	; (8007ee0 <gpsInit+0xac>)
 8007e9e:	60da      	str	r2, [r3, #12]

    // signal GPS "thread" to initialize when it gets to it
    gpsSetState(GPS_INITIALIZING);
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	f7ff fda5 	bl	80079f0 <gpsSetState>

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <gpsInit+0xb0>)
 8007ea8:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	dd0b      	ble.n	8007ec8 <gpsInit+0x94>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <gpsInit+0xb0>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

    return;
 8007eb8:	e006      	b.n	8007ec8 <gpsInit+0x94>
    if (!core.gpsport) goto fail;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <gpsInit+0x8c>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8007ebe:	bf00      	nop

fail:    
    sensorsClear(SENSOR_GPS);
 8007ec0:	2020      	movs	r0, #32
 8007ec2:	f7fe ff65 	bl	8006d90 <sensorsClear>
 8007ec6:	e000      	b.n	8007eca <gpsInit+0x96>
    return;
 8007ec8:	bf00      	nop
}
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000fe0 	.word	0x20000fe0
 8007ed4:	20001c6c 	.word	0x20001c6c
 8007ed8:	20000840 	.word	0x20000840
 8007edc:	20001000 	.word	0x20001000
 8007ee0:	08007d41 	.word	0x08007d41
 8007ee4:	200008f8 	.word	0x200008f8

08007ee8 <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
    gps_ublox._gps.evt_nmea_receive = _evtGpsNmeaReceive;
 8007eec:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <gpsInitNmea+0x24>)
 8007eee:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <gpsInitNmea+0x28>)
 8007ef0:	609a      	str	r2, [r3, #8]
    pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <gpsInitNmea+0x2c>)
 8007ef4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007ef8:	4907      	ldr	r1, [pc, #28]	; (8007f18 <gpsInitNmea+0x30>)
 8007efa:	4808      	ldr	r0, [pc, #32]	; (8007f1c <gpsInitNmea+0x34>)
 8007efc:	f00d fefc 	bl	8015cf8 <pifGps_SetTimeout>
    gpsSetState(GPS_RECEIVINGDATA);
 8007f00:	2005      	movs	r0, #5
 8007f02:	f7ff fd75 	bl	80079f0 <gpsSetState>
}
 8007f06:	bf00      	nop
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20001000 	.word	0x20001000
 8007f10:	08007a41 	.word	0x08007a41
 8007f14:	08007cf9 	.word	0x08007cf9
 8007f18:	2000156c 	.word	0x2000156c
 8007f1c:	20001008 	.word	0x20001008

08007f20 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af04      	add	r7, sp, #16
    uint8_t i, n;
    int line = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step < 10) {
 8007f2a:	4b87      	ldr	r3, [pc, #540]	; (8008148 <gpsInitUblox+0x228>)
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	dc13      	bgt.n	8007f5a <gpsInitUblox+0x3a>
		if (pif_cumulative_timer1ms - gpsData.state_ts >= 500) {
 8007f32:	4b86      	ldr	r3, [pc, #536]	; (800814c <gpsInitUblox+0x22c>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b84      	ldr	r3, [pc, #528]	; (8008148 <gpsInitUblox+0x228>)
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f40:	f0c0 81c6 	bcc.w	80082d0 <gpsInitUblox+0x3b0>
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007f44:	4b81      	ldr	r3, [pc, #516]	; (800814c <gpsInitUblox+0x22c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a7f      	ldr	r2, [pc, #508]	; (8008148 <gpsInitUblox+0x228>)
 8007f4a:	6153      	str	r3, [r2, #20]
			gps_ublox.evt_ubx_receive = _evtGpsUbxReceive;
 8007f4c:	4b80      	ldr	r3, [pc, #512]	; (8008150 <gpsInitUblox+0x230>)
 8007f4e:	4a81      	ldr	r2, [pc, #516]	; (8008154 <gpsInitUblox+0x234>)
 8007f50:	601a      	str	r2, [r3, #0]
			gpsData.step = 10;
 8007f52:	4b7d      	ldr	r3, [pc, #500]	; (8008148 <gpsInitUblox+0x228>)
 8007f54:	220a      	movs	r2, #10
 8007f56:	60da      	str	r2, [r3, #12]
 8007f58:	e1ba      	b.n	80082d0 <gpsInitUblox+0x3b0>
		}
	}
	else if (gpsData.step < 10 + kCfgMsgNmeaSize) {
 8007f5a:	2306      	movs	r3, #6
 8007f5c:	f103 0209 	add.w	r2, r3, #9
 8007f60:	4b79      	ldr	r3, [pc, #484]	; (8008148 <gpsInitUblox+0x228>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	db54      	blt.n	8008012 <gpsInitUblox+0xf2>
		if (pif_cumulative_timer1ms - gpsData.state_ts >= 100) {
 8007f68:	4b78      	ldr	r3, [pc, #480]	; (800814c <gpsInitUblox+0x22c>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	4b76      	ldr	r3, [pc, #472]	; (8008148 <gpsInitUblox+0x228>)
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b63      	cmp	r3, #99	; 0x63
 8007f74:	f240 81ac 	bls.w	80082d0 <gpsInitUblox+0x3b0>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "UBX: Step=%d", gpsData.step);
 8007f78:	4b73      	ldr	r3, [pc, #460]	; (8008148 <gpsInitUblox+0x228>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4976      	ldr	r1, [pc, #472]	; (8008158 <gpsInitUblox+0x238>)
 8007f80:	2002      	movs	r0, #2
 8007f82:	f00b fa93 	bl	80134ac <pifLog_Printf>
#endif
			n = gpsData.step - 10;
 8007f86:	4b70      	ldr	r3, [pc, #448]	; (8008148 <gpsInitUblox+0x228>)
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	3b0a      	subs	r3, #10
 8007f8e:	70bb      	strb	r3, [r7, #2]
			pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNmea[n]), (uint8_t*)kCfgMsgNmea[n], TRUE, 400);
 8007f90:	78ba      	ldrb	r2, [r7, #2]
 8007f92:	4613      	mov	r3, r2
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	4413      	add	r3, r2
 8007f98:	4a70      	ldr	r2, [pc, #448]	; (800815c <gpsInitUblox+0x23c>)
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007fa0:	9202      	str	r2, [sp, #8]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	9201      	str	r2, [sp, #4]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2303      	movs	r3, #3
 8007faa:	2201      	movs	r2, #1
 8007fac:	2106      	movs	r1, #6
 8007fae:	4868      	ldr	r0, [pc, #416]	; (8008150 <gpsInitUblox+0x230>)
 8007fb0:	f00f fcb6 	bl	8017920 <pifGpsUblox_SendUbxMsg>
			if (gps_ublox._request_state == GURS_ACK) {
 8007fb4:	4b66      	ldr	r3, [pc, #408]	; (8008150 <gpsInitUblox+0x230>)
 8007fb6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d121      	bne.n	8008004 <gpsInitUblox+0xe4>
#ifndef __PIF_NO_LOG__
				pifLog_Printf(LT_INFO, "ClassId=%d MsgId=%d-%d: Result=%d", GUCI_CFG, GUMI_CFG_MSG, n, gps_ublox._request_state);
 8007fc0:	78bb      	ldrb	r3, [r7, #2]
 8007fc2:	4a63      	ldr	r2, [pc, #396]	; (8008150 <gpsInitUblox+0x230>)
 8007fc4:	f892 20dc 	ldrb.w	r2, [r2, #220]	; 0xdc
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	9201      	str	r2, [sp, #4]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	2301      	movs	r3, #1
 8007fd0:	2206      	movs	r2, #6
 8007fd2:	4963      	ldr	r1, [pc, #396]	; (8008160 <gpsInitUblox+0x240>)
 8007fd4:	2002      	movs	r0, #2
 8007fd6:	f00b fa69 	bl	80134ac <pifLog_Printf>
#endif
				n++;
 8007fda:	78bb      	ldrb	r3, [r7, #2]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	70bb      	strb	r3, [r7, #2]
				if (n < kCfgMsgNmeaSize) {
 8007fe0:	2206      	movs	r2, #6
 8007fe2:	78bb      	ldrb	r3, [r7, #2]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d205      	bcs.n	8007ff4 <gpsInitUblox+0xd4>
					gpsData.step++;
 8007fe8:	4b57      	ldr	r3, [pc, #348]	; (8008148 <gpsInitUblox+0x228>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	4a56      	ldr	r2, [pc, #344]	; (8008148 <gpsInitUblox+0x228>)
 8007ff0:	60d3      	str	r3, [r2, #12]
 8007ff2:	e002      	b.n	8007ffa <gpsInitUblox+0xda>
				}
				else {
					gpsData.step = 20;
 8007ff4:	4b54      	ldr	r3, [pc, #336]	; (8008148 <gpsInitUblox+0x228>)
 8007ff6:	2214      	movs	r2, #20
 8007ff8:	60da      	str	r2, [r3, #12]
				}
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007ffa:	4b54      	ldr	r3, [pc, #336]	; (800814c <gpsInitUblox+0x22c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a52      	ldr	r2, [pc, #328]	; (8008148 <gpsInitUblox+0x228>)
 8008000:	6153      	str	r3, [r2, #20]
 8008002:	e165      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008004:	4b57      	ldr	r3, [pc, #348]	; (8008164 <gpsInitUblox+0x244>)
 8008006:	220a      	movs	r2, #10
 8008008:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800800a:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800800e:	607b      	str	r3, [r7, #4]
 8008010:	e15e      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
		}
	}
	else if (gpsData.step < 20 + kCfgMsgNavSize) {
 8008012:	2305      	movs	r3, #5
 8008014:	f103 0213 	add.w	r2, r3, #19
 8008018:	4b4b      	ldr	r3, [pc, #300]	; (8008148 <gpsInitUblox+0x228>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	429a      	cmp	r2, r3
 800801e:	db53      	blt.n	80080c8 <gpsInitUblox+0x1a8>
		if (pif_cumulative_timer1ms - gpsData.state_ts >= 100) {
 8008020:	4b4a      	ldr	r3, [pc, #296]	; (800814c <gpsInitUblox+0x22c>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	4b48      	ldr	r3, [pc, #288]	; (8008148 <gpsInitUblox+0x228>)
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b63      	cmp	r3, #99	; 0x63
 800802c:	f240 8150 	bls.w	80082d0 <gpsInitUblox+0x3b0>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "UBX: Step=%d", gpsData.step);
 8008030:	4b45      	ldr	r3, [pc, #276]	; (8008148 <gpsInitUblox+0x228>)
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	461a      	mov	r2, r3
 8008036:	4948      	ldr	r1, [pc, #288]	; (8008158 <gpsInitUblox+0x238>)
 8008038:	2002      	movs	r0, #2
 800803a:	f00b fa37 	bl	80134ac <pifLog_Printf>
#endif
			n = gpsData.step - 20;
 800803e:	4b42      	ldr	r3, [pc, #264]	; (8008148 <gpsInitUblox+0x228>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	3b14      	subs	r3, #20
 8008046:	70bb      	strb	r3, [r7, #2]
			pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsgNav[n]), (uint8_t*)kCfgMsgNav[n], TRUE, 100);
 8008048:	78ba      	ldrb	r2, [r7, #2]
 800804a:	4613      	mov	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	4413      	add	r3, r2
 8008050:	4a45      	ldr	r2, [pc, #276]	; (8008168 <gpsInitUblox+0x248>)
 8008052:	4413      	add	r3, r2
 8008054:	2264      	movs	r2, #100	; 0x64
 8008056:	9202      	str	r2, [sp, #8]
 8008058:	2201      	movs	r2, #1
 800805a:	9201      	str	r2, [sp, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2303      	movs	r3, #3
 8008060:	2201      	movs	r2, #1
 8008062:	2106      	movs	r1, #6
 8008064:	483a      	ldr	r0, [pc, #232]	; (8008150 <gpsInitUblox+0x230>)
 8008066:	f00f fc5b 	bl	8017920 <pifGpsUblox_SendUbxMsg>
			if (gps_ublox._request_state == GURS_ACK) {
 800806a:	4b39      	ldr	r3, [pc, #228]	; (8008150 <gpsInitUblox+0x230>)
 800806c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b03      	cmp	r3, #3
 8008074:	d121      	bne.n	80080ba <gpsInitUblox+0x19a>
#ifndef __PIF_NO_LOG__
				pifLog_Printf(LT_INFO, "ClassId=%d MsgId=%d-%d: Result=%d", GUCI_CFG, GUMI_CFG_MSG, n, gps_ublox._request_state);
 8008076:	78bb      	ldrb	r3, [r7, #2]
 8008078:	4a35      	ldr	r2, [pc, #212]	; (8008150 <gpsInitUblox+0x230>)
 800807a:	f892 20dc 	ldrb.w	r2, [r2, #220]	; 0xdc
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	9201      	str	r2, [sp, #4]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2301      	movs	r3, #1
 8008086:	2206      	movs	r2, #6
 8008088:	4935      	ldr	r1, [pc, #212]	; (8008160 <gpsInitUblox+0x240>)
 800808a:	2002      	movs	r0, #2
 800808c:	f00b fa0e 	bl	80134ac <pifLog_Printf>
#endif
				n++;
 8008090:	78bb      	ldrb	r3, [r7, #2]
 8008092:	3301      	adds	r3, #1
 8008094:	70bb      	strb	r3, [r7, #2]
				if (n < kCfgMsgNavSize) {
 8008096:	2205      	movs	r2, #5
 8008098:	78bb      	ldrb	r3, [r7, #2]
 800809a:	4293      	cmp	r3, r2
 800809c:	d205      	bcs.n	80080aa <gpsInitUblox+0x18a>
					gpsData.step++;
 800809e:	4b2a      	ldr	r3, [pc, #168]	; (8008148 <gpsInitUblox+0x228>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a28      	ldr	r2, [pc, #160]	; (8008148 <gpsInitUblox+0x228>)
 80080a6:	60d3      	str	r3, [r2, #12]
 80080a8:	e002      	b.n	80080b0 <gpsInitUblox+0x190>
				}
				else {
					gpsData.step = 30;
 80080aa:	4b27      	ldr	r3, [pc, #156]	; (8008148 <gpsInitUblox+0x228>)
 80080ac:	221e      	movs	r2, #30
 80080ae:	60da      	str	r2, [r3, #12]
				}
				gpsData.state_ts = pif_cumulative_timer1ms;
 80080b0:	4b26      	ldr	r3, [pc, #152]	; (800814c <gpsInitUblox+0x22c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a24      	ldr	r2, [pc, #144]	; (8008148 <gpsInitUblox+0x228>)
 80080b6:	6153      	str	r3, [r2, #20]
 80080b8:	e10a      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80080ba:	4b2a      	ldr	r3, [pc, #168]	; (8008164 <gpsInitUblox+0x244>)
 80080bc:	220a      	movs	r2, #10
 80080be:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080c0:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	e103      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
		}
	}
	else if (gpsData.step == 30) {
 80080c8:	4b1f      	ldr	r3, [pc, #124]	; (8008148 <gpsInitUblox+0x228>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	2b1e      	cmp	r3, #30
 80080ce:	d151      	bne.n	8008174 <gpsInitUblox+0x254>
		if (pif_cumulative_timer1ms - gpsData.state_ts >= 100) {
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <gpsInitUblox+0x22c>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	4b1c      	ldr	r3, [pc, #112]	; (8008148 <gpsInitUblox+0x228>)
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b63      	cmp	r3, #99	; 0x63
 80080dc:	f240 80f8 	bls.w	80082d0 <gpsInitUblox+0x3b0>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "UBX: Step=%d", gpsData.step);
 80080e0:	4b19      	ldr	r3, [pc, #100]	; (8008148 <gpsInitUblox+0x228>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	461a      	mov	r2, r3
 80080e6:	491c      	ldr	r1, [pc, #112]	; (8008158 <gpsInitUblox+0x238>)
 80080e8:	2002      	movs	r0, #2
 80080ea:	f00b f9df 	bl	80134ac <pifLog_Printf>
#endif
			pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, TRUE, 100);
 80080ee:	2364      	movs	r3, #100	; 0x64
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	2301      	movs	r3, #1
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	4b1d      	ldr	r3, [pc, #116]	; (800816c <gpsInitUblox+0x24c>)
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	2306      	movs	r3, #6
 80080fc:	2208      	movs	r2, #8
 80080fe:	2106      	movs	r1, #6
 8008100:	4813      	ldr	r0, [pc, #76]	; (8008150 <gpsInitUblox+0x230>)
 8008102:	f00f fc0d 	bl	8017920 <pifGpsUblox_SendUbxMsg>
			if (gps_ublox._request_state == GURS_ACK) {
 8008106:	4b12      	ldr	r3, [pc, #72]	; (8008150 <gpsInitUblox+0x230>)
 8008108:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b03      	cmp	r3, #3
 8008110:	d112      	bne.n	8008138 <gpsInitUblox+0x218>
#ifndef __PIF_NO_LOG__
				pifLog_Printf(LT_INFO, "ClassId=%d MsgId=%d: Result=%d", GUCI_CFG, GUMI_CFG_RATE, gps_ublox._request_state);
 8008112:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <gpsInitUblox+0x230>)
 8008114:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008118:	b2db      	uxtb	r3, r3
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2308      	movs	r3, #8
 800811e:	2206      	movs	r2, #6
 8008120:	4913      	ldr	r1, [pc, #76]	; (8008170 <gpsInitUblox+0x250>)
 8008122:	2002      	movs	r0, #2
 8008124:	f00b f9c2 	bl	80134ac <pifLog_Printf>
#endif
				gpsData.step = 31;
 8008128:	4b07      	ldr	r3, [pc, #28]	; (8008148 <gpsInitUblox+0x228>)
 800812a:	221f      	movs	r2, #31
 800812c:	60da      	str	r2, [r3, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <gpsInitUblox+0x22c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a05      	ldr	r2, [pc, #20]	; (8008148 <gpsInitUblox+0x228>)
 8008134:	6153      	str	r3, [r2, #20]
 8008136:	e0cb      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008138:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <gpsInitUblox+0x244>)
 800813a:	220a      	movs	r2, #10
 800813c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800813e:	f240 1367 	movw	r3, #359	; 0x167
 8008142:	607b      	str	r3, [r7, #4]
 8008144:	e0c4      	b.n	80082d0 <gpsInitUblox+0x3b0>
 8008146:	bf00      	nop
 8008148:	20000fe0 	.word	0x20000fe0
 800814c:	20001c6c 	.word	0x20001c6c
 8008150:	20001000 	.word	0x20001000
 8008154:	08007b89 	.word	0x08007b89
 8008158:	08027628 	.word	0x08027628
 800815c:	08028db8 	.word	0x08028db8
 8008160:	08027638 	.word	0x08027638
 8008164:	20001c55 	.word	0x20001c55
 8008168:	08028dcc 	.word	0x08028dcc
 800816c:	08028ddc 	.word	0x08028ddc
 8008170:	0802765c 	.word	0x0802765c
			}
		}
	}
	else if (gpsData.step == 31) {
 8008174:	4b60      	ldr	r3, [pc, #384]	; (80082f8 <gpsInitUblox+0x3d8>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b1f      	cmp	r3, #31
 800817a:	d13a      	bne.n	80081f2 <gpsInitUblox+0x2d2>
		if (pif_cumulative_timer1ms - gpsData.state_ts >= 100) {
 800817c:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <gpsInitUblox+0x3dc>)
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	4b5d      	ldr	r3, [pc, #372]	; (80082f8 <gpsInitUblox+0x3d8>)
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b63      	cmp	r3, #99	; 0x63
 8008188:	f240 80a2 	bls.w	80082d0 <gpsInitUblox+0x3b0>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "UBX: Step=%d", gpsData.step);
 800818c:	4b5a      	ldr	r3, [pc, #360]	; (80082f8 <gpsInitUblox+0x3d8>)
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	461a      	mov	r2, r3
 8008192:	495b      	ldr	r1, [pc, #364]	; (8008300 <gpsInitUblox+0x3e0>)
 8008194:	2002      	movs	r0, #2
 8008196:	f00b f989 	bl	80134ac <pifLog_Printf>
#endif
			pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, TRUE, 100);
 800819a:	2364      	movs	r3, #100	; 0x64
 800819c:	9302      	str	r3, [sp, #8]
 800819e:	2301      	movs	r3, #1
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	4b58      	ldr	r3, [pc, #352]	; (8008304 <gpsInitUblox+0x3e4>)
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	2324      	movs	r3, #36	; 0x24
 80081a8:	2224      	movs	r2, #36	; 0x24
 80081aa:	2106      	movs	r1, #6
 80081ac:	4856      	ldr	r0, [pc, #344]	; (8008308 <gpsInitUblox+0x3e8>)
 80081ae:	f00f fbb7 	bl	8017920 <pifGpsUblox_SendUbxMsg>
			if (gps_ublox._request_state == GURS_ACK) {
 80081b2:	4b55      	ldr	r3, [pc, #340]	; (8008308 <gpsInitUblox+0x3e8>)
 80081b4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d112      	bne.n	80081e4 <gpsInitUblox+0x2c4>
#ifndef __PIF_NO_LOG__
				pifLog_Printf(LT_INFO, "ClassId=%d MsgId=%d: Result=%d", GUCI_CFG, GUMI_CFG_NAV5, gps_ublox._request_state);
 80081be:	4b52      	ldr	r3, [pc, #328]	; (8008308 <gpsInitUblox+0x3e8>)
 80081c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	2324      	movs	r3, #36	; 0x24
 80081ca:	2206      	movs	r2, #6
 80081cc:	494f      	ldr	r1, [pc, #316]	; (800830c <gpsInitUblox+0x3ec>)
 80081ce:	2002      	movs	r0, #2
 80081d0:	f00b f96c 	bl	80134ac <pifLog_Printf>
#endif
				gpsData.step = 32;
 80081d4:	4b48      	ldr	r3, [pc, #288]	; (80082f8 <gpsInitUblox+0x3d8>)
 80081d6:	2220      	movs	r2, #32
 80081d8:	60da      	str	r2, [r3, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 80081da:	4b48      	ldr	r3, [pc, #288]	; (80082fc <gpsInitUblox+0x3dc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a46      	ldr	r2, [pc, #280]	; (80082f8 <gpsInitUblox+0x3d8>)
 80081e0:	6153      	str	r3, [r2, #20]
 80081e2:	e075      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 80081e4:	4b4a      	ldr	r3, [pc, #296]	; (8008310 <gpsInitUblox+0x3f0>)
 80081e6:	220a      	movs	r2, #10
 80081e8:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80081ea:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 80081ee:	607b      	str	r3, [r7, #4]
 80081f0:	e06e      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
		}
	}
	else if (gpsData.step == 32) {
 80081f2:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <gpsInitUblox+0x3d8>)
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d148      	bne.n	800828c <gpsInitUblox+0x36c>
		if (pif_cumulative_timer1ms - gpsData.state_ts >= 100) {
 80081fa:	4b40      	ldr	r3, [pc, #256]	; (80082fc <gpsInitUblox+0x3dc>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b3e      	ldr	r3, [pc, #248]	; (80082f8 <gpsInitUblox+0x3d8>)
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b63      	cmp	r3, #99	; 0x63
 8008206:	d963      	bls.n	80082d0 <gpsInitUblox+0x3b0>
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_INFO, "UBX: Step=%d", gpsData.step);
 8008208:	4b3b      	ldr	r3, [pc, #236]	; (80082f8 <gpsInitUblox+0x3d8>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	461a      	mov	r2, r3
 800820e:	493c      	ldr	r1, [pc, #240]	; (8008300 <gpsInitUblox+0x3e0>)
 8008210:	2002      	movs	r0, #2
 8008212:	f00b f94b 	bl	80134ac <pifLog_Printf>
#endif
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 8008216:	4b3f      	ldr	r3, [pc, #252]	; (8008314 <gpsInitUblox+0x3f4>)
 8008218:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 800821c:	2b00      	cmp	r3, #0
 800821e:	db04      	blt.n	800822a <gpsInitUblox+0x30a>
 8008220:	4b3c      	ldr	r3, [pc, #240]	; (8008314 <gpsInitUblox+0x3f4>)
 8008222:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008226:	b2db      	uxtb	r3, r3
 8008228:	e000      	b.n	800822c <gpsInitUblox+0x30c>
 800822a:	2305      	movs	r3, #5
 800822c:	70fb      	strb	r3, [r7, #3]
			pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], TRUE, 100);
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4a39      	ldr	r2, [pc, #228]	; (8008318 <gpsInitUblox+0x3f8>)
 8008234:	4413      	add	r3, r2
 8008236:	2264      	movs	r2, #100	; 0x64
 8008238:	9202      	str	r2, [sp, #8]
 800823a:	2201      	movs	r2, #1
 800823c:	9201      	str	r2, [sp, #4]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	2308      	movs	r3, #8
 8008242:	2216      	movs	r2, #22
 8008244:	2106      	movs	r1, #6
 8008246:	4830      	ldr	r0, [pc, #192]	; (8008308 <gpsInitUblox+0x3e8>)
 8008248:	f00f fb6a 	bl	8017920 <pifGpsUblox_SendUbxMsg>
			if (gps_ublox._request_state == GURS_ACK) {
 800824c:	4b2e      	ldr	r3, [pc, #184]	; (8008308 <gpsInitUblox+0x3e8>)
 800824e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b03      	cmp	r3, #3
 8008256:	d112      	bne.n	800827e <gpsInitUblox+0x35e>
#ifndef __PIF_NO_LOG__
				pifLog_Printf(LT_INFO, "ClassId=%d MsgId=%d: Result=%d", GUCI_CFG, GUMI_CFG_SBAS, gps_ublox._request_state);
 8008258:	4b2b      	ldr	r3, [pc, #172]	; (8008308 <gpsInitUblox+0x3e8>)
 800825a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800825e:	b2db      	uxtb	r3, r3
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	2316      	movs	r3, #22
 8008264:	2206      	movs	r2, #6
 8008266:	4929      	ldr	r1, [pc, #164]	; (800830c <gpsInitUblox+0x3ec>)
 8008268:	2002      	movs	r0, #2
 800826a:	f00b f91f 	bl	80134ac <pifLog_Printf>
#endif
				gpsData.step = 33;
 800826e:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <gpsInitUblox+0x3d8>)
 8008270:	2221      	movs	r2, #33	; 0x21
 8008272:	60da      	str	r2, [r3, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8008274:	4b21      	ldr	r3, [pc, #132]	; (80082fc <gpsInitUblox+0x3dc>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <gpsInitUblox+0x3d8>)
 800827a:	6153      	str	r3, [r2, #20]
 800827c:	e028      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 800827e:	4b24      	ldr	r3, [pc, #144]	; (8008310 <gpsInitUblox+0x3f0>)
 8008280:	220a      	movs	r2, #10
 8008282:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8008284:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8008288:	607b      	str	r3, [r7, #4]
 800828a:	e021      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
		}
	}
	else if (gpsData.step == 33) {
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <gpsInitUblox+0x3d8>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b21      	cmp	r3, #33	; 0x21
 8008292:	d11d      	bne.n	80082d0 <gpsInitUblox+0x3b0>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5000) {
 8008294:	4b19      	ldr	r3, [pc, #100]	; (80082fc <gpsInitUblox+0x3dc>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <gpsInitUblox+0x3d8>)
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3287 	movw	r2, #4999	; 0x1387
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d80e      	bhi.n	80082c4 <gpsInitUblox+0x3a4>
			if (gpsData.receive) {
 80082a6:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <gpsInitUblox+0x3d8>)
 80082a8:	7e1b      	ldrb	r3, [r3, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d010      	beq.n	80082d0 <gpsInitUblox+0x3b0>
				// ublox should be init'd, time to try receiving some junk
				pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 80082ae:	4b1b      	ldr	r3, [pc, #108]	; (800831c <gpsInitUblox+0x3fc>)
 80082b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80082b4:	491a      	ldr	r1, [pc, #104]	; (8008320 <gpsInitUblox+0x400>)
 80082b6:	481b      	ldr	r0, [pc, #108]	; (8008324 <gpsInitUblox+0x404>)
 80082b8:	f00d fd1e 	bl	8015cf8 <pifGps_SetTimeout>
				gpsSetState(GPS_RECEIVINGDATA);
 80082bc:	2005      	movs	r0, #5
 80082be:	f7ff fb97 	bl	80079f0 <gpsSetState>
 80082c2:	e005      	b.n	80082d0 <gpsInitUblox+0x3b0>
			}
		}
		else {
			pif_error = E_TIMEOUT;
 80082c4:	4b12      	ldr	r3, [pc, #72]	; (8008310 <gpsInitUblox+0x3f0>)
 80082c6:	2207      	movs	r2, #7
 80082c8:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 80082ca:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 80082ce:	607b      	str	r3, [r7, #4]
		}
	}

	if (line) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <gpsInitUblox+0x3d0>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) S:%u E:%u", line, gpsData.step, pif_error);
 80082d6:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <gpsInitUblox+0x3d8>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	4a0d      	ldr	r2, [pc, #52]	; (8008310 <gpsInitUblox+0x3f0>)
 80082dc:	7812      	ldrb	r2, [r2, #0]
 80082de:	9200      	str	r2, [sp, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4911      	ldr	r1, [pc, #68]	; (8008328 <gpsInitUblox+0x408>)
 80082e4:	2004      	movs	r0, #4
 80082e6:	f00b f8e1 	bl	80134ac <pifLog_Printf>
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 80082ea:	480e      	ldr	r0, [pc, #56]	; (8008324 <gpsInitUblox+0x404>)
 80082ec:	f7ff fd04 	bl	8007cf8 <_evtGpsTimeout>
	}
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000fe0 	.word	0x20000fe0
 80082fc:	20001c6c 	.word	0x20001c6c
 8008300:	08027628 	.word	0x08027628
 8008304:	08028de4 	.word	0x08028de4
 8008308:	20001000 	.word	0x20001000
 800830c:	0802765c 	.word	0x0802765c
 8008310:	20001c55 	.word	0x20001c55
 8008314:	200008f8 	.word	0x200008f8
 8008318:	08028e08 	.word	0x08028e08
 800831c:	08007cf9 	.word	0x08007cf9
 8008320:	2000156c 	.word	0x2000156c
 8008324:	20001008 	.word	0x20001008
 8008328:	0802767c 	.word	0x0802767c

0800832c <gpsInitHardware>:

static void gpsInitHardware(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <gpsInitHardware+0x34>)
 8008332:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008336:	2b03      	cmp	r3, #3
 8008338:	dc0d      	bgt.n	8008356 <gpsInitHardware+0x2a>
 800833a:	2b02      	cmp	r3, #2
 800833c:	da0a      	bge.n	8008354 <gpsInitHardware+0x28>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <gpsInitHardware+0x1c>
 8008342:	2b01      	cmp	r3, #1
 8008344:	d003      	beq.n	800834e <gpsInitHardware+0x22>
 8008346:	e006      	b.n	8008356 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 8008348:	f7ff fdce 	bl	8007ee8 <gpsInitNmea>
            break;
 800834c:	e003      	b.n	8008356 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 800834e:	f7ff fde7 	bl	8007f20 <gpsInitUblox>
            break;
 8008352:	e000      	b.n	8008356 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 8008354:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 8008356:	4b03      	ldr	r3, [pc, #12]	; (8008364 <gpsInitHardware+0x38>)
 8008358:	2200      	movs	r2, #0
 800835a:	605a      	str	r2, [r3, #4]
}
 800835c:	bf00      	nop
 800835e:	bd80      	pop	{r7, pc}
 8008360:	200008f8 	.word	0x200008f8
 8008364:	20000fe0 	.word	0x20000fe0

08008368 <gpsThread>:

void gpsThread(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af04      	add	r7, sp, #16
    uint32_t m;
    static int retry;

    switch (gpsData.state) {
 800836e:	4b69      	ldr	r3, [pc, #420]	; (8008514 <gpsThread+0x1ac>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b06      	cmp	r3, #6
 8008374:	f200 80ca 	bhi.w	800850c <gpsThread+0x1a4>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <gpsThread+0x18>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	0800850d 	.word	0x0800850d
 8008384:	0800839d 	.word	0x0800839d
 8008388:	080083fd 	.word	0x080083fd
 800838c:	08008469 	.word	0x08008469
 8008390:	0800849b 	.word	0x0800849b
 8008394:	0800850d 	.word	0x0800850d
 8008398:	080084a1 	.word	0x080084a1
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 800839c:	4b5e      	ldr	r3, [pc, #376]	; (8008518 <gpsThread+0x1b0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? 100 : 3000))
 80083a2:	4b5c      	ldr	r3, [pc, #368]	; (8008514 <gpsThread+0x1ac>)
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	4a5a      	ldr	r2, [pc, #360]	; (8008514 <gpsThread+0x1ac>)
 80083ac:	6912      	ldr	r2, [r2, #16]
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	d001      	beq.n	80083b6 <gpsThread+0x4e>
 80083b2:	2264      	movs	r2, #100	; 0x64
 80083b4:	e001      	b.n	80083ba <gpsThread+0x52>
 80083b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80083ba:	429a      	cmp	r2, r3
 80083bc:	f200 80a1 	bhi.w	8008502 <gpsThread+0x19a>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 80083c0:	4b54      	ldr	r3, [pc, #336]	; (8008514 <gpsThread+0x1ac>)
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	dc15      	bgt.n	80083f4 <gpsThread+0x8c>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 80083c8:	4b54      	ldr	r3, [pc, #336]	; (800851c <gpsThread+0x1b4>)
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	4b51      	ldr	r3, [pc, #324]	; (8008514 <gpsThread+0x1ac>)
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	4953      	ldr	r1, [pc, #332]	; (8008520 <gpsThread+0x1b8>)
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	440b      	add	r3, r1
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7f9 ffb2 	bl	8002344 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 80083e0:	4b4c      	ldr	r3, [pc, #304]	; (8008514 <gpsThread+0x1ac>)
 80083e2:	2202      	movs	r2, #2
 80083e4:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80083e6:	4a4b      	ldr	r2, [pc, #300]	; (8008514 <gpsThread+0x1ac>)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6153      	str	r3, [r2, #20]
                retry = 2;
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <gpsThread+0x1bc>)
 80083ee:	2202      	movs	r2, #2
 80083f0:	601a      	str	r2, [r3, #0]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 80083f2:	e08b      	b.n	800850c <gpsThread+0x1a4>
                gpsSetState(GPS_SETBAUD);
 80083f4:	2003      	movs	r0, #3
 80083f6:	f7ff fafb 	bl	80079f0 <gpsSetState>
            break;
 80083fa:	e087      	b.n	800850c <gpsThread+0x1a4>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 80083fc:	4b46      	ldr	r3, [pc, #280]	; (8008518 <gpsThread+0x1b0>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 8008402:	4b44      	ldr	r3, [pc, #272]	; (8008514 <gpsThread+0x1ac>)
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2bc7      	cmp	r3, #199	; 0xc7
 800840c:	d97b      	bls.n	8008506 <gpsThread+0x19e>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, TRUE, 0)) {
 800840e:	4b41      	ldr	r3, [pc, #260]	; (8008514 <gpsThread+0x1ac>)
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	4a43      	ldr	r2, [pc, #268]	; (8008520 <gpsThread+0x1b8>)
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	4413      	add	r3, r2
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	9202      	str	r2, [sp, #8]
 800841e:	2201      	movs	r2, #1
 8008420:	9201      	str	r2, [sp, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2303      	movs	r3, #3
 8008426:	2207      	movs	r2, #7
 8008428:	2101      	movs	r1, #1
 800842a:	483f      	ldr	r0, [pc, #252]	; (8008528 <gpsThread+0x1c0>)
 800842c:	f00f fa44 	bl	80178b8 <pifGpsUblox_SetPubxConfig>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d014      	beq.n	8008460 <gpsThread+0xf8>
            	retry--;
 8008436:	4b3b      	ldr	r3, [pc, #236]	; (8008524 <gpsThread+0x1bc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3b01      	subs	r3, #1
 800843c:	4a39      	ldr	r2, [pc, #228]	; (8008524 <gpsThread+0x1bc>)
 800843e:	6013      	str	r3, [r2, #0]
            	if (!retry) {
 8008440:	4b38      	ldr	r3, [pc, #224]	; (8008524 <gpsThread+0x1bc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <gpsThread+0xf0>
					gpsData.state_position++;
 8008448:	4b32      	ldr	r3, [pc, #200]	; (8008514 <gpsThread+0x1ac>)
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	3301      	adds	r3, #1
 800844e:	4a31      	ldr	r2, [pc, #196]	; (8008514 <gpsThread+0x1ac>)
 8008450:	6113      	str	r3, [r2, #16]
					gpsData.state = GPS_INITIALIZING;
 8008452:	4b30      	ldr	r3, [pc, #192]	; (8008514 <gpsThread+0x1ac>)
 8008454:	2201      	movs	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
            	}
				gpsData.state_ts = m;
 8008458:	4a2e      	ldr	r2, [pc, #184]	; (8008514 <gpsThread+0x1ac>)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 800845e:	e055      	b.n	800850c <gpsThread+0x1a4>
        		gpsSetState(GPS_INITIALIZING);
 8008460:	2001      	movs	r0, #1
 8008462:	f7ff fac5 	bl	80079f0 <gpsSetState>
            break;
 8008466:	e051      	b.n	800850c <gpsThread+0x1a4>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 8008468:	4b2b      	ldr	r3, [pc, #172]	; (8008518 <gpsThread+0x1b0>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 100)
 800846e:	4b29      	ldr	r3, [pc, #164]	; (8008514 <gpsThread+0x1ac>)
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b63      	cmp	r3, #99	; 0x63
 8008478:	d947      	bls.n	800850a <gpsThread+0x1a2>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 800847a:	4b28      	ldr	r3, [pc, #160]	; (800851c <gpsThread+0x1b4>)
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	4b25      	ldr	r3, [pc, #148]	; (8008514 <gpsThread+0x1ac>)
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	4927      	ldr	r1, [pc, #156]	; (8008520 <gpsThread+0x1b8>)
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	440b      	add	r3, r1
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7f9 ff59 	bl	8002344 <serialSetBaudRate>
            gpsSetState(GPS_CONFIGURATION);
 8008492:	2004      	movs	r0, #4
 8008494:	f7ff faac 	bl	80079f0 <gpsSetState>
            break;
 8008498:	e038      	b.n	800850c <gpsThread+0x1a4>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 800849a:	f7ff ff47 	bl	800832c <gpsInitHardware>
            break;
 800849e:	e035      	b.n	800850c <gpsThread+0x1a4>

        case GPS_LOSTCOMMS:
            pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 80084a0:	2300      	movs	r3, #0
 80084a2:	2200      	movs	r2, #0
 80084a4:	4921      	ldr	r1, [pc, #132]	; (800852c <gpsThread+0x1c4>)
 80084a6:	4822      	ldr	r0, [pc, #136]	; (8008530 <gpsThread+0x1c8>)
 80084a8:	f00d fc26 	bl	8015cf8 <pifGps_SetTimeout>
            gpsData.errors++;
 80084ac:	4b19      	ldr	r3, [pc, #100]	; (8008514 <gpsThread+0x1ac>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a18      	ldr	r2, [pc, #96]	; (8008514 <gpsThread+0x1ac>)
 80084b4:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 80084b6:	4b1f      	ldr	r3, [pc, #124]	; (8008534 <gpsThread+0x1cc>)
 80084b8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d012      	beq.n	80084e6 <gpsThread+0x17e>
                gpsData.baudrateIndex++;
 80084c0:	4b14      	ldr	r3, [pc, #80]	; (8008514 <gpsThread+0x1ac>)
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	3301      	adds	r3, #1
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	4b12      	ldr	r3, [pc, #72]	; (8008514 <gpsThread+0x1ac>)
 80084ca:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <gpsThread+0x1ac>)
 80084ce:	785a      	ldrb	r2, [r3, #1]
 80084d0:	4b19      	ldr	r3, [pc, #100]	; (8008538 <gpsThread+0x1d0>)
 80084d2:	fba3 1302 	umull	r1, r3, r3, r2
 80084d6:	0899      	lsrs	r1, r3, #2
 80084d8:	460b      	mov	r3, r1
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <gpsThread+0x1ac>)
 80084e4:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <gpsThread+0x1b0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a0a      	ldr	r2, [pc, #40]	; (8008514 <gpsThread+0x1ac>)
 80084ec:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <gpsThread+0x1d4>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <gpsThread+0x1d8>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f7ff fa78 	bl	80079f0 <gpsSetState>
            break;
 8008500:	e004      	b.n	800850c <gpsThread+0x1a4>
                return;
 8008502:	bf00      	nop
 8008504:	e002      	b.n	800850c <gpsThread+0x1a4>
                return;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <gpsThread+0x1a4>
                return;
 800850a:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000fe0 	.word	0x20000fe0
 8008518:	20001c6c 	.word	0x20001c6c
 800851c:	20000840 	.word	0x20000840
 8008520:	08028d90 	.word	0x08028d90
 8008524:	20001430 	.word	0x20001430
 8008528:	20001000 	.word	0x20001000
 800852c:	2000156c 	.word	0x2000156c
 8008530:	20001008 	.word	0x20001008
 8008534:	200008f8 	.word	0x200008f8
 8008538:	cccccccd 	.word	0xcccccccd
 800853c:	2000181c 	.word	0x2000181c
 8008540:	20001738 	.word	0x20001738

08008544 <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af04      	add	r7, sp, #16
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 800854a:	4b2d      	ldr	r3, [pc, #180]	; (8008600 <gpsPollSvinfo+0xbc>)
 800854c:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008550:	2b01      	cmp	r3, #1
 8008552:	d150      	bne.n	80085f6 <gpsPollSvinfo+0xb2>
        return;

    GPS_numCh = gps_ublox._num_ch;
 8008554:	4b2b      	ldr	r3, [pc, #172]	; (8008604 <gpsPollSvinfo+0xc0>)
 8008556:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 800855a:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <gpsPollSvinfo+0xc4>)
 800855c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	e02b      	b.n	80085bc <gpsPollSvinfo+0x78>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 8008564:	4a27      	ldr	r2, [pc, #156]	; (8008604 <gpsPollSvinfo+0xc0>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	33de      	adds	r3, #222	; 0xde
 800856c:	7819      	ldrb	r1, [r3, #0]
 800856e:	4a27      	ldr	r2, [pc, #156]	; (800860c <gpsPollSvinfo+0xc8>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4413      	add	r3, r2
 8008574:	460a      	mov	r2, r1
 8008576:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 8008578:	4a22      	ldr	r2, [pc, #136]	; (8008604 <gpsPollSvinfo+0xc0>)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	33ee      	adds	r3, #238	; 0xee
 8008580:	7819      	ldrb	r1, [r3, #0]
 8008582:	4a23      	ldr	r2, [pc, #140]	; (8008610 <gpsPollSvinfo+0xcc>)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	460a      	mov	r2, r1
 800858a:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <gpsPollSvinfo+0xc0>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4413      	add	r3, r2
 8008592:	33fe      	adds	r3, #254	; 0xfe
 8008594:	7819      	ldrb	r1, [r3, #0]
 8008596:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <gpsPollSvinfo+0xd0>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	460a      	mov	r2, r1
 800859e:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <gpsPollSvinfo+0xc0>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80085aa:	7819      	ldrb	r1, [r3, #0]
 80085ac:	4a1a      	ldr	r2, [pc, #104]	; (8008618 <gpsPollSvinfo+0xd4>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	460a      	mov	r2, r1
 80085b4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3301      	adds	r3, #1
 80085ba:	607b      	str	r3, [r7, #4]
 80085bc:	4b12      	ldr	r3, [pc, #72]	; (8008608 <gpsPollSvinfo+0xc4>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4293      	cmp	r3, r2
 80085c6:	dbcd      	blt.n	8008564 <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <gpsPollSvinfo+0xc0>)
 80085ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80085ce:	4a13      	ldr	r2, [pc, #76]	; (800861c <gpsPollSvinfo+0xd8>)
 80085d0:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 80085d2:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <gpsPollSvinfo+0xc0>)
 80085d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80085d8:	4a10      	ldr	r2, [pc, #64]	; (800861c <gpsPollSvinfo+0xd8>)
 80085da:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, TRUE, 90);
 80085dc:	235a      	movs	r3, #90	; 0x5a
 80085de:	9302      	str	r3, [sp, #8]
 80085e0:	2301      	movs	r3, #1
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	2300      	movs	r3, #0
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	2300      	movs	r3, #0
 80085ea:	2230      	movs	r2, #48	; 0x30
 80085ec:	2101      	movs	r1, #1
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <gpsPollSvinfo+0xc0>)
 80085f0:	f00f f996 	bl	8017920 <pifGpsUblox_SendUbxMsg>
 80085f4:	e000      	b.n	80085f8 <gpsPollSvinfo+0xb4>
        return;
 80085f6:	bf00      	nop
}
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	200008f8 	.word	0x200008f8
 8008604:	20001000 	.word	0x20001000
 8008608:	20001839 	.word	0x20001839
 800860c:	2000183c 	.word	0x2000183c
 8008610:	2000185c 	.word	0x2000185c
 8008614:	2000187c 	.word	0x2000187c
 8008618:	2000189c 	.word	0x2000189c
 800861c:	200018c4 	.word	0x200018c4

08008620 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	edd3 7a00 	vldr	s15, [r3]
 800863a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008642:	ee17 3a90 	vmov	r3, s15
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	ed93 7a00 	vldr	s14, [r3]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	edd3 7a01 	vldr	s15, [r3, #4]
 8008676:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	edd3 7a00 	vldr	s15, [r3]
 8008680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	edd3 7a00 	vldr	s15, [r3]
 8008694:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	edd3 7a03 	vldr	s15, [r3, #12]
 800869e:	eef1 7a67 	vneg.f32	s15, s15
 80086a2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80086ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b0:	ee17 2a90 	vmov	r2, s15
 80086b4:	ee16 1a90 	vmov	r1, s13
 80086b8:	ee17 0a10 	vmov	r0, s14
 80086bc:	f7fb fa26 	bl	8003b0c <constrain>
 80086c0:	ee07 0a90 	vmov	s15, r0
 80086c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	edd3 7a00 	vldr	s15, [r3]
 80086d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086d8:	ee17 3a90 	vmov	r3, s15
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	0000      	movs	r0, r0
	...

080086e8 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 80086e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	ed93 7a00 	vldr	s14, [r3]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f7f7 fec7 	bl	80004b0 <__aeabi_f2d>
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f7f7 fec0 	bl	80004b0 <__aeabi_f2d>
 8008730:	4680      	mov	r8, r0
 8008732:	4689      	mov	r9, r1
 8008734:	4b36      	ldr	r3, [pc, #216]	; (8008810 <get_D+0x128>)
 8008736:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008742:	ee17 0a90 	vmov	r0, s15
 8008746:	f7f7 feb3 	bl	80004b0 <__aeabi_f2d>
 800874a:	a32f      	add	r3, pc, #188	; (adr r3, 8008808 <get_D+0x120>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f7f7 ff06 	bl	8000560 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	492d      	ldr	r1, [pc, #180]	; (8008814 <get_D+0x12c>)
 800875e:	f7f8 f829 	bl	80007b4 <__aeabi_ddiv>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4692      	mov	sl, r2
 8008768:	469b      	mov	fp, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f7f7 fe9e 	bl	80004b0 <__aeabi_f2d>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	f7f7 fd3a 	bl	80001f4 <__adddf3>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4640      	mov	r0, r8
 8008786:	4649      	mov	r1, r9
 8008788:	f7f8 f814 	bl	80007b4 <__aeabi_ddiv>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4690      	mov	r8, r2
 8008792:	4699      	mov	r9, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	ed93 7a04 	vldr	s14, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	edd3 7a02 	vldr	s15, [r3, #8]
 80087a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087a4:	ee17 0a90 	vmov	r0, s15
 80087a8:	f7f7 fe82 	bl	80004b0 <__aeabi_f2d>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4640      	mov	r0, r8
 80087b2:	4649      	mov	r1, r9
 80087b4:	f7f7 fed4 	bl	8000560 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4620      	mov	r0, r4
 80087be:	4629      	mov	r1, r5
 80087c0:	f7f7 fd18 	bl	80001f4 <__adddf3>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4610      	mov	r0, r2
 80087ca:	4619      	mov	r1, r3
 80087cc:	f7f8 f9aa 	bl	8000b24 <__aeabi_d2f>
 80087d0:	4602      	mov	r2, r0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80087f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087f8:	ee17 3a90 	vmov	r3, s15
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008806:	bf00      	nop
 8008808:	54442d18 	.word	0x54442d18
 800880c:	401921fb 	.word	0x401921fb
 8008810:	20000e64 	.word	0x20000e64
 8008814:	3ff00000 	.word	0x3ff00000

08008818 <reset_PID>:

static void reset_PID(PID *pid)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	609a      	str	r2, [r3, #8]
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
	...

08008844 <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 8008844:	b590      	push	{r4, r7, lr}
 8008846:	b089      	sub	sp, #36	; 0x24
 8008848:	af02      	add	r7, sp, #8
 800884a:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 800884c:	4b84      	ldr	r3, [pc, #528]	; (8008a60 <taskGpsNewData+0x21c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a84      	ldr	r2, [pc, #528]	; (8008a64 <taskGpsNewData+0x220>)
 8008852:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 8008854:	2020      	movs	r0, #32
 8008856:	f7fe fa89 	bl	8006d6c <sensorsSet>
        if (GPS_update == 1)
 800885a:	4b83      	ldr	r3, [pc, #524]	; (8008a68 <taskGpsNewData+0x224>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d103      	bne.n	800886a <taskGpsNewData+0x26>
            GPS_update = 0;
 8008862:	4b81      	ldr	r3, [pc, #516]	; (8008a68 <taskGpsNewData+0x224>)
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e002      	b.n	8008870 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 800886a:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <taskGpsNewData+0x224>)
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008870:	4b7e      	ldr	r3, [pc, #504]	; (8008a6c <taskGpsNewData+0x228>)
 8008872:	7adb      	ldrb	r3, [r3, #11]
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 81ae 	beq.w	8008bd6 <taskGpsNewData+0x392>
 800887a:	4b7d      	ldr	r3, [pc, #500]	; (8008a70 <taskGpsNewData+0x22c>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b04      	cmp	r3, #4
 8008880:	f240 81a9 	bls.w	8008bd6 <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 8008884:	4b79      	ldr	r3, [pc, #484]	; (8008a6c <taskGpsNewData+0x228>)
 8008886:	785b      	ldrb	r3, [r3, #1]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <taskGpsNewData+0x56>
 800888c:	4b77      	ldr	r3, [pc, #476]	; (8008a6c <taskGpsNewData+0x228>)
 800888e:	7c1b      	ldrb	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008894:	4b75      	ldr	r3, [pc, #468]	; (8008a6c <taskGpsNewData+0x228>)
 8008896:	2200      	movs	r2, #0
 8008898:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 800889a:	4b74      	ldr	r3, [pc, #464]	; (8008a6c <taskGpsNewData+0x228>)
 800889c:	7b1b      	ldrb	r3, [r3, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d105      	bne.n	80088ae <taskGpsNewData+0x6a>
 80088a2:	4b72      	ldr	r3, [pc, #456]	; (8008a6c <taskGpsNewData+0x228>)
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 80088aa:	f000 f9c1 	bl	8008c30 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 80088ae:	4b71      	ldr	r3, [pc, #452]	; (8008a74 <taskGpsNewData+0x230>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	4b70      	ldr	r3, [pc, #448]	; (8008a78 <taskGpsNewData+0x234>)
 80088b6:	fb83 1302 	smull	r1, r3, r3, r2
 80088ba:	1059      	asrs	r1, r3, #1
 80088bc:	17d3      	asrs	r3, r2, #31
 80088be:	1ac9      	subs	r1, r1, r3
 80088c0:	460b      	mov	r3, r1
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	1ad1      	subs	r1, r2, r3
 80088c8:	b2ca      	uxtb	r2, r1
 80088ca:	4b6a      	ldr	r3, [pc, #424]	; (8008a74 <taskGpsNewData+0x230>)
 80088cc:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 80088ce:	2300      	movs	r3, #0
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	e09f      	b.n	8008a14 <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 80088d4:	4a69      	ldr	r2, [pc, #420]	; (8008a7c <taskGpsNewData+0x238>)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088dc:	4968      	ldr	r1, [pc, #416]	; (8008a80 <taskGpsNewData+0x23c>)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 80088e4:	4a66      	ldr	r2, [pc, #408]	; (8008a80 <taskGpsNewData+0x23c>)
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ec:	4a65      	ldr	r2, [pc, #404]	; (8008a84 <taskGpsNewData+0x240>)
 80088ee:	fb82 1203 	smull	r1, r2, r2, r3
 80088f2:	1592      	asrs	r2, r2, #22
 80088f4:	17db      	asrs	r3, r3, #31
 80088f6:	1ad2      	subs	r2, r2, r3
 80088f8:	4963      	ldr	r1, [pc, #396]	; (8008a88 <taskGpsNewData+0x244>)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 8008900:	4a5f      	ldr	r2, [pc, #380]	; (8008a80 <taskGpsNewData+0x23c>)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008908:	495f      	ldr	r1, [pc, #380]	; (8008a88 <taskGpsNewData+0x244>)
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008910:	495e      	ldr	r1, [pc, #376]	; (8008a8c <taskGpsNewData+0x248>)
 8008912:	fb01 f303 	mul.w	r3, r1, r3
 8008916:	4413      	add	r3, r2
 8008918:	4a5d      	ldr	r2, [pc, #372]	; (8008a90 <taskGpsNewData+0x24c>)
 800891a:	fb82 1203 	smull	r1, r2, r2, r3
 800891e:	1312      	asrs	r2, r2, #12
 8008920:	17db      	asrs	r3, r3, #31
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	b299      	uxth	r1, r3
 8008926:	4a5b      	ldr	r2, [pc, #364]	; (8008a94 <taskGpsNewData+0x250>)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 800892e:	4a5a      	ldr	r2, [pc, #360]	; (8008a98 <taskGpsNewData+0x254>)
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008936:	4b4f      	ldr	r3, [pc, #316]	; (8008a74 <taskGpsNewData+0x230>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461c      	mov	r4, r3
 800893c:	4857      	ldr	r0, [pc, #348]	; (8008a9c <taskGpsNewData+0x258>)
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	4423      	add	r3, r4
 8008948:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800894c:	1aca      	subs	r2, r1, r3
 800894e:	4952      	ldr	r1, [pc, #328]	; (8008a98 <taskGpsNewData+0x254>)
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 8008956:	4a4a      	ldr	r2, [pc, #296]	; (8008a80 <taskGpsNewData+0x23c>)
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800895e:	494a      	ldr	r1, [pc, #296]	; (8008a88 <taskGpsNewData+0x244>)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008966:	4949      	ldr	r1, [pc, #292]	; (8008a8c <taskGpsNewData+0x248>)
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	4941      	ldr	r1, [pc, #260]	; (8008a74 <taskGpsNewData+0x230>)
 800896e:	7809      	ldrb	r1, [r1, #0]
 8008970:	460c      	mov	r4, r1
 8008972:	18d1      	adds	r1, r2, r3
 8008974:	4849      	ldr	r0, [pc, #292]	; (8008a9c <taskGpsNewData+0x258>)
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	4423      	add	r3, r4
 8008980:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 8008984:	4a44      	ldr	r2, [pc, #272]	; (8008a98 <taskGpsNewData+0x254>)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800898c:	4b39      	ldr	r3, [pc, #228]	; (8008a74 <taskGpsNewData+0x230>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	461c      	mov	r4, r3
 8008992:	4842      	ldr	r0, [pc, #264]	; (8008a9c <taskGpsNewData+0x258>)
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	4423      	add	r3, r4
 800899e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80089a2:	18ca      	adds	r2, r1, r3
 80089a4:	493c      	ldr	r1, [pc, #240]	; (8008a98 <taskGpsNewData+0x254>)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 80089ac:	4a3a      	ldr	r2, [pc, #232]	; (8008a98 <taskGpsNewData+0x254>)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b4:	4a30      	ldr	r2, [pc, #192]	; (8008a78 <taskGpsNewData+0x234>)
 80089b6:	fb82 1203 	smull	r1, r2, r2, r3
 80089ba:	1052      	asrs	r2, r2, #1
 80089bc:	17db      	asrs	r3, r3, #31
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	4931      	ldr	r1, [pc, #196]	; (8008a88 <taskGpsNewData+0x244>)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80089c8:	4935      	ldr	r1, [pc, #212]	; (8008aa0 <taskGpsNewData+0x25c>)
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	441a      	add	r2, r3
 80089d0:	4934      	ldr	r1, [pc, #208]	; (8008aa4 <taskGpsNewData+0x260>)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 80089d8:	4b33      	ldr	r3, [pc, #204]	; (8008aa8 <taskGpsNewData+0x264>)
 80089da:	f993 3000 	ldrsb.w	r3, [r3]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d115      	bne.n	8008a0e <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 80089e2:	4a2c      	ldr	r2, [pc, #176]	; (8008a94 <taskGpsNewData+0x250>)
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d90f      	bls.n	8008a0e <taskGpsNewData+0x1ca>
 80089ee:	4a29      	ldr	r2, [pc, #164]	; (8008a94 <taskGpsNewData+0x250>)
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f6:	f240 32e6 	movw	r2, #998	; 0x3e6
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d807      	bhi.n	8008a0e <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 80089fe:	4a29      	ldr	r2, [pc, #164]	; (8008aa4 <taskGpsNewData+0x260>)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a06:	491d      	ldr	r1, [pc, #116]	; (8008a7c <taskGpsNewData+0x238>)
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	3301      	adds	r3, #1
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	f77f af5c 	ble.w	80088d4 <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <taskGpsNewData+0x21c>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	4b22      	ldr	r3, [pc, #136]	; (8008aac <taskGpsNewData+0x268>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a2e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008ab0 <taskGpsNewData+0x26c>
 8008a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a36:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <taskGpsNewData+0x270>)
 8008a38:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <taskGpsNewData+0x21c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1a      	ldr	r2, [pc, #104]	; (8008aac <taskGpsNewData+0x268>)
 8008a42:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 8008a44:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <taskGpsNewData+0x270>)
 8008a46:	edd3 7a00 	vldr	s15, [r3]
 8008a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	d52f      	bpl.n	8008ab8 <taskGpsNewData+0x274>
 8008a58:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <taskGpsNewData+0x270>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	e02e      	b.n	8008abc <taskGpsNewData+0x278>
 8008a5e:	bf00      	nop
 8008a60:	20001c6c 	.word	0x20001c6c
 8008a64:	20000fe0 	.word	0x20000fe0
 8008a68:	20001826 	.word	0x20001826
 8008a6c:	20001738 	.word	0x20001738
 8008a70:	2000181c 	.word	0x2000181c
 8008a74:	200013da 	.word	0x200013da
 8008a78:	66666667 	.word	0x66666667
 8008a7c:	200017fc 	.word	0x200017fc
 8008a80:	2000140c 	.word	0x2000140c
 8008a84:	6b5fca6b 	.word	0x6b5fca6b
 8008a88:	2000141c 	.word	0x2000141c
 8008a8c:	ff676980 	.word	0xff676980
 8008a90:	68db8bad 	.word	0x68db8bad
 8008a94:	20001424 	.word	0x20001424
 8008a98:	20001404 	.word	0x20001404
 8008a9c:	200013dc 	.word	0x200013dc
 8008aa0:	00989680 	.word	0x00989680
 8008aa4:	20001414 	.word	0x20001414
 8008aa8:	20001838 	.word	0x20001838
 8008aac:	20001434 	.word	0x20001434
 8008ab0:	447a0000 	.word	0x447a0000
 8008ab4:	200013ac 	.word	0x200013ac
 8008ab8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008abc:	4a4a      	ldr	r2, [pc, #296]	; (8008be8 <taskGpsNewData+0x3a4>)
 8008abe:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008ac0:	f107 0308 	add.w	r3, r7, #8
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f107 030c 	add.w	r3, r7, #12
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4b47      	ldr	r3, [pc, #284]	; (8008bec <taskGpsNewData+0x3a8>)
 8008ace:	4a48      	ldr	r2, [pc, #288]	; (8008bf0 <taskGpsNewData+0x3ac>)
 8008ad0:	4948      	ldr	r1, [pc, #288]	; (8008bf4 <taskGpsNewData+0x3b0>)
 8008ad2:	4849      	ldr	r0, [pc, #292]	; (8008bf8 <taskGpsNewData+0x3b4>)
 8008ad4:	f000 fad8 	bl	8009088 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a48      	ldr	r2, [pc, #288]	; (8008bfc <taskGpsNewData+0x3b8>)
 8008adc:	fb82 1203 	smull	r1, r2, r2, r3
 8008ae0:	1152      	asrs	r2, r2, #5
 8008ae2:	17db      	asrs	r3, r3, #31
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	4b45      	ldr	r3, [pc, #276]	; (8008c00 <taskGpsNewData+0x3bc>)
 8008aea:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a43      	ldr	r2, [pc, #268]	; (8008bfc <taskGpsNewData+0x3b8>)
 8008af0:	fb82 1203 	smull	r1, r2, r2, r3
 8008af4:	1152      	asrs	r2, r2, #5
 8008af6:	17db      	asrs	r3, r3, #31
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	b21a      	sxth	r2, r3
 8008afc:	4b41      	ldr	r3, [pc, #260]	; (8008c04 <taskGpsNewData+0x3c0>)
 8008afe:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 8008b00:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <taskGpsNewData+0x3c4>)
 8008b02:	7b1b      	ldrb	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d105      	bne.n	8008b14 <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 8008b08:	4b3d      	ldr	r3, [pc, #244]	; (8008c00 <taskGpsNewData+0x3bc>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 8008b0e:	4b3d      	ldr	r3, [pc, #244]	; (8008c04 <taskGpsNewData+0x3c0>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 8008b14:	f000 fb26 	bl	8009164 <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 8008b18:	4b3b      	ldr	r3, [pc, #236]	; (8008c08 <taskGpsNewData+0x3c4>)
 8008b1a:	7a1b      	ldrb	r3, [r3, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d103      	bne.n	8008b28 <taskGpsNewData+0x2e4>
 8008b20:	4b39      	ldr	r3, [pc, #228]	; (8008c08 <taskGpsNewData+0x3c4>)
 8008b22:	79db      	ldrb	r3, [r3, #7]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d056      	beq.n	8008bd6 <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008b28:	4b38      	ldr	r3, [pc, #224]	; (8008c0c <taskGpsNewData+0x3c8>)
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	4b38      	ldr	r3, [pc, #224]	; (8008c10 <taskGpsNewData+0x3cc>)
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4b38      	ldr	r3, [pc, #224]	; (8008c14 <taskGpsNewData+0x3d0>)
 8008b32:	4a39      	ldr	r2, [pc, #228]	; (8008c18 <taskGpsNewData+0x3d4>)
 8008b34:	492f      	ldr	r1, [pc, #188]	; (8008bf4 <taskGpsNewData+0x3b0>)
 8008b36:	4830      	ldr	r0, [pc, #192]	; (8008bf8 <taskGpsNewData+0x3b4>)
 8008b38:	f000 faa6 	bl	8009088 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008b3c:	4b2d      	ldr	r3, [pc, #180]	; (8008bf4 <taskGpsNewData+0x3b0>)
 8008b3e:	4a2e      	ldr	r2, [pc, #184]	; (8008bf8 <taskGpsNewData+0x3b4>)
 8008b40:	4934      	ldr	r1, [pc, #208]	; (8008c14 <taskGpsNewData+0x3d0>)
 8008b42:	4835      	ldr	r0, [pc, #212]	; (8008c18 <taskGpsNewData+0x3d4>)
 8008b44:	f000 fb90 	bl	8009268 <GPS_calc_location_error>

                if (f.FIXED_WING)
 8008b48:	4b2f      	ldr	r3, [pc, #188]	; (8008c08 <taskGpsNewData+0x3c4>)
 8008b4a:	7c1b      	ldrb	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008b50:	4b32      	ldr	r3, [pc, #200]	; (8008c1c <taskGpsNewData+0x3d8>)
 8008b52:	2202      	movs	r2, #2
 8008b54:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008b56:	4b31      	ldr	r3, [pc, #196]	; (8008c1c <taskGpsNewData+0x3d8>)
 8008b58:	f993 3000 	ldrsb.w	r3, [r3]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d002      	beq.n	8008b66 <taskGpsNewData+0x322>
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d003      	beq.n	8008b6c <taskGpsNewData+0x328>
 8008b64:	e03a      	b.n	8008bdc <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008b66:	f000 fbab 	bl	80092c0 <GPS_calc_poshold>
                        break;
 8008b6a:	e037      	b.n	8008bdc <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 8008b6c:	4b2c      	ldr	r3, [pc, #176]	; (8008c20 <taskGpsNewData+0x3dc>)
 8008b6e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008b72:	b21b      	sxth	r3, r3
 8008b74:	2101      	movs	r1, #1
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fdb0 	bl	80096dc <GPS_calc_desired_speed>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008b80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fc53 	bl	8009430 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 8008b8a:	4b25      	ldr	r3, [pc, #148]	; (8008c20 <taskGpsNewData+0x3dc>)
 8008b8c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008b94:	4b23      	ldr	r3, [pc, #140]	; (8008c24 <taskGpsNewData+0x3e0>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a18      	ldr	r2, [pc, #96]	; (8008bfc <taskGpsNewData+0x3b8>)
 8008b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8008b9e:	1152      	asrs	r2, r2, #5
 8008ba0:	17db      	asrs	r3, r3, #31
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	b21a      	sxth	r2, r3
 8008ba6:	4b20      	ldr	r3, [pc, #128]	; (8008c28 <taskGpsNewData+0x3e4>)
 8008ba8:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 8008baa:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <taskGpsNewData+0x3dc>)
 8008bac:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <taskGpsNewData+0x3cc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	da04      	bge.n	8008bc4 <taskGpsNewData+0x380>
 8008bba:	f000 fa45 	bl	8009048 <check_missed_wp>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008bc4:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <taskGpsNewData+0x3d8>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 8008bca:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <taskGpsNewData+0x3e8>)
 8008bcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008bd0:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <taskGpsNewData+0x3e4>)
 8008bd2:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008bd4:	e001      	b.n	8008bda <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <taskGpsNewData+0x398>
                        break;
 8008bda:	bf00      	nop
        }

    return 0;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd90      	pop	{r4, r7, pc}
 8008be6:	bf00      	nop
 8008be8:	200013ac 	.word	0x200013ac
 8008bec:	20001808 	.word	0x20001808
 8008bf0:	20001804 	.word	0x20001804
 8008bf4:	20001800 	.word	0x20001800
 8008bf8:	200017fc 	.word	0x200017fc
 8008bfc:	51eb851f 	.word	0x51eb851f
 8008c00:	2000181e 	.word	0x2000181e
 8008c04:	20001820 	.word	0x20001820
 8008c08:	20001738 	.word	0x20001738
 8008c0c:	200013c8 	.word	0x200013c8
 8008c10:	200013d4 	.word	0x200013d4
 8008c14:	200013c4 	.word	0x200013c4
 8008c18:	200013c0 	.word	0x200013c0
 8008c1c:	20001838 	.word	0x20001838
 8008c20:	20000e64 	.word	0x20000e64
 8008c24:	20001428 	.word	0x20001428
 8008c28:	20001a0a 	.word	0x20001a0a
 8008c2c:	2000142c 	.word	0x2000142c

08008c30 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 8008c34:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <GPS_reset_home_position+0x4c>)
 8008c36:	7adb      	ldrb	r3, [r3, #11]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01d      	beq.n	8008c78 <GPS_reset_home_position+0x48>
 8008c3c:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <GPS_reset_home_position+0x50>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d919      	bls.n	8008c78 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <GPS_reset_home_position+0x54>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a0f      	ldr	r2, [pc, #60]	; (8008c88 <GPS_reset_home_position+0x58>)
 8008c4a:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <GPS_reset_home_position+0x54>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4a0d      	ldr	r2, [pc, #52]	; (8008c88 <GPS_reset_home_position+0x58>)
 8008c52:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <GPS_reset_home_position+0x54>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f96d 	bl	8008f38 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008c5e:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <GPS_reset_home_position+0x5c>)
 8008c60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008c64:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <GPS_reset_home_position+0x60>)
 8008c66:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <GPS_reset_home_position+0x64>)
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <GPS_reset_home_position+0x58>)
 8008c70:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008c72:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <GPS_reset_home_position+0x4c>)
 8008c74:	2201      	movs	r2, #1
 8008c76:	731a      	strb	r2, [r3, #12]
    }
}
 8008c78:	bf00      	nop
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20001738 	.word	0x20001738
 8008c80:	2000181c 	.word	0x2000181c
 8008c84:	200017fc 	.word	0x200017fc
 8008c88:	20001804 	.word	0x20001804
 8008c8c:	20001a08 	.word	0x20001a08
 8008c90:	2000142c 	.word	0x2000142c
 8008c94:	20001822 	.word	0x20001822

08008c98 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	607b      	str	r3, [r7, #4]
 8008ca2:	e02f      	b.n	8008d04 <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008ca4:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <GPS_reset_nav+0x88>)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008cae:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <GPS_reset_nav+0x8c>)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008cb8:	4a1b      	ldr	r2, [pc, #108]	; (8008d28 <GPS_reset_nav+0x90>)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <GPS_reset_nav+0x94>)
 8008cce:	4413      	add	r3, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7ff fda1 	bl	8008818 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4a13      	ldr	r2, [pc, #76]	; (8008d30 <GPS_reset_nav+0x98>)
 8008ce2:	4413      	add	r3, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff fd97 	bl	8008818 <reset_PID>
        reset_PID(&navPID[i]);
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4a0f      	ldr	r2, [pc, #60]	; (8008d34 <GPS_reset_nav+0x9c>)
 8008cf6:	4413      	add	r3, r2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fd8d 	bl	8008818 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3301      	adds	r3, #1
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	ddcc      	ble.n	8008ca4 <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008d0a:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <GPS_reset_nav+0xa0>)
 8008d0c:	7c1b      	ldrb	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008d12:	f7fe f8b1 	bl	8006e78 <fw_nav_reset>

}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20001828 	.word	0x20001828
 8008d24:	20001834 	.word	0x20001834
 8008d28:	20001830 	.word	0x20001830
 8008d2c:	20001334 	.word	0x20001334
 8008d30:	2000135c 	.word	0x2000135c
 8008d34:	20001384 	.word	0x20001384
 8008d38:	20001738 	.word	0x20001738

08008d3c <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008d40:	4b50      	ldr	r3, [pc, #320]	; (8008e84 <gpsSetPIDs+0x148>)
 8008d42:	795b      	ldrb	r3, [r3, #5]
 8008d44:	ee07 3a90 	vmov	s15, r3
 8008d48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e88 <gpsSetPIDs+0x14c>
 8008d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d54:	4b4d      	ldr	r3, [pc, #308]	; (8008e8c <gpsSetPIDs+0x150>)
 8008d56:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008d5a:	4b4a      	ldr	r3, [pc, #296]	; (8008e84 <gpsSetPIDs+0x148>)
 8008d5c:	7bdb      	ldrb	r3, [r3, #15]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e88 <gpsSetPIDs+0x14c>
 8008d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d6e:	4b47      	ldr	r3, [pc, #284]	; (8008e8c <gpsSetPIDs+0x150>)
 8008d70:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008d74:	4b45      	ldr	r3, [pc, #276]	; (8008e8c <gpsSetPIDs+0x150>)
 8008d76:	4a46      	ldr	r2, [pc, #280]	; (8008e90 <gpsSetPIDs+0x154>)
 8008d78:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008d7a:	4b42      	ldr	r3, [pc, #264]	; (8008e84 <gpsSetPIDs+0x148>)
 8008d7c:	799b      	ldrb	r3, [r3, #6]
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d8e:	4b41      	ldr	r3, [pc, #260]	; (8008e94 <gpsSetPIDs+0x158>)
 8008d90:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008d94:	4b3b      	ldr	r3, [pc, #236]	; (8008e84 <gpsSetPIDs+0x148>)
 8008d96:	7c1b      	ldrb	r3, [r3, #16]
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008da0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008e88 <gpsSetPIDs+0x14c>
 8008da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008da8:	4b3a      	ldr	r3, [pc, #232]	; (8008e94 <gpsSetPIDs+0x158>)
 8008daa:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008dae:	4b35      	ldr	r3, [pc, #212]	; (8008e84 <gpsSetPIDs+0x148>)
 8008db0:	7e9b      	ldrb	r3, [r3, #26]
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dba:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008e98 <gpsSetPIDs+0x15c>
 8008dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dc2:	4b34      	ldr	r3, [pc, #208]	; (8008e94 <gpsSetPIDs+0x158>)
 8008dc4:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008dc8:	4b32      	ldr	r3, [pc, #200]	; (8008e94 <gpsSetPIDs+0x158>)
 8008dca:	4a31      	ldr	r2, [pc, #196]	; (8008e90 <gpsSetPIDs+0x154>)
 8008dcc:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008dce:	4b2d      	ldr	r3, [pc, #180]	; (8008e84 <gpsSetPIDs+0x148>)
 8008dd0:	79db      	ldrb	r3, [r3, #7]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dda:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008de2:	4b2e      	ldr	r3, [pc, #184]	; (8008e9c <gpsSetPIDs+0x160>)
 8008de4:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008de8:	4b26      	ldr	r3, [pc, #152]	; (8008e84 <gpsSetPIDs+0x148>)
 8008dea:	7c5b      	ldrb	r3, [r3, #17]
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008df4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008e88 <gpsSetPIDs+0x14c>
 8008df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008dfc:	4b27      	ldr	r3, [pc, #156]	; (8008e9c <gpsSetPIDs+0x160>)
 8008dfe:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008e02:	4b20      	ldr	r3, [pc, #128]	; (8008e84 <gpsSetPIDs+0x148>)
 8008e04:	7edb      	ldrb	r3, [r3, #27]
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e0e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008e98 <gpsSetPIDs+0x15c>
 8008e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e16:	4b21      	ldr	r3, [pc, #132]	; (8008e9c <gpsSetPIDs+0x160>)
 8008e18:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008e1c:	4b1f      	ldr	r3, [pc, #124]	; (8008e9c <gpsSetPIDs+0x160>)
 8008e1e:	4a1c      	ldr	r2, [pc, #112]	; (8008e90 <gpsSetPIDs+0x154>)
 8008e20:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008e22:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <gpsSetPIDs+0x164>)
 8008e24:	7c1b      	ldrb	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d026      	beq.n	8008e78 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008e2a:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <gpsSetPIDs+0x148>)
 8008e2c:	791b      	ldrb	r3, [r3, #4]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e3e:	4b19      	ldr	r3, [pc, #100]	; (8008ea4 <gpsSetPIDs+0x168>)
 8008e40:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <gpsSetPIDs+0x148>)
 8008e46:	7b9b      	ldrb	r3, [r3, #14]
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e50:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008e88 <gpsSetPIDs+0x14c>
 8008e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <gpsSetPIDs+0x168>)
 8008e5a:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <gpsSetPIDs+0x148>)
 8008e60:	7e1b      	ldrb	r3, [r3, #24]
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e6a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008e98 <gpsSetPIDs+0x15c>
 8008e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e72:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <gpsSetPIDs+0x168>)
 8008e74:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008e78:	bf00      	nop
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000e64 	.word	0x20000e64
 8008e88:	42c80000 	.word	0x42c80000
 8008e8c:	200012f4 	.word	0x200012f4
 8008e90:	44fa0000 	.word	0x44fa0000
 8008e94:	20001304 	.word	0x20001304
 8008e98:	447a0000 	.word	0x447a0000
 8008e9c:	20001314 	.word	0x20001314
 8008ea0:	20001738 	.word	0x20001738
 8008ea4:	20001324 	.word	0x20001324

08008ea8 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	f7f8 ff23 	bl	8001cfc <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	f00a fa69 	bl	8013390 <pifLog_Print>
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f8 ff1c 	bl	8001cfc <actLed0State>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
    static bool state = false;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008ed0:	4b14      	ldr	r3, [pc, #80]	; (8008f24 <gpsSetPassthrough+0x58>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d002      	beq.n	8008ede <gpsSetPassthrough+0x12>
        return -1;
 8008ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8008edc:	e020      	b.n	8008f20 <gpsSetPassthrough+0x54>

    actLed0State(OFF);
 8008ede:	2000      	movs	r0, #0
 8008ee0:	f7f8 ff0c 	bl	8001cfc <actLed0State>
    actLed1State(OFF);
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f7f8 ff35 	bl	8001d54 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008eea:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <gpsSetPassthrough+0x5c>)
 8008eec:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d113      	bne.n	8008f1c <gpsSetPassthrough+0x50>
        if (state) {
 8008ef4:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <gpsSetPassthrough+0x60>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <gpsSetPassthrough+0x40>
            gps_ublox._gps.evt_frame = NULL;
 8008efc:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <gpsSetPassthrough+0x64>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	611a      	str	r2, [r3, #16]
            state = false;
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <gpsSetPassthrough+0x60>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
            return 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e009      	b.n	8008f20 <gpsSetPassthrough+0x54>
        }
        else {
            gps_ublox._gps.evt_frame = _EvtPrintFrame;
 8008f0c:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <gpsSetPassthrough+0x64>)
 8008f0e:	4a09      	ldr	r2, [pc, #36]	; (8008f34 <gpsSetPassthrough+0x68>)
 8008f10:	611a      	str	r2, [r3, #16]
            state = true;
 8008f12:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <gpsSetPassthrough+0x60>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
            return 1;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e001      	b.n	8008f20 <gpsSetPassthrough+0x54>
        }
    }
    return -1;
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000fe0 	.word	0x20000fe0
 8008f28:	200008f8 	.word	0x200008f8
 8008f2c:	20001438 	.word	0x20001438
 8008f30:	20001000 	.word	0x20001000
 8008f34:	08008ea9 	.word	0x08008ea9

08008f38 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f52:	dd05      	ble.n	8008f60 <GPS_calc_longitude_scaling+0x28>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f5e:	e006      	b.n	8008f6e <GPS_calc_longitude_scaling+0x36>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f6a:	eef1 7a67 	vneg.f32	s15, s15
 8008f6e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008f9c <GPS_calc_longitude_scaling+0x64>
 8008f72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008f76:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008fa0 <GPS_calc_longitude_scaling+0x68>
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008f82:	ed97 0a03 	vldr	s0, [r7, #12]
 8008f86:	f01a fb37 	bl	80235f8 <cosf>
 8008f8a:	eef0 7a40 	vmov.f32	s15, s0
 8008f8e:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <GPS_calc_longitude_scaling+0x6c>)
 8008f90:	edc3 7a00 	vstr	s15, [r3]
}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	4b189680 	.word	0x4b189680
 8008fa0:	3c8efa35 	.word	0x3c8efa35
 8008fa4:	20000028 	.word	0x20000028

08008fa8 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a19      	ldr	r2, [pc, #100]	; (800901c <GPS_set_next_wp+0x74>)
 8008fb8:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a17      	ldr	r2, [pc, #92]	; (800901c <GPS_set_next_wp+0x74>)
 8008fc0:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff ffb6 	bl	8008f38 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008fcc:	4b14      	ldr	r3, [pc, #80]	; (8009020 <GPS_set_next_wp+0x78>)
 8008fce:	7d1b      	ldrb	r3, [r3, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008fd4:	f7fd ff8c 	bl	8006ef0 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008fd8:	4b12      	ldr	r3, [pc, #72]	; (8009024 <GPS_set_next_wp+0x7c>)
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	4b12      	ldr	r3, [pc, #72]	; (8009028 <GPS_set_next_wp+0x80>)
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4b12      	ldr	r3, [pc, #72]	; (800902c <GPS_set_next_wp+0x84>)
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	; (800901c <GPS_set_next_wp+0x74>)
 8008fe4:	4912      	ldr	r1, [pc, #72]	; (8009030 <GPS_set_next_wp+0x88>)
 8008fe6:	4813      	ldr	r0, [pc, #76]	; (8009034 <GPS_set_next_wp+0x8c>)
 8008fe8:	f000 f84e 	bl	8009088 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <GPS_set_next_wp+0x7c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a11      	ldr	r2, [pc, #68]	; (8009038 <GPS_set_next_wp+0x90>)
 8008ff2:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <GPS_set_next_wp+0x88>)
 8008ff6:	4a0f      	ldr	r2, [pc, #60]	; (8009034 <GPS_set_next_wp+0x8c>)
 8008ff8:	490c      	ldr	r1, [pc, #48]	; (800902c <GPS_set_next_wp+0x84>)
 8008ffa:	4808      	ldr	r0, [pc, #32]	; (800901c <GPS_set_next_wp+0x74>)
 8008ffc:	f000 f934 	bl	8009268 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8009000:	4b08      	ldr	r3, [pc, #32]	; (8009024 <GPS_set_next_wp+0x7c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a0d      	ldr	r2, [pc, #52]	; (800903c <GPS_set_next_wp+0x94>)
 8009006:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <GPS_set_next_wp+0x98>)
 800900a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800900e:	b21a      	sxth	r2, r3
 8009010:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <GPS_set_next_wp+0x9c>)
 8009012:	801a      	strh	r2, [r3, #0]
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	200013c0 	.word	0x200013c0
 8009020:	20001738 	.word	0x20001738
 8009024:	200013c8 	.word	0x200013c8
 8009028:	200013d4 	.word	0x200013d4
 800902c:	200013c4 	.word	0x200013c4
 8009030:	20001800 	.word	0x20001800
 8009034:	200017fc 	.word	0x200017fc
 8009038:	20001428 	.word	0x20001428
 800903c:	200013cc 	.word	0x200013cc
 8009040:	20000e64 	.word	0x20000e64
 8009044:	200013d8 	.word	0x200013d8

08009048 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <check_missed_wp+0x38>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <check_missed_wp+0x3c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fb9a 	bl	8009794 <wrap_18000>
 8009060:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	bfb8      	it	lt
 8009068:	425b      	neglt	r3, r3
 800906a:	f242 7210 	movw	r2, #10000	; 0x2710
 800906e:	4293      	cmp	r3, r2
 8009070:	bfcc      	ite	gt
 8009072:	2301      	movgt	r3, #1
 8009074:	2300      	movle	r3, #0
 8009076:	b2db      	uxtb	r3, r3
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200013c8 	.word	0x200013c8
 8009084:	200013cc 	.word	0x200013cc

08009088 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
 8009094:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090a8:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090be:	4b25      	ldr	r3, [pc, #148]	; (8009154 <GPS_distance_cm_bearing+0xcc>)
 80090c0:	edd3 7a00 	vldr	s15, [r3]
 80090c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c8:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 80090cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80090d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80090d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80090d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090e0:	eeb0 0a67 	vmov.f32	s0, s15
 80090e4:	f01a fbd8 	bl	8023898 <sqrtf>
 80090e8:	eef0 7a40 	vmov.f32	s15, s0
 80090ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8009158 <GPS_distance_cm_bearing+0xd0>
 80090f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090f8:	ee17 2a90 	vmov	r2, s15
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8009100:	edd7 7a05 	vldr	s15, [r7, #20]
 8009104:	eef1 7a67 	vneg.f32	s15, s15
 8009108:	edd7 0a04 	vldr	s1, [r7, #16]
 800910c:	eeb0 0a67 	vmov.f32	s0, s15
 8009110:	f01a fb68 	bl	80237e4 <atan2f>
 8009114:	eef0 7a40 	vmov.f32	s15, s0
 8009118:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800915c <GPS_distance_cm_bearing+0xd4>
 800911c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009120:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009160 <GPS_distance_cm_bearing+0xd8>
 8009124:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800912c:	ee17 2a90 	vmov	r2, s15
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	da06      	bge.n	800914a <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009144:	33a0      	adds	r3, #160	; 0xa0
 8009146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009148:	6013      	str	r3, [r2, #0]
}
 800914a:	bf00      	nop
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000028 	.word	0x20000028
 8009158:	3f8e7d2c 	.word	0x3f8e7d2c
 800915c:	45b30ca0 	.word	0x45b30ca0
 8009160:	460ca000 	.word	0x460ca000

08009164 <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 800916a:	4b38      	ldr	r3, [pc, #224]	; (800924c <GPS_calc_velocity+0xe8>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d05b      	beq.n	800922a <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 8009172:	4b37      	ldr	r3, [pc, #220]	; (8009250 <GPS_calc_velocity+0xec>)
 8009174:	ed93 7a00 	vldr	s14, [r3]
 8009178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800917c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009180:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 8009184:	4b33      	ldr	r3, [pc, #204]	; (8009254 <GPS_calc_velocity+0xf0>)
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	4b33      	ldr	r3, [pc, #204]	; (8009258 <GPS_calc_velocity+0xf4>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009196:	4b31      	ldr	r3, [pc, #196]	; (800925c <GPS_calc_velocity+0xf8>)
 8009198:	edd3 7a00 	vldr	s15, [r3]
 800919c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80091a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091ac:	ee17 3a90 	vmov	r3, s15
 80091b0:	b21a      	sxth	r2, r3
 80091b2:	4b2b      	ldr	r3, [pc, #172]	; (8009260 <GPS_calc_velocity+0xfc>)
 80091b4:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 80091b6:	4b27      	ldr	r3, [pc, #156]	; (8009254 <GPS_calc_velocity+0xf0>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4b27      	ldr	r3, [pc, #156]	; (8009258 <GPS_calc_velocity+0xf4>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80091cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091d4:	ee17 3a90 	vmov	r3, s15
 80091d8:	b21a      	sxth	r2, r3
 80091da:	4b21      	ldr	r3, [pc, #132]	; (8009260 <GPS_calc_velocity+0xfc>)
 80091dc:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 80091de:	4b20      	ldr	r3, [pc, #128]	; (8009260 <GPS_calc_velocity+0xfc>)
 80091e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091e4:	461a      	mov	r2, r3
 80091e6:	4b1f      	ldr	r3, [pc, #124]	; (8009264 <GPS_calc_velocity+0x100>)
 80091e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80091ec:	4413      	add	r3, r2
 80091ee:	0fda      	lsrs	r2, r3, #31
 80091f0:	4413      	add	r3, r2
 80091f2:	105b      	asrs	r3, r3, #1
 80091f4:	b21a      	sxth	r2, r3
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <GPS_calc_velocity+0xfc>)
 80091f8:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 80091fa:	4b19      	ldr	r3, [pc, #100]	; (8009260 <GPS_calc_velocity+0xfc>)
 80091fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009200:	461a      	mov	r2, r3
 8009202:	4b18      	ldr	r3, [pc, #96]	; (8009264 <GPS_calc_velocity+0x100>)
 8009204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009208:	4413      	add	r3, r2
 800920a:	0fda      	lsrs	r2, r3, #31
 800920c:	4413      	add	r3, r2
 800920e:	105b      	asrs	r3, r3, #1
 8009210:	b21a      	sxth	r2, r3
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <GPS_calc_velocity+0xfc>)
 8009214:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <GPS_calc_velocity+0xfc>)
 8009218:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <GPS_calc_velocity+0x100>)
 800921e:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <GPS_calc_velocity+0xfc>)
 8009222:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009226:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <GPS_calc_velocity+0x100>)
 8009228:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 800922a:	4b08      	ldr	r3, [pc, #32]	; (800924c <GPS_calc_velocity+0xe8>)
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 8009230:	4b08      	ldr	r3, [pc, #32]	; (8009254 <GPS_calc_velocity+0xf0>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4a08      	ldr	r2, [pc, #32]	; (8009258 <GPS_calc_velocity+0xf4>)
 8009236:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 8009238:	4b06      	ldr	r3, [pc, #24]	; (8009254 <GPS_calc_velocity+0xf0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a06      	ldr	r2, [pc, #24]	; (8009258 <GPS_calc_velocity+0xf4>)
 800923e:	6013      	str	r3, [r2, #0]
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	20001439 	.word	0x20001439
 8009250:	200013ac 	.word	0x200013ac
 8009254:	200017fc 	.word	0x200017fc
 8009258:	2000143c 	.word	0x2000143c
 800925c:	20000028 	.word	0x20000028
 8009260:	200013b0 	.word	0x200013b0
 8009264:	20001444 	.word	0x20001444

08009268 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	ee07 3a90 	vmov	s15, r3
 8009284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009288:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <GPS_calc_location_error+0x50>)
 800928a:	edd3 7a00 	vldr	s15, [r3]
 800928e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009296:	ee17 2a90 	vmov	r2, s15
 800929a:	4b08      	ldr	r3, [pc, #32]	; (80092bc <GPS_calc_location_error+0x54>)
 800929c:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	4a04      	ldr	r2, [pc, #16]	; (80092bc <GPS_calc_location_error+0x54>)
 80092aa:	6013      	str	r3, [r2, #0]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	20000028 	.word	0x20000028
 80092bc:	200013b8 	.word	0x200013b8

080092c0 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 80092c6:	2300      	movs	r3, #0
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	e092      	b.n	80093f2 <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 80092cc:	4a4d      	ldr	r2, [pc, #308]	; (8009404 <GPS_calc_poshold+0x144>)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	494c      	ldr	r1, [pc, #304]	; (8009408 <GPS_calc_poshold+0x148>)
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff f9a2 	bl	8008620 <get_P>
 80092dc:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	494a      	ldr	r1, [pc, #296]	; (800940c <GPS_calc_poshold+0x14c>)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	b219      	sxth	r1, r3
 80092f2:	4a47      	ldr	r2, [pc, #284]	; (8009410 <GPS_calc_poshold+0x150>)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80092fa:	4a45      	ldr	r2, [pc, #276]	; (8009410 <GPS_calc_poshold+0x150>)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009302:	4944      	ldr	r1, [pc, #272]	; (8009414 <GPS_calc_poshold+0x154>)
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff f98b 	bl	8008620 <get_P>
 800930a:	4603      	mov	r3, r0
 800930c:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800930e:	4a40      	ldr	r2, [pc, #256]	; (8009410 <GPS_calc_poshold+0x150>)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009316:	4619      	mov	r1, r3
 8009318:	4a3a      	ldr	r2, [pc, #232]	; (8009404 <GPS_calc_poshold+0x144>)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009320:	18c8      	adds	r0, r1, r3
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4a3a      	ldr	r2, [pc, #232]	; (8009418 <GPS_calc_poshold+0x158>)
 800932e:	441a      	add	r2, r3
 8009330:	4b38      	ldr	r3, [pc, #224]	; (8009414 <GPS_calc_poshold+0x154>)
 8009332:	493a      	ldr	r1, [pc, #232]	; (800941c <GPS_calc_poshold+0x15c>)
 8009334:	f7ff f98d 	bl	8008652 <get_I>
 8009338:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 800933a:	b29b      	uxth	r3, r3
 800933c:	4423      	add	r3, r4
 800933e:	b29b      	uxth	r3, r3
 8009340:	b219      	sxth	r1, r3
 8009342:	4a37      	ldr	r2, [pc, #220]	; (8009420 <GPS_calc_poshold+0x160>)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800934a:	4a2e      	ldr	r2, [pc, #184]	; (8009404 <GPS_calc_poshold+0x144>)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	4613      	mov	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4a2e      	ldr	r2, [pc, #184]	; (8009418 <GPS_calc_poshold+0x158>)
 800935e:	441a      	add	r2, r3
 8009360:	4b2c      	ldr	r3, [pc, #176]	; (8009414 <GPS_calc_poshold+0x154>)
 8009362:	492e      	ldr	r1, [pc, #184]	; (800941c <GPS_calc_poshold+0x15c>)
 8009364:	f7ff f9c0 	bl	80086e8 <get_D>
 8009368:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 800936a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800936e:	492d      	ldr	r1, [pc, #180]	; (8009424 <GPS_calc_poshold+0x164>)
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7fa fbcb 	bl	8003b0c <constrain>
 8009376:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009378:	4a24      	ldr	r2, [pc, #144]	; (800940c <GPS_calc_poshold+0x14c>)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009380:	2b00      	cmp	r3, #0
 8009382:	bfb8      	it	lt
 8009384:	425b      	neglt	r3, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	2b31      	cmp	r3, #49	; 0x31
 800938a:	d801      	bhi.n	8009390 <GPS_calc_poshold+0xd0>
            d = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009390:	4a23      	ldr	r2, [pc, #140]	; (8009420 <GPS_calc_poshold+0x160>)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	b29b      	uxth	r3, r3
 800939e:	4413      	add	r3, r2
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	b219      	sxth	r1, r3
 80093a4:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <GPS_calc_poshold+0x160>)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 80093ac:	4a1c      	ldr	r2, [pc, #112]	; (8009420 <GPS_calc_poshold+0x160>)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80093b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80093b8:	491b      	ldr	r1, [pc, #108]	; (8009428 <GPS_calc_poshold+0x168>)
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fa fba6 	bl	8003b0c <constrain>
 80093c0:	4603      	mov	r3, r0
 80093c2:	b219      	sxth	r1, r3
 80093c4:	4a16      	ldr	r2, [pc, #88]	; (8009420 <GPS_calc_poshold+0x160>)
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 80093cc:	4912      	ldr	r1, [pc, #72]	; (8009418 <GPS_calc_poshold+0x158>)
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	6819      	ldr	r1, [r3, #0]
 80093dc:	4813      	ldr	r0, [pc, #76]	; (800942c <GPS_calc_poshold+0x16c>)
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4403      	add	r3, r0
 80093ea:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60bb      	str	r3, [r7, #8]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	f77f af69 	ble.w	80092cc <GPS_calc_poshold+0xc>
    }
}
 80093fa:	bf00      	nop
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	bd90      	pop	{r4, r7, pc}
 8009404:	200013b8 	.word	0x200013b8
 8009408:	200012f4 	.word	0x200012f4
 800940c:	200013b0 	.word	0x200013b0
 8009410:	200013b4 	.word	0x200013b4
 8009414:	20001304 	.word	0x20001304
 8009418:	2000135c 	.word	0x2000135c
 800941c:	200013ac 	.word	0x200013ac
 8009420:	20001830 	.word	0x20001830
 8009424:	fffff830 	.word	0xfffff830
 8009428:	fffff448 	.word	0xfffff448
 800942c:	20001384 	.word	0x20001384

08009430 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 8009430:	b590      	push	{r4, r7, lr}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 8009438:	f000 f8cc 	bl	80095d4 <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 800943c:	4b5a      	ldr	r3, [pc, #360]	; (80095a8 <GPS_calc_nav_rate+0x178>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 8009444:	3328      	adds	r3, #40	; 0x28
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800944e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80095ac <GPS_calc_nav_rate+0x17c>
 8009452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009456:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 800945a:	ed97 0a04 	vldr	s0, [r7, #16]
 800945e:	f01a f8cb 	bl	80235f8 <cosf>
 8009462:	eef0 7a40 	vmov.f32	s15, s0
 8009466:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 800946a:	ed97 0a04 	vldr	s0, [r7, #16]
 800946e:	f01a f947 	bl	8023700 <sinf>
 8009472:	eef0 7a40 	vmov.f32	s15, s0
 8009476:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	e08a      	b.n	8009596 <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	3318      	adds	r3, #24
 8009486:	443b      	add	r3, r7
 8009488:	3b10      	subs	r3, #16
 800948a:	ed93 7a00 	vldr	s14, [r3]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	ee07 3a90 	vmov	s15, r3
 8009494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800949c:	4a44      	ldr	r2, [pc, #272]	; (80095b0 <GPS_calc_nav_rate+0x180>)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094b4:	ee17 3a90 	vmov	r3, s15
 80094b8:	b219      	sxth	r1, r3
 80094ba:	4a3e      	ldr	r2, [pc, #248]	; (80095b4 <GPS_calc_nav_rate+0x184>)
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 80094c2:	4a3c      	ldr	r2, [pc, #240]	; (80095b4 <GPS_calc_nav_rate+0x184>)
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094ce:	493a      	ldr	r1, [pc, #232]	; (80095b8 <GPS_calc_nav_rate+0x188>)
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fa fb1b 	bl	8003b0c <constrain>
 80094d6:	4603      	mov	r3, r0
 80094d8:	b219      	sxth	r1, r3
 80094da:	4a36      	ldr	r2, [pc, #216]	; (80095b4 <GPS_calc_nav_rate+0x184>)
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80094e2:	4a34      	ldr	r2, [pc, #208]	; (80095b4 <GPS_calc_nav_rate+0x184>)
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094ea:	4934      	ldr	r1, [pc, #208]	; (80095bc <GPS_calc_nav_rate+0x18c>)
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff f897 	bl	8008620 <get_P>
 80094f2:	4603      	mov	r3, r0
 80094f4:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80094f6:	4a2f      	ldr	r2, [pc, #188]	; (80095b4 <GPS_calc_nav_rate+0x184>)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80094fe:	4618      	mov	r0, r3
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4a2d      	ldr	r2, [pc, #180]	; (80095c0 <GPS_calc_nav_rate+0x190>)
 800950c:	441a      	add	r2, r3
 800950e:	4b2b      	ldr	r3, [pc, #172]	; (80095bc <GPS_calc_nav_rate+0x18c>)
 8009510:	492c      	ldr	r1, [pc, #176]	; (80095c4 <GPS_calc_nav_rate+0x194>)
 8009512:	f7ff f89e 	bl	8008652 <get_I>
 8009516:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009518:	b29b      	uxth	r3, r3
 800951a:	4423      	add	r3, r4
 800951c:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 800951e:	4a25      	ldr	r2, [pc, #148]	; (80095b4 <GPS_calc_nav_rate+0x184>)
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009526:	4618      	mov	r0, r3
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4a23      	ldr	r2, [pc, #140]	; (80095c0 <GPS_calc_nav_rate+0x190>)
 8009534:	441a      	add	r2, r3
 8009536:	4b21      	ldr	r3, [pc, #132]	; (80095bc <GPS_calc_nav_rate+0x18c>)
 8009538:	4922      	ldr	r1, [pc, #136]	; (80095c4 <GPS_calc_nav_rate+0x194>)
 800953a:	f7ff f8d5 	bl	80086e8 <get_D>
 800953e:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 8009540:	b29b      	uxth	r3, r3
 8009542:	4423      	add	r3, r4
 8009544:	b29b      	uxth	r3, r3
 8009546:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 8009548:	4a1f      	ldr	r2, [pc, #124]	; (80095c8 <GPS_calc_nav_rate+0x198>)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009550:	4a1d      	ldr	r2, [pc, #116]	; (80095c8 <GPS_calc_nav_rate+0x198>)
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009558:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800955c:	491b      	ldr	r1, [pc, #108]	; (80095cc <GPS_calc_nav_rate+0x19c>)
 800955e:	4618      	mov	r0, r3
 8009560:	f7fa fad4 	bl	8003b0c <constrain>
 8009564:	4603      	mov	r3, r0
 8009566:	b219      	sxth	r1, r3
 8009568:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <GPS_calc_nav_rate+0x198>)
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009570:	4913      	ldr	r1, [pc, #76]	; (80095c0 <GPS_calc_nav_rate+0x190>)
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	6819      	ldr	r1, [r3, #0]
 8009580:	4813      	ldr	r0, [pc, #76]	; (80095d0 <GPS_calc_nav_rate+0x1a0>)
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4403      	add	r3, r0
 800958e:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3301      	adds	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b01      	cmp	r3, #1
 800959a:	f77f af71 	ble.w	8009480 <GPS_calc_nav_rate+0x50>
    }
}
 800959e:	bf00      	nop
 80095a0:	bf00      	nop
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd90      	pop	{r4, r7, pc}
 80095a8:	20001428 	.word	0x20001428
 80095ac:	393702d3 	.word	0x393702d3
 80095b0:	200013b0 	.word	0x200013b0
 80095b4:	200013b4 	.word	0x200013b4
 80095b8:	fffffc18 	.word	0xfffffc18
 80095bc:	20001314 	.word	0x20001314
 80095c0:	20001384 	.word	0x20001384
 80095c4:	200013ac 	.word	0x200013ac
 80095c8:	20001830 	.word	0x20001830
 80095cc:	fffff448 	.word	0xfffff448
 80095d0:	2000135c 	.word	0x2000135c

080095d4 <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 80095da:	4b38      	ldr	r3, [pc, #224]	; (80096bc <GPS_update_crosstrack+0xe8>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	4b38      	ldr	r3, [pc, #224]	; (80096c0 <GPS_update_crosstrack+0xec>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f8d5 	bl	8009794 <wrap_18000>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dd10      	ble.n	8009612 <GPS_update_crosstrack+0x3e>
 80095f0:	4b32      	ldr	r3, [pc, #200]	; (80096bc <GPS_update_crosstrack+0xe8>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <GPS_update_crosstrack+0xec>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f8ca 	bl	8009794 <wrap_18000>
 8009600:	4603      	mov	r3, r0
 8009602:	f241 1293 	movw	r2, #4499	; 0x1193
 8009606:	4293      	cmp	r3, r2
 8009608:	bfd4      	ite	le
 800960a:	2301      	movle	r3, #1
 800960c:	2300      	movgt	r3, #0
 800960e:	b2db      	uxtb	r3, r3
 8009610:	e00e      	b.n	8009630 <GPS_update_crosstrack+0x5c>
 8009612:	4b2a      	ldr	r3, [pc, #168]	; (80096bc <GPS_update_crosstrack+0xe8>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	4b2a      	ldr	r3, [pc, #168]	; (80096c0 <GPS_update_crosstrack+0xec>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f8b9 	bl	8009794 <wrap_18000>
 8009622:	4603      	mov	r3, r0
 8009624:	4a27      	ldr	r2, [pc, #156]	; (80096c4 <GPS_update_crosstrack+0xf0>)
 8009626:	4293      	cmp	r3, r2
 8009628:	bfac      	ite	ge
 800962a:	2301      	movge	r3, #1
 800962c:	2300      	movlt	r3, #0
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d03b      	beq.n	80096ac <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 8009634:	4b21      	ldr	r3, [pc, #132]	; (80096bc <GPS_update_crosstrack+0xe8>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <GPS_update_crosstrack+0xec>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009646:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80096c8 <GPS_update_crosstrack+0xf4>
 800964a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800964e:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 8009652:	ed97 0a01 	vldr	s0, [r7, #4]
 8009656:	f01a f853 	bl	8023700 <sinf>
 800965a:	eeb0 7a40 	vmov.f32	s14, s0
 800965e:	4b1b      	ldr	r3, [pc, #108]	; (80096cc <GPS_update_crosstrack+0xf8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800966a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009672:	ee17 3a90 	vmov	r3, s15
 8009676:	b21a      	sxth	r2, r3
 8009678:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <GPS_update_crosstrack+0xfc>)
 800967a:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 800967c:	4b14      	ldr	r3, [pc, #80]	; (80096d0 <GPS_update_crosstrack+0xfc>)
 800967e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009682:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009686:	4913      	ldr	r1, [pc, #76]	; (80096d4 <GPS_update_crosstrack+0x100>)
 8009688:	4618      	mov	r0, r3
 800968a:	f7fa fa3f 	bl	8003b0c <constrain>
 800968e:	4602      	mov	r2, r0
 8009690:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <GPS_update_crosstrack+0xe8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4413      	add	r3, r2
 8009696:	4a10      	ldr	r2, [pc, #64]	; (80096d8 <GPS_update_crosstrack+0x104>)
 8009698:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 800969a:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <GPS_update_crosstrack+0x104>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 f898 	bl	80097d4 <wrap_36000>
 80096a4:	4603      	mov	r3, r0
 80096a6:	4a0c      	ldr	r2, [pc, #48]	; (80096d8 <GPS_update_crosstrack+0x104>)
 80096a8:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 80096aa:	e003      	b.n	80096b4 <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 80096ac:	4b03      	ldr	r3, [pc, #12]	; (80096bc <GPS_update_crosstrack+0xe8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a09      	ldr	r2, [pc, #36]	; (80096d8 <GPS_update_crosstrack+0x104>)
 80096b2:	6013      	str	r3, [r2, #0]
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	200013c8 	.word	0x200013c8
 80096c0:	200013cc 	.word	0x200013cc
 80096c4:	ffffee6d 	.word	0xffffee6d
 80096c8:	393702d3 	.word	0x393702d3
 80096cc:	200013d4 	.word	0x200013d4
 80096d0:	200013d0 	.word	0x200013d0
 80096d4:	fffff448 	.word	0xfffff448
 80096d8:	20001428 	.word	0x20001428

080096dc <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	460a      	mov	r2, r1
 80096e6:	80fb      	strh	r3, [r7, #6]
 80096e8:	4613      	mov	r3, r2
 80096ea:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 80096ec:	797b      	ldrb	r3, [r7, #5]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00c      	beq.n	800970c <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 80096f2:	4b23      	ldr	r3, [pc, #140]	; (8009780 <GPS_calc_desired_speed+0xa4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	0fda      	lsrs	r2, r3, #31
 80096f8:	4413      	add	r3, r2
 80096fa:	105b      	asrs	r3, r3, #1
 80096fc:	461a      	mov	r2, r3
 80096fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009702:	4293      	cmp	r3, r2
 8009704:	bfa8      	it	ge
 8009706:	4613      	movge	r3, r2
 8009708:	80fb      	strh	r3, [r7, #6]
 800970a:	e011      	b.n	8009730 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 800970c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009710:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <GPS_calc_desired_speed+0xa4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4293      	cmp	r3, r2
 8009716:	bfa8      	it	ge
 8009718:	4613      	movge	r3, r2
 800971a:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 800971c:	4b19      	ldr	r3, [pc, #100]	; (8009784 <GPS_calc_desired_speed+0xa8>)
 800971e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8009722:	461a      	mov	r2, r3
 8009724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009728:	4293      	cmp	r3, r2
 800972a:	bfb8      	it	lt
 800972c:	4613      	movlt	r3, r2
 800972e:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 8009730:	4b15      	ldr	r3, [pc, #84]	; (8009788 <GPS_calc_desired_speed+0xac>)
 8009732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009736:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800973a:	429a      	cmp	r2, r3
 800973c:	dd17      	ble.n	800976e <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 800973e:	4b13      	ldr	r3, [pc, #76]	; (800978c <GPS_calc_desired_speed+0xb0>)
 8009740:	edd3 7a00 	vldr	s15, [r3]
 8009744:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009790 <GPS_calc_desired_speed+0xb4>
 8009748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800974c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009750:	ee17 3a90 	vmov	r3, s15
 8009754:	b29a      	uxth	r2, r3
 8009756:	4b0c      	ldr	r3, [pc, #48]	; (8009788 <GPS_calc_desired_speed+0xac>)
 8009758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800975c:	b29b      	uxth	r3, r3
 800975e:	4413      	add	r3, r2
 8009760:	b29b      	uxth	r3, r3
 8009762:	b21a      	sxth	r2, r3
 8009764:	4b08      	ldr	r3, [pc, #32]	; (8009788 <GPS_calc_desired_speed+0xac>)
 8009766:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 8009768:	4b07      	ldr	r3, [pc, #28]	; (8009788 <GPS_calc_desired_speed+0xac>)
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 800976e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	200013d4 	.word	0x200013d4
 8009784:	20000e64 	.word	0x20000e64
 8009788:	200013d8 	.word	0x200013d8
 800978c:	200013ac 	.word	0x200013ac
 8009790:	42c80000 	.word	0x42c80000

08009794 <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f244 6250 	movw	r2, #18000	; 0x4650
 80097a2:	4293      	cmp	r3, r2
 80097a4:	dd04      	ble.n	80097b0 <wrap_18000+0x1c>
        err -= 36000;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 80097ac:	3ba0      	subs	r3, #160	; 0xa0
 80097ae:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a07      	ldr	r2, [pc, #28]	; (80097d0 <wrap_18000+0x3c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	da04      	bge.n	80097c2 <wrap_18000+0x2e>
        err += 36000;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80097be:	33a0      	adds	r3, #160	; 0xa0
 80097c0:	607b      	str	r3, [r7, #4]
    return err;
 80097c2:	687b      	ldr	r3, [r7, #4]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	ffffb9b0 	.word	0xffffb9b0

080097d4 <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80097e2:	4293      	cmp	r3, r2
 80097e4:	dd04      	ble.n	80097f0 <wrap_36000+0x1c>
        deg -= 36000;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 80097ec:	3ba0      	subs	r3, #160	; 0xa0
 80097ee:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da04      	bge.n	8009800 <wrap_36000+0x2c>
        deg += 36000;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80097fc:	33a0      	adds	r3, #160	; 0xa0
 80097fe:	607b      	str	r3, [r7, #4]
    return deg;
 8009800:	687b      	ldr	r3, [r7, #4]
}
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
	...

08009810 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	ed2d 8b02 	vpush	{d8}
 8009816:	af00      	add	r7, sp, #0
    smallAngle = lrintf(sensor_set.acc.acc_1G * cosf(RAD * cfg.small_angle));
 8009818:	4b45      	ldr	r3, [pc, #276]	; (8009930 <imuInit+0x120>)
 800981a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009826:	4b43      	ldr	r3, [pc, #268]	; (8009934 <imuInit+0x124>)
 8009828:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800982c:	4618      	mov	r0, r3
 800982e:	f7f6 fe2d 	bl	800048c <__aeabi_i2d>
 8009832:	a339      	add	r3, pc, #228	; (adr r3, 8009918 <imuInit+0x108>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fe92 	bl	8000560 <__aeabi_dmul>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4610      	mov	r0, r2
 8009842:	4619      	mov	r1, r3
 8009844:	f7f7 f96e 	bl	8000b24 <__aeabi_d2f>
 8009848:	4603      	mov	r3, r0
 800984a:	ee00 3a10 	vmov	s0, r3
 800984e:	f019 fed3 	bl	80235f8 <cosf>
 8009852:	eef0 7a40 	vmov.f32	s15, s0
 8009856:	ee68 7a27 	vmul.f32	s15, s16, s15
 800985a:	eeb0 0a67 	vmov.f32	s0, s15
 800985e:	f019 ff0f 	bl	8023680 <lrintf>
 8009862:	4603      	mov	r3, r0
 8009864:	b21a      	sxth	r2, r3
 8009866:	4b34      	ldr	r3, [pc, #208]	; (8009938 <imuInit+0x128>)
 8009868:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / sensor_set.acc.acc_1G / 10000.0f;
 800986a:	4b31      	ldr	r3, [pc, #196]	; (8009930 <imuInit+0x120>)
 800986c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009878:	eddf 6a30 	vldr	s13, [pc, #192]	; 800993c <imuInit+0x12c>
 800987c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009880:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009940 <imuInit+0x130>
 8009884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009888:	4b2e      	ldr	r3, [pc, #184]	; (8009944 <imuInit+0x134>)
 800988a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 800988e:	4b29      	ldr	r3, [pc, #164]	; (8009934 <imuInit+0x124>)
 8009890:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009894:	ee07 3a90 	vmov	s15, r3
 8009898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800989c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009948 <imuInit+0x138>
 80098a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80098a4:	ee16 0a90 	vmov	r0, s13
 80098a8:	f7f6 fe02 	bl	80004b0 <__aeabi_f2d>
 80098ac:	a31c      	add	r3, pc, #112	; (adr r3, 8009920 <imuInit+0x110>)
 80098ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b2:	f7f6 fe55 	bl	8000560 <__aeabi_dmul>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4610      	mov	r0, r2
 80098bc:	4619      	mov	r1, r3
 80098be:	f7f7 f931 	bl	8000b24 <__aeabi_d2f>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4a21      	ldr	r2, [pc, #132]	; (800994c <imuInit+0x13c>)
 80098c6:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 80098c8:	4b1a      	ldr	r3, [pc, #104]	; (8009934 <imuInit+0x124>)
 80098ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f6 fdef 	bl	80004b0 <__aeabi_f2d>
 80098d2:	a315      	add	r3, pc, #84	; (adr r3, 8009928 <imuInit+0x118>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fe42 	bl	8000560 <__aeabi_dmul>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	f04f 0000 	mov.w	r0, #0
 80098e4:	491a      	ldr	r1, [pc, #104]	; (8009950 <imuInit+0x140>)
 80098e6:	f7f6 ff65 	bl	80007b4 <__aeabi_ddiv>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4610      	mov	r0, r2
 80098f0:	4619      	mov	r1, r3
 80098f2:	f7f7 f917 	bl	8000b24 <__aeabi_d2f>
 80098f6:	4603      	mov	r3, r0
 80098f8:	4a16      	ldr	r2, [pc, #88]	; (8009954 <imuInit+0x144>)
 80098fa:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 80098fc:	2008      	movs	r0, #8
 80098fe:	f7fd fa1f 	bl	8006d40 <sensors>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <imuInit+0xfc>
        Mag_init();
 8009908:	f005 faca 	bl	800eea0 <Mag_init>
#endif
}
 800990c:	bf00      	nop
 800990e:	46bd      	mov	sp, r7
 8009910:	ecbd 8b02 	vpop	{d8}
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	a2529d39 	.word	0xa2529d39
 800991c:	3f91df46 	.word	0x3f91df46
 8009920:	907e593b 	.word	0x907e593b
 8009924:	4081e7a9 	.word	0x4081e7a9
 8009928:	54442d18 	.word	0x54442d18
 800992c:	400921fb 	.word	0x400921fb
 8009930:	2000005c 	.word	0x2000005c
 8009934:	20000e64 	.word	0x20000e64
 8009938:	2000148c 	.word	0x2000148c
 800993c:	411ce80a 	.word	0x411ce80a
 8009940:	461c4000 	.word	0x461c4000
 8009944:	200014c4 	.word	0x200014c4
 8009948:	44610000 	.word	0x44610000
 800994c:	200014c8 	.word	0x200014c8
 8009950:	3fe00000 	.word	0x3fe00000
 8009954:	200014cc 	.word	0x200014cc

08009958 <computeIMU>:

int computeIMU(int step)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d02f      	beq.n	80099c6 <computeIMU+0x6e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b02      	cmp	r3, #2
 800996a:	dc30      	bgt.n	80099ce <computeIMU+0x76>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <computeIMU+0x22>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d01d      	beq.n	80099b4 <computeIMU+0x5c>
 8009978:	e029      	b.n	80099ce <computeIMU+0x76>
	case 0:
		if (Gyro_getADC()) {
 800997a:	f005 fa7b 	bl	800ee74 <Gyro_getADC>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d015      	beq.n	80099b0 <computeIMU+0x58>
			if (sensors(SENSOR_ACC)) return 1;
 8009984:	2002      	movs	r0, #2
 8009986:	f7fd f9db 	bl	8006d40 <sensors>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <computeIMU+0x3c>
 8009990:	2301      	movs	r3, #1
 8009992:	e05d      	b.n	8009a50 <computeIMU+0xf8>

			accADC[X] = 0;
 8009994:	4b30      	ldr	r3, [pc, #192]	; (8009a58 <computeIMU+0x100>)
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
			accADC[Y] = 0;
 800999c:	4b2e      	ldr	r3, [pc, #184]	; (8009a58 <computeIMU+0x100>)
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	605a      	str	r2, [r3, #4]
			accADC[Z] = 0;
 80099a4:	4b2c      	ldr	r3, [pc, #176]	; (8009a58 <computeIMU+0x100>)
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	609a      	str	r2, [r3, #8]
			return 3;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e04f      	b.n	8009a50 <computeIMU+0xf8>
		}
		return step;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	e04d      	b.n	8009a50 <computeIMU+0xf8>

	case 1:
		return ACC_getADC() ? 2 : step;
 80099b4:	f005 f826 	bl	800ea04 <ACC_getADC>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <computeIMU+0x6a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	e046      	b.n	8009a50 <computeIMU+0xf8>
 80099c2:	2302      	movs	r3, #2
 80099c4:	e044      	b.n	8009a50 <computeIMU+0xf8>

	case 2:
		getEstimatedAttitude();
 80099c6:	f000 fbbb 	bl	800a140 <getEstimatedAttitude>
		return 3;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e040      	b.n	8009a50 <computeIMU+0xf8>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 80099ce:	4b23      	ldr	r3, [pc, #140]	; (8009a5c <computeIMU+0x104>)
 80099d0:	795b      	ldrb	r3, [r3, #5]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d11d      	bne.n	8009a12 <computeIMU+0xba>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 80099d6:	4b22      	ldr	r3, [pc, #136]	; (8009a60 <computeIMU+0x108>)
 80099d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099dc:	005b      	lsls	r3, r3, #1
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099e6:	4b1f      	ldr	r3, [pc, #124]	; (8009a64 <computeIMU+0x10c>)
 80099e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80099ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099f0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80099f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099fc:	ee17 3a90 	vmov	r3, s15
 8009a00:	b21a      	sxth	r2, r3
 8009a02:	4b19      	ldr	r3, [pc, #100]	; (8009a68 <computeIMU+0x110>)
 8009a04:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 8009a06:	4b18      	ldr	r3, [pc, #96]	; (8009a68 <computeIMU+0x110>)
 8009a08:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009a0c:	4b14      	ldr	r3, [pc, #80]	; (8009a60 <computeIMU+0x108>)
 8009a0e:	801a      	strh	r2, [r3, #0]
 8009a10:	e009      	b.n	8009a26 <computeIMU+0xce>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 8009a12:	4b14      	ldr	r3, [pc, #80]	; (8009a64 <computeIMU+0x10c>)
 8009a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a1c:	ee17 3a90 	vmov	r3, s15
 8009a20:	b21a      	sxth	r2, r3
 8009a22:	4b11      	ldr	r3, [pc, #68]	; (8009a68 <computeIMU+0x110>)
 8009a24:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <computeIMU+0x10c>)
 8009a28:	edd3 7a00 	vldr	s15, [r3]
 8009a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a30:	ee17 3a90 	vmov	r3, s15
 8009a34:	b21a      	sxth	r2, r3
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <computeIMU+0x110>)
 8009a38:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 8009a3a:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <computeIMU+0x10c>)
 8009a3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a44:	ee17 3a90 	vmov	r3, s15
 8009a48:	b21a      	sxth	r2, r3
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <computeIMU+0x110>)
 8009a4c:	805a      	strh	r2, [r3, #2]
	return 4;
 8009a4e:	2304      	movs	r3, #4
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20001454 	.word	0x20001454
 8009a5c:	200008f8 	.word	0x200008f8
 8009a60:	200014f8 	.word	0x200014f8
 8009a64:	20001448 	.word	0x20001448
 8009a68:	200014d0 	.word	0x200014d0

08009a6c <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	ed93 7a00 	vldr	s14, [r3]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	edd3 7a00 	vldr	s15, [r3]
 8009a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8009aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aae:	eeb0 0a67 	vmov.f32	s0, s15
 8009ab2:	f019 fef1 	bl	8023898 <sqrtf>
 8009ab6:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 8009aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8009abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac6:	d01d      	beq.n	8009b04 <normalizeV+0x98>
        dest->X = src->X / length;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	edd3 6a00 	vldr	s13, [r3]
 8009ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	edd3 6a01 	vldr	s13, [r3, #4]
 8009ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	edd3 6a02 	vldr	s13, [r3, #8]
 8009af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8009afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b098      	sub	sp, #96	; 0x60
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	edd3 7a00 	vldr	s15, [r3]
 8009b28:	eeb0 0a67 	vmov.f32	s0, s15
 8009b2c:	f019 fd64 	bl	80235f8 <cosf>
 8009b30:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	edd3 7a00 	vldr	s15, [r3]
 8009b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b3e:	f019 fddf 	bl	8023700 <sinf>
 8009b42:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	edd3 7a00 	vldr	s15, [r3]
 8009b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b52:	f019 fd51 	bl	80235f8 <cosf>
 8009b56:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	edd3 7a00 	vldr	s15, [r3]
 8009b62:	eeb0 0a67 	vmov.f32	s0, s15
 8009b66:	f019 fdcb 	bl	8023700 <sinf>
 8009b6a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	3308      	adds	r3, #8
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	eeb0 0a67 	vmov.f32	s0, s15
 8009b7a:	f019 fd3d 	bl	80235f8 <cosf>
 8009b7e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	3308      	adds	r3, #8
 8009b86:	edd3 7a00 	vldr	s15, [r3]
 8009b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b8e:	f019 fdb7 	bl	8023700 <sinf>
 8009b92:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009b96:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009ba6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009baa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009bb6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009bba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009bc6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009bca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009bd6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bda:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be2:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009be6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009bea:	eeb1 7a67 	vneg.f32	s14, s15
 8009bee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bfc:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009bfe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009c02:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c0a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c12:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009c16:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009c1a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c2a:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009c2e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009c32:	eeb1 7a67 	vneg.f32	s14, s15
 8009c36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009c42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009c46:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c56:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009c5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c5e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009c72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009c76:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009c82:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c8e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009c92:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c9e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009ca2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009cb4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cc0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009cc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cd0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009cd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009ce6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8009cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cf2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009cf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8009cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d02:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009d06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009d18:	bf00      	nop
 8009d1a:	3760      	adds	r7, #96	; 0x60
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bfb8      	it	lt
 8009d30:	425b      	neglt	r3, r3
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	dd02      	ble.n	8009d3e <applyDeadband+0x1e>
        value = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	e00e      	b.n	8009d5c <applyDeadband+0x3c>
    } else if (value > 0) {
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dd04      	ble.n	8009d4e <applyDeadband+0x2e>
        value -= deadband;
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	607b      	str	r3, [r7, #4]
 8009d4c:	e006      	b.n	8009d5c <applyDeadband+0x3c>
    } else if (value < 0) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da03      	bge.n	8009d5c <applyDeadband+0x3c>
        value += deadband;
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	4413      	add	r3, r2
 8009d5a:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009d5c:	687b      	ldr	r3, [r7, #4]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	0000      	movs	r0, r0
 8009d6c:	0000      	movs	r0, r0
	...

08009d70 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	; 0x28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009d78:	f04f 0300 	mov.w	r3, #0
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	ee07 3a90 	vmov	s15, r3
 8009d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d88:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8009f68 <acc_calc+0x1f8>
 8009d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009d94:	4b75      	ldr	r3, [pc, #468]	; (8009f6c <acc_calc+0x1fc>)
 8009d96:	edd3 7a00 	vldr	s15, [r3]
 8009d9a:	eef1 7a67 	vneg.f32	s15, s15
 8009d9e:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009da2:	4b72      	ldr	r3, [pc, #456]	; (8009f6c <acc_calc+0x1fc>)
 8009da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009da8:	eef1 7a67 	vneg.f32	s15, s15
 8009dac:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009db0:	4b6f      	ldr	r3, [pc, #444]	; (8009f70 <acc_calc+0x200>)
 8009db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dbe:	eef1 7a67 	vneg.f32	s15, s15
 8009dc2:	ee17 3a90 	vmov	r3, s15
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7f6 fb72 	bl	80004b0 <__aeabi_f2d>
 8009dcc:	a364      	add	r3, pc, #400	; (adr r3, 8009f60 <acc_calc+0x1f0>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fbc5 	bl	8000560 <__aeabi_dmul>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f7f6 fea1 	bl	8000b24 <__aeabi_d2f>
 8009de2:	4603      	mov	r3, r0
 8009de4:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009de6:	4b63      	ldr	r3, [pc, #396]	; (8009f74 <acc_calc+0x204>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	60fb      	str	r3, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009dec:	4b61      	ldr	r3, [pc, #388]	; (8009f74 <acc_calc+0x204>)
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	613b      	str	r3, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009df2:	4b60      	ldr	r3, [pc, #384]	; (8009f74 <acc_calc+0x204>)
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	617b      	str	r3, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009df8:	f107 0218 	add.w	r2, r7, #24
 8009dfc:	f107 030c 	add.w	r3, r7, #12
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff fe82 	bl	8009b0c <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009e08:	4b5b      	ldr	r3, [pc, #364]	; (8009f78 <acc_calc+0x208>)
 8009e0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d131      	bne.n	8009e76 <acc_calc+0x106>
        if (!f.ARMED) {
 8009e12:	4b5a      	ldr	r3, [pc, #360]	; (8009f7c <acc_calc+0x20c>)
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d11c      	bne.n	8009e54 <acc_calc+0xe4>
            accZoffset -= accZoffset / 64;
 8009e1a:	4b59      	ldr	r3, [pc, #356]	; (8009f80 <acc_calc+0x210>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	da00      	bge.n	8009e24 <acc_calc+0xb4>
 8009e22:	333f      	adds	r3, #63	; 0x3f
 8009e24:	119b      	asrs	r3, r3, #6
 8009e26:	425b      	negs	r3, r3
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4b55      	ldr	r3, [pc, #340]	; (8009f80 <acc_calc+0x210>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4413      	add	r3, r2
 8009e30:	4a53      	ldr	r2, [pc, #332]	; (8009f80 <acc_calc+0x210>)
 8009e32:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009e34:	4b52      	ldr	r3, [pc, #328]	; (8009f80 <acc_calc+0x210>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	ee07 3a90 	vmov	s15, r3
 8009e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e40:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e4c:	ee17 2a90 	vmov	r2, s15
 8009e50:	4b4b      	ldr	r3, [pc, #300]	; (8009f80 <acc_calc+0x210>)
 8009e52:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009e54:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e58:	4b49      	ldr	r3, [pc, #292]	; (8009f80 <acc_calc+0x210>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da00      	bge.n	8009e62 <acc_calc+0xf2>
 8009e60:	333f      	adds	r3, #63	; 0x3f
 8009e62:	119b      	asrs	r3, r3, #6
 8009e64:	ee07 3a90 	vmov	s15, r3
 8009e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e70:	edc7 7a05 	vstr	s15, [r7, #20]
 8009e74:	e00c      	b.n	8009e90 <acc_calc+0x120>
    } else
        accel_ned.V.Z -= sensor_set.acc.acc_1G;
 8009e76:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e7a:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <acc_calc+0x214>)
 8009e7c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009e80:	ee07 3a90 	vmov	s15, r3
 8009e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e8c:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009e90:	4b3d      	ldr	r3, [pc, #244]	; (8009f88 <acc_calc+0x218>)
 8009e92:	ed93 7a00 	vldr	s14, [r3]
 8009e96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	edd7 6a05 	vldr	s13, [r7, #20]
 8009eaa:	4b38      	ldr	r3, [pc, #224]	; (8009f8c <acc_calc+0x21c>)
 8009eac:	edd3 7a00 	vldr	s15, [r3]
 8009eb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009eb8:	4b34      	ldr	r3, [pc, #208]	; (8009f8c <acc_calc+0x21c>)
 8009eba:	edd3 7a00 	vldr	s15, [r3]
 8009ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ec2:	4b32      	ldr	r3, [pc, #200]	; (8009f8c <acc_calc+0x21c>)
 8009ec4:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8009ed0:	f019 fbd6 	bl	8023680 <lrintf>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	4a28      	ldr	r2, [pc, #160]	; (8009f78 <acc_calc+0x208>)
 8009ed8:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff ff1e 	bl	8009d20 <applyDeadband>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	4b2a      	ldr	r3, [pc, #168]	; (8009f90 <acc_calc+0x220>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4413      	add	r3, r2
 8009eec:	4a28      	ldr	r2, [pc, #160]	; (8009f90 <acc_calc+0x220>)
 8009eee:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009ef0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ef8:	f019 fbc2 	bl	8023680 <lrintf>
 8009efc:	4603      	mov	r3, r0
 8009efe:	4a1e      	ldr	r2, [pc, #120]	; (8009f78 <acc_calc+0x208>)
 8009f00:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff ff0a 	bl	8009d20 <applyDeadband>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	4b20      	ldr	r3, [pc, #128]	; (8009f90 <acc_calc+0x220>)
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	4413      	add	r3, r2
 8009f14:	4a1e      	ldr	r2, [pc, #120]	; (8009f90 <acc_calc+0x220>)
 8009f16:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009f18:	4b1c      	ldr	r3, [pc, #112]	; (8009f8c <acc_calc+0x21c>)
 8009f1a:	edd3 7a00 	vldr	s15, [r3]
 8009f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f22:	f019 fbad 	bl	8023680 <lrintf>
 8009f26:	4603      	mov	r3, r0
 8009f28:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <acc_calc+0x208>)
 8009f2a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fef5 	bl	8009d20 <applyDeadband>
 8009f36:	4602      	mov	r2, r0
 8009f38:	4b15      	ldr	r3, [pc, #84]	; (8009f90 <acc_calc+0x220>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	4a14      	ldr	r2, [pc, #80]	; (8009f90 <acc_calc+0x220>)
 8009f40:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009f42:	4b14      	ldr	r3, [pc, #80]	; (8009f94 <acc_calc+0x224>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4413      	add	r3, r2
 8009f4a:	4a12      	ldr	r2, [pc, #72]	; (8009f94 <acc_calc+0x224>)
 8009f4c:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009f4e:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <acc_calc+0x228>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	4a10      	ldr	r2, [pc, #64]	; (8009f98 <acc_calc+0x228>)
 8009f56:	6013      	str	r3, [r2, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	3728      	adds	r7, #40	; 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	a2529d39 	.word	0xa2529d39
 8009f64:	3f91df46 	.word	0x3f91df46
 8009f68:	358637bd 	.word	0x358637bd
 8009f6c:	200014e4 	.word	0x200014e4
 8009f70:	20001a08 	.word	0x20001a08
 8009f74:	20001460 	.word	0x20001460
 8009f78:	20000e64 	.word	0x20000e64
 8009f7c:	20001738 	.word	0x20001738
 8009f80:	200014fc 	.word	0x200014fc
 8009f84:	2000005c 	.word	0x2000005c
 8009f88:	200014cc 	.word	0x200014cc
 8009f8c:	20001500 	.word	0x20001500
 8009f90:	20001478 	.word	0x20001478
 8009f94:	20001484 	.word	0x20001484
 8009f98:	20001488 	.word	0x20001488

08009f9c <accSum_reset>:

void accSum_reset(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009fa0:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <accSum_reset+0x2c>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009fa6:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <accSum_reset+0x2c>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009fac:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <accSum_reset+0x2c>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009fb2:	4b06      	ldr	r3, [pc, #24]	; (8009fcc <accSum_reset+0x30>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <accSum_reset+0x34>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	20001478 	.word	0x20001478
 8009fcc:	20001488 	.word	0x20001488
 8009fd0:	20001484 	.word	0x20001484
 8009fd4:	00000000 	.word	0x00000000

08009fd8 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009fd8:	b5b0      	push	{r4, r5, r7, lr}
 8009fda:	b08a      	sub	sp, #40	; 0x28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009fe0:	4b53      	ldr	r3, [pc, #332]	; (800a130 <calculateHeading+0x158>)
 8009fe2:	edd3 7a00 	vldr	s15, [r3]
 8009fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8009fea:	f019 fb05 	bl	80235f8 <cosf>
 8009fee:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009ff2:	4b4f      	ldr	r3, [pc, #316]	; (800a130 <calculateHeading+0x158>)
 8009ff4:	edd3 7a00 	vldr	s15, [r3]
 8009ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8009ffc:	f019 fb80 	bl	8023700 <sinf>
 800a000:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 800a004:	4b4a      	ldr	r3, [pc, #296]	; (800a130 <calculateHeading+0x158>)
 800a006:	edd3 7a01 	vldr	s15, [r3, #4]
 800a00a:	eeb0 0a67 	vmov.f32	s0, s15
 800a00e:	f019 faf3 	bl	80235f8 <cosf>
 800a012:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 800a016:	4b46      	ldr	r3, [pc, #280]	; (800a130 <calculateHeading+0x158>)
 800a018:	edd3 7a01 	vldr	s15, [r3, #4]
 800a01c:	eeb0 0a67 	vmov.f32	s0, s15
 800a020:	f019 fb6e 	bl	8023700 <sinf>
 800a024:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	ed93 7a00 	vldr	s14, [r3]
 800a02e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a032:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	edd3 6a01 	vldr	s13, [r3, #4]
 800a03c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a040:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a044:	edd7 7a05 	vldr	s15, [r7, #20]
 800a048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a04c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	edd3 6a02 	vldr	s13, [r3, #8]
 800a056:	edd7 7a05 	vldr	s15, [r7, #20]
 800a05a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a05e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a06a:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	ed93 7a01 	vldr	s14, [r3, #4]
 800a074:	edd7 7a08 	vldr	s15, [r7, #32]
 800a078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a082:	edd7 7a07 	vldr	s15, [r7, #28]
 800a086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a08a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a08e:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 800a092:	edd7 0a04 	vldr	s1, [r7, #16]
 800a096:	ed97 0a03 	vldr	s0, [r7, #12]
 800a09a:	f019 fba3 	bl	80237e4 <atan2f>
 800a09e:	eef0 7a40 	vmov.f32	s15, s0
 800a0a2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a134 <calculateHeading+0x15c>
 800a0a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0aa:	ee17 0a90 	vmov	r0, s15
 800a0ae:	f7f6 f9ff 	bl	80004b0 <__aeabi_f2d>
 800a0b2:	a31d      	add	r3, pc, #116	; (adr r3, 800a128 <calculateHeading+0x150>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 fb7c 	bl	80007b4 <__aeabi_ddiv>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	461d      	mov	r5, r3
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <calculateHeading+0x160>)
 800a0c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7f6 f9f0 	bl	80004b0 <__aeabi_f2d>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 f88c 	bl	80001f4 <__adddf3>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f04f 0200 	mov.w	r2, #0
 800a0e8:	4b14      	ldr	r3, [pc, #80]	; (800a13c <calculateHeading+0x164>)
 800a0ea:	f7f6 fb63 	bl	80007b4 <__aeabi_ddiv>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f7f6 fd15 	bl	8000b24 <__aeabi_d2f>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 800a0fe:	ed97 0a02 	vldr	s0, [r7, #8]
 800a102:	f019 fabd 	bl	8023680 <lrintf>
 800a106:	4603      	mov	r3, r0
 800a108:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a10a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da04      	bge.n	800a11c <calculateHeading+0x144>
        head += 360;
 800a112:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a118:	b29b      	uxth	r3, r3
 800a11a:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a11c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a120:	4618      	mov	r0, r3
 800a122:	3728      	adds	r7, #40	; 0x28
 800a124:	46bd      	mov	sp, r7
 800a126:	bdb0      	pop	{r4, r5, r7, pc}
 800a128:	54442d18 	.word	0x54442d18
 800a12c:	400921fb 	.word	0x400921fb
 800a130:	200014e4 	.word	0x200014e4
 800a134:	44e10000 	.word	0x44e10000
 800a138:	2000005c 	.word	0x2000005c
 800a13c:	40240000 	.word	0x40240000

0800a140 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	ed2d 8b02 	vpush	{d8}
 800a146:	b08a      	sub	sp, #40	; 0x28
 800a148:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a14e:	4bc2      	ldr	r3, [pc, #776]	; (800a458 <getEstimatedAttitude+0x318>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4798      	blx	r3
 800a154:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a156:	4bc1      	ldr	r3, [pc, #772]	; (800a45c <getEstimatedAttitude+0x31c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a16a:	4bbd      	ldr	r3, [pc, #756]	; (800a460 <getEstimatedAttitude+0x320>)
 800a16c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800a170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a174:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a178:	4ab8      	ldr	r2, [pc, #736]	; (800a45c <getEstimatedAttitude+0x31c>)
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a17e:	2300      	movs	r3, #0
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
 800a182:	e07d      	b.n	800a280 <getEstimatedAttitude+0x140>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a184:	4ab7      	ldr	r2, [pc, #732]	; (800a464 <getEstimatedAttitude+0x324>)
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	ed93 7a00 	vldr	s14, [r3]
 800a190:	edd7 7a04 	vldr	s15, [r7, #16]
 800a194:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	3328      	adds	r3, #40	; 0x28
 800a19e:	443b      	add	r3, r7
 800a1a0:	3b28      	subs	r3, #40	; 0x28
 800a1a2:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a1a6:	4bb0      	ldr	r3, [pc, #704]	; (800a468 <getEstimatedAttitude+0x328>)
 800a1a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d03c      	beq.n	800a22a <getEstimatedAttitude+0xea>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a1b0:	4aae      	ldr	r2, [pc, #696]	; (800a46c <getEstimatedAttitude+0x32c>)
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	ed93 7a00 	vldr	s14, [r3]
 800a1bc:	4baa      	ldr	r3, [pc, #680]	; (800a468 <getEstimatedAttitude+0x328>)
 800a1be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1c2:	ee07 3a90 	vmov	s15, r3
 800a1c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a1d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1de:	4aa4      	ldr	r2, [pc, #656]	; (800a470 <getEstimatedAttitude+0x330>)
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	edd3 6a00 	vldr	s13, [r3]
 800a1ea:	4b9f      	ldr	r3, [pc, #636]	; (800a468 <getEstimatedAttitude+0x328>)
 800a1ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a1f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a1fc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a204:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a208:	4a98      	ldr	r2, [pc, #608]	; (800a46c <getEstimatedAttitude+0x32c>)
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a214:	4a95      	ldr	r2, [pc, #596]	; (800a46c <getEstimatedAttitude+0x32c>)
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	4995      	ldr	r1, [pc, #596]	; (800a474 <getEstimatedAttitude+0x334>)
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	e009      	b.n	800a23e <getEstimatedAttitude+0xfe>
        } else {
            accSmooth[axis] = accADC[axis];
 800a22a:	4a91      	ldr	r2, [pc, #580]	; (800a470 <getEstimatedAttitude+0x330>)
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	498f      	ldr	r1, [pc, #572]	; (800a474 <getEstimatedAttitude+0x334>)
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	601a      	str	r2, [r3, #0]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	ee07 3a90 	vmov	s15, r3
 800a244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a248:	4a8a      	ldr	r2, [pc, #552]	; (800a474 <getEstimatedAttitude+0x334>)
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	edd3 7a00 	vldr	s15, [r3]
 800a254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a258:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a25c:	4a85      	ldr	r2, [pc, #532]	; (800a474 <getEstimatedAttitude+0x334>)
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	edd3 7a00 	vldr	s15, [r3]
 800a268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a26c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a274:	ee17 3a90 	vmov	r3, s15
 800a278:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	3301      	adds	r3, #1
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	2b02      	cmp	r3, #2
 800a284:	f77f af7e 	ble.w	800a184 <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)sensor_set.acc.acc_1G * sensor_set.acc.acc_1G);
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	2264      	movs	r2, #100	; 0x64
 800a28c:	fb03 f202 	mul.w	r2, r3, r2
 800a290:	4b73      	ldr	r3, [pc, #460]	; (800a460 <getEstimatedAttitude+0x320>)
 800a292:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a296:	4619      	mov	r1, r3
 800a298:	4b71      	ldr	r3, [pc, #452]	; (800a460 <getEstimatedAttitude+0x320>)
 800a29a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a29e:	fb01 f303 	mul.w	r3, r1, r3
 800a2a2:	fb92 f3f3 	sdiv	r3, r2, r3
 800a2a6:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4872      	ldr	r0, [pc, #456]	; (800a478 <getEstimatedAttitude+0x338>)
 800a2ae:	f7ff fc2d 	bl	8009b0c <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	2b48      	cmp	r3, #72	; 0x48
 800a2b8:	d93a      	bls.n	800a330 <getEstimatedAttitude+0x1f0>
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	2b84      	cmp	r3, #132	; 0x84
 800a2c0:	d836      	bhi.n	800a330 <getEstimatedAttitude+0x1f0>
        for (axis = 0; axis < 3; axis++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c6:	e030      	b.n	800a32a <getEstimatedAttitude+0x1ea>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a2c8:	4a6b      	ldr	r2, [pc, #428]	; (800a478 <getEstimatedAttitude+0x338>)
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	ed93 7a00 	vldr	s14, [r3]
 800a2d4:	4b69      	ldr	r3, [pc, #420]	; (800a47c <getEstimatedAttitude+0x33c>)
 800a2d6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2e6:	4a63      	ldr	r2, [pc, #396]	; (800a474 <getEstimatedAttitude+0x334>)
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	edd3 7a00 	vldr	s15, [r3]
 800a2f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2f6:	4b61      	ldr	r3, [pc, #388]	; (800a47c <getEstimatedAttitude+0x33c>)
 800a2f8:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a308:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a30c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a310:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a318:	4a57      	ldr	r2, [pc, #348]	; (800a478 <getEstimatedAttitude+0x338>)
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	3301      	adds	r3, #1
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	ddcb      	ble.n	800a2c8 <getEstimatedAttitude+0x188>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a330:	4b51      	ldr	r3, [pc, #324]	; (800a478 <getEstimatedAttitude+0x338>)
 800a332:	ed93 7a02 	vldr	s14, [r3, #8]
 800a336:	4b52      	ldr	r3, [pc, #328]	; (800a480 <getEstimatedAttitude+0x340>)
 800a338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34c:	bfcc      	ite	gt
 800a34e:	2301      	movgt	r3, #1
 800a350:	2300      	movle	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	4b4b      	ldr	r3, [pc, #300]	; (800a484 <getEstimatedAttitude+0x344>)
 800a358:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a35a:	4b47      	ldr	r3, [pc, #284]	; (800a478 <getEstimatedAttitude+0x338>)
 800a35c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a360:	4b45      	ldr	r3, [pc, #276]	; (800a478 <getEstimatedAttitude+0x338>)
 800a362:	ed93 7a02 	vldr	s14, [r3, #8]
 800a366:	eef0 0a47 	vmov.f32	s1, s14
 800a36a:	eeb0 0a67 	vmov.f32	s0, s15
 800a36e:	f019 fa39 	bl	80237e4 <atan2f>
 800a372:	eef0 7a40 	vmov.f32	s15, s0
 800a376:	4b44      	ldr	r3, [pc, #272]	; (800a488 <getEstimatedAttitude+0x348>)
 800a378:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a37c:	4b3e      	ldr	r3, [pc, #248]	; (800a478 <getEstimatedAttitude+0x338>)
 800a37e:	edd3 7a00 	vldr	s15, [r3]
 800a382:	eeb1 8a67 	vneg.f32	s16, s15
 800a386:	4b3c      	ldr	r3, [pc, #240]	; (800a478 <getEstimatedAttitude+0x338>)
 800a388:	ed93 7a01 	vldr	s14, [r3, #4]
 800a38c:	4b3a      	ldr	r3, [pc, #232]	; (800a478 <getEstimatedAttitude+0x338>)
 800a38e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a392:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a396:	4b38      	ldr	r3, [pc, #224]	; (800a478 <getEstimatedAttitude+0x338>)
 800a398:	edd3 6a02 	vldr	s13, [r3, #8]
 800a39c:	4b36      	ldr	r3, [pc, #216]	; (800a478 <getEstimatedAttitude+0x338>)
 800a39e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a3a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ae:	f019 fa73 	bl	8023898 <sqrtf>
 800a3b2:	eef0 7a40 	vmov.f32	s15, s0
 800a3b6:	eef0 0a67 	vmov.f32	s1, s15
 800a3ba:	eeb0 0a48 	vmov.f32	s0, s16
 800a3be:	f019 fa11 	bl	80237e4 <atan2f>
 800a3c2:	eef0 7a40 	vmov.f32	s15, s0
 800a3c6:	4b30      	ldr	r3, [pc, #192]	; (800a488 <getEstimatedAttitude+0x348>)
 800a3c8:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a3cc:	4b2e      	ldr	r3, [pc, #184]	; (800a488 <getEstimatedAttitude+0x348>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f6 f86d 	bl	80004b0 <__aeabi_f2d>
 800a3d6:	a31e      	add	r3, pc, #120	; (adr r3, 800a450 <getEstimatedAttitude+0x310>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f6 f8c0 	bl	8000560 <__aeabi_dmul>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	f7f6 fb9c 	bl	8000b24 <__aeabi_d2f>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	ee00 3a10 	vmov	s0, r3
 800a3f2:	f019 f945 	bl	8023680 <lrintf>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	b21a      	sxth	r2, r3
 800a3fa:	4b24      	ldr	r3, [pc, #144]	; (800a48c <getEstimatedAttitude+0x34c>)
 800a3fc:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a3fe:	4b22      	ldr	r3, [pc, #136]	; (800a488 <getEstimatedAttitude+0x348>)
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	f7f6 f854 	bl	80004b0 <__aeabi_f2d>
 800a408:	a311      	add	r3, pc, #68	; (adr r3, 800a450 <getEstimatedAttitude+0x310>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f6 f8a7 	bl	8000560 <__aeabi_dmul>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4610      	mov	r0, r2
 800a418:	4619      	mov	r1, r3
 800a41a:	f7f6 fb83 	bl	8000b24 <__aeabi_d2f>
 800a41e:	4603      	mov	r3, r0
 800a420:	ee00 3a10 	vmov	s0, r3
 800a424:	f019 f92c 	bl	8023680 <lrintf>
 800a428:	4603      	mov	r3, r0
 800a42a:	b21a      	sxth	r2, r3
 800a42c:	4b17      	ldr	r3, [pc, #92]	; (800a48c <getEstimatedAttitude+0x34c>)
 800a42e:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a430:	2008      	movs	r0, #8
 800a432:	f7fc fc85 	bl	8006d40 <sensors>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d067      	beq.n	800a50c <getEstimatedAttitude+0x3cc>
        rotateV(&EstM.V, deltaGyroAngle);
 800a43c:	463b      	mov	r3, r7
 800a43e:	4619      	mov	r1, r3
 800a440:	4813      	ldr	r0, [pc, #76]	; (800a490 <getEstimatedAttitude+0x350>)
 800a442:	f7ff fb63 	bl	8009b0c <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a446:	2300      	movs	r3, #0
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
 800a44a:	e054      	b.n	800a4f6 <getEstimatedAttitude+0x3b6>
 800a44c:	f3af 8000 	nop.w
 800a450:	907e593b 	.word	0x907e593b
 800a454:	4081e7a9 	.word	0x4081e7a9
 800a458:	20001c7c 	.word	0x20001c7c
 800a45c:	20001504 	.word	0x20001504
 800a460:	2000005c 	.word	0x2000005c
 800a464:	20001448 	.word	0x20001448
 800a468:	20000e64 	.word	0x20000e64
 800a46c:	20001508 	.word	0x20001508
 800a470:	20001454 	.word	0x20001454
 800a474:	20001460 	.word	0x20001460
 800a478:	200014ec 	.word	0x200014ec
 800a47c:	200008f8 	.word	0x200008f8
 800a480:	2000148c 	.word	0x2000148c
 800a484:	20001738 	.word	0x20001738
 800a488:	200014e4 	.word	0x200014e4
 800a48c:	200014e0 	.word	0x200014e0
 800a490:	20001514 	.word	0x20001514
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a494:	4a68      	ldr	r2, [pc, #416]	; (800a638 <getEstimatedAttitude+0x4f8>)
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	ed93 7a00 	vldr	s14, [r3]
 800a4a0:	4b66      	ldr	r3, [pc, #408]	; (800a63c <getEstimatedAttitude+0x4fc>)
 800a4a2:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4b2:	4a63      	ldr	r2, [pc, #396]	; (800a640 <getEstimatedAttitude+0x500>)
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	edd3 7a00 	vldr	s15, [r3]
 800a4be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4c2:	4b5e      	ldr	r3, [pc, #376]	; (800a63c <getEstimatedAttitude+0x4fc>)
 800a4c4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a4c8:	ee07 3a90 	vmov	s15, r3
 800a4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4d4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a4d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e4:	4a54      	ldr	r2, [pc, #336]	; (800a638 <getEstimatedAttitude+0x4f8>)
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	ddcb      	ble.n	800a494 <getEstimatedAttitude+0x354>
        heading = calculateHeading(&EstM);
 800a4fc:	484e      	ldr	r0, [pc, #312]	; (800a638 <getEstimatedAttitude+0x4f8>)
 800a4fe:	f7ff fd6b 	bl	8009fd8 <calculateHeading>
 800a502:	4603      	mov	r3, r0
 800a504:	461a      	mov	r2, r3
 800a506:	4b4f      	ldr	r3, [pc, #316]	; (800a644 <getEstimatedAttitude+0x504>)
 800a508:	801a      	strh	r2, [r3, #0]
 800a50a:	e00f      	b.n	800a52c <getEstimatedAttitude+0x3ec>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a50c:	463b      	mov	r3, r7
 800a50e:	4619      	mov	r1, r3
 800a510:	484d      	ldr	r0, [pc, #308]	; (800a648 <getEstimatedAttitude+0x508>)
 800a512:	f7ff fafb 	bl	8009b0c <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a516:	494c      	ldr	r1, [pc, #304]	; (800a648 <getEstimatedAttitude+0x508>)
 800a518:	484b      	ldr	r0, [pc, #300]	; (800a648 <getEstimatedAttitude+0x508>)
 800a51a:	f7ff faa7 	bl	8009a6c <normalizeV>
        heading = calculateHeading(&EstN);
 800a51e:	484a      	ldr	r0, [pc, #296]	; (800a648 <getEstimatedAttitude+0x508>)
 800a520:	f7ff fd5a 	bl	8009fd8 <calculateHeading>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	4b46      	ldr	r3, [pc, #280]	; (800a644 <getEstimatedAttitude+0x504>)
 800a52a:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a52c:	6978      	ldr	r0, [r7, #20]
 800a52e:	f7ff fc1f 	bl	8009d70 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a532:	4b46      	ldr	r3, [pc, #280]	; (800a64c <getEstimatedAttitude+0x50c>)
 800a534:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d072      	beq.n	800a622 <getEstimatedAttitude+0x4e2>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a53c:	4b44      	ldr	r3, [pc, #272]	; (800a650 <getEstimatedAttitude+0x510>)
 800a53e:	ed93 8a02 	vldr	s16, [r3, #8]
 800a542:	4b43      	ldr	r3, [pc, #268]	; (800a650 <getEstimatedAttitude+0x510>)
 800a544:	ed93 7a00 	vldr	s14, [r3]
 800a548:	4b41      	ldr	r3, [pc, #260]	; (800a650 <getEstimatedAttitude+0x510>)
 800a54a:	edd3 7a00 	vldr	s15, [r3]
 800a54e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a552:	4b3f      	ldr	r3, [pc, #252]	; (800a650 <getEstimatedAttitude+0x510>)
 800a554:	edd3 6a01 	vldr	s13, [r3, #4]
 800a558:	4b3d      	ldr	r3, [pc, #244]	; (800a650 <getEstimatedAttitude+0x510>)
 800a55a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a562:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a566:	4b3a      	ldr	r3, [pc, #232]	; (800a650 <getEstimatedAttitude+0x510>)
 800a568:	edd3 6a02 	vldr	s13, [r3, #8]
 800a56c:	4b38      	ldr	r3, [pc, #224]	; (800a650 <getEstimatedAttitude+0x510>)
 800a56e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a57a:	eeb0 0a67 	vmov.f32	s0, s15
 800a57e:	f019 f98b 	bl	8023898 <sqrtf>
 800a582:	eeb0 7a40 	vmov.f32	s14, s0
 800a586:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a58a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a58e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a592:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a654 <getEstimatedAttitude+0x514>
 800a596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59e:	d803      	bhi.n	800a5a8 <getEstimatedAttitude+0x468>
            throttleAngleCorrection = 0;
 800a5a0:	4b2d      	ldr	r3, [pc, #180]	; (800a658 <getEstimatedAttitude+0x518>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a5a6:	e03c      	b.n	800a622 <getEstimatedAttitude+0x4e2>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a5a8:	ed97 0a03 	vldr	s0, [r7, #12]
 800a5ac:	f019 f8ee 	bl	802378c <acosf>
 800a5b0:	eeb0 7a40 	vmov.f32	s14, s0
 800a5b4:	4b29      	ldr	r3, [pc, #164]	; (800a65c <getEstimatedAttitude+0x51c>)
 800a5b6:	edd3 7a00 	vldr	s15, [r3]
 800a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5be:	eeb0 0a67 	vmov.f32	s0, s15
 800a5c2:	f019 f85d 	bl	8023680 <lrintf>
 800a5c6:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a5ce:	dd02      	ble.n	800a5d6 <getEstimatedAttitude+0x496>
                deg = 900;
 800a5d0:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a5d4:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	; (800a64c <getEstimatedAttitude+0x50c>)
 800a5d8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a5dc:	ee07 3a90 	vmov	s15, r3
 800a5e0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a5e4:	69f8      	ldr	r0, [r7, #28]
 800a5e6:	f7f5 ff51 	bl	800048c <__aeabi_i2d>
 800a5ea:	a311      	add	r3, pc, #68	; (adr r3, 800a630 <getEstimatedAttitude+0x4f0>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f6 f8e0 	bl	80007b4 <__aeabi_ddiv>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	f7f6 fa92 	bl	8000b24 <__aeabi_d2f>
 800a600:	4603      	mov	r3, r0
 800a602:	ee00 3a10 	vmov	s0, r3
 800a606:	f019 f87b 	bl	8023700 <sinf>
 800a60a:	eef0 7a40 	vmov.f32	s15, s0
 800a60e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a612:	eeb0 0a67 	vmov.f32	s0, s15
 800a616:	f019 f833 	bl	8023680 <lrintf>
 800a61a:	4603      	mov	r3, r0
 800a61c:	b21a      	sxth	r2, r3
 800a61e:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <getEstimatedAttitude+0x518>)
 800a620:	801a      	strh	r2, [r3, #0]
}
 800a622:	bf00      	nop
 800a624:	3728      	adds	r7, #40	; 0x28
 800a626:	46bd      	mov	sp, r7
 800a628:	ecbd 8b02 	vpop	{d8}
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	e50feba2 	.word	0xe50feba2
 800a634:	409616dd 	.word	0x409616dd
 800a638:	20001514 	.word	0x20001514
 800a63c:	200008f8 	.word	0x200008f8
 800a640:	2000146c 	.word	0x2000146c
 800a644:	20001a08 	.word	0x20001a08
 800a648:	20000034 	.word	0x20000034
 800a64c:	20000e64 	.word	0x20000e64
 800a650:	200014ec 	.word	0x200014ec
 800a654:	3c75c28f 	.word	0x3c75c28f
 800a658:	200014c0 	.word	0x200014c0
 800a65c:	200014c8 	.word	0x200014c8

0800a660 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a668:	4b84      	ldr	r3, [pc, #528]	; (800a87c <taskGetEstimatedAltitude+0x21c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4798      	blx	r3
 800a66e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a670:	4b83      	ldr	r3, [pc, #524]	; (800a880 <taskGetEstimatedAltitude+0x220>)
 800a672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfb8      	it	lt
 800a67a:	425b      	neglt	r3, r3
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	4b80      	ldr	r3, [pc, #512]	; (800a880 <taskGetEstimatedAltitude+0x220>)
 800a680:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfb8      	it	lt
 800a688:	425b      	neglt	r3, r3
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4293      	cmp	r3, r2
 800a68e:	bf38      	it	cc
 800a690:	4613      	movcc	r3, r2
 800a692:	b29b      	uxth	r3, r3
 800a694:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a696:	4b7b      	ldr	r3, [pc, #492]	; (800a884 <taskGetEstimatedAltitude+0x224>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a69c:	4b7a      	ldr	r3, [pc, #488]	; (800a888 <taskGetEstimatedAltitude+0x228>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a6a6:	4a78      	ldr	r2, [pc, #480]	; (800a888 <taskGetEstimatedAltitude+0x228>)
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a6ac:	4b77      	ldr	r3, [pc, #476]	; (800a88c <taskGetEstimatedAltitude+0x22c>)
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d058      	beq.n	800a766 <taskGetEstimatedAltitude+0x106>
        baroGroundPressure -= baroGroundPressure / 8;
 800a6b4:	4b76      	ldr	r3, [pc, #472]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da00      	bge.n	800a6be <taskGetEstimatedAltitude+0x5e>
 800a6bc:	3307      	adds	r3, #7
 800a6be:	10db      	asrs	r3, r3, #3
 800a6c0:	425b      	negs	r3, r3
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4b72      	ldr	r3, [pc, #456]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4a71      	ldr	r2, [pc, #452]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a6cc:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a6ce:	4b71      	ldr	r3, [pc, #452]	; (800a894 <taskGetEstimatedAltitude+0x234>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a71      	ldr	r2, [pc, #452]	; (800a898 <taskGetEstimatedAltitude+0x238>)
 800a6d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a6d8:	3a01      	subs	r2, #1
 800a6da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6de:	4a6c      	ldr	r2, [pc, #432]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a6e0:	6812      	ldr	r2, [r2, #0]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b6a      	ldr	r3, [pc, #424]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a6e8:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a6ea:	4b69      	ldr	r3, [pc, #420]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	da00      	bge.n	800a6f4 <taskGetEstimatedAltitude+0x94>
 800a6f2:	3307      	adds	r3, #7
 800a6f4:	10db      	asrs	r3, r3, #3
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6fe:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a89c <taskGetEstimatedAltitude+0x23c>
 800a702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a706:	eddf 0a66 	vldr	s1, [pc, #408]	; 800a8a0 <taskGetEstimatedAltitude+0x240>
 800a70a:	eeb0 0a47 	vmov.f32	s0, s14
 800a70e:	f019 f86b 	bl	80237e8 <powf>
 800a712:	eef0 7a40 	vmov.f32	s15, s0
 800a716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a71a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a71e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a8a4 <taskGetEstimatedAltitude+0x244>
 800a722:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a72a:	ee17 2a90 	vmov	r2, s15
 800a72e:	4b5e      	ldr	r3, [pc, #376]	; (800a8a8 <taskGetEstimatedAltitude+0x248>)
 800a730:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a732:	4b5e      	ldr	r3, [pc, #376]	; (800a8ac <taskGetEstimatedAltitude+0x24c>)
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a73a:	4b5d      	ldr	r3, [pc, #372]	; (800a8b0 <taskGetEstimatedAltitude+0x250>)
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a742:	4b52      	ldr	r3, [pc, #328]	; (800a88c <taskGetEstimatedAltitude+0x22c>)
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	3b01      	subs	r3, #1
 800a748:	b29a      	uxth	r2, r3
 800a74a:	4b50      	ldr	r3, [pc, #320]	; (800a88c <taskGetEstimatedAltitude+0x22c>)
 800a74c:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingB) {
 800a74e:	4b4f      	ldr	r3, [pc, #316]	; (800a88c <taskGetEstimatedAltitude+0x22c>)
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d107      	bne.n	800a766 <taskGetEstimatedAltitude+0x106>
        	pifLog_Printf(LT_INFO, "Baro: GP=%ld, GA=%ld", baroGroundPressure, baroGroundAltitude);
 800a756:	4b4e      	ldr	r3, [pc, #312]	; (800a890 <taskGetEstimatedAltitude+0x230>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4b53      	ldr	r3, [pc, #332]	; (800a8a8 <taskGetEstimatedAltitude+0x248>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4955      	ldr	r1, [pc, #340]	; (800a8b4 <taskGetEstimatedAltitude+0x254>)
 800a760:	2002      	movs	r0, #2
 800a762:	f008 fea3 	bl	80134ac <pifLog_Printf>
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a766:	4b4b      	ldr	r3, [pc, #300]	; (800a894 <taskGetEstimatedAltitude+0x234>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a4b      	ldr	r2, [pc, #300]	; (800a898 <taskGetEstimatedAltitude+0x238>)
 800a76c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a770:	3a01      	subs	r2, #1
 800a772:	fbb3 f3f2 	udiv	r3, r3, r2
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a89c <taskGetEstimatedAltitude+0x23c>
 800a782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a786:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a8a0 <taskGetEstimatedAltitude+0x240>
 800a78a:	eeb0 0a47 	vmov.f32	s0, s14
 800a78e:	f019 f82b 	bl	80237e8 <powf>
 800a792:	eef0 7a40 	vmov.f32	s15, s0
 800a796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a79a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a79e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a8a4 <taskGetEstimatedAltitude+0x244>
 800a7a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800a7aa:	f018 ff69 	bl	8023680 <lrintf>
 800a7ae:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a7b0:	4b3d      	ldr	r3, [pc, #244]	; (800a8a8 <taskGetEstimatedAltitude+0x248>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a7ba:	4b3f      	ldr	r3, [pc, #252]	; (800a8b8 <taskGetEstimatedAltitude+0x258>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7c6:	4b34      	ldr	r3, [pc, #208]	; (800a898 <taskGetEstimatedAltitude+0x238>)
 800a7c8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a7cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a7da:	4b2f      	ldr	r3, [pc, #188]	; (800a898 <taskGetEstimatedAltitude+0x238>)
 800a7dc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a7e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a7e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a7e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f4:	f018 ff44 	bl	8023680 <lrintf>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	4a2f      	ldr	r2, [pc, #188]	; (800a8b8 <taskGetEstimatedAltitude+0x258>)
 800a7fc:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a7fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a802:	2bfa      	cmp	r3, #250	; 0xfa
 800a804:	dc04      	bgt.n	800a810 <taskGetEstimatedAltitude+0x1b0>
 800a806:	4b2d      	ldr	r3, [pc, #180]	; (800a8bc <taskGetEstimatedAltitude+0x25c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d104      	bne.n	800a81a <taskGetEstimatedAltitude+0x1ba>
        sonarAlt = -1;
 800a810:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <taskGetEstimatedAltitude+0x260>)
 800a812:	f04f 32ff 	mov.w	r2, #4294967295
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e01b      	b.n	800a852 <taskGetEstimatedAltitude+0x1f2>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a81a:	4b28      	ldr	r3, [pc, #160]	; (800a8bc <taskGetEstimatedAltitude+0x25c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a826:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a832:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a8c4 <taskGetEstimatedAltitude+0x264>
 800a836:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a83a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a83e:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a8c4 <taskGetEstimatedAltitude+0x264>
 800a842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a84a:	ee17 2a90 	vmov	r2, s15
 800a84e:	4b1c      	ldr	r3, [pc, #112]	; (800a8c0 <taskGetEstimatedAltitude+0x260>)
 800a850:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a852:	4b1b      	ldr	r3, [pc, #108]	; (800a8c0 <taskGetEstimatedAltitude+0x260>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	dd38      	ble.n	800a8cc <taskGetEstimatedAltitude+0x26c>
 800a85a:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <taskGetEstimatedAltitude+0x260>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2bc7      	cmp	r3, #199	; 0xc7
 800a860:	dc34      	bgt.n	800a8cc <taskGetEstimatedAltitude+0x26c>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a862:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <taskGetEstimatedAltitude+0x258>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <taskGetEstimatedAltitude+0x260>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	4a16      	ldr	r2, [pc, #88]	; (800a8c8 <taskGetEstimatedAltitude+0x268>)
 800a86e:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a870:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <taskGetEstimatedAltitude+0x260>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a10      	ldr	r2, [pc, #64]	; (800a8b8 <taskGetEstimatedAltitude+0x258>)
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	e064      	b.n	800a944 <taskGetEstimatedAltitude+0x2e4>
 800a87a:	bf00      	nop
 800a87c:	20001c7c 	.word	0x20001c7c
 800a880:	200014e0 	.word	0x200014e0
 800a884:	20001498 	.word	0x20001498
 800a888:	20001520 	.word	0x20001520
 800a88c:	20001a04 	.word	0x20001a04
 800a890:	20001524 	.word	0x20001524
 800a894:	20001490 	.word	0x20001490
 800a898:	20000e64 	.word	0x20000e64
 800a89c:	47c5e680 	.word	0x47c5e680
 800a8a0:	3e42dcb1 	.word	0x3e42dcb1
 800a8a4:	4a8748d0 	.word	0x4a8748d0
 800a8a8:	20001528 	.word	0x20001528
 800a8ac:	2000152c 	.word	0x2000152c
 800a8b0:	20001530 	.word	0x20001530
 800a8b4:	08027690 	.word	0x08027690
 800a8b8:	20001494 	.word	0x20001494
 800a8bc:	2000002c 	.word	0x2000002c
 800a8c0:	20000030 	.word	0x20000030
 800a8c4:	44610000 	.word	0x44610000
 800a8c8:	200014a0 	.word	0x200014a0
    } else {
        BaroAlt -= baroAlt_offset;
 800a8cc:	4ba0      	ldr	r3, [pc, #640]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	4ba0      	ldr	r3, [pc, #640]	; (800ab54 <taskGetEstimatedAltitude+0x4f4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	4a9e      	ldr	r2, [pc, #632]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800a8d8:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a8da:	4b9f      	ldr	r3, [pc, #636]	; (800ab58 <taskGetEstimatedAltitude+0x4f8>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd30      	ble.n	800a944 <taskGetEstimatedAltitude+0x2e4>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a8e2:	4b9d      	ldr	r3, [pc, #628]	; (800ab58 <taskGetEstimatedAltitude+0x4f8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8f2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800ab5c <taskGetEstimatedAltitude+0x4fc>
 800a8f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8fa:	4b99      	ldr	r3, [pc, #612]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a8fc:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a900:	4b95      	ldr	r3, [pc, #596]	; (800ab58 <taskGetEstimatedAltitude+0x4f8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a90c:	4b94      	ldr	r3, [pc, #592]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a90e:	edd3 7a00 	vldr	s15, [r3]
 800a912:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a916:	4b8e      	ldr	r3, [pc, #568]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a922:	4b8f      	ldr	r3, [pc, #572]	; (800ab60 <taskGetEstimatedAltitude+0x500>)
 800a924:	edd3 7a00 	vldr	s15, [r3]
 800a928:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a92c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a934:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a93c:	ee17 2a90 	vmov	r2, s15
 800a940:	4b83      	ldr	r3, [pc, #524]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800a942:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a944:	4b87      	ldr	r3, [pc, #540]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a950:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ab68 <taskGetEstimatedAltitude+0x508>
 800a954:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a958:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a95c:	4b83      	ldr	r3, [pc, #524]	; (800ab6c <taskGetEstimatedAltitude+0x50c>)
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a968:	4b81      	ldr	r3, [pc, #516]	; (800ab70 <taskGetEstimatedAltitude+0x510>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	ee07 3a90 	vmov	s15, r3
 800a970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a978:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a97c:	4b7d      	ldr	r3, [pc, #500]	; (800ab74 <taskGetEstimatedAltitude+0x514>)
 800a97e:	ed93 7a00 	vldr	s14, [r3]
 800a982:	edd7 7a07 	vldr	s15, [r7, #28]
 800a986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a98a:	4b76      	ldr	r3, [pc, #472]	; (800ab64 <taskGetEstimatedAltitude+0x504>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a99e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a9a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a9a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a9aa:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9b2:	4b71      	ldr	r3, [pc, #452]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800a9b4:	edd3 6a00 	vldr	s13, [r3]
 800a9b8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9c4:	4b6d      	ldr	r3, [pc, #436]	; (800ab7c <taskGetEstimatedAltitude+0x51c>)
 800a9c6:	edd3 7a00 	vldr	s15, [r3]
 800a9ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9ce:	4b6b      	ldr	r3, [pc, #428]	; (800ab7c <taskGetEstimatedAltitude+0x51c>)
 800a9d0:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a9d4:	4b6a      	ldr	r3, [pc, #424]	; (800ab80 <taskGetEstimatedAltitude+0x520>)
 800a9d6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a9da:	4b68      	ldr	r3, [pc, #416]	; (800ab7c <taskGetEstimatedAltitude+0x51c>)
 800a9dc:	edd3 7a00 	vldr	s15, [r3]
 800a9e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9e4:	4b5a      	ldr	r3, [pc, #360]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	ee07 3a90 	vmov	s15, r3
 800a9ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a9f0:	4b63      	ldr	r3, [pc, #396]	; (800ab80 <taskGetEstimatedAltitude+0x520>)
 800a9f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a9f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a9fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa06:	4b5d      	ldr	r3, [pc, #372]	; (800ab7c <taskGetEstimatedAltitude+0x51c>)
 800aa08:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800aa0c:	4b52      	ldr	r3, [pc, #328]	; (800ab58 <taskGetEstimatedAltitude+0x4f8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dd08      	ble.n	800aa26 <taskGetEstimatedAltitude+0x3c6>
 800aa14:	4b50      	ldr	r3, [pc, #320]	; (800ab58 <taskGetEstimatedAltitude+0x4f8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2bc7      	cmp	r3, #199	; 0xc7
 800aa1a:	dc04      	bgt.n	800aa26 <taskGetEstimatedAltitude+0x3c6>
        EstAlt = BaroAlt;
 800aa1c:	4b4c      	ldr	r3, [pc, #304]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a58      	ldr	r2, [pc, #352]	; (800ab84 <taskGetEstimatedAltitude+0x524>)
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e008      	b.n	800aa38 <taskGetEstimatedAltitude+0x3d8>
    else
        EstAlt = accAlt;
 800aa26:	4b55      	ldr	r3, [pc, #340]	; (800ab7c <taskGetEstimatedAltitude+0x51c>)
 800aa28:	edd3 7a00 	vldr	s15, [r3]
 800aa2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa30:	ee17 2a90 	vmov	r2, s15
 800aa34:	4b53      	ldr	r3, [pc, #332]	; (800ab84 <taskGetEstimatedAltitude+0x524>)
 800aa36:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800aa38:	4b4f      	ldr	r3, [pc, #316]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800aa3a:	ed93 7a00 	vldr	s14, [r3]
 800aa3e:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa46:	4b4c      	ldr	r3, [pc, #304]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800aa48:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800aa4c:	f7ff faa6 	bl	8009f9c <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800aa50:	4b3f      	ldr	r3, [pc, #252]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	4b4c      	ldr	r3, [pc, #304]	; (800ab88 <taskGetEstimatedAltitude+0x528>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa62:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ab8c <taskGetEstimatedAltitude+0x52c>
 800aa66:	ee67 6a87 	vmul.f32	s13, s15, s14
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	ee07 3a90 	vmov	s15, r3
 800aa70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa7c:	ee17 3a90 	vmov	r3, s15
 800aa80:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800aa82:	4b33      	ldr	r3, [pc, #204]	; (800ab50 <taskGetEstimatedAltitude+0x4f0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a40      	ldr	r2, [pc, #256]	; (800ab88 <taskGetEstimatedAltitude+0x528>)
 800aa88:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800aa8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800aa8e:	4940      	ldr	r1, [pc, #256]	; (800ab90 <taskGetEstimatedAltitude+0x530>)
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f7f9 f83b 	bl	8003b0c <constrain>
 800aa96:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800aa98:	210a      	movs	r1, #10
 800aa9a:	6978      	ldr	r0, [r7, #20]
 800aa9c:	f7ff f940 	bl	8009d20 <applyDeadband>
 800aaa0:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800aaa2:	4b37      	ldr	r3, [pc, #220]	; (800ab80 <taskGetEstimatedAltitude+0x520>)
 800aaa4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800aaa8:	4b33      	ldr	r3, [pc, #204]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800aaaa:	edd3 7a00 	vldr	s15, [r3]
 800aaae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	ee07 3a90 	vmov	s15, r3
 800aab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aabc:	4b30      	ldr	r3, [pc, #192]	; (800ab80 <taskGetEstimatedAltitude+0x520>)
 800aabe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800aac2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aac6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aaca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aace:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aad2:	4b29      	ldr	r3, [pc, #164]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800aad4:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800aad8:	4b27      	ldr	r3, [pc, #156]	; (800ab78 <taskGetEstimatedAltitude+0x518>)
 800aada:	edd3 7a00 	vldr	s15, [r3]
 800aade:	eeb0 0a67 	vmov.f32	s0, s15
 800aae2:	f018 fdcd 	bl	8023680 <lrintf>
 800aae6:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800aae8:	2105      	movs	r1, #5
 800aaea:	6938      	ldr	r0, [r7, #16]
 800aaec:	f7ff f918 	bl	8009d20 <applyDeadband>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4a28      	ldr	r2, [pc, #160]	; (800ab94 <taskGetEstimatedAltitude+0x534>)
 800aaf4:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800aaf6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800aafa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aafe:	f280 80b2 	bge.w	800ac66 <taskGetEstimatedAltitude+0x606>
        // Altitude P-Controller
        if (!velocityControl) {
 800ab02:	4b25      	ldr	r3, [pc, #148]	; (800ab98 <taskGetEstimatedAltitude+0x538>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d14e      	bne.n	800aba8 <taskGetEstimatedAltitude+0x548>
            error = constrain(AltHold - EstAlt, -500, 500);
 800ab0a:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <taskGetEstimatedAltitude+0x53c>)
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <taskGetEstimatedAltitude+0x524>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ab18:	4921      	ldr	r1, [pc, #132]	; (800aba0 <taskGetEstimatedAltitude+0x540>)
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f8 fff6 	bl	8003b0c <constrain>
 800ab20:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800ab22:	210a      	movs	r1, #10
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7ff f8fb 	bl	8009d20 <applyDeadband>
 800ab2a:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800ab2c:	4b14      	ldr	r3, [pc, #80]	; (800ab80 <taskGetEstimatedAltitude+0x520>)
 800ab2e:	791b      	ldrb	r3, [r3, #4]
 800ab30:	461a      	mov	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	fb02 f303 	mul.w	r3, r2, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da00      	bge.n	800ab3e <taskGetEstimatedAltitude+0x4de>
 800ab3c:	337f      	adds	r3, #127	; 0x7f
 800ab3e:	11db      	asrs	r3, r3, #7
 800ab40:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab44:	4917      	ldr	r1, [pc, #92]	; (800aba4 <taskGetEstimatedAltitude+0x544>)
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f8 ffe0 	bl	8003b0c <constrain>
 800ab4c:	6378      	str	r0, [r7, #52]	; 0x34
 800ab4e:	e02e      	b.n	800abae <taskGetEstimatedAltitude+0x54e>
 800ab50:	20001494 	.word	0x20001494
 800ab54:	200014a0 	.word	0x200014a0
 800ab58:	20000030 	.word	0x20000030
 800ab5c:	42c80000 	.word	0x42c80000
 800ab60:	2000149c 	.word	0x2000149c
 800ab64:	20001484 	.word	0x20001484
 800ab68:	358637bd 	.word	0x358637bd
 800ab6c:	20001478 	.word	0x20001478
 800ab70:	20001488 	.word	0x20001488
 800ab74:	200014c4 	.word	0x200014c4
 800ab78:	2000152c 	.word	0x2000152c
 800ab7c:	20001530 	.word	0x20001530
 800ab80:	20000e64 	.word	0x20000e64
 800ab84:	200014a4 	.word	0x200014a4
 800ab88:	20001534 	.word	0x20001534
 800ab8c:	49742400 	.word	0x49742400
 800ab90:	fffffa24 	.word	0xfffffa24
 800ab94:	200014bc 	.word	0x200014bc
 800ab98:	200014b4 	.word	0x200014b4
 800ab9c:	200014ac 	.word	0x200014ac
 800aba0:	fffffe0c 	.word	0xfffffe0c
 800aba4:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800aba8:	4b34      	ldr	r3, [pc, #208]	; (800ac7c <taskGetEstimatedAltitude+0x61c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800abae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800abb6:	4b32      	ldr	r3, [pc, #200]	; (800ac80 <taskGetEstimatedAltitude+0x620>)
 800abb8:	7a9b      	ldrb	r3, [r3, #10]
 800abba:	461a      	mov	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	fb02 f303 	mul.w	r3, r2, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da00      	bge.n	800abc8 <taskGetEstimatedAltitude+0x568>
 800abc6:	331f      	adds	r3, #31
 800abc8:	115b      	asrs	r3, r3, #5
 800abca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800abce:	492d      	ldr	r1, [pc, #180]	; (800ac84 <taskGetEstimatedAltitude+0x624>)
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7f8 ff9b 	bl	8003b0c <constrain>
 800abd6:	4603      	mov	r3, r0
 800abd8:	4a2b      	ldr	r2, [pc, #172]	; (800ac88 <taskGetEstimatedAltitude+0x628>)
 800abda:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800abdc:	4b28      	ldr	r3, [pc, #160]	; (800ac80 <taskGetEstimatedAltitude+0x620>)
 800abde:	7d1b      	ldrb	r3, [r3, #20]
 800abe0:	461a      	mov	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	fb03 f202 	mul.w	r2, r3, r2
 800abe8:	4b28      	ldr	r3, [pc, #160]	; (800ac8c <taskGetEstimatedAltitude+0x62c>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4413      	add	r3, r2
 800abee:	4a27      	ldr	r2, [pc, #156]	; (800ac8c <taskGetEstimatedAltitude+0x62c>)
 800abf0:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800abf2:	4b26      	ldr	r3, [pc, #152]	; (800ac8c <taskGetEstimatedAltitude+0x62c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a26      	ldr	r2, [pc, #152]	; (800ac90 <taskGetEstimatedAltitude+0x630>)
 800abf8:	4926      	ldr	r1, [pc, #152]	; (800ac94 <taskGetEstimatedAltitude+0x634>)
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f8 ff86 	bl	8003b0c <constrain>
 800ac00:	4603      	mov	r3, r0
 800ac02:	4a22      	ldr	r2, [pc, #136]	; (800ac8c <taskGetEstimatedAltitude+0x62c>)
 800ac04:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800ac06:	4b21      	ldr	r3, [pc, #132]	; (800ac8c <taskGetEstimatedAltitude+0x62c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a23      	ldr	r2, [pc, #140]	; (800ac98 <taskGetEstimatedAltitude+0x638>)
 800ac0c:	fb82 1203 	smull	r1, r2, r2, r3
 800ac10:	10d2      	asrs	r2, r2, #3
 800ac12:	17db      	asrs	r3, r3, #31
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	4b1c      	ldr	r3, [pc, #112]	; (800ac88 <taskGetEstimatedAltitude+0x628>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	4a1a      	ldr	r2, [pc, #104]	; (800ac88 <taskGetEstimatedAltitude+0x628>)
 800ac1e:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800ac20:	4b17      	ldr	r3, [pc, #92]	; (800ac80 <taskGetEstimatedAltitude+0x620>)
 800ac22:	7f9b      	ldrb	r3, [r3, #30]
 800ac24:	ee07 3a90 	vmov	s15, r3
 800ac28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac2c:	4b1b      	ldr	r3, [pc, #108]	; (800ac9c <taskGetEstimatedAltitude+0x63c>)
 800ac2e:	edd3 6a00 	vldr	s13, [r3]
 800ac32:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac3e:	eddf 6a18 	vldr	s13, [pc, #96]	; 800aca0 <taskGetEstimatedAltitude+0x640>
 800ac42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac4a:	2296      	movs	r2, #150	; 0x96
 800ac4c:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ac50:	ee17 0a90 	vmov	r0, s15
 800ac54:	f7f8 ff5a 	bl	8003b0c <constrain>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	4b0b      	ldr	r3, [pc, #44]	; (800ac88 <taskGetEstimatedAltitude+0x628>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	4a09      	ldr	r2, [pc, #36]	; (800ac88 <taskGetEstimatedAltitude+0x628>)
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	e002      	b.n	800ac6c <taskGetEstimatedAltitude+0x60c>

    } else {
        BaroPID = 0;
 800ac66:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <taskGetEstimatedAltitude+0x628>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ac6c:	4a0b      	ldr	r2, [pc, #44]	; (800ac9c <taskGetEstimatedAltitude+0x63c>)
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	6013      	str	r3, [r2, #0]

    return 1;
 800ac72:	2301      	movs	r3, #1
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3738      	adds	r7, #56	; 0x38
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	200014b0 	.word	0x200014b0
 800ac80:	20000e64 	.word	0x20000e64
 800ac84:	fffffed4 	.word	0xfffffed4
 800ac88:	200014a8 	.word	0x200014a8
 800ac8c:	200014b8 	.word	0x200014b8
 800ac90:	00190320 	.word	0x00190320
 800ac94:	ffe6fce0 	.word	0xffe6fce0
 800ac98:	003ff801 	.word	0x003ff801
 800ac9c:	20001538 	.word	0x20001538
 800aca0:	44000000 	.word	0x44000000

0800aca4 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800acac:	4916      	ldr	r1, [pc, #88]	; (800ad08 <servoMiddle+0x64>)
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	440b      	add	r3, r1
 800acba:	33bc      	adds	r3, #188	; 0xbc
 800acbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acc0:	2b11      	cmp	r3, #17
 800acc2:	dc11      	bgt.n	800ace8 <servoMiddle+0x44>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b07      	cmp	r3, #7
 800acc8:	dc0e      	bgt.n	800ace8 <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800acca:	490f      	ldr	r1, [pc, #60]	; (800ad08 <servoMiddle+0x64>)
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	440b      	add	r3, r1
 800acd8:	33bc      	adds	r3, #188	; 0xbc
 800acda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acde:	461a      	mov	r2, r3
 800ace0:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <servoMiddle+0x68>)
 800ace2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800ace6:	e009      	b.n	800acfc <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800ace8:	4907      	ldr	r1, [pc, #28]	; (800ad08 <servoMiddle+0x64>)
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	005b      	lsls	r3, r3, #1
 800acf4:	440b      	add	r3, r1
 800acf6:	33bc      	adds	r3, #188	; 0xbc
 800acf8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	20000e64 	.word	0x20000e64
 800ad0c:	20001770 	.word	0x20001770

0800ad10 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800ad1a:	490d      	ldr	r1, [pc, #52]	; (800ad50 <servoDirection+0x40>)
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	440b      	add	r3, r1
 800ad28:	33c0      	adds	r3, #192	; 0xc0
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	fa42 f303 	asr.w	r3, r2, r3
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <servoDirection+0x32>
        return -1;
 800ad3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad40:	e000      	b.n	800ad44 <servoDirection+0x34>
    else
        return 1;
 800ad42:	2301      	movs	r3, #1
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	20000e64 	.word	0x20000e64

0800ad54 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ad5a:	4b1e      	ldr	r3, [pc, #120]	; (800add4 <loadCustomServoMixer+0x80>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ad60:	2270      	movs	r2, #112	; 0x70
 800ad62:	2100      	movs	r1, #0
 800ad64:	481c      	ldr	r0, [pc, #112]	; (800add8 <loadCustomServoMixer+0x84>)
 800ad66:	f018 f969 	bl	802303c <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	71fb      	strb	r3, [r7, #7]
 800ad6e:	e028      	b.n	800adc2 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ad70:	79fa      	ldrb	r2, [r7, #7]
 800ad72:	491a      	ldr	r1, [pc, #104]	; (800addc <loadCustomServoMixer+0x88>)
 800ad74:	4613      	mov	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	33d2      	adds	r3, #210	; 0xd2
 800ad7e:	f993 3000 	ldrsb.w	r3, [r3]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d021      	beq.n	800adca <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ad86:	79fa      	ldrb	r2, [r7, #7]
 800ad88:	79f9      	ldrb	r1, [r7, #7]
 800ad8a:	4813      	ldr	r0, [pc, #76]	; (800add8 <loadCustomServoMixer+0x84>)
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	1a5b      	subs	r3, r3, r1
 800ad92:	4418      	add	r0, r3
 800ad94:	4911      	ldr	r1, [pc, #68]	; (800addc <loadCustomServoMixer+0x88>)
 800ad96:	4613      	mov	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6811      	ldr	r1, [r2, #0]
 800ada6:	6019      	str	r1, [r3, #0]
 800ada8:	8891      	ldrh	r1, [r2, #4]
 800adaa:	7992      	ldrb	r2, [r2, #6]
 800adac:	8099      	strh	r1, [r3, #4]
 800adae:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800adb0:	4b08      	ldr	r3, [pc, #32]	; (800add4 <loadCustomServoMixer+0x80>)
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	4b06      	ldr	r3, [pc, #24]	; (800add4 <loadCustomServoMixer+0x80>)
 800adba:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800adbc:	79fb      	ldrb	r3, [r7, #7]
 800adbe:	3301      	adds	r3, #1
 800adc0:	71fb      	strb	r3, [r7, #7]
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	2b0f      	cmp	r3, #15
 800adc6:	d9d3      	bls.n	800ad70 <loadCustomServoMixer+0x1c>
    }
}
 800adc8:	e000      	b.n	800adcc <loadCustomServoMixer+0x78>
            break;
 800adca:	bf00      	nop
}
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	2000159d 	.word	0x2000159d
 800add8:	20001690 	.word	0x20001690
 800addc:	200008f8 	.word	0x200008f8

0800ade0 <mixerInit>:

void mixerInit(void)
{
 800ade0:	b590      	push	{r4, r7, lr}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800ade6:	4b8b      	ldr	r3, [pc, #556]	; (800b014 <mixerInit+0x234>)
 800ade8:	795b      	ldrb	r3, [r3, #5]
 800adea:	4a8b      	ldr	r2, [pc, #556]	; (800b018 <mixerInit+0x238>)
 800adec:	00db      	lsls	r3, r3, #3
 800adee:	4413      	add	r3, r2
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bf14      	ite	ne
 800adf6:	2301      	movne	r3, #1
 800adf8:	2300      	moveq	r3, #0
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	4b87      	ldr	r3, [pc, #540]	; (800b01c <mixerInit+0x23c>)
 800adfe:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800ae00:	2020      	movs	r0, #32
 800ae02:	f7fb ffe5 	bl	8006dd0 <feature>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <mixerInit+0x32>
        core.useServo = 1;
 800ae0c:	4b83      	ldr	r3, [pc, #524]	; (800b01c <mixerInit+0x23c>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800ae12:	4b80      	ldr	r3, [pc, #512]	; (800b014 <mixerInit+0x234>)
 800ae14:	795b      	ldrb	r3, [r3, #5]
 800ae16:	2b17      	cmp	r3, #23
 800ae18:	d128      	bne.n	800ae6c <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	607b      	str	r3, [r7, #4]
 800ae1e:	e021      	b.n	800ae64 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800ae20:	4a7c      	ldr	r2, [pc, #496]	; (800b014 <mixerInit+0x234>)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3301      	adds	r3, #1
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	4413      	add	r3, r2
 800ae2a:	edd3 7a00 	vldr	s15, [r3]
 800ae2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	d048      	beq.n	800aeca <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800ae38:	4a79      	ldr	r2, [pc, #484]	; (800b020 <mixerInit+0x240>)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	011b      	lsls	r3, r3, #4
 800ae3e:	18d1      	adds	r1, r2, r3
 800ae40:	4a74      	ldr	r2, [pc, #464]	; (800b014 <mixerInit+0x234>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3301      	adds	r3, #1
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ae52:	4b74      	ldr	r3, [pc, #464]	; (800b024 <mixerInit+0x244>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	4b72      	ldr	r3, [pc, #456]	; (800b024 <mixerInit+0x244>)
 800ae5c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3301      	adds	r3, #1
 800ae62:	607b      	str	r3, [r7, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b0b      	cmp	r3, #11
 800ae68:	ddda      	ble.n	800ae20 <mixerInit+0x40>
 800ae6a:	e02f      	b.n	800aecc <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ae6c:	4b69      	ldr	r3, [pc, #420]	; (800b014 <mixerInit+0x234>)
 800ae6e:	795b      	ldrb	r3, [r3, #5]
 800ae70:	461a      	mov	r2, r3
 800ae72:	4b69      	ldr	r3, [pc, #420]	; (800b018 <mixerInit+0x238>)
 800ae74:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ae78:	4b6a      	ldr	r3, [pc, #424]	; (800b024 <mixerInit+0x244>)
 800ae7a:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ae7c:	4b65      	ldr	r3, [pc, #404]	; (800b014 <mixerInit+0x234>)
 800ae7e:	795b      	ldrb	r3, [r3, #5]
 800ae80:	4a65      	ldr	r2, [pc, #404]	; (800b018 <mixerInit+0x238>)
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	4413      	add	r3, r2
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d01f      	beq.n	800aecc <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	e014      	b.n	800aebc <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ae92:	4b60      	ldr	r3, [pc, #384]	; (800b014 <mixerInit+0x234>)
 800ae94:	795b      	ldrb	r3, [r3, #5]
 800ae96:	4a60      	ldr	r2, [pc, #384]	; (800b018 <mixerInit+0x238>)
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	011b      	lsls	r3, r3, #4
 800aea2:	18d1      	adds	r1, r2, r3
 800aea4:	4a5e      	ldr	r2, [pc, #376]	; (800b020 <mixerInit+0x240>)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	4413      	add	r3, r2
 800aeac:	461c      	mov	r4, r3
 800aeae:	460b      	mov	r3, r1
 800aeb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aeb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	607b      	str	r3, [r7, #4]
 800aebc:	4b59      	ldr	r3, [pc, #356]	; (800b024 <mixerInit+0x244>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	dbe4      	blt.n	800ae92 <mixerInit+0xb2>
 800aec8:	e000      	b.n	800aecc <mixerInit+0xec>
                break;
 800aeca:	bf00      	nop
        }
    }

    if (core.useServo) {
 800aecc:	4b53      	ldr	r3, [pc, #332]	; (800b01c <mixerInit+0x23c>)
 800aece:	7d5b      	ldrb	r3, [r3, #21]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d033      	beq.n	800af3c <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800aed4:	4b4f      	ldr	r3, [pc, #316]	; (800b014 <mixerInit+0x234>)
 800aed6:	795b      	ldrb	r3, [r3, #5]
 800aed8:	461a      	mov	r2, r3
 800aeda:	4b53      	ldr	r3, [pc, #332]	; (800b028 <mixerInit+0x248>)
 800aedc:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800aee0:	4b52      	ldr	r3, [pc, #328]	; (800b02c <mixerInit+0x24c>)
 800aee2:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800aee4:	4b4b      	ldr	r3, [pc, #300]	; (800b014 <mixerInit+0x234>)
 800aee6:	795b      	ldrb	r3, [r3, #5]
 800aee8:	4a4f      	ldr	r2, [pc, #316]	; (800b028 <mixerInit+0x248>)
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	4413      	add	r3, r2
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d023      	beq.n	800af3c <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800aef4:	2300      	movs	r3, #0
 800aef6:	607b      	str	r3, [r7, #4]
 800aef8:	e01a      	b.n	800af30 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800aefa:	4b46      	ldr	r3, [pc, #280]	; (800b014 <mixerInit+0x234>)
 800aefc:	795b      	ldrb	r3, [r3, #5]
 800aefe:	4a4a      	ldr	r2, [pc, #296]	; (800b028 <mixerInit+0x248>)
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	4413      	add	r3, r2
 800af04:	6859      	ldr	r1, [r3, #4]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	4613      	mov	r3, r2
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	1a9b      	subs	r3, r3, r2
 800af0e:	18c8      	adds	r0, r1, r3
 800af10:	4947      	ldr	r1, [pc, #284]	; (800b030 <mixerInit+0x250>)
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	4613      	mov	r3, r2
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	1a9b      	subs	r3, r3, r2
 800af1a:	440b      	add	r3, r1
 800af1c:	4602      	mov	r2, r0
 800af1e:	6811      	ldr	r1, [r2, #0]
 800af20:	6019      	str	r1, [r3, #0]
 800af22:	8891      	ldrh	r1, [r2, #4]
 800af24:	7992      	ldrb	r2, [r2, #6]
 800af26:	8099      	strh	r1, [r3, #4]
 800af28:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3301      	adds	r3, #1
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	4b3e      	ldr	r3, [pc, #248]	; (800b02c <mixerInit+0x24c>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	461a      	mov	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4293      	cmp	r3, r2
 800af3a:	dbde      	blt.n	800aefa <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800af3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af40:	f7fb ff46 	bl	8006dd0 <feature>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d045      	beq.n	800afd6 <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800af4a:	4b36      	ldr	r3, [pc, #216]	; (800b024 <mixerInit+0x244>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d941      	bls.n	800afd6 <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	e038      	b.n	800afca <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800af58:	4a31      	ldr	r2, [pc, #196]	; (800b020 <mixerInit+0x240>)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	011b      	lsls	r3, r3, #4
 800af5e:	4413      	add	r3, r2
 800af60:	3308      	adds	r3, #8
 800af62:	edd3 7a00 	vldr	s15, [r3]
 800af66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af6e:	4a2c      	ldr	r2, [pc, #176]	; (800b020 <mixerInit+0x240>)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	4413      	add	r3, r2
 800af76:	3308      	adds	r3, #8
 800af78:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800af7c:	4a28      	ldr	r2, [pc, #160]	; (800b020 <mixerInit+0x240>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	4413      	add	r3, r2
 800af84:	3304      	adds	r3, #4
 800af86:	edd3 7a00 	vldr	s15, [r3]
 800af8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800af8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af92:	4a23      	ldr	r2, [pc, #140]	; (800b020 <mixerInit+0x240>)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	4413      	add	r3, r2
 800af9a:	3304      	adds	r3, #4
 800af9c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800afa0:	4a1f      	ldr	r2, [pc, #124]	; (800b020 <mixerInit+0x240>)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	4413      	add	r3, r2
 800afa8:	330c      	adds	r3, #12
 800afaa:	edd3 7a00 	vldr	s15, [r3]
 800afae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800afb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afb6:	4a1a      	ldr	r2, [pc, #104]	; (800b020 <mixerInit+0x240>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	4413      	add	r3, r2
 800afbe:	330c      	adds	r3, #12
 800afc0:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3301      	adds	r3, #1
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	4b16      	ldr	r3, [pc, #88]	; (800b024 <mixerInit+0x244>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4293      	cmp	r3, r2
 800afd4:	dbc0      	blt.n	800af58 <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800afd6:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <mixerInit+0x234>)
 800afd8:	795b      	ldrb	r3, [r3, #5]
 800afda:	2b08      	cmp	r3, #8
 800afdc:	d007      	beq.n	800afee <mixerInit+0x20e>
 800afde:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <mixerInit+0x234>)
 800afe0:	795b      	ldrb	r3, [r3, #5]
 800afe2:	2b0e      	cmp	r3, #14
 800afe4:	d003      	beq.n	800afee <mixerInit+0x20e>
 800afe6:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <mixerInit+0x234>)
 800afe8:	795b      	ldrb	r3, [r3, #5]
 800afea:	2b18      	cmp	r3, #24
 800afec:	d109      	bne.n	800b002 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800afee:	4b11      	ldr	r3, [pc, #68]	; (800b034 <mixerInit+0x254>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800aff4:	4b07      	ldr	r3, [pc, #28]	; (800b014 <mixerInit+0x234>)
 800aff6:	795b      	ldrb	r3, [r3, #5]
 800aff8:	2b18      	cmp	r3, #24
 800affa:	d105      	bne.n	800b008 <mixerInit+0x228>
            loadCustomServoMixer();
 800affc:	f7ff feaa 	bl	800ad54 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800b000:	e002      	b.n	800b008 <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800b002:	4b0c      	ldr	r3, [pc, #48]	; (800b034 <mixerInit+0x254>)
 800b004:	2200      	movs	r2, #0
 800b006:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800b008:	f000 f816 	bl	800b038 <mixerResetMotors>
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	bd90      	pop	{r4, r7, pc}
 800b014:	200008f8 	.word	0x200008f8
 800b018:	08029308 	.word	0x08029308
 800b01c:	20000840 	.word	0x20000840
 800b020:	200015d0 	.word	0x200015d0
 800b024:	2000159c 	.word	0x2000159c
 800b028:	08029474 	.word	0x08029474
 800b02c:	2000159d 	.word	0x2000159d
 800b030:	20001690 	.word	0x20001690
 800b034:	20001738 	.word	0x20001738

0800b038 <mixerResetMotors>:

void mixerResetMotors(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800b03e:	2300      	movs	r3, #0
 800b040:	607b      	str	r3, [r7, #4]
 800b042:	e016      	b.n	800b072 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800b044:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b048:	f7fb fec2 	bl	8006dd0 <feature>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d004      	beq.n	800b05c <mixerResetMotors+0x24>
 800b052:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <mixerResetMotors+0x4c>)
 800b054:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800b058:	b21b      	sxth	r3, r3
 800b05a:	e003      	b.n	800b064 <mixerResetMotors+0x2c>
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <mixerResetMotors+0x4c>)
 800b05e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b062:	b21b      	sxth	r3, r3
 800b064:	4908      	ldr	r1, [pc, #32]	; (800b088 <mixerResetMotors+0x50>)
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	3301      	adds	r3, #1
 800b070:	607b      	str	r3, [r7, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b0b      	cmp	r3, #11
 800b076:	dde5      	ble.n	800b044 <mixerResetMotors+0xc>
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200008f8 	.word	0x200008f8
 800b088:	200015b8 	.word	0x200015b8

0800b08c <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3301      	adds	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	e038      	b.n	800b112 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800b0a0:	4934      	ldr	r1, [pc, #208]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	1a9b      	subs	r3, r3, r2
 800b0aa:	440b      	add	r3, r1
 800b0ac:	33d6      	adds	r3, #214	; 0xd6
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	701a      	strb	r2, [r3, #0]
 800b0b2:	4930      	ldr	r1, [pc, #192]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	440b      	add	r3, r1
 800b0be:	33d2      	adds	r3, #210	; 0xd2
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]
 800b0c4:	492b      	ldr	r1, [pc, #172]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	00db      	lsls	r3, r3, #3
 800b0cc:	1a9b      	subs	r3, r3, r2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	33d2      	adds	r3, #210	; 0xd2
 800b0d2:	f993 3000 	ldrsb.w	r3, [r3]
 800b0d6:	b2d8      	uxtb	r0, r3
 800b0d8:	4926      	ldr	r1, [pc, #152]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	00db      	lsls	r3, r3, #3
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	440b      	add	r3, r1
 800b0e4:	33d1      	adds	r3, #209	; 0xd1
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	4922      	ldr	r1, [pc, #136]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	33d1      	adds	r3, #209	; 0xd1
 800b0f8:	7818      	ldrb	r0, [r3, #0]
 800b0fa:	491e      	ldr	r1, [pc, #120]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4613      	mov	r3, r2
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	440b      	add	r3, r1
 800b106:	33d0      	adds	r3, #208	; 0xd0
 800b108:	4602      	mov	r2, r0
 800b10a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3301      	adds	r3, #1
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2b0f      	cmp	r3, #15
 800b116:	ddc3      	ble.n	800b0a0 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b118:	2300      	movs	r3, #0
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	e01a      	b.n	800b154 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800b11e:	4a16      	ldr	r2, [pc, #88]	; (800b178 <servoMixerLoadMix+0xec>)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	4413      	add	r3, r2
 800b126:	6859      	ldr	r1, [r3, #4]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4613      	mov	r3, r2
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	18c8      	adds	r0, r1, r3
 800b132:	4910      	ldr	r1, [pc, #64]	; (800b174 <servoMixerLoadMix+0xe8>)
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	4613      	mov	r3, r2
 800b138:	00db      	lsls	r3, r3, #3
 800b13a:	1a9b      	subs	r3, r3, r2
 800b13c:	440b      	add	r3, r1
 800b13e:	33d0      	adds	r3, #208	; 0xd0
 800b140:	4602      	mov	r2, r0
 800b142:	6811      	ldr	r1, [r2, #0]
 800b144:	6019      	str	r1, [r3, #0]
 800b146:	8891      	ldrh	r1, [r2, #4]
 800b148:	7992      	ldrb	r2, [r2, #6]
 800b14a:	8099      	strh	r1, [r3, #4]
 800b14c:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3301      	adds	r3, #1
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	4a08      	ldr	r2, [pc, #32]	; (800b178 <servoMixerLoadMix+0xec>)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b15c:	461a      	mov	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4293      	cmp	r3, r2
 800b162:	dbdc      	blt.n	800b11e <servoMixerLoadMix+0x92>
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	200008f8 	.word	0x200008f8
 800b178:	08029474 	.word	0x08029474

0800b17c <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b17c:	b490      	push	{r4, r7}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3301      	adds	r3, #1
 800b188:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e00a      	b.n	800b1a6 <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b190:	4a1c      	ldr	r2, [pc, #112]	; (800b204 <mixerLoadMix+0x88>)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	4413      	add	r3, r2
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b0b      	cmp	r3, #11
 800b1aa:	ddf1      	ble.n	800b190 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b1ac:	4a16      	ldr	r2, [pc, #88]	; (800b208 <mixerLoadMix+0x8c>)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d01f      	beq.n	800b1fa <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e014      	b.n	800b1ea <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b1c0:	4a11      	ldr	r2, [pc, #68]	; (800b208 <mixerLoadMix+0x8c>)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	4413      	add	r3, r2
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	18d1      	adds	r1, r2, r3
 800b1d0:	4a0c      	ldr	r2, [pc, #48]	; (800b204 <mixerLoadMix+0x88>)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	011b      	lsls	r3, r3, #4
 800b1d8:	4413      	add	r3, r2
 800b1da:	461c      	mov	r4, r3
 800b1dc:	460b      	mov	r3, r1
 800b1de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	4a07      	ldr	r2, [pc, #28]	; (800b208 <mixerLoadMix+0x8c>)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	dbe2      	blt.n	800b1c0 <mixerLoadMix+0x44>
    }
}
 800b1fa:	bf00      	nop
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bc90      	pop	{r4, r7}
 800b202:	4770      	bx	lr
 800b204:	200008f8 	.word	0x200008f8
 800b208:	08029308 	.word	0x08029308

0800b20c <writeServos>:

void writeServos(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b210:	4b95      	ldr	r3, [pc, #596]	; (800b468 <writeServos+0x25c>)
 800b212:	7d5b      	ldrb	r3, [r3, #21]
 800b214:	f083 0301 	eor.w	r3, r3, #1
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 811d 	bne.w	800b45a <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b220:	4b92      	ldr	r3, [pc, #584]	; (800b46c <writeServos+0x260>)
 800b222:	795b      	ldrb	r3, [r3, #5]
 800b224:	3b01      	subs	r3, #1
 800b226:	2b17      	cmp	r3, #23
 800b228:	f200 8100 	bhi.w	800b42c <writeServos+0x220>
 800b22c:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <writeServos+0x28>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b2b7 	.word	0x0800b2b7
 800b238:	0800b42d 	.word	0x0800b42d
 800b23c:	0800b42d 	.word	0x0800b42d
 800b240:	0800b295 	.word	0x0800b295
 800b244:	0800b2f7 	.word	0x0800b2f7
 800b248:	0800b42d 	.word	0x0800b42d
 800b24c:	0800b42d 	.word	0x0800b42d
 800b250:	0800b33b 	.word	0x0800b33b
 800b254:	0800b42d 	.word	0x0800b42d
 800b258:	0800b42d 	.word	0x0800b42d
 800b25c:	0800b42d 	.word	0x0800b42d
 800b260:	0800b42d 	.word	0x0800b42d
 800b264:	0800b42d 	.word	0x0800b42d
 800b268:	0800b35d 	.word	0x0800b35d
 800b26c:	0800b42d 	.word	0x0800b42d
 800b270:	0800b42d 	.word	0x0800b42d
 800b274:	0800b42d 	.word	0x0800b42d
 800b278:	0800b42d 	.word	0x0800b42d
 800b27c:	0800b42d 	.word	0x0800b42d
 800b280:	0800b319 	.word	0x0800b319
 800b284:	0800b35d 	.word	0x0800b35d
 800b288:	0800b42d 	.word	0x0800b42d
 800b28c:	0800b42d 	.word	0x0800b42d
 800b290:	0800b39f 	.word	0x0800b39f
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b294:	4b76      	ldr	r3, [pc, #472]	; (800b470 <writeServos+0x264>)
 800b296:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	4619      	mov	r1, r3
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f7f6 fcb0 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b2a4:	4b72      	ldr	r3, [pc, #456]	; (800b470 <writeServos+0x264>)
 800b2a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	2001      	movs	r0, #1
 800b2b0:	f7f6 fca8 	bl	8001c04 <actPwmWriteServo>
            break;
 800b2b4:	e0d6      	b.n	800b464 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b2b6:	4b6f      	ldr	r3, [pc, #444]	; (800b474 <writeServos+0x268>)
 800b2b8:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d008      	beq.n	800b2d2 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b2c0:	4b6b      	ldr	r3, [pc, #428]	; (800b470 <writeServos+0x264>)
 800b2c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	f7f6 fc9a 	bl	8001c04 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b2d0:	e0c8      	b.n	800b464 <writeServos+0x258>
                if (f.ARMED)
 800b2d2:	4b69      	ldr	r3, [pc, #420]	; (800b478 <writeServos+0x26c>)
 800b2d4:	785b      	ldrb	r3, [r3, #1]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d008      	beq.n	800b2ec <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b2da:	4b65      	ldr	r3, [pc, #404]	; (800b470 <writeServos+0x264>)
 800b2dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f7f6 fc8d 	bl	8001c04 <actPwmWriteServo>
            break;
 800b2ea:	e0bb      	b.n	800b464 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	f7f6 fc88 	bl	8001c04 <actPwmWriteServo>
            break;
 800b2f4:	e0b6      	b.n	800b464 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b2f6:	4b5e      	ldr	r3, [pc, #376]	; (800b470 <writeServos+0x264>)
 800b2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	4619      	mov	r1, r3
 800b300:	2000      	movs	r0, #0
 800b302:	f7f6 fc7f 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b306:	4b5a      	ldr	r3, [pc, #360]	; (800b470 <writeServos+0x264>)
 800b308:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	4619      	mov	r1, r3
 800b310:	2001      	movs	r0, #1
 800b312:	f7f6 fc77 	bl	8001c04 <actPwmWriteServo>
            break;
 800b316:	e0a5      	b.n	800b464 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b318:	4b55      	ldr	r3, [pc, #340]	; (800b470 <writeServos+0x264>)
 800b31a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	4619      	mov	r1, r3
 800b322:	2000      	movs	r0, #0
 800b324:	f7f6 fc6e 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b328:	4b51      	ldr	r3, [pc, #324]	; (800b470 <writeServos+0x264>)
 800b32a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4619      	mov	r1, r3
 800b332:	2001      	movs	r0, #1
 800b334:	f7f6 fc66 	bl	8001c04 <actPwmWriteServo>
            break;
 800b338:	e094      	b.n	800b464 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b33a:	4b4d      	ldr	r3, [pc, #308]	; (800b470 <writeServos+0x264>)
 800b33c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b340:	b29b      	uxth	r3, r3
 800b342:	4619      	mov	r1, r3
 800b344:	2000      	movs	r0, #0
 800b346:	f7f6 fc5d 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b34a:	4b49      	ldr	r3, [pc, #292]	; (800b470 <writeServos+0x264>)
 800b34c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b350:	b29b      	uxth	r3, r3
 800b352:	4619      	mov	r1, r3
 800b354:	2001      	movs	r0, #1
 800b356:	f7f6 fc55 	bl	8001c04 <actPwmWriteServo>
            break;
 800b35a:	e083      	b.n	800b464 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b35c:	4b44      	ldr	r3, [pc, #272]	; (800b470 <writeServos+0x264>)
 800b35e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b362:	b29b      	uxth	r3, r3
 800b364:	4619      	mov	r1, r3
 800b366:	2000      	movs	r0, #0
 800b368:	f7f6 fc4c 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b36c:	4b40      	ldr	r3, [pc, #256]	; (800b470 <writeServos+0x264>)
 800b36e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b372:	b29b      	uxth	r3, r3
 800b374:	4619      	mov	r1, r3
 800b376:	2001      	movs	r0, #1
 800b378:	f7f6 fc44 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b37c:	4b3c      	ldr	r3, [pc, #240]	; (800b470 <writeServos+0x264>)
 800b37e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b382:	b29b      	uxth	r3, r3
 800b384:	4619      	mov	r1, r3
 800b386:	2002      	movs	r0, #2
 800b388:	f7f6 fc3c 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b38c:	4b38      	ldr	r3, [pc, #224]	; (800b470 <writeServos+0x264>)
 800b38e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b392:	b29b      	uxth	r3, r3
 800b394:	4619      	mov	r1, r3
 800b396:	2003      	movs	r0, #3
 800b398:	f7f6 fc34 	bl	8001c04 <actPwmWriteServo>
            break;
 800b39c:	e062      	b.n	800b464 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b39e:	4b34      	ldr	r3, [pc, #208]	; (800b470 <writeServos+0x264>)
 800b3a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f7f6 fc2b 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b3ae:	4b30      	ldr	r3, [pc, #192]	; (800b470 <writeServos+0x264>)
 800b3b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	f7f6 fc23 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b3be:	4b2c      	ldr	r3, [pc, #176]	; (800b470 <writeServos+0x264>)
 800b3c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	2002      	movs	r0, #2
 800b3ca:	f7f6 fc1b 	bl	8001c04 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b3ce:	4b28      	ldr	r3, [pc, #160]	; (800b470 <writeServos+0x264>)
 800b3d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	2003      	movs	r0, #3
 800b3da:	f7f6 fc13 	bl	8001c04 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b3de:	2001      	movs	r0, #1
 800b3e0:	f7fb fcf6 	bl	8006dd0 <feature>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d039      	beq.n	800b45e <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b3ea:	4b21      	ldr	r3, [pc, #132]	; (800b470 <writeServos+0x264>)
 800b3ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	2004      	movs	r0, #4
 800b3f6:	f7f6 fc05 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b3fa:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <writeServos+0x264>)
 800b3fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b400:	b29b      	uxth	r3, r3
 800b402:	4619      	mov	r1, r3
 800b404:	2005      	movs	r0, #5
 800b406:	f7f6 fbfd 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b40a:	4b19      	ldr	r3, [pc, #100]	; (800b470 <writeServos+0x264>)
 800b40c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b410:	b29b      	uxth	r3, r3
 800b412:	4619      	mov	r1, r3
 800b414:	2006      	movs	r0, #6
 800b416:	f7f6 fbf5 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b41a:	4b15      	ldr	r3, [pc, #84]	; (800b470 <writeServos+0x264>)
 800b41c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b420:	b29b      	uxth	r3, r3
 800b422:	4619      	mov	r1, r3
 800b424:	2007      	movs	r0, #7
 800b426:	f7f6 fbed 	bl	8001c04 <actPwmWriteServo>
            }
            break;
 800b42a:	e018      	b.n	800b45e <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b42c:	2020      	movs	r0, #32
 800b42e:	f7fb fccf 	bl	8006dd0 <feature>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d014      	beq.n	800b462 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b438:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <writeServos+0x264>)
 800b43a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	2000      	movs	r0, #0
 800b444:	f7f6 fbde 	bl	8001c04 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b448:	4b09      	ldr	r3, [pc, #36]	; (800b470 <writeServos+0x264>)
 800b44a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b44e:	b29b      	uxth	r3, r3
 800b450:	4619      	mov	r1, r3
 800b452:	2001      	movs	r0, #1
 800b454:	f7f6 fbd6 	bl	8001c04 <actPwmWriteServo>
            }
            break;
 800b458:	e003      	b.n	800b462 <writeServos+0x256>
        return;
 800b45a:	bf00      	nop
 800b45c:	e002      	b.n	800b464 <writeServos+0x258>
            break;
 800b45e:	bf00      	nop
 800b460:	e000      	b.n	800b464 <writeServos+0x258>
            break;
 800b462:	bf00      	nop
    }
}
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20000840 	.word	0x20000840
 800b46c:	200008f8 	.word	0x200008f8
 800b470:	20000040 	.word	0x20000040
 800b474:	20000e64 	.word	0x20000e64
 800b478:	20001738 	.word	0x20001738

0800b47c <writeMotors>:

void writeMotors(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b482:	2300      	movs	r3, #0
 800b484:	71fb      	strb	r3, [r7, #7]
 800b486:	e00c      	b.n	800b4a2 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	4a0b      	ldr	r2, [pc, #44]	; (800b4b8 <writeMotors+0x3c>)
 800b48c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b490:	b29a      	uxth	r2, r3
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7f6 fb98 	bl	8001bcc <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	71fb      	strb	r3, [r7, #7]
 800b4a2:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <writeMotors+0x40>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	79fa      	ldrb	r2, [r7, #7]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d3ed      	bcc.n	800b488 <writeMotors+0xc>
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200015a0 	.word	0x200015a0
 800b4bc:	2000159c 	.word	0x2000159c

0800b4c0 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b4c0:	b590      	push	{r4, r7, lr}
 800b4c2:	b08b      	sub	sp, #44	; 0x2c
 800b4c4:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b4c6:	4bae      	ldr	r3, [pc, #696]	; (800b780 <servoMixer+0x2c0>)
 800b4c8:	7a9b      	ldrb	r3, [r3, #10]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00c      	beq.n	800b4e8 <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b4ce:	4bad      	ldr	r3, [pc, #692]	; (800b784 <servoMixer+0x2c4>)
 800b4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4d4:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b4d6:	4bab      	ldr	r3, [pc, #684]	; (800b784 <servoMixer+0x2c4>)
 800b4d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4dc:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b4de:	4ba9      	ldr	r3, [pc, #676]	; (800b784 <servoMixer+0x2c4>)
 800b4e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4e4:	813b      	strh	r3, [r7, #8]
 800b4e6:	e00b      	b.n	800b500 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b4e8:	4ba7      	ldr	r3, [pc, #668]	; (800b788 <servoMixer+0x2c8>)
 800b4ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ee:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b4f0:	4ba5      	ldr	r3, [pc, #660]	; (800b788 <servoMixer+0x2c8>)
 800b4f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4f6:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b4f8:	4ba3      	ldr	r3, [pc, #652]	; (800b788 <servoMixer+0x2c8>)
 800b4fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4fe:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b500:	4ba2      	ldr	r3, [pc, #648]	; (800b78c <servoMixer+0x2cc>)
 800b502:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b506:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b508:	4ba1      	ldr	r3, [pc, #644]	; (800b790 <servoMixer+0x2d0>)
 800b50a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	4ba0      	ldr	r3, [pc, #640]	; (800b794 <servoMixer+0x2d4>)
 800b512:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	b29b      	uxth	r3, r3
 800b51a:	b21b      	sxth	r3, r3
 800b51c:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b51e:	4b9c      	ldr	r3, [pc, #624]	; (800b790 <servoMixer+0x2d0>)
 800b520:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b524:	b29a      	uxth	r2, r3
 800b526:	4b9b      	ldr	r3, [pc, #620]	; (800b794 <servoMixer+0x2d4>)
 800b528:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	b29b      	uxth	r3, r3
 800b530:	b21b      	sxth	r3, r3
 800b532:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b534:	4b96      	ldr	r3, [pc, #600]	; (800b790 <servoMixer+0x2d0>)
 800b536:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	4b95      	ldr	r3, [pc, #596]	; (800b794 <servoMixer+0x2d4>)
 800b53e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	b29b      	uxth	r3, r3
 800b546:	b21b      	sxth	r3, r3
 800b548:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b54a:	4b91      	ldr	r3, [pc, #580]	; (800b790 <servoMixer+0x2d0>)
 800b54c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b550:	b29a      	uxth	r2, r3
 800b552:	4b90      	ldr	r3, [pc, #576]	; (800b794 <servoMixer+0x2d4>)
 800b554:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	b21b      	sxth	r3, r3
 800b55e:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b560:	4b8b      	ldr	r3, [pc, #556]	; (800b790 <servoMixer+0x2d0>)
 800b562:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b566:	b29a      	uxth	r2, r3
 800b568:	4b8a      	ldr	r3, [pc, #552]	; (800b794 <servoMixer+0x2d4>)
 800b56a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	b29b      	uxth	r3, r3
 800b572:	b21b      	sxth	r3, r3
 800b574:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b576:	4b86      	ldr	r3, [pc, #536]	; (800b790 <servoMixer+0x2d0>)
 800b578:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	4b85      	ldr	r3, [pc, #532]	; (800b794 <servoMixer+0x2d4>)
 800b580:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	b29b      	uxth	r3, r3
 800b588:	b21b      	sxth	r3, r3
 800b58a:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b58c:	4b80      	ldr	r3, [pc, #512]	; (800b790 <servoMixer+0x2d0>)
 800b58e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b592:	b29a      	uxth	r2, r3
 800b594:	4b7f      	ldr	r3, [pc, #508]	; (800b794 <servoMixer+0x2d4>)
 800b596:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	b21b      	sxth	r3, r3
 800b5a0:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b5a2:	4b7b      	ldr	r3, [pc, #492]	; (800b790 <servoMixer+0x2d0>)
 800b5a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	4b7a      	ldr	r3, [pc, #488]	; (800b794 <servoMixer+0x2d4>)
 800b5ac:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	b21b      	sxth	r3, r3
 800b5b6:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5be:	e00a      	b.n	800b5d6 <servoMixer+0x116>
        servo[i] = 0;
 800b5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5c4:	4a74      	ldr	r2, [pc, #464]	; (800b798 <servoMixer+0x2d8>)
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5da:	2b07      	cmp	r3, #7
 800b5dc:	d9f0      	bls.n	800b5c0 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5e4:	e15f      	b.n	800b8a6 <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b5e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5ea:	496c      	ldr	r1, [pc, #432]	; (800b79c <servoMixer+0x2dc>)
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	3306      	adds	r3, #6
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00e      	beq.n	800b61a <servoMixer+0x15a>
 800b5fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b600:	4966      	ldr	r1, [pc, #408]	; (800b79c <servoMixer+0x2dc>)
 800b602:	4613      	mov	r3, r2
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	1a9b      	subs	r3, r3, r2
 800b608:	440b      	add	r3, r1
 800b60a:	3306      	adds	r3, #6
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	3314      	adds	r3, #20
 800b610:	4a63      	ldr	r2, [pc, #396]	; (800b7a0 <servoMixer+0x2e0>)
 800b612:	5cd3      	ldrb	r3, [r2, r3]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 813b 	beq.w	800b890 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b61a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b61e:	495f      	ldr	r1, [pc, #380]	; (800b79c <servoMixer+0x2dc>)
 800b620:	4613      	mov	r3, r2
 800b622:	00db      	lsls	r3, r3, #3
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	440b      	add	r3, r1
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b62e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b632:	495a      	ldr	r1, [pc, #360]	; (800b79c <servoMixer+0x2dc>)
 800b634:	4613      	mov	r3, r2
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	1a9b      	subs	r3, r3, r2
 800b63a:	440b      	add	r3, r1
 800b63c:	3301      	adds	r3, #1
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b644:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b648:	4956      	ldr	r1, [pc, #344]	; (800b7a4 <servoMixer+0x2e4>)
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	440b      	add	r3, r1
 800b654:	33ba      	adds	r3, #186	; 0xba
 800b656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b65a:	b299      	uxth	r1, r3
 800b65c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b660:	4850      	ldr	r0, [pc, #320]	; (800b7a4 <servoMixer+0x2e4>)
 800b662:	4613      	mov	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	4403      	add	r3, r0
 800b66c:	33b8      	adds	r3, #184	; 0xb8
 800b66e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b672:	b29b      	uxth	r3, r3
 800b674:	1acb      	subs	r3, r1, r3
 800b676:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b678:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b67c:	4947      	ldr	r1, [pc, #284]	; (800b79c <servoMixer+0x2dc>)
 800b67e:	4613      	mov	r3, r2
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	1a9b      	subs	r3, r3, r2
 800b684:	440b      	add	r3, r1
 800b686:	3304      	adds	r3, #4
 800b688:	f993 3000 	ldrsb.w	r3, [r3]
 800b68c:	461a      	mov	r2, r3
 800b68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b690:	fb02 f303 	mul.w	r3, r2, r3
 800b694:	4a44      	ldr	r2, [pc, #272]	; (800b7a8 <servoMixer+0x2e8>)
 800b696:	fb82 1203 	smull	r1, r2, r2, r3
 800b69a:	1152      	asrs	r2, r2, #5
 800b69c:	17db      	asrs	r3, r3, #31
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6a4:	085b      	lsrs	r3, r3, #1
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b6ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6b2:	493a      	ldr	r1, [pc, #232]	; (800b79c <servoMixer+0x2dc>)
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	1a9b      	subs	r3, r3, r2
 800b6ba:	440b      	add	r3, r1
 800b6bc:	3305      	adds	r3, #5
 800b6be:	f993 3000 	ldrsb.w	r3, [r3]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6c6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ca:	4a37      	ldr	r2, [pc, #220]	; (800b7a8 <servoMixer+0x2e8>)
 800b6cc:	fb82 1203 	smull	r1, r2, r2, r3
 800b6d0:	1152      	asrs	r2, r2, #5
 800b6d2:	17db      	asrs	r3, r3, #31
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6da:	085b      	lsrs	r3, r3, #1
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b6e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6e8:	492c      	ldr	r1, [pc, #176]	; (800b79c <servoMixer+0x2dc>)
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	00db      	lsls	r3, r3, #3
 800b6ee:	1a9b      	subs	r3, r3, r2
 800b6f0:	440b      	add	r3, r1
 800b6f2:	3303      	adds	r3, #3
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10c      	bne.n	800b714 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b6fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	3328      	adds	r3, #40	; 0x28
 800b706:	443b      	add	r3, r7
 800b708:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b70c:	4b27      	ldr	r3, [pc, #156]	; (800b7ac <servoMixer+0x2ec>)
 800b70e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b712:	e082      	b.n	800b81a <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b718:	4a24      	ldr	r2, [pc, #144]	; (800b7ac <servoMixer+0x2ec>)
 800b71a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b71e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	3328      	adds	r3, #40	; 0x28
 800b726:	443b      	add	r3, r7
 800b728:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	da3f      	bge.n	800b7b0 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b734:	4a1d      	ldr	r2, [pc, #116]	; (800b7ac <servoMixer+0x2ec>)
 800b736:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b740:	4916      	ldr	r1, [pc, #88]	; (800b79c <servoMixer+0x2dc>)
 800b742:	4613      	mov	r3, r2
 800b744:	00db      	lsls	r3, r3, #3
 800b746:	1a9b      	subs	r3, r3, r2
 800b748:	440b      	add	r3, r1
 800b74a:	3303      	adds	r3, #3
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	4418      	add	r0, r3
 800b750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b754:	4a15      	ldr	r2, [pc, #84]	; (800b7ac <servoMixer+0x2ec>)
 800b756:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b75a:	4619      	mov	r1, r3
 800b75c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	3328      	adds	r3, #40	; 0x28
 800b764:	443b      	add	r3, r7
 800b766:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f7f8 f9ce 	bl	8003b0c <constrain>
 800b770:	4602      	mov	r2, r0
 800b772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b776:	b211      	sxth	r1, r2
 800b778:	4a0c      	ldr	r2, [pc, #48]	; (800b7ac <servoMixer+0x2ec>)
 800b77a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b77e:	e04c      	b.n	800b81a <servoMixer+0x35a>
 800b780:	20001738 	.word	0x20001738
 800b784:	20001794 	.word	0x20001794
 800b788:	200017f4 	.word	0x200017f4
 800b78c:	200015a0 	.word	0x200015a0
 800b790:	20001770 	.word	0x20001770
 800b794:	200008f8 	.word	0x200008f8
 800b798:	20000040 	.word	0x20000040
 800b79c:	20001690 	.word	0x20001690
 800b7a0:	200017d8 	.word	0x200017d8
 800b7a4:	20000e64 	.word	0x20000e64
 800b7a8:	51eb851f 	.word	0x51eb851f
 800b7ac:	20001700 	.word	0x20001700
                else if (currentOutput[i] > input[from])
 800b7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b4:	4a63      	ldr	r2, [pc, #396]	; (800b944 <servoMixer+0x484>)
 800b7b6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b7ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	3328      	adds	r3, #40	; 0x28
 800b7c2:	443b      	add	r3, r7
 800b7c4:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	dd26      	ble.n	800b81a <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d0:	4a5c      	ldr	r2, [pc, #368]	; (800b944 <servoMixer+0x484>)
 800b7d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7dc:	495a      	ldr	r1, [pc, #360]	; (800b948 <servoMixer+0x488>)
 800b7de:	4613      	mov	r3, r2
 800b7e0:	00db      	lsls	r3, r3, #3
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	3303      	adds	r3, #3
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	1ac0      	subs	r0, r0, r3
 800b7ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	3328      	adds	r3, #40	; 0x28
 800b7f4:	443b      	add	r3, r7
 800b7f6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b800:	4a50      	ldr	r2, [pc, #320]	; (800b944 <servoMixer+0x484>)
 800b802:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b806:	461a      	mov	r2, r3
 800b808:	f7f8 f980 	bl	8003b0c <constrain>
 800b80c:	4602      	mov	r2, r0
 800b80e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b812:	b211      	sxth	r1, r2
 800b814:	4a4b      	ldr	r2, [pc, #300]	; (800b944 <servoMixer+0x484>)
 800b816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b81a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b81e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff fa73 	bl	800ad10 <servoDirection>
 800b82a:	4604      	mov	r4, r0
 800b82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b830:	4a44      	ldr	r2, [pc, #272]	; (800b944 <servoMixer+0x484>)
 800b832:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b836:	4618      	mov	r0, r3
 800b838:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b83c:	4942      	ldr	r1, [pc, #264]	; (800b948 <servoMixer+0x488>)
 800b83e:	4613      	mov	r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	1a9b      	subs	r3, r3, r2
 800b844:	440b      	add	r3, r1
 800b846:	3302      	adds	r3, #2
 800b848:	f993 3000 	ldrsb.w	r3, [r3]
 800b84c:	fb00 f303 	mul.w	r3, r0, r3
 800b850:	4a3e      	ldr	r2, [pc, #248]	; (800b94c <servoMixer+0x48c>)
 800b852:	fb82 1203 	smull	r1, r2, r2, r3
 800b856:	1152      	asrs	r2, r2, #5
 800b858:	17db      	asrs	r3, r3, #31
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b860:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b864:	4618      	mov	r0, r3
 800b866:	f7f8 f951 	bl	8003b0c <constrain>
 800b86a:	4603      	mov	r3, r0
 800b86c:	fb03 f104 	mul.w	r1, r3, r4
 800b870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b874:	4a36      	ldr	r2, [pc, #216]	; (800b950 <servoMixer+0x490>)
 800b876:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	b28b      	uxth	r3, r1
 800b87e:	4413      	add	r3, r2
 800b880:	b29a      	uxth	r2, r3
 800b882:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b886:	b211      	sxth	r1, r2
 800b888:	4a31      	ldr	r2, [pc, #196]	; (800b950 <servoMixer+0x490>)
 800b88a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b88e:	e005      	b.n	800b89c <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b894:	4a2b      	ldr	r2, [pc, #172]	; (800b944 <servoMixer+0x484>)
 800b896:	2100      	movs	r1, #0
 800b898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8a6:	4b2b      	ldr	r3, [pc, #172]	; (800b954 <servoMixer+0x494>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	f4ff ae99 	bcc.w	800b5e6 <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8ba:	e039      	b.n	800b930 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b8bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8c0:	4925      	ldr	r1, [pc, #148]	; (800b958 <servoMixer+0x498>)
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	440b      	add	r3, r1
 800b8cc:	33be      	adds	r3, #190	; 0xbe
 800b8ce:	f993 3000 	ldrsb.w	r3, [r3]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d8:	4a1d      	ldr	r2, [pc, #116]	; (800b950 <servoMixer+0x490>)
 800b8da:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b8de:	fb01 f303 	mul.w	r3, r1, r3
 800b8e2:	4a1a      	ldr	r2, [pc, #104]	; (800b94c <servoMixer+0x48c>)
 800b8e4:	fb82 1203 	smull	r1, r2, r2, r3
 800b8e8:	1152      	asrs	r2, r2, #5
 800b8ea:	17db      	asrs	r3, r3, #31
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f2:	b211      	sxth	r1, r2
 800b8f4:	4a16      	ldr	r2, [pc, #88]	; (800b950 <servoMixer+0x490>)
 800b8f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b8fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7ff f9d0 	bl	800aca4 <servoMiddle>
 800b904:	4603      	mov	r3, r0
 800b906:	4619      	mov	r1, r3
 800b908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b90c:	4a10      	ldr	r2, [pc, #64]	; (800b950 <servoMixer+0x490>)
 800b90e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b912:	b29a      	uxth	r2, r3
 800b914:	b28b      	uxth	r3, r1
 800b916:	4413      	add	r3, r2
 800b918:	b29a      	uxth	r2, r3
 800b91a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b91e:	b211      	sxth	r1, r2
 800b920:	4a0b      	ldr	r2, [pc, #44]	; (800b950 <servoMixer+0x490>)
 800b922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b92a:	3301      	adds	r3, #1
 800b92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b934:	2b07      	cmp	r3, #7
 800b936:	d9c1      	bls.n	800b8bc <servoMixer+0x3fc>
    }
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	372c      	adds	r7, #44	; 0x2c
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd90      	pop	{r4, r7, pc}
 800b942:	bf00      	nop
 800b944:	20001700 	.word	0x20001700
 800b948:	20001690 	.word	0x20001690
 800b94c:	51eb851f 	.word	0x51eb851f
 800b950:	20000040 	.word	0x20000040
 800b954:	2000159d 	.word	0x2000159d
 800b958:	20000e64 	.word	0x20000e64

0800b95c <mixTable>:

void mixTable(void)
{
 800b95c:	b590      	push	{r4, r7, lr}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b962:	4b7e      	ldr	r3, [pc, #504]	; (800bb5c <mixTable+0x200>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d91d      	bls.n	800b9a6 <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b96a:	4b7d      	ldr	r3, [pc, #500]	; (800bb60 <mixTable+0x204>)
 800b96c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b970:	4618      	mov	r0, r3
 800b972:	4b7c      	ldr	r3, [pc, #496]	; (800bb64 <mixTable+0x208>)
 800b974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bfb8      	it	lt
 800b97c:	425b      	neglt	r3, r3
 800b97e:	b29b      	uxth	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b986:	1a9b      	subs	r3, r3, r2
 800b988:	4a76      	ldr	r2, [pc, #472]	; (800bb64 <mixTable+0x208>)
 800b98a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b98e:	2a00      	cmp	r2, #0
 800b990:	bfb8      	it	lt
 800b992:	4252      	neglt	r2, r2
 800b994:	b292      	uxth	r2, r2
 800b996:	3264      	adds	r2, #100	; 0x64
 800b998:	4619      	mov	r1, r3
 800b99a:	f7f8 f8b7 	bl	8003b0c <constrain>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	b21a      	sxth	r2, r3
 800b9a2:	4b6f      	ldr	r3, [pc, #444]	; (800bb60 <mixTable+0x204>)
 800b9a4:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b9a6:	4b6d      	ldr	r3, [pc, #436]	; (800bb5c <mixTable+0x200>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	f240 809a 	bls.w	800bae4 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60bb      	str	r3, [r7, #8]
 800b9b4:	e08f      	b.n	800bad6 <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b9b6:	4b6b      	ldr	r3, [pc, #428]	; (800bb64 <mixTable+0x208>)
 800b9b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9c4:	4a68      	ldr	r2, [pc, #416]	; (800bb68 <mixTable+0x20c>)
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	4413      	add	r3, r2
 800b9cc:	edd3 7a00 	vldr	s15, [r3]
 800b9d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9d4:	4b62      	ldr	r3, [pc, #392]	; (800bb60 <mixTable+0x204>)
 800b9d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9e2:	4a61      	ldr	r2, [pc, #388]	; (800bb68 <mixTable+0x20c>)
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	011b      	lsls	r3, r3, #4
 800b9e8:	4413      	add	r3, r2
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	edd3 7a00 	vldr	s15, [r3]
 800b9f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9f8:	4b59      	ldr	r3, [pc, #356]	; (800bb60 <mixTable+0x204>)
 800b9fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba06:	4a58      	ldr	r2, [pc, #352]	; (800bb68 <mixTable+0x20c>)
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	edd3 7a00 	vldr	s15, [r3]
 800ba14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba1c:	4b53      	ldr	r3, [pc, #332]	; (800bb6c <mixTable+0x210>)
 800ba1e:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800ba22:	425b      	negs	r3, r3
 800ba24:	4a4e      	ldr	r2, [pc, #312]	; (800bb60 <mixTable+0x204>)
 800ba26:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ba2a:	fb02 f303 	mul.w	r3, r2, r3
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba36:	4a4c      	ldr	r2, [pc, #304]	; (800bb68 <mixTable+0x20c>)
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	4413      	add	r3, r2
 800ba3e:	330c      	adds	r3, #12
 800ba40:	edd3 7a00 	vldr	s15, [r3]
 800ba44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba50:	ee17 3a90 	vmov	r3, s15
 800ba54:	b219      	sxth	r1, r3
 800ba56:	4a46      	ldr	r2, [pc, #280]	; (800bb70 <mixTable+0x214>)
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800ba5e:	4b45      	ldr	r3, [pc, #276]	; (800bb74 <mixTable+0x218>)
 800ba60:	7c1b      	ldrb	r3, [r3, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d034      	beq.n	800bad0 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800ba66:	4b41      	ldr	r3, [pc, #260]	; (800bb6c <mixTable+0x210>)
 800ba68:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d028      	beq.n	800bac2 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800ba70:	4b40      	ldr	r3, [pc, #256]	; (800bb74 <mixTable+0x218>)
 800ba72:	7a9b      	ldrb	r3, [r3, #10]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d02b      	beq.n	800bad0 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800ba78:	4b3a      	ldr	r3, [pc, #232]	; (800bb64 <mixTable+0x208>)
 800ba7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ba7e:	ee07 3a90 	vmov	s15, r3
 800ba82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba86:	4b37      	ldr	r3, [pc, #220]	; (800bb64 <mixTable+0x208>)
 800ba88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	ee07 3a90 	vmov	s15, r3
 800ba9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800baa2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800baa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800baae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bab2:	ee17 3a90 	vmov	r3, s15
 800bab6:	b219      	sxth	r1, r3
 800bab8:	4a2d      	ldr	r2, [pc, #180]	; (800bb70 <mixTable+0x214>)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bac0:	e006      	b.n	800bad0 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800bac2:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <mixTable+0x208>)
 800bac4:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800bac8:	4a29      	ldr	r2, [pc, #164]	; (800bb70 <mixTable+0x214>)
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	3301      	adds	r3, #1
 800bad4:	60bb      	str	r3, [r7, #8]
 800bad6:	4b21      	ldr	r3, [pc, #132]	; (800bb5c <mixTable+0x200>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4293      	cmp	r3, r2
 800bae0:	f4ff af69 	bcc.w	800b9b6 <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <mixTable+0x21c>)
 800bae6:	795b      	ldrb	r3, [r3, #5]
 800bae8:	3b01      	subs	r3, #1
 800baea:	2b17      	cmp	r3, #23
 800baec:	d87b      	bhi.n	800bbe6 <mixTable+0x28a>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <mixTable+0x198>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb55 	.word	0x0800bb55
 800baf8:	0800bbe7 	.word	0x0800bbe7
 800bafc:	0800bbe7 	.word	0x0800bbe7
 800bb00:	0800bb55 	.word	0x0800bb55
 800bb04:	0800bb7d 	.word	0x0800bb7d
 800bb08:	0800bbe7 	.word	0x0800bbe7
 800bb0c:	0800bbe7 	.word	0x0800bbe7
 800bb10:	0800bb55 	.word	0x0800bb55
 800bb14:	0800bbe7 	.word	0x0800bbe7
 800bb18:	0800bbe7 	.word	0x0800bbe7
 800bb1c:	0800bbe7 	.word	0x0800bbe7
 800bb20:	0800bbe7 	.word	0x0800bbe7
 800bb24:	0800bbe7 	.word	0x0800bbe7
 800bb28:	0800bb55 	.word	0x0800bb55
 800bb2c:	0800bbe7 	.word	0x0800bbe7
 800bb30:	0800bbe7 	.word	0x0800bbe7
 800bb34:	0800bbe7 	.word	0x0800bbe7
 800bb38:	0800bbe7 	.word	0x0800bbe7
 800bb3c:	0800bbe7 	.word	0x0800bbe7
 800bb40:	0800bb55 	.word	0x0800bb55
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bbe7 	.word	0x0800bbe7
 800bb4c:	0800bbe7 	.word	0x0800bbe7
 800bb50:	0800bb55 	.word	0x0800bb55
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800bb54:	f7ff fcb4 	bl	800b4c0 <servoMixer>
            break;
 800bb58:	e045      	b.n	800bbe6 <mixTable+0x28a>
 800bb5a:	bf00      	nop
 800bb5c:	2000159c 	.word	0x2000159c
 800bb60:	200017f4 	.word	0x200017f4
 800bb64:	20001794 	.word	0x20001794
 800bb68:	200015d0 	.word	0x200015d0
 800bb6c:	20000e64 	.word	0x20000e64
 800bb70:	200015a0 	.word	0x200015a0
 800bb74:	20001738 	.word	0x20001738
 800bb78:	200008f8 	.word	0x200008f8
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800bb7c:	4ba7      	ldr	r3, [pc, #668]	; (800be1c <mixTable+0x4c0>)
 800bb7e:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb82:	461a      	mov	r2, r3
 800bb84:	4ba6      	ldr	r3, [pc, #664]	; (800be20 <mixTable+0x4c4>)
 800bb86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb8a:	fb02 f303 	mul.w	r3, r2, r3
 800bb8e:	4aa5      	ldr	r2, [pc, #660]	; (800be24 <mixTable+0x4c8>)
 800bb90:	fb82 1203 	smull	r1, r2, r2, r3
 800bb94:	1112      	asrs	r2, r2, #4
 800bb96:	17db      	asrs	r3, r3, #31
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	b29c      	uxth	r4, r3
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f7ff f881 	bl	800aca4 <servoMiddle>
 800bba2:	4603      	mov	r3, r0
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4423      	add	r3, r4
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	b21a      	sxth	r2, r3
 800bbac:	4b9e      	ldr	r3, [pc, #632]	; (800be28 <mixTable+0x4cc>)
 800bbae:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800bbb0:	4b9a      	ldr	r3, [pc, #616]	; (800be1c <mixTable+0x4c0>)
 800bbb2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	4b99      	ldr	r3, [pc, #612]	; (800be20 <mixTable+0x4c4>)
 800bbba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbbe:	fb02 f303 	mul.w	r3, r2, r3
 800bbc2:	4a98      	ldr	r2, [pc, #608]	; (800be24 <mixTable+0x4c8>)
 800bbc4:	fb82 1203 	smull	r1, r2, r2, r3
 800bbc8:	1112      	asrs	r2, r2, #4
 800bbca:	17db      	asrs	r3, r3, #31
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	b29c      	uxth	r4, r3
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	f7ff f867 	bl	800aca4 <servoMiddle>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4423      	add	r3, r4
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	b21a      	sxth	r2, r3
 800bbe0:	4b91      	ldr	r3, [pc, #580]	; (800be28 <mixTable+0x4cc>)
 800bbe2:	805a      	strh	r2, [r3, #2]
            break;
 800bbe4:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800bbe6:	2020      	movs	r0, #32
 800bbe8:	f7fb f8f2 	bl	8006dd0 <feature>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 80a3 	beq.w	800bd3a <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f7ff f855 	bl	800aca4 <servoMiddle>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	4b8a      	ldr	r3, [pc, #552]	; (800be28 <mixTable+0x4cc>)
 800bc00:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bc02:	2001      	movs	r0, #1
 800bc04:	f7ff f84e 	bl	800aca4 <servoMiddle>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	4b86      	ldr	r3, [pc, #536]	; (800be28 <mixTable+0x4cc>)
 800bc0e:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bc10:	4b86      	ldr	r3, [pc, #536]	; (800be2c <mixTable+0x4d0>)
 800bc12:	7a1b      	ldrb	r3, [r3, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8090 	beq.w	800bd3a <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800bc1a:	4b80      	ldr	r3, [pc, #512]	; (800be1c <mixTable+0x4c0>)
 800bc1c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bc20:	f003 0302 	and.w	r3, r3, #2
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d056      	beq.n	800bcd6 <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc28:	4b7f      	ldr	r3, [pc, #508]	; (800be28 <mixTable+0x4cc>)
 800bc2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	4b7a      	ldr	r3, [pc, #488]	; (800be1c <mixTable+0x4c0>)
 800bc32:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc36:	425b      	negs	r3, r3
 800bc38:	4979      	ldr	r1, [pc, #484]	; (800be20 <mixTable+0x4c4>)
 800bc3a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc3e:	fb01 f303 	mul.w	r3, r1, r3
 800bc42:	4978      	ldr	r1, [pc, #480]	; (800be24 <mixTable+0x4c8>)
 800bc44:	fb81 0103 	smull	r0, r1, r1, r3
 800bc48:	1109      	asrs	r1, r1, #4
 800bc4a:	17db      	asrs	r3, r3, #31
 800bc4c:	1acb      	subs	r3, r1, r3
 800bc4e:	b299      	uxth	r1, r3
 800bc50:	4b72      	ldr	r3, [pc, #456]	; (800be1c <mixTable+0x4c0>)
 800bc52:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bc56:	4618      	mov	r0, r3
 800bc58:	4b71      	ldr	r3, [pc, #452]	; (800be20 <mixTable+0x4c4>)
 800bc5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc5e:	fb00 f303 	mul.w	r3, r0, r3
 800bc62:	4870      	ldr	r0, [pc, #448]	; (800be24 <mixTable+0x4c8>)
 800bc64:	fb80 4003 	smull	r4, r0, r0, r3
 800bc68:	1100      	asrs	r0, r0, #4
 800bc6a:	17db      	asrs	r3, r3, #31
 800bc6c:	1a1b      	subs	r3, r3, r0
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	440b      	add	r3, r1
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	b21a      	sxth	r2, r3
 800bc7a:	4b6b      	ldr	r3, [pc, #428]	; (800be28 <mixTable+0x4cc>)
 800bc7c:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bc7e:	4b6a      	ldr	r3, [pc, #424]	; (800be28 <mixTable+0x4cc>)
 800bc80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	4b65      	ldr	r3, [pc, #404]	; (800be1c <mixTable+0x4c0>)
 800bc88:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bc8c:	425b      	negs	r3, r3
 800bc8e:	4964      	ldr	r1, [pc, #400]	; (800be20 <mixTable+0x4c4>)
 800bc90:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bc94:	fb01 f303 	mul.w	r3, r1, r3
 800bc98:	4962      	ldr	r1, [pc, #392]	; (800be24 <mixTable+0x4c8>)
 800bc9a:	fb81 0103 	smull	r0, r1, r1, r3
 800bc9e:	1109      	asrs	r1, r1, #4
 800bca0:	17db      	asrs	r3, r3, #31
 800bca2:	1acb      	subs	r3, r1, r3
 800bca4:	b299      	uxth	r1, r3
 800bca6:	4b5d      	ldr	r3, [pc, #372]	; (800be1c <mixTable+0x4c0>)
 800bca8:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bcac:	4618      	mov	r0, r3
 800bcae:	4b5c      	ldr	r3, [pc, #368]	; (800be20 <mixTable+0x4c4>)
 800bcb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcb4:	fb00 f303 	mul.w	r3, r0, r3
 800bcb8:	485a      	ldr	r0, [pc, #360]	; (800be24 <mixTable+0x4c8>)
 800bcba:	fb80 4003 	smull	r4, r0, r0, r3
 800bcbe:	1100      	asrs	r0, r0, #4
 800bcc0:	17db      	asrs	r3, r3, #31
 800bcc2:	1ac3      	subs	r3, r0, r3
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	440b      	add	r3, r1
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	4413      	add	r3, r2
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	b21a      	sxth	r2, r3
 800bcd0:	4b55      	ldr	r3, [pc, #340]	; (800be28 <mixTable+0x4cc>)
 800bcd2:	805a      	strh	r2, [r3, #2]
 800bcd4:	e031      	b.n	800bd3a <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bcd6:	4b54      	ldr	r3, [pc, #336]	; (800be28 <mixTable+0x4cc>)
 800bcd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	4b4f      	ldr	r3, [pc, #316]	; (800be1c <mixTable+0x4c0>)
 800bce0:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bce4:	4619      	mov	r1, r3
 800bce6:	4b4e      	ldr	r3, [pc, #312]	; (800be20 <mixTable+0x4c4>)
 800bce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcec:	fb01 f303 	mul.w	r3, r1, r3
 800bcf0:	494c      	ldr	r1, [pc, #304]	; (800be24 <mixTable+0x4c8>)
 800bcf2:	fb81 0103 	smull	r0, r1, r1, r3
 800bcf6:	1109      	asrs	r1, r1, #4
 800bcf8:	17db      	asrs	r3, r3, #31
 800bcfa:	1acb      	subs	r3, r1, r3
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	4413      	add	r3, r2
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	b21a      	sxth	r2, r3
 800bd04:	4b48      	ldr	r3, [pc, #288]	; (800be28 <mixTable+0x4cc>)
 800bd06:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bd08:	4b47      	ldr	r3, [pc, #284]	; (800be28 <mixTable+0x4cc>)
 800bd0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	4b42      	ldr	r3, [pc, #264]	; (800be1c <mixTable+0x4c0>)
 800bd12:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bd16:	4619      	mov	r1, r3
 800bd18:	4b41      	ldr	r3, [pc, #260]	; (800be20 <mixTable+0x4c4>)
 800bd1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd1e:	fb01 f303 	mul.w	r3, r1, r3
 800bd22:	4940      	ldr	r1, [pc, #256]	; (800be24 <mixTable+0x4c8>)
 800bd24:	fb81 0103 	smull	r0, r1, r1, r3
 800bd28:	1109      	asrs	r1, r1, #4
 800bd2a:	17db      	asrs	r3, r3, #31
 800bd2c:	1acb      	subs	r3, r1, r3
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	4413      	add	r3, r2
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	b21a      	sxth	r2, r3
 800bd36:	4b3c      	ldr	r3, [pc, #240]	; (800be28 <mixTable+0x4cc>)
 800bd38:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60bb      	str	r3, [r7, #8]
 800bd3e:	e026      	b.n	800bd8e <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bd40:	4a39      	ldr	r2, [pc, #228]	; (800be28 <mixTable+0x4cc>)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	4934      	ldr	r1, [pc, #208]	; (800be1c <mixTable+0x4c0>)
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	440b      	add	r3, r1
 800bd58:	33b8      	adds	r3, #184	; 0xb8
 800bd5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd5e:	461c      	mov	r4, r3
 800bd60:	492e      	ldr	r1, [pc, #184]	; (800be1c <mixTable+0x4c0>)
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	440b      	add	r3, r1
 800bd6e:	33ba      	adds	r3, #186	; 0xba
 800bd70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd74:	461a      	mov	r2, r3
 800bd76:	4621      	mov	r1, r4
 800bd78:	f7f7 fec8 	bl	8003b0c <constrain>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	b219      	sxth	r1, r3
 800bd80:	4a29      	ldr	r2, [pc, #164]	; (800be28 <mixTable+0x4cc>)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	60bb      	str	r3, [r7, #8]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	2b07      	cmp	r3, #7
 800bd92:	d9d5      	bls.n	800bd40 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bd94:	4b21      	ldr	r3, [pc, #132]	; (800be1c <mixTable+0x4c0>)
 800bd96:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd9a:	f003 0304 	and.w	r3, r3, #4
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d01c      	beq.n	800bddc <mixTable+0x480>
        int offset = core.numServos - 4;
 800bda2:	4b23      	ldr	r3, [pc, #140]	; (800be30 <mixTable+0x4d4>)
 800bda4:	7d9b      	ldrb	r3, [r3, #22]
 800bda6:	3b04      	subs	r3, #4
 800bda8:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60bb      	str	r3, [r7, #8]
 800bdae:	e012      	b.n	800bdd6 <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	4413      	add	r3, r2
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	491c      	ldr	r1, [pc, #112]	; (800be34 <mixTable+0x4d8>)
 800bdc2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7f5 ff1a 	bl	8001c04 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	60bb      	str	r3, [r7, #8]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d9e9      	bls.n	800bdb0 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bddc:	4b16      	ldr	r3, [pc, #88]	; (800be38 <mixTable+0x4dc>)
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bde2:	2301      	movs	r3, #1
 800bde4:	60bb      	str	r3, [r7, #8]
 800bde6:	e00f      	b.n	800be08 <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bde8:	4a13      	ldr	r2, [pc, #76]	; (800be38 <mixTable+0x4dc>)
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdf0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	da04      	bge.n	800be02 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bdf8:	4a0f      	ldr	r2, [pc, #60]	; (800be38 <mixTable+0x4dc>)
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be00:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	3301      	adds	r3, #1
 800be06:	60bb      	str	r3, [r7, #8]
 800be08:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <mixTable+0x4e0>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	461a      	mov	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4293      	cmp	r3, r2
 800be12:	d3e9      	bcc.n	800bde8 <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800be14:	2300      	movs	r3, #0
 800be16:	60bb      	str	r3, [r7, #8]
 800be18:	e0e8      	b.n	800bfec <mixTable+0x690>
 800be1a:	bf00      	nop
 800be1c:	20000e64 	.word	0x20000e64
 800be20:	200014e0 	.word	0x200014e0
 800be24:	51eb851f 	.word	0x51eb851f
 800be28:	20000040 	.word	0x20000040
 800be2c:	200017d8 	.word	0x200017d8
 800be30:	20000840 	.word	0x20000840
 800be34:	20001770 	.word	0x20001770
 800be38:	200015a0 	.word	0x200015a0
 800be3c:	2000159c 	.word	0x2000159c
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800be40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be44:	4a6f      	ldr	r2, [pc, #444]	; (800c004 <mixTable+0x6a8>)
 800be46:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800be4a:	4293      	cmp	r3, r2
 800be4c:	dd15      	ble.n	800be7a <mixTable+0x51e>
 800be4e:	4b6e      	ldr	r3, [pc, #440]	; (800c008 <mixTable+0x6ac>)
 800be50:	7c1b      	ldrb	r3, [r3, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d111      	bne.n	800be7a <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800be56:	4a6d      	ldr	r2, [pc, #436]	; (800c00c <mixTable+0x6b0>)
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be5e:	b29a      	uxth	r2, r3
 800be60:	4b68      	ldr	r3, [pc, #416]	; (800c004 <mixTable+0x6a8>)
 800be62:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800be66:	89fb      	ldrh	r3, [r7, #14]
 800be68:	1acb      	subs	r3, r1, r3
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	4413      	add	r3, r2
 800be6e:	b29b      	uxth	r3, r3
 800be70:	b219      	sxth	r1, r3
 800be72:	4a66      	ldr	r2, [pc, #408]	; (800c00c <mixTable+0x6b0>)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800be7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800be7e:	f7fa ffa7 	bl	8006dd0 <feature>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d060      	beq.n	800bf4a <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800be88:	4b61      	ldr	r3, [pc, #388]	; (800c010 <mixTable+0x6b4>)
 800be8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be8e:	461a      	mov	r2, r3
 800be90:	4b5c      	ldr	r3, [pc, #368]	; (800c004 <mixTable+0x6a8>)
 800be92:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800be96:	429a      	cmp	r2, r3
 800be98:	dd2b      	ble.n	800bef2 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800be9a:	4a5c      	ldr	r2, [pc, #368]	; (800c00c <mixTable+0x6b0>)
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bea2:	4618      	mov	r0, r3
 800bea4:	4b57      	ldr	r3, [pc, #348]	; (800c004 <mixTable+0x6a8>)
 800bea6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800beaa:	4619      	mov	r1, r3
 800beac:	4b55      	ldr	r3, [pc, #340]	; (800c004 <mixTable+0x6a8>)
 800beae:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800beb2:	461a      	mov	r2, r3
 800beb4:	f7f7 fe2a 	bl	8003b0c <constrain>
 800beb8:	4603      	mov	r3, r0
 800beba:	b219      	sxth	r1, r3
 800bebc:	4a53      	ldr	r2, [pc, #332]	; (800c00c <mixTable+0x6b0>)
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bec4:	4b4f      	ldr	r3, [pc, #316]	; (800c004 <mixTable+0x6a8>)
 800bec6:	795b      	ldrb	r3, [r3, #5]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d17d      	bne.n	800bfc8 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800becc:	4b51      	ldr	r3, [pc, #324]	; (800c014 <mixTable+0x6b8>)
 800bece:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bed2:	4618      	mov	r0, r3
 800bed4:	4b50      	ldr	r3, [pc, #320]	; (800c018 <mixTable+0x6bc>)
 800bed6:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800beda:	4619      	mov	r1, r3
 800bedc:	4b4e      	ldr	r3, [pc, #312]	; (800c018 <mixTable+0x6bc>)
 800bede:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bee2:	461a      	mov	r2, r3
 800bee4:	f7f7 fe12 	bl	8003b0c <constrain>
 800bee8:	4603      	mov	r3, r0
 800beea:	b21a      	sxth	r2, r3
 800beec:	4b49      	ldr	r3, [pc, #292]	; (800c014 <mixTable+0x6b8>)
 800beee:	815a      	strh	r2, [r3, #10]
 800bef0:	e06a      	b.n	800bfc8 <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800bef2:	4a46      	ldr	r2, [pc, #280]	; (800c00c <mixTable+0x6b0>)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800befa:	4618      	mov	r0, r3
 800befc:	4b41      	ldr	r3, [pc, #260]	; (800c004 <mixTable+0x6a8>)
 800befe:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf02:	4619      	mov	r1, r3
 800bf04:	4b3f      	ldr	r3, [pc, #252]	; (800c004 <mixTable+0x6a8>)
 800bf06:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f7f7 fdfe 	bl	8003b0c <constrain>
 800bf10:	4603      	mov	r3, r0
 800bf12:	b219      	sxth	r1, r3
 800bf14:	4a3d      	ldr	r2, [pc, #244]	; (800c00c <mixTable+0x6b0>)
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bf1c:	4b39      	ldr	r3, [pc, #228]	; (800c004 <mixTable+0x6a8>)
 800bf1e:	795b      	ldrb	r3, [r3, #5]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d151      	bne.n	800bfc8 <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bf24:	4b3b      	ldr	r3, [pc, #236]	; (800c014 <mixTable+0x6b8>)
 800bf26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	4b3a      	ldr	r3, [pc, #232]	; (800c018 <mixTable+0x6bc>)
 800bf2e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bf32:	4619      	mov	r1, r3
 800bf34:	4b38      	ldr	r3, [pc, #224]	; (800c018 <mixTable+0x6bc>)
 800bf36:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7f7 fde6 	bl	8003b0c <constrain>
 800bf40:	4603      	mov	r3, r0
 800bf42:	b21a      	sxth	r2, r3
 800bf44:	4b33      	ldr	r3, [pc, #204]	; (800c014 <mixTable+0x6b8>)
 800bf46:	815a      	strh	r2, [r3, #10]
 800bf48:	e03e      	b.n	800bfc8 <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800bf4a:	4a30      	ldr	r2, [pc, #192]	; (800c00c <mixTable+0x6b0>)
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bf52:	4618      	mov	r0, r3
 800bf54:	4b2b      	ldr	r3, [pc, #172]	; (800c004 <mixTable+0x6a8>)
 800bf56:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4b29      	ldr	r3, [pc, #164]	; (800c004 <mixTable+0x6a8>)
 800bf5e:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bf62:	461a      	mov	r2, r3
 800bf64:	f7f7 fdd2 	bl	8003b0c <constrain>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	b219      	sxth	r1, r3
 800bf6c:	4a27      	ldr	r2, [pc, #156]	; (800c00c <mixTable+0x6b0>)
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800bf74:	4b26      	ldr	r3, [pc, #152]	; (800c010 <mixTable+0x6b4>)
 800bf76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	4b21      	ldr	r3, [pc, #132]	; (800c004 <mixTable+0x6a8>)
 800bf7e:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800bf82:	429a      	cmp	r2, r3
 800bf84:	da1d      	bge.n	800bfc2 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800bf86:	2010      	movs	r0, #16
 800bf88:	f7fa ff22 	bl	8006dd0 <feature>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f083 0301 	eor.w	r3, r3, #1
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d008      	beq.n	800bfaa <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800bf98:	4b1a      	ldr	r3, [pc, #104]	; (800c004 <mixTable+0x6a8>)
 800bf9a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800bf9e:	b219      	sxth	r1, r3
 800bfa0:	4a1a      	ldr	r2, [pc, #104]	; (800c00c <mixTable+0x6b0>)
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bfa8:	e00e      	b.n	800bfc8 <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800bfaa:	4b16      	ldr	r3, [pc, #88]	; (800c004 <mixTable+0x6a8>)
 800bfac:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bfb0:	b219      	sxth	r1, r3
 800bfb2:	4a16      	ldr	r2, [pc, #88]	; (800c00c <mixTable+0x6b0>)
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800bfba:	4b13      	ldr	r3, [pc, #76]	; (800c008 <mixTable+0x6ac>)
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	745a      	strb	r2, [r3, #17]
 800bfc0:	e002      	b.n	800bfc8 <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800bfc2:	4b11      	ldr	r3, [pc, #68]	; (800c008 <mixTable+0x6ac>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800bfc8:	4b0f      	ldr	r3, [pc, #60]	; (800c008 <mixTable+0x6ac>)
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bfd0:	4a12      	ldr	r2, [pc, #72]	; (800c01c <mixTable+0x6c0>)
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800bfd8:	4a0c      	ldr	r2, [pc, #48]	; (800c00c <mixTable+0x6b0>)
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800bfe0:	4b09      	ldr	r3, [pc, #36]	; (800c008 <mixTable+0x6ac>)
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	60bb      	str	r3, [r7, #8]
 800bfec:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <mixTable+0x6c4>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	4293      	cmp	r3, r2
 800bff6:	f4ff af23 	bcc.w	800be40 <mixTable+0x4e4>
        }
    }
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	bd90      	pop	{r4, r7, pc}
 800c004:	200008f8 	.word	0x200008f8
 800c008:	20001738 	.word	0x20001738
 800c00c:	200015a0 	.word	0x200015a0
 800c010:	20001770 	.word	0x20001770
 800c014:	20000040 	.word	0x20000040
 800c018:	20000e64 	.word	0x20000e64
 800c01c:	200015b8 	.word	0x200015b8
 800c020:	2000159c 	.word	0x2000159c

0800c024 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	71fb      	strb	r3, [r7, #7]
 800c02e:	460b      	mov	r3, r1
 800c030:	71bb      	strb	r3, [r7, #6]
 800c032:	4613      	mov	r3, r2
 800c034:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800c036:	2300      	movs	r3, #0
 800c038:	73bb      	strb	r3, [r7, #14]
 800c03a:	e020      	b.n	800c07e <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
 800c040:	e013      	b.n	800c06a <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800c042:	f7f5 fe71 	bl	8001d28 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800c046:	2101      	movs	r1, #1
 800c048:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c04c:	f7f5 feae 	bl	8001dac <actBuzzerAction>
            pif_Delay1ms(wait);
 800c050:	79bb      	ldrb	r3, [r7, #6]
 800c052:	b29b      	uxth	r3, r3
 800c054:	4618      	mov	r0, r3
 800c056:	f005 f883 	bl	8011160 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800c05a:	2100      	movs	r1, #0
 800c05c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800c060:	f7f5 fea4 	bl	8001dac <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800c064:	7bfb      	ldrb	r3, [r7, #15]
 800c066:	3301      	adds	r3, #1
 800c068:	73fb      	strb	r3, [r7, #15]
 800c06a:	7bfa      	ldrb	r2, [r7, #15]
 800c06c:	79fb      	ldrb	r3, [r7, #7]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d3e7      	bcc.n	800c042 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800c072:	203c      	movs	r0, #60	; 0x3c
 800c074:	f005 f874 	bl	8011160 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	3301      	adds	r3, #1
 800c07c:	73bb      	strb	r3, [r7, #14]
 800c07e:	7bba      	ldrb	r2, [r7, #14]
 800c080:	797b      	ldrb	r3, [r7, #5]
 800c082:	429a      	cmp	r2, r3
 800c084:	d3da      	bcc.n	800c03c <blinkLED+0x18>
    }
}
 800c086:	bf00      	nop
 800c088:	bf00      	nop
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <annexCode>:

void annexCode(void)
{
 800c090:	b590      	push	{r4, r7, lr}
 800c092:	b08b      	sub	sp, #44	; 0x2c
 800c094:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800c096:	4b98      	ldr	r3, [pc, #608]	; (800c2f8 <annexCode+0x268>)
 800c098:	7c1b      	ldrb	r3, [r3, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d12e      	bne.n	800c0fc <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c09e:	4b97      	ldr	r3, [pc, #604]	; (800c2fc <annexCode+0x26c>)
 800c0a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	4b96      	ldr	r3, [pc, #600]	; (800c300 <annexCode+0x270>)
 800c0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	da02      	bge.n	800c0b4 <annexCode+0x24>
            prop2 = 100;
 800c0ae:	2364      	movs	r3, #100	; 0x64
 800c0b0:	61bb      	str	r3, [r7, #24]
 800c0b2:	e07b      	b.n	800c1ac <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800c0b4:	4b91      	ldr	r3, [pc, #580]	; (800c2fc <annexCode+0x26c>)
 800c0b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c0be:	da16      	bge.n	800c0ee <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800c0c0:	4b8f      	ldr	r3, [pc, #572]	; (800c300 <annexCode+0x270>)
 800c0c2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4b8c      	ldr	r3, [pc, #560]	; (800c2fc <annexCode+0x26c>)
 800c0ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4b8b      	ldr	r3, [pc, #556]	; (800c300 <annexCode+0x270>)
 800c0d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d4:	1acb      	subs	r3, r1, r3
 800c0d6:	fb03 f202 	mul.w	r2, r3, r2
 800c0da:	4b89      	ldr	r3, [pc, #548]	; (800c300 <annexCode+0x270>)
 800c0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0de:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800c0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c0e6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0ea:	61bb      	str	r3, [r7, #24]
 800c0ec:	e05e      	b.n	800c1ac <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800c0ee:	4b84      	ldr	r3, [pc, #528]	; (800c300 <annexCode+0x270>)
 800c0f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0f4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800c0f8:	61bb      	str	r3, [r7, #24]
 800c0fa:	e057      	b.n	800c1ac <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800c0fc:	2380      	movs	r3, #128	; 0x80
 800c0fe:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800c100:	4b7e      	ldr	r3, [pc, #504]	; (800c2fc <annexCode+0x26c>)
 800c102:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c106:	461a      	mov	r2, r3
 800c108:	4b7d      	ldr	r3, [pc, #500]	; (800c300 <annexCode+0x270>)
 800c10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c10c:	429a      	cmp	r2, r3
 800c10e:	da02      	bge.n	800c116 <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800c110:	2380      	movs	r3, #128	; 0x80
 800c112:	61bb      	str	r3, [r7, #24]
 800c114:	e028      	b.n	800c168 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800c116:	4b7b      	ldr	r3, [pc, #492]	; (800c304 <annexCode+0x274>)
 800c118:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c11c:	461a      	mov	r2, r3
 800c11e:	4b78      	ldr	r3, [pc, #480]	; (800c300 <annexCode+0x270>)
 800c120:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c124:	429a      	cmp	r2, r3
 800c126:	dd1f      	ble.n	800c168 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c128:	4b76      	ldr	r3, [pc, #472]	; (800c304 <annexCode+0x274>)
 800c12a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c12e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c132:	da12      	bge.n	800c15a <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c134:	4b72      	ldr	r3, [pc, #456]	; (800c300 <annexCode+0x270>)
 800c136:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c13a:	461a      	mov	r2, r3
 800c13c:	4b71      	ldr	r3, [pc, #452]	; (800c304 <annexCode+0x274>)
 800c13e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c142:	4619      	mov	r1, r3
 800c144:	4b6e      	ldr	r3, [pc, #440]	; (800c300 <annexCode+0x270>)
 800c146:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c14a:	1acb      	subs	r3, r1, r3
 800c14c:	fb02 f303 	mul.w	r3, r2, r3
 800c150:	125b      	asrs	r3, r3, #9
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	e006      	b.n	800c168 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c15a:	4b69      	ldr	r3, [pc, #420]	; (800c300 <annexCode+0x270>)
 800c15c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c160:	461a      	mov	r2, r3
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c168:	4b67      	ldr	r3, [pc, #412]	; (800c308 <annexCode+0x278>)
 800c16a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c16e:	2b14      	cmp	r3, #20
 800c170:	dd12      	ble.n	800c198 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c172:	4b63      	ldr	r3, [pc, #396]	; (800c300 <annexCode+0x270>)
 800c174:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c178:	461a      	mov	r2, r3
 800c17a:	4b64      	ldr	r3, [pc, #400]	; (800c30c <annexCode+0x27c>)
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	4619      	mov	r1, r3
 800c180:	4b61      	ldr	r3, [pc, #388]	; (800c308 <annexCode+0x278>)
 800c182:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c186:	428b      	cmp	r3, r1
 800c188:	bfa8      	it	ge
 800c18a:	460b      	movge	r3, r1
 800c18c:	fb02 f303 	mul.w	r3, r2, r3
 800c190:	121b      	asrs	r3, r3, #8
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c198:	4b59      	ldr	r3, [pc, #356]	; (800c300 <annexCode+0x270>)
 800c19a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c19e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	bfb8      	it	lt
 800c1a8:	4613      	movlt	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	623b      	str	r3, [r7, #32]
 800c1b0:	e131      	b.n	800c416 <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c1b2:	4a52      	ldr	r2, [pc, #328]	; (800c2fc <annexCode+0x26c>)
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4b54      	ldr	r3, [pc, #336]	; (800c310 <annexCode+0x280>)
 800c1be:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c1c8:	dd18      	ble.n	800c1fc <annexCode+0x16c>
 800c1ca:	4a4c      	ldr	r2, [pc, #304]	; (800c2fc <annexCode+0x26c>)
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	4b4e      	ldr	r3, [pc, #312]	; (800c310 <annexCode+0x280>)
 800c1d6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c1e0:	da0c      	bge.n	800c1fc <annexCode+0x16c>
 800c1e2:	4a46      	ldr	r2, [pc, #280]	; (800c2fc <annexCode+0x26c>)
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	4b48      	ldr	r3, [pc, #288]	; (800c310 <annexCode+0x280>)
 800c1ee:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	bfb8      	it	lt
 800c1f8:	425b      	neglt	r3, r3
 800c1fa:	e001      	b.n	800c200 <annexCode+0x170>
 800c1fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c200:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c202:	6a3b      	ldr	r3, [r7, #32]
 800c204:	2b02      	cmp	r3, #2
 800c206:	d063      	beq.n	800c2d0 <annexCode+0x240>
            if (cfg.deadband) {
 800c208:	4b3d      	ldr	r3, [pc, #244]	; (800c300 <annexCode+0x270>)
 800c20a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d010      	beq.n	800c234 <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c212:	4b3b      	ldr	r3, [pc, #236]	; (800c300 <annexCode+0x270>)
 800c214:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c218:	461a      	mov	r2, r3
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	4293      	cmp	r3, r2
 800c21e:	dd07      	ble.n	800c230 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c220:	4b37      	ldr	r3, [pc, #220]	; (800c300 <annexCode+0x270>)
 800c222:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c226:	461a      	mov	r2, r3
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	1a9b      	subs	r3, r3, r2
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
 800c22e:	e001      	b.n	800c234 <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	4a37      	ldr	r2, [pc, #220]	; (800c314 <annexCode+0x284>)
 800c238:	fb82 1203 	smull	r1, r2, r2, r3
 800c23c:	1152      	asrs	r2, r2, #5
 800c23e:	17db      	asrs	r3, r3, #31
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c244:	4a34      	ldr	r2, [pc, #208]	; (800c318 <annexCode+0x288>)
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c254:	fb03 f101 	mul.w	r1, r3, r1
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	440b      	add	r3, r1
 800c25c:	6979      	ldr	r1, [r7, #20]
 800c25e:	3101      	adds	r1, #1
 800c260:	482d      	ldr	r0, [pc, #180]	; (800c318 <annexCode+0x288>)
 800c262:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c266:	460c      	mov	r4, r1
 800c268:	482b      	ldr	r0, [pc, #172]	; (800c318 <annexCode+0x288>)
 800c26a:	6979      	ldr	r1, [r7, #20]
 800c26c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c270:	1a61      	subs	r1, r4, r1
 800c272:	fb01 f303 	mul.w	r3, r1, r3
 800c276:	4927      	ldr	r1, [pc, #156]	; (800c314 <annexCode+0x284>)
 800c278:	fb81 0103 	smull	r0, r1, r1, r3
 800c27c:	1149      	asrs	r1, r1, #5
 800c27e:	17db      	asrs	r3, r3, #31
 800c280:	1acb      	subs	r3, r1, r3
 800c282:	b29b      	uxth	r3, r3
 800c284:	4413      	add	r3, r2
 800c286:	b29b      	uxth	r3, r3
 800c288:	b219      	sxth	r1, r3
 800c28a:	4a1e      	ldr	r2, [pc, #120]	; (800c304 <annexCode+0x274>)
 800c28c:	6a3b      	ldr	r3, [r7, #32]
 800c28e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c292:	4a1b      	ldr	r2, [pc, #108]	; (800c300 <annexCode+0x270>)
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	4413      	add	r3, r2
 800c298:	3323      	adds	r3, #35	; 0x23
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	461a      	mov	r2, r3
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	fb02 f303 	mul.w	r3, r2, r3
 800c2a4:	4a1d      	ldr	r2, [pc, #116]	; (800c31c <annexCode+0x28c>)
 800c2a6:	fb82 1203 	smull	r1, r2, r2, r3
 800c2aa:	1152      	asrs	r2, r2, #5
 800c2ac:	17db      	asrs	r3, r3, #31
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	3364      	adds	r3, #100	; 0x64
 800c2b2:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	fb02 f303 	mul.w	r3, r2, r3
 800c2c0:	4a14      	ldr	r2, [pc, #80]	; (800c314 <annexCode+0x284>)
 800c2c2:	fb82 1203 	smull	r1, r2, r2, r3
 800c2c6:	1152      	asrs	r2, r2, #5
 800c2c8:	17db      	asrs	r3, r3, #31
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	61fb      	str	r3, [r7, #28]
 800c2ce:	e04a      	b.n	800c366 <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <annexCode+0x270>)
 800c2d2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d024      	beq.n	800c324 <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c2da:	4b09      	ldr	r3, [pc, #36]	; (800c300 <annexCode+0x270>)
 800c2dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	dd1b      	ble.n	800c320 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c2e8:	4b05      	ldr	r3, [pc, #20]	; (800c300 <annexCode+0x270>)
 800c2ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	1a9b      	subs	r3, r3, r2
 800c2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f6:	e015      	b.n	800c324 <annexCode+0x294>
 800c2f8:	20001738 	.word	0x20001738
 800c2fc:	20001770 	.word	0x20001770
 800c300:	20000e64 	.word	0x20000e64
 800c304:	20001794 	.word	0x20001794
 800c308:	200014e0 	.word	0x200014e0
 800c30c:	20000056 	.word	0x20000056
 800c310:	200008f8 	.word	0x200008f8
 800c314:	51eb851f 	.word	0x51eb851f
 800c318:	2000179c 	.word	0x2000179c
 800c31c:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c324:	4ba0      	ldr	r3, [pc, #640]	; (800c5a8 <annexCode+0x518>)
 800c326:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c32a:	425b      	negs	r3, r3
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	b29b      	uxth	r3, r3
 800c332:	fb12 f303 	smulbb	r3, r2, r3
 800c336:	b29b      	uxth	r3, r3
 800c338:	b219      	sxth	r1, r3
 800c33a:	4a9c      	ldr	r2, [pc, #624]	; (800c5ac <annexCode+0x51c>)
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c342:	4b9b      	ldr	r3, [pc, #620]	; (800c5b0 <annexCode+0x520>)
 800c344:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c348:	461a      	mov	r2, r3
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfb8      	it	lt
 800c350:	425b      	neglt	r3, r3
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	4a97      	ldr	r2, [pc, #604]	; (800c5b4 <annexCode+0x524>)
 800c358:	fb82 1203 	smull	r1, r2, r2, r3
 800c35c:	1152      	asrs	r2, r2, #5
 800c35e:	17db      	asrs	r3, r3, #31
 800c360:	1a9b      	subs	r3, r3, r2
 800c362:	3364      	adds	r3, #100	; 0x64
 800c364:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c366:	4a92      	ldr	r2, [pc, #584]	; (800c5b0 <annexCode+0x520>)
 800c368:	6a3b      	ldr	r3, [r7, #32]
 800c36a:	4413      	add	r3, r2
 800c36c:	3301      	adds	r3, #1
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	461a      	mov	r2, r3
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	fb02 f303 	mul.w	r3, r2, r3
 800c378:	4a8f      	ldr	r2, [pc, #572]	; (800c5b8 <annexCode+0x528>)
 800c37a:	fb82 1203 	smull	r1, r2, r2, r3
 800c37e:	1152      	asrs	r2, r2, #5
 800c380:	17db      	asrs	r3, r3, #31
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	b2d9      	uxtb	r1, r3
 800c386:	4a8d      	ldr	r2, [pc, #564]	; (800c5bc <annexCode+0x52c>)
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	4413      	add	r3, r2
 800c38c:	460a      	mov	r2, r1
 800c38e:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c390:	4a87      	ldr	r2, [pc, #540]	; (800c5b0 <annexCode+0x520>)
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	4413      	add	r3, r2
 800c396:	330b      	adds	r3, #11
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	fb02 f303 	mul.w	r3, r2, r3
 800c3a2:	4a85      	ldr	r2, [pc, #532]	; (800c5b8 <annexCode+0x528>)
 800c3a4:	fb82 1203 	smull	r1, r2, r2, r3
 800c3a8:	1152      	asrs	r2, r2, #5
 800c3aa:	17db      	asrs	r3, r3, #31
 800c3ac:	1ad3      	subs	r3, r2, r3
 800c3ae:	b2d9      	uxtb	r1, r3
 800c3b0:	4a83      	ldr	r2, [pc, #524]	; (800c5c0 <annexCode+0x530>)
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c3ba:	4a7d      	ldr	r2, [pc, #500]	; (800c5b0 <annexCode+0x520>)
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	4413      	add	r3, r2
 800c3c0:	3315      	adds	r3, #21
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	fb02 f303 	mul.w	r3, r2, r3
 800c3cc:	4a7a      	ldr	r2, [pc, #488]	; (800c5b8 <annexCode+0x528>)
 800c3ce:	fb82 1203 	smull	r1, r2, r2, r3
 800c3d2:	1152      	asrs	r2, r2, #5
 800c3d4:	17db      	asrs	r3, r3, #31
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	b2d9      	uxtb	r1, r3
 800c3da:	4a7a      	ldr	r2, [pc, #488]	; (800c5c4 <annexCode+0x534>)
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	4413      	add	r3, r2
 800c3e0:	460a      	mov	r2, r1
 800c3e2:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c3e4:	4a78      	ldr	r2, [pc, #480]	; (800c5c8 <annexCode+0x538>)
 800c3e6:	6a3b      	ldr	r3, [r7, #32]
 800c3e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	4b6e      	ldr	r3, [pc, #440]	; (800c5a8 <annexCode+0x518>)
 800c3f0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	da0b      	bge.n	800c410 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c3f8:	4a6c      	ldr	r2, [pc, #432]	; (800c5ac <annexCode+0x51c>)
 800c3fa:	6a3b      	ldr	r3, [r7, #32]
 800c3fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c400:	b29b      	uxth	r3, r3
 800c402:	425b      	negs	r3, r3
 800c404:	b29b      	uxth	r3, r3
 800c406:	b219      	sxth	r1, r3
 800c408:	4a68      	ldr	r2, [pc, #416]	; (800c5ac <annexCode+0x51c>)
 800c40a:	6a3b      	ldr	r3, [r7, #32]
 800c40c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	3301      	adds	r3, #1
 800c414:	623b      	str	r3, [r7, #32]
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	f77f aeca 	ble.w	800c1b2 <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c41e:	4b6a      	ldr	r3, [pc, #424]	; (800c5c8 <annexCode+0x538>)
 800c420:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c424:	4618      	mov	r0, r3
 800c426:	4b60      	ldr	r3, [pc, #384]	; (800c5a8 <annexCode+0x518>)
 800c428:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c42c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c430:	4619      	mov	r1, r3
 800c432:	f7f7 fb6b 	bl	8003b0c <constrain>
 800c436:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c438:	4b5b      	ldr	r3, [pc, #364]	; (800c5a8 <annexCode+0x518>)
 800c43a:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c43e:	461a      	mov	r2, r3
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	461a      	mov	r2, r3
 800c446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	4a56      	ldr	r2, [pc, #344]	; (800c5a8 <annexCode+0x518>)
 800c450:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c454:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c458:	fbb3 f3f2 	udiv	r3, r3, r2
 800c45c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	4a55      	ldr	r2, [pc, #340]	; (800c5b8 <annexCode+0x528>)
 800c462:	fb82 1203 	smull	r1, r2, r2, r3
 800c466:	1152      	asrs	r2, r2, #5
 800c468:	17db      	asrs	r3, r3, #31
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c46e:	4a57      	ldr	r2, [pc, #348]	; (800c5cc <annexCode+0x53c>)
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c476:	b29a      	uxth	r2, r3
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c47e:	fb03 f101 	mul.w	r1, r3, r1
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	440b      	add	r3, r1
 800c486:	6979      	ldr	r1, [r7, #20]
 800c488:	3101      	adds	r1, #1
 800c48a:	4850      	ldr	r0, [pc, #320]	; (800c5cc <annexCode+0x53c>)
 800c48c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c490:	460c      	mov	r4, r1
 800c492:	484e      	ldr	r0, [pc, #312]	; (800c5cc <annexCode+0x53c>)
 800c494:	6979      	ldr	r1, [r7, #20]
 800c496:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c49a:	1a61      	subs	r1, r4, r1
 800c49c:	fb01 f303 	mul.w	r3, r1, r3
 800c4a0:	4945      	ldr	r1, [pc, #276]	; (800c5b8 <annexCode+0x528>)
 800c4a2:	fb81 0103 	smull	r0, r1, r1, r3
 800c4a6:	1149      	asrs	r1, r1, #5
 800c4a8:	17db      	asrs	r3, r3, #31
 800c4aa:	1acb      	subs	r3, r1, r3
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	4413      	add	r3, r2
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	b21a      	sxth	r2, r3
 800c4b4:	4b3d      	ldr	r3, [pc, #244]	; (800c5ac <annexCode+0x51c>)
 800c4b6:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c4b8:	4b45      	ldr	r3, [pc, #276]	; (800c5d0 <annexCode+0x540>)
 800c4ba:	7a5b      	ldrb	r3, [r3, #9]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d06b      	beq.n	800c598 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c4c0:	4b44      	ldr	r3, [pc, #272]	; (800c5d4 <annexCode+0x544>)
 800c4c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4b43      	ldr	r3, [pc, #268]	; (800c5d8 <annexCode+0x548>)
 800c4ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7f3 ffdb 	bl	800048c <__aeabi_i2d>
 800c4d6:	a332      	add	r3, pc, #200	; (adr r3, 800c5a0 <annexCode+0x510>)
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	f7f4 f840 	bl	8000560 <__aeabi_dmul>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	f04f 0200 	mov.w	r2, #0
 800c4ec:	4b3b      	ldr	r3, [pc, #236]	; (800c5dc <annexCode+0x54c>)
 800c4ee:	f7f4 f961 	bl	80007b4 <__aeabi_ddiv>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	f7f4 fb13 	bl	8000b24 <__aeabi_d2f>
 800c4fe:	4603      	mov	r3, r0
 800c500:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c502:	ed97 0a04 	vldr	s0, [r7, #16]
 800c506:	f017 f877 	bl	80235f8 <cosf>
 800c50a:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c50e:	ed97 0a04 	vldr	s0, [r7, #16]
 800c512:	f017 f8f5 	bl	8023700 <sinf>
 800c516:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c51a:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <annexCode+0x51c>)
 800c51c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c520:	ee07 3a90 	vmov	s15, r3
 800c524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c528:	edd7 7a03 	vldr	s15, [r7, #12]
 800c52c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c530:	4b1e      	ldr	r3, [pc, #120]	; (800c5ac <annexCode+0x51c>)
 800c532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c53e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c54a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c54e:	ee17 3a90 	vmov	r3, s15
 800c552:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c554:	4b15      	ldr	r3, [pc, #84]	; (800c5ac <annexCode+0x51c>)
 800c556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c55a:	ee07 3a90 	vmov	s15, r3
 800c55e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c562:	edd7 7a03 	vldr	s15, [r7, #12]
 800c566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c56a:	4b10      	ldr	r3, [pc, #64]	; (800c5ac <annexCode+0x51c>)
 800c56c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c570:	ee07 3a90 	vmov	s15, r3
 800c574:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c578:	edd7 7a02 	vldr	s15, [r7, #8]
 800c57c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c588:	ee17 3a90 	vmov	r3, s15
 800c58c:	b21a      	sxth	r2, r3
 800c58e:	4b07      	ldr	r3, [pc, #28]	; (800c5ac <annexCode+0x51c>)
 800c590:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c592:	4a06      	ldr	r2, [pc, #24]	; (800c5ac <annexCode+0x51c>)
 800c594:	88fb      	ldrh	r3, [r7, #6]
 800c596:	8053      	strh	r3, [r2, #2]
    }
}
 800c598:	bf00      	nop
 800c59a:	372c      	adds	r7, #44	; 0x2c
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd90      	pop	{r4, r7, pc}
 800c5a0:	54442d18 	.word	0x54442d18
 800c5a4:	400921fb 	.word	0x400921fb
 800c5a8:	200008f8 	.word	0x200008f8
 800c5ac:	20001794 	.word	0x20001794
 800c5b0:	20000e64 	.word	0x20000e64
 800c5b4:	10624dd3 	.word	0x10624dd3
 800c5b8:	51eb851f 	.word	0x51eb851f
 800c5bc:	200017cc 	.word	0x200017cc
 800c5c0:	200017d0 	.word	0x200017d0
 800c5c4:	200017d4 	.word	0x200017d4
 800c5c8:	20001770 	.word	0x20001770
 800c5cc:	200017ac 	.word	0x200017ac
 800c5d0:	20001738 	.word	0x20001738
 800c5d4:	20001a08 	.word	0x20001a08
 800c5d8:	2000175a 	.word	0x2000175a
 800c5dc:	40668000 	.word	0x40668000

0800c5e0 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c5e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c5ea:	2002      	movs	r0, #2
 800c5ec:	f7fa fbf0 	bl	8006dd0 <feature>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 80bb 	beq.w	800c76e <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c5f8:	4b91      	ldr	r3, [pc, #580]	; (800c840 <taskLedState+0x260>)
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4b91      	ldr	r3, [pc, #580]	; (800c844 <taskLedState+0x264>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4413      	add	r3, r2
 800c604:	4a8f      	ldr	r2, [pc, #572]	; (800c844 <taskLedState+0x264>)
 800c606:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c608:	4b8f      	ldr	r3, [pc, #572]	; (800c848 <taskLedState+0x268>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	3301      	adds	r3, #1
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	4b8d      	ldr	r3, [pc, #564]	; (800c848 <taskLedState+0x268>)
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	4b8c      	ldr	r3, [pc, #560]	; (800c848 <taskLedState+0x268>)
 800c616:	781a      	ldrb	r2, [r3, #0]
 800c618:	4b8c      	ldr	r3, [pc, #560]	; (800c84c <taskLedState+0x26c>)
 800c61a:	fba3 1302 	umull	r1, r3, r3, r2
 800c61e:	0899      	lsrs	r1, r3, #2
 800c620:	460b      	mov	r3, r1
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	440b      	add	r3, r1
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f040 808b 	bne.w	800c748 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c632:	4b87      	ldr	r3, [pc, #540]	; (800c850 <taskLedState+0x270>)
 800c634:	ed93 7a00 	vldr	s14, [r3]
 800c638:	4b85      	ldr	r3, [pc, #532]	; (800c850 <taskLedState+0x270>)
 800c63a:	edd3 6a00 	vldr	s13, [r3]
 800c63e:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c642:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c64a:	4b81      	ldr	r3, [pc, #516]	; (800c850 <taskLedState+0x270>)
 800c64c:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c650:	f7f4 fdbc 	bl	80011cc <actGetBatteryVoltage>
 800c654:	eeb0 7a40 	vmov.f32	s14, s0
 800c658:	4b7e      	ldr	r3, [pc, #504]	; (800c854 <taskLedState+0x274>)
 800c65a:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c65e:	ee07 3a90 	vmov	s15, r3
 800c662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c66a:	4b79      	ldr	r3, [pc, #484]	; (800c850 <taskLedState+0x270>)
 800c66c:	edd3 7a00 	vldr	s15, [r3]
 800c670:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c674:	4b76      	ldr	r3, [pc, #472]	; (800c850 <taskLedState+0x270>)
 800c676:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c67a:	4b75      	ldr	r3, [pc, #468]	; (800c850 <taskLedState+0x270>)
 800c67c:	ed93 7a00 	vldr	s14, [r3]
 800c680:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c68c:	ee17 3a90 	vmov	r3, s15
 800c690:	b29a      	uxth	r2, r3
 800c692:	4b71      	ldr	r3, [pc, #452]	; (800c858 <taskLedState+0x278>)
 800c694:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c696:	4b6f      	ldr	r3, [pc, #444]	; (800c854 <taskLedState+0x274>)
 800c698:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d053      	beq.n	800c748 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c6a0:	4b6e      	ldr	r3, [pc, #440]	; (800c85c <taskLedState+0x27c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	da00      	bge.n	800c6aa <taskLedState+0xca>
 800c6a8:	3307      	adds	r3, #7
 800c6aa:	10db      	asrs	r3, r3, #3
 800c6ac:	425b      	negs	r3, r3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	4b6a      	ldr	r3, [pc, #424]	; (800c85c <taskLedState+0x27c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	4a69      	ldr	r2, [pc, #420]	; (800c85c <taskLedState+0x27c>)
 800c6b8:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c6ba:	f7f4 fda5 	bl	8001208 <actGetBatteryCurrent>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4a64      	ldr	r2, [pc, #400]	; (800c854 <taskLedState+0x274>)
 800c6c2:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c6c6:	1a9b      	subs	r3, r3, r2
 800c6c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6cc:	fb02 f303 	mul.w	r3, r2, r3
 800c6d0:	4a60      	ldr	r2, [pc, #384]	; (800c854 <taskLedState+0x274>)
 800c6d2:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c6d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6da:	4a60      	ldr	r2, [pc, #384]	; (800c85c <taskLedState+0x27c>)
 800c6dc:	6812      	ldr	r2, [r2, #0]
 800c6de:	4413      	add	r3, r2
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4b5e      	ldr	r3, [pc, #376]	; (800c85c <taskLedState+0x27c>)
 800c6e4:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c6e6:	4b5d      	ldr	r3, [pc, #372]	; (800c85c <taskLedState+0x27c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da00      	bge.n	800c6f0 <taskLedState+0x110>
 800c6ee:	3307      	adds	r3, #7
 800c6f0:	10db      	asrs	r3, r3, #3
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4b5a      	ldr	r3, [pc, #360]	; (800c860 <taskLedState+0x280>)
 800c6f6:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c6f8:	4b59      	ldr	r3, [pc, #356]	; (800c860 <taskLedState+0x280>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a51      	ldr	r2, [pc, #324]	; (800c844 <taskLedState+0x264>)
 800c6fe:	6812      	ldr	r2, [r2, #0]
 800c700:	fb02 f303 	mul.w	r3, r2, r3
 800c704:	4a57      	ldr	r2, [pc, #348]	; (800c864 <taskLedState+0x284>)
 800c706:	fb82 1203 	smull	r1, r2, r2, r3
 800c70a:	1192      	asrs	r2, r2, #6
 800c70c:	17db      	asrs	r3, r3, #31
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	17da      	asrs	r2, r3, #31
 800c712:	461c      	mov	r4, r3
 800c714:	4615      	mov	r5, r2
 800c716:	4b54      	ldr	r3, [pc, #336]	; (800c868 <taskLedState+0x288>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	eb14 0802 	adds.w	r8, r4, r2
 800c720:	eb45 0903 	adc.w	r9, r5, r3
 800c724:	4b50      	ldr	r3, [pc, #320]	; (800c868 <taskLedState+0x288>)
 800c726:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c72a:	4b4f      	ldr	r3, [pc, #316]	; (800c868 <taskLedState+0x288>)
 800c72c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c730:	4a4e      	ldr	r2, [pc, #312]	; (800c86c <taskLedState+0x28c>)
 800c732:	f04f 0300 	mov.w	r3, #0
 800c736:	f7f4 fb53 	bl	8000de0 <__aeabi_ldivmod>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	4b4c      	ldr	r3, [pc, #304]	; (800c870 <taskLedState+0x290>)
 800c740:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c742:	4b40      	ldr	r3, [pc, #256]	; (800c844 <taskLedState+0x264>)
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c748:	4b43      	ldr	r3, [pc, #268]	; (800c858 <taskLedState+0x278>)
 800c74a:	881a      	ldrh	r2, [r3, #0]
 800c74c:	4b49      	ldr	r3, [pc, #292]	; (800c874 <taskLedState+0x294>)
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	429a      	cmp	r2, r3
 800c752:	d803      	bhi.n	800c75c <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c754:	2001      	movs	r0, #1
 800c756:	f7f7 fb67 	bl	8003e28 <buzzer>
 800c75a:	e008      	b.n	800c76e <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c75c:	4b3e      	ldr	r3, [pc, #248]	; (800c858 <taskLedState+0x278>)
 800c75e:	881a      	ldrh	r2, [r3, #0]
 800c760:	4b45      	ldr	r3, [pc, #276]	; (800c878 <taskLedState+0x298>)
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d802      	bhi.n	800c76e <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c768:	2002      	movs	r0, #2
 800c76a:	f7f7 fb5d 	bl	8003e28 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c76e:	f7f7 fc47 	bl	8004000 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c772:	f004 fbfd 	bl	8010f70 <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c776:	4b41      	ldr	r3, [pc, #260]	; (800c87c <taskLedState+0x29c>)
 800c778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <taskLedState+0x1ac>
        sensor_set.gyro.temperature(&sensor_set, &telemTemperature1);
 800c780:	4b3e      	ldr	r3, [pc, #248]	; (800c87c <taskLedState+0x29c>)
 800c782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c786:	493e      	ldr	r1, [pc, #248]	; (800c880 <taskLedState+0x2a0>)
 800c788:	483c      	ldr	r0, [pc, #240]	; (800c87c <taskLedState+0x29c>)
 800c78a:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c78c:	4b3d      	ldr	r3, [pc, #244]	; (800c884 <taskLedState+0x2a4>)
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d005      	beq.n	800c7a0 <taskLedState+0x1c0>
 800c794:	2002      	movs	r0, #2
 800c796:	f7fa fad3 	bl	8006d40 <sensors>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d103      	bne.n	800c7a8 <taskLedState+0x1c8>
 800c7a0:	4b39      	ldr	r3, [pc, #228]	; (800c888 <taskLedState+0x2a8>)
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <taskLedState+0x1ce>
        actLed0Toggle();
 800c7a8:	f7f5 fabe 	bl	8001d28 <actLed0Toggle>
 800c7ac:	e00d      	b.n	800c7ca <taskLedState+0x1ea>
    } else {
        if (f.ACC_CALIBRATED)
 800c7ae:	4b37      	ldr	r3, [pc, #220]	; (800c88c <taskLedState+0x2ac>)
 800c7b0:	789b      	ldrb	r3, [r3, #2]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <taskLedState+0x1dc>
            actLed0State(OFF);
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f7f5 faa0 	bl	8001cfc <actLed0State>
        if (f.ARMED)
 800c7bc:	4b33      	ldr	r3, [pc, #204]	; (800c88c <taskLedState+0x2ac>)
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d002      	beq.n	800c7ca <taskLedState+0x1ea>
            actLed0State(ON);
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	f7f5 fa99 	bl	8001cfc <actLed0State>
        ledringState(heading, angle, f.ARMED);
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c7ca:	4b31      	ldr	r3, [pc, #196]	; (800c890 <taskLedState+0x2b0>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d006      	beq.n	800c7e0 <taskLedState+0x200>
 800c7d2:	4b2f      	ldr	r3, [pc, #188]	; (800c890 <taskLedState+0x2b0>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	4b2d      	ldr	r3, [pc, #180]	; (800c890 <taskLedState+0x2b0>)
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	e00f      	b.n	800c800 <taskLedState+0x220>
    else {
        if (!f.SMALL_ANGLE) {
 800c7e0:	4b2a      	ldr	r3, [pc, #168]	; (800c88c <taskLedState+0x2ac>)
 800c7e2:	7b5b      	ldrb	r3, [r3, #13]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d105      	bne.n	800c7f4 <taskLedState+0x214>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c7e8:	4b28      	ldr	r3, [pc, #160]	; (800c88c <taskLedState+0x2ac>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c7ee:	f7f5 fa9b 	bl	8001d28 <actLed0Toggle>
 800c7f2:	e002      	b.n	800c7fa <taskLedState+0x21a>
        } else {
            f.ACC_CALIBRATED = 1;
 800c7f4:	4b25      	ldr	r3, [pc, #148]	; (800c88c <taskLedState+0x2ac>)
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c7fa:	4b25      	ldr	r3, [pc, #148]	; (800c890 <taskLedState+0x2b0>)
 800c7fc:	2209      	movs	r2, #9
 800c7fe:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c800:	2020      	movs	r0, #32
 800c802:	f7fa fa9d 	bl	8006d40 <sensors>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d013      	beq.n	800c834 <taskLedState+0x254>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c80c:	4b21      	ldr	r3, [pc, #132]	; (800c894 <taskLedState+0x2b4>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d006      	beq.n	800c822 <taskLedState+0x242>
 800c814:	4b1f      	ldr	r3, [pc, #124]	; (800c894 <taskLedState+0x2b4>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	3b01      	subs	r3, #1
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	4b1d      	ldr	r3, [pc, #116]	; (800c894 <taskLedState+0x2b4>)
 800c81e:	701a      	strb	r2, [r3, #0]
 800c820:	e008      	b.n	800c834 <taskLedState+0x254>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c822:	4b1d      	ldr	r3, [pc, #116]	; (800c898 <taskLedState+0x2b8>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b04      	cmp	r3, #4
 800c828:	d901      	bls.n	800c82e <taskLedState+0x24e>
 800c82a:	f7f5 faa9 	bl	8001d80 <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c82e:	4b19      	ldr	r3, [pc, #100]	; (800c894 <taskLedState+0x2b4>)
 800c830:	2202      	movs	r2, #2
 800c832:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c840:	20001758 	.word	0x20001758
 800c844:	200018fc 	.word	0x200018fc
 800c848:	20001900 	.word	0x20001900
 800c84c:	aaaaaaab 	.word	0xaaaaaaab
 800c850:	20001904 	.word	0x20001904
 800c854:	200008f8 	.word	0x200008f8
 800c858:	2000175c 	.word	0x2000175c
 800c85c:	20001908 	.word	0x20001908
 800c860:	20001760 	.word	0x20001760
 800c864:	10624dd3 	.word	0x10624dd3
 800c868:	20001910 	.word	0x20001910
 800c86c:	00057e40 	.word	0x00057e40
 800c870:	20001764 	.word	0x20001764
 800c874:	200018dc 	.word	0x200018dc
 800c878:	200018da 	.word	0x200018da
 800c87c:	2000005c 	.word	0x2000005c
 800c880:	20001768 	.word	0x20001768
 800c884:	20001a02 	.word	0x20001a02
 800c888:	20001a06 	.word	0x20001a06
 800c88c:	20001738 	.word	0x20001738
 800c890:	20001918 	.word	0x20001918
 800c894:	20001919 	.word	0x20001919
 800c898:	2000181c 	.word	0x2000181c

0800c89c <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	4a05      	ldr	r2, [pc, #20]	; (800c8c0 <pwmReadRawRC+0x24>)
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7f5 f9b5 	bl	8001c20 <actPwmRead>
 800c8b6:	4603      	mov	r3, r0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	200008f8 	.word	0x200008f8

0800c8c4 <computeRC>:

void computeRC(void)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c8ca:	2008      	movs	r0, #8
 800c8cc:	f7fa fa80 	bl	8006dd0 <feature>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d019      	beq.n	800c90a <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	607b      	str	r3, [r7, #4]
 800c8da:	e00e      	b.n	800c8fa <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c8dc:	4b41      	ldr	r3, [pc, #260]	; (800c9e4 <computeRC+0x120>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	b219      	sxth	r1, r3
 800c8ec:	4a3e      	ldr	r2, [pc, #248]	; (800c9e8 <computeRC+0x124>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	607b      	str	r3, [r7, #4]
 800c8fa:	4b3c      	ldr	r3, [pc, #240]	; (800c9ec <computeRC+0x128>)
 800c8fc:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c900:	461a      	mov	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4293      	cmp	r3, r2
 800c906:	dbe9      	blt.n	800c8dc <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c908:	e068      	b.n	800c9dc <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c90a:	2300      	movs	r3, #0
 800c90c:	607b      	str	r3, [r7, #4]
 800c90e:	e059      	b.n	800c9c4 <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c910:	4b34      	ldr	r3, [pc, #208]	; (800c9e4 <computeRC+0x120>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	b2d2      	uxtb	r2, r2
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
 800c91c:	4603      	mov	r3, r0
 800c91e:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c920:	89fb      	ldrh	r3, [r7, #14]
 800c922:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c926:	4293      	cmp	r3, r2
 800c928:	d904      	bls.n	800c934 <computeRC+0x70>
 800c92a:	89fb      	ldrh	r3, [r7, #14]
 800c92c:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c930:	4293      	cmp	r3, r2
 800c932:	d903      	bls.n	800c93c <computeRC+0x78>
                capture = mcfg.midrc;
 800c934:	4b2d      	ldr	r3, [pc, #180]	; (800c9ec <computeRC+0x128>)
 800c936:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c93a:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c93c:	4b2c      	ldr	r3, [pc, #176]	; (800c9f0 <computeRC+0x12c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	425a      	negs	r2, r3
 800c942:	f003 0303 	and.w	r3, r3, #3
 800c946:	f002 0203 	and.w	r2, r2, #3
 800c94a:	bf58      	it	pl
 800c94c:	4253      	negpl	r3, r2
 800c94e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c952:	4928      	ldr	r1, [pc, #160]	; (800c9f4 <computeRC+0x130>)
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	0092      	lsls	r2, r2, #2
 800c958:	4413      	add	r3, r2
 800c95a:	4602      	mov	r2, r0
 800c95c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c960:	4a21      	ldr	r2, [pc, #132]	; (800c9e8 <computeRC+0x124>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2100      	movs	r1, #0
 800c966:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c96a:	2300      	movs	r3, #0
 800c96c:	60bb      	str	r3, [r7, #8]
 800c96e:	e016      	b.n	800c99e <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c970:	4a1d      	ldr	r2, [pc, #116]	; (800c9e8 <computeRC+0x124>)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c978:	b29a      	uxth	r2, r3
 800c97a:	481e      	ldr	r0, [pc, #120]	; (800c9f4 <computeRC+0x130>)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	0099      	lsls	r1, r3, #2
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	440b      	add	r3, r1
 800c984:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	4413      	add	r3, r2
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	b219      	sxth	r1, r3
 800c990:	4a15      	ldr	r2, [pc, #84]	; (800c9e8 <computeRC+0x124>)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	3301      	adds	r3, #1
 800c99c:	60bb      	str	r3, [r7, #8]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b03      	cmp	r3, #3
 800c9a2:	dde5      	ble.n	800c970 <computeRC+0xac>
            rcData[chan] /= 4;
 800c9a4:	4a10      	ldr	r2, [pc, #64]	; (800c9e8 <computeRC+0x124>)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	da00      	bge.n	800c9b2 <computeRC+0xee>
 800c9b0:	3303      	adds	r3, #3
 800c9b2:	109b      	asrs	r3, r3, #2
 800c9b4:	b219      	sxth	r1, r3
 800c9b6:	4a0c      	ldr	r2, [pc, #48]	; (800c9e8 <computeRC+0x124>)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	607b      	str	r3, [r7, #4]
 800c9c4:	4b09      	ldr	r3, [pc, #36]	; (800c9ec <computeRC+0x128>)
 800c9c6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	db9e      	blt.n	800c910 <computeRC+0x4c>
        rcAverageIndex++;
 800c9d2:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <computeRC+0x12c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	4a05      	ldr	r2, [pc, #20]	; (800c9f0 <computeRC+0x12c>)
 800c9da:	6013      	str	r3, [r2, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	200017c8 	.word	0x200017c8
 800c9e8:	20001770 	.word	0x20001770
 800c9ec:	200008f8 	.word	0x200008f8
 800c9f0:	2000191c 	.word	0x2000191c
 800c9f4:	20001920 	.word	0x20001920

0800c9f8 <mwArm>:

static void mwArm(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c9fc:	4b1b      	ldr	r3, [pc, #108]	; (800ca6c <mwArm+0x74>)
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d126      	bne.n	800ca52 <mwArm+0x5a>
 800ca04:	4b1a      	ldr	r3, [pc, #104]	; (800ca70 <mwArm+0x78>)
 800ca06:	789b      	ldrb	r3, [r3, #2]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d022      	beq.n	800ca52 <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800ca0c:	4b18      	ldr	r3, [pc, #96]	; (800ca70 <mwArm+0x78>)
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d128      	bne.n	800ca66 <mwArm+0x6e>
            f.ARMED = 1;
 800ca14:	4b16      	ldr	r3, [pc, #88]	; (800ca70 <mwArm+0x78>)
 800ca16:	2201      	movs	r2, #1
 800ca18:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800ca1a:	4b16      	ldr	r3, [pc, #88]	; (800ca74 <mwArm+0x7c>)
 800ca1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca20:	4b15      	ldr	r3, [pc, #84]	; (800ca78 <mwArm+0x80>)
 800ca22:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800ca24:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ca28:	f7fa f9d2 	bl	8006dd0 <feature>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00b      	beq.n	800ca4a <mwArm+0x52>
 800ca32:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <mwArm+0x78>)
 800ca34:	7adb      	ldrb	r3, [r3, #11]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d007      	beq.n	800ca4a <mwArm+0x52>
 800ca3a:	4b10      	ldr	r3, [pc, #64]	; (800ca7c <mwArm+0x84>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d903      	bls.n	800ca4a <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800ca42:	2007      	movs	r0, #7
 800ca44:	f7f7 f9f0 	bl	8003e28 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca48:	e00d      	b.n	800ca66 <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800ca4a:	2006      	movs	r0, #6
 800ca4c:	f7f7 f9ec 	bl	8003e28 <buzzer>
        if (!f.ARMED) {         // arm now!
 800ca50:	e009      	b.n	800ca66 <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800ca52:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <mwArm+0x78>)
 800ca54:	785b      	ldrb	r3, [r3, #1]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d105      	bne.n	800ca66 <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	21ff      	movs	r1, #255	; 0xff
 800ca5e:	2002      	movs	r0, #2
 800ca60:	f7ff fae0 	bl	800c024 <blinkLED>
    }
}
 800ca64:	e7ff      	b.n	800ca66 <mwArm+0x6e>
 800ca66:	bf00      	nop
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20001a06 	.word	0x20001a06
 800ca70:	20001738 	.word	0x20001738
 800ca74:	20001a08 	.word	0x20001a08
 800ca78:	2000175a 	.word	0x2000175a
 800ca7c:	2000181c 	.word	0x2000181c

0800ca80 <mwDisarm>:

static void mwDisarm(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <mwDisarm+0x2c>)
 800ca86:	785b      	ldrb	r3, [r3, #1]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00c      	beq.n	800caa6 <mwDisarm+0x26>
        f.ARMED = 0;
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <mwDisarm+0x2c>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800ca92:	2005      	movs	r0, #5
 800ca94:	f7f7 f9c8 	bl	8003e28 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800ca98:	4b05      	ldr	r3, [pc, #20]	; (800cab0 <mwDisarm+0x30>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <mwDisarm+0x26>
            disarmTime = 0;
 800caa0:	4b03      	ldr	r3, [pc, #12]	; (800cab0 <mwDisarm+0x30>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
    }
}
 800caa6:	bf00      	nop
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	20001738 	.word	0x20001738
 800cab0:	200018e0 	.word	0x200018e0

0800cab4 <mwVario>:

static void mwVario(void)
{
 800cab4:	b480      	push	{r7}
 800cab6:	af00      	add	r7, sp, #0

}
 800cab8:	bf00      	nop
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
	...

0800cac4 <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b08e      	sub	sp, #56	; 0x38
 800cac8:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800caca:	2300      	movs	r3, #0
 800cacc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cace:	2300      	movs	r3, #0
 800cad0:	627b      	str	r3, [r7, #36]	; 0x24
 800cad2:	2300      	movs	r3, #0
 800cad4:	623b      	str	r3, [r7, #32]
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800cada:	4b91      	ldr	r3, [pc, #580]	; (800cd20 <pidMultiWii+0x25c>)
 800cadc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	bfb8      	it	lt
 800cae4:	425b      	neglt	r3, r3
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	4b8d      	ldr	r3, [pc, #564]	; (800cd20 <pidMultiWii+0x25c>)
 800caea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	bfb8      	it	lt
 800caf2:	425b      	neglt	r3, r3
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	4293      	cmp	r3, r2
 800caf8:	bf38      	it	cc
 800cafa:	4613      	movcc	r3, r2
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800cb00:	2300      	movs	r3, #0
 800cb02:	637b      	str	r3, [r7, #52]	; 0x34
 800cb04:	e189      	b.n	800ce1a <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800cb06:	4b87      	ldr	r3, [pc, #540]	; (800cd24 <pidMultiWii+0x260>)
 800cb08:	78db      	ldrb	r3, [r3, #3]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d103      	bne.n	800cb16 <pidMultiWii+0x52>
 800cb0e:	4b85      	ldr	r3, [pc, #532]	; (800cd24 <pidMultiWii+0x260>)
 800cb10:	791b      	ldrb	r3, [r3, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d060      	beq.n	800cbd8 <pidMultiWii+0x114>
 800cb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	dc5d      	bgt.n	800cbd8 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800cb1c:	4a80      	ldr	r2, [pc, #512]	; (800cd20 <pidMultiWii+0x25c>)
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	4980      	ldr	r1, [pc, #512]	; (800cd28 <pidMultiWii+0x264>)
 800cb28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb2a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cb2e:	4413      	add	r3, r2
 800cb30:	4a7e      	ldr	r2, [pc, #504]	; (800cd2c <pidMultiWii+0x268>)
 800cb32:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cb36:	4251      	negs	r1, r2
 800cb38:	4a7c      	ldr	r2, [pc, #496]	; (800cd2c <pidMultiWii+0x268>)
 800cb3a:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f6 ffe4 	bl	8003b0c <constrain>
 800cb44:	4602      	mov	r2, r0
 800cb46:	497a      	ldr	r1, [pc, #488]	; (800cd30 <pidMultiWii+0x26c>)
 800cb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb4a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cb4e:	1ad2      	subs	r2, r2, r3
 800cb50:	4978      	ldr	r1, [pc, #480]	; (800cd34 <pidMultiWii+0x270>)
 800cb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb54:	3314      	adds	r3, #20
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	440b      	add	r3, r1
 800cb5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb5e:	4413      	add	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800cb62:	4b74      	ldr	r3, [pc, #464]	; (800cd34 <pidMultiWii+0x270>)
 800cb64:	7a1b      	ldrb	r3, [r3, #8]
 800cb66:	461a      	mov	r2, r3
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	fb02 f303 	mul.w	r3, r2, r3
 800cb6e:	4a72      	ldr	r2, [pc, #456]	; (800cd38 <pidMultiWii+0x274>)
 800cb70:	fb82 1203 	smull	r1, r2, r2, r3
 800cb74:	1152      	asrs	r2, r2, #5
 800cb76:	17db      	asrs	r3, r3, #31
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800cb7c:	4b6d      	ldr	r3, [pc, #436]	; (800cd34 <pidMultiWii+0x270>)
 800cb7e:	7f1b      	ldrb	r3, [r3, #28]
 800cb80:	461a      	mov	r2, r3
 800cb82:	4613      	mov	r3, r2
 800cb84:	079b      	lsls	r3, r3, #30
 800cb86:	1a9b      	subs	r3, r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	1a99      	subs	r1, r3, r2
 800cb8c:	4b69      	ldr	r3, [pc, #420]	; (800cd34 <pidMultiWii+0x270>)
 800cb8e:	7f1b      	ldrb	r3, [r3, #28]
 800cb90:	461a      	mov	r2, r3
 800cb92:	4613      	mov	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb9c:	f7f6 ffb6 	bl	8003b0c <constrain>
 800cba0:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800cba2:	4a66      	ldr	r2, [pc, #408]	; (800cd3c <pidMultiWii+0x278>)
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	4413      	add	r3, r2
 800cbae:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbb2:	4963      	ldr	r1, [pc, #396]	; (800cd40 <pidMultiWii+0x27c>)
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7f6 ffa9 	bl	8003b0c <constrain>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	495f      	ldr	r1, [pc, #380]	; (800cd3c <pidMultiWii+0x278>)
 800cbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800cbc4:	4a5d      	ldr	r2, [pc, #372]	; (800cd3c <pidMultiWii+0x278>)
 800cbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbcc:	4a59      	ldr	r2, [pc, #356]	; (800cd34 <pidMultiWii+0x270>)
 800cbce:	7c92      	ldrb	r2, [r2, #18]
 800cbd0:	fb02 f303 	mul.w	r3, r2, r3
 800cbd4:	131b      	asrs	r3, r3, #12
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cbd8:	4b52      	ldr	r3, [pc, #328]	; (800cd24 <pidMultiWii+0x260>)
 800cbda:	78db      	ldrb	r3, [r3, #3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <pidMultiWii+0x12a>
 800cbe0:	4b50      	ldr	r3, [pc, #320]	; (800cd24 <pidMultiWii+0x260>)
 800cbe2:	791b      	ldrb	r3, [r3, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <pidMultiWii+0x12a>
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d15f      	bne.n	800ccae <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cbee:	4a4c      	ldr	r2, [pc, #304]	; (800cd20 <pidMultiWii+0x25c>)
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	011b      	lsls	r3, r3, #4
 800cc00:	4619      	mov	r1, r3
 800cc02:	4a4c      	ldr	r2, [pc, #304]	; (800cd34 <pidMultiWii+0x270>)
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	4413      	add	r3, r2
 800cc08:	3301      	adds	r3, #1
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	fb91 f3f3 	sdiv	r3, r1, r3
 800cc10:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800cc12:	4a4c      	ldr	r2, [pc, #304]	; (800cd44 <pidMultiWii+0x280>)
 800cc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	1a9b      	subs	r3, r3, r2
 800cc20:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cc22:	4a3f      	ldr	r2, [pc, #252]	; (800cd20 <pidMultiWii+0x25c>)
 800cc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc2a:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cc2c:	4a46      	ldr	r2, [pc, #280]	; (800cd48 <pidMultiWii+0x284>)
 800cc2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	4413      	add	r3, r2
 800cc38:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cc3c:	4943      	ldr	r1, [pc, #268]	; (800cd4c <pidMultiWii+0x288>)
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7f6 ff64 	bl	8003b0c <constrain>
 800cc44:	4602      	mov	r2, r0
 800cc46:	4940      	ldr	r1, [pc, #256]	; (800cd48 <pidMultiWii+0x284>)
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cc4e:	4a3d      	ldr	r2, [pc, #244]	; (800cd44 <pidMultiWii+0x280>)
 800cc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	bfb8      	it	lt
 800cc5a:	425b      	neglt	r3, r3
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc62:	d80c      	bhi.n	800cc7e <pidMultiWii+0x1ba>
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d10e      	bne.n	800cc88 <pidMultiWii+0x1c4>
 800cc6a:	4a2d      	ldr	r2, [pc, #180]	; (800cd20 <pidMultiWii+0x25c>)
 800cc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	bfb8      	it	lt
 800cc76:	425b      	neglt	r3, r3
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	2b64      	cmp	r3, #100	; 0x64
 800cc7c:	d904      	bls.n	800cc88 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cc7e:	4a32      	ldr	r2, [pc, #200]	; (800cd48 <pidMultiWii+0x284>)
 800cc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc82:	2100      	movs	r1, #0
 800cc84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cc88:	4a2f      	ldr	r2, [pc, #188]	; (800cd48 <pidMultiWii+0x284>)
 800cc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc90:	4a2f      	ldr	r2, [pc, #188]	; (800cd50 <pidMultiWii+0x28c>)
 800cc92:	fb82 1203 	smull	r1, r2, r2, r3
 800cc96:	10d2      	asrs	r2, r2, #3
 800cc98:	17db      	asrs	r3, r3, #31
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	4925      	ldr	r1, [pc, #148]	; (800cd34 <pidMultiWii+0x270>)
 800cc9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cca0:	440a      	add	r2, r1
 800cca2:	320b      	adds	r2, #11
 800cca4:	7812      	ldrb	r2, [r2, #0]
 800cca6:	fb02 f303 	mul.w	r3, r2, r3
 800ccaa:	119b      	asrs	r3, r3, #6
 800ccac:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800ccae:	4b1d      	ldr	r3, [pc, #116]	; (800cd24 <pidMultiWii+0x260>)
 800ccb0:	791b      	ldrb	r3, [r3, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d027      	beq.n	800cd06 <pidMultiWii+0x242>
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	dc24      	bgt.n	800cd06 <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800ccc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccc4:	fb03 f202 	mul.w	r2, r3, r2
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	69b9      	ldr	r1, [r7, #24]
 800cccc:	fb01 f303 	mul.w	r3, r1, r3
 800ccd0:	4413      	add	r3, r2
 800ccd2:	4a1f      	ldr	r2, [pc, #124]	; (800cd50 <pidMultiWii+0x28c>)
 800ccd4:	fb82 1203 	smull	r1, r2, r2, r3
 800ccd8:	1152      	asrs	r2, r2, #5
 800ccda:	17db      	asrs	r3, r3, #31
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce8:	fb03 f202 	mul.w	r2, r3, r2
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	69b9      	ldr	r1, [r7, #24]
 800ccf0:	fb01 f303 	mul.w	r3, r1, r3
 800ccf4:	4413      	add	r3, r2
 800ccf6:	4a16      	ldr	r2, [pc, #88]	; (800cd50 <pidMultiWii+0x28c>)
 800ccf8:	fb82 1203 	smull	r1, r2, r2, r3
 800ccfc:	1152      	asrs	r2, r2, #5
 800ccfe:	17db      	asrs	r3, r3, #31
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd04:	e02a      	b.n	800cd5c <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800cd06:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <pidMultiWii+0x260>)
 800cd08:	78db      	ldrb	r3, [r3, #3]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d022      	beq.n	800cd54 <pidMultiWii+0x290>
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	dc1f      	bgt.n	800cd54 <pidMultiWii+0x290>
                PTerm = PTermACC;
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd1c:	e01e      	b.n	800cd5c <pidMultiWii+0x298>
 800cd1e:	bf00      	nop
 800cd20:	20001794 	.word	0x20001794
 800cd24:	20001738 	.word	0x20001738
 800cd28:	20001828 	.word	0x20001828
 800cd2c:	200008f8 	.word	0x200008f8
 800cd30:	200014e0 	.word	0x200014e0
 800cd34:	20000e64 	.word	0x20000e64
 800cd38:	51eb851f 	.word	0x51eb851f
 800cd3c:	200018f0 	.word	0x200018f0
 800cd40:	ffffd8f0 	.word	0xffffd8f0
 800cd44:	200014d0 	.word	0x200014d0
 800cd48:	200018e4 	.word	0x200018e4
 800cd4c:	ffffc180 	.word	0xffffc180
 800cd50:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cd5c:	4a33      	ldr	r2, [pc, #204]	; (800ce2c <pidMultiWii+0x368>)
 800cd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd64:	4619      	mov	r1, r3
 800cd66:	4a32      	ldr	r2, [pc, #200]	; (800ce30 <pidMultiWii+0x36c>)
 800cd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6a:	4413      	add	r3, r2
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	fb01 f303 	mul.w	r3, r1, r3
 800cd72:	4a30      	ldr	r2, [pc, #192]	; (800ce34 <pidMultiWii+0x370>)
 800cd74:	fb82 1203 	smull	r1, r2, r2, r3
 800cd78:	1152      	asrs	r2, r2, #5
 800cd7a:	17db      	asrs	r3, r3, #31
 800cd7c:	1a9b      	subs	r3, r3, r2
 800cd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd80:	4413      	add	r3, r2
 800cd82:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cd84:	4a29      	ldr	r2, [pc, #164]	; (800ce2c <pidMultiWii+0x368>)
 800cd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4a2a      	ldr	r2, [pc, #168]	; (800ce38 <pidMultiWii+0x374>)
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd96:	1acb      	subs	r3, r1, r3
 800cd98:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cd9a:	4a24      	ldr	r2, [pc, #144]	; (800ce2c <pidMultiWii+0x368>)
 800cd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cda2:	4a25      	ldr	r2, [pc, #148]	; (800ce38 <pidMultiWii+0x374>)
 800cda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cdaa:	4a24      	ldr	r2, [pc, #144]	; (800ce3c <pidMultiWii+0x378>)
 800cdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cdb2:	4923      	ldr	r1, [pc, #140]	; (800ce40 <pidMultiWii+0x37c>)
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cdba:	4413      	add	r3, r2
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cdc2:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <pidMultiWii+0x378>)
 800cdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cdca:	491d      	ldr	r1, [pc, #116]	; (800ce40 <pidMultiWii+0x37c>)
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cdd2:	491a      	ldr	r1, [pc, #104]	; (800ce3c <pidMultiWii+0x378>)
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800cddc:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <pidMultiWii+0x380>)
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde0:	4413      	add	r3, r2
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	fb02 f303 	mul.w	r3, r2, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	da00      	bge.n	800cdf2 <pidMultiWii+0x32e>
 800cdf0:	331f      	adds	r3, #31
 800cdf2:	115b      	asrs	r3, r3, #5
 800cdf4:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	4413      	add	r3, r2
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	b219      	sxth	r1, r3
 800ce0c:	4a0e      	ldr	r2, [pc, #56]	; (800ce48 <pidMultiWii+0x384>)
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800ce14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce16:	3301      	adds	r3, #1
 800ce18:	637b      	str	r3, [r7, #52]	; 0x34
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	f77f ae72 	ble.w	800cb06 <pidMultiWii+0x42>
    }
}
 800ce22:	bf00      	nop
 800ce24:	bf00      	nop
 800ce26:	3738      	adds	r7, #56	; 0x38
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	200014d0 	.word	0x200014d0
 800ce30:	200017cc 	.word	0x200017cc
 800ce34:	66666667 	.word	0x66666667
 800ce38:	200019b0 	.word	0x200019b0
 800ce3c:	200019b8 	.word	0x200019b8
 800ce40:	200019c4 	.word	0x200019c4
 800ce44:	200017d4 	.word	0x200017d4
 800ce48:	200017f4 	.word	0x200017f4

0800ce4c <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	; 0x28
 800ce50:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800ce56:	2300      	movs	r3, #0
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
 800ce5a:	e0f2      	b.n	800d042 <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d10b      	bne.n	800ce7a <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800ce62:	4b7c      	ldr	r3, [pc, #496]	; (800d054 <pidRewrite+0x208>)
 800ce64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ce68:	331b      	adds	r3, #27
 800ce6a:	4a7b      	ldr	r2, [pc, #492]	; (800d058 <pidRewrite+0x20c>)
 800ce6c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ce70:	fb02 f303 	mul.w	r3, r2, r3
 800ce74:	115b      	asrs	r3, r3, #5
 800ce76:	623b      	str	r3, [r7, #32]
 800ce78:	e053      	b.n	800cf22 <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800ce7a:	4a77      	ldr	r2, [pc, #476]	; (800d058 <pidRewrite+0x20c>)
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce82:	4619      	mov	r1, r3
 800ce84:	4a75      	ldr	r2, [pc, #468]	; (800d05c <pidRewrite+0x210>)
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce8c:	440b      	add	r3, r1
 800ce8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce92:	4973      	ldr	r1, [pc, #460]	; (800d060 <pidRewrite+0x214>)
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7f6 fe39 	bl	8003b0c <constrain>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	4971      	ldr	r1, [pc, #452]	; (800d064 <pidRewrite+0x218>)
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cea4:	1ad2      	subs	r2, r2, r3
 800cea6:	496b      	ldr	r1, [pc, #428]	; (800d054 <pidRewrite+0x208>)
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	3314      	adds	r3, #20
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	440b      	add	r3, r1
 800ceb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	ee07 3a90 	vmov	s15, r3
 800ceba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cebe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800cec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ceca:	ee17 3a90 	vmov	r3, s15
 800cece:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800ced0:	4b65      	ldr	r3, [pc, #404]	; (800d068 <pidRewrite+0x21c>)
 800ced2:	78db      	ldrb	r3, [r3, #3]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d11c      	bne.n	800cf12 <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800ced8:	4a5e      	ldr	r2, [pc, #376]	; (800d054 <pidRewrite+0x208>)
 800ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cedc:	4413      	add	r3, r2
 800cede:	3323      	adds	r3, #35	; 0x23
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	331b      	adds	r3, #27
 800cee4:	495c      	ldr	r1, [pc, #368]	; (800d058 <pidRewrite+0x20c>)
 800cee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ceec:	fb02 f303 	mul.w	r3, r2, r3
 800cef0:	111b      	asrs	r3, r3, #4
 800cef2:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800cef4:	4b5c      	ldr	r3, [pc, #368]	; (800d068 <pidRewrite+0x21c>)
 800cef6:	791b      	ldrb	r3, [r3, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d012      	beq.n	800cf22 <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800cefc:	4b55      	ldr	r3, [pc, #340]	; (800d054 <pidRewrite+0x208>)
 800cefe:	7c9b      	ldrb	r3, [r3, #18]
 800cf00:	461a      	mov	r2, r3
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	fb02 f303 	mul.w	r3, r2, r3
 800cf08:	121b      	asrs	r3, r3, #8
 800cf0a:	6a3a      	ldr	r2, [r7, #32]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	623b      	str	r3, [r7, #32]
 800cf10:	e007      	b.n	800cf22 <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800cf12:	4b50      	ldr	r3, [pc, #320]	; (800d054 <pidRewrite+0x208>)
 800cf14:	7a1b      	ldrb	r3, [r3, #8]
 800cf16:	461a      	mov	r2, r3
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	111b      	asrs	r3, r3, #4
 800cf20:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800cf22:	4a52      	ldr	r2, [pc, #328]	; (800d06c <pidRewrite+0x220>)
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	1a9b      	subs	r3, r3, r2
 800cf30:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800cf32:	4a48      	ldr	r2, [pc, #288]	; (800d054 <pidRewrite+0x208>)
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	4413      	add	r3, r2
 800cf38:	3301      	adds	r3, #1
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	fb02 f303 	mul.w	r3, r2, r3
 800cf44:	11db      	asrs	r3, r3, #7
 800cf46:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800cf48:	4a49      	ldr	r2, [pc, #292]	; (800d070 <pidRewrite+0x224>)
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf50:	4b48      	ldr	r3, [pc, #288]	; (800d074 <pidRewrite+0x228>)
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	4619      	mov	r1, r3
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	fb01 f303 	mul.w	r3, r1, r3
 800cf5c:	12db      	asrs	r3, r3, #11
 800cf5e:	483d      	ldr	r0, [pc, #244]	; (800d054 <pidRewrite+0x208>)
 800cf60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf62:	4401      	add	r1, r0
 800cf64:	310b      	adds	r1, #11
 800cf66:	7809      	ldrb	r1, [r1, #0]
 800cf68:	fb01 f303 	mul.w	r3, r1, r3
 800cf6c:	441a      	add	r2, r3
 800cf6e:	4940      	ldr	r1, [pc, #256]	; (800d070 <pidRewrite+0x224>)
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800cf76:	4a3e      	ldr	r2, [pc, #248]	; (800d070 <pidRewrite+0x224>)
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf82:	493d      	ldr	r1, [pc, #244]	; (800d078 <pidRewrite+0x22c>)
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7f6 fdc1 	bl	8003b0c <constrain>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	4938      	ldr	r1, [pc, #224]	; (800d070 <pidRewrite+0x224>)
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800cf94:	4a36      	ldr	r2, [pc, #216]	; (800d070 <pidRewrite+0x224>)
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf9c:	135b      	asrs	r3, r3, #13
 800cf9e:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800cfa0:	4a36      	ldr	r2, [pc, #216]	; (800d07c <pidRewrite+0x230>)
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800cfae:	4933      	ldr	r1, [pc, #204]	; (800d07c <pidRewrite+0x230>)
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	69ba      	ldr	r2, [r7, #24]
 800cfb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800cfb8:	4b2e      	ldr	r3, [pc, #184]	; (800d074 <pidRewrite+0x228>)
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	091b      	lsrs	r3, r3, #4
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	461a      	mov	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	fb02 f303 	mul.w	r3, r2, r3
 800cfd2:	119b      	asrs	r3, r3, #6
 800cfd4:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cfd6:	4a2a      	ldr	r2, [pc, #168]	; (800d080 <pidRewrite+0x234>)
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfde:	4929      	ldr	r1, [pc, #164]	; (800d084 <pidRewrite+0x238>)
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cfee:	4a24      	ldr	r2, [pc, #144]	; (800d080 <pidRewrite+0x234>)
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cff6:	4923      	ldr	r1, [pc, #140]	; (800d084 <pidRewrite+0x238>)
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800cffe:	4920      	ldr	r1, [pc, #128]	; (800d080 <pidRewrite+0x234>)
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800d008:	4a12      	ldr	r2, [pc, #72]	; (800d054 <pidRewrite+0x208>)
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	4413      	add	r3, r2
 800d00e:	3315      	adds	r3, #21
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	fb02 f303 	mul.w	r3, r2, r3
 800d01a:	121b      	asrs	r3, r3, #8
 800d01c:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	b29a      	uxth	r2, r3
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	b29b      	uxth	r3, r3
 800d026:	4413      	add	r3, r2
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	4413      	add	r3, r2
 800d030:	b29b      	uxth	r3, r3
 800d032:	b219      	sxth	r1, r3
 800d034:	4a14      	ldr	r2, [pc, #80]	; (800d088 <pidRewrite+0x23c>)
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	3301      	adds	r3, #1
 800d040:	627b      	str	r3, [r7, #36]	; 0x24
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	2b02      	cmp	r3, #2
 800d046:	f77f af09 	ble.w	800ce5c <pidRewrite+0x10>
    }
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	3728      	adds	r7, #40	; 0x28
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20000e64 	.word	0x20000e64
 800d058:	20001794 	.word	0x20001794
 800d05c:	20001828 	.word	0x20001828
 800d060:	fffffe0c 	.word	0xfffffe0c
 800d064:	200014e0 	.word	0x200014e0
 800d068:	20001738 	.word	0x20001738
 800d06c:	200014d0 	.word	0x200014d0
 800d070:	200018e4 	.word	0x200018e4
 800d074:	20001758 	.word	0x20001758
 800d078:	ffe00000 	.word	0xffe00000
 800d07c:	200019d0 	.word	0x200019d0
 800d080:	200019dc 	.word	0x200019dc
 800d084:	200019e8 	.word	0x200019e8
 800d088:	200017f4 	.word	0x200017f4

0800d08c <setPIDController>:

void setPIDController(int type)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
    switch (type) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d003      	beq.n	800d0a2 <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800d09a:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <setPIDController+0x2c>)
 800d09c:	4a07      	ldr	r2, [pc, #28]	; (800d0bc <setPIDController+0x30>)
 800d09e:	601a      	str	r2, [r3, #0]
            break;
 800d0a0:	e003      	b.n	800d0aa <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800d0a2:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <setPIDController+0x2c>)
 800d0a4:	4a06      	ldr	r2, [pc, #24]	; (800d0c0 <setPIDController+0x34>)
 800d0a6:	601a      	str	r2, [r3, #0]
            break;
 800d0a8:	bf00      	nop
    }
}
 800d0aa:	bf00      	nop
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	20000050 	.word	0x20000050
 800d0bc:	0800cac5 	.word	0x0800cac5
 800d0c0:	0800ce4d 	.word	0x0800ce4d

0800d0c4 <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800d0d8:	f7ff fbf4 	bl	800c8c4 <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800d0dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d0e0:	f7f9 fe76 	bl	8006dd0 <feature>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d005      	beq.n	800d0f6 <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800d0ea:	4b9d      	ldr	r3, [pc, #628]	; (800d360 <taskComputeRc+0x29c>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <taskComputeRc+0x32>
                mwDisarm();
 800d0f2:	f7ff fcc5 	bl	800ca80 <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800d0f6:	f001 f9f9 	bl	800e4ec <RSSI_getValue>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	4b99      	ldr	r3, [pc, #612]	; (800d364 <taskComputeRc+0x2a0>)
 800d100:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d102:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d106:	f7f9 fe63 	bl	8006dd0 <feature>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <taskComputeRc+0x5a>
 800d110:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d114:	f7f9 fe5c 	bl	8006dd0 <feature>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d072      	beq.n	800d204 <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800d11e:	4b92      	ldr	r3, [pc, #584]	; (800d368 <taskComputeRc+0x2a4>)
 800d120:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d124:	4619      	mov	r1, r3
 800d126:	4b91      	ldr	r3, [pc, #580]	; (800d36c <taskComputeRc+0x2a8>)
 800d128:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d12c:	461a      	mov	r2, r3
 800d12e:	4613      	mov	r3, r2
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	4413      	add	r3, r2
 800d134:	4299      	cmp	r1, r3
 800d136:	dd43      	ble.n	800d1c0 <taskComputeRc+0xfc>
 800d138:	4b8d      	ldr	r3, [pc, #564]	; (800d370 <taskComputeRc+0x2ac>)
 800d13a:	785b      	ldrb	r3, [r3, #1]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d03f      	beq.n	800d1c0 <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d140:	2300      	movs	r3, #0
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	e00a      	b.n	800d15c <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d146:	4b8b      	ldr	r3, [pc, #556]	; (800d374 <taskComputeRc+0x2b0>)
 800d148:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d14c:	b219      	sxth	r1, r3
 800d14e:	4a8a      	ldr	r2, [pc, #552]	; (800d378 <taskComputeRc+0x2b4>)
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	3301      	adds	r3, #1
 800d15a:	613b      	str	r3, [r7, #16]
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	ddf1      	ble.n	800d146 <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d162:	4b82      	ldr	r3, [pc, #520]	; (800d36c <taskComputeRc+0x2a8>)
 800d164:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d168:	b21a      	sxth	r2, r3
 800d16a:	4b83      	ldr	r3, [pc, #524]	; (800d378 <taskComputeRc+0x2b4>)
 800d16c:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d16e:	2003      	movs	r0, #3
 800d170:	f7f6 fe5a 	bl	8003e28 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d174:	4b7c      	ldr	r3, [pc, #496]	; (800d368 <taskComputeRc+0x2a4>)
 800d176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d17a:	4619      	mov	r1, r3
 800d17c:	4b7b      	ldr	r3, [pc, #492]	; (800d36c <taskComputeRc+0x2a8>)
 800d17e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d182:	461a      	mov	r2, r3
 800d184:	4b79      	ldr	r3, [pc, #484]	; (800d36c <taskComputeRc+0x2a8>)
 800d186:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d18a:	441a      	add	r2, r3
 800d18c:	4613      	mov	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	4299      	cmp	r1, r3
 800d194:	dd0b      	ble.n	800d1ae <taskComputeRc+0xea>
 800d196:	4b76      	ldr	r3, [pc, #472]	; (800d370 <taskComputeRc+0x2ac>)
 800d198:	7c9b      	ldrb	r3, [r3, #18]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d19e:	f7ff fc6f 	bl	800ca80 <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d1a2:	4b73      	ldr	r3, [pc, #460]	; (800d370 <taskComputeRc+0x2ac>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d1a8:	2004      	movs	r0, #4
 800d1aa:	f7f6 fe3d 	bl	8003e28 <buzzer>
                }
                failsafeEvents++;
 800d1ae:	4b73      	ldr	r3, [pc, #460]	; (800d37c <taskComputeRc+0x2b8>)
 800d1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	b21a      	sxth	r2, r3
 800d1bc:	4b6f      	ldr	r3, [pc, #444]	; (800d37c <taskComputeRc+0x2b8>)
 800d1be:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d1c0:	4b69      	ldr	r3, [pc, #420]	; (800d368 <taskComputeRc+0x2a4>)
 800d1c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4b68      	ldr	r3, [pc, #416]	; (800d36c <taskComputeRc+0x2a8>)
 800d1ca:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	4299      	cmp	r1, r3
 800d1d8:	dd0b      	ble.n	800d1f2 <taskComputeRc+0x12e>
 800d1da:	4b65      	ldr	r3, [pc, #404]	; (800d370 <taskComputeRc+0x2ac>)
 800d1dc:	785b      	ldrb	r3, [r3, #1]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d107      	bne.n	800d1f2 <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d1e2:	f7ff fc4d 	bl	800ca80 <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d1e6:	4b62      	ldr	r3, [pc, #392]	; (800d370 <taskComputeRc+0x2ac>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d1ec:	2004      	movs	r0, #4
 800d1ee:	f7f6 fe1b 	bl	8003e28 <buzzer>
            }
            failsafeCnt++;
 800d1f2:	4b5d      	ldr	r3, [pc, #372]	; (800d368 <taskComputeRc+0x2a4>)
 800d1f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	b21a      	sxth	r2, r3
 800d200:	4b59      	ldr	r3, [pc, #356]	; (800d368 <taskComputeRc+0x2a4>)
 800d202:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d204:	2300      	movs	r3, #0
 800d206:	613b      	str	r3, [r7, #16]
 800d208:	e021      	b.n	800d24e <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d20a:	7dfb      	ldrb	r3, [r7, #23]
 800d20c:	089b      	lsrs	r3, r3, #2
 800d20e:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d210:	4a59      	ldr	r2, [pc, #356]	; (800d378 <taskComputeRc+0x2b4>)
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d218:	461a      	mov	r2, r3
 800d21a:	4b56      	ldr	r3, [pc, #344]	; (800d374 <taskComputeRc+0x2b0>)
 800d21c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d220:	429a      	cmp	r2, r3
 800d222:	dd03      	ble.n	800d22c <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d22a:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d22c:	4a52      	ldr	r2, [pc, #328]	; (800d378 <taskComputeRc+0x2b4>)
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d234:	461a      	mov	r2, r3
 800d236:	4b4f      	ldr	r3, [pc, #316]	; (800d374 <taskComputeRc+0x2b0>)
 800d238:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d23c:	429a      	cmp	r2, r3
 800d23e:	da03      	bge.n	800d248 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d246:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	3301      	adds	r3, #1
 800d24c:	613b      	str	r3, [r7, #16]
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	2b03      	cmp	r3, #3
 800d252:	ddda      	ble.n	800d20a <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d254:	4b4a      	ldr	r3, [pc, #296]	; (800d380 <taskComputeRc+0x2bc>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	7dfa      	ldrb	r2, [r7, #23]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d10a      	bne.n	800d274 <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d25e:	4b49      	ldr	r3, [pc, #292]	; (800d384 <taskComputeRc+0x2c0>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2bf9      	cmp	r3, #249	; 0xf9
 800d264:	d809      	bhi.n	800d27a <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d266:	4b47      	ldr	r3, [pc, #284]	; (800d384 <taskComputeRc+0x2c0>)
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	3301      	adds	r3, #1
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	4b45      	ldr	r3, [pc, #276]	; (800d384 <taskComputeRc+0x2c0>)
 800d270:	701a      	strb	r2, [r3, #0]
 800d272:	e002      	b.n	800d27a <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d274:	4b43      	ldr	r3, [pc, #268]	; (800d384 <taskComputeRc+0x2c0>)
 800d276:	2200      	movs	r2, #0
 800d278:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d27a:	4a41      	ldr	r2, [pc, #260]	; (800d380 <taskComputeRc+0x2bc>)
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d280:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d284:	f7f9 fda4 	bl	8006dd0 <feature>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d01e      	beq.n	800d2cc <taskComputeRc+0x208>
 800d28e:	4b3a      	ldr	r3, [pc, #232]	; (800d378 <taskComputeRc+0x2b4>)
 800d290:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d294:	461a      	mov	r2, r3
 800d296:	4b37      	ldr	r3, [pc, #220]	; (800d374 <taskComputeRc+0x2b0>)
 800d298:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d29c:	4619      	mov	r1, r3
 800d29e:	4b35      	ldr	r3, [pc, #212]	; (800d374 <taskComputeRc+0x2b0>)
 800d2a0:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d2a4:	1acb      	subs	r3, r1, r3
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	dd10      	ble.n	800d2cc <taskComputeRc+0x208>
 800d2aa:	4b33      	ldr	r3, [pc, #204]	; (800d378 <taskComputeRc+0x2b4>)
 800d2ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4b30      	ldr	r3, [pc, #192]	; (800d374 <taskComputeRc+0x2b0>)
 800d2b4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4b2e      	ldr	r3, [pc, #184]	; (800d374 <taskComputeRc+0x2b0>)
 800d2bc:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d2c0:	440b      	add	r3, r1
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	da02      	bge.n	800d2cc <taskComputeRc+0x208>
            isThrottleLow = true;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	72fb      	strb	r3, [r7, #11]
 800d2ca:	e014      	b.n	800d2f6 <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d2cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d2d0:	f7f9 fd7e 	bl	8006dd0 <feature>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f083 0301 	eor.w	r3, r3, #1
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <taskComputeRc+0x232>
 800d2e0:	4b25      	ldr	r3, [pc, #148]	; (800d378 <taskComputeRc+0x2b4>)
 800d2e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	4b22      	ldr	r3, [pc, #136]	; (800d374 <taskComputeRc+0x2b0>)
 800d2ea:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	da01      	bge.n	800d2f6 <taskComputeRc+0x232>
            isThrottleLow = true;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d2f6:	7afb      	ldrb	r3, [r7, #11]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01c      	beq.n	800d336 <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d2fc:	4b22      	ldr	r3, [pc, #136]	; (800d388 <taskComputeRc+0x2c4>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d302:	4b21      	ldr	r3, [pc, #132]	; (800d388 <taskComputeRc+0x2c4>)
 800d304:	2200      	movs	r2, #0
 800d306:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d308:	4b1f      	ldr	r3, [pc, #124]	; (800d388 <taskComputeRc+0x2c4>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d30e:	4b1f      	ldr	r3, [pc, #124]	; (800d38c <taskComputeRc+0x2c8>)
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d314:	4b1d      	ldr	r3, [pc, #116]	; (800d38c <taskComputeRc+0x2c8>)
 800d316:	2200      	movs	r2, #0
 800d318:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d31a:	4b14      	ldr	r3, [pc, #80]	; (800d36c <taskComputeRc+0x2a8>)
 800d31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d009      	beq.n	800d336 <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d322:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <taskComputeRc+0x29c>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d005      	beq.n	800d336 <taskComputeRc+0x272>
 800d32a:	4b11      	ldr	r3, [pc, #68]	; (800d370 <taskComputeRc+0x2ac>)
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <taskComputeRc+0x272>
                    mwArm();
 800d332:	f7ff fb61 	bl	800c9f8 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d336:	4b0d      	ldr	r3, [pc, #52]	; (800d36c <taskComputeRc+0x2a8>)
 800d338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d02d      	beq.n	800d39a <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d33e:	4b08      	ldr	r3, [pc, #32]	; (800d360 <taskComputeRc+0x29c>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d129      	bne.n	800d39a <taskComputeRc+0x2d6>
 800d346:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <taskComputeRc+0x2ac>)
 800d348:	785b      	ldrb	r3, [r3, #1]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d025      	beq.n	800d39a <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d34e:	4b09      	ldr	r3, [pc, #36]	; (800d374 <taskComputeRc+0x2b0>)
 800d350:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01b      	beq.n	800d390 <taskComputeRc+0x2cc>
                    mwDisarm();
 800d358:	f7ff fb92 	bl	800ca80 <mwDisarm>
 800d35c:	e01d      	b.n	800d39a <taskComputeRc+0x2d6>
 800d35e:	bf00      	nop
 800d360:	200017d8 	.word	0x200017d8
 800d364:	200017c4 	.word	0x200017c4
 800d368:	2000176c 	.word	0x2000176c
 800d36c:	20000e64 	.word	0x20000e64
 800d370:	20001738 	.word	0x20001738
 800d374:	200008f8 	.word	0x200008f8
 800d378:	20001770 	.word	0x20001770
 800d37c:	2000176e 	.word	0x2000176e
 800d380:	200019f4 	.word	0x200019f4
 800d384:	200019f5 	.word	0x200019f5
 800d388:	200018e4 	.word	0x200018e4
 800d38c:	200018f0 	.word	0x200018f0
                } else if (isThrottleLow) {
 800d390:	7afb      	ldrb	r3, [r7, #11]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <taskComputeRc+0x2d6>
                    mwDisarm();
 800d396:	f7ff fb73 	bl	800ca80 <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d39a:	4b82      	ldr	r3, [pc, #520]	; (800d5a4 <taskComputeRc+0x4e0>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b14      	cmp	r3, #20
 800d3a0:	f040 8131 	bne.w	800d606 <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d3a4:	4b80      	ldr	r3, [pc, #512]	; (800d5a8 <taskComputeRc+0x4e4>)
 800d3a6:	785b      	ldrb	r3, [r3, #1]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01c      	beq.n	800d3e6 <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d3ac:	4b7f      	ldr	r3, [pc, #508]	; (800d5ac <taskComputeRc+0x4e8>)
 800d3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <taskComputeRc+0x2fc>
 800d3b4:	4b7e      	ldr	r3, [pc, #504]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b5f      	cmp	r3, #95	; 0x5f
 800d3ba:	d101      	bne.n	800d3c0 <taskComputeRc+0x2fc>
                    mwDisarm();
 800d3bc:	f7ff fb60 	bl	800ca80 <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d3c0:	4b7c      	ldr	r3, [pc, #496]	; (800d5b4 <taskComputeRc+0x4f0>)
 800d3c2:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 811d 	beq.w	800d606 <taskComputeRc+0x542>
 800d3cc:	4b77      	ldr	r3, [pc, #476]	; (800d5ac <taskComputeRc+0x4e8>)
 800d3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f040 8118 	bne.w	800d606 <taskComputeRc+0x542>
 800d3d6:	4b76      	ldr	r3, [pc, #472]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b7d      	cmp	r3, #125	; 0x7d
 800d3dc:	f040 8113 	bne.w	800d606 <taskComputeRc+0x542>
                    mwDisarm();
 800d3e0:	f7ff fb4e 	bl	800ca80 <mwDisarm>
 800d3e4:	e10f      	b.n	800d606 <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d3ea:	4b71      	ldr	r3, [pc, #452]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	2b57      	cmp	r3, #87	; 0x57
 800d3f0:	d122      	bne.n	800d438 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d3f2:	4b71      	ldr	r3, [pc, #452]	; (800d5b8 <taskComputeRc+0x4f4>)
 800d3f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3f8:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d3fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d3fe:	f7f9 fce7 	bl	8006dd0 <feature>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d408:	f7fb fc12 	bl	8008c30 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d40c:	2004      	movs	r0, #4
 800d40e:	f7f9 fc97 	bl	8006d40 <sensors>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d418:	4b68      	ldr	r3, [pc, #416]	; (800d5bc <taskComputeRc+0x4f8>)
 800d41a:	220a      	movs	r2, #10
 800d41c:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d41e:	2008      	movs	r0, #8
 800d420:	f7f9 fc8e 	bl	8006d40 <sensors>
 800d424:	4603      	mov	r3, r0
 800d426:	f083 0301 	eor.w	r3, r3, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d032      	beq.n	800d496 <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d430:	4b63      	ldr	r3, [pc, #396]	; (800d5c0 <taskComputeRc+0x4fc>)
 800d432:	2200      	movs	r2, #0
 800d434:	801a      	strh	r2, [r3, #0]
 800d436:	e02e      	b.n	800d496 <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d438:	2004      	movs	r0, #4
 800d43a:	f7f9 fcc9 	bl	8006dd0 <feature>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d028      	beq.n	800d496 <taskComputeRc+0x3d2>
 800d444:	4b5a      	ldr	r3, [pc, #360]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b5a      	cmp	r3, #90	; 0x5a
 800d44a:	d124      	bne.n	800d496 <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d44c:	4b5d      	ldr	r3, [pc, #372]	; (800d5c4 <taskComputeRc+0x500>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d006      	beq.n	800d462 <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d454:	4b5b      	ldr	r3, [pc, #364]	; (800d5c4 <taskComputeRc+0x500>)
 800d456:	2200      	movs	r2, #0
 800d458:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d45a:	4b5b      	ldr	r3, [pc, #364]	; (800d5c8 <taskComputeRc+0x504>)
 800d45c:	2201      	movs	r2, #1
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	e019      	b.n	800d496 <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d462:	4b5a      	ldr	r3, [pc, #360]	; (800d5cc <taskComputeRc+0x508>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	bf14      	ite	ne
 800d46a:	2301      	movne	r3, #1
 800d46c:	2300      	moveq	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	f083 0301 	eor.w	r3, r3, #1
 800d474:	b2db      	uxtb	r3, r3
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	4b53      	ldr	r3, [pc, #332]	; (800d5cc <taskComputeRc+0x508>)
 800d47e:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d480:	4b52      	ldr	r3, [pc, #328]	; (800d5cc <taskComputeRc+0x508>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d488:	200a      	movs	r0, #10
 800d48a:	f7f6 fccd 	bl	8003e28 <buzzer>
 800d48e:	e002      	b.n	800d496 <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d490:	200b      	movs	r0, #11
 800d492:	f7f6 fcc9 	bl	8003e28 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d496:	4b46      	ldr	r3, [pc, #280]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	2b5d      	cmp	r3, #93	; 0x5d
 800d49c:	d102      	bne.n	800d4a4 <taskComputeRc+0x3e0>
                    i = 1;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	613b      	str	r3, [r7, #16]
 800d4a2:	e00c      	b.n	800d4be <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d4a4:	4b42      	ldr	r3, [pc, #264]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2b5b      	cmp	r3, #91	; 0x5b
 800d4aa:	d102      	bne.n	800d4b2 <taskComputeRc+0x3ee>
                    i = 2;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	613b      	str	r3, [r7, #16]
 800d4b0:	e005      	b.n	800d4be <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d4b2:	4b3f      	ldr	r3, [pc, #252]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b5e      	cmp	r3, #94	; 0x5e
 800d4b8:	d101      	bne.n	800d4be <taskComputeRc+0x3fa>
                    i = 3;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	613b      	str	r3, [r7, #16]
                if (i) {
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d011      	beq.n	800d4e8 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	4b39      	ldr	r3, [pc, #228]	; (800d5b4 <taskComputeRc+0x4f0>)
 800d4ce:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	f7f9 f899 	bl	800660c <writeEEPROM>
                    blinkLED(2, 40, i);
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	461a      	mov	r2, r3
 800d4e0:	2128      	movs	r1, #40	; 0x28
 800d4e2:	2002      	movs	r0, #2
 800d4e4:	f7fe fd9e 	bl	800c024 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d4e8:	4b30      	ldr	r3, [pc, #192]	; (800d5ac <taskComputeRc+0x4e8>)
 800d4ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d106      	bne.n	800d4fe <taskComputeRc+0x43a>
 800d4f0:	4b2f      	ldr	r3, [pc, #188]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b6f      	cmp	r3, #111	; 0x6f
 800d4f6:	d102      	bne.n	800d4fe <taskComputeRc+0x43a>
                    mwArm();
 800d4f8:	f7ff fa7e 	bl	800c9f8 <mwArm>
 800d4fc:	e01f      	b.n	800d53e <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d4fe:	4b2d      	ldr	r3, [pc, #180]	; (800d5b4 <taskComputeRc+0x4f0>)
 800d500:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00a      	beq.n	800d51e <taskComputeRc+0x45a>
 800d508:	4b28      	ldr	r3, [pc, #160]	; (800d5ac <taskComputeRc+0x4e8>)
 800d50a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <taskComputeRc+0x45a>
 800d510:	4b27      	ldr	r3, [pc, #156]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b7e      	cmp	r3, #126	; 0x7e
 800d516:	d102      	bne.n	800d51e <taskComputeRc+0x45a>
                    mwArm();
 800d518:	f7ff fa6e 	bl	800c9f8 <mwArm>
 800d51c:	e00f      	b.n	800d53e <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d51e:	4b24      	ldr	r3, [pc, #144]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b97      	cmp	r3, #151	; 0x97
 800d524:	d104      	bne.n	800d530 <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d526:	4b2a      	ldr	r3, [pc, #168]	; (800d5d0 <taskComputeRc+0x50c>)
 800d528:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d52c:	801a      	strh	r2, [r3, #0]
 800d52e:	e006      	b.n	800d53e <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d530:	4b1f      	ldr	r3, [pc, #124]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2ba7      	cmp	r3, #167	; 0xa7
 800d536:	d102      	bne.n	800d53e <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d538:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <taskComputeRc+0x4e4>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d542:	4b1b      	ldr	r3, [pc, #108]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	2bbb      	cmp	r3, #187	; 0xbb
 800d548:	d10b      	bne.n	800d562 <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d54a:	4b18      	ldr	r3, [pc, #96]	; (800d5ac <taskComputeRc+0x4e8>)
 800d54c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d550:	b29b      	uxth	r3, r3
 800d552:	3302      	adds	r3, #2
 800d554:	b29b      	uxth	r3, r3
 800d556:	b21a      	sxth	r2, r3
 800d558:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <taskComputeRc+0x4e8>)
 800d55a:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d55c:	2301      	movs	r3, #1
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	e047      	b.n	800d5f2 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d562:	4b13      	ldr	r3, [pc, #76]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	2bb7      	cmp	r3, #183	; 0xb7
 800d568:	d10b      	bne.n	800d582 <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d56a:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <taskComputeRc+0x4e8>)
 800d56c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d570:	b29b      	uxth	r3, r3
 800d572:	3b02      	subs	r3, #2
 800d574:	b29b      	uxth	r3, r3
 800d576:	b21a      	sxth	r2, r3
 800d578:	4b0c      	ldr	r3, [pc, #48]	; (800d5ac <taskComputeRc+0x4e8>)
 800d57a:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d57c:	2301      	movs	r3, #1
 800d57e:	613b      	str	r3, [r7, #16]
 800d580:	e037      	b.n	800d5f2 <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d582:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <taskComputeRc+0x4ec>)
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2bbe      	cmp	r3, #190	; 0xbe
 800d588:	d124      	bne.n	800d5d4 <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d58a:	4b08      	ldr	r3, [pc, #32]	; (800d5ac <taskComputeRc+0x4e8>)
 800d58c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d590:	b29b      	uxth	r3, r3
 800d592:	3302      	adds	r3, #2
 800d594:	b29b      	uxth	r3, r3
 800d596:	b21a      	sxth	r2, r3
 800d598:	4b04      	ldr	r3, [pc, #16]	; (800d5ac <taskComputeRc+0x4e8>)
 800d59a:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d59c:	2301      	movs	r3, #1
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	e027      	b.n	800d5f2 <taskComputeRc+0x52e>
 800d5a2:	bf00      	nop
 800d5a4:	200019f5 	.word	0x200019f5
 800d5a8:	20001738 	.word	0x20001738
 800d5ac:	20000e64 	.word	0x20000e64
 800d5b0:	200019f4 	.word	0x200019f4
 800d5b4:	200008f8 	.word	0x200008f8
 800d5b8:	20001a06 	.word	0x20001a06
 800d5bc:	20001a04 	.word	0x20001a04
 800d5c0:	20001a08 	.word	0x20001a08
 800d5c4:	200018d5 	.word	0x200018d5
 800d5c8:	200018d6 	.word	0x200018d6
 800d5cc:	200018d4 	.word	0x200018d4
 800d5d0:	20001a02 	.word	0x20001a02
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d5d4:	4b9e      	ldr	r3, [pc, #632]	; (800d850 <taskComputeRc+0x78c>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2bbd      	cmp	r3, #189	; 0xbd
 800d5da:	d10a      	bne.n	800d5f2 <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d5dc:	4b9d      	ldr	r3, [pc, #628]	; (800d854 <taskComputeRc+0x790>)
 800d5de:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	3b02      	subs	r3, #2
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	b21a      	sxth	r2, r3
 800d5ea:	4b9a      	ldr	r3, [pc, #616]	; (800d854 <taskComputeRc+0x790>)
 800d5ec:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d006      	beq.n	800d606 <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d5f8:	2101      	movs	r1, #1
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	f7f9 f806 	bl	800660c <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d600:	4b95      	ldr	r3, [pc, #596]	; (800d858 <taskComputeRc+0x794>)
 800d602:	2200      	movs	r2, #0
 800d604:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d606:	2004      	movs	r0, #4
 800d608:	f7f9 fbe2 	bl	8006dd0 <feature>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d041      	beq.n	800d696 <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d612:	4b92      	ldr	r3, [pc, #584]	; (800d85c <taskComputeRc+0x798>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d016      	beq.n	800d648 <taskComputeRc+0x584>
 800d61a:	4b91      	ldr	r3, [pc, #580]	; (800d860 <taskComputeRc+0x79c>)
 800d61c:	785b      	ldrb	r3, [r3, #1]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d012      	beq.n	800d648 <taskComputeRc+0x584>
 800d622:	4b90      	ldr	r3, [pc, #576]	; (800d864 <taskComputeRc+0x7a0>)
 800d624:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d628:	461a      	mov	r2, r3
 800d62a:	4b8f      	ldr	r3, [pc, #572]	; (800d868 <taskComputeRc+0x7a4>)
 800d62c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d630:	429a      	cmp	r2, r3
 800d632:	dd09      	ble.n	800d648 <taskComputeRc+0x584>
 800d634:	4b8d      	ldr	r3, [pc, #564]	; (800d86c <taskComputeRc+0x7a8>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d105      	bne.n	800d648 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d63c:	4b8c      	ldr	r3, [pc, #560]	; (800d870 <taskComputeRc+0x7ac>)
 800d63e:	2232      	movs	r2, #50	; 0x32
 800d640:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d642:	4b86      	ldr	r3, [pc, #536]	; (800d85c <taskComputeRc+0x798>)
 800d644:	2200      	movs	r2, #0
 800d646:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d648:	4b88      	ldr	r3, [pc, #544]	; (800d86c <taskComputeRc+0x7a8>)
 800d64a:	7c5b      	ldrb	r3, [r3, #17]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d014      	beq.n	800d67a <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d650:	4b88      	ldr	r3, [pc, #544]	; (800d874 <taskComputeRc+0x7b0>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f083 0301 	eor.w	r3, r3, #1
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d009      	beq.n	800d672 <taskComputeRc+0x5ae>
 800d65e:	4b86      	ldr	r3, [pc, #536]	; (800d878 <taskComputeRc+0x7b4>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	f083 0301 	eor.w	r3, r3, #1
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d66c:	4b80      	ldr	r3, [pc, #512]	; (800d870 <taskComputeRc+0x7ac>)
 800d66e:	2232      	movs	r2, #50	; 0x32
 800d670:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d672:	4b80      	ldr	r3, [pc, #512]	; (800d874 <taskComputeRc+0x7b0>)
 800d674:	2201      	movs	r2, #1
 800d676:	701a      	strb	r2, [r3, #0]
 800d678:	e00d      	b.n	800d696 <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d67a:	4b7f      	ldr	r3, [pc, #508]	; (800d878 <taskComputeRc+0x7b4>)
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d009      	beq.n	800d696 <taskComputeRc+0x5d2>
 800d682:	4b77      	ldr	r3, [pc, #476]	; (800d860 <taskComputeRc+0x79c>)
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d105      	bne.n	800d696 <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d68a:	4b7b      	ldr	r3, [pc, #492]	; (800d878 <taskComputeRc+0x7b4>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d690:	4b7a      	ldr	r3, [pc, #488]	; (800d87c <taskComputeRc+0x7b8>)
 800d692:	2201      	movs	r2, #1
 800d694:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d696:	2300      	movs	r3, #0
 800d698:	613b      	str	r3, [r7, #16]
 800d69a:	e04a      	b.n	800d732 <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	4a70      	ldr	r2, [pc, #448]	; (800d864 <taskComputeRc+0x7a0>)
 800d6a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6a6:	f240 5213 	movw	r2, #1299	; 0x513
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	bfd4      	ite	le
 800d6ae:	2301      	movle	r3, #1
 800d6b0:	2300      	movgt	r3, #0
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	693a      	ldr	r2, [r7, #16]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	4099      	lsls	r1, r3
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	3304      	adds	r3, #4
 800d6c4:	4a67      	ldr	r2, [pc, #412]	; (800d864 <taskComputeRc+0x7a0>)
 800d6c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6ca:	f240 5214 	movw	r2, #1300	; 0x514
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	dd0a      	ble.n	800d6e8 <taskComputeRc+0x624>
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	4a63      	ldr	r2, [pc, #396]	; (800d864 <taskComputeRc+0x7a0>)
 800d6d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6dc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	dc01      	bgt.n	800d6e8 <taskComputeRc+0x624>
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	e000      	b.n	800d6ea <taskComputeRc+0x626>
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	4413      	add	r3, r2
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	fa00 f303 	lsl.w	r3, r0, r3
 800d6f8:	4319      	orrs	r1, r3
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	4a59      	ldr	r2, [pc, #356]	; (800d864 <taskComputeRc+0x7a0>)
 800d700:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d704:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d708:	4293      	cmp	r3, r2
 800d70a:	bfcc      	ite	gt
 800d70c:	2301      	movgt	r3, #1
 800d70e:	2300      	movle	r3, #0
 800d710:	b2db      	uxtb	r3, r3
 800d712:	4618      	mov	r0, r3
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	4613      	mov	r3, r2
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	4413      	add	r3, r2
 800d71c:	3302      	adds	r3, #2
 800d71e:	fa00 f303 	lsl.w	r3, r0, r3
 800d722:	430b      	orrs	r3, r1
 800d724:	461a      	mov	r2, r3
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	4313      	orrs	r3, r2
 800d72a:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	3301      	adds	r3, #1
 800d730:	613b      	str	r3, [r7, #16]
 800d732:	4b53      	ldr	r3, [pc, #332]	; (800d880 <taskComputeRc+0x7bc>)
 800d734:	7d1b      	ldrb	r3, [r3, #20]
 800d736:	461a      	mov	r2, r3
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	4293      	cmp	r3, r2
 800d73c:	dbae      	blt.n	800d69c <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d73e:	2300      	movs	r3, #0
 800d740:	613b      	str	r3, [r7, #16]
 800d742:	e015      	b.n	800d770 <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d744:	4a43      	ldr	r2, [pc, #268]	; (800d854 <taskComputeRc+0x790>)
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	3312      	adds	r3, #18
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4013      	ands	r3, r2
 800d754:	2b00      	cmp	r3, #0
 800d756:	bf14      	ite	ne
 800d758:	2301      	movne	r3, #1
 800d75a:	2300      	moveq	r3, #0
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	4619      	mov	r1, r3
 800d760:	4a42      	ldr	r2, [pc, #264]	; (800d86c <taskComputeRc+0x7a8>)
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	4413      	add	r3, r2
 800d766:	460a      	mov	r2, r1
 800d768:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	3301      	adds	r3, #1
 800d76e:	613b      	str	r3, [r7, #16]
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b18      	cmp	r3, #24
 800d774:	dde6      	ble.n	800d744 <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d776:	4b3d      	ldr	r3, [pc, #244]	; (800d86c <taskComputeRc+0x7a8>)
 800d778:	7e1a      	ldrb	r2, [r3, #24]
 800d77a:	4b39      	ldr	r3, [pc, #228]	; (800d860 <taskComputeRc+0x79c>)
 800d77c:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d77e:	4b38      	ldr	r3, [pc, #224]	; (800d860 <taskComputeRc+0x79c>)
 800d780:	7d1b      	ldrb	r3, [r3, #20]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d005      	beq.n	800d792 <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d786:	4b39      	ldr	r3, [pc, #228]	; (800d86c <taskComputeRc+0x7a8>)
 800d788:	2201      	movs	r2, #1
 800d78a:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d78c:	4b37      	ldr	r3, [pc, #220]	; (800d86c <taskComputeRc+0x7a8>)
 800d78e:	2201      	movs	r2, #1
 800d790:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d792:	4b36      	ldr	r3, [pc, #216]	; (800d86c <taskComputeRc+0x7a8>)
 800d794:	785b      	ldrb	r3, [r3, #1]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10c      	bne.n	800d7b4 <taskComputeRc+0x6f0>
 800d79a:	4b3a      	ldr	r3, [pc, #232]	; (800d884 <taskComputeRc+0x7c0>)
 800d79c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4b2c      	ldr	r3, [pc, #176]	; (800d854 <taskComputeRc+0x790>)
 800d7a4:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	4299      	cmp	r1, r3
 800d7b2:	dd30      	ble.n	800d816 <taskComputeRc+0x752>
 800d7b4:	2002      	movs	r0, #2
 800d7b6:	f7f9 fac3 	bl	8006d40 <sensors>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d02a      	beq.n	800d816 <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d7c0:	4b27      	ldr	r3, [pc, #156]	; (800d860 <taskComputeRc+0x79c>)
 800d7c2:	78db      	ldrb	r3, [r3, #3]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d108      	bne.n	800d7da <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d7c8:	4b2f      	ldr	r3, [pc, #188]	; (800d888 <taskComputeRc+0x7c4>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d7ce:	4b2e      	ldr	r3, [pc, #184]	; (800d888 <taskComputeRc+0x7c4>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d7d4:	4b22      	ldr	r3, [pc, #136]	; (800d860 <taskComputeRc+0x79c>)
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d7da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d7de:	f7f9 faf7 	bl	8006dd0 <feature>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d01d      	beq.n	800d824 <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d7e8:	4b26      	ldr	r3, [pc, #152]	; (800d884 <taskComputeRc+0x7c0>)
 800d7ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4b18      	ldr	r3, [pc, #96]	; (800d854 <taskComputeRc+0x790>)
 800d7f2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	4299      	cmp	r1, r3
 800d800:	dd10      	ble.n	800d824 <taskComputeRc+0x760>
 800d802:	2020      	movs	r0, #32
 800d804:	f7f9 fa9c 	bl	8006d40 <sensors>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00a      	beq.n	800d824 <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d80e:	4b14      	ldr	r3, [pc, #80]	; (800d860 <taskComputeRc+0x79c>)
 800d810:	2201      	movs	r2, #1
 800d812:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d814:	e006      	b.n	800d824 <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d816:	4b12      	ldr	r3, [pc, #72]	; (800d860 <taskComputeRc+0x79c>)
 800d818:	2200      	movs	r2, #0
 800d81a:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d81c:	4b10      	ldr	r3, [pc, #64]	; (800d860 <taskComputeRc+0x79c>)
 800d81e:	2200      	movs	r2, #0
 800d820:	749a      	strb	r2, [r3, #18]
 800d822:	e000      	b.n	800d826 <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d824:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d826:	4b11      	ldr	r3, [pc, #68]	; (800d86c <taskComputeRc+0x7a8>)
 800d828:	789b      	ldrb	r3, [r3, #2]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d02e      	beq.n	800d88c <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <taskComputeRc+0x79c>)
 800d830:	2200      	movs	r2, #0
 800d832:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d834:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <taskComputeRc+0x79c>)
 800d836:	791b      	ldrb	r3, [r3, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d12a      	bne.n	800d892 <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d83c:	4b12      	ldr	r3, [pc, #72]	; (800d888 <taskComputeRc+0x7c4>)
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d842:	4b11      	ldr	r3, [pc, #68]	; (800d888 <taskComputeRc+0x7c4>)
 800d844:	2200      	movs	r2, #0
 800d846:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d848:	4b05      	ldr	r3, [pc, #20]	; (800d860 <taskComputeRc+0x79c>)
 800d84a:	2201      	movs	r2, #1
 800d84c:	711a      	strb	r2, [r3, #4]
 800d84e:	e020      	b.n	800d892 <taskComputeRc+0x7ce>
 800d850:	200019f4 	.word	0x200019f4
 800d854:	20000e64 	.word	0x20000e64
 800d858:	200019f5 	.word	0x200019f5
 800d85c:	200018d4 	.word	0x200018d4
 800d860:	20001738 	.word	0x20001738
 800d864:	20001770 	.word	0x20001770
 800d868:	200008f8 	.word	0x200008f8
 800d86c:	200017d8 	.word	0x200017d8
 800d870:	200018d8 	.word	0x200018d8
 800d874:	200018d7 	.word	0x200018d7
 800d878:	200018d5 	.word	0x200018d5
 800d87c:	200018d6 	.word	0x200018d6
 800d880:	20000840 	.word	0x20000840
 800d884:	2000176c 	.word	0x2000176c
 800d888:	200018f0 	.word	0x200018f0
            }
        } else {
            f.HORIZON_MODE = 0;
 800d88c:	4b9c      	ldr	r3, [pc, #624]	; (800db00 <taskComputeRc+0xa3c>)
 800d88e:	2200      	movs	r2, #0
 800d890:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d892:	4b9c      	ldr	r3, [pc, #624]	; (800db04 <taskComputeRc+0xa40>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d89a:	4b99      	ldr	r3, [pc, #612]	; (800db00 <taskComputeRc+0xa3c>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d8a0:	4b97      	ldr	r3, [pc, #604]	; (800db00 <taskComputeRc+0xa3c>)
 800d8a2:	78db      	ldrb	r3, [r3, #3]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d103      	bne.n	800d8b0 <taskComputeRc+0x7ec>
 800d8a8:	4b95      	ldr	r3, [pc, #596]	; (800db00 <taskComputeRc+0xa3c>)
 800d8aa:	791b      	ldrb	r3, [r3, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d003      	beq.n	800d8b8 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	f7f4 fa4f 	bl	8001d54 <actLed1State>
 800d8b6:	e002      	b.n	800d8be <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f7f4 fa4b 	bl	8001d54 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d8be:	2004      	movs	r0, #4
 800d8c0:	f7f9 fa3e 	bl	8006d40 <sensors>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d033      	beq.n	800d932 <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d8ca:	4b8e      	ldr	r3, [pc, #568]	; (800db04 <taskComputeRc+0xa40>)
 800d8cc:	78db      	ldrb	r3, [r3, #3]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d016      	beq.n	800d900 <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d8d2:	4b8b      	ldr	r3, [pc, #556]	; (800db00 <taskComputeRc+0xa3c>)
 800d8d4:	799b      	ldrb	r3, [r3, #6]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d115      	bne.n	800d906 <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d8da:	4b89      	ldr	r3, [pc, #548]	; (800db00 <taskComputeRc+0xa3c>)
 800d8dc:	2201      	movs	r2, #1
 800d8de:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d8e0:	4b89      	ldr	r3, [pc, #548]	; (800db08 <taskComputeRc+0xa44>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a89      	ldr	r2, [pc, #548]	; (800db0c <taskComputeRc+0xa48>)
 800d8e6:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d8e8:	4b89      	ldr	r3, [pc, #548]	; (800db10 <taskComputeRc+0xa4c>)
 800d8ea:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d8ee:	4b89      	ldr	r3, [pc, #548]	; (800db14 <taskComputeRc+0xa50>)
 800d8f0:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d8f2:	4b89      	ldr	r3, [pc, #548]	; (800db18 <taskComputeRc+0xa54>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d8f8:	4b88      	ldr	r3, [pc, #544]	; (800db1c <taskComputeRc+0xa58>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	e002      	b.n	800d906 <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d900:	4b7f      	ldr	r3, [pc, #508]	; (800db00 <taskComputeRc+0xa3c>)
 800d902:	2200      	movs	r2, #0
 800d904:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d906:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d90a:	f7f9 fa61 	bl	8006dd0 <feature>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00e      	beq.n	800d932 <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d914:	4b7b      	ldr	r3, [pc, #492]	; (800db04 <taskComputeRc+0xa40>)
 800d916:	791b      	ldrb	r3, [r3, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d007      	beq.n	800d92c <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d91c:	4b78      	ldr	r3, [pc, #480]	; (800db00 <taskComputeRc+0xa3c>)
 800d91e:	7bdb      	ldrb	r3, [r3, #15]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d106      	bne.n	800d932 <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d924:	4b76      	ldr	r3, [pc, #472]	; (800db00 <taskComputeRc+0xa3c>)
 800d926:	2201      	movs	r2, #1
 800d928:	73da      	strb	r2, [r3, #15]
 800d92a:	e002      	b.n	800d932 <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d92c:	4b74      	ldr	r3, [pc, #464]	; (800db00 <taskComputeRc+0xa3c>)
 800d92e:	2200      	movs	r2, #0
 800d930:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d932:	2002      	movs	r0, #2
 800d934:	f7f9 fa04 	bl	8006d40 <sensors>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d105      	bne.n	800d94a <taskComputeRc+0x886>
 800d93e:	2008      	movs	r0, #8
 800d940:	f7f9 f9fe 	bl	8006d40 <sensors>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d02b      	beq.n	800d9a2 <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d94a:	4b6e      	ldr	r3, [pc, #440]	; (800db04 <taskComputeRc+0xa40>)
 800d94c:	795b      	ldrb	r3, [r3, #5]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00c      	beq.n	800d96c <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d952:	4b6b      	ldr	r3, [pc, #428]	; (800db00 <taskComputeRc+0xa3c>)
 800d954:	795b      	ldrb	r3, [r3, #5]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10b      	bne.n	800d972 <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d95a:	4b69      	ldr	r3, [pc, #420]	; (800db00 <taskComputeRc+0xa3c>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d960:	4b6f      	ldr	r3, [pc, #444]	; (800db20 <taskComputeRc+0xa5c>)
 800d962:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d966:	4b6f      	ldr	r3, [pc, #444]	; (800db24 <taskComputeRc+0xa60>)
 800d968:	801a      	strh	r2, [r3, #0]
 800d96a:	e002      	b.n	800d972 <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d96c:	4b64      	ldr	r3, [pc, #400]	; (800db00 <taskComputeRc+0xa3c>)
 800d96e:	2200      	movs	r2, #0
 800d970:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d972:	4b64      	ldr	r3, [pc, #400]	; (800db04 <taskComputeRc+0xa40>)
 800d974:	799b      	ldrb	r3, [r3, #6]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d007      	beq.n	800d98a <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d97a:	4b61      	ldr	r3, [pc, #388]	; (800db00 <taskComputeRc+0xa3c>)
 800d97c:	7a5b      	ldrb	r3, [r3, #9]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d982:	4b5f      	ldr	r3, [pc, #380]	; (800db00 <taskComputeRc+0xa3c>)
 800d984:	2201      	movs	r2, #1
 800d986:	725a      	strb	r2, [r3, #9]
 800d988:	e002      	b.n	800d990 <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d98a:	4b5d      	ldr	r3, [pc, #372]	; (800db00 <taskComputeRc+0xa3c>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d990:	4b5c      	ldr	r3, [pc, #368]	; (800db04 <taskComputeRc+0xa40>)
 800d992:	79db      	ldrb	r3, [r3, #7]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d998:	4b61      	ldr	r3, [pc, #388]	; (800db20 <taskComputeRc+0xa5c>)
 800d99a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d99e:	4b62      	ldr	r3, [pc, #392]	; (800db28 <taskComputeRc+0xa64>)
 800d9a0:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d9a2:	2020      	movs	r0, #32
 800d9a4:	f7f9 f9cc 	bl	8006d40 <sensors>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 809c 	beq.w	800dae8 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d9b0:	4b53      	ldr	r3, [pc, #332]	; (800db00 <taskComputeRc+0xa3c>)
 800d9b2:	7adb      	ldrb	r3, [r3, #11]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 808e 	beq.w	800dad6 <taskComputeRc+0xa12>
 800d9ba:	4b5c      	ldr	r3, [pc, #368]	; (800db2c <taskComputeRc+0xa68>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	f240 8089 	bls.w	800dad6 <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d9c4:	4b5a      	ldr	r3, [pc, #360]	; (800db30 <taskComputeRc+0xa6c>)
 800d9c6:	f993 3000 	ldrsb.w	r3, [r3]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <taskComputeRc+0x920>
 800d9ce:	4b4c      	ldr	r3, [pc, #304]	; (800db00 <taskComputeRc+0xa3c>)
 800d9d0:	791b      	ldrb	r3, [r3, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <taskComputeRc+0x920>
 800d9d6:	4b4a      	ldr	r3, [pc, #296]	; (800db00 <taskComputeRc+0xa3c>)
 800d9d8:	78db      	ldrb	r3, [r3, #3]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d102      	bne.n	800d9e4 <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d9de:	4b48      	ldr	r3, [pc, #288]	; (800db00 <taskComputeRc+0xa3c>)
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d9e4:	4b47      	ldr	r3, [pc, #284]	; (800db04 <taskComputeRc+0xa40>)
 800d9e6:	7a9b      	ldrb	r3, [r3, #10]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d103      	bne.n	800d9f4 <taskComputeRc+0x930>
 800d9ec:	4b44      	ldr	r3, [pc, #272]	; (800db00 <taskComputeRc+0xa3c>)
 800d9ee:	7c9b      	ldrb	r3, [r3, #18]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01c      	beq.n	800da2e <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d9f4:	4b42      	ldr	r3, [pc, #264]	; (800db00 <taskComputeRc+0xa3c>)
 800d9f6:	79db      	ldrb	r3, [r3, #7]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d168      	bne.n	800dace <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d9fc:	4b40      	ldr	r3, [pc, #256]	; (800db00 <taskComputeRc+0xa3c>)
 800d9fe:	2201      	movs	r2, #1
 800da00:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800da02:	4b3f      	ldr	r3, [pc, #252]	; (800db00 <taskComputeRc+0xa3c>)
 800da04:	2200      	movs	r2, #0
 800da06:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800da08:	4b4a      	ldr	r3, [pc, #296]	; (800db34 <taskComputeRc+0xa70>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800da0e:	494a      	ldr	r1, [pc, #296]	; (800db38 <taskComputeRc+0xa74>)
 800da10:	484a      	ldr	r0, [pc, #296]	; (800db3c <taskComputeRc+0xa78>)
 800da12:	f7fb fac9 	bl	8008fa8 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800da16:	4b46      	ldr	r3, [pc, #280]	; (800db30 <taskComputeRc+0xa6c>)
 800da18:	2202      	movs	r2, #2
 800da1a:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800da1c:	4b48      	ldr	r3, [pc, #288]	; (800db40 <taskComputeRc+0xa7c>)
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	461a      	mov	r2, r3
 800da22:	4b48      	ldr	r3, [pc, #288]	; (800db44 <taskComputeRc+0xa80>)
 800da24:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800da26:	4b36      	ldr	r3, [pc, #216]	; (800db00 <taskComputeRc+0xa3c>)
 800da28:	2201      	movs	r2, #1
 800da2a:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800da2c:	e04f      	b.n	800dace <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800da2e:	4b34      	ldr	r3, [pc, #208]	; (800db00 <taskComputeRc+0xa3c>)
 800da30:	2200      	movs	r2, #0
 800da32:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800da34:	4b33      	ldr	r3, [pc, #204]	; (800db04 <taskComputeRc+0xa40>)
 800da36:	7adb      	ldrb	r3, [r3, #11]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d039      	beq.n	800dab0 <taskComputeRc+0x9ec>
 800da3c:	4b34      	ldr	r3, [pc, #208]	; (800db10 <taskComputeRc+0xa4c>)
 800da3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da42:	2b00      	cmp	r3, #0
 800da44:	bfb8      	it	lt
 800da46:	425b      	neglt	r3, r3
 800da48:	b29a      	uxth	r2, r3
 800da4a:	4b3f      	ldr	r3, [pc, #252]	; (800db48 <taskComputeRc+0xa84>)
 800da4c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da50:	429a      	cmp	r2, r3
 800da52:	d22d      	bcs.n	800dab0 <taskComputeRc+0x9ec>
 800da54:	4b2e      	ldr	r3, [pc, #184]	; (800db10 <taskComputeRc+0xa4c>)
 800da56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	bfb8      	it	lt
 800da5e:	425b      	neglt	r3, r3
 800da60:	b29a      	uxth	r2, r3
 800da62:	4b39      	ldr	r3, [pc, #228]	; (800db48 <taskComputeRc+0xa84>)
 800da64:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800da68:	429a      	cmp	r2, r3
 800da6a:	d221      	bcs.n	800dab0 <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800da6c:	4b24      	ldr	r3, [pc, #144]	; (800db00 <taskComputeRc+0xa3c>)
 800da6e:	7a1b      	ldrb	r3, [r3, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d12c      	bne.n	800dace <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800da74:	4b22      	ldr	r3, [pc, #136]	; (800db00 <taskComputeRc+0xa3c>)
 800da76:	2201      	movs	r2, #1
 800da78:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800da7a:	4b2e      	ldr	r3, [pc, #184]	; (800db34 <taskComputeRc+0xa70>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800da80:	4b32      	ldr	r3, [pc, #200]	; (800db4c <taskComputeRc+0xa88>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a2f      	ldr	r2, [pc, #188]	; (800db44 <taskComputeRc+0xa80>)
 800da86:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800da88:	4b30      	ldr	r3, [pc, #192]	; (800db4c <taskComputeRc+0xa88>)
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	4a2d      	ldr	r2, [pc, #180]	; (800db44 <taskComputeRc+0xa80>)
 800da8e:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800da90:	492f      	ldr	r1, [pc, #188]	; (800db50 <taskComputeRc+0xa8c>)
 800da92:	482c      	ldr	r0, [pc, #176]	; (800db44 <taskComputeRc+0xa80>)
 800da94:	f7fb fa88 	bl	8008fa8 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800da98:	4b25      	ldr	r3, [pc, #148]	; (800db30 <taskComputeRc+0xa6c>)
 800da9a:	2201      	movs	r2, #1
 800da9c:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800da9e:	4b28      	ldr	r3, [pc, #160]	; (800db40 <taskComputeRc+0xa7c>)
 800daa0:	881b      	ldrh	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	4b27      	ldr	r3, [pc, #156]	; (800db44 <taskComputeRc+0xa80>)
 800daa6:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800daa8:	4b15      	ldr	r3, [pc, #84]	; (800db00 <taskComputeRc+0xa3c>)
 800daaa:	2200      	movs	r2, #0
 800daac:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800daae:	e00e      	b.n	800dace <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800dab0:	4b13      	ldr	r3, [pc, #76]	; (800db00 <taskComputeRc+0xa3c>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800dab6:	4b1f      	ldr	r3, [pc, #124]	; (800db34 <taskComputeRc+0xa70>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d107      	bne.n	800dace <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800dabe:	4b1d      	ldr	r3, [pc, #116]	; (800db34 <taskComputeRc+0xa70>)
 800dac0:	2201      	movs	r2, #1
 800dac2:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800dac4:	f7fb f8e8 	bl	8008c98 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800dac8:	4b0d      	ldr	r3, [pc, #52]	; (800db00 <taskComputeRc+0xa3c>)
 800daca:	2200      	movs	r2, #0
 800dacc:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800dace:	200c      	movs	r0, #12
 800dad0:	f7f6 f9aa 	bl	8003e28 <buzzer>
 800dad4:	e008      	b.n	800dae8 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800dad6:	4b0a      	ldr	r3, [pc, #40]	; (800db00 <taskComputeRc+0xa3c>)
 800dad8:	2200      	movs	r2, #0
 800dada:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800dadc:	4b08      	ldr	r3, [pc, #32]	; (800db00 <taskComputeRc+0xa3c>)
 800dade:	2200      	movs	r2, #0
 800dae0:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <taskComputeRc+0xa6c>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800dae8:	4b06      	ldr	r3, [pc, #24]	; (800db04 <taskComputeRc+0xa40>)
 800daea:	7b1b      	ldrb	r3, [r3, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d031      	beq.n	800db54 <taskComputeRc+0xa90>
 800daf0:	4b03      	ldr	r3, [pc, #12]	; (800db00 <taskComputeRc+0xa3c>)
 800daf2:	7c9b      	ldrb	r3, [r3, #18]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d12d      	bne.n	800db54 <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800daf8:	4b01      	ldr	r3, [pc, #4]	; (800db00 <taskComputeRc+0xa3c>)
 800dafa:	2201      	movs	r2, #1
 800dafc:	729a      	strb	r2, [r3, #10]
 800dafe:	e02c      	b.n	800db5a <taskComputeRc+0xa96>
 800db00:	20001738 	.word	0x20001738
 800db04:	200017d8 	.word	0x200017d8
 800db08:	200014a4 	.word	0x200014a4
 800db0c:	200014ac 	.word	0x200014ac
 800db10:	20001794 	.word	0x20001794
 800db14:	200018f8 	.word	0x200018f8
 800db18:	200014b8 	.word	0x200014b8
 800db1c:	200014a8 	.word	0x200014a8
 800db20:	20001a08 	.word	0x20001a08
 800db24:	20001a0a 	.word	0x20001a0a
 800db28:	2000175a 	.word	0x2000175a
 800db2c:	2000181c 	.word	0x2000181c
 800db30:	20001838 	.word	0x20001838
 800db34:	20000058 	.word	0x20000058
 800db38:	20001808 	.word	0x20001808
 800db3c:	20001804 	.word	0x20001804
 800db40:	20001822 	.word	0x20001822
 800db44:	20001810 	.word	0x20001810
 800db48:	20000e64 	.word	0x20000e64
 800db4c:	200017fc 	.word	0x200017fc
 800db50:	20001814 	.word	0x20001814
        } else {
            f.PASSTHRU_MODE = 0;
 800db54:	4b47      	ldr	r3, [pc, #284]	; (800dc74 <taskComputeRc+0xbb0>)
 800db56:	2200      	movs	r2, #0
 800db58:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800db5a:	4b46      	ldr	r3, [pc, #280]	; (800dc74 <taskComputeRc+0xbb0>)
 800db5c:	7c1b      	ldrb	r3, [r3, #16]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d047      	beq.n	800dbf2 <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800db62:	4b44      	ldr	r3, [pc, #272]	; (800dc74 <taskComputeRc+0xbb0>)
 800db64:	2200      	movs	r2, #0
 800db66:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800db68:	f44f 7000 	mov.w	r0, #512	; 0x200
 800db6c:	f7f9 f930 	bl	8006dd0 <feature>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d03d      	beq.n	800dbf2 <taskComputeRc+0xb2e>
 800db76:	4b40      	ldr	r3, [pc, #256]	; (800dc78 <taskComputeRc+0xbb4>)
 800db78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db7c:	4619      	mov	r1, r3
 800db7e:	4b3f      	ldr	r3, [pc, #252]	; (800dc7c <taskComputeRc+0xbb8>)
 800db80:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800db84:	461a      	mov	r2, r3
 800db86:	4613      	mov	r3, r2
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	4413      	add	r3, r2
 800db8c:	005b      	lsls	r3, r3, #1
 800db8e:	4299      	cmp	r1, r3
 800db90:	dd2f      	ble.n	800dbf2 <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800db92:	4b38      	ldr	r3, [pc, #224]	; (800dc74 <taskComputeRc+0xbb0>)
 800db94:	2200      	movs	r2, #0
 800db96:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800db98:	4b36      	ldr	r3, [pc, #216]	; (800dc74 <taskComputeRc+0xbb0>)
 800db9a:	2201      	movs	r2, #1
 800db9c:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800db9e:	2300      	movs	r3, #0
 800dba0:	613b      	str	r3, [r7, #16]
 800dba2:	e00a      	b.n	800dbba <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800dba4:	4b36      	ldr	r3, [pc, #216]	; (800dc80 <taskComputeRc+0xbbc>)
 800dba6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dbaa:	b219      	sxth	r1, r3
 800dbac:	4a35      	ldr	r2, [pc, #212]	; (800dc84 <taskComputeRc+0xbc0>)
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	613b      	str	r3, [r7, #16]
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	ddf1      	ble.n	800dba4 <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800dbc0:	4b2e      	ldr	r3, [pc, #184]	; (800dc7c <taskComputeRc+0xbb8>)
 800dbc2:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800dbc6:	b21a      	sxth	r2, r3
 800dbc8:	4b2e      	ldr	r3, [pc, #184]	; (800dc84 <taskComputeRc+0xbc0>)
 800dbca:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800dbcc:	4b29      	ldr	r3, [pc, #164]	; (800dc74 <taskComputeRc+0xbb0>)
 800dbce:	7adb      	ldrb	r3, [r3, #11]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10e      	bne.n	800dbf2 <taskComputeRc+0xb2e>
 800dbd4:	4b2c      	ldr	r3, [pc, #176]	; (800dc88 <taskComputeRc+0xbc4>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b05      	cmp	r3, #5
 800dbda:	d80a      	bhi.n	800dbf2 <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800dbdc:	4b25      	ldr	r3, [pc, #148]	; (800dc74 <taskComputeRc+0xbb0>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800dbe2:	4b27      	ldr	r3, [pc, #156]	; (800dc80 <taskComputeRc+0xbbc>)
 800dbe4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dbe8:	3b32      	subs	r3, #50	; 0x32
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	b21a      	sxth	r2, r3
 800dbee:	4b25      	ldr	r3, [pc, #148]	; (800dc84 <taskComputeRc+0xbc0>)
 800dbf0:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800dbf2:	2010      	movs	r0, #16
 800dbf4:	f7f9 f8ec 	bl	8006dd0 <feature>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d035      	beq.n	800dc6a <taskComputeRc+0xba6>
 800dbfe:	4b1d      	ldr	r3, [pc, #116]	; (800dc74 <taskComputeRc+0xbb0>)
 800dc00:	785b      	ldrb	r3, [r3, #1]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d031      	beq.n	800dc6a <taskComputeRc+0xba6>
 800dc06:	4b1b      	ldr	r3, [pc, #108]	; (800dc74 <taskComputeRc+0xbb0>)
 800dc08:	7c1b      	ldrb	r3, [r3, #16]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d12d      	bne.n	800dc6a <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d023      	beq.n	800dc5c <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800dc14:	4b1d      	ldr	r3, [pc, #116]	; (800dc8c <taskComputeRc+0xbc8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10e      	bne.n	800dc3a <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800dc1c:	4b18      	ldr	r3, [pc, #96]	; (800dc80 <taskComputeRc+0xbbc>)
 800dc1e:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dc22:	461a      	mov	r2, r3
 800dc24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc28:	fb02 f303 	mul.w	r3, r2, r3
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	4b18      	ldr	r3, [pc, #96]	; (800dc90 <taskComputeRc+0xbcc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4413      	add	r3, r2
 800dc34:	4a15      	ldr	r2, [pc, #84]	; (800dc8c <taskComputeRc+0xbc8>)
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	e00c      	b.n	800dc54 <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800dc3a:	4b14      	ldr	r3, [pc, #80]	; (800dc8c <taskComputeRc+0xbc8>)
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	4b14      	ldr	r3, [pc, #80]	; (800dc90 <taskComputeRc+0xbcc>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d206      	bcs.n	800dc54 <taskComputeRc+0xb90>
 800dc46:	4b0e      	ldr	r3, [pc, #56]	; (800dc80 <taskComputeRc+0xbbc>)
 800dc48:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <taskComputeRc+0xb90>
                    mwDisarm();
 800dc50:	f7fe ff16 	bl	800ca80 <mwDisarm>
                buzzer(BUZZER_ARMED);
 800dc54:	2009      	movs	r0, #9
 800dc56:	f7f6 f8e7 	bl	8003e28 <buzzer>
 800dc5a:	e006      	b.n	800dc6a <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800dc5c:	4b0b      	ldr	r3, [pc, #44]	; (800dc8c <taskComputeRc+0xbc8>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <taskComputeRc+0xba6>
                disarmTime = 0;
 800dc64:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <taskComputeRc+0xbc8>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800dc6a:	2300      	movs	r3, #0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	20001738 	.word	0x20001738
 800dc78:	2000176c 	.word	0x2000176c
 800dc7c:	20000e64 	.word	0x20000e64
 800dc80:	200008f8 	.word	0x200008f8
 800dc84:	20001770 	.word	0x20001770
 800dc88:	2000181c 	.word	0x2000181c
 800dc8c:	200018e0 	.word	0x200018e0
 800dc90:	20001c6c 	.word	0x20001c6c

0800dc94 <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800dc9c:	4b15      	ldr	r3, [pc, #84]	; (800dcf4 <taskLoop+0x60>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <taskLoop+0x16>
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d00f      	beq.n	800dcc8 <taskLoop+0x34>
 800dca8:	e01f      	b.n	800dcea <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800dcaa:	4b12      	ldr	r3, [pc, #72]	; (800dcf4 <taskLoop+0x60>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	4a10      	ldr	r2, [pc, #64]	; (800dcf4 <taskLoop+0x60>)
 800dcb2:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800dcb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dcb8:	f7f9 f88a 	bl	8006dd0 <feature>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <taskLoop+0x34>
				gpsThread();
 800dcc2:	f7fa fb51 	bl	8008368 <gpsThread>
				break;
 800dcc6:	e010      	b.n	800dcea <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <taskLoop+0x60>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dcce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dcd2:	f7f9 f87d 	bl	8006dd0 <feature>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d005      	beq.n	800dce8 <taskLoop+0x54>
 800dcdc:	4b06      	ldr	r3, [pc, #24]	; (800dcf8 <taskLoop+0x64>)
 800dcde:	7bdb      	ldrb	r3, [r3, #15]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <taskLoop+0x54>
				mwVario();
 800dce4:	f7fe fee6 	bl	800cab4 <mwVario>
			break;
 800dce8:	bf00      	nop
	}
    return 0;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	200019f8 	.word	0x200019f8
 800dcf8:	20001738 	.word	0x20001738

0800dcfc <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
	static int step = 0;

    switch (step) {
 800dd04:	4ba1      	ldr	r3, [pc, #644]	; (800df8c <taskComputeImu+0x290>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b06      	cmp	r3, #6
 800dd0a:	f200 82be 	bhi.w	800e28a <taskComputeImu+0x58e>
 800dd0e:	a201      	add	r2, pc, #4	; (adr r2, 800dd14 <taskComputeImu+0x18>)
 800dd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd14:	0800dd31 	.word	0x0800dd31
 800dd18:	0800dd41 	.word	0x0800dd41
 800dd1c:	0800dd41 	.word	0x0800dd41
 800dd20:	0800dd41 	.word	0x0800dd41
 800dd24:	0800dd59 	.word	0x0800dd59
 800dd28:	0800dd6b 	.word	0x0800dd6b
 800dd2c:	0800e271 	.word	0x0800e271
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800dd30:	2101      	movs	r1, #1
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f006 fca4 	bl	8014680 <pifTask_GetDeltaTime>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	4b94      	ldr	r3, [pc, #592]	; (800df90 <taskComputeImu+0x294>)
 800dd3e:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800dd40:	4b92      	ldr	r3, [pc, #584]	; (800df8c <taskComputeImu+0x290>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fb fe07 	bl	8009958 <computeIMU>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	4a8f      	ldr	r2, [pc, #572]	; (800df8c <taskComputeImu+0x290>)
 800dd4e:	6013      	str	r3, [r2, #0]
        pifTask_SetTrigger(p_task);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f006 fc6f 	bl	8014634 <pifTask_SetTrigger>
		break;
 800dd56:	e298      	b.n	800e28a <taskComputeImu+0x58e>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800dd58:	f7fe f99a 	bl	800c090 <annexCode>
        step = 5;
 800dd5c:	4b8b      	ldr	r3, [pc, #556]	; (800df8c <taskComputeImu+0x290>)
 800dd5e:	2205      	movs	r2, #5
 800dd60:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f006 fc66 	bl	8014634 <pifTask_SetTrigger>
    	break;
 800dd68:	e28f      	b.n	800e28a <taskComputeImu+0x58e>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dd6a:	2008      	movs	r0, #8
 800dd6c:	f7f8 ffe8 	bl	8006d40 <sensors>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d057      	beq.n	800de26 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dd76:	4b87      	ldr	r3, [pc, #540]	; (800df94 <taskComputeImu+0x298>)
 800dd78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	bfb8      	it	lt
 800dd80:	425b      	neglt	r3, r3
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	2b45      	cmp	r3, #69	; 0x45
 800dd86:	d847      	bhi.n	800de18 <taskComputeImu+0x11c>
 800dd88:	4b83      	ldr	r3, [pc, #524]	; (800df98 <taskComputeImu+0x29c>)
 800dd8a:	795b      	ldrb	r3, [r3, #5]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d043      	beq.n	800de18 <taskComputeImu+0x11c>
                int16_t dif = heading - magHold;
 800dd90:	4b82      	ldr	r3, [pc, #520]	; (800df9c <taskComputeImu+0x2a0>)
 800dd92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	4b81      	ldr	r3, [pc, #516]	; (800dfa0 <taskComputeImu+0x2a4>)
 800dd9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dda6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddaa:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800ddae:	da04      	bge.n	800ddba <taskComputeImu+0xbe>
                    dif += 360;
 800ddb0:	8afb      	ldrh	r3, [r7, #22]
 800ddb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800ddba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddbe:	2bb3      	cmp	r3, #179	; 0xb3
 800ddc0:	dd04      	ble.n	800ddcc <taskComputeImu+0xd0>
                    dif -= 360;
 800ddc2:	8afb      	ldrh	r3, [r7, #22]
 800ddc4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800ddcc:	4b75      	ldr	r3, [pc, #468]	; (800dfa4 <taskComputeImu+0x2a8>)
 800ddce:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800ddd2:	425b      	negs	r3, r3
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	8afb      	ldrh	r3, [r7, #22]
 800ddd8:	fb12 f303 	smulbb	r3, r2, r3
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dde0:	4b6d      	ldr	r3, [pc, #436]	; (800df98 <taskComputeImu+0x29c>)
 800dde2:	7b5b      	ldrb	r3, [r3, #13]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d01d      	beq.n	800de24 <taskComputeImu+0x128>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dde8:	4b6a      	ldr	r3, [pc, #424]	; (800df94 <taskComputeImu+0x298>)
 800ddea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddf4:	496c      	ldr	r1, [pc, #432]	; (800dfa8 <taskComputeImu+0x2ac>)
 800ddf6:	7a49      	ldrb	r1, [r1, #9]
 800ddf8:	fb01 f303 	mul.w	r3, r1, r3
 800ddfc:	496b      	ldr	r1, [pc, #428]	; (800dfac <taskComputeImu+0x2b0>)
 800ddfe:	fb81 0103 	smull	r0, r1, r1, r3
 800de02:	4419      	add	r1, r3
 800de04:	1109      	asrs	r1, r1, #4
 800de06:	17db      	asrs	r3, r3, #31
 800de08:	1a5b      	subs	r3, r3, r1
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	4413      	add	r3, r2
 800de0e:	b29b      	uxth	r3, r3
 800de10:	b21a      	sxth	r2, r3
 800de12:	4b60      	ldr	r3, [pc, #384]	; (800df94 <taskComputeImu+0x298>)
 800de14:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800de16:	e005      	b.n	800de24 <taskComputeImu+0x128>
            } else
                magHold = heading;
 800de18:	4b60      	ldr	r3, [pc, #384]	; (800df9c <taskComputeImu+0x2a0>)
 800de1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800de1e:	4b60      	ldr	r3, [pc, #384]	; (800dfa0 <taskComputeImu+0x2a4>)
 800de20:	801a      	strh	r2, [r3, #0]
 800de22:	e000      	b.n	800de26 <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800de24:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800de26:	2004      	movs	r0, #4
 800de28:	f7f8 ff8a 	bl	8006d40 <sensors>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 80e1 	beq.w	800dff6 <taskComputeImu+0x2fa>
            if (f.BARO_MODE) {
 800de34:	4b58      	ldr	r3, [pc, #352]	; (800df98 <taskComputeImu+0x29c>)
 800de36:	799b      	ldrb	r3, [r3, #6]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 80dc 	beq.w	800dff6 <taskComputeImu+0x2fa>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800de3e:	4b56      	ldr	r3, [pc, #344]	; (800df98 <taskComputeImu+0x29c>)
 800de40:	7c1b      	ldrb	r3, [r3, #16]
 800de42:	2b00      	cmp	r3, #0
 800de44:	f040 80c4 	bne.w	800dfd0 <taskComputeImu+0x2d4>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800de48:	4b57      	ldr	r3, [pc, #348]	; (800dfa8 <taskComputeImu+0x2ac>)
 800de4a:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d053      	beq.n	800defa <taskComputeImu+0x1fe>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800de52:	4b50      	ldr	r3, [pc, #320]	; (800df94 <taskComputeImu+0x298>)
 800de54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de58:	461a      	mov	r2, r3
 800de5a:	4b55      	ldr	r3, [pc, #340]	; (800dfb0 <taskComputeImu+0x2b4>)
 800de5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	bfb8      	it	lt
 800de66:	425b      	neglt	r3, r3
 800de68:	4a4f      	ldr	r2, [pc, #316]	; (800dfa8 <taskComputeImu+0x2ac>)
 800de6a:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800de6e:	4293      	cmp	r3, r2
 800de70:	dd22      	ble.n	800deb8 <taskComputeImu+0x1bc>
                            errorVelocityI = 0;
 800de72:	4b50      	ldr	r3, [pc, #320]	; (800dfb4 <taskComputeImu+0x2b8>)
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de78:	4b4f      	ldr	r3, [pc, #316]	; (800dfb8 <taskComputeImu+0x2bc>)
 800de7a:	2201      	movs	r2, #1
 800de7c:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800de7e:	4b45      	ldr	r3, [pc, #276]	; (800df94 <taskComputeImu+0x298>)
 800de80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de84:	b29a      	uxth	r2, r3
 800de86:	4b43      	ldr	r3, [pc, #268]	; (800df94 <taskComputeImu+0x298>)
 800de88:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800de8c:	4b48      	ldr	r3, [pc, #288]	; (800dfb0 <taskComputeImu+0x2b4>)
 800de8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de92:	4299      	cmp	r1, r3
 800de94:	dd06      	ble.n	800dea4 <taskComputeImu+0x1a8>
 800de96:	4b44      	ldr	r3, [pc, #272]	; (800dfa8 <taskComputeImu+0x2ac>)
 800de98:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	425b      	negs	r3, r3
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	e003      	b.n	800deac <taskComputeImu+0x1b0>
 800dea4:	4b40      	ldr	r3, [pc, #256]	; (800dfa8 <taskComputeImu+0x2ac>)
 800dea6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800deaa:	b29b      	uxth	r3, r3
 800deac:	4413      	add	r3, r2
 800deae:	b29b      	uxth	r3, r3
 800deb0:	b21a      	sxth	r2, r3
 800deb2:	4b38      	ldr	r3, [pc, #224]	; (800df94 <taskComputeImu+0x298>)
 800deb4:	80da      	strh	r2, [r3, #6]
 800deb6:	e09e      	b.n	800dff6 <taskComputeImu+0x2fa>
                        } else {
                            if (isAltHoldChanged) {
 800deb8:	4b3f      	ldr	r3, [pc, #252]	; (800dfb8 <taskComputeImu+0x2bc>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d006      	beq.n	800dece <taskComputeImu+0x1d2>
                                AltHold = EstAlt;
 800dec0:	4b3e      	ldr	r3, [pc, #248]	; (800dfbc <taskComputeImu+0x2c0>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a3e      	ldr	r2, [pc, #248]	; (800dfc0 <taskComputeImu+0x2c4>)
 800dec6:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800dec8:	4b3b      	ldr	r3, [pc, #236]	; (800dfb8 <taskComputeImu+0x2bc>)
 800deca:	2200      	movs	r2, #0
 800decc:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800dece:	4b38      	ldr	r3, [pc, #224]	; (800dfb0 <taskComputeImu+0x2b4>)
 800ded0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ded4:	461a      	mov	r2, r3
 800ded6:	4b3b      	ldr	r3, [pc, #236]	; (800dfc4 <taskComputeImu+0x2c8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4413      	add	r3, r2
 800dedc:	4a31      	ldr	r2, [pc, #196]	; (800dfa4 <taskComputeImu+0x2a8>)
 800dede:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800dee2:	4611      	mov	r1, r2
 800dee4:	4a2f      	ldr	r2, [pc, #188]	; (800dfa4 <taskComputeImu+0x2a8>)
 800dee6:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800deea:	4618      	mov	r0, r3
 800deec:	f7f5 fe0e 	bl	8003b0c <constrain>
 800def0:	4603      	mov	r3, r0
 800def2:	b21a      	sxth	r2, r3
 800def4:	4b27      	ldr	r3, [pc, #156]	; (800df94 <taskComputeImu+0x298>)
 800def6:	80da      	strh	r2, [r3, #6]
 800def8:	e07d      	b.n	800dff6 <taskComputeImu+0x2fa>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800defa:	4b26      	ldr	r3, [pc, #152]	; (800df94 <taskComputeImu+0x298>)
 800defc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df00:	461a      	mov	r2, r3
 800df02:	4b2b      	ldr	r3, [pc, #172]	; (800dfb0 <taskComputeImu+0x2b4>)
 800df04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	bfb8      	it	lt
 800df0e:	425b      	neglt	r3, r3
 800df10:	4a25      	ldr	r2, [pc, #148]	; (800dfa8 <taskComputeImu+0x2ac>)
 800df12:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800df16:	4293      	cmp	r3, r2
 800df18:	dd14      	ble.n	800df44 <taskComputeImu+0x248>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800df1a:	4b1e      	ldr	r3, [pc, #120]	; (800df94 <taskComputeImu+0x298>)
 800df1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800df20:	461a      	mov	r2, r3
 800df22:	4b23      	ldr	r3, [pc, #140]	; (800dfb0 <taskComputeImu+0x2b4>)
 800df24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	0fda      	lsrs	r2, r3, #31
 800df2c:	4413      	add	r3, r2
 800df2e:	105b      	asrs	r3, r3, #1
 800df30:	461a      	mov	r2, r3
 800df32:	4b25      	ldr	r3, [pc, #148]	; (800dfc8 <taskComputeImu+0x2cc>)
 800df34:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800df36:	4b25      	ldr	r3, [pc, #148]	; (800dfcc <taskComputeImu+0x2d0>)
 800df38:	2201      	movs	r2, #1
 800df3a:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800df3c:	4b1e      	ldr	r3, [pc, #120]	; (800dfb8 <taskComputeImu+0x2bc>)
 800df3e:	2201      	movs	r2, #1
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	e00d      	b.n	800df60 <taskComputeImu+0x264>
                        } else if (isAltHoldChanged) {
 800df44:	4b1c      	ldr	r3, [pc, #112]	; (800dfb8 <taskComputeImu+0x2bc>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d009      	beq.n	800df60 <taskComputeImu+0x264>
                            AltHold = EstAlt;
 800df4c:	4b1b      	ldr	r3, [pc, #108]	; (800dfbc <taskComputeImu+0x2c0>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a1b      	ldr	r2, [pc, #108]	; (800dfc0 <taskComputeImu+0x2c4>)
 800df52:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800df54:	4b1d      	ldr	r3, [pc, #116]	; (800dfcc <taskComputeImu+0x2d0>)
 800df56:	2200      	movs	r2, #0
 800df58:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800df5a:	4b17      	ldr	r3, [pc, #92]	; (800dfb8 <taskComputeImu+0x2bc>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800df60:	4b13      	ldr	r3, [pc, #76]	; (800dfb0 <taskComputeImu+0x2b4>)
 800df62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df66:	461a      	mov	r2, r3
 800df68:	4b16      	ldr	r3, [pc, #88]	; (800dfc4 <taskComputeImu+0x2c8>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4413      	add	r3, r2
 800df6e:	4a0d      	ldr	r2, [pc, #52]	; (800dfa4 <taskComputeImu+0x2a8>)
 800df70:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800df74:	4611      	mov	r1, r2
 800df76:	4a0b      	ldr	r2, [pc, #44]	; (800dfa4 <taskComputeImu+0x2a8>)
 800df78:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7f5 fdc5 	bl	8003b0c <constrain>
 800df82:	4603      	mov	r3, r0
 800df84:	b21a      	sxth	r2, r3
 800df86:	4b03      	ldr	r3, [pc, #12]	; (800df94 <taskComputeImu+0x298>)
 800df88:	80da      	strh	r2, [r3, #6]
 800df8a:	e034      	b.n	800dff6 <taskComputeImu+0x2fa>
 800df8c:	200019fc 	.word	0x200019fc
 800df90:	20001758 	.word	0x20001758
 800df94:	20001794 	.word	0x20001794
 800df98:	20001738 	.word	0x20001738
 800df9c:	20001a08 	.word	0x20001a08
 800dfa0:	20001a0a 	.word	0x20001a0a
 800dfa4:	200008f8 	.word	0x200008f8
 800dfa8:	20000e64 	.word	0x20000e64
 800dfac:	88888889 	.word	0x88888889
 800dfb0:	200018f8 	.word	0x200018f8
 800dfb4:	200014b8 	.word	0x200014b8
 800dfb8:	20001a00 	.word	0x20001a00
 800dfbc:	200014a4 	.word	0x200014a4
 800dfc0:	200014ac 	.word	0x200014ac
 800dfc4:	200014a8 	.word	0x200014a8
 800dfc8:	200014b0 	.word	0x200014b0
 800dfcc:	200014b4 	.word	0x200014b4
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800dfd0:	4bb0      	ldr	r3, [pc, #704]	; (800e294 <taskComputeImu+0x598>)
 800dfd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4baf      	ldr	r3, [pc, #700]	; (800e298 <taskComputeImu+0x59c>)
 800dfda:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800dfde:	b299      	uxth	r1, r3
 800dfe0:	4bae      	ldr	r3, [pc, #696]	; (800e29c <taskComputeImu+0x5a0>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	fb11 f303 	smulbb	r3, r1, r3
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	4413      	add	r3, r2
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	b21a      	sxth	r2, r3
 800dff2:	4ba8      	ldr	r3, [pc, #672]	; (800e294 <taskComputeImu+0x598>)
 800dff4:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800dff6:	4baa      	ldr	r3, [pc, #680]	; (800e2a0 <taskComputeImu+0x5a4>)
 800dff8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d014      	beq.n	800e02a <taskComputeImu+0x32e>
 800e000:	4ba8      	ldr	r3, [pc, #672]	; (800e2a4 <taskComputeImu+0x5a8>)
 800e002:	78db      	ldrb	r3, [r3, #3]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d103      	bne.n	800e010 <taskComputeImu+0x314>
 800e008:	4ba6      	ldr	r3, [pc, #664]	; (800e2a4 <taskComputeImu+0x5a8>)
 800e00a:	791b      	ldrb	r3, [r3, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00c      	beq.n	800e02a <taskComputeImu+0x32e>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800e010:	4ba0      	ldr	r3, [pc, #640]	; (800e294 <taskComputeImu+0x598>)
 800e012:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e016:	b29a      	uxth	r2, r3
 800e018:	4ba3      	ldr	r3, [pc, #652]	; (800e2a8 <taskComputeImu+0x5ac>)
 800e01a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e01e:	b29b      	uxth	r3, r3
 800e020:	4413      	add	r3, r2
 800e022:	b29b      	uxth	r3, r3
 800e024:	b21a      	sxth	r2, r3
 800e026:	4b9b      	ldr	r3, [pc, #620]	; (800e294 <taskComputeImu+0x598>)
 800e028:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800e02a:	2020      	movs	r0, #32
 800e02c:	f7f8 fe88 	bl	8006d40 <sensors>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 8115 	beq.w	800e262 <taskComputeImu+0x566>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e038:	4b9a      	ldr	r3, [pc, #616]	; (800e2a4 <taskComputeImu+0x5a8>)
 800e03a:	79db      	ldrb	r3, [r3, #7]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d104      	bne.n	800e04a <taskComputeImu+0x34e>
 800e040:	4b98      	ldr	r3, [pc, #608]	; (800e2a4 <taskComputeImu+0x5a8>)
 800e042:	7a1b      	ldrb	r3, [r3, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f000 8103 	beq.w	800e250 <taskComputeImu+0x554>
 800e04a:	4b96      	ldr	r3, [pc, #600]	; (800e2a4 <taskComputeImu+0x5a8>)
 800e04c:	7b1b      	ldrb	r3, [r3, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 80fe 	beq.w	800e250 <taskComputeImu+0x554>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800e054:	4b95      	ldr	r3, [pc, #596]	; (800e2ac <taskComputeImu+0x5b0>)
 800e056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e05a:	ee07 3a90 	vmov	s15, r3
 800e05e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e062:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e2b0 <taskComputeImu+0x5b4>
 800e066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e06a:	eeb0 0a67 	vmov.f32	s0, s15
 800e06e:	f015 fb47 	bl	8023700 <sinf>
 800e072:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800e076:	4b8d      	ldr	r3, [pc, #564]	; (800e2ac <taskComputeImu+0x5b0>)
 800e078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e07c:	ee07 3a90 	vmov	s15, r3
 800e080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e084:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e2b0 <taskComputeImu+0x5b4>
 800e088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e08c:	eeb0 0a67 	vmov.f32	s0, s15
 800e090:	f015 fab2 	bl	80235f8 <cosf>
 800e094:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800e098:	4b82      	ldr	r3, [pc, #520]	; (800e2a4 <taskComputeImu+0x5a8>)
 800e09a:	7c1b      	ldrb	r3, [r3, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 80d4 	bne.w	800e24a <taskComputeImu+0x54e>
                    if (cfg.nav_slew_rate) {
 800e0a2:	4b7f      	ldr	r3, [pc, #508]	; (800e2a0 <taskComputeImu+0x5a4>)
 800e0a4:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f000 8087 	beq.w	800e1bc <taskComputeImu+0x4c0>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800e0ae:	4b81      	ldr	r3, [pc, #516]	; (800e2b4 <taskComputeImu+0x5b8>)
 800e0b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	4b80      	ldr	r3, [pc, #512]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e0b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fb fb68 	bl	8009794 <wrap_18000>
 800e0c4:	4b76      	ldr	r3, [pc, #472]	; (800e2a0 <taskComputeImu+0x5a4>)
 800e0c6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e0ca:	425b      	negs	r3, r3
 800e0cc:	4a74      	ldr	r2, [pc, #464]	; (800e2a0 <taskComputeImu+0x5a4>)
 800e0ce:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f7f5 fd1a 	bl	8003b0c <constrain>
 800e0d8:	4601      	mov	r1, r0
 800e0da:	4b77      	ldr	r3, [pc, #476]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e0dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	b28b      	uxth	r3, r1
 800e0e4:	4413      	add	r3, r2
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	b21a      	sxth	r2, r3
 800e0ea:	4b73      	ldr	r3, [pc, #460]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e0ec:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800e0ee:	4b71      	ldr	r3, [pc, #452]	; (800e2b4 <taskComputeImu+0x5b8>)
 800e0f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	4b70      	ldr	r3, [pc, #448]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e0f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fb fb48 	bl	8009794 <wrap_18000>
 800e104:	4b66      	ldr	r3, [pc, #408]	; (800e2a0 <taskComputeImu+0x5a4>)
 800e106:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800e10a:	425b      	negs	r3, r3
 800e10c:	4a64      	ldr	r2, [pc, #400]	; (800e2a0 <taskComputeImu+0x5a4>)
 800e10e:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800e112:	4619      	mov	r1, r3
 800e114:	f7f5 fcfa 	bl	8003b0c <constrain>
 800e118:	4601      	mov	r1, r0
 800e11a:	4b67      	ldr	r3, [pc, #412]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e11c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e120:	b29a      	uxth	r2, r3
 800e122:	b28b      	uxth	r3, r1
 800e124:	4413      	add	r3, r2
 800e126:	b29b      	uxth	r3, r3
 800e128:	b21a      	sxth	r2, r3
 800e12a:	4b63      	ldr	r3, [pc, #396]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e12c:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e12e:	4b62      	ldr	r3, [pc, #392]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e130:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e134:	ee07 3a90 	vmov	s15, r3
 800e138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e13c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e140:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e144:	4b5c      	ldr	r3, [pc, #368]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e14a:	ee07 3a90 	vmov	s15, r3
 800e14e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e152:	edd7 7a04 	vldr	s15, [r7, #16]
 800e156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e15a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e15e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e16a:	ee17 3a90 	vmov	r3, s15
 800e16e:	b21a      	sxth	r2, r3
 800e170:	4b52      	ldr	r3, [pc, #328]	; (800e2bc <taskComputeImu+0x5c0>)
 800e172:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e174:	4b50      	ldr	r3, [pc, #320]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e17a:	ee07 3a90 	vmov	s15, r3
 800e17e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e182:	edd7 7a04 	vldr	s15, [r7, #16]
 800e186:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e18a:	4b4b      	ldr	r3, [pc, #300]	; (800e2b8 <taskComputeImu+0x5bc>)
 800e18c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e190:	ee07 3a90 	vmov	s15, r3
 800e194:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e198:	edd7 7a03 	vldr	s15, [r7, #12]
 800e19c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1b0:	ee17 3a90 	vmov	r3, s15
 800e1b4:	b21a      	sxth	r2, r3
 800e1b6:	4b41      	ldr	r3, [pc, #260]	; (800e2bc <taskComputeImu+0x5c0>)
 800e1b8:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e1ba:	e052      	b.n	800e262 <taskComputeImu+0x566>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e1bc:	4b3d      	ldr	r3, [pc, #244]	; (800e2b4 <taskComputeImu+0x5b8>)
 800e1be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e1c2:	ee07 3a90 	vmov	s15, r3
 800e1c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e1ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800e1ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1d2:	4b38      	ldr	r3, [pc, #224]	; (800e2b4 <taskComputeImu+0x5b8>)
 800e1d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1d8:	ee07 3a90 	vmov	s15, r3
 800e1dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e1e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1ec:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e1f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e1f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1f8:	ee17 3a90 	vmov	r3, s15
 800e1fc:	b21a      	sxth	r2, r3
 800e1fe:	4b2f      	ldr	r3, [pc, #188]	; (800e2bc <taskComputeImu+0x5c0>)
 800e200:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e202:	4b2c      	ldr	r3, [pc, #176]	; (800e2b4 <taskComputeImu+0x5b8>)
 800e204:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e208:	ee07 3a90 	vmov	s15, r3
 800e20c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e210:	edd7 7a04 	vldr	s15, [r7, #16]
 800e214:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e218:	4b26      	ldr	r3, [pc, #152]	; (800e2b4 <taskComputeImu+0x5b8>)
 800e21a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e21e:	ee07 3a90 	vmov	s15, r3
 800e222:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e226:	edd7 7a03 	vldr	s15, [r7, #12]
 800e22a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e22e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e232:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e23a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e23e:	ee17 3a90 	vmov	r3, s15
 800e242:	b21a      	sxth	r2, r3
 800e244:	4b1d      	ldr	r3, [pc, #116]	; (800e2bc <taskComputeImu+0x5c0>)
 800e246:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e248:	e00b      	b.n	800e262 <taskComputeImu+0x566>
                    }
                } else fw_nav();
 800e24a:	f7f8 fef3 	bl	8007034 <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e24e:	e008      	b.n	800e262 <taskComputeImu+0x566>
            } else {
                GPS_angle[ROLL] = 0;
 800e250:	4b1a      	ldr	r3, [pc, #104]	; (800e2bc <taskComputeImu+0x5c0>)
 800e252:	2200      	movs	r2, #0
 800e254:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e256:	4b19      	ldr	r3, [pc, #100]	; (800e2bc <taskComputeImu+0x5c0>)
 800e258:	2200      	movs	r2, #0
 800e25a:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e25c:	4b17      	ldr	r3, [pc, #92]	; (800e2bc <taskComputeImu+0x5c0>)
 800e25e:	2200      	movs	r2, #0
 800e260:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e262:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <taskComputeImu+0x5c4>)
 800e264:	2206      	movs	r2, #6
 800e266:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f006 f9e3 	bl	8014634 <pifTask_SetTrigger>
    	break;
 800e26e:	e00c      	b.n	800e28a <taskComputeImu+0x58e>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e270:	4b14      	ldr	r3, [pc, #80]	; (800e2c4 <taskComputeImu+0x5c8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4798      	blx	r3

        mixTable();
 800e276:	f7fd fb71 	bl	800b95c <mixTable>
        writeServos();
 800e27a:	f7fc ffc7 	bl	800b20c <writeServos>
        writeMotors();
 800e27e:	f7fd f8fd 	bl	800b47c <writeMotors>
        step = 0;
 800e282:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <taskComputeImu+0x5c4>)
 800e284:	2200      	movs	r2, #0
 800e286:	601a      	str	r2, [r3, #0]
    	break;
 800e288:	bf00      	nop
	}

    return 0;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	20001794 	.word	0x20001794
 800e298:	200008f8 	.word	0x200008f8
 800e29c:	200014a8 	.word	0x200014a8
 800e2a0:	20000e64 	.word	0x20000e64
 800e2a4:	20001738 	.word	0x20001738
 800e2a8:	200014c0 	.word	0x200014c0
 800e2ac:	20001a08 	.word	0x20001a08
 800e2b0:	3c8efa35 	.word	0x3c8efa35
 800e2b4:	20001830 	.word	0x20001830
 800e2b8:	20001834 	.word	0x20001834
 800e2bc:	20001828 	.word	0x20001828
 800e2c0:	200019fc 	.word	0x200019fc
 800e2c4:	20000050 	.word	0x20000050

0800e2c8 <mspFrameRecieve>:
{
    return rcData[chan];
}

void mspFrameRecieve(void)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e2cc:	4b04      	ldr	r3, [pc, #16]	; (800e2e0 <mspFrameRecieve+0x18>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	801a      	strh	r2, [r3, #0]

    pifTask_SetTrigger(g_task_compute_rc);
 800e2d2:	4b04      	ldr	r3, [pc, #16]	; (800e2e4 <mspFrameRecieve+0x1c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f006 f9ac 	bl	8014634 <pifTask_SetTrigger>
}
 800e2dc:	bf00      	nop
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	2000176c 	.word	0x2000176c
 800e2e4:	20001594 	.word	0x20001594

0800e2e8 <sensorsAutodetect>:
#endif
};


bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&sensor_set.imu_sensor);
 800e2f6:	4878      	ldr	r0, [pc, #480]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e2f8:	f00b fad4 	bl	80198a4 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&sensor_set.imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e2fc:	4b77      	ldr	r3, [pc, #476]	; (800e4dc <sensorsAutodetect+0x1f4>)
 800e2fe:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e302:	4b76      	ldr	r3, [pc, #472]	; (800e4dc <sensorsAutodetect+0x1f4>)
 800e304:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e308:	4b74      	ldr	r3, [pc, #464]	; (800e4dc <sensorsAutodetect+0x1f4>)
 800e30a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e30e:	4872      	ldr	r0, [pc, #456]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e310:	f00b fae2 	bl	80198d8 <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e314:	4b71      	ldr	r3, [pc, #452]	; (800e4dc <sensorsAutodetect+0x1f4>)
 800e316:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e31a:	4b6f      	ldr	r3, [pc, #444]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e31c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e320:	e010      	b.n	800e344 <sensorsAutodetect+0x5c>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68fa      	ldr	r2, [r7, #12]
 800e328:	6852      	ldr	r2, [r2, #4]
 800e32a:	4611      	mov	r1, r2
 800e32c:	486a      	ldr	r0, [pc, #424]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e32e:	4798      	blx	r3
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d003      	beq.n	800e33e <sensorsAutodetect+0x56>
    	    sensorsSet(SENSOR_GYRO);
 800e336:	2001      	movs	r0, #1
 800e338:	f7f8 fd18 	bl	8006d6c <sensorsSet>
    		break;
 800e33c:	e006      	b.n	800e34c <sensorsAutodetect+0x64>
    	}
    	gyroDetect++;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	3308      	adds	r3, #8
 800e342:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1ea      	bne.n	800e322 <sensorsAutodetect+0x3a>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e34c:	4b62      	ldr	r3, [pc, #392]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e34e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <sensorsAutodetect+0x70>
 800e354:	2300      	movs	r3, #0
 800e356:	e0ba      	b.n	800e4ce <sensorsAutodetect+0x1e6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e358:	4b5f      	ldr	r3, [pc, #380]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <sensorsAutodetect+0x82>
    	sensorsSet(SENSOR_ACC);
 800e362:	2002      	movs	r0, #2
 800e364:	f7f8 fd02 	bl	8006d6c <sensorsSet>
 800e368:	e018      	b.n	800e39c <sensorsAutodetect+0xb4>
    }
    else if (accDetect) {
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d015      	beq.n	800e39c <sensorsAutodetect+0xb4>
        while (accDetect->p_func) {
 800e370:	e010      	b.n	800e394 <sensorsAutodetect+0xac>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	6852      	ldr	r2, [r2, #4]
 800e37a:	4611      	mov	r1, r2
 800e37c:	4856      	ldr	r0, [pc, #344]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e37e:	4798      	blx	r3
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d003      	beq.n	800e38e <sensorsAutodetect+0xa6>
            	sensorsSet(SENSOR_ACC);
 800e386:	2002      	movs	r0, #2
 800e388:	f7f8 fcf0 	bl	8006d6c <sensorsSet>
        		break;
 800e38c:	e006      	b.n	800e39c <sensorsAutodetect+0xb4>
        	}
        	accDetect++;
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	3308      	adds	r3, #8
 800e392:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1ea      	bne.n	800e372 <sensorsAutodetect+0x8a>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e39c:	4b4e      	ldr	r3, [pc, #312]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e39e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d003      	beq.n	800e3ae <sensorsAutodetect+0xc6>
    	sensorsSet(SENSOR_BARO);
 800e3a6:	2004      	movs	r0, #4
 800e3a8:	f7f8 fce0 	bl	8006d6c <sensorsSet>
 800e3ac:	e018      	b.n	800e3e0 <sensorsAutodetect+0xf8>
    }
    else if (baroDetect) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d015      	beq.n	800e3e0 <sensorsAutodetect+0xf8>
		while (baroDetect->p_func) {
 800e3b4:	e010      	b.n	800e3d8 <sensorsAutodetect+0xf0>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	6852      	ldr	r2, [r2, #4]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	4845      	ldr	r0, [pc, #276]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e3c2:	4798      	blx	r3
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <sensorsAutodetect+0xea>
				sensorsSet(SENSOR_BARO);
 800e3ca:	2004      	movs	r0, #4
 800e3cc:	f7f8 fcce 	bl	8006d6c <sensorsSet>
				break;
 800e3d0:	e006      	b.n	800e3e0 <sensorsAutodetect+0xf8>
			}
			baroDetect++;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1ea      	bne.n	800e3b6 <sensorsAutodetect+0xce>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e3e0:	2002      	movs	r0, #2
 800e3e2:	f7f8 fcad 	bl	8006d40 <sensors>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d008      	beq.n	800e3fe <sensorsAutodetect+0x116>
        sensor_set.acc.init(&sensor_set, mcfg.acc_align);
 800e3ec:	4b3a      	ldr	r3, [pc, #232]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3f2:	4a3a      	ldr	r2, [pc, #232]	; (800e4dc <sensorsAutodetect+0x1f4>)
 800e3f4:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4837      	ldr	r0, [pc, #220]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e3fc:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(&sensor_set, mcfg.gyro_align);
 800e3fe:	4b36      	ldr	r3, [pc, #216]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e402:	4a36      	ldr	r2, [pc, #216]	; (800e4dc <sensorsAutodetect+0x1f4>)
 800e404:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e408:	4611      	mov	r1, r2
 800e40a:	4833      	ldr	r0, [pc, #204]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e40c:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e40e:	4b32      	ldr	r3, [pc, #200]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e414:	2b00      	cmp	r3, #0
 800e416:	d003      	beq.n	800e420 <sensorsAutodetect+0x138>
    	sensorsSet(SENSOR_MAG);
 800e418:	2008      	movs	r0, #8
 800e41a:	f7f8 fca7 	bl	8006d6c <sensorsSet>
 800e41e:	e018      	b.n	800e452 <sensorsAutodetect+0x16a>
    }
    else if (magDetect) {
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d015      	beq.n	800e452 <sensorsAutodetect+0x16a>
		while (magDetect->p_func) {
 800e426:	e010      	b.n	800e44a <sensorsAutodetect+0x162>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	6852      	ldr	r2, [r2, #4]
 800e430:	4611      	mov	r1, r2
 800e432:	4829      	ldr	r0, [pc, #164]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e434:	4798      	blx	r3
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d003      	beq.n	800e444 <sensorsAutodetect+0x15c>
				sensorsSet(SENSOR_MAG);
 800e43c:	2008      	movs	r0, #8
 800e43e:	f7f8 fc95 	bl	8006d6c <sensorsSet>
				break;
 800e442:	e006      	b.n	800e452 <sensorsAutodetect+0x16a>
			}
			magDetect++;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	3308      	adds	r3, #8
 800e448:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1ea      	bne.n	800e428 <sensorsAutodetect+0x140>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e452:	4b23      	ldr	r3, [pc, #140]	; (800e4e0 <sensorsAutodetect+0x1f8>)
 800e454:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e458:	4a22      	ldr	r2, [pc, #136]	; (800e4e4 <sensorsAutodetect+0x1fc>)
 800e45a:	fb82 1203 	smull	r1, r2, r2, r3
 800e45e:	1152      	asrs	r2, r2, #5
 800e460:	17db      	asrs	r3, r3, #31
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e466:	4b1e      	ldr	r3, [pc, #120]	; (800e4e0 <sensorsAutodetect+0x1f8>)
 800e468:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e46c:	4a1d      	ldr	r2, [pc, #116]	; (800e4e4 <sensorsAutodetect+0x1fc>)
 800e46e:	fb82 1203 	smull	r1, r2, r2, r3
 800e472:	1151      	asrs	r1, r2, #5
 800e474:	17da      	asrs	r2, r3, #31
 800e476:	1a8a      	subs	r2, r1, r2
 800e478:	2164      	movs	r1, #100	; 0x64
 800e47a:	fb01 f202 	mul.w	r2, r1, r2
 800e47e:	1a9b      	subs	r3, r3, r2
 800e480:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e482:	2008      	movs	r0, #8
 800e484:	f7f8 fc5c 	bl	8006d40 <sensors>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d019      	beq.n	800e4c2 <sensorsAutodetect+0x1da>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e48e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e492:	ee07 3a90 	vmov	s15, r3
 800e496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e49a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e49e:	ee07 3a90 	vmov	s15, r3
 800e4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4a6:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e4e8 <sensorsAutodetect+0x200>
 800e4aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e4ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e4b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4ba:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e4bc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800e4c0:	e004      	b.n	800e4cc <sensorsAutodetect+0x1e4>
    else
        sensor_set.mag.declination = 0.0f;
 800e4c2:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <sensorsAutodetect+0x1f0>)
 800e4c4:	f04f 0200 	mov.w	r2, #0
 800e4c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    return true;
 800e4cc:	2301      	movs	r3, #1
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3718      	adds	r7, #24
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	2000005c 	.word	0x2000005c
 800e4dc:	200008f8 	.word	0x200008f8
 800e4e0:	20000e64 	.word	0x20000e64
 800e4e4:	51eb851f 	.word	0x51eb851f
 800e4e8:	3c888889 	.word	0x3c888889

0800e4ec <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e4f6:	4b2a      	ldr	r3, [pc, #168]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e4f8:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d029      	beq.n	800e554 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e500:	4b27      	ldr	r3, [pc, #156]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e502:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e506:	3303      	adds	r3, #3
 800e508:	4a26      	ldr	r2, [pc, #152]	; (800e5a4 <RSSI_getValue+0xb8>)
 800e50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e50e:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e514:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e518:	4a21      	ldr	r2, [pc, #132]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e51a:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e51e:	2100      	movs	r1, #0
 800e520:	4618      	mov	r0, r3
 800e522:	f7f5 faf3 	bl	8003b0c <constrain>
 800e526:	ee07 0a90 	vmov	s15, r0
 800e52a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e52e:	4b1c      	ldr	r3, [pc, #112]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e530:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e534:	ee07 3a90 	vmov	s15, r3
 800e538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e540:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e5a8 <RSSI_getValue+0xbc>
 800e544:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e54c:	ee17 3a90 	vmov	r3, s15
 800e550:	80fb      	strh	r3, [r7, #6]
 800e552:	e020      	b.n	800e596 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e554:	4b12      	ldr	r3, [pc, #72]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e556:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d01b      	beq.n	800e596 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e55e:	2003      	movs	r0, #3
 800e560:	f7f2 fe22 	bl	80011a8 <actGetAdcChannel>
 800e564:	4603      	mov	r3, r0
 800e566:	461a      	mov	r2, r3
 800e568:	4b0d      	ldr	r3, [pc, #52]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e56a:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e56e:	1ad2      	subs	r2, r2, r3
 800e570:	4613      	mov	r3, r2
 800e572:	029b      	lsls	r3, r3, #10
 800e574:	1a9b      	subs	r3, r3, r2
 800e576:	4a0a      	ldr	r2, [pc, #40]	; (800e5a0 <RSSI_getValue+0xb4>)
 800e578:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e580:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e582:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e586:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e58a:	2100      	movs	r1, #0
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f5 fabd 	bl	8003b0c <constrain>
 800e592:	4603      	mov	r3, r0
 800e594:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e596:	88fb      	ldrh	r3, [r7, #6]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	200008f8 	.word	0x200008f8
 800e5a4:	20001770 	.word	0x20001770
 800e5a8:	447fc000 	.word	0x447fc000

0800e5ac <batteryInit>:

void batteryInit(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e5b2:	f04f 0300 	mov.w	r3, #0
 800e5b6:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	607b      	str	r3, [r7, #4]
 800e5bc:	e018      	b.n	800e5f0 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e5be:	f7f2 fe05 	bl	80011cc <actGetBatteryVoltage>
 800e5c2:	eeb0 7a40 	vmov.f32	s14, s0
 800e5c6:	4b35      	ldr	r3, [pc, #212]	; (800e69c <batteryInit+0xf0>)
 800e5c8:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e5cc:	ee07 3a90 	vmov	s15, r3
 800e5d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5d8:	ed97 7a00 	vldr	s14, [r7]
 800e5dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5e0:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e5e4:	200a      	movs	r0, #10
 800e5e6:	f002 fdbb 	bl	8011160 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	607b      	str	r3, [r7, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b1f      	cmp	r3, #31
 800e5f4:	d9e3      	bls.n	800e5be <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e5f6:	ed97 7a00 	vldr	s14, [r7]
 800e5fa:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e6a0 <batteryInit+0xf4>
 800e5fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e602:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
 800e606:	edd7 7a00 	vldr	s15, [r7]
 800e60a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e60e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e612:	ee16 0a90 	vmov	r0, s13
 800e616:	f7f1 ff4b 	bl	80004b0 <__aeabi_f2d>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	4921      	ldr	r1, [pc, #132]	; (800e6a4 <batteryInit+0xf8>)
 800e620:	2002      	movs	r0, #2
 800e622:	f004 ff43 	bl	80134ac <pifLog_Printf>
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e626:	2301      	movs	r3, #1
 800e628:	607b      	str	r3, [r7, #4]
 800e62a:	e014      	b.n	800e656 <batteryInit+0xaa>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e62c:	4b1b      	ldr	r3, [pc, #108]	; (800e69c <batteryInit+0xf0>)
 800e62e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e632:	461a      	mov	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	fb02 f303 	mul.w	r3, r2, r3
 800e63a:	ee07 3a90 	vmov	s15, r3
 800e63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e642:	ed97 7a00 	vldr	s14, [r7]
 800e646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64e:	d406      	bmi.n	800e65e <batteryInit+0xb2>
    for (i = 1; i < 8; i++) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3301      	adds	r3, #1
 800e654:	607b      	str	r3, [r7, #4]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b07      	cmp	r3, #7
 800e65a:	d9e7      	bls.n	800e62c <batteryInit+0x80>
 800e65c:	e000      	b.n	800e660 <batteryInit+0xb4>
            break;
 800e65e:	bf00      	nop
    }
    batteryCellCount = i;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	b2da      	uxtb	r2, r3
 800e664:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <batteryInit+0xfc>)
 800e666:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e668:	4b0c      	ldr	r3, [pc, #48]	; (800e69c <batteryInit+0xf0>)
 800e66a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e66e:	b29a      	uxth	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	b29b      	uxth	r3, r3
 800e674:	fb12 f303 	smulbb	r3, r2, r3
 800e678:	b29a      	uxth	r2, r3
 800e67a:	4b0c      	ldr	r3, [pc, #48]	; (800e6ac <batteryInit+0x100>)
 800e67c:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e67e:	4b07      	ldr	r3, [pc, #28]	; (800e69c <batteryInit+0xf0>)
 800e680:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e684:	b29a      	uxth	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	fb12 f303 	smulbb	r3, r2, r3
 800e68e:	b29a      	uxth	r2, r3
 800e690:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <batteryInit+0x104>)
 800e692:	801a      	strh	r2, [r3, #0]
}
 800e694:	bf00      	nop
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	200008f8 	.word	0x200008f8
 800e6a0:	42000000 	.word	0x42000000
 800e6a4:	080276a8 	.word	0x080276a8
 800e6a8:	20000054 	.word	0x20000054
 800e6ac:	200018da 	.word	0x200018da
 800e6b0:	200018dc 	.word	0x200018dc

0800e6b4 <ACC_Common>:

static void ACC_Common(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e6ba:	4b54      	ldr	r3, [pc, #336]	; (800e80c <ACC_Common+0x158>)
 800e6bc:	881b      	ldrh	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d079      	beq.n	800e7b6 <ACC_Common+0x102>
        for (axis = 0; axis < 3; axis++) {
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	607b      	str	r3, [r7, #4]
 800e6c6:	e032      	b.n	800e72e <ACC_Common+0x7a>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e6c8:	4b50      	ldr	r3, [pc, #320]	; (800e80c <ACC_Common+0x158>)
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e6d0:	d104      	bne.n	800e6dc <ACC_Common+0x28>
                a[axis] = 0;
 800e6d2:	4a4f      	ldr	r2, [pc, #316]	; (800e810 <ACC_Common+0x15c>)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e6dc:	4a4c      	ldr	r2, [pc, #304]	; (800e810 <ACC_Common+0x15c>)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6e4:	ee07 3a90 	vmov	s15, r3
 800e6e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6ec:	4a49      	ldr	r2, [pc, #292]	; (800e814 <ACC_Common+0x160>)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	edd3 7a00 	vldr	s15, [r3]
 800e6f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e700:	ee17 1a90 	vmov	r1, s15
 800e704:	4a42      	ldr	r2, [pc, #264]	; (800e810 <ACC_Common+0x15c>)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e70c:	4a41      	ldr	r2, [pc, #260]	; (800e814 <ACC_Common+0x160>)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4413      	add	r3, r2
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	601a      	str	r2, [r3, #0]
            mcfg.accZero[axis] = 0;
 800e71a:	4a3f      	ldr	r2, [pc, #252]	; (800e818 <ACC_Common+0x164>)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	33b4      	adds	r3, #180	; 0xb4
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	4413      	add	r3, r2
 800e724:	2200      	movs	r2, #0
 800e726:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3301      	adds	r3, #1
 800e72c:	607b      	str	r3, [r7, #4]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b02      	cmp	r3, #2
 800e732:	ddc9      	ble.n	800e6c8 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e734:	4b35      	ldr	r3, [pc, #212]	; (800e80c <ACC_Common+0x158>)
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d136      	bne.n	800e7aa <ACC_Common+0xf6>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e73c:	4b34      	ldr	r3, [pc, #208]	; (800e810 <ACC_Common+0x15c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	33c8      	adds	r3, #200	; 0xc8
 800e742:	4a36      	ldr	r2, [pc, #216]	; (800e81c <ACC_Common+0x168>)
 800e744:	fb82 1203 	smull	r1, r2, r2, r3
 800e748:	11d2      	asrs	r2, r2, #7
 800e74a:	17db      	asrs	r3, r3, #31
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	b21a      	sxth	r2, r3
 800e750:	4b31      	ldr	r3, [pc, #196]	; (800e818 <ACC_Common+0x164>)
 800e752:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e756:	4b2e      	ldr	r3, [pc, #184]	; (800e810 <ACC_Common+0x15c>)
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	33c8      	adds	r3, #200	; 0xc8
 800e75c:	4a2f      	ldr	r2, [pc, #188]	; (800e81c <ACC_Common+0x168>)
 800e75e:	fb82 1203 	smull	r1, r2, r2, r3
 800e762:	11d2      	asrs	r2, r2, #7
 800e764:	17db      	asrs	r3, r3, #31
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	b21a      	sxth	r2, r3
 800e76a:	4b2b      	ldr	r3, [pc, #172]	; (800e818 <ACC_Common+0x164>)
 800e76c:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - sensor_set.acc.acc_1G;
 800e770:	4b27      	ldr	r3, [pc, #156]	; (800e810 <ACC_Common+0x15c>)
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	33c8      	adds	r3, #200	; 0xc8
 800e776:	4a29      	ldr	r2, [pc, #164]	; (800e81c <ACC_Common+0x168>)
 800e778:	fb82 1203 	smull	r1, r2, r2, r3
 800e77c:	11d2      	asrs	r2, r2, #7
 800e77e:	17db      	asrs	r3, r3, #31
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	b29a      	uxth	r2, r3
 800e784:	4b26      	ldr	r3, [pc, #152]	; (800e820 <ACC_Common+0x16c>)
 800e786:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	b21a      	sxth	r2, r3
 800e790:	4b21      	ldr	r3, [pc, #132]	; (800e818 <ACC_Common+0x164>)
 800e792:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e796:	4b23      	ldr	r3, [pc, #140]	; (800e824 <ACC_Common+0x170>)
 800e798:	2200      	movs	r2, #0
 800e79a:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e79c:	4b21      	ldr	r3, [pc, #132]	; (800e824 <ACC_Common+0x170>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e7a2:	2101      	movs	r1, #1
 800e7a4:	2001      	movs	r0, #1
 800e7a6:	f7f7 ff31 	bl	800660c <writeEEPROM>
        }
        calibratingA--;
 800e7aa:	4b18      	ldr	r3, [pc, #96]	; (800e80c <ACC_Common+0x158>)
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	4b16      	ldr	r3, [pc, #88]	; (800e80c <ACC_Common+0x158>)
 800e7b4:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e7b6:	2004      	movs	r0, #4
 800e7b8:	f7f8 fb0a 	bl	8006dd0 <feature>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f000 80d7 	beq.w	800e972 <ACC_Common+0x2be>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e7c4:	4b18      	ldr	r3, [pc, #96]	; (800e828 <ACC_Common+0x174>)
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	2b32      	cmp	r3, #50	; 0x32
 800e7ca:	d118      	bne.n	800e7fe <ACC_Common+0x14a>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e7cc:	4b12      	ldr	r3, [pc, #72]	; (800e818 <ACC_Common+0x164>)
 800e7ce:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e7d2:	4b16      	ldr	r3, [pc, #88]	; (800e82c <ACC_Common+0x178>)
 800e7d4:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e7d6:	4b10      	ldr	r3, [pc, #64]	; (800e818 <ACC_Common+0x164>)
 800e7d8:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e7dc:	4b13      	ldr	r3, [pc, #76]	; (800e82c <ACC_Common+0x178>)
 800e7de:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e7e0:	4b0d      	ldr	r3, [pc, #52]	; (800e818 <ACC_Common+0x164>)
 800e7e2:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e7e6:	4b11      	ldr	r3, [pc, #68]	; (800e82c <ACC_Common+0x178>)
 800e7e8:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e7ea:	4b0e      	ldr	r3, [pc, #56]	; (800e824 <ACC_Common+0x170>)
 800e7ec:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e7f0:	4b0f      	ldr	r3, [pc, #60]	; (800e830 <ACC_Common+0x17c>)
 800e7f2:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e7f4:	4b0b      	ldr	r3, [pc, #44]	; (800e824 <ACC_Common+0x170>)
 800e7f6:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e7fa:	4b0d      	ldr	r3, [pc, #52]	; (800e830 <ACC_Common+0x17c>)
 800e7fc:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e7fe:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <ACC_Common+0x174>)
 800e800:	881b      	ldrh	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d07a      	beq.n	800e8fc <ACC_Common+0x248>
            for (axis = 0; axis < 3; axis++) {
 800e806:	2300      	movs	r3, #0
 800e808:	607b      	str	r3, [r7, #4]
 800e80a:	e045      	b.n	800e898 <ACC_Common+0x1e4>
 800e80c:	20001a02 	.word	0x20001a02
 800e810:	20001a1c 	.word	0x20001a1c
 800e814:	20001454 	.word	0x20001454
 800e818:	200008f8 	.word	0x200008f8
 800e81c:	51eb851f 	.word	0x51eb851f
 800e820:	2000005c 	.word	0x2000005c
 800e824:	20000e64 	.word	0x20000e64
 800e828:	200018d8 	.word	0x200018d8
 800e82c:	20001a28 	.word	0x20001a28
 800e830:	20001a30 	.word	0x20001a30
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e834:	4b67      	ldr	r3, [pc, #412]	; (800e9d4 <ACC_Common+0x320>)
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	2b32      	cmp	r3, #50	; 0x32
 800e83a:	d104      	bne.n	800e846 <ACC_Common+0x192>
                    b[axis] = 0;
 800e83c:	4a66      	ldr	r2, [pc, #408]	; (800e9d8 <ACC_Common+0x324>)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2100      	movs	r1, #0
 800e842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e846:	4a64      	ldr	r2, [pc, #400]	; (800e9d8 <ACC_Common+0x324>)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e856:	4a61      	ldr	r2, [pc, #388]	; (800e9dc <ACC_Common+0x328>)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4413      	add	r3, r2
 800e85e:	edd3 7a00 	vldr	s15, [r3]
 800e862:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e86a:	ee17 1a90 	vmov	r1, s15
 800e86e:	4a5a      	ldr	r2, [pc, #360]	; (800e9d8 <ACC_Common+0x324>)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e876:	4a59      	ldr	r2, [pc, #356]	; (800e9dc <ACC_Common+0x328>)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	4413      	add	r3, r2
 800e87e:	f04f 0200 	mov.w	r2, #0
 800e882:	601a      	str	r2, [r3, #0]
                mcfg.accZero[axis] = 0;
 800e884:	4a56      	ldr	r2, [pc, #344]	; (800e9e0 <ACC_Common+0x32c>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	33b4      	adds	r3, #180	; 0xb4
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	2200      	movs	r2, #0
 800e890:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	3301      	adds	r3, #1
 800e896:	607b      	str	r3, [r7, #4]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	ddca      	ble.n	800e834 <ACC_Common+0x180>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e89e:	4b4d      	ldr	r3, [pc, #308]	; (800e9d4 <ACC_Common+0x320>)
 800e8a0:	881b      	ldrh	r3, [r3, #0]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d124      	bne.n	800e8f0 <ACC_Common+0x23c>
                AccInflightCalibrationActive = false;
 800e8a6:	4b4f      	ldr	r3, [pc, #316]	; (800e9e4 <ACC_Common+0x330>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e8ac:	4b4e      	ldr	r3, [pc, #312]	; (800e9e8 <ACC_Common+0x334>)
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e8b2:	200a      	movs	r0, #10
 800e8b4:	f7f5 fab8 	bl	8003e28 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e8b8:	4b4c      	ldr	r3, [pc, #304]	; (800e9ec <ACC_Common+0x338>)
 800e8ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e8be:	4b48      	ldr	r3, [pc, #288]	; (800e9e0 <ACC_Common+0x32c>)
 800e8c0:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e8c4:	4b49      	ldr	r3, [pc, #292]	; (800e9ec <ACC_Common+0x338>)
 800e8c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e8ca:	4b45      	ldr	r3, [pc, #276]	; (800e9e0 <ACC_Common+0x32c>)
 800e8cc:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800e8d0:	4b46      	ldr	r3, [pc, #280]	; (800e9ec <ACC_Common+0x338>)
 800e8d2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e8d6:	4b42      	ldr	r3, [pc, #264]	; (800e9e0 <ACC_Common+0x32c>)
 800e8d8:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800e8dc:	4b44      	ldr	r3, [pc, #272]	; (800e9f0 <ACC_Common+0x33c>)
 800e8de:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e8e2:	4b44      	ldr	r3, [pc, #272]	; (800e9f4 <ACC_Common+0x340>)
 800e8e4:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800e8e6:	4b42      	ldr	r3, [pc, #264]	; (800e9f0 <ACC_Common+0x33c>)
 800e8e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e8ec:	4b41      	ldr	r3, [pc, #260]	; (800e9f4 <ACC_Common+0x340>)
 800e8ee:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800e8f0:	4b38      	ldr	r3, [pc, #224]	; (800e9d4 <ACC_Common+0x320>)
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	4b36      	ldr	r3, [pc, #216]	; (800e9d4 <ACC_Common+0x320>)
 800e8fa:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800e8fc:	4b3e      	ldr	r3, [pc, #248]	; (800e9f8 <ACC_Common+0x344>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d036      	beq.n	800e972 <ACC_Common+0x2be>
            AccInflightCalibrationSavetoEEProm = false;
 800e904:	4b3c      	ldr	r3, [pc, #240]	; (800e9f8 <ACC_Common+0x344>)
 800e906:	2200      	movs	r2, #0
 800e908:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800e90a:	4b33      	ldr	r3, [pc, #204]	; (800e9d8 <ACC_Common+0x324>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4a3b      	ldr	r2, [pc, #236]	; (800e9fc <ACC_Common+0x348>)
 800e910:	fb82 1203 	smull	r1, r2, r2, r3
 800e914:	1112      	asrs	r2, r2, #4
 800e916:	17db      	asrs	r3, r3, #31
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	b21a      	sxth	r2, r3
 800e91c:	4b30      	ldr	r3, [pc, #192]	; (800e9e0 <ACC_Common+0x32c>)
 800e91e:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800e922:	4b2d      	ldr	r3, [pc, #180]	; (800e9d8 <ACC_Common+0x324>)
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	4a35      	ldr	r2, [pc, #212]	; (800e9fc <ACC_Common+0x348>)
 800e928:	fb82 1203 	smull	r1, r2, r2, r3
 800e92c:	1112      	asrs	r2, r2, #4
 800e92e:	17db      	asrs	r3, r3, #31
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	b21a      	sxth	r2, r3
 800e934:	4b2a      	ldr	r3, [pc, #168]	; (800e9e0 <ACC_Common+0x32c>)
 800e936:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - sensor_set.acc.acc_1G;    // for nunchuk 200=1G
 800e93a:	4b27      	ldr	r3, [pc, #156]	; (800e9d8 <ACC_Common+0x324>)
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	4a2f      	ldr	r2, [pc, #188]	; (800e9fc <ACC_Common+0x348>)
 800e940:	fb82 1203 	smull	r1, r2, r2, r3
 800e944:	1112      	asrs	r2, r2, #4
 800e946:	17db      	asrs	r3, r3, #31
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	4b2c      	ldr	r3, [pc, #176]	; (800ea00 <ACC_Common+0x34c>)
 800e94e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	b29b      	uxth	r3, r3
 800e956:	b21a      	sxth	r2, r3
 800e958:	4b21      	ldr	r3, [pc, #132]	; (800e9e0 <ACC_Common+0x32c>)
 800e95a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e95e:	4b25      	ldr	r3, [pc, #148]	; (800e9f4 <ACC_Common+0x340>)
 800e960:	2200      	movs	r2, #0
 800e962:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e964:	4b23      	ldr	r3, [pc, #140]	; (800e9f4 <ACC_Common+0x340>)
 800e966:	2200      	movs	r2, #0
 800e968:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800e96a:	2101      	movs	r1, #1
 800e96c:	2001      	movs	r0, #1
 800e96e:	f7f7 fe4d 	bl	800660c <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800e972:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <ACC_Common+0x328>)
 800e974:	ed93 7a00 	vldr	s14, [r3]
 800e978:	4b19      	ldr	r3, [pc, #100]	; (800e9e0 <ACC_Common+0x32c>)
 800e97a:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800e97e:	ee07 3a90 	vmov	s15, r3
 800e982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e98a:	4b14      	ldr	r3, [pc, #80]	; (800e9dc <ACC_Common+0x328>)
 800e98c:	edc3 7a00 	vstr	s15, [r3]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800e990:	4b12      	ldr	r3, [pc, #72]	; (800e9dc <ACC_Common+0x328>)
 800e992:	ed93 7a01 	vldr	s14, [r3, #4]
 800e996:	4b12      	ldr	r3, [pc, #72]	; (800e9e0 <ACC_Common+0x32c>)
 800e998:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800e99c:	ee07 3a90 	vmov	s15, r3
 800e9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9a8:	4b0c      	ldr	r3, [pc, #48]	; (800e9dc <ACC_Common+0x328>)
 800e9aa:	edc3 7a01 	vstr	s15, [r3, #4]
    accADC[YAW] -= mcfg.accZero[YAW];
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <ACC_Common+0x328>)
 800e9b0:	ed93 7a02 	vldr	s14, [r3, #8]
 800e9b4:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <ACC_Common+0x32c>)
 800e9b6:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e9c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9c6:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <ACC_Common+0x328>)
 800e9c8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	200018d8 	.word	0x200018d8
 800e9d8:	20001a34 	.word	0x20001a34
 800e9dc:	20001454 	.word	0x20001454
 800e9e0:	200008f8 	.word	0x200008f8
 800e9e4:	200018d7 	.word	0x200018d7
 800e9e8:	200018d5 	.word	0x200018d5
 800e9ec:	20001a28 	.word	0x20001a28
 800e9f0:	20001a30 	.word	0x20001a30
 800e9f4:	20000e64 	.word	0x20000e64
 800e9f8:	200018d6 	.word	0x200018d6
 800e9fc:	51eb851f 	.word	0x51eb851f
 800ea00:	2000005c 	.word	0x2000005c

0800ea04 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(&sensor_set, accADC)) {
 800ea08:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <ACC_getADC+0x24>)
 800ea0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea0e:	4907      	ldr	r1, [pc, #28]	; (800ea2c <ACC_getADC+0x28>)
 800ea10:	4805      	ldr	r0, [pc, #20]	; (800ea28 <ACC_getADC+0x24>)
 800ea12:	4798      	blx	r3
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d003      	beq.n	800ea22 <ACC_getADC+0x1e>
    	ACC_Common();
 800ea1a:	f7ff fe4b 	bl	800e6b4 <ACC_Common>
    	return TRUE;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e000      	b.n	800ea24 <ACC_getADC+0x20>
    }
	return FALSE;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	2000005c 	.word	0x2000005c
 800ea2c:	20001454 	.word	0x20001454

0800ea30 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800ea36:	4b18      	ldr	r3, [pc, #96]	; (800ea98 <Baro_Common+0x68>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800ea3e:	4b17      	ldr	r3, [pc, #92]	; (800ea9c <Baro_Common+0x6c>)
 800ea40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea44:	461a      	mov	r2, r3
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	db01      	blt.n	800ea50 <Baro_Common+0x20>
        indexplus1 = 0;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800ea50:	4b11      	ldr	r3, [pc, #68]	; (800ea98 <Baro_Common+0x68>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a12      	ldr	r2, [pc, #72]	; (800eaa0 <Baro_Common+0x70>)
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	4912      	ldr	r1, [pc, #72]	; (800eaa4 <Baro_Common+0x74>)
 800ea5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800ea5e:	4b0e      	ldr	r3, [pc, #56]	; (800ea98 <Baro_Common+0x68>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a10      	ldr	r2, [pc, #64]	; (800eaa4 <Baro_Common+0x74>)
 800ea64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4b0f      	ldr	r3, [pc, #60]	; (800eaa8 <Baro_Common+0x78>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4413      	add	r3, r2
 800ea70:	4a0d      	ldr	r2, [pc, #52]	; (800eaa8 <Baro_Common+0x78>)
 800ea72:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800ea74:	4b0c      	ldr	r3, [pc, #48]	; (800eaa8 <Baro_Common+0x78>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	490a      	ldr	r1, [pc, #40]	; (800eaa4 <Baro_Common+0x74>)
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ea80:	1a9b      	subs	r3, r3, r2
 800ea82:	4a09      	ldr	r2, [pc, #36]	; (800eaa8 <Baro_Common+0x78>)
 800ea84:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800ea86:	4a04      	ldr	r2, [pc, #16]	; (800ea98 <Baro_Common+0x68>)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6013      	str	r3, [r2, #0]
}
 800ea8c:	bf00      	nop
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr
 800ea98:	20001a40 	.word	0x20001a40
 800ea9c:	20000e64 	.word	0x20000e64
 800eaa0:	20001a0c 	.word	0x20001a0c
 800eaa4:	20001a44 	.word	0x20001a44
 800eaa8:	20001490 	.word	0x20001490

0800eaac <evtBaroRead>:

static void evtBaroRead(float pressure, float temperature)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	ed87 0a01 	vstr	s0, [r7, #4]
 800eab6:	edc7 0a00 	vstr	s1, [r7]
    baroPressure = pressure * 100;
 800eaba:	edd7 7a01 	vldr	s15, [r7, #4]
 800eabe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800eb04 <evtBaroRead+0x58>
 800eac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eaca:	ee17 2a90 	vmov	r2, s15
 800eace:	4b0e      	ldr	r3, [pc, #56]	; (800eb08 <evtBaroRead+0x5c>)
 800ead0:	601a      	str	r2, [r3, #0]
    baroTemperature = temperature * 100;
 800ead2:	edd7 7a00 	vldr	s15, [r7]
 800ead6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800eb04 <evtBaroRead+0x58>
 800eada:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eae2:	ee17 2a90 	vmov	r2, s15
 800eae6:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <evtBaroRead+0x60>)
 800eae8:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800eaea:	f7ff ffa1 	bl	800ea30 <Baro_Common>
    pifTask_SetTrigger(sensor_set.baro.p_task);
 800eaee:	4b08      	ldr	r3, [pc, #32]	; (800eb10 <evtBaroRead+0x64>)
 800eaf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f005 fd9d 	bl	8014634 <pifTask_SetTrigger>
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	42c80000 	.word	0x42c80000
 800eb08:	20001a0c 	.word	0x20001a0c
 800eb0c:	20001a10 	.word	0x20001a10
 800eb10:	2000005c 	.word	0x2000005c

0800eb14 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	611a      	str	r2, [r3, #16]
}
 800eb22:	bf00      	nop
 800eb24:	370c      	adds	r7, #12
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
 800eb36:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	1c5a      	adds	r2, r3, #1
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d10b      	bne.n	800eb64 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	605a      	str	r2, [r3, #4]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	685a      	ldr	r2, [r3, #4]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f04f 0200 	mov.w	r2, #0
 800eb60:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800eb62:	e036      	b.n	800ebd2 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	ed93 7a00 	vldr	s14, [r3]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	edd3 7a00 	vldr	s15, [r3]
 800eb70:	edd7 6a00 	vldr	s13, [r7]
 800eb74:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	ee07 3a90 	vmov	s15, r3
 800eb80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb84:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800eb88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	ed93 7a02 	vldr	s14, [r3, #8]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	edd3 7a00 	vldr	s15, [r3]
 800eb9e:	edd7 6a00 	vldr	s13, [r7]
 800eba2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ebac:	ed97 6a00 	vldr	s12, [r7]
 800ebb0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ebb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68da      	ldr	r2, [r3, #12]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	609a      	str	r2, [r3, #8]
}
 800ebd2:	bf00      	nop
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
	...

0800ebe0 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	dd0c      	ble.n	800ec0a <devVariance+0x2a>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	ed93 7a03 	vldr	s14, [r3, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	ee07 3a90 	vmov	s15, r3
 800ec00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ec08:	e001      	b.n	800ec0e <devVariance+0x2e>
 800ec0a:	eddf 6a05 	vldr	s13, [pc, #20]	; 800ec20 <devVariance+0x40>
 800ec0e:	eef0 7a66 	vmov.f32	s15, s13
}
 800ec12:	eeb0 0a67 	vmov.f32	s0, s15
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	00000000 	.word	0x00000000

0800ec24 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7ff ffd7 	bl	800ebe0 <devVariance>
 800ec32:	eef0 7a40 	vmov.f32	s15, s0
 800ec36:	eeb0 0a67 	vmov.f32	s0, s15
 800ec3a:	f014 fe2d 	bl	8023898 <sqrtf>
 800ec3e:	eef0 7a40 	vmov.f32	s15, s0
}
 800ec42:	eeb0 0a67 	vmov.f32	s0, s15
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <GYRO_Common>:

static void GYRO_Common(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af04      	add	r7, sp, #16
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800ec52:	4b7d      	ldr	r3, [pc, #500]	; (800ee48 <GYRO_Common+0x1fc>)
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80d1 	beq.w	800edfe <GYRO_Common+0x1b2>
        for (axis = 0; axis < 3; axis++) {
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	607b      	str	r3, [r7, #4]
 800ec60:	e0ae      	b.n	800edc0 <GYRO_Common+0x174>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800ec62:	4b79      	ldr	r3, [pc, #484]	; (800ee48 <GYRO_Common+0x1fc>)
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec6a:	d10e      	bne.n	800ec8a <GYRO_Common+0x3e>
                g[axis] = 0;
 800ec6c:	4a77      	ldr	r2, [pc, #476]	; (800ee4c <GYRO_Common+0x200>)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2100      	movs	r1, #0
 800ec72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	4613      	mov	r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	4413      	add	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4a73      	ldr	r2, [pc, #460]	; (800ee50 <GYRO_Common+0x204>)
 800ec82:	4413      	add	r3, r2
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7ff ff45 	bl	800eb14 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800ec8a:	4a70      	ldr	r2, [pc, #448]	; (800ee4c <GYRO_Common+0x200>)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec92:	ee07 3a90 	vmov	s15, r3
 800ec96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec9a:	4a6e      	ldr	r2, [pc, #440]	; (800ee54 <GYRO_Common+0x208>)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	4413      	add	r3, r2
 800eca2:	edd3 7a00 	vldr	s15, [r3]
 800eca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ecae:	ee17 1a90 	vmov	r1, s15
 800ecb2:	4a66      	ldr	r2, [pc, #408]	; (800ee4c <GYRO_Common+0x200>)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	4413      	add	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4a62      	ldr	r2, [pc, #392]	; (800ee50 <GYRO_Common+0x204>)
 800ecc6:	441a      	add	r2, r3
 800ecc8:	4962      	ldr	r1, [pc, #392]	; (800ee54 <GYRO_Common+0x208>)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	440b      	add	r3, r1
 800ecd0:	edd3 7a00 	vldr	s15, [r3]
 800ecd4:	eeb0 0a67 	vmov.f32	s0, s15
 800ecd8:	4610      	mov	r0, r2
 800ecda:	f7ff ff28 	bl	800eb2e <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ecde:	4a5d      	ldr	r2, [pc, #372]	; (800ee54 <GYRO_Common+0x208>)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4413      	add	r3, r2
 800ece6:	f04f 0200 	mov.w	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]
            gyroZero[axis] = 0;
 800ecec:	4a5a      	ldr	r2, [pc, #360]	; (800ee58 <GYRO_Common+0x20c>)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ecf6:	4b54      	ldr	r3, [pc, #336]	; (800ee48 <GYRO_Common+0x1fc>)
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d15d      	bne.n	800edba <GYRO_Common+0x16e>
                float dev = devStandardDeviation(&var[axis]);
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	4613      	mov	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	4413      	add	r3, r2
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4a51      	ldr	r2, [pc, #324]	; (800ee50 <GYRO_Common+0x204>)
 800ed0a:	4413      	add	r3, r2
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff ff89 	bl	800ec24 <devStandardDeviation>
 800ed12:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ed16:	4b51      	ldr	r3, [pc, #324]	; (800ee5c <GYRO_Common+0x210>)
 800ed18:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d036      	beq.n	800ed8e <GYRO_Common+0x142>
 800ed20:	4b4e      	ldr	r3, [pc, #312]	; (800ee5c <GYRO_Common+0x210>)
 800ed22:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ed26:	ee07 3a90 	vmov	s15, r3
 800ed2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed2e:	ed97 7a00 	vldr	s14, [r7]
 800ed32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ed36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3a:	dd28      	ble.n	800ed8e <GYRO_Common+0x142>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
 800ed3c:	6838      	ldr	r0, [r7, #0]
 800ed3e:	f7f1 fbb7 	bl	80004b0 <__aeabi_f2d>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	4945      	ldr	r1, [pc, #276]	; (800ee5c <GYRO_Common+0x210>)
 800ed48:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
 800ed4c:	9102      	str	r1, [sp, #8]
 800ed4e:	e9cd 2300 	strd	r2, r3, [sp]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	4942      	ldr	r1, [pc, #264]	; (800ee60 <GYRO_Common+0x214>)
 800ed56:	2002      	movs	r0, #2
 800ed58:	f004 fba8 	bl	80134ac <pifLog_Printf>
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ed5c:	4b3a      	ldr	r3, [pc, #232]	; (800ee48 <GYRO_Common+0x1fc>)
 800ed5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed62:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ed64:	483a      	ldr	r0, [pc, #232]	; (800ee50 <GYRO_Common+0x204>)
 800ed66:	f7ff fed5 	bl	800eb14 <devClear>
                    devClear(&var[1]);
 800ed6a:	483e      	ldr	r0, [pc, #248]	; (800ee64 <GYRO_Common+0x218>)
 800ed6c:	f7ff fed2 	bl	800eb14 <devClear>
                    devClear(&var[2]);
 800ed70:	483d      	ldr	r0, [pc, #244]	; (800ee68 <GYRO_Common+0x21c>)
 800ed72:	f7ff fecf 	bl	800eb14 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ed76:	4b35      	ldr	r3, [pc, #212]	; (800ee4c <GYRO_Common+0x200>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	609a      	str	r2, [r3, #8]
 800ed7c:	4b33      	ldr	r3, [pc, #204]	; (800ee4c <GYRO_Common+0x200>)
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	4a32      	ldr	r2, [pc, #200]	; (800ee4c <GYRO_Common+0x200>)
 800ed82:	6053      	str	r3, [r2, #4]
 800ed84:	4b31      	ldr	r3, [pc, #196]	; (800ee4c <GYRO_Common+0x200>)
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	4a30      	ldr	r2, [pc, #192]	; (800ee4c <GYRO_Common+0x200>)
 800ed8a:	6013      	str	r3, [r2, #0]
                    continue;
 800ed8c:	e015      	b.n	800edba <GYRO_Common+0x16e>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800ed8e:	4a2f      	ldr	r2, [pc, #188]	; (800ee4c <GYRO_Common+0x200>)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ed9a:	4a34      	ldr	r2, [pc, #208]	; (800ee6c <GYRO_Common+0x220>)
 800ed9c:	fb82 1203 	smull	r1, r2, r2, r3
 800eda0:	1192      	asrs	r2, r2, #6
 800eda2:	17db      	asrs	r3, r3, #31
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	b219      	sxth	r1, r3
 800eda8:	4a2b      	ldr	r2, [pc, #172]	; (800ee58 <GYRO_Common+0x20c>)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800edb0:	2201      	movs	r2, #1
 800edb2:	210f      	movs	r1, #15
 800edb4:	200a      	movs	r0, #10
 800edb6:	f7fd f935 	bl	800c024 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3301      	adds	r3, #1
 800edbe:	607b      	str	r3, [r7, #4]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	f77f af4d 	ble.w	800ec62 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800edc8:	4b1f      	ldr	r3, [pc, #124]	; (800ee48 <GYRO_Common+0x1fc>)
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	3b01      	subs	r3, #1
 800edce:	b29a      	uxth	r2, r3
 800edd0:	4b1d      	ldr	r3, [pc, #116]	; (800ee48 <GYRO_Common+0x1fc>)
 800edd2:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
 800edd4:	4b1c      	ldr	r3, [pc, #112]	; (800ee48 <GYRO_Common+0x1fc>)
 800edd6:	881b      	ldrh	r3, [r3, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d110      	bne.n	800edfe <GYRO_Common+0x1b2>
 800eddc:	4b1e      	ldr	r3, [pc, #120]	; (800ee58 <GYRO_Common+0x20c>)
 800edde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ede2:	461a      	mov	r2, r3
 800ede4:	4b1c      	ldr	r3, [pc, #112]	; (800ee58 <GYRO_Common+0x20c>)
 800ede6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800edea:	4619      	mov	r1, r3
 800edec:	4b1a      	ldr	r3, [pc, #104]	; (800ee58 <GYRO_Common+0x20c>)
 800edee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	460b      	mov	r3, r1
 800edf6:	491e      	ldr	r1, [pc, #120]	; (800ee70 <GYRO_Common+0x224>)
 800edf8:	2002      	movs	r0, #2
 800edfa:	f004 fb57 	bl	80134ac <pifLog_Printf>
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800edfe:	2300      	movs	r3, #0
 800ee00:	607b      	str	r3, [r7, #4]
 800ee02:	e018      	b.n	800ee36 <GYRO_Common+0x1ea>
        gyroADC[axis] -= gyroZero[axis];
 800ee04:	4a13      	ldr	r2, [pc, #76]	; (800ee54 <GYRO_Common+0x208>)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	4413      	add	r3, r2
 800ee0c:	ed93 7a00 	vldr	s14, [r3]
 800ee10:	4a11      	ldr	r2, [pc, #68]	; (800ee58 <GYRO_Common+0x20c>)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ee18:	ee07 3a90 	vmov	s15, r3
 800ee1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee24:	4a0b      	ldr	r2, [pc, #44]	; (800ee54 <GYRO_Common+0x208>)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	edc3 7a00 	vstr	s15, [r3]
    for (axis = 0; axis < 3; axis++)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3301      	adds	r3, #1
 800ee34:	607b      	str	r3, [r7, #4]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	dde3      	ble.n	800ee04 <GYRO_Common+0x1b8>
}
 800ee3c:	bf00      	nop
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	20001a06 	.word	0x20001a06
 800ee4c:	20001b04 	.word	0x20001b04
 800ee50:	20001b10 	.word	0x20001b10
 800ee54:	20001448 	.word	0x20001448
 800ee58:	200014d8 	.word	0x200014d8
 800ee5c:	200008f8 	.word	0x200008f8
 800ee60:	080276b8 	.word	0x080276b8
 800ee64:	20001b24 	.word	0x20001b24
 800ee68:	20001b38 	.word	0x20001b38
 800ee6c:	10624dd3 	.word	0x10624dd3
 800ee70:	080276d0 	.word	0x080276d0

0800ee74 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(&sensor_set, gyroADC)) {
 800ee78:	4b07      	ldr	r3, [pc, #28]	; (800ee98 <Gyro_getADC+0x24>)
 800ee7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee7c:	4907      	ldr	r1, [pc, #28]	; (800ee9c <Gyro_getADC+0x28>)
 800ee7e:	4806      	ldr	r0, [pc, #24]	; (800ee98 <Gyro_getADC+0x24>)
 800ee80:	4798      	blx	r3
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <Gyro_getADC+0x1c>
    	GYRO_Common();
 800ee88:	f7ff fee0 	bl	800ec4c <GYRO_Common>
    	return TRUE;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e000      	b.n	800ee92 <Gyro_getADC+0x1e>
    }
    return FALSE;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	2000005c 	.word	0x2000005c
 800ee9c:	20001448 	.word	0x20001448

0800eea0 <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800eea4:	2001      	movs	r0, #1
 800eea6:	f7f2 ff55 	bl	8001d54 <actLed1State>
    if (!sensor_set.mag.init(&sensor_set, mcfg.gyro_align)) {
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <Mag_init+0x40>)
 800eeac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eeb0:	4a0c      	ldr	r2, [pc, #48]	; (800eee4 <Mag_init+0x44>)
 800eeb2:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	4809      	ldr	r0, [pc, #36]	; (800eee0 <Mag_init+0x40>)
 800eeba:	4798      	blx	r3
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <Mag_init+0x30>
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
 800eec2:	4b09      	ldr	r3, [pc, #36]	; (800eee8 <Mag_init+0x48>)
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	4908      	ldr	r1, [pc, #32]	; (800eeec <Mag_init+0x4c>)
 800eeca:	2002      	movs	r0, #2
 800eecc:	f004 faee 	bl	80134ac <pifLog_Printf>
#endif
    }
    actLed1State(OFF);
 800eed0:	2000      	movs	r0, #0
 800eed2:	f7f2 ff3f 	bl	8001d54 <actLed1State>
    magInit = 1;
 800eed6:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <Mag_init+0x50>)
 800eed8:	2201      	movs	r2, #1
 800eeda:	701a      	strb	r2, [r3, #0]
}
 800eedc:	bf00      	nop
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	2000005c 	.word	0x2000005c
 800eee4:	200008f8 	.word	0x200008f8
 800eee8:	20001c55 	.word	0x20001c55
 800eeec:	080276e4 	.word	0x080276e4
 800eef0:	20001a14 	.word	0x20001a14

0800eef4 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(&sensor_set, magADC)) {
 800eefc:	4b7f      	ldr	r3, [pc, #508]	; (800f0fc <taskMagGetAdc+0x208>)
 800eefe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ef02:	497f      	ldr	r1, [pc, #508]	; (800f100 <taskMagGetAdc+0x20c>)
 800ef04:	487d      	ldr	r0, [pc, #500]	; (800f0fc <taskMagGetAdc+0x208>)
 800ef06:	4798      	blx	r3
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d104      	bne.n	800ef18 <taskMagGetAdc+0x24>
    	pifTask_SetTrigger(p_task);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f005 fb90 	bl	8014634 <pifTask_SetTrigger>
    	return 0;
 800ef14:	2300      	movs	r3, #0
 800ef16:	e0ec      	b.n	800f0f2 <taskMagGetAdc+0x1fe>
    }

    if (f.CALIBRATE_MAG) {
 800ef18:	4b7a      	ldr	r3, [pc, #488]	; (800f104 <taskMagGetAdc+0x210>)
 800ef1a:	7b9b      	ldrb	r3, [r3, #14]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d035      	beq.n	800ef8c <taskMagGetAdc+0x98>
        tCal = (*pif_act_timer1us)();
 800ef20:	4b79      	ldr	r3, [pc, #484]	; (800f108 <taskMagGetAdc+0x214>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4798      	blx	r3
 800ef26:	4603      	mov	r3, r0
 800ef28:	4a78      	ldr	r2, [pc, #480]	; (800f10c <taskMagGetAdc+0x218>)
 800ef2a:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e026      	b.n	800ef80 <taskMagGetAdc+0x8c>
            mcfg.magZero[axis] = 0;
 800ef32:	4a77      	ldr	r2, [pc, #476]	; (800f110 <taskMagGetAdc+0x21c>)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	33b8      	adds	r3, #184	; 0xb8
 800ef38:	2100      	movs	r1, #0
 800ef3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800ef3e:	4a70      	ldr	r2, [pc, #448]	; (800f100 <taskMagGetAdc+0x20c>)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4413      	add	r3, r2
 800ef46:	edd3 7a00 	vldr	s15, [r3]
 800ef4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef4e:	ee17 3a90 	vmov	r3, s15
 800ef52:	b219      	sxth	r1, r3
 800ef54:	4a6f      	ldr	r2, [pc, #444]	; (800f114 <taskMagGetAdc+0x220>)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800ef5c:	4a68      	ldr	r2, [pc, #416]	; (800f100 <taskMagGetAdc+0x20c>)
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	edd3 7a00 	vldr	s15, [r3]
 800ef68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef6c:	ee17 3a90 	vmov	r3, s15
 800ef70:	b219      	sxth	r1, r3
 800ef72:	4a69      	ldr	r2, [pc, #420]	; (800f118 <taskMagGetAdc+0x224>)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d9d5      	bls.n	800ef32 <taskMagGetAdc+0x3e>
        }
        f.CALIBRATE_MAG = 0;
 800ef86:	4b5f      	ldr	r3, [pc, #380]	; (800f104 <taskMagGetAdc+0x210>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800ef8c:	4b63      	ldr	r3, [pc, #396]	; (800f11c <taskMagGetAdc+0x228>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d02c      	beq.n	800efee <taskMagGetAdc+0xfa>
        magADC[X] -= mcfg.magZero[X];
 800ef94:	4b5a      	ldr	r3, [pc, #360]	; (800f100 <taskMagGetAdc+0x20c>)
 800ef96:	ed93 7a00 	vldr	s14, [r3]
 800ef9a:	4b5d      	ldr	r3, [pc, #372]	; (800f110 <taskMagGetAdc+0x21c>)
 800ef9c:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800efa0:	ee07 3a90 	vmov	s15, r3
 800efa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efac:	4b54      	ldr	r3, [pc, #336]	; (800f100 <taskMagGetAdc+0x20c>)
 800efae:	edc3 7a00 	vstr	s15, [r3]
        magADC[Y] -= mcfg.magZero[Y];
 800efb2:	4b53      	ldr	r3, [pc, #332]	; (800f100 <taskMagGetAdc+0x20c>)
 800efb4:	ed93 7a01 	vldr	s14, [r3, #4]
 800efb8:	4b55      	ldr	r3, [pc, #340]	; (800f110 <taskMagGetAdc+0x21c>)
 800efba:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800efbe:	ee07 3a90 	vmov	s15, r3
 800efc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efca:	4b4d      	ldr	r3, [pc, #308]	; (800f100 <taskMagGetAdc+0x20c>)
 800efcc:	edc3 7a01 	vstr	s15, [r3, #4]
        magADC[Z] -= mcfg.magZero[Z];
 800efd0:	4b4b      	ldr	r3, [pc, #300]	; (800f100 <taskMagGetAdc+0x20c>)
 800efd2:	ed93 7a02 	vldr	s14, [r3, #8]
 800efd6:	4b4e      	ldr	r3, [pc, #312]	; (800f110 <taskMagGetAdc+0x21c>)
 800efd8:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800efdc:	ee07 3a90 	vmov	s15, r3
 800efe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efe8:	4b45      	ldr	r3, [pc, #276]	; (800f100 <taskMagGetAdc+0x20c>)
 800efea:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    if (tCal != 0) {
 800efee:	4b47      	ldr	r3, [pc, #284]	; (800f10c <taskMagGetAdc+0x218>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d07c      	beq.n	800f0f0 <taskMagGetAdc+0x1fc>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800eff6:	4b44      	ldr	r3, [pc, #272]	; (800f108 <taskMagGetAdc+0x214>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4798      	blx	r3
 800effc:	4602      	mov	r2, r0
 800effe:	4b43      	ldr	r3, [pc, #268]	; (800f10c <taskMagGetAdc+0x218>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	4a46      	ldr	r2, [pc, #280]	; (800f120 <taskMagGetAdc+0x22c>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d84f      	bhi.n	800f0aa <taskMagGetAdc+0x1b6>
            actLed0Toggle();
 800f00a:	f7f2 fe8d 	bl	8001d28 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800f00e:	2300      	movs	r3, #0
 800f010:	60fb      	str	r3, [r7, #12]
 800f012:	e046      	b.n	800f0a2 <taskMagGetAdc+0x1ae>
                if (magADC[axis] < magZeroTempMin[axis])
 800f014:	4a3a      	ldr	r2, [pc, #232]	; (800f100 <taskMagGetAdc+0x20c>)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4413      	add	r3, r2
 800f01c:	ed93 7a00 	vldr	s14, [r3]
 800f020:	4a3c      	ldr	r2, [pc, #240]	; (800f114 <taskMagGetAdc+0x220>)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f028:	ee07 3a90 	vmov	s15, r3
 800f02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f038:	d50e      	bpl.n	800f058 <taskMagGetAdc+0x164>
                    magZeroTempMin[axis] = magADC[axis];
 800f03a:	4a31      	ldr	r2, [pc, #196]	; (800f100 <taskMagGetAdc+0x20c>)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	edd3 7a00 	vldr	s15, [r3]
 800f046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f04a:	ee17 3a90 	vmov	r3, s15
 800f04e:	b219      	sxth	r1, r3
 800f050:	4a30      	ldr	r2, [pc, #192]	; (800f114 <taskMagGetAdc+0x220>)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800f058:	4a29      	ldr	r2, [pc, #164]	; (800f100 <taskMagGetAdc+0x20c>)
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4413      	add	r3, r2
 800f060:	ed93 7a00 	vldr	s14, [r3]
 800f064:	4a2c      	ldr	r2, [pc, #176]	; (800f118 <taskMagGetAdc+0x224>)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f06c:	ee07 3a90 	vmov	s15, r3
 800f070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07c:	dd0e      	ble.n	800f09c <taskMagGetAdc+0x1a8>
                    magZeroTempMax[axis] = magADC[axis];
 800f07e:	4a20      	ldr	r2, [pc, #128]	; (800f100 <taskMagGetAdc+0x20c>)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4413      	add	r3, r2
 800f086:	edd3 7a00 	vldr	s15, [r3]
 800f08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f08e:	ee17 3a90 	vmov	r3, s15
 800f092:	b219      	sxth	r1, r3
 800f094:	4a20      	ldr	r2, [pc, #128]	; (800f118 <taskMagGetAdc+0x224>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	60fb      	str	r3, [r7, #12]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d9b5      	bls.n	800f014 <taskMagGetAdc+0x120>
 800f0a8:	e022      	b.n	800f0f0 <taskMagGetAdc+0x1fc>
            }
        } else {
            tCal = 0;
 800f0aa:	4b18      	ldr	r3, [pc, #96]	; (800f10c <taskMagGetAdc+0x218>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	e015      	b.n	800f0e2 <taskMagGetAdc+0x1ee>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800f0b6:	4a17      	ldr	r2, [pc, #92]	; (800f114 <taskMagGetAdc+0x220>)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4a15      	ldr	r2, [pc, #84]	; (800f118 <taskMagGetAdc+0x224>)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800f0c8:	440b      	add	r3, r1
 800f0ca:	0fda      	lsrs	r2, r3, #31
 800f0cc:	4413      	add	r3, r2
 800f0ce:	105b      	asrs	r3, r3, #1
 800f0d0:	b219      	sxth	r1, r3
 800f0d2:	4a0f      	ldr	r2, [pc, #60]	; (800f110 <taskMagGetAdc+0x21c>)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	33b8      	adds	r3, #184	; 0xb8
 800f0d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	60fb      	str	r3, [r7, #12]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d9e6      	bls.n	800f0b6 <taskMagGetAdc+0x1c2>
            writeEEPROM(1, true);
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	2001      	movs	r0, #1
 800f0ec:	f7f7 fa8e 	bl	800660c <writeEEPROM>
        }
    }
    return 0;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	2000005c 	.word	0x2000005c
 800f100:	2000146c 	.word	0x2000146c
 800f104:	20001738 	.word	0x20001738
 800f108:	20001c7c 	.word	0x20001c7c
 800f10c:	20001b4c 	.word	0x20001b4c
 800f110:	200008f8 	.word	0x200008f8
 800f114:	20001b50 	.word	0x20001b50
 800f118:	20001b58 	.word	0x20001b58
 800f11c:	20001a14 	.word	0x20001a14
 800f120:	01c9c37f 	.word	0x01c9c37f

0800f124 <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f132:	dd02      	ble.n	800f13a <getSonarDistance+0x16>
		distance = -1;
 800f134:	f04f 33ff 	mov.w	r3, #4294967295
 800f138:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f13a:	4a0d      	ldr	r2, [pc, #52]	; (800f170 <getSonarDistance+0x4c>)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f140:	4b0c      	ldr	r3, [pc, #48]	; (800f174 <getSonarDistance+0x50>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4618      	mov	r0, r3
 800f146:	f7f1 f9a1 	bl	800048c <__aeabi_i2d>
 800f14a:	f04f 0200 	mov.w	r2, #0
 800f14e:	4b0a      	ldr	r3, [pc, #40]	; (800f178 <getSonarDistance+0x54>)
 800f150:	f7f1 fb30 	bl	80007b4 <__aeabi_ddiv>
 800f154:	4602      	mov	r2, r0
 800f156:	460b      	mov	r3, r1
 800f158:	4610      	mov	r0, r2
 800f15a:	4619      	mov	r1, r3
 800f15c:	f7f1 fce2 	bl	8000b24 <__aeabi_d2f>
 800f160:	4603      	mov	r3, r0
 800f162:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f166:	eeb0 0a67 	vmov.f32	s0, s15
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	2000002c 	.word	0x2000002c
 800f174:	20001a10 	.word	0x20001a10
 800f178:	40590000 	.word	0x40590000

0800f17c <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f184:	4b15      	ldr	r3, [pc, #84]	; (800f1dc <getSonarDistanceFilter+0x60>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	1d3a      	adds	r2, r7, #4
 800f18a:	4611      	mov	r1, r2
 800f18c:	4618      	mov	r0, r3
 800f18e:	f006 f8ed 	bl	801536c <pifNoiseFilter_Process>
 800f192:	4603      	mov	r3, r0
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f19e:	dd02      	ble.n	800f1a6 <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a4:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a0d      	ldr	r2, [pc, #52]	; (800f1e0 <getSonarDistanceFilter+0x64>)
 800f1aa:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f1ac:	4b0d      	ldr	r3, [pc, #52]	; (800f1e4 <getSonarDistanceFilter+0x68>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7f1 f96b 	bl	800048c <__aeabi_i2d>
 800f1b6:	f04f 0200 	mov.w	r2, #0
 800f1ba:	4b0b      	ldr	r3, [pc, #44]	; (800f1e8 <getSonarDistanceFilter+0x6c>)
 800f1bc:	f7f1 fafa 	bl	80007b4 <__aeabi_ddiv>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	f7f1 fcac 	bl	8000b24 <__aeabi_d2f>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f1d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	20001a18 	.word	0x20001a18
 800f1e0:	2000002c 	.word	0x2000002c
 800f1e4:	20001a10 	.word	0x20001a10
 800f1e8:	40590000 	.word	0x40590000

0800f1ec <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f1f8:	78fb      	ldrb	r3, [r7, #3]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d002      	beq.n	800f204 <Sonar_init+0x18>
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d00b      	beq.n	800f21a <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f202:	e01e      	b.n	800f242 <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f204:	2105      	movs	r1, #5
 800f206:	4820      	ldr	r0, [pc, #128]	; (800f288 <Sonar_init+0x9c>)
 800f208:	f006 fa60 	bl	80156cc <pifNoiseFilterInt32_Init>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d014      	beq.n	800f23c <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f212:	4b1e      	ldr	r3, [pc, #120]	; (800f28c <Sonar_init+0xa0>)
 800f214:	4a1c      	ldr	r2, [pc, #112]	; (800f288 <Sonar_init+0x9c>)
 800f216:	601a      	str	r2, [r3, #0]
		break;
 800f218:	e010      	b.n	800f23c <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f21a:	2107      	movs	r1, #7
 800f21c:	481a      	ldr	r0, [pc, #104]	; (800f288 <Sonar_init+0x9c>)
 800f21e:	f006 fa55 	bl	80156cc <pifNoiseFilterInt32_Init>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f228:	4817      	ldr	r0, [pc, #92]	; (800f288 <Sonar_init+0x9c>)
 800f22a:	f006 fa8f 	bl	801574c <pifNoiseFilterInt32_SetNoiseCancel>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	d005      	beq.n	800f240 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f234:	4b15      	ldr	r3, [pc, #84]	; (800f28c <Sonar_init+0xa0>)
 800f236:	4a14      	ldr	r2, [pc, #80]	; (800f288 <Sonar_init+0x9c>)
 800f238:	601a      	str	r2, [r3, #0]
		break;
 800f23a:	e001      	b.n	800f240 <Sonar_init+0x54>
		break;
 800f23c:	bf00      	nop
 800f23e:	e000      	b.n	800f242 <Sonar_init+0x56>
		break;
 800f240:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f242:	4b12      	ldr	r3, [pc, #72]	; (800f28c <Sonar_init+0xa0>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d007      	beq.n	800f25a <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4910      	ldr	r1, [pc, #64]	; (800f290 <Sonar_init+0xa4>)
 800f24e:	203c      	movs	r0, #60	; 0x3c
 800f250:	4798      	blx	r3
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d107      	bne.n	800f268 <Sonar_init+0x7c>
 800f258:	e013      	b.n	800f282 <Sonar_init+0x96>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	490d      	ldr	r1, [pc, #52]	; (800f294 <Sonar_init+0xa8>)
 800f25e:	203c      	movs	r0, #60	; 0x3c
 800f260:	4798      	blx	r3
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00b      	beq.n	800f280 <Sonar_init+0x94>
	}
    sensorsSet(SENSOR_SONAR);
 800f268:	2010      	movs	r0, #16
 800f26a:	f7f7 fd7f 	bl	8006d6c <sensorsSet>
    sonarDistance = -1;
 800f26e:	4b0a      	ldr	r3, [pc, #40]	; (800f298 <Sonar_init+0xac>)
 800f270:	f04f 32ff 	mov.w	r2, #4294967295
 800f274:	601a      	str	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
 800f276:	4909      	ldr	r1, [pc, #36]	; (800f29c <Sonar_init+0xb0>)
 800f278:	2002      	movs	r0, #2
 800f27a:	f004 f889 	bl	8013390 <pifLog_Print>
 800f27e:	e000      	b.n	800f282 <Sonar_init+0x96>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f280:	bf00      	nop
#endif
}
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	20001b60 	.word	0x20001b60
 800f28c:	20001a18 	.word	0x20001a18
 800f290:	0800f17d 	.word	0x0800f17d
 800f294:	0800f125 	.word	0x0800f125
 800f298:	2000002c 	.word	0x2000002c
 800f29c:	080276f4 	.word	0x080276f4

0800f2a0 <_SerializeBoxNamesReply>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer);

static void _SerializeBoxNamesReply(PifMsp* p_owner)
{
 800f2a0:	b590      	push	{r4, r7, lr}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
    int i, idx;

    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	e023      	b.n	800f2f6 <_SerializeBoxNamesReply+0x56>
        idx = availableBoxes[i];
 800f2ae:	4a17      	ldr	r2, [pc, #92]	; (800f30c <_SerializeBoxNamesReply+0x6c>)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	60bb      	str	r3, [r7, #8]
       	pifMsp_AddAnswer(p_owner, (uint8_t*)boxes[idx].boxName, strlen(boxes[idx].boxName));
 800f2b8:	4915      	ldr	r1, [pc, #84]	; (800f310 <_SerializeBoxNamesReply+0x70>)
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	4613      	mov	r3, r2
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	4413      	add	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	440b      	add	r3, r1
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	681c      	ldr	r4, [r3, #0]
 800f2ca:	4911      	ldr	r1, [pc, #68]	; (800f310 <_SerializeBoxNamesReply+0x70>)
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	4413      	add	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	440b      	add	r3, r1
 800f2d8:	3304      	adds	r3, #4
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7f0 ff7b 	bl	80001d8 <strlen>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f008 ff86 	bl	80181fc <pifMsp_AddAnswer>
    for (i = 0; i < numberBoxItems; i++) {
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	60fb      	str	r3, [r7, #12]
 800f2f6:	4b07      	ldr	r3, [pc, #28]	; (800f314 <_SerializeBoxNamesReply+0x74>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4293      	cmp	r3, r2
 800f300:	dbd5      	blt.n	800f2ae <_SerializeBoxNamesReply+0xe>
    }
}
 800f302:	bf00      	nop
 800f304:	bf00      	nop
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd90      	pop	{r4, r7, pc}
 800f30c:	20001b80 	.word	0x20001b80
 800f310:	0802953c 	.word	0x0802953c
 800f314:	20001b99 	.word	0x20001b99

0800f318 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	6039      	str	r1, [r7, #0]
 800f322:	71fb      	strb	r3, [r7, #7]
 800f324:	4613      	mov	r3, r2
 800f326:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX, 2);			// 10ms
 800f328:	79f8      	ldrb	r0, [r7, #7]
 800f32a:	2302      	movs	r3, #2
 800f32c:	2203      	movs	r2, #3
 800f32e:	6839      	ldr	r1, [r7, #0]
 800f330:	f7f2 fe8c 	bl	800204c <uartOpen>
 800f334:	4603      	mov	r3, r0
 800f336:	4a92      	ldr	r2, [pc, #584]	; (800f580 <serialInit+0x268>)
 800f338:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f33a:	4b91      	ldr	r3, [pc, #580]	; (800f580 <serialInit+0x268>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a91      	ldr	r2, [pc, #580]	; (800f584 <serialInit+0x26c>)
 800f340:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f342:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f346:	4990      	ldr	r1, [pc, #576]	; (800f588 <serialInit+0x270>)
 800f348:	4890      	ldr	r0, [pc, #576]	; (800f58c <serialInit+0x274>)
 800f34a:	f008 fd05 	bl	8017d58 <pifMsp_Init>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 810e 	beq.w	800f572 <serialInit+0x25a>
    pifMsp_AttachEvtReceive(&ports[0].pif_msp, evtMspReceive, evtMspOtherPacket, core.mainport);
 800f356:	4b8a      	ldr	r3, [pc, #552]	; (800f580 <serialInit+0x268>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a8d      	ldr	r2, [pc, #564]	; (800f590 <serialInit+0x278>)
 800f35c:	498d      	ldr	r1, [pc, #564]	; (800f594 <serialInit+0x27c>)
 800f35e:	488b      	ldr	r0, [pc, #556]	; (800f58c <serialInit+0x274>)
 800f360:	f008 fdae 	bl	8017ec0 <pifMsp_AttachEvtReceive>
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f364:	4b86      	ldr	r3, [pc, #536]	; (800f580 <serialInit+0x268>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	3304      	adds	r3, #4
 800f36a:	4619      	mov	r1, r3
 800f36c:	4887      	ldr	r0, [pc, #540]	; (800f58c <serialInit+0x274>)
 800f36e:	f008 fd81 	bl	8017e74 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f372:	4b83      	ldr	r3, [pc, #524]	; (800f580 <serialInit+0x268>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3304      	adds	r3, #4
 800f378:	4618      	mov	r0, r3
 800f37a:	f7f3 f803 	bl	8002384 <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f37e:	79bb      	ldrb	r3, [r7, #6]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d02a      	beq.n	800f3da <serialInit+0xc2>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX, 10);	// 10ms
 800f384:	79b8      	ldrb	r0, [r7, #6]
 800f386:	230a      	movs	r3, #10
 800f388:	2203      	movs	r2, #3
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	f7f2 fe5e 	bl	800204c <uartOpen>
 800f390:	4603      	mov	r3, r0
 800f392:	4a7b      	ldr	r2, [pc, #492]	; (800f580 <serialInit+0x268>)
 800f394:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f396:	4b7a      	ldr	r3, [pc, #488]	; (800f580 <serialInit+0x268>)
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	4a7a      	ldr	r2, [pc, #488]	; (800f584 <serialInit+0x26c>)
 800f39c:	65d3      	str	r3, [r2, #92]	; 0x5c

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f39e:	f240 1211 	movw	r2, #273	; 0x111
 800f3a2:	4979      	ldr	r1, [pc, #484]	; (800f588 <serialInit+0x270>)
 800f3a4:	487c      	ldr	r0, [pc, #496]	; (800f598 <serialInit+0x280>)
 800f3a6:	f008 fcd7 	bl	8017d58 <pifMsp_Init>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f000 80e2 	beq.w	800f576 <serialInit+0x25e>
        pifMsp_AttachEvtReceive(&ports[1].pif_msp, evtMspReceive, evtMspOtherPacket, core.flexport);
 800f3b2:	4b73      	ldr	r3, [pc, #460]	; (800f580 <serialInit+0x268>)
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	4a76      	ldr	r2, [pc, #472]	; (800f590 <serialInit+0x278>)
 800f3b8:	4976      	ldr	r1, [pc, #472]	; (800f594 <serialInit+0x27c>)
 800f3ba:	4877      	ldr	r0, [pc, #476]	; (800f598 <serialInit+0x280>)
 800f3bc:	f008 fd80 	bl	8017ec0 <pifMsp_AttachEvtReceive>
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f3c0:	4b6f      	ldr	r3, [pc, #444]	; (800f580 <serialInit+0x268>)
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4873      	ldr	r0, [pc, #460]	; (800f598 <serialInit+0x280>)
 800f3ca:	f008 fd53 	bl	8017e74 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f3ce:	4b6c      	ldr	r3, [pc, #432]	; (800f580 <serialInit+0x268>)
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7f2 ffd5 	bl	8002384 <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f3da:	2219      	movs	r2, #25
 800f3dc:	21ff      	movs	r1, #255	; 0xff
 800f3de:	486f      	ldr	r0, [pc, #444]	; (800f59c <serialInit+0x284>)
 800f3e0:	f013 fe2c 	bl	802303c <memset>

    idx = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	60fa      	str	r2, [r7, #12]
 800f3ee:	4a6b      	ldr	r2, [pc, #428]	; (800f59c <serialInit+0x284>)
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f3f4:	2002      	movs	r0, #2
 800f3f6:	f7f7 fca3 	bl	8006d40 <sensors>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00b      	beq.n	800f418 <serialInit+0x100>
        availableBoxes[idx++] = BOXANGLE;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	60fa      	str	r2, [r7, #12]
 800f406:	4a65      	ldr	r2, [pc, #404]	; (800f59c <serialInit+0x284>)
 800f408:	2101      	movs	r1, #1
 800f40a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	60fa      	str	r2, [r7, #12]
 800f412:	4a62      	ldr	r2, [pc, #392]	; (800f59c <serialInit+0x284>)
 800f414:	2102      	movs	r1, #2
 800f416:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f418:	2004      	movs	r0, #4
 800f41a:	f7f7 fc91 	bl	8006d40 <sensors>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d012      	beq.n	800f44a <serialInit+0x132>
        availableBoxes[idx++] = BOXBARO;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	60fa      	str	r2, [r7, #12]
 800f42a:	4a5c      	ldr	r2, [pc, #368]	; (800f59c <serialInit+0x284>)
 800f42c:	2103      	movs	r1, #3
 800f42e:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f430:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f434:	f7f7 fccc 	bl	8006dd0 <feature>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d005      	beq.n	800f44a <serialInit+0x132>
            availableBoxes[idx++] = BOXVARIO;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	60fa      	str	r2, [r7, #12]
 800f444:	4a55      	ldr	r2, [pc, #340]	; (800f59c <serialInit+0x284>)
 800f446:	2104      	movs	r1, #4
 800f448:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f44a:	2002      	movs	r0, #2
 800f44c:	f7f7 fc78 	bl	8006d40 <sensors>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d105      	bne.n	800f462 <serialInit+0x14a>
 800f456:	2008      	movs	r0, #8
 800f458:	f7f7 fc72 	bl	8006d40 <sensors>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d011      	beq.n	800f486 <serialInit+0x16e>
        availableBoxes[idx++] = BOXMAG;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	60fa      	str	r2, [r7, #12]
 800f468:	4a4c      	ldr	r2, [pc, #304]	; (800f59c <serialInit+0x284>)
 800f46a:	2105      	movs	r1, #5
 800f46c:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	1c5a      	adds	r2, r3, #1
 800f472:	60fa      	str	r2, [r7, #12]
 800f474:	4a49      	ldr	r2, [pc, #292]	; (800f59c <serialInit+0x284>)
 800f476:	2106      	movs	r1, #6
 800f478:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	1c5a      	adds	r2, r3, #1
 800f47e:	60fa      	str	r2, [r7, #12]
 800f480:	4a46      	ldr	r2, [pc, #280]	; (800f59c <serialInit+0x284>)
 800f482:	2107      	movs	r1, #7
 800f484:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f486:	2020      	movs	r0, #32
 800f488:	f7f7 fca2 	bl	8006dd0 <feature>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d005      	beq.n	800f49e <serialInit+0x186>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	1c5a      	adds	r2, r3, #1
 800f496:	60fa      	str	r2, [r7, #12]
 800f498:	4a40      	ldr	r2, [pc, #256]	; (800f59c <serialInit+0x284>)
 800f49a:	2108      	movs	r1, #8
 800f49c:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f49e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f4a2:	f7f7 fc95 	bl	8006dd0 <feature>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00b      	beq.n	800f4c4 <serialInit+0x1ac>
        availableBoxes[idx++] = BOXGPSHOME;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	60fa      	str	r2, [r7, #12]
 800f4b2:	4a3a      	ldr	r2, [pc, #232]	; (800f59c <serialInit+0x284>)
 800f4b4:	210a      	movs	r1, #10
 800f4b6:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	60fa      	str	r2, [r7, #12]
 800f4be:	4a37      	ldr	r2, [pc, #220]	; (800f59c <serialInit+0x284>)
 800f4c0:	210b      	movs	r1, #11
 800f4c2:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f4c4:	4b36      	ldr	r3, [pc, #216]	; (800f5a0 <serialInit+0x288>)
 800f4c6:	7c1b      	ldrb	r3, [r3, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00b      	beq.n	800f4e4 <serialInit+0x1cc>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	60fa      	str	r2, [r7, #12]
 800f4d2:	4a32      	ldr	r2, [pc, #200]	; (800f59c <serialInit+0x284>)
 800f4d4:	210c      	movs	r1, #12
 800f4d6:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	60fa      	str	r2, [r7, #12]
 800f4de:	4a2f      	ldr	r2, [pc, #188]	; (800f59c <serialInit+0x284>)
 800f4e0:	2118      	movs	r1, #24
 800f4e2:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	60fa      	str	r2, [r7, #12]
 800f4ea:	4a2c      	ldr	r2, [pc, #176]	; (800f59c <serialInit+0x284>)
 800f4ec:	210d      	movs	r1, #13
 800f4ee:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f4f0:	2004      	movs	r0, #4
 800f4f2:	f7f7 fc6d 	bl	8006dd0 <feature>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d005      	beq.n	800f508 <serialInit+0x1f0>
        availableBoxes[idx++] = BOXCALIB;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	60fa      	str	r2, [r7, #12]
 800f502:	4a26      	ldr	r2, [pc, #152]	; (800f59c <serialInit+0x284>)
 800f504:	2111      	movs	r1, #17
 800f506:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	1c5a      	adds	r2, r3, #1
 800f50c:	60fa      	str	r2, [r7, #12]
 800f50e:	4a23      	ldr	r2, [pc, #140]	; (800f59c <serialInit+0x284>)
 800f510:	2113      	movs	r1, #19
 800f512:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f514:	4b23      	ldr	r3, [pc, #140]	; (800f5a4 <serialInit+0x28c>)
 800f516:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bf14      	ite	ne
 800f51e:	2301      	movne	r3, #1
 800f520:	2300      	moveq	r3, #0
 800f522:	b2db      	uxtb	r3, r3
 800f524:	4618      	mov	r0, r3
 800f526:	f7f7 fc53 	bl	8006dd0 <feature>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d005      	beq.n	800f53c <serialInit+0x224>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	60fa      	str	r2, [r7, #12]
 800f536:	4a19      	ldr	r2, [pc, #100]	; (800f59c <serialInit+0x284>)
 800f538:	2114      	movs	r1, #20
 800f53a:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f53c:	4b19      	ldr	r3, [pc, #100]	; (800f5a4 <serialInit+0x28c>)
 800f53e:	795b      	ldrb	r3, [r3, #5]
 800f540:	2b18      	cmp	r3, #24
 800f542:	d111      	bne.n	800f568 <serialInit+0x250>
        availableBoxes[idx++] = BOXSERVO1;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	60fa      	str	r2, [r7, #12]
 800f54a:	4a14      	ldr	r2, [pc, #80]	; (800f59c <serialInit+0x284>)
 800f54c:	2115      	movs	r1, #21
 800f54e:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	60fa      	str	r2, [r7, #12]
 800f556:	4a11      	ldr	r2, [pc, #68]	; (800f59c <serialInit+0x284>)
 800f558:	2116      	movs	r1, #22
 800f55a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	60fa      	str	r2, [r7, #12]
 800f562:	4a0e      	ldr	r2, [pc, #56]	; (800f59c <serialInit+0x284>)
 800f564:	2117      	movs	r1, #23
 800f566:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	b2da      	uxtb	r2, r3
 800f56c:	4b0e      	ldr	r3, [pc, #56]	; (800f5a8 <serialInit+0x290>)
 800f56e:	701a      	strb	r2, [r3, #0]
 800f570:	e002      	b.n	800f578 <serialInit+0x260>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f572:	bf00      	nop
 800f574:	e000      	b.n	800f578 <serialInit+0x260>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f576:	bf00      	nop
}
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	20000840 	.word	0x20000840
 800f584:	20001b9c 	.word	0x20001b9c
 800f588:	2000156c 	.word	0x2000156c
 800f58c:	20001ba0 	.word	0x20001ba0
 800f590:	08010f25 	.word	0x08010f25
 800f594:	0800f5ad 	.word	0x0800f5ad
 800f598:	20001bfc 	.word	0x20001bfc
 800f59c:	20001b80 	.word	0x20001b80
 800f5a0:	20001738 	.word	0x20001738
 800f5a4:	200008f8 	.word	0x200008f8
 800f5a8:	20001b99 	.word	0x20001b99

0800f5ac <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer)
{
 800f5ac:	b590      	push	{r4, r7, lr}
 800f5ae:	b091      	sub	sp, #68	; 0x44
 800f5b0:	af02      	add	r7, sp, #8
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5bc:	2300      	movs	r3, #0
 800f5be:	627b      	str	r3, [r7, #36]	; 0x24
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f5c4:	4bd9      	ldr	r3, [pc, #868]	; (800f92c <evtMspReceive+0x380>)
 800f5c6:	61fb      	str	r3, [r7, #28]

    (void)p_issuer;

    pifMsp_MakeAnswer(p_owner, p_packet);
 800f5c8:	68b9      	ldr	r1, [r7, #8]
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f008 fce6 	bl	8017f9c <pifMsp_MakeAnswer>
    switch (p_packet->command) {
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	3b40      	subs	r3, #64	; 0x40
 800f5d6:	2bbe      	cmp	r3, #190	; 0xbe
 800f5d8:	f201 8487 	bhi.w	8010eea <evtMspReceive+0x193e>
 800f5dc:	a201      	add	r2, pc, #4	; (adr r2, 800f5e4 <evtMspReceive+0x38>)
 800f5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e2:	bf00      	nop
 800f5e4:	08010e5b 	.word	0x08010e5b
 800f5e8:	08010e83 	.word	0x08010e83
 800f5ec:	08010d85 	.word	0x08010d85
 800f5f0:	08010bf1 	.word	0x08010bf1
 800f5f4:	08010eaf 	.word	0x08010eaf
 800f5f8:	08010eb7 	.word	0x08010eb7
 800f5fc:	08010eeb 	.word	0x08010eeb
 800f600:	08010eeb 	.word	0x08010eeb
 800f604:	08010eeb 	.word	0x08010eeb
 800f608:	08010eeb 	.word	0x08010eeb
 800f60c:	08010eeb 	.word	0x08010eeb
 800f610:	08010eeb 	.word	0x08010eeb
 800f614:	08010eeb 	.word	0x08010eeb
 800f618:	08010eeb 	.word	0x08010eeb
 800f61c:	08010eeb 	.word	0x08010eeb
 800f620:	08010eeb 	.word	0x08010eeb
 800f624:	08010eeb 	.word	0x08010eeb
 800f628:	08010eeb 	.word	0x08010eeb
 800f62c:	08010eeb 	.word	0x08010eeb
 800f630:	08010eeb 	.word	0x08010eeb
 800f634:	08010eeb 	.word	0x08010eeb
 800f638:	08010eeb 	.word	0x08010eeb
 800f63c:	08010eeb 	.word	0x08010eeb
 800f640:	08010eeb 	.word	0x08010eeb
 800f644:	08010eeb 	.word	0x08010eeb
 800f648:	08010eeb 	.word	0x08010eeb
 800f64c:	08010eeb 	.word	0x08010eeb
 800f650:	08010eeb 	.word	0x08010eeb
 800f654:	08010eeb 	.word	0x08010eeb
 800f658:	08010eeb 	.word	0x08010eeb
 800f65c:	08010eeb 	.word	0x08010eeb
 800f660:	08010eeb 	.word	0x08010eeb
 800f664:	08010eeb 	.word	0x08010eeb
 800f668:	08010eeb 	.word	0x08010eeb
 800f66c:	08010eeb 	.word	0x08010eeb
 800f670:	08010eeb 	.word	0x08010eeb
 800f674:	0800fc83 	.word	0x0800fc83
 800f678:	0800fcab 	.word	0x0800fcab
 800f67c:	0800fe37 	.word	0x0800fe37
 800f680:	0800ff37 	.word	0x0800ff37
 800f684:	080103db 	.word	0x080103db
 800f688:	080103e9 	.word	0x080103e9
 800f68c:	08010411 	.word	0x08010411
 800f690:	08010491 	.word	0x08010491
 800f694:	080104c3 	.word	0x080104c3
 800f698:	080104fb 	.word	0x080104fb
 800f69c:	08010519 	.word	0x08010519
 800f6a0:	080105bd 	.word	0x080105bd
 800f6a4:	08010621 	.word	0x08010621
 800f6a8:	080106ad 	.word	0x080106ad
 800f6ac:	0801079d 	.word	0x0801079d
 800f6b0:	0801088d 	.word	0x0801088d
 800f6b4:	080106e5 	.word	0x080106e5
 800f6b8:	0801069f 	.word	0x0801069f
 800f6bc:	080108b1 	.word	0x080108b1
 800f6c0:	080106ef 	.word	0x080106ef
 800f6c4:	0800ff45 	.word	0x0800ff45
 800f6c8:	08010eeb 	.word	0x08010eeb
 800f6cc:	08010eeb 	.word	0x08010eeb
 800f6d0:	08010251 	.word	0x08010251
 800f6d4:	08010eeb 	.word	0x08010eeb
 800f6d8:	08010eeb 	.word	0x08010eeb
 800f6dc:	08010eeb 	.word	0x08010eeb
 800f6e0:	08010eeb 	.word	0x08010eeb
 800f6e4:	08010eeb 	.word	0x08010eeb
 800f6e8:	08010eeb 	.word	0x08010eeb
 800f6ec:	08010eeb 	.word	0x08010eeb
 800f6f0:	08010eeb 	.word	0x08010eeb
 800f6f4:	08010eeb 	.word	0x08010eeb
 800f6f8:	08010eeb 	.word	0x08010eeb
 800f6fc:	08010eeb 	.word	0x08010eeb
 800f700:	08010eeb 	.word	0x08010eeb
 800f704:	08010eeb 	.word	0x08010eeb
 800f708:	08010eeb 	.word	0x08010eeb
 800f70c:	08010eeb 	.word	0x08010eeb
 800f710:	08010eeb 	.word	0x08010eeb
 800f714:	08010eeb 	.word	0x08010eeb
 800f718:	08010eeb 	.word	0x08010eeb
 800f71c:	08010eeb 	.word	0x08010eeb
 800f720:	08010eeb 	.word	0x08010eeb
 800f724:	08010eeb 	.word	0x08010eeb
 800f728:	08010eeb 	.word	0x08010eeb
 800f72c:	08010eeb 	.word	0x08010eeb
 800f730:	08010eeb 	.word	0x08010eeb
 800f734:	08010eeb 	.word	0x08010eeb
 800f738:	08010eeb 	.word	0x08010eeb
 800f73c:	08010eeb 	.word	0x08010eeb
 800f740:	08010eeb 	.word	0x08010eeb
 800f744:	08010eeb 	.word	0x08010eeb
 800f748:	08010eeb 	.word	0x08010eeb
 800f74c:	08010eeb 	.word	0x08010eeb
 800f750:	08010eeb 	.word	0x08010eeb
 800f754:	08010eeb 	.word	0x08010eeb
 800f758:	08010eeb 	.word	0x08010eeb
 800f75c:	08010eeb 	.word	0x08010eeb
 800f760:	08010eeb 	.word	0x08010eeb
 800f764:	08010b05 	.word	0x08010b05
 800f768:	08010eeb 	.word	0x08010eeb
 800f76c:	08010eeb 	.word	0x08010eeb
 800f770:	08010eeb 	.word	0x08010eeb
 800f774:	08010b2b 	.word	0x08010b2b
 800f778:	08010eeb 	.word	0x08010eeb
 800f77c:	08010b95 	.word	0x08010b95
 800f780:	08010eeb 	.word	0x08010eeb
 800f784:	08010eeb 	.word	0x08010eeb
 800f788:	08010eeb 	.word	0x08010eeb
 800f78c:	08010eeb 	.word	0x08010eeb
 800f790:	08010eeb 	.word	0x08010eeb
 800f794:	08010eeb 	.word	0x08010eeb
 800f798:	08010eeb 	.word	0x08010eeb
 800f79c:	08010eeb 	.word	0x08010eeb
 800f7a0:	08010eeb 	.word	0x08010eeb
 800f7a4:	08010eeb 	.word	0x08010eeb
 800f7a8:	08010eeb 	.word	0x08010eeb
 800f7ac:	08010eeb 	.word	0x08010eeb
 800f7b0:	08010eeb 	.word	0x08010eeb
 800f7b4:	08010eeb 	.word	0x08010eeb
 800f7b8:	08010eeb 	.word	0x08010eeb
 800f7bc:	08010eeb 	.word	0x08010eeb
 800f7c0:	08010eeb 	.word	0x08010eeb
 800f7c4:	08010eeb 	.word	0x08010eeb
 800f7c8:	08010eeb 	.word	0x08010eeb
 800f7cc:	08010eeb 	.word	0x08010eeb
 800f7d0:	08010eeb 	.word	0x08010eeb
 800f7d4:	08010eeb 	.word	0x08010eeb
 800f7d8:	08010eeb 	.word	0x08010eeb
 800f7dc:	08010eeb 	.word	0x08010eeb
 800f7e0:	08010eeb 	.word	0x08010eeb
 800f7e4:	08010eeb 	.word	0x08010eeb
 800f7e8:	08010eeb 	.word	0x08010eeb
 800f7ec:	08010eeb 	.word	0x08010eeb
 800f7f0:	08010eeb 	.word	0x08010eeb
 800f7f4:	08010eeb 	.word	0x08010eeb
 800f7f8:	08010eeb 	.word	0x08010eeb
 800f7fc:	08010eeb 	.word	0x08010eeb
 800f800:	08010eeb 	.word	0x08010eeb
 800f804:	0800f8e1 	.word	0x0800f8e1
 800f808:	0800f939 	.word	0x0800f939
 800f80c:	0800f99f 	.word	0x0800f99f
 800f810:	0800fa29 	.word	0x0800fa29
 800f814:	0800fa61 	.word	0x0800fa61
 800f818:	080109cf 	.word	0x080109cf
 800f81c:	080109e3 	.word	0x080109e3
 800f820:	0800fac9 	.word	0x0800fac9
 800f824:	080109bd 	.word	0x080109bd
 800f828:	08010925 	.word	0x08010925
 800f82c:	0800fc39 	.word	0x0800fc39
 800f830:	0800fc71 	.word	0x0800fc71
 800f834:	0800ffed 	.word	0x0800ffed
 800f838:	08010eeb 	.word	0x08010eeb
 800f83c:	0800fbdf 	.word	0x0800fbdf
 800f840:	08010eeb 	.word	0x08010eeb
 800f844:	08010319 	.word	0x08010319
 800f848:	08010eeb 	.word	0x08010eeb
 800f84c:	08010eeb 	.word	0x08010eeb
 800f850:	08010eeb 	.word	0x08010eeb
 800f854:	08010eeb 	.word	0x08010eeb
 800f858:	08010eeb 	.word	0x08010eeb
 800f85c:	08010eeb 	.word	0x08010eeb
 800f860:	08010eeb 	.word	0x08010eeb
 800f864:	08010eeb 	.word	0x08010eeb
 800f868:	08010eeb 	.word	0x08010eeb
 800f86c:	08010eeb 	.word	0x08010eeb
 800f870:	08010eeb 	.word	0x08010eeb
 800f874:	08010eeb 	.word	0x08010eeb
 800f878:	08010eeb 	.word	0x08010eeb
 800f87c:	08010eeb 	.word	0x08010eeb
 800f880:	08010eeb 	.word	0x08010eeb
 800f884:	08010eeb 	.word	0x08010eeb
 800f888:	08010eeb 	.word	0x08010eeb
 800f88c:	08010eeb 	.word	0x08010eeb
 800f890:	08010eeb 	.word	0x08010eeb
 800f894:	08010eeb 	.word	0x08010eeb
 800f898:	08010eeb 	.word	0x08010eeb
 800f89c:	08010eeb 	.word	0x08010eeb
 800f8a0:	0800f90d 	.word	0x0800f90d
 800f8a4:	08010ae3 	.word	0x08010ae3
 800f8a8:	08010099 	.word	0x08010099
 800f8ac:	08010163 	.word	0x08010163
 800f8b0:	08010eeb 	.word	0x08010eeb
 800f8b4:	08010eeb 	.word	0x08010eeb
 800f8b8:	08010eeb 	.word	0x08010eeb
 800f8bc:	08010eeb 	.word	0x08010eeb
 800f8c0:	08010eeb 	.word	0x08010eeb
 800f8c4:	08010eeb 	.word	0x08010eeb
 800f8c8:	08010eeb 	.word	0x08010eeb
 800f8cc:	080109f5 	.word	0x080109f5
 800f8d0:	08010eeb 	.word	0x08010eeb
 800f8d4:	08010eeb 	.word	0x08010eeb
 800f8d8:	08010eeb 	.word	0x08010eeb
 800f8dc:	08010a11 	.word	0x08010a11
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f8e4:	e00b      	b.n	800f8fe <evtMspReceive+0x352>
            rcData[i] = pifMsp_ReadData16(p_packet);
 800f8e6:	68b8      	ldr	r0, [r7, #8]
 800f8e8:	f008 fb14 	bl	8017f14 <pifMsp_ReadData16>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	b219      	sxth	r1, r3
 800f8f0:	4a0f      	ldr	r2, [pc, #60]	; (800f930 <evtMspReceive+0x384>)
 800f8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f900:	2b07      	cmp	r3, #7
 800f902:	d9f0      	bls.n	800f8e6 <evtMspReceive+0x33a>
        mspFrameRecieve();
 800f904:	f7fe fce0 	bl	800e2c8 <mspFrameRecieve>
        break;
 800f908:	f001 bafd 	b.w	8010f06 <evtMspReceive+0x195a>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = pifMsp_ReadData16(p_packet);
 800f90c:	68b8      	ldr	r0, [r7, #8]
 800f90e:	f008 fb01 	bl	8017f14 <pifMsp_ReadData16>
 800f912:	4603      	mov	r3, r0
 800f914:	b21a      	sxth	r2, r3
 800f916:	4b07      	ldr	r3, [pc, #28]	; (800f934 <evtMspReceive+0x388>)
 800f918:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = pifMsp_ReadData16(p_packet);
 800f91a:	68b8      	ldr	r0, [r7, #8]
 800f91c:	f008 fafa 	bl	8017f14 <pifMsp_ReadData16>
 800f920:	4603      	mov	r3, r0
 800f922:	b21a      	sxth	r2, r3
 800f924:	4b03      	ldr	r3, [pc, #12]	; (800f934 <evtMspReceive+0x388>)
 800f926:	859a      	strh	r2, [r3, #44]	; 0x2c
        break;
 800f928:	f001 baed 	b.w	8010f06 <evtMspReceive+0x195a>
 800f92c:	08027800 	.word	0x08027800
 800f930:	20001770 	.word	0x20001770
 800f934:	20000e64 	.word	0x20000e64

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = pifMsp_ReadData8(p_packet);
 800f938:	68b8      	ldr	r0, [r7, #8]
 800f93a:	f008 fad7 	bl	8017eec <pifMsp_ReadData8>
 800f93e:	4603      	mov	r3, r0
 800f940:	461a      	mov	r2, r3
 800f942:	4bb1      	ldr	r3, [pc, #708]	; (800fc08 <evtMspReceive+0x65c>)
 800f944:	72da      	strb	r2, [r3, #11]
        GPS_numSat = pifMsp_ReadData8(p_packet);
 800f946:	68b8      	ldr	r0, [r7, #8]
 800f948:	f008 fad0 	bl	8017eec <pifMsp_ReadData8>
 800f94c:	4603      	mov	r3, r0
 800f94e:	461a      	mov	r2, r3
 800f950:	4bae      	ldr	r3, [pc, #696]	; (800fc0c <evtMspReceive+0x660>)
 800f952:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = pifMsp_ReadData32(p_packet);
 800f954:	68b8      	ldr	r0, [r7, #8]
 800f956:	f008 fafa 	bl	8017f4e <pifMsp_ReadData32>
 800f95a:	4603      	mov	r3, r0
 800f95c:	461a      	mov	r2, r3
 800f95e:	4bac      	ldr	r3, [pc, #688]	; (800fc10 <evtMspReceive+0x664>)
 800f960:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = pifMsp_ReadData32(p_packet);
 800f962:	68b8      	ldr	r0, [r7, #8]
 800f964:	f008 faf3 	bl	8017f4e <pifMsp_ReadData32>
 800f968:	4603      	mov	r3, r0
 800f96a:	461a      	mov	r2, r3
 800f96c:	4ba8      	ldr	r3, [pc, #672]	; (800fc10 <evtMspReceive+0x664>)
 800f96e:	605a      	str	r2, [r3, #4]
        GPS_altitude = pifMsp_ReadData16(p_packet);
 800f970:	68b8      	ldr	r0, [r7, #8]
 800f972:	f008 facf 	bl	8017f14 <pifMsp_ReadData16>
 800f976:	4603      	mov	r3, r0
 800f978:	461a      	mov	r2, r3
 800f97a:	4ba6      	ldr	r3, [pc, #664]	; (800fc14 <evtMspReceive+0x668>)
 800f97c:	801a      	strh	r2, [r3, #0]
        GPS_speed = pifMsp_ReadData16(p_packet);
 800f97e:	68b8      	ldr	r0, [r7, #8]
 800f980:	f008 fac8 	bl	8017f14 <pifMsp_ReadData16>
 800f984:	4603      	mov	r3, r0
 800f986:	461a      	mov	r2, r3
 800f988:	4ba3      	ldr	r3, [pc, #652]	; (800fc18 <evtMspReceive+0x66c>)
 800f98a:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800f98c:	4ba3      	ldr	r3, [pc, #652]	; (800fc1c <evtMspReceive+0x670>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	f043 0302 	orr.w	r3, r3, #2
 800f994:	b2da      	uxtb	r2, r3
 800f996:	4ba1      	ldr	r3, [pc, #644]	; (800fc1c <evtMspReceive+0x670>)
 800f998:	701a      	strb	r2, [r3, #0]
        break;
 800f99a:	f001 bab4 	b.w	8010f06 <evtMspReceive+0x195a>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800f99e:	2300      	movs	r3, #0
 800f9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f9a2:	e03c      	b.n	800fa1e <evtMspReceive+0x472>
            cfg.P8[i] = pifMsp_ReadData8(p_packet);
 800f9a4:	68b8      	ldr	r0, [r7, #8]
 800f9a6:	f008 faa1 	bl	8017eec <pifMsp_ReadData8>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4a9c      	ldr	r2, [pc, #624]	; (800fc20 <evtMspReceive+0x674>)
 800f9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b2:	4413      	add	r3, r2
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	460a      	mov	r2, r1
 800f9b8:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = pifMsp_ReadData8(p_packet);
 800f9ba:	68b8      	ldr	r0, [r7, #8]
 800f9bc:	f008 fa96 	bl	8017eec <pifMsp_ReadData8>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	4a96      	ldr	r2, [pc, #600]	; (800fc20 <evtMspReceive+0x674>)
 800f9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9c8:	4413      	add	r3, r2
 800f9ca:	330b      	adds	r3, #11
 800f9cc:	460a      	mov	r2, r1
 800f9ce:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = pifMsp_ReadData8(p_packet);
 800f9d0:	68b8      	ldr	r0, [r7, #8]
 800f9d2:	f008 fa8b 	bl	8017eec <pifMsp_ReadData8>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4a91      	ldr	r2, [pc, #580]	; (800fc20 <evtMspReceive+0x674>)
 800f9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9de:	4413      	add	r3, r2
 800f9e0:	3315      	adds	r3, #21
 800f9e2:	460a      	mov	r2, r1
 800f9e4:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 800f9e6:	4a8e      	ldr	r2, [pc, #568]	; (800fc20 <evtMspReceive+0x674>)
 800f9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ea:	4413      	add	r3, r2
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	4a8b      	ldr	r2, [pc, #556]	; (800fc20 <evtMspReceive+0x674>)
 800f9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f6:	4413      	add	r3, r2
 800f9f8:	330b      	adds	r3, #11
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	4a88      	ldr	r2, [pc, #544]	; (800fc20 <evtMspReceive+0x674>)
 800fa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa02:	4413      	add	r3, r2
 800fa04:	3315      	adds	r3, #21
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	9301      	str	r3, [sp, #4]
 800fa0a:	9100      	str	r1, [sp, #0]
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa10:	4984      	ldr	r1, [pc, #528]	; (800fc24 <evtMspReceive+0x678>)
 800fa12:	2002      	movs	r0, #2
 800fa14:	f003 fd4a 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 800fa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	637b      	str	r3, [r7, #52]	; 0x34
 800fa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa20:	2b09      	cmp	r3, #9
 800fa22:	d9bf      	bls.n	800f9a4 <evtMspReceive+0x3f8>
#endif
        }
        break;
 800fa24:	f001 ba6f 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa2c:	e010      	b.n	800fa50 <evtMspReceive+0x4a4>
            cfg.activate[availableBoxes[i]] = pifMsp_ReadData16(p_packet);
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	f008 fa70 	bl	8017f14 <pifMsp_ReadData16>
 800fa34:	4603      	mov	r3, r0
 800fa36:	4619      	mov	r1, r3
 800fa38:	4a7b      	ldr	r2, [pc, #492]	; (800fc28 <evtMspReceive+0x67c>)
 800fa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3c:	4413      	add	r3, r2
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	4a77      	ldr	r2, [pc, #476]	; (800fc20 <evtMspReceive+0x674>)
 800fa42:	3312      	adds	r3, #18
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800fa4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa50:	4b76      	ldr	r3, [pc, #472]	; (800fc2c <evtMspReceive+0x680>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d3e8      	bcc.n	800fa2e <evtMspReceive+0x482>
        break;
 800fa5c:	f001 ba53 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = pifMsp_ReadData8(p_packet);
 800fa60:	68b8      	ldr	r0, [r7, #8]
 800fa62:	f008 fa43 	bl	8017eec <pifMsp_ReadData8>
 800fa66:	4603      	mov	r3, r0
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4b6d      	ldr	r3, [pc, #436]	; (800fc20 <evtMspReceive+0x674>)
 800fa6c:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = pifMsp_ReadData8(p_packet);
 800fa6e:	68b8      	ldr	r0, [r7, #8]
 800fa70:	f008 fa3c 	bl	8017eec <pifMsp_ReadData8>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
 800fa78:	4b69      	ldr	r3, [pc, #420]	; (800fc20 <evtMspReceive+0x674>)
 800fa7a:	f883 2020 	strb.w	r2, [r3, #32]
        pifMsp_ReadData8(p_packet); // Legacy pitch-roll rate, read but not set.
 800fa7e:	68b8      	ldr	r0, [r7, #8]
 800fa80:	f008 fa34 	bl	8017eec <pifMsp_ReadData8>
        cfg.yawRate = pifMsp_ReadData8(p_packet);
 800fa84:	68b8      	ldr	r0, [r7, #8]
 800fa86:	f008 fa31 	bl	8017eec <pifMsp_ReadData8>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	4b64      	ldr	r3, [pc, #400]	; (800fc20 <evtMspReceive+0x674>)
 800fa90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = pifMsp_ReadData8(p_packet);
 800fa94:	68b8      	ldr	r0, [r7, #8]
 800fa96:	f008 fa29 	bl	8017eec <pifMsp_ReadData8>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4b60      	ldr	r3, [pc, #384]	; (800fc20 <evtMspReceive+0x674>)
 800faa0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = pifMsp_ReadData8(p_packet);
 800faa4:	68b8      	ldr	r0, [r7, #8]
 800faa6:	f008 fa21 	bl	8017eec <pifMsp_ReadData8>
 800faaa:	4603      	mov	r3, r0
 800faac:	461a      	mov	r2, r3
 800faae:	4b5c      	ldr	r3, [pc, #368]	; (800fc20 <evtMspReceive+0x674>)
 800fab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = pifMsp_ReadData8(p_packet);
 800fab4:	68b8      	ldr	r0, [r7, #8]
 800fab6:	f008 fa19 	bl	8017eec <pifMsp_ReadData8>
 800faba:	4603      	mov	r3, r0
 800fabc:	461a      	mov	r2, r3
 800fabe:	4b58      	ldr	r3, [pc, #352]	; (800fc20 <evtMspReceive+0x674>)
 800fac0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        break;
 800fac4:	f001 ba1f 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_MISC:
        tmp = pifMsp_ReadData16(p_packet);
 800fac8:	68b8      	ldr	r0, [r7, #8]
 800faca:	f008 fa23 	bl	8017f14 <pifMsp_ReadData16>
 800face:	4603      	mov	r3, r0
 800fad0:	617b      	str	r3, [r7, #20]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fad8:	d208      	bcs.n	800faec <evtMspReceive+0x540>
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800fae0:	d904      	bls.n	800faec <evtMspReceive+0x540>
            mcfg.midrc = tmp;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	4b52      	ldr	r3, [pc, #328]	; (800fc30 <evtMspReceive+0x684>)
 800fae8:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = pifMsp_ReadData16(p_packet);
 800faec:	68b8      	ldr	r0, [r7, #8]
 800faee:	f008 fa11 	bl	8017f14 <pifMsp_ReadData16>
 800faf2:	4603      	mov	r3, r0
 800faf4:	461a      	mov	r2, r3
 800faf6:	4b4e      	ldr	r3, [pc, #312]	; (800fc30 <evtMspReceive+0x684>)
 800faf8:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = pifMsp_ReadData16(p_packet);
 800fafc:	68b8      	ldr	r0, [r7, #8]
 800fafe:	f008 fa09 	bl	8017f14 <pifMsp_ReadData16>
 800fb02:	4603      	mov	r3, r0
 800fb04:	461a      	mov	r2, r3
 800fb06:	4b4a      	ldr	r3, [pc, #296]	; (800fc30 <evtMspReceive+0x684>)
 800fb08:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = pifMsp_ReadData16(p_packet);
 800fb0c:	68b8      	ldr	r0, [r7, #8]
 800fb0e:	f008 fa01 	bl	8017f14 <pifMsp_ReadData16>
 800fb12:	4603      	mov	r3, r0
 800fb14:	461a      	mov	r2, r3
 800fb16:	4b46      	ldr	r3, [pc, #280]	; (800fc30 <evtMspReceive+0x684>)
 800fb18:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = pifMsp_ReadData16(p_packet);
 800fb1c:	68b8      	ldr	r0, [r7, #8]
 800fb1e:	f008 f9f9 	bl	8017f14 <pifMsp_ReadData16>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461a      	mov	r2, r3
 800fb26:	4b3e      	ldr	r3, [pc, #248]	; (800fc20 <evtMspReceive+0x674>)
 800fb28:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = pifMsp_ReadData8(p_packet);
 800fb2c:	68b8      	ldr	r0, [r7, #8]
 800fb2e:	f008 f9dd 	bl	8017eec <pifMsp_ReadData8>
 800fb32:	4603      	mov	r3, r0
 800fb34:	461a      	mov	r2, r3
 800fb36:	4b3e      	ldr	r3, [pc, #248]	; (800fc30 <evtMspReceive+0x684>)
 800fb38:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = pifMsp_ReadData8(p_packet);
 800fb3c:	68b8      	ldr	r0, [r7, #8]
 800fb3e:	f008 f9d5 	bl	8017eec <pifMsp_ReadData8>
 800fb42:	4603      	mov	r3, r0
 800fb44:	b25a      	sxtb	r2, r3
 800fb46:	4b3a      	ldr	r3, [pc, #232]	; (800fc30 <evtMspReceive+0x684>)
 800fb48:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = pifMsp_ReadData8(p_packet);
 800fb4c:	68b8      	ldr	r0, [r7, #8]
 800fb4e:	f008 f9cd 	bl	8017eec <pifMsp_ReadData8>
 800fb52:	4603      	mov	r3, r0
 800fb54:	b25a      	sxtb	r2, r3
 800fb56:	4b36      	ldr	r3, [pc, #216]	; (800fc30 <evtMspReceive+0x684>)
 800fb58:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = pifMsp_ReadData8(p_packet);
 800fb5c:	68b8      	ldr	r0, [r7, #8]
 800fb5e:	f008 f9c5 	bl	8017eec <pifMsp_ReadData8>
 800fb62:	4603      	mov	r3, r0
 800fb64:	461a      	mov	r2, r3
 800fb66:	4b32      	ldr	r3, [pc, #200]	; (800fc30 <evtMspReceive+0x684>)
 800fb68:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = pifMsp_ReadData8(p_packet);
 800fb6c:	68b8      	ldr	r0, [r7, #8]
 800fb6e:	f008 f9bd 	bl	8017eec <pifMsp_ReadData8>
 800fb72:	4603      	mov	r3, r0
 800fb74:	461a      	mov	r2, r3
 800fb76:	4b2e      	ldr	r3, [pc, #184]	; (800fc30 <evtMspReceive+0x684>)
 800fb78:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        pifMsp_ReadData8(p_packet);
 800fb7c:	68b8      	ldr	r0, [r7, #8]
 800fb7e:	f008 f9b5 	bl	8017eec <pifMsp_ReadData8>
        cfg.mag_declination = pifMsp_ReadData16(p_packet) * 10;
 800fb82:	68b8      	ldr	r0, [r7, #8]
 800fb84:	f008 f9c6 	bl	8017f14 <pifMsp_ReadData16>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	0092      	lsls	r2, r2, #2
 800fb8e:	4413      	add	r3, r2
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	b21a      	sxth	r2, r3
 800fb96:	4b22      	ldr	r3, [pc, #136]	; (800fc20 <evtMspReceive+0x674>)
 800fb98:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = pifMsp_ReadData8(p_packet);           // actual vbatscale as intended
 800fb9a:	68b8      	ldr	r0, [r7, #8]
 800fb9c:	f008 f9a6 	bl	8017eec <pifMsp_ReadData8>
 800fba0:	4603      	mov	r3, r0
 800fba2:	461a      	mov	r2, r3
 800fba4:	4b22      	ldr	r3, [pc, #136]	; (800fc30 <evtMspReceive+0x684>)
 800fba6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn1 in MWC2.3 GUI
 800fbaa:	68b8      	ldr	r0, [r7, #8]
 800fbac:	f008 f99e 	bl	8017eec <pifMsp_ReadData8>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4b1e      	ldr	r3, [pc, #120]	; (800fc30 <evtMspReceive+0x684>)
 800fbb6:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn2 in MWC2.3 GUI
 800fbba:	68b8      	ldr	r0, [r7, #8]
 800fbbc:	f008 f996 	bl	8017eec <pifMsp_ReadData8>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4b1a      	ldr	r3, [pc, #104]	; (800fc30 <evtMspReceive+0x684>)
 800fbc6:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = pifMsp_ReadData8(p_packet); // vbatlevel when buzzer starts to alert
 800fbca:	68b8      	ldr	r0, [r7, #8]
 800fbcc:	f008 f98e 	bl	8017eec <pifMsp_ReadData8>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	4b16      	ldr	r3, [pc, #88]	; (800fc30 <evtMspReceive+0x684>)
 800fbd6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        break;
 800fbda:	f001 b994 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fbde:	2300      	movs	r3, #0
 800fbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800fbe2:	e00b      	b.n	800fbfc <evtMspReceive+0x650>
            motor_disarmed[i] = pifMsp_ReadData16(p_packet);
 800fbe4:	68b8      	ldr	r0, [r7, #8]
 800fbe6:	f008 f995 	bl	8017f14 <pifMsp_ReadData16>
 800fbea:	4603      	mov	r3, r0
 800fbec:	b219      	sxth	r1, r3
 800fbee:	4a11      	ldr	r2, [pc, #68]	; (800fc34 <evtMspReceive+0x688>)
 800fbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	637b      	str	r3, [r7, #52]	; 0x34
 800fbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfe:	2b07      	cmp	r3, #7
 800fc00:	d9f0      	bls.n	800fbe4 <evtMspReceive+0x638>
        break;
 800fc02:	f001 b980 	b.w	8010f06 <evtMspReceive+0x195a>
 800fc06:	bf00      	nop
 800fc08:	20001738 	.word	0x20001738
 800fc0c:	2000181c 	.word	0x2000181c
 800fc10:	200017fc 	.word	0x200017fc
 800fc14:	20001822 	.word	0x20001822
 800fc18:	20001824 	.word	0x20001824
 800fc1c:	20001826 	.word	0x20001826
 800fc20:	20000e64 	.word	0x20000e64
 800fc24:	0802780c 	.word	0x0802780c
 800fc28:	20001b80 	.word	0x20001b80
 800fc2c:	20001b99 	.word	0x20001b99
 800fc30:	200008f8 	.word	0x200008f8
 800fc34:	200015b8 	.word	0x200015b8

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800fc38:	4ba7      	ldr	r3, [pc, #668]	; (800fed8 <evtMspReceive+0x92c>)
 800fc3a:	785b      	ldrb	r3, [r3, #1]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f041 8159 	bne.w	8010ef4 <evtMspReceive+0x1948>
            mcfg.current_profile = pifMsp_ReadData8(p_packet);
 800fc42:	68b8      	ldr	r0, [r7, #8]
 800fc44:	f008 f952 	bl	8017eec <pifMsp_ReadData8>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	4ba3      	ldr	r3, [pc, #652]	; (800fedc <evtMspReceive+0x930>)
 800fc4e:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fc52:	4ba2      	ldr	r3, [pc, #648]	; (800fedc <evtMspReceive+0x930>)
 800fc54:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fc58:	2b02      	cmp	r3, #2
 800fc5a:	d903      	bls.n	800fc64 <evtMspReceive+0x6b8>
                mcfg.current_profile = 0;
 800fc5c:	4b9f      	ldr	r3, [pc, #636]	; (800fedc <evtMspReceive+0x930>)
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fc64:	2100      	movs	r1, #0
 800fc66:	2000      	movs	r0, #0
 800fc68:	f7f6 fcd0 	bl	800660c <writeEEPROM>
        }
        break;
 800fc6c:	f001 b942 	b.w	8010ef4 <evtMspReceive+0x1948>

    case MSP_SET_HEAD:
        magHold = pifMsp_ReadData16(p_packet);
 800fc70:	68b8      	ldr	r0, [r7, #8]
 800fc72:	f008 f94f 	bl	8017f14 <pifMsp_ReadData16>
 800fc76:	4603      	mov	r3, r0
 800fc78:	b21a      	sxth	r2, r3
 800fc7a:	4b99      	ldr	r3, [pc, #612]	; (800fee0 <evtMspReceive+0x934>)
 800fc7c:	801a      	strh	r2, [r3, #0]
        break;
 800fc7e:	f001 b942 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_IDENT:
        pifMsp_AddAnswer8(p_owner, VERSION);                    // multiwii version
 800fc82:	21e7      	movs	r1, #231	; 0xe7
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f008 f9db 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);    // type of multicopter
 800fc8a:	4b94      	ldr	r3, [pc, #592]	; (800fedc <evtMspReceive+0x930>)
 800fc8c:	795b      	ldrb	r3, [r3, #5]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f008 f9d5 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fc96:	2104      	movs	r1, #4
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f008 f9d1 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fc9e:	4991      	ldr	r1, [pc, #580]	; (800fee4 <evtMspReceive+0x938>)
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f008 fa5f 	bl	8018164 <pifMsp_AddAnswer32>
        break;
 800fca6:	f001 b92e 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_STATUS:
        pifMsp_AddAnswer16(p_owner, cycleTime);
 800fcaa:	4b8f      	ldr	r3, [pc, #572]	; (800fee8 <evtMspReceive+0x93c>)
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f008 fa0b 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, g_i2c_port.error_count);
 800fcb6:	4b8d      	ldr	r3, [pc, #564]	; (800feec <evtMspReceive+0x940>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f008 fa05 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fcc2:	2002      	movs	r0, #2
 800fcc4:	f7f7 f83c 	bl	8006d40 <sensors>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	b21c      	sxth	r4, r3
 800fccc:	2004      	movs	r0, #4
 800fcce:	f7f7 f837 	bl	8006d40 <sensors>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	b21b      	sxth	r3, r3
 800fcd8:	4323      	orrs	r3, r4
 800fcda:	b21c      	sxth	r4, r3
 800fcdc:	2008      	movs	r0, #8
 800fcde:	f7f7 f82f 	bl	8006d40 <sensors>
 800fce2:	4603      	mov	r3, r0
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	b21b      	sxth	r3, r3
 800fce8:	4323      	orrs	r3, r4
 800fcea:	b21c      	sxth	r4, r3
 800fcec:	2020      	movs	r0, #32
 800fcee:	f7f7 f827 	bl	8006d40 <sensors>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	00db      	lsls	r3, r3, #3
 800fcf6:	b21b      	sxth	r3, r3
 800fcf8:	4323      	orrs	r3, r4
 800fcfa:	b21c      	sxth	r4, r3
 800fcfc:	2010      	movs	r0, #16
 800fcfe:	f7f7 f81f 	bl	8006d40 <sensors>
 800fd02:	4603      	mov	r3, r0
 800fd04:	011b      	lsls	r3, r3, #4
 800fd06:	b21b      	sxth	r3, r3
 800fd08:	4323      	orrs	r3, r4
 800fd0a:	b21b      	sxth	r3, r3
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	4619      	mov	r1, r3
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f008 f9db 	bl	80180cc <pifMsp_AddAnswer16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fd16:	2300      	movs	r3, #0
 800fd18:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fd1a:	4b6f      	ldr	r3, [pc, #444]	; (800fed8 <evtMspReceive+0x92c>)
 800fd1c:	78db      	ldrb	r3, [r3, #3]
 800fd1e:	005a      	lsls	r2, r3, #1
 800fd20:	4b6d      	ldr	r3, [pc, #436]	; (800fed8 <evtMspReceive+0x92c>)
 800fd22:	791b      	ldrb	r3, [r3, #4]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fd28:	4b6b      	ldr	r3, [pc, #428]	; (800fed8 <evtMspReceive+0x92c>)
 800fd2a:	799b      	ldrb	r3, [r3, #6]
 800fd2c:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fd2e:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fd30:	4b69      	ldr	r3, [pc, #420]	; (800fed8 <evtMspReceive+0x92c>)
 800fd32:	795b      	ldrb	r3, [r3, #5]
 800fd34:	015b      	lsls	r3, r3, #5
 800fd36:	431a      	orrs	r2, r3
 800fd38:	4b67      	ldr	r3, [pc, #412]	; (800fed8 <evtMspReceive+0x92c>)
 800fd3a:	7a5b      	ldrb	r3, [r3, #9]
 800fd3c:	019b      	lsls	r3, r3, #6
 800fd3e:	431a      	orrs	r2, r3
 800fd40:	4b6b      	ldr	r3, [pc, #428]	; (800fef0 <evtMspReceive+0x944>)
 800fd42:	79db      	ldrb	r3, [r3, #7]
 800fd44:	01db      	lsls	r3, r3, #7
 800fd46:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fd48:	4b69      	ldr	r3, [pc, #420]	; (800fef0 <evtMspReceive+0x944>)
 800fd4a:	7a1b      	ldrb	r3, [r3, #8]
 800fd4c:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fd4e:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fd50:	4b67      	ldr	r3, [pc, #412]	; (800fef0 <evtMspReceive+0x944>)
 800fd52:	7a5b      	ldrb	r3, [r3, #9]
 800fd54:	025b      	lsls	r3, r3, #9
 800fd56:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fd58:	4b5f      	ldr	r3, [pc, #380]	; (800fed8 <evtMspReceive+0x92c>)
 800fd5a:	79db      	ldrb	r3, [r3, #7]
 800fd5c:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fd5e:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fd60:	4b5d      	ldr	r3, [pc, #372]	; (800fed8 <evtMspReceive+0x92c>)
 800fd62:	7a1b      	ldrb	r3, [r3, #8]
 800fd64:	02db      	lsls	r3, r3, #11
 800fd66:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fd68:	4b5b      	ldr	r3, [pc, #364]	; (800fed8 <evtMspReceive+0x92c>)
 800fd6a:	7d1b      	ldrb	r3, [r3, #20]
 800fd6c:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fd6e:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fd70:	4b59      	ldr	r3, [pc, #356]	; (800fed8 <evtMspReceive+0x92c>)
 800fd72:	7a9b      	ldrb	r3, [r3, #10]
 800fd74:	031b      	lsls	r3, r3, #12
 800fd76:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fd78:	4b5d      	ldr	r3, [pc, #372]	; (800fef0 <evtMspReceive+0x944>)
 800fd7a:	7b5b      	ldrb	r3, [r3, #13]
 800fd7c:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fd7e:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fd80:	4b5b      	ldr	r3, [pc, #364]	; (800fef0 <evtMspReceive+0x944>)
 800fd82:	7b9b      	ldrb	r3, [r3, #14]
 800fd84:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fd86:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fd88:	4b59      	ldr	r3, [pc, #356]	; (800fef0 <evtMspReceive+0x944>)
 800fd8a:	7c1b      	ldrb	r3, [r3, #16]
 800fd8c:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fd8e:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800fd90:	4b57      	ldr	r3, [pc, #348]	; (800fef0 <evtMspReceive+0x944>)
 800fd92:	791b      	ldrb	r3, [r3, #4]
 800fd94:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fd96:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800fd98:	4b55      	ldr	r3, [pc, #340]	; (800fef0 <evtMspReceive+0x944>)
 800fd9a:	7c5b      	ldrb	r3, [r3, #17]
 800fd9c:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800fd9e:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800fda0:	4b53      	ldr	r3, [pc, #332]	; (800fef0 <evtMspReceive+0x944>)
 800fda2:	7c9b      	ldrb	r3, [r3, #18]
 800fda4:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800fda6:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800fda8:	4b51      	ldr	r3, [pc, #324]	; (800fef0 <evtMspReceive+0x944>)
 800fdaa:	7cdb      	ldrb	r3, [r3, #19]
 800fdac:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800fdae:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fdb0:	4b4f      	ldr	r3, [pc, #316]	; (800fef0 <evtMspReceive+0x944>)
 800fdb2:	7d1b      	ldrb	r3, [r3, #20]
 800fdb4:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800fdb6:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fdb8:	4b4d      	ldr	r3, [pc, #308]	; (800fef0 <evtMspReceive+0x944>)
 800fdba:	7d5b      	ldrb	r3, [r3, #21]
 800fdbc:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fdbe:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fdc0:	4b4b      	ldr	r3, [pc, #300]	; (800fef0 <evtMspReceive+0x944>)
 800fdc2:	7d9b      	ldrb	r3, [r3, #22]
 800fdc4:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fdc6:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fdc8:	4b49      	ldr	r3, [pc, #292]	; (800fef0 <evtMspReceive+0x944>)
 800fdca:	7ddb      	ldrb	r3, [r3, #23]
 800fdcc:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fdce:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800fdd0:	4a41      	ldr	r2, [pc, #260]	; (800fed8 <evtMspReceive+0x92c>)
 800fdd2:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fdd4:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fdd6:	617b      	str	r3, [r7, #20]
        for (i = 0; i < numberBoxItems; i++) {
 800fdd8:	2300      	movs	r3, #0
 800fdda:	637b      	str	r3, [r7, #52]	; 0x34
 800fddc:	e018      	b.n	800fe10 <evtMspReceive+0x864>
            int flag = (tmp & (1 << availableBoxes[i]));
 800fdde:	4a45      	ldr	r2, [pc, #276]	; (800fef4 <evtMspReceive+0x948>)
 800fde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fde2:	4413      	add	r3, r2
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	461a      	mov	r2, r3
 800fde8:	2301      	movs	r3, #1
 800fdea:	4093      	lsls	r3, r2
 800fdec:	461a      	mov	r2, r3
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	4013      	ands	r3, r2
 800fdf2:	613b      	str	r3, [r7, #16]
            if (flag)
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d007      	beq.n	800fe0a <evtMspReceive+0x85e>
                junk |= 1 << i;
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800fe02:	461a      	mov	r2, r3
 800fe04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe06:	4313      	orrs	r3, r2
 800fe08:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800fe0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe10:	4b39      	ldr	r3, [pc, #228]	; (800fef8 <evtMspReceive+0x94c>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	461a      	mov	r2, r3
 800fe16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d3e0      	bcc.n	800fdde <evtMspReceive+0x832>
        }
        pifMsp_AddAnswer32(p_owner, junk);
 800fe1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f008 f9a0 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.current_profile);
 800fe24:	4b2d      	ldr	r3, [pc, #180]	; (800fedc <evtMspReceive+0x930>)
 800fe26:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f008 f907 	bl	8018040 <pifMsp_AddAnswer8>
        break;
 800fe32:	f001 b868 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (sensor_set.acc.acc_1G > 1024) {
 800fe36:	4b31      	ldr	r3, [pc, #196]	; (800fefc <evtMspReceive+0x950>)
 800fe38:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800fe3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe40:	d91c      	bls.n	800fe7c <evtMspReceive+0x8d0>
            for (i = 0; i < 3; i++)
 800fe42:	2300      	movs	r3, #0
 800fe44:	637b      	str	r3, [r7, #52]	; 0x34
 800fe46:	e015      	b.n	800fe74 <evtMspReceive+0x8c8>
                pifMsp_AddAnswer16(p_owner, accSmooth[i] / 8);
 800fe48:	4a2d      	ldr	r2, [pc, #180]	; (800ff00 <evtMspReceive+0x954>)
 800fe4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	ed93 7a00 	vldr	s14, [r3]
 800fe54:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800fe58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe60:	ee17 3a90 	vmov	r3, s15
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	4619      	mov	r1, r3
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f008 f92f 	bl	80180cc <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fe6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe70:	3301      	adds	r3, #1
 800fe72:	637b      	str	r3, [r7, #52]	; 0x34
 800fe74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d9e6      	bls.n	800fe48 <evtMspReceive+0x89c>
 800fe7a:	e017      	b.n	800feac <evtMspReceive+0x900>
        } else {
            for (i = 0; i < 3; i++)
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe80:	e011      	b.n	800fea6 <evtMspReceive+0x8fa>
                pifMsp_AddAnswer16(p_owner, accSmooth[i]);
 800fe82:	4a1f      	ldr	r2, [pc, #124]	; (800ff00 <evtMspReceive+0x954>)
 800fe84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4413      	add	r3, r2
 800fe8a:	edd3 7a00 	vldr	s15, [r3]
 800fe8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe92:	ee17 3a90 	vmov	r3, s15
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	4619      	mov	r1, r3
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	f008 f916 	bl	80180cc <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea2:	3301      	adds	r3, #1
 800fea4:	637b      	str	r3, [r7, #52]	; 0x34
 800fea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea8:	2b02      	cmp	r3, #2
 800feaa:	d9ea      	bls.n	800fe82 <evtMspReceive+0x8d6>
        }
        for (i = 0; i < 3; i++)
 800feac:	2300      	movs	r3, #0
 800feae:	637b      	str	r3, [r7, #52]	; 0x34
 800feb0:	e00b      	b.n	800feca <evtMspReceive+0x91e>
            pifMsp_AddAnswer16(p_owner, gyroData[i]);
 800feb2:	4a14      	ldr	r2, [pc, #80]	; (800ff04 <evtMspReceive+0x958>)
 800feb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800feba:	b29b      	uxth	r3, r3
 800febc:	4619      	mov	r1, r3
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f008 f904 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec6:	3301      	adds	r3, #1
 800fec8:	637b      	str	r3, [r7, #52]	; 0x34
 800feca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d9f0      	bls.n	800feb2 <evtMspReceive+0x906>
        for (i = 0; i < 3; i++)
 800fed0:	2300      	movs	r3, #0
 800fed2:	637b      	str	r3, [r7, #52]	; 0x34
 800fed4:	e02a      	b.n	800ff2c <evtMspReceive+0x980>
 800fed6:	bf00      	nop
 800fed8:	20001738 	.word	0x20001738
 800fedc:	200008f8 	.word	0x200008f8
 800fee0:	20001a0a 	.word	0x20001a0a
 800fee4:	c000000c 	.word	0xc000000c
 800fee8:	20001758 	.word	0x20001758
 800feec:	2000153c 	.word	0x2000153c
 800fef0:	200017d8 	.word	0x200017d8
 800fef4:	20001b80 	.word	0x20001b80
 800fef8:	20001b99 	.word	0x20001b99
 800fefc:	2000005c 	.word	0x2000005c
 800ff00:	20001460 	.word	0x20001460
 800ff04:	200014d0 	.word	0x200014d0
            pifMsp_AddAnswer16(p_owner, magADC[i]);
 800ff08:	4a97      	ldr	r2, [pc, #604]	; (8010168 <evtMspReceive+0xbbc>)
 800ff0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	4413      	add	r3, r2
 800ff10:	edd3 7a00 	vldr	s15, [r3]
 800ff14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff18:	ee17 3a90 	vmov	r3, s15
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	4619      	mov	r1, r3
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f008 f8d3 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800ff26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff28:	3301      	adds	r3, #1
 800ff2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ff2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2e:	2b02      	cmp	r3, #2
 800ff30:	d9ea      	bls.n	800ff08 <evtMspReceive+0x95c>
        break;
 800ff32:	f000 bfe8 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SERVO:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&servo, 16);
 800ff36:	2210      	movs	r2, #16
 800ff38:	498c      	ldr	r1, [pc, #560]	; (801016c <evtMspReceive+0xbc0>)
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f008 f95e 	bl	80181fc <pifMsp_AddAnswer>
        break;
 800ff40:	f000 bfe1 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800ff44:	2300      	movs	r3, #0
 800ff46:	637b      	str	r3, [r7, #52]	; 0x34
 800ff48:	e04b      	b.n	800ffe2 <evtMspReceive+0xa36>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].min);
 800ff4a:	4989      	ldr	r1, [pc, #548]	; (8010170 <evtMspReceive+0xbc4>)
 800ff4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff4e:	4613      	mov	r3, r2
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	4413      	add	r3, r2
 800ff54:	005b      	lsls	r3, r3, #1
 800ff56:	440b      	add	r3, r1
 800ff58:	33b8      	adds	r3, #184	; 0xb8
 800ff5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	4619      	mov	r1, r3
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f008 f8b2 	bl	80180cc <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].max);
 800ff68:	4981      	ldr	r1, [pc, #516]	; (8010170 <evtMspReceive+0xbc4>)
 800ff6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	4413      	add	r3, r2
 800ff72:	005b      	lsls	r3, r3, #1
 800ff74:	440b      	add	r3, r1
 800ff76:	33ba      	adds	r3, #186	; 0xba
 800ff78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	4619      	mov	r1, r3
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f008 f8a3 	bl	80180cc <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].middle);
 800ff86:	497a      	ldr	r1, [pc, #488]	; (8010170 <evtMspReceive+0xbc4>)
 800ff88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	005b      	lsls	r3, r3, #1
 800ff92:	440b      	add	r3, r1
 800ff94:	33bc      	adds	r3, #188	; 0xbc
 800ff96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f008 f894 	bl	80180cc <pifMsp_AddAnswer16>
            pifMsp_AddAnswer8(p_owner, cfg.servoConf[i].rate);
 800ffa4:	4972      	ldr	r1, [pc, #456]	; (8010170 <evtMspReceive+0xbc4>)
 800ffa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	005b      	lsls	r3, r3, #1
 800ffb0:	440b      	add	r3, r1
 800ffb2:	33be      	adds	r3, #190	; 0xbe
 800ffb4:	f993 3000 	ldrsb.w	r3, [r3]
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	4619      	mov	r1, r3
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f008 f83f 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].direction);
 800ffc2:	496b      	ldr	r1, [pc, #428]	; (8010170 <evtMspReceive+0xbc4>)
 800ffc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	440b      	add	r3, r1
 800ffd0:	33c0      	adds	r3, #192	; 0xc0
 800ffd2:	881b      	ldrh	r3, [r3, #0]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	68f8      	ldr	r0, [r7, #12]
 800ffd8:	f008 f878 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < MAX_SERVOS; i++) {
 800ffdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffde:	3301      	adds	r3, #1
 800ffe0:	637b      	str	r3, [r7, #52]	; 0x34
 800ffe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe4:	2b07      	cmp	r3, #7
 800ffe6:	d9b0      	bls.n	800ff4a <evtMspReceive+0x99e>
        }
        break;
 800ffe8:	f000 bf8d 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800ffec:	2300      	movs	r3, #0
 800ffee:	637b      	str	r3, [r7, #52]	; 0x34
 800fff0:	e04d      	b.n	801008e <evtMspReceive+0xae2>
            cfg.servoConf[i].min = pifMsp_ReadData16(p_packet);
 800fff2:	68b8      	ldr	r0, [r7, #8]
 800fff4:	f007 ff8e 	bl	8017f14 <pifMsp_ReadData16>
 800fff8:	4603      	mov	r3, r0
 800fffa:	b218      	sxth	r0, r3
 800fffc:	495c      	ldr	r1, [pc, #368]	; (8010170 <evtMspReceive+0xbc4>)
 800fffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010000:	4613      	mov	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4413      	add	r3, r2
 8010006:	005b      	lsls	r3, r3, #1
 8010008:	440b      	add	r3, r1
 801000a:	33b8      	adds	r3, #184	; 0xb8
 801000c:	4602      	mov	r2, r0
 801000e:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = pifMsp_ReadData16(p_packet);
 8010010:	68b8      	ldr	r0, [r7, #8]
 8010012:	f007 ff7f 	bl	8017f14 <pifMsp_ReadData16>
 8010016:	4603      	mov	r3, r0
 8010018:	b218      	sxth	r0, r3
 801001a:	4955      	ldr	r1, [pc, #340]	; (8010170 <evtMspReceive+0xbc4>)
 801001c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801001e:	4613      	mov	r3, r2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4413      	add	r3, r2
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	440b      	add	r3, r1
 8010028:	33ba      	adds	r3, #186	; 0xba
 801002a:	4602      	mov	r2, r0
 801002c:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = pifMsp_ReadData16(p_packet);
 801002e:	68b8      	ldr	r0, [r7, #8]
 8010030:	f007 ff70 	bl	8017f14 <pifMsp_ReadData16>
 8010034:	4603      	mov	r3, r0
 8010036:	b218      	sxth	r0, r3
 8010038:	494d      	ldr	r1, [pc, #308]	; (8010170 <evtMspReceive+0xbc4>)
 801003a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801003c:	4613      	mov	r3, r2
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	4413      	add	r3, r2
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	440b      	add	r3, r1
 8010046:	33bc      	adds	r3, #188	; 0xbc
 8010048:	4602      	mov	r2, r0
 801004a:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = pifMsp_ReadData8(p_packet);
 801004c:	68b8      	ldr	r0, [r7, #8]
 801004e:	f007 ff4d 	bl	8017eec <pifMsp_ReadData8>
 8010052:	4603      	mov	r3, r0
 8010054:	b258      	sxtb	r0, r3
 8010056:	4946      	ldr	r1, [pc, #280]	; (8010170 <evtMspReceive+0xbc4>)
 8010058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801005a:	4613      	mov	r3, r2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4413      	add	r3, r2
 8010060:	005b      	lsls	r3, r3, #1
 8010062:	440b      	add	r3, r1
 8010064:	33be      	adds	r3, #190	; 0xbe
 8010066:	4602      	mov	r2, r0
 8010068:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = pifMsp_ReadData16(p_packet);
 801006a:	68b8      	ldr	r0, [r7, #8]
 801006c:	f007 ff52 	bl	8017f14 <pifMsp_ReadData16>
 8010070:	4603      	mov	r3, r0
 8010072:	4618      	mov	r0, r3
 8010074:	493e      	ldr	r1, [pc, #248]	; (8010170 <evtMspReceive+0xbc4>)
 8010076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010078:	4613      	mov	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	4413      	add	r3, r2
 801007e:	005b      	lsls	r3, r3, #1
 8010080:	440b      	add	r3, r1
 8010082:	33c0      	adds	r3, #192	; 0xc0
 8010084:	4602      	mov	r2, r0
 8010086:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8010088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008a:	3301      	adds	r3, #1
 801008c:	637b      	str	r3, [r7, #52]	; 0x34
 801008e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010090:	2b07      	cmp	r3, #7
 8010092:	d9ae      	bls.n	800fff2 <evtMspReceive+0xa46>
        }
        break;
 8010094:	f000 bf37 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010098:	2300      	movs	r3, #0
 801009a:	637b      	str	r3, [r7, #52]	; 0x34
 801009c:	e05c      	b.n	8010158 <evtMspReceive+0xbac>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].targetChannel);
 801009e:	4935      	ldr	r1, [pc, #212]	; (8010174 <evtMspReceive+0xbc8>)
 80100a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100a2:	4613      	mov	r3, r2
 80100a4:	00db      	lsls	r3, r3, #3
 80100a6:	1a9b      	subs	r3, r3, r2
 80100a8:	440b      	add	r3, r1
 80100aa:	33d0      	adds	r3, #208	; 0xd0
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	4619      	mov	r1, r3
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f007 ffc5 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].fromChannel);
 80100b6:	492f      	ldr	r1, [pc, #188]	; (8010174 <evtMspReceive+0xbc8>)
 80100b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ba:	4613      	mov	r3, r2
 80100bc:	00db      	lsls	r3, r3, #3
 80100be:	1a9b      	subs	r3, r3, r2
 80100c0:	440b      	add	r3, r1
 80100c2:	33d1      	adds	r3, #209	; 0xd1
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	4619      	mov	r1, r3
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f007 ffb9 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].rate);
 80100ce:	4929      	ldr	r1, [pc, #164]	; (8010174 <evtMspReceive+0xbc8>)
 80100d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100d2:	4613      	mov	r3, r2
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	1a9b      	subs	r3, r3, r2
 80100d8:	440b      	add	r3, r1
 80100da:	33d2      	adds	r3, #210	; 0xd2
 80100dc:	f993 3000 	ldrsb.w	r3, [r3]
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	4619      	mov	r1, r3
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f007 ffab 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].speed);
 80100ea:	4922      	ldr	r1, [pc, #136]	; (8010174 <evtMspReceive+0xbc8>)
 80100ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100ee:	4613      	mov	r3, r2
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	440b      	add	r3, r1
 80100f6:	33d3      	adds	r3, #211	; 0xd3
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	4619      	mov	r1, r3
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f007 ff9f 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].min);
 8010102:	491c      	ldr	r1, [pc, #112]	; (8010174 <evtMspReceive+0xbc8>)
 8010104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010106:	4613      	mov	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	1a9b      	subs	r3, r3, r2
 801010c:	440b      	add	r3, r1
 801010e:	33d4      	adds	r3, #212	; 0xd4
 8010110:	f993 3000 	ldrsb.w	r3, [r3]
 8010114:	b2db      	uxtb	r3, r3
 8010116:	4619      	mov	r1, r3
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f007 ff91 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].max);
 801011e:	4915      	ldr	r1, [pc, #84]	; (8010174 <evtMspReceive+0xbc8>)
 8010120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010122:	4613      	mov	r3, r2
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	1a9b      	subs	r3, r3, r2
 8010128:	440b      	add	r3, r1
 801012a:	33d5      	adds	r3, #213	; 0xd5
 801012c:	f993 3000 	ldrsb.w	r3, [r3]
 8010130:	b2db      	uxtb	r3, r3
 8010132:	4619      	mov	r1, r3
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f007 ff83 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].box);
 801013a:	490e      	ldr	r1, [pc, #56]	; (8010174 <evtMspReceive+0xbc8>)
 801013c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801013e:	4613      	mov	r3, r2
 8010140:	00db      	lsls	r3, r3, #3
 8010142:	1a9b      	subs	r3, r3, r2
 8010144:	440b      	add	r3, r1
 8010146:	33d6      	adds	r3, #214	; 0xd6
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	4619      	mov	r1, r3
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f007 ff77 	bl	8018040 <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010154:	3301      	adds	r3, #1
 8010156:	637b      	str	r3, [r7, #52]	; 0x34
 8010158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015a:	2b0f      	cmp	r3, #15
 801015c:	d99f      	bls.n	801009e <evtMspReceive+0xaf2>
        }
        break;
 801015e:	f000 bed2 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8010162:	2300      	movs	r3, #0
 8010164:	637b      	str	r3, [r7, #52]	; 0x34
 8010166:	e06c      	b.n	8010242 <evtMspReceive+0xc96>
 8010168:	2000146c 	.word	0x2000146c
 801016c:	20000040 	.word	0x20000040
 8010170:	20000e64 	.word	0x20000e64
 8010174:	200008f8 	.word	0x200008f8
            mcfg.customServoMixer[i].targetChannel = pifMsp_ReadData8(p_packet);
 8010178:	68b8      	ldr	r0, [r7, #8]
 801017a:	f007 feb7 	bl	8017eec <pifMsp_ReadData8>
 801017e:	4603      	mov	r3, r0
 8010180:	4618      	mov	r0, r3
 8010182:	49b9      	ldr	r1, [pc, #740]	; (8010468 <evtMspReceive+0xebc>)
 8010184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010186:	4613      	mov	r3, r2
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	1a9b      	subs	r3, r3, r2
 801018c:	440b      	add	r3, r1
 801018e:	33d0      	adds	r3, #208	; 0xd0
 8010190:	4602      	mov	r2, r0
 8010192:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = pifMsp_ReadData8(p_packet);
 8010194:	68b8      	ldr	r0, [r7, #8]
 8010196:	f007 fea9 	bl	8017eec <pifMsp_ReadData8>
 801019a:	4603      	mov	r3, r0
 801019c:	4618      	mov	r0, r3
 801019e:	49b2      	ldr	r1, [pc, #712]	; (8010468 <evtMspReceive+0xebc>)
 80101a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101a2:	4613      	mov	r3, r2
 80101a4:	00db      	lsls	r3, r3, #3
 80101a6:	1a9b      	subs	r3, r3, r2
 80101a8:	440b      	add	r3, r1
 80101aa:	33d1      	adds	r3, #209	; 0xd1
 80101ac:	4602      	mov	r2, r0
 80101ae:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = pifMsp_ReadData8(p_packet);
 80101b0:	68b8      	ldr	r0, [r7, #8]
 80101b2:	f007 fe9b 	bl	8017eec <pifMsp_ReadData8>
 80101b6:	4603      	mov	r3, r0
 80101b8:	b258      	sxtb	r0, r3
 80101ba:	49ab      	ldr	r1, [pc, #684]	; (8010468 <evtMspReceive+0xebc>)
 80101bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101be:	4613      	mov	r3, r2
 80101c0:	00db      	lsls	r3, r3, #3
 80101c2:	1a9b      	subs	r3, r3, r2
 80101c4:	440b      	add	r3, r1
 80101c6:	33d2      	adds	r3, #210	; 0xd2
 80101c8:	4602      	mov	r2, r0
 80101ca:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = pifMsp_ReadData8(p_packet);
 80101cc:	68b8      	ldr	r0, [r7, #8]
 80101ce:	f007 fe8d 	bl	8017eec <pifMsp_ReadData8>
 80101d2:	4603      	mov	r3, r0
 80101d4:	4618      	mov	r0, r3
 80101d6:	49a4      	ldr	r1, [pc, #656]	; (8010468 <evtMspReceive+0xebc>)
 80101d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101da:	4613      	mov	r3, r2
 80101dc:	00db      	lsls	r3, r3, #3
 80101de:	1a9b      	subs	r3, r3, r2
 80101e0:	440b      	add	r3, r1
 80101e2:	33d3      	adds	r3, #211	; 0xd3
 80101e4:	4602      	mov	r2, r0
 80101e6:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = pifMsp_ReadData8(p_packet);
 80101e8:	68b8      	ldr	r0, [r7, #8]
 80101ea:	f007 fe7f 	bl	8017eec <pifMsp_ReadData8>
 80101ee:	4603      	mov	r3, r0
 80101f0:	b258      	sxtb	r0, r3
 80101f2:	499d      	ldr	r1, [pc, #628]	; (8010468 <evtMspReceive+0xebc>)
 80101f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101f6:	4613      	mov	r3, r2
 80101f8:	00db      	lsls	r3, r3, #3
 80101fa:	1a9b      	subs	r3, r3, r2
 80101fc:	440b      	add	r3, r1
 80101fe:	33d4      	adds	r3, #212	; 0xd4
 8010200:	4602      	mov	r2, r0
 8010202:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = pifMsp_ReadData8(p_packet);
 8010204:	68b8      	ldr	r0, [r7, #8]
 8010206:	f007 fe71 	bl	8017eec <pifMsp_ReadData8>
 801020a:	4603      	mov	r3, r0
 801020c:	b258      	sxtb	r0, r3
 801020e:	4996      	ldr	r1, [pc, #600]	; (8010468 <evtMspReceive+0xebc>)
 8010210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010212:	4613      	mov	r3, r2
 8010214:	00db      	lsls	r3, r3, #3
 8010216:	1a9b      	subs	r3, r3, r2
 8010218:	440b      	add	r3, r1
 801021a:	33d5      	adds	r3, #213	; 0xd5
 801021c:	4602      	mov	r2, r0
 801021e:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = pifMsp_ReadData8(p_packet);
 8010220:	68b8      	ldr	r0, [r7, #8]
 8010222:	f007 fe63 	bl	8017eec <pifMsp_ReadData8>
 8010226:	4603      	mov	r3, r0
 8010228:	4618      	mov	r0, r3
 801022a:	498f      	ldr	r1, [pc, #572]	; (8010468 <evtMspReceive+0xebc>)
 801022c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801022e:	4613      	mov	r3, r2
 8010230:	00db      	lsls	r3, r3, #3
 8010232:	1a9b      	subs	r3, r3, r2
 8010234:	440b      	add	r3, r1
 8010236:	33d6      	adds	r3, #214	; 0xd6
 8010238:	4602      	mov	r2, r0
 801023a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801023c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801023e:	3301      	adds	r3, #1
 8010240:	637b      	str	r3, [r7, #52]	; 0x34
 8010242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010244:	2b0f      	cmp	r3, #15
 8010246:	d997      	bls.n	8010178 <evtMspReceive+0xbcc>
        }
        loadCustomServoMixer();
 8010248:	f7fa fd84 	bl	800ad54 <loadCustomServoMixer>
        break;
 801024c:	f000 be5b 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_FW_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.fw_althold_dir);
 8010250:	4b85      	ldr	r3, [pc, #532]	; (8010468 <evtMspReceive+0xebc>)
 8010252:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 8010256:	b2db      	uxtb	r3, r3
 8010258:	4619      	mov	r1, r3
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f007 fef0 	bl	8018040 <pifMsp_AddAnswer8>
        // pifMsp_AddAnswer8(p_owner, cfg.fw_vector_thrust); // Future Gui setting?
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxcorr);
 8010260:	4b82      	ldr	r3, [pc, #520]	; (801046c <evtMspReceive+0xec0>)
 8010262:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8010266:	b29b      	uxth	r3, r3
 8010268:	4619      	mov	r1, r3
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f007 ff2e 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_rudder);
 8010270:	4b7e      	ldr	r3, [pc, #504]	; (801046c <evtMspReceive+0xec0>)
 8010272:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 8010276:	b29b      	uxth	r3, r3
 8010278:	4619      	mov	r1, r3
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f007 ff26 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxclimb);
 8010280:	4b7a      	ldr	r3, [pc, #488]	; (801046c <evtMspReceive+0xec0>)
 8010282:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8010286:	b29b      	uxth	r3, r3
 8010288:	4619      	mov	r1, r3
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f007 ff1e 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxdive);
 8010290:	4b76      	ldr	r3, [pc, #472]	; (801046c <evtMspReceive+0xec0>)
 8010292:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8010296:	b29b      	uxth	r3, r3
 8010298:	4619      	mov	r1, r3
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f007 ff16 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_climb_throttle);
 80102a0:	4b72      	ldr	r3, [pc, #456]	; (801046c <evtMspReceive+0xec0>)
 80102a2:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80102a6:	4619      	mov	r1, r3
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f007 ff0f 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_cruise_throttle);
 80102ae:	4b6f      	ldr	r3, [pc, #444]	; (801046c <evtMspReceive+0xec0>)
 80102b0:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80102b4:	4619      	mov	r1, r3
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f007 ff08 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_idle_throttle);
 80102bc:	4b6b      	ldr	r3, [pc, #428]	; (801046c <evtMspReceive+0xec0>)
 80102be:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80102c2:	4619      	mov	r1, r3
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f007 ff01 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_scaler_throttle);
 80102ca:	4b68      	ldr	r3, [pc, #416]	; (801046c <evtMspReceive+0xec0>)
 80102cc:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80102d0:	4619      	mov	r1, r3
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f007 fefa 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer32(p_owner, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 80102d8:	4b64      	ldr	r3, [pc, #400]	; (801046c <evtMspReceive+0xec0>)
 80102da:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80102de:	4619      	mov	r1, r3
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f007 ff3f 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, cfg.fw_rth_alt);
 80102e6:	4b61      	ldr	r3, [pc, #388]	; (801046c <evtMspReceive+0xec0>)
 80102e8:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80102ec:	4619      	mov	r1, r3
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f007 fea6 	bl	8018040 <pifMsp_AddAnswer8>
        // next added for future use
        pifMsp_AddAnswer32(p_owner, 0);
 80102f4:	2100      	movs	r1, #0
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f007 ff34 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80102fc:	2100      	movs	r1, #0
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f007 ff30 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 8010304:	2100      	movs	r1, #0
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f007 ff2c 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 801030c:	2100      	movs	r1, #0
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f007 ff28 	bl	8018164 <pifMsp_AddAnswer32>
        break;
 8010314:	f000 bdf7 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_FW_CONFIG:
        mcfg.fw_althold_dir = pifMsp_ReadData8(p_packet);
 8010318:	68b8      	ldr	r0, [r7, #8]
 801031a:	f007 fde7 	bl	8017eec <pifMsp_ReadData8>
 801031e:	4603      	mov	r3, r0
 8010320:	b25a      	sxtb	r2, r3
 8010322:	4b51      	ldr	r3, [pc, #324]	; (8010468 <evtMspReceive+0xebc>)
 8010324:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = pifMsp_ReadData8(p_packet); // Future Gui setting?
        cfg.fw_gps_maxcorr = pifMsp_ReadData16(p_packet);
 8010328:	68b8      	ldr	r0, [r7, #8]
 801032a:	f007 fdf3 	bl	8017f14 <pifMsp_ReadData16>
 801032e:	4603      	mov	r3, r0
 8010330:	b21a      	sxth	r2, r3
 8010332:	4b4e      	ldr	r3, [pc, #312]	; (801046c <evtMspReceive+0xec0>)
 8010334:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = pifMsp_ReadData16(p_packet);
 8010338:	68b8      	ldr	r0, [r7, #8]
 801033a:	f007 fdeb 	bl	8017f14 <pifMsp_ReadData16>
 801033e:	4603      	mov	r3, r0
 8010340:	b21a      	sxth	r2, r3
 8010342:	4b4a      	ldr	r3, [pc, #296]	; (801046c <evtMspReceive+0xec0>)
 8010344:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = pifMsp_ReadData16(p_packet);
 8010348:	68b8      	ldr	r0, [r7, #8]
 801034a:	f007 fde3 	bl	8017f14 <pifMsp_ReadData16>
 801034e:	4603      	mov	r3, r0
 8010350:	b21a      	sxth	r2, r3
 8010352:	4b46      	ldr	r3, [pc, #280]	; (801046c <evtMspReceive+0xec0>)
 8010354:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = pifMsp_ReadData16(p_packet);
 8010358:	68b8      	ldr	r0, [r7, #8]
 801035a:	f007 fddb 	bl	8017f14 <pifMsp_ReadData16>
 801035e:	4603      	mov	r3, r0
 8010360:	b21a      	sxth	r2, r3
 8010362:	4b42      	ldr	r3, [pc, #264]	; (801046c <evtMspReceive+0xec0>)
 8010364:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = pifMsp_ReadData16(p_packet);
 8010368:	68b8      	ldr	r0, [r7, #8]
 801036a:	f007 fdd3 	bl	8017f14 <pifMsp_ReadData16>
 801036e:	4603      	mov	r3, r0
 8010370:	461a      	mov	r2, r3
 8010372:	4b3e      	ldr	r3, [pc, #248]	; (801046c <evtMspReceive+0xec0>)
 8010374:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = pifMsp_ReadData16(p_packet);
 8010378:	68b8      	ldr	r0, [r7, #8]
 801037a:	f007 fdcb 	bl	8017f14 <pifMsp_ReadData16>
 801037e:	4603      	mov	r3, r0
 8010380:	461a      	mov	r2, r3
 8010382:	4b3a      	ldr	r3, [pc, #232]	; (801046c <evtMspReceive+0xec0>)
 8010384:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = pifMsp_ReadData16(p_packet);
 8010388:	68b8      	ldr	r0, [r7, #8]
 801038a:	f007 fdc3 	bl	8017f14 <pifMsp_ReadData16>
 801038e:	4603      	mov	r3, r0
 8010390:	461a      	mov	r2, r3
 8010392:	4b36      	ldr	r3, [pc, #216]	; (801046c <evtMspReceive+0xec0>)
 8010394:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = pifMsp_ReadData16(p_packet);
 8010398:	68b8      	ldr	r0, [r7, #8]
 801039a:	f007 fdbb 	bl	8017f14 <pifMsp_ReadData16>
 801039e:	4603      	mov	r3, r0
 80103a0:	461a      	mov	r2, r3
 80103a2:	4b32      	ldr	r3, [pc, #200]	; (801046c <evtMspReceive+0xec0>)
 80103a4:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = pifMsp_ReadData32(p_packet);// Wrong when using float in MSP!... Change to pifMsp_ReadData8
        pifMsp_ReadData32(p_packet); // Just read and skip
 80103a8:	68b8      	ldr	r0, [r7, #8]
 80103aa:	f007 fdd0 	bl	8017f4e <pifMsp_ReadData32>
        cfg.fw_rth_alt = pifMsp_ReadData8(p_packet);
 80103ae:	68b8      	ldr	r0, [r7, #8]
 80103b0:	f007 fd9c 	bl	8017eec <pifMsp_ReadData8>
 80103b4:	4603      	mov	r3, r0
 80103b6:	461a      	mov	r2, r3
 80103b8:	4b2c      	ldr	r3, [pc, #176]	; (801046c <evtMspReceive+0xec0>)
 80103ba:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        pifMsp_ReadData32(p_packet);
 80103be:	68b8      	ldr	r0, [r7, #8]
 80103c0:	f007 fdc5 	bl	8017f4e <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80103c4:	68b8      	ldr	r0, [r7, #8]
 80103c6:	f007 fdc2 	bl	8017f4e <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80103ca:	68b8      	ldr	r0, [r7, #8]
 80103cc:	f007 fdbf 	bl	8017f4e <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 80103d0:	68b8      	ldr	r0, [r7, #8]
 80103d2:	f007 fdbc 	bl	8017f4e <pifMsp_ReadData32>
        break;
 80103d6:	f000 bd96 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_MOTOR:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&motor, 16);
 80103da:	2210      	movs	r2, #16
 80103dc:	4924      	ldr	r1, [pc, #144]	; (8010470 <evtMspReceive+0xec4>)
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	f007 ff0c 	bl	80181fc <pifMsp_AddAnswer>
        break;
 80103e4:	f000 bd8f 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80103e8:	2300      	movs	r3, #0
 80103ea:	637b      	str	r3, [r7, #52]	; 0x34
 80103ec:	e00b      	b.n	8010406 <evtMspReceive+0xe5a>
            pifMsp_AddAnswer16(p_owner, rcData[i]);
 80103ee:	4a21      	ldr	r2, [pc, #132]	; (8010474 <evtMspReceive+0xec8>)
 80103f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	4619      	mov	r1, r3
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f007 fe66 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < 8; i++)
 8010400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010402:	3301      	adds	r3, #1
 8010404:	637b      	str	r3, [r7, #52]	; 0x34
 8010406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010408:	2b07      	cmp	r3, #7
 801040a:	d9f0      	bls.n	80103ee <evtMspReceive+0xe42>
        break;
 801040c:	f000 bd7b 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_RAW_GPS:
        pifMsp_AddAnswer8(p_owner, f.GPS_FIX);
 8010410:	4b19      	ldr	r3, [pc, #100]	; (8010478 <evtMspReceive+0xecc>)
 8010412:	7adb      	ldrb	r3, [r3, #11]
 8010414:	4619      	mov	r1, r3
 8010416:	68f8      	ldr	r0, [r7, #12]
 8010418:	f007 fe12 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, GPS_numSat);
 801041c:	4b17      	ldr	r3, [pc, #92]	; (801047c <evtMspReceive+0xed0>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	4619      	mov	r1, r3
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f007 fe0c 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LAT]);
 8010428:	4b15      	ldr	r3, [pc, #84]	; (8010480 <evtMspReceive+0xed4>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4619      	mov	r1, r3
 801042e:	68f8      	ldr	r0, [r7, #12]
 8010430:	f007 fe98 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LON]);
 8010434:	4b12      	ldr	r3, [pc, #72]	; (8010480 <evtMspReceive+0xed4>)
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	4619      	mov	r1, r3
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f007 fe92 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, GPS_altitude);
 8010440:	4b10      	ldr	r3, [pc, #64]	; (8010484 <evtMspReceive+0xed8>)
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	4619      	mov	r1, r3
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f007 fe40 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_speed);
 801044c:	4b0e      	ldr	r3, [pc, #56]	; (8010488 <evtMspReceive+0xedc>)
 801044e:	881b      	ldrh	r3, [r3, #0]
 8010450:	4619      	mov	r1, r3
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f007 fe3a 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_ground_course);
 8010458:	4b0c      	ldr	r3, [pc, #48]	; (801048c <evtMspReceive+0xee0>)
 801045a:	881b      	ldrh	r3, [r3, #0]
 801045c:	4619      	mov	r1, r3
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f007 fe34 	bl	80180cc <pifMsp_AddAnswer16>
        break;
 8010464:	f000 bd4f 	b.w	8010f06 <evtMspReceive+0x195a>
 8010468:	200008f8 	.word	0x200008f8
 801046c:	20000e64 	.word	0x20000e64
 8010470:	200015a0 	.word	0x200015a0
 8010474:	20001770 	.word	0x20001770
 8010478:	20001738 	.word	0x20001738
 801047c:	2000181c 	.word	0x2000181c
 8010480:	200017fc 	.word	0x200017fc
 8010484:	20001822 	.word	0x20001822
 8010488:	20001824 	.word	0x20001824
 801048c:	2000182e 	.word	0x2000182e

    case MSP_COMP_GPS:
        pifMsp_AddAnswer16(p_owner, GPS_distanceToHome);
 8010490:	4bb0      	ldr	r3, [pc, #704]	; (8010754 <evtMspReceive+0x11a8>)
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	4619      	mov	r1, r3
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f007 fe18 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_directionToHome);
 801049c:	4bae      	ldr	r3, [pc, #696]	; (8010758 <evtMspReceive+0x11ac>)
 801049e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4619      	mov	r1, r3
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f007 fe10 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, GPS_update & 1);
 80104ac:	4bab      	ldr	r3, [pc, #684]	; (801075c <evtMspReceive+0x11b0>)
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	f003 0301 	and.w	r3, r3, #1
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	4619      	mov	r1, r3
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f007 fdc1 	bl	8018040 <pifMsp_AddAnswer8>
        break;
 80104be:	f000 bd22 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 80104c2:	2300      	movs	r3, #0
 80104c4:	637b      	str	r3, [r7, #52]	; 0x34
 80104c6:	e00b      	b.n	80104e0 <evtMspReceive+0xf34>
            pifMsp_AddAnswer16(p_owner, angle[i]);
 80104c8:	4aa5      	ldr	r2, [pc, #660]	; (8010760 <evtMspReceive+0x11b4>)
 80104ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	4619      	mov	r1, r3
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f007 fdf9 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < 2; i++)
 80104da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104dc:	3301      	adds	r3, #1
 80104de:	637b      	str	r3, [r7, #52]	; 0x34
 80104e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d9f0      	bls.n	80104c8 <evtMspReceive+0xf1c>
        pifMsp_AddAnswer16(p_owner, heading);
 80104e6:	4b9f      	ldr	r3, [pc, #636]	; (8010764 <evtMspReceive+0x11b8>)
 80104e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	4619      	mov	r1, r3
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	f007 fdeb 	bl	80180cc <pifMsp_AddAnswer16>
        break;
 80104f6:	f000 bd06 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_ALTITUDE:
        pifMsp_AddAnswer32(p_owner, EstAlt);
 80104fa:	4b9b      	ldr	r3, [pc, #620]	; (8010768 <evtMspReceive+0x11bc>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	4619      	mov	r1, r3
 8010500:	68f8      	ldr	r0, [r7, #12]
 8010502:	f007 fe2f 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, vario);
 8010506:	4b99      	ldr	r3, [pc, #612]	; (801076c <evtMspReceive+0x11c0>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	b29b      	uxth	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f007 fddc 	bl	80180cc <pifMsp_AddAnswer16>
        break;
 8010514:	f000 bcf7 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_ANALOG:
        pifMsp_AddAnswer8(p_owner, (uint8_t)constrain((int16_t)vbat, 0, 255));
 8010518:	4b95      	ldr	r3, [pc, #596]	; (8010770 <evtMspReceive+0x11c4>)
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	b21b      	sxth	r3, r3
 801051e:	22ff      	movs	r2, #255	; 0xff
 8010520:	2100      	movs	r1, #0
 8010522:	4618      	mov	r0, r3
 8010524:	f7f3 faf2 	bl	8003b0c <constrain>
 8010528:	4603      	mov	r3, r0
 801052a:	b2db      	uxtb	r3, r3
 801052c:	4619      	mov	r1, r3
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f007 fd86 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010534:	4b8f      	ldr	r3, [pc, #572]	; (8010774 <evtMspReceive+0x11c8>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801053c:	2100      	movs	r1, #0
 801053e:	4618      	mov	r0, r3
 8010540:	f7f3 fae4 	bl	8003b0c <constrain>
 8010544:	4603      	mov	r3, r0
 8010546:	b29b      	uxth	r3, r3
 8010548:	4619      	mov	r1, r3
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f007 fdbe 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, rssi);
 8010550:	4b89      	ldr	r3, [pc, #548]	; (8010778 <evtMspReceive+0x11cc>)
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	4619      	mov	r1, r3
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f007 fdb8 	bl	80180cc <pifMsp_AddAnswer16>
        if (mcfg.multiwiicurrentoutput)
 801055c:	4b87      	ldr	r3, [pc, #540]	; (801077c <evtMspReceive+0x11d0>)
 801055e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010562:	2b00      	cmp	r3, #0
 8010564:	d017      	beq.n	8010596 <evtMspReceive+0xfea>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 8010566:	4b86      	ldr	r3, [pc, #536]	; (8010780 <evtMspReceive+0x11d4>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801056e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010572:	4613      	mov	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4413      	add	r3, r2
 8010578:	005b      	lsls	r3, r3, #1
 801057a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801057e:	2100      	movs	r1, #0
 8010580:	4618      	mov	r0, r3
 8010582:	f7f3 fac3 	bl	8003b0c <constrain>
 8010586:	4603      	mov	r3, r0
 8010588:	b29b      	uxth	r3, r3
 801058a:	4619      	mov	r1, r3
 801058c:	68f8      	ldr	r0, [r7, #12]
 801058e:	f007 fd9d 	bl	80180cc <pifMsp_AddAnswer16>
        else
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
        break;
 8010592:	f000 bcb8 	b.w	8010f06 <evtMspReceive+0x195a>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 8010596:	4b7a      	ldr	r3, [pc, #488]	; (8010780 <evtMspReceive+0x11d4>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	bfb8      	it	lt
 801059e:	425b      	neglt	r3, r3
 80105a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105a4:	2100      	movs	r1, #0
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7f3 fab0 	bl	8003b0c <constrain>
 80105ac:	4603      	mov	r3, r0
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	4619      	mov	r1, r3
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f007 fd8a 	bl	80180cc <pifMsp_AddAnswer16>
        break;
 80105b8:	f000 bca5 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_RC_TUNING:
        pifMsp_AddAnswer8(p_owner, cfg.rcRate8);
 80105bc:	4b71      	ldr	r3, [pc, #452]	; (8010784 <evtMspReceive+0x11d8>)
 80105be:	7fdb      	ldrb	r3, [r3, #31]
 80105c0:	4619      	mov	r1, r3
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f007 fd3c 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rcExpo8);
 80105c8:	4b6e      	ldr	r3, [pc, #440]	; (8010784 <evtMspReceive+0x11d8>)
 80105ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105ce:	4619      	mov	r1, r3
 80105d0:	68f8      	ldr	r0, [r7, #12]
 80105d2:	f007 fd35 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]); // here for legacy support
 80105d6:	4b6b      	ldr	r3, [pc, #428]	; (8010784 <evtMspReceive+0x11d8>)
 80105d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80105dc:	4619      	mov	r1, r3
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f007 fd2e 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.yawRate);
 80105e4:	4b67      	ldr	r3, [pc, #412]	; (8010784 <evtMspReceive+0x11d8>)
 80105e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80105ea:	4619      	mov	r1, r3
 80105ec:	68f8      	ldr	r0, [r7, #12]
 80105ee:	f007 fd27 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.dynThrPID);
 80105f2:	4b64      	ldr	r3, [pc, #400]	; (8010784 <evtMspReceive+0x11d8>)
 80105f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80105f8:	4619      	mov	r1, r3
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f007 fd20 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrMid8);
 8010600:	4b60      	ldr	r3, [pc, #384]	; (8010784 <evtMspReceive+0x11d8>)
 8010602:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010606:	4619      	mov	r1, r3
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f007 fd19 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrExpo8);
 801060e:	4b5d      	ldr	r3, [pc, #372]	; (8010784 <evtMspReceive+0x11d8>)
 8010610:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010614:	4619      	mov	r1, r3
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f007 fd12 	bl	8018040 <pifMsp_AddAnswer8>
        break;
 801061c:	f000 bc73 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010620:	2300      	movs	r3, #0
 8010622:	637b      	str	r3, [r7, #52]	; 0x34
 8010624:	e036      	b.n	8010694 <evtMspReceive+0x10e8>
            pifMsp_AddAnswer8(p_owner, cfg.P8[i]);
 8010626:	4a57      	ldr	r2, [pc, #348]	; (8010784 <evtMspReceive+0x11d8>)
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	4413      	add	r3, r2
 801062c:	3301      	adds	r3, #1
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	4619      	mov	r1, r3
 8010632:	68f8      	ldr	r0, [r7, #12]
 8010634:	f007 fd04 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.I8[i]);
 8010638:	4a52      	ldr	r2, [pc, #328]	; (8010784 <evtMspReceive+0x11d8>)
 801063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063c:	4413      	add	r3, r2
 801063e:	330b      	adds	r3, #11
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	4619      	mov	r1, r3
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f007 fcfb 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.D8[i]);
 801064a:	4a4e      	ldr	r2, [pc, #312]	; (8010784 <evtMspReceive+0x11d8>)
 801064c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064e:	4413      	add	r3, r2
 8010650:	3315      	adds	r3, #21
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	4619      	mov	r1, r3
 8010656:	68f8      	ldr	r0, [r7, #12]
 8010658:	f007 fcf2 	bl	8018040 <pifMsp_AddAnswer8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
 801065c:	4a49      	ldr	r2, [pc, #292]	; (8010784 <evtMspReceive+0x11d8>)
 801065e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010660:	4413      	add	r3, r2
 8010662:	3301      	adds	r3, #1
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	4618      	mov	r0, r3
 8010668:	4a46      	ldr	r2, [pc, #280]	; (8010784 <evtMspReceive+0x11d8>)
 801066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066c:	4413      	add	r3, r2
 801066e:	330b      	adds	r3, #11
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	4619      	mov	r1, r3
 8010674:	4a43      	ldr	r2, [pc, #268]	; (8010784 <evtMspReceive+0x11d8>)
 8010676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010678:	4413      	add	r3, r2
 801067a:	3315      	adds	r3, #21
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	9100      	str	r1, [sp, #0]
 8010682:	4603      	mov	r3, r0
 8010684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010686:	4940      	ldr	r1, [pc, #256]	; (8010788 <evtMspReceive+0x11dc>)
 8010688:	2002      	movs	r0, #2
 801068a:	f002 ff0f 	bl	80134ac <pifLog_Printf>
        for (i = 0; i < PIDITEMS; i++) {
 801068e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010690:	3301      	adds	r3, #1
 8010692:	637b      	str	r3, [r7, #52]	; 0x34
 8010694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010696:	2b09      	cmp	r3, #9
 8010698:	d9c5      	bls.n	8010626 <evtMspReceive+0x107a>
#endif
        }
        break;
 801069a:	f000 bc34 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_PIDNAMES:
        pifMsp_AddAnswer(p_owner, (uint8_t*)pidnames, sizeof(pidnames));
 801069e:	2230      	movs	r2, #48	; 0x30
 80106a0:	493a      	ldr	r1, [pc, #232]	; (801078c <evtMspReceive+0x11e0>)
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f007 fdaa 	bl	80181fc <pifMsp_AddAnswer>
        break;
 80106a8:	f000 bc2d 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 80106ac:	2300      	movs	r3, #0
 80106ae:	637b      	str	r3, [r7, #52]	; 0x34
 80106b0:	e010      	b.n	80106d4 <evtMspReceive+0x1128>
            pifMsp_AddAnswer16(p_owner, cfg.activate[availableBoxes[i]]);
 80106b2:	4a37      	ldr	r2, [pc, #220]	; (8010790 <evtMspReceive+0x11e4>)
 80106b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b6:	4413      	add	r3, r2
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	4a32      	ldr	r2, [pc, #200]	; (8010784 <evtMspReceive+0x11d8>)
 80106bc:	3312      	adds	r3, #18
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	4413      	add	r3, r2
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	4619      	mov	r1, r3
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	f007 fcff 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < numberBoxItems; i++)
 80106ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d0:	3301      	adds	r3, #1
 80106d2:	637b      	str	r3, [r7, #52]	; 0x34
 80106d4:	4b2f      	ldr	r3, [pc, #188]	; (8010794 <evtMspReceive+0x11e8>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106dc:	4293      	cmp	r3, r2
 80106de:	d3e8      	bcc.n	80106b2 <evtMspReceive+0x1106>
        break;
 80106e0:	f000 bc11 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_BOXNAMES:
        _SerializeBoxNamesReply(p_owner);
 80106e4:	68f8      	ldr	r0, [r7, #12]
 80106e6:	f7fe fddb 	bl	800f2a0 <_SerializeBoxNamesReply>
        break;
 80106ea:	f000 bc0c 	b.w	8010f06 <evtMspReceive+0x195a>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 80106ee:	2300      	movs	r3, #0
 80106f0:	637b      	str	r3, [r7, #52]	; 0x34
 80106f2:	e028      	b.n	8010746 <evtMspReceive+0x119a>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80106f4:	2300      	movs	r3, #0
 80106f6:	633b      	str	r3, [r7, #48]	; 0x30
 80106f8:	e01f      	b.n	801073a <evtMspReceive+0x118e>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80106fa:	4927      	ldr	r1, [pc, #156]	; (8010798 <evtMspReceive+0x11ec>)
 80106fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106fe:	4613      	mov	r3, r2
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	4413      	add	r3, r2
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	440b      	add	r3, r1
 8010708:	3308      	adds	r3, #8
 801070a:	781a      	ldrb	r2, [r3, #0]
 801070c:	4920      	ldr	r1, [pc, #128]	; (8010790 <evtMspReceive+0x11e4>)
 801070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010710:	440b      	add	r3, r1
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	429a      	cmp	r2, r3
 8010716:	d10d      	bne.n	8010734 <evtMspReceive+0x1188>
                    pifMsp_AddAnswer8(p_owner, boxes[j].permanentId);
 8010718:	491f      	ldr	r1, [pc, #124]	; (8010798 <evtMspReceive+0x11ec>)
 801071a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801071c:	4613      	mov	r3, r2
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	4413      	add	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	440b      	add	r3, r1
 8010726:	3308      	adds	r3, #8
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	4619      	mov	r1, r3
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f007 fc87 	bl	8018040 <pifMsp_AddAnswer8>
                    break;
 8010732:	e005      	b.n	8010740 <evtMspReceive+0x1194>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 8010734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010736:	3301      	adds	r3, #1
 8010738:	633b      	str	r3, [r7, #48]	; 0x30
 801073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073c:	2b18      	cmp	r3, #24
 801073e:	d9dc      	bls.n	80106fa <evtMspReceive+0x114e>
        for (i = 0; i < numberBoxItems; i++) {
 8010740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010742:	3301      	adds	r3, #1
 8010744:	637b      	str	r3, [r7, #52]	; 0x34
 8010746:	4b13      	ldr	r3, [pc, #76]	; (8010794 <evtMspReceive+0x11e8>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	461a      	mov	r2, r3
 801074c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074e:	4293      	cmp	r3, r2
 8010750:	d3d0      	bcc.n	80106f4 <evtMspReceive+0x1148>
                }
            }
        }
        break;
 8010752:	e3d8      	b.n	8010f06 <evtMspReceive+0x195a>
 8010754:	2000181e 	.word	0x2000181e
 8010758:	20001820 	.word	0x20001820
 801075c:	20001826 	.word	0x20001826
 8010760:	200014e0 	.word	0x200014e0
 8010764:	20001a08 	.word	0x20001a08
 8010768:	200014a4 	.word	0x200014a4
 801076c:	200014bc 	.word	0x200014bc
 8010770:	2000175c 	.word	0x2000175c
 8010774:	20001764 	.word	0x20001764
 8010778:	200017c4 	.word	0x200017c4
 801077c:	200008f8 	.word	0x200008f8
 8010780:	20001760 	.word	0x20001760
 8010784:	20000e64 	.word	0x20000e64
 8010788:	08027824 	.word	0x08027824
 801078c:	08029674 	.word	0x08029674
 8010790:	20001b80 	.word	0x20001b80
 8010794:	20001b99 	.word	0x20001b99
 8010798:	0802953c 	.word	0x0802953c

    case MSP_MISC:
        pifMsp_AddAnswer16(p_owner, mcfg.midrc);
 801079c:	4ba8      	ldr	r3, [pc, #672]	; (8010a40 <evtMspReceive+0x1494>)
 801079e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 80107a2:	4619      	mov	r1, r3
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f007 fc91 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.minthrottle);
 80107aa:	4ba5      	ldr	r3, [pc, #660]	; (8010a40 <evtMspReceive+0x1494>)
 80107ac:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 80107b0:	4619      	mov	r1, r3
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f007 fc8a 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.maxthrottle);
 80107b8:	4ba1      	ldr	r3, [pc, #644]	; (8010a40 <evtMspReceive+0x1494>)
 80107ba:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 80107be:	4619      	mov	r1, r3
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f007 fc83 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.mincommand);
 80107c6:	4b9e      	ldr	r3, [pc, #632]	; (8010a40 <evtMspReceive+0x1494>)
 80107c8:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80107cc:	4619      	mov	r1, r3
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f007 fc7c 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.failsafe_throttle);
 80107d4:	4b9b      	ldr	r3, [pc, #620]	; (8010a44 <evtMspReceive+0x1498>)
 80107d6:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80107da:	4619      	mov	r1, r3
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f007 fc75 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_type);
 80107e2:	4b97      	ldr	r3, [pc, #604]	; (8010a40 <evtMspReceive+0x1494>)
 80107e4:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 80107e8:	4619      	mov	r1, r3
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f007 fc28 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_baudrate);
 80107f0:	4b93      	ldr	r3, [pc, #588]	; (8010a40 <evtMspReceive+0x1494>)
 80107f2:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	4619      	mov	r1, r3
 80107fa:	68f8      	ldr	r0, [r7, #12]
 80107fc:	f007 fc20 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_ubx_sbas);
 8010800:	4b8f      	ldr	r3, [pc, #572]	; (8010a40 <evtMspReceive+0x1494>)
 8010802:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010806:	b2db      	uxtb	r3, r3
 8010808:	4619      	mov	r1, r3
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	f007 fc18 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.multiwiicurrentoutput);
 8010810:	4b8b      	ldr	r3, [pc, #556]	; (8010a40 <evtMspReceive+0x1494>)
 8010812:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010816:	4619      	mov	r1, r3
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	f007 fc11 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.rssi_aux_channel);
 801081e:	4b88      	ldr	r3, [pc, #544]	; (8010a40 <evtMspReceive+0x1494>)
 8010820:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8010824:	4619      	mov	r1, r3
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f007 fc0a 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, 0);
 801082c:	2100      	movs	r1, #0
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f007 fc06 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, cfg.mag_declination / 10); // TODO check this shit
 8010834:	4b83      	ldr	r3, [pc, #524]	; (8010a44 <evtMspReceive+0x1498>)
 8010836:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801083a:	4a83      	ldr	r2, [pc, #524]	; (8010a48 <evtMspReceive+0x149c>)
 801083c:	fb82 1203 	smull	r1, r2, r2, r3
 8010840:	1092      	asrs	r2, r2, #2
 8010842:	17db      	asrs	r3, r3, #31
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	b21b      	sxth	r3, r3
 8010848:	b29b      	uxth	r3, r3
 801084a:	4619      	mov	r1, r3
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f007 fc3d 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatscale);
 8010852:	4b7b      	ldr	r3, [pc, #492]	; (8010a40 <evtMspReceive+0x1494>)
 8010854:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8010858:	4619      	mov	r1, r3
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f007 fbf0 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmincellvoltage);
 8010860:	4b77      	ldr	r3, [pc, #476]	; (8010a40 <evtMspReceive+0x1494>)
 8010862:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 8010866:	4619      	mov	r1, r3
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f007 fbe9 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmaxcellvoltage);
 801086e:	4b74      	ldr	r3, [pc, #464]	; (8010a40 <evtMspReceive+0x1494>)
 8010870:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010874:	4619      	mov	r1, r3
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f007 fbe2 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatwarningcellvoltage);
 801087c:	4b70      	ldr	r3, [pc, #448]	; (8010a40 <evtMspReceive+0x1494>)
 801087e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8010882:	4619      	mov	r1, r3
 8010884:	68f8      	ldr	r0, [r7, #12]
 8010886:	f007 fbdb 	bl	8018040 <pifMsp_AddAnswer8>
        break;
 801088a:	e33c      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 801088c:	2300      	movs	r3, #0
 801088e:	637b      	str	r3, [r7, #52]	; 0x34
 8010890:	e00a      	b.n	80108a8 <evtMspReceive+0x12fc>
            pifMsp_AddAnswer8(p_owner, i + 1);
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	b2db      	uxtb	r3, r3
 8010896:	3301      	adds	r3, #1
 8010898:	b2db      	uxtb	r3, r3
 801089a:	4619      	mov	r1, r3
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f007 fbcf 	bl	8018040 <pifMsp_AddAnswer8>
        for (i = 0; i < 8; i++)
 80108a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a4:	3301      	adds	r3, #1
 80108a6:	637b      	str	r3, [r7, #52]	; 0x34
 80108a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108aa:	2b07      	cmp	r3, #7
 80108ac:	d9f1      	bls.n	8010892 <evtMspReceive+0x12e6>
        break;
 80108ae:	e32a      	b.n	8010f06 <evtMspReceive+0x195a>

#ifdef GPS
    case MSP_WP:
        wp_no = pifMsp_ReadData8(p_packet);    // get the wp number
 80108b0:	68b8      	ldr	r0, [r7, #8]
 80108b2:	f007 fb1b 	bl	8017eec <pifMsp_ReadData8>
 80108b6:	4603      	mov	r3, r0
 80108b8:	76fb      	strb	r3, [r7, #27]
        if (wp_no == 0) {
 80108ba:	7efb      	ldrb	r3, [r7, #27]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d106      	bne.n	80108ce <evtMspReceive+0x1322>
            lat = GPS_home[LAT];
 80108c0:	4b62      	ldr	r3, [pc, #392]	; (8010a4c <evtMspReceive+0x14a0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 80108c6:	4b61      	ldr	r3, [pc, #388]	; (8010a4c <evtMspReceive+0x14a0>)
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24
 80108cc:	e008      	b.n	80108e0 <evtMspReceive+0x1334>
        } else if (wp_no == 16) {
 80108ce:	7efb      	ldrb	r3, [r7, #27]
 80108d0:	2b10      	cmp	r3, #16
 80108d2:	d105      	bne.n	80108e0 <evtMspReceive+0x1334>
            lat = GPS_hold[LAT];
 80108d4:	4b5e      	ldr	r3, [pc, #376]	; (8010a50 <evtMspReceive+0x14a4>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 80108da:	4b5d      	ldr	r3, [pc, #372]	; (8010a50 <evtMspReceive+0x14a4>)
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	627b      	str	r3, [r7, #36]	; 0x24
        }
        pifMsp_AddAnswer8(p_owner, wp_no);
 80108e0:	7efb      	ldrb	r3, [r7, #27]
 80108e2:	4619      	mov	r1, r3
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f007 fbab 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, lat);
 80108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ec:	4619      	mov	r1, r3
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f007 fc38 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, lon);
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	4619      	mov	r1, r3
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f007 fc33 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 80108fe:	4b55      	ldr	r3, [pc, #340]	; (8010a54 <evtMspReceive+0x14a8>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4619      	mov	r1, r3
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f007 fc2d 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, 0);                 // heading  will come here (deg)
 801090a:	2100      	movs	r1, #0
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f007 fbdd 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, 0);                 // time to stay (ms) will come here
 8010912:	2100      	movs	r1, #0
 8010914:	68f8      	ldr	r0, [r7, #12]
 8010916:	f007 fbd9 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, 0);                  // nav flag will come here
 801091a:	2100      	movs	r1, #0
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f007 fb8f 	bl	8018040 <pifMsp_AddAnswer8>
        break;
 8010922:	e2f0      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_WP:
        wp_no = pifMsp_ReadData8(p_packet);    //get the wp number
 8010924:	68b8      	ldr	r0, [r7, #8]
 8010926:	f007 fae1 	bl	8017eec <pifMsp_ReadData8>
 801092a:	4603      	mov	r3, r0
 801092c:	76fb      	strb	r3, [r7, #27]
        lat = pifMsp_ReadData32(p_packet);
 801092e:	68b8      	ldr	r0, [r7, #8]
 8010930:	f007 fb0d 	bl	8017f4e <pifMsp_ReadData32>
 8010934:	4603      	mov	r3, r0
 8010936:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = pifMsp_ReadData32(p_packet);
 8010938:	68b8      	ldr	r0, [r7, #8]
 801093a:	f007 fb08 	bl	8017f4e <pifMsp_ReadData32>
 801093e:	4603      	mov	r3, r0
 8010940:	627b      	str	r3, [r7, #36]	; 0x24
        alt = pifMsp_ReadData32(p_packet);     // to set altitude (cm)
 8010942:	68b8      	ldr	r0, [r7, #8]
 8010944:	f007 fb03 	bl	8017f4e <pifMsp_ReadData32>
 8010948:	4603      	mov	r3, r0
 801094a:	623b      	str	r3, [r7, #32]
        pifMsp_ReadData16(p_packet);           // future: to set heading (deg)
 801094c:	68b8      	ldr	r0, [r7, #8]
 801094e:	f007 fae1 	bl	8017f14 <pifMsp_ReadData16>
        pifMsp_ReadData16(p_packet);           // future: to set time to stay (ms)
 8010952:	68b8      	ldr	r0, [r7, #8]
 8010954:	f007 fade 	bl	8017f14 <pifMsp_ReadData16>
        pifMsp_ReadData8(p_packet);            // future: to set nav flag
 8010958:	68b8      	ldr	r0, [r7, #8]
 801095a:	f007 fac7 	bl	8017eec <pifMsp_ReadData8>
        if (wp_no == 0) {
 801095e:	7efb      	ldrb	r3, [r7, #27]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d113      	bne.n	801098c <evtMspReceive+0x13e0>
            GPS_home[LAT] = lat;
 8010964:	4a39      	ldr	r2, [pc, #228]	; (8010a4c <evtMspReceive+0x14a0>)
 8010966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010968:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 801096a:	4a38      	ldr	r2, [pc, #224]	; (8010a4c <evtMspReceive+0x14a0>)
 801096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096e:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 8010970:	4b39      	ldr	r3, [pc, #228]	; (8010a58 <evtMspReceive+0x14ac>)
 8010972:	2200      	movs	r2, #0
 8010974:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010976:	4b38      	ldr	r3, [pc, #224]	; (8010a58 <evtMspReceive+0x14ac>)
 8010978:	2201      	movs	r2, #1
 801097a:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 82ba 	beq.w	8010ef8 <evtMspReceive+0x194c>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010984:	4a33      	ldr	r2, [pc, #204]	; (8010a54 <evtMspReceive+0x14a8>)
 8010986:	6a3b      	ldr	r3, [r7, #32]
 8010988:	6013      	str	r3, [r2, #0]
            if (alt != 0)
                AltHold = alt;          // temporary implementation to test feature with apps
            nav_mode = NAV_MODE_WP;
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
        }
        break;
 801098a:	e2b5      	b.n	8010ef8 <evtMspReceive+0x194c>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 801098c:	7efb      	ldrb	r3, [r7, #27]
 801098e:	2b10      	cmp	r3, #16
 8010990:	f040 82b2 	bne.w	8010ef8 <evtMspReceive+0x194c>
            GPS_hold[LAT] = lat;
 8010994:	4a2e      	ldr	r2, [pc, #184]	; (8010a50 <evtMspReceive+0x14a4>)
 8010996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010998:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 801099a:	4a2d      	ldr	r2, [pc, #180]	; (8010a50 <evtMspReceive+0x14a4>)
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d002      	beq.n	80109ac <evtMspReceive+0x1400>
                AltHold = alt;          // temporary implementation to test feature with apps
 80109a6:	4a2b      	ldr	r2, [pc, #172]	; (8010a54 <evtMspReceive+0x14a8>)
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 80109ac:	4b2b      	ldr	r3, [pc, #172]	; (8010a5c <evtMspReceive+0x14b0>)
 80109ae:	2202      	movs	r2, #2
 80109b0:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 80109b2:	492b      	ldr	r1, [pc, #172]	; (8010a60 <evtMspReceive+0x14b4>)
 80109b4:	4826      	ldr	r0, [pc, #152]	; (8010a50 <evtMspReceive+0x14a4>)
 80109b6:	f7f8 faf7 	bl	8008fa8 <GPS_set_next_wp>
        break;
 80109ba:	e29d      	b.n	8010ef8 <evtMspReceive+0x194c>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 80109bc:	4b26      	ldr	r3, [pc, #152]	; (8010a58 <evtMspReceive+0x14ac>)
 80109be:	785b      	ldrb	r3, [r3, #1]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f040 829b 	bne.w	8010efc <evtMspReceive+0x1950>
            checkFirstTime(true);
 80109c6:	2001      	movs	r0, #1
 80109c8:	f7f5 fea2 	bl	8006710 <checkFirstTime>
        break;
 80109cc:	e296      	b.n	8010efc <evtMspReceive+0x1950>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 80109ce:	4b22      	ldr	r3, [pc, #136]	; (8010a58 <evtMspReceive+0x14ac>)
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f040 8294 	bne.w	8010f00 <evtMspReceive+0x1954>
            calibratingA = CALIBRATING_ACC_CYCLES;
 80109d8:	4b22      	ldr	r3, [pc, #136]	; (8010a64 <evtMspReceive+0x14b8>)
 80109da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80109de:	801a      	strh	r2, [r3, #0]
        break;
 80109e0:	e28e      	b.n	8010f00 <evtMspReceive+0x1954>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 80109e2:	4b1d      	ldr	r3, [pc, #116]	; (8010a58 <evtMspReceive+0x14ac>)
 80109e4:	785b      	ldrb	r3, [r3, #1]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f040 828c 	bne.w	8010f04 <evtMspReceive+0x1958>
            f.CALIBRATE_MAG = 1;
 80109ec:	4b1a      	ldr	r3, [pc, #104]	; (8010a58 <evtMspReceive+0x14ac>)
 80109ee:	2201      	movs	r2, #1
 80109f0:	739a      	strb	r2, [r3, #14]
        break;
 80109f2:	e287      	b.n	8010f04 <evtMspReceive+0x1958>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 80109f4:	4b18      	ldr	r3, [pc, #96]	; (8010a58 <evtMspReceive+0x14ac>)
 80109f6:	785b      	ldrb	r3, [r3, #1]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d004      	beq.n	8010a06 <evtMspReceive+0x145a>
            pifMsp_MakeError(p_owner, p_packet);
 80109fc:	68b9      	ldr	r1, [r7, #8]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f007 fc4e 	bl	80182a0 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
        }
        break;
 8010a04:	e27f      	b.n	8010f06 <evtMspReceive+0x195a>
            writeEEPROM(0, true);
 8010a06:	2101      	movs	r1, #1
 8010a08:	2000      	movs	r0, #0
 8010a0a:	f7f5 fdff 	bl	800660c <writeEEPROM>
        break;
 8010a0e:	e27a      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        if (mcfg.looptime) debug[0] = (int16_t)cycleTime - mcfg.looptime + mcfg.looptime / 10;
 8010a10:	4b0b      	ldr	r3, [pc, #44]	; (8010a40 <evtMspReceive+0x1494>)
 8010a12:	899b      	ldrh	r3, [r3, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d02d      	beq.n	8010a74 <evtMspReceive+0x14c8>
 8010a18:	4b13      	ldr	r3, [pc, #76]	; (8010a68 <evtMspReceive+0x14bc>)
 8010a1a:	881a      	ldrh	r2, [r3, #0]
 8010a1c:	4b08      	ldr	r3, [pc, #32]	; (8010a40 <evtMspReceive+0x1494>)
 8010a1e:	899b      	ldrh	r3, [r3, #12]
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	4b06      	ldr	r3, [pc, #24]	; (8010a40 <evtMspReceive+0x1494>)
 8010a26:	899b      	ldrh	r3, [r3, #12]
 8010a28:	4910      	ldr	r1, [pc, #64]	; (8010a6c <evtMspReceive+0x14c0>)
 8010a2a:	fba1 1303 	umull	r1, r3, r1, r3
 8010a2e:	08db      	lsrs	r3, r3, #3
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	4413      	add	r3, r2
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	b21a      	sxth	r2, r3
 8010a38:	4b0d      	ldr	r3, [pc, #52]	; (8010a70 <evtMspReceive+0x14c4>)
 8010a3a:	801a      	strh	r2, [r3, #0]
 8010a3c:	e01f      	b.n	8010a7e <evtMspReceive+0x14d2>
 8010a3e:	bf00      	nop
 8010a40:	200008f8 	.word	0x200008f8
 8010a44:	20000e64 	.word	0x20000e64
 8010a48:	66666667 	.word	0x66666667
 8010a4c:	20001804 	.word	0x20001804
 8010a50:	20001810 	.word	0x20001810
 8010a54:	200014ac 	.word	0x200014ac
 8010a58:	20001738 	.word	0x20001738
 8010a5c:	20001838 	.word	0x20001838
 8010a60:	20001814 	.word	0x20001814
 8010a64:	20001a02 	.word	0x20001a02
 8010a68:	20001758 	.word	0x20001758
 8010a6c:	cccccccd 	.word	0xcccccccd
 8010a70:	20001750 	.word	0x20001750
        else debug[0] = cycleTime;
 8010a74:	4ba6      	ldr	r3, [pc, #664]	; (8010d10 <evtMspReceive+0x1764>)
 8010a76:	881b      	ldrh	r3, [r3, #0]
 8010a78:	b21a      	sxth	r2, r3
 8010a7a:	4ba6      	ldr	r3, [pc, #664]	; (8010d14 <evtMspReceive+0x1768>)
 8010a7c:	801a      	strh	r2, [r3, #0]
        debug[1] = pif_performance._use_rate;
 8010a7e:	4ba6      	ldr	r3, [pc, #664]	; (8010d18 <evtMspReceive+0x176c>)
 8010a80:	791b      	ldrb	r3, [r3, #4]
 8010a82:	b21a      	sxth	r2, r3
 8010a84:	4ba3      	ldr	r3, [pc, #652]	; (8010d14 <evtMspReceive+0x1768>)
 8010a86:	805a      	strh	r2, [r3, #2]
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010a88:	4ba4      	ldr	r3, [pc, #656]	; (8010d1c <evtMspReceive+0x1770>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4aa4      	ldr	r2, [pc, #656]	; (8010d20 <evtMspReceive+0x1774>)
 8010a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a92:	0c9b      	lsrs	r3, r3, #18
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	461a      	mov	r2, r3
 8010a98:	0152      	lsls	r2, r2, #5
 8010a9a:	1ad2      	subs	r2, r2, r3
 8010a9c:	0092      	lsls	r2, r2, #2
 8010a9e:	4413      	add	r3, r2
 8010aa0:	00db      	lsls	r3, r3, #3
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	4b9f      	ldr	r3, [pc, #636]	; (8010d24 <evtMspReceive+0x1778>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	499d      	ldr	r1, [pc, #628]	; (8010d20 <evtMspReceive+0x1774>)
 8010aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8010aae:	0c9b      	lsrs	r3, r3, #18
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	4413      	add	r3, r2
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	b21a      	sxth	r2, r3
 8010ab8:	4b96      	ldr	r3, [pc, #600]	; (8010d14 <evtMspReceive+0x1768>)
 8010aba:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010abc:	2300      	movs	r3, #0
 8010abe:	637b      	str	r3, [r7, #52]	; 0x34
 8010ac0:	e00b      	b.n	8010ada <evtMspReceive+0x152e>
            pifMsp_AddAnswer16(p_owner, debug[i]);      // 4 variables are here for general monitoring purpose
 8010ac2:	4a94      	ldr	r2, [pc, #592]	; (8010d14 <evtMspReceive+0x1768>)
 8010ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	4619      	mov	r1, r3
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f007 fafc 	bl	80180cc <pifMsp_AddAnswer16>
        for (i = 0; i < 4; i++)
 8010ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8010ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010adc:	2b03      	cmp	r3, #3
 8010ade:	d9f0      	bls.n	8010ac2 <evtMspReceive+0x1516>
        break;
 8010ae0:	e211      	b.n	8010f06 <evtMspReceive+0x195a>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[PITCH]);
 8010ae2:	4b91      	ldr	r3, [pc, #580]	; (8010d28 <evtMspReceive+0x177c>)
 8010ae4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	4619      	mov	r1, r3
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f007 faed 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[ROLL]);
 8010af2:	4b8d      	ldr	r3, [pc, #564]	; (8010d28 <evtMspReceive+0x177c>)
 8010af4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	4619      	mov	r1, r3
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f007 fae5 	bl	80180cc <pifMsp_AddAnswer16>
        break;
 8010b02:	e200      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_UID:
        pifMsp_AddAnswer32(p_owner, g_unique_id[0]);
 8010b04:	4b89      	ldr	r3, [pc, #548]	; (8010d2c <evtMspReceive+0x1780>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f007 fb2a 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[1]);
 8010b10:	4b86      	ldr	r3, [pc, #536]	; (8010d2c <evtMspReceive+0x1780>)
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	4619      	mov	r1, r3
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f007 fb24 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[2]);
 8010b1c:	4b83      	ldr	r3, [pc, #524]	; (8010d2c <evtMspReceive+0x1780>)
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	4619      	mov	r1, r3
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f007 fb1e 	bl	8018164 <pifMsp_AddAnswer32>
        break;
 8010b28:	e1ed      	b.n	8010f06 <evtMspReceive+0x195a>

#ifdef GPS
    case MSP_GPSSVINFO:
        pifMsp_AddAnswer8(p_owner, GPS_numCh);
 8010b2a:	4b81      	ldr	r3, [pc, #516]	; (8010d30 <evtMspReceive+0x1784>)
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	4619      	mov	r1, r3
 8010b30:	68f8      	ldr	r0, [r7, #12]
 8010b32:	f007 fa85 	bl	8018040 <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010b36:	2300      	movs	r3, #0
 8010b38:	637b      	str	r3, [r7, #52]	; 0x34
 8010b3a:	e022      	b.n	8010b82 <evtMspReceive+0x15d6>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_chn[i]);
 8010b3c:	4a7d      	ldr	r2, [pc, #500]	; (8010d34 <evtMspReceive+0x1788>)
 8010b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b40:	4413      	add	r3, r2
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	4619      	mov	r1, r3
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f007 fa7a 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_svid[i]);
 8010b4c:	4a7a      	ldr	r2, [pc, #488]	; (8010d38 <evtMspReceive+0x178c>)
 8010b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b50:	4413      	add	r3, r2
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	4619      	mov	r1, r3
 8010b56:	68f8      	ldr	r0, [r7, #12]
 8010b58:	f007 fa72 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_quality[i]);
 8010b5c:	4a77      	ldr	r2, [pc, #476]	; (8010d3c <evtMspReceive+0x1790>)
 8010b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b60:	4413      	add	r3, r2
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	4619      	mov	r1, r3
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f007 fa6a 	bl	8018040 <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_cno[i]);
 8010b6c:	4a74      	ldr	r2, [pc, #464]	; (8010d40 <evtMspReceive+0x1794>)
 8010b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b70:	4413      	add	r3, r2
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	4619      	mov	r1, r3
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f007 fa62 	bl	8018040 <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7e:	3301      	adds	r3, #1
 8010b80:	637b      	str	r3, [r7, #52]	; 0x34
 8010b82:	4b6b      	ldr	r3, [pc, #428]	; (8010d30 <evtMspReceive+0x1784>)
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	461a      	mov	r2, r3
 8010b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d3d6      	bcc.n	8010b3c <evtMspReceive+0x1590>
        }
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010b8e:	f7f7 fcd9 	bl	8008544 <gpsPollSvinfo>
        break;
 8010b92:	e1b8      	b.n	8010f06 <evtMspReceive+0x195a>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010b94:	2020      	movs	r0, #32
 8010b96:	f7f6 f8d3 	bl	8006d40 <sensors>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d012      	beq.n	8010bc6 <evtMspReceive+0x161a>
            pifMsp_AddAnswer32(p_owner, GPS_update_rate[1] - GPS_update_rate[0]);
 8010ba0:	4b68      	ldr	r3, [pc, #416]	; (8010d44 <evtMspReceive+0x1798>)
 8010ba2:	685a      	ldr	r2, [r3, #4]
 8010ba4:	4b67      	ldr	r3, [pc, #412]	; (8010d44 <evtMspReceive+0x1798>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	1ad3      	subs	r3, r2, r3
 8010baa:	4619      	mov	r1, r3
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f007 fad9 	bl	8018164 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010bb2:	4b65      	ldr	r3, [pc, #404]	; (8010d48 <evtMspReceive+0x179c>)
 8010bb4:	685a      	ldr	r2, [r3, #4]
 8010bb6:	4b64      	ldr	r3, [pc, #400]	; (8010d48 <evtMspReceive+0x179c>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	f007 fad0 	bl	8018164 <pifMsp_AddAnswer32>
 8010bc4:	e007      	b.n	8010bd6 <evtMspReceive+0x162a>
        } else {
            pifMsp_AddAnswer32(p_owner, 0);
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f007 facb 	bl	8018164 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, 0);
 8010bce:	2100      	movs	r1, #0
 8010bd0:	68f8      	ldr	r0, [r7, #12]
 8010bd2:	f007 fac7 	bl	8018164 <pifMsp_AddAnswer32>
        }
        pifMsp_AddAnswer32(p_owner, GPS_HorizontalAcc);
 8010bd6:	4b5d      	ldr	r3, [pc, #372]	; (8010d4c <evtMspReceive+0x17a0>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f007 fac1 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_VerticalAcc);
 8010be2:	4b5b      	ldr	r3, [pc, #364]	; (8010d50 <evtMspReceive+0x17a4>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4619      	mov	r1, r3
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f007 fabb 	bl	8018164 <pifMsp_AddAnswer32>
        break;
 8010bee:	e18a      	b.n	8010f06 <evtMspReceive+0x195a>
#endif  // GPS

    case MSP_SET_CONFIG:
        mcfg.mixerConfiguration = pifMsp_ReadData8(p_packet); // multitype
 8010bf0:	68b8      	ldr	r0, [r7, #8]
 8010bf2:	f007 f97b 	bl	8017eec <pifMsp_ReadData8>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4b56      	ldr	r3, [pc, #344]	; (8010d54 <evtMspReceive+0x17a8>)
 8010bfc:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010bfe:	f7f6 f923 	bl	8006e48 <featureClearAll>
        featureSet(pifMsp_ReadData32(p_packet)); // features bitmap
 8010c02:	68b8      	ldr	r0, [r7, #8]
 8010c04:	f007 f9a3 	bl	8017f4e <pifMsp_ReadData32>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7f6 f8f6 	bl	8006dfc <featureSet>
        mcfg.serialrx_type = pifMsp_ReadData8(p_packet); // serialrx_type
 8010c10:	68b8      	ldr	r0, [r7, #8]
 8010c12:	f007 f96b 	bl	8017eec <pifMsp_ReadData8>
 8010c16:	4603      	mov	r3, r0
 8010c18:	461a      	mov	r2, r3
 8010c1a:	4b4e      	ldr	r3, [pc, #312]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c1c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = pifMsp_ReadData16(p_packet); // board_align_roll
 8010c20:	68b8      	ldr	r0, [r7, #8]
 8010c22:	f007 f977 	bl	8017f14 <pifMsp_ReadData16>
 8010c26:	4603      	mov	r3, r0
 8010c28:	b21a      	sxth	r2, r3
 8010c2a:	4b4a      	ldr	r3, [pc, #296]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c2c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = pifMsp_ReadData16(p_packet); // board_align_pitch
 8010c30:	68b8      	ldr	r0, [r7, #8]
 8010c32:	f007 f96f 	bl	8017f14 <pifMsp_ReadData16>
 8010c36:	4603      	mov	r3, r0
 8010c38:	b21a      	sxth	r2, r3
 8010c3a:	4b46      	ldr	r3, [pc, #280]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c3c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = pifMsp_ReadData16(p_packet); // board_align_yaw
 8010c40:	68b8      	ldr	r0, [r7, #8]
 8010c42:	f007 f967 	bl	8017f14 <pifMsp_ReadData16>
 8010c46:	4603      	mov	r3, r0
 8010c48:	b21a      	sxth	r2, r3
 8010c4a:	4b42      	ldr	r3, [pc, #264]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c4c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = pifMsp_ReadData16(p_packet);
 8010c50:	68b8      	ldr	r0, [r7, #8]
 8010c52:	f007 f95f 	bl	8017f14 <pifMsp_ReadData16>
 8010c56:	4603      	mov	r3, r0
 8010c58:	461a      	mov	r2, r3
 8010c5a:	4b3e      	ldr	r3, [pc, #248]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = pifMsp_ReadData16(p_packet);
 8010c60:	68b8      	ldr	r0, [r7, #8]
 8010c62:	f007 f957 	bl	8017f14 <pifMsp_ReadData16>
 8010c66:	4603      	mov	r3, r0
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4b3a      	ldr	r3, [pc, #232]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c6c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = pifMsp_ReadData16(p_packet);
 8010c70:	68b8      	ldr	r0, [r7, #8]
 8010c72:	f007 f94f 	bl	8017f14 <pifMsp_ReadData16>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461a      	mov	r2, r3
 8010c7a:	4b36      	ldr	r3, [pc, #216]	; (8010d54 <evtMspReceive+0x17a8>)
 8010c7c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = pifMsp_ReadData8(p_packet);
 8010c80:	68b8      	ldr	r0, [r7, #8]
 8010c82:	f007 f933 	bl	8017eec <pifMsp_ReadData8>
 8010c86:	4603      	mov	r3, r0
 8010c88:	461a      	mov	r2, r3
 8010c8a:	4b27      	ldr	r3, [pc, #156]	; (8010d28 <evtMspReceive+0x177c>)
 8010c8c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = pifMsp_ReadData8(p_packet);
 8010c90:	68b8      	ldr	r0, [r7, #8]
 8010c92:	f007 f92b 	bl	8017eec <pifMsp_ReadData8>
 8010c96:	4603      	mov	r3, r0
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4b23      	ldr	r3, [pc, #140]	; (8010d28 <evtMspReceive+0x177c>)
 8010c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = pifMsp_ReadData8(p_packet);
 8010ca0:	68b8      	ldr	r0, [r7, #8]
 8010ca2:	f007 f923 	bl	8017eec <pifMsp_ReadData8>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	461a      	mov	r2, r3
 8010caa:	4b2a      	ldr	r3, [pc, #168]	; (8010d54 <evtMspReceive+0x17a8>)
 8010cac:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = pifMsp_ReadData8(p_packet);
 8010cb0:	68b8      	ldr	r0, [r7, #8]
 8010cb2:	f007 f91b 	bl	8017eec <pifMsp_ReadData8>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	461a      	mov	r2, r3
 8010cba:	4b1b      	ldr	r3, [pc, #108]	; (8010d28 <evtMspReceive+0x177c>)
 8010cbc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = pifMsp_ReadData16(p_packet);
 8010cc0:	68b8      	ldr	r0, [r7, #8]
 8010cc2:	f007 f927 	bl	8017f14 <pifMsp_ReadData16>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	617b      	str	r3, [r7, #20]
        if (tmp != mcfg.looptime) {
 8010cca:	4b22      	ldr	r3, [pc, #136]	; (8010d54 <evtMspReceive+0x17a8>)
 8010ccc:	899b      	ldrh	r3, [r3, #12]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d04d      	beq.n	8010d72 <evtMspReceive+0x17c6>
            if (mcfg.looptime && tmp) {
 8010cd6:	4b1f      	ldr	r3, [pc, #124]	; (8010d54 <evtMspReceive+0x17a8>)
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00b      	beq.n	8010cf6 <evtMspReceive+0x174a>
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d008      	beq.n	8010cf6 <evtMspReceive+0x174a>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8010ce4:	4b1c      	ldr	r3, [pc, #112]	; (8010d58 <evtMspReceive+0x17ac>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	697a      	ldr	r2, [r7, #20]
 8010cea:	b292      	uxth	r2, r2
 8010cec:	4611      	mov	r1, r2
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f003 fc7e 	bl	80145f0 <pifTask_ChangePeriod>
 8010cf4:	e039      	b.n	8010d6a <evtMspReceive+0x17be>
            }
            else {
                if (tmp) {
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d02f      	beq.n	8010d5c <evtMspReceive+0x17b0>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8010cfc:	4b16      	ldr	r3, [pc, #88]	; (8010d58 <evtMspReceive+0x17ac>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	697a      	ldr	r2, [r7, #20]
 8010d02:	b292      	uxth	r2, r2
 8010d04:	2103      	movs	r1, #3
 8010d06:	4618      	mov	r0, r3
 8010d08:	f003 fc34 	bl	8014574 <pifTask_ChangeMode>
 8010d0c:	e02d      	b.n	8010d6a <evtMspReceive+0x17be>
 8010d0e:	bf00      	nop
 8010d10:	20001758 	.word	0x20001758
 8010d14:	20001750 	.word	0x20001750
 8010d18:	20001c70 	.word	0x20001c70
 8010d1c:	20001724 	.word	0x20001724
 8010d20:	431bde83 	.word	0x431bde83
 8010d24:	20001728 	.word	0x20001728
 8010d28:	20000e64 	.word	0x20000e64
 8010d2c:	2000172c 	.word	0x2000172c
 8010d30:	20001839 	.word	0x20001839
 8010d34:	2000183c 	.word	0x2000183c
 8010d38:	2000185c 	.word	0x2000185c
 8010d3c:	2000187c 	.word	0x2000187c
 8010d40:	2000189c 	.word	0x2000189c
 8010d44:	200018bc 	.word	0x200018bc
 8010d48:	200018c4 	.word	0x200018c4
 8010d4c:	200018cc 	.word	0x200018cc
 8010d50:	200018d0 	.word	0x200018d0
 8010d54:	200008f8 	.word	0x200008f8
 8010d58:	20001590 	.word	0x20001590
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8010d5c:	4b6d      	ldr	r3, [pc, #436]	; (8010f14 <evtMspReceive+0x1968>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2264      	movs	r2, #100	; 0x64
 8010d62:	2101      	movs	r1, #1
 8010d64:	4618      	mov	r0, r3
 8010d66:	f003 fc05 	bl	8014574 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	4b6a      	ldr	r3, [pc, #424]	; (8010f18 <evtMspReceive+0x196c>)
 8010d70:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = pifMsp_ReadData8(p_packet);
 8010d72:	68b8      	ldr	r0, [r7, #8]
 8010d74:	f007 f8ba 	bl	8017eec <pifMsp_ReadData8>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4b67      	ldr	r3, [pc, #412]	; (8010f1c <evtMspReceive+0x1970>)
 8010d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8010d82:	e0c0      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);
 8010d84:	4b64      	ldr	r3, [pc, #400]	; (8010f18 <evtMspReceive+0x196c>)
 8010d86:	795b      	ldrb	r3, [r3, #5]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f007 f958 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, featureMask());
 8010d90:	f7f6 f866 	bl	8006e60 <featureMask>
 8010d94:	4603      	mov	r3, r0
 8010d96:	4619      	mov	r1, r3
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f007 f9e3 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.serialrx_type);
 8010d9e:	4b5e      	ldr	r3, [pc, #376]	; (8010f18 <evtMspReceive+0x196c>)
 8010da0:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010da4:	4619      	mov	r1, r3
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f007 f94a 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_roll);
 8010dac:	4b5a      	ldr	r3, [pc, #360]	; (8010f18 <evtMspReceive+0x196c>)
 8010dae:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	4619      	mov	r1, r3
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f007 f988 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_pitch);
 8010dbc:	4b56      	ldr	r3, [pc, #344]	; (8010f18 <evtMspReceive+0x196c>)
 8010dbe:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f007 f980 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_yaw);
 8010dcc:	4b52      	ldr	r3, [pc, #328]	; (8010f18 <evtMspReceive+0x196c>)
 8010dce:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f007 f978 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentscale);
 8010ddc:	4b4e      	ldr	r3, [pc, #312]	; (8010f18 <evtMspReceive+0x196c>)
 8010dde:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8010de2:	4619      	mov	r1, r3
 8010de4:	68f8      	ldr	r0, [r7, #12]
 8010de6:	f007 f971 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentoffset);
 8010dea:	4b4b      	ldr	r3, [pc, #300]	; (8010f18 <evtMspReceive+0x196c>)
 8010dec:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8010df0:	4619      	mov	r1, r3
 8010df2:	68f8      	ldr	r0, [r7, #12]
 8010df4:	f007 f96a 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.motor_pwm_rate);
 8010df8:	4b47      	ldr	r3, [pc, #284]	; (8010f18 <evtMspReceive+0x196c>)
 8010dfa:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8010dfe:	4619      	mov	r1, r3
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f007 f963 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]);
 8010e06:	4b45      	ldr	r3, [pc, #276]	; (8010f1c <evtMspReceive+0x1970>)
 8010e08:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	68f8      	ldr	r0, [r7, #12]
 8010e10:	f007 f916 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[1]);
 8010e14:	4b41      	ldr	r3, [pc, #260]	; (8010f1c <evtMspReceive+0x1970>)
 8010e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	68f8      	ldr	r0, [r7, #12]
 8010e1e:	f007 f90f 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.power_adc_channel);
 8010e22:	4b3d      	ldr	r3, [pc, #244]	; (8010f18 <evtMspReceive+0x196c>)
 8010e24:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8010e28:	4619      	mov	r1, r3
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f007 f908 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.small_angle);
 8010e30:	4b3a      	ldr	r3, [pc, #232]	; (8010f1c <evtMspReceive+0x1970>)
 8010e32:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010e36:	4619      	mov	r1, r3
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f007 f901 	bl	8018040 <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.looptime);
 8010e3e:	4b36      	ldr	r3, [pc, #216]	; (8010f18 <evtMspReceive+0x196c>)
 8010e40:	899b      	ldrh	r3, [r3, #12]
 8010e42:	4619      	mov	r1, r3
 8010e44:	68f8      	ldr	r0, [r7, #12]
 8010e46:	f007 f941 	bl	80180cc <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.locked_in);
 8010e4a:	4b34      	ldr	r3, [pc, #208]	; (8010f1c <evtMspReceive+0x1970>)
 8010e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e50:	4619      	mov	r1, r3
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f007 f8f4 	bl	8018040 <pifMsp_AddAnswer8>
        /// ???
        break;
 8010e58:	e055      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e5e:	e00c      	b.n	8010e7a <evtMspReceive+0x18ce>
            pifMsp_AddAnswer8(p_owner, mcfg.rcmap[i]);
 8010e60:	4a2d      	ldr	r2, [pc, #180]	; (8010f18 <evtMspReceive+0x196c>)
 8010e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e64:	4413      	add	r3, r2
 8010e66:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	68f8      	ldr	r0, [r7, #12]
 8010e70:	f007 f8e6 	bl	8018040 <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e76:	3301      	adds	r3, #1
 8010e78:	637b      	str	r3, [r7, #52]	; 0x34
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7c:	2b07      	cmp	r3, #7
 8010e7e:	d9ef      	bls.n	8010e60 <evtMspReceive+0x18b4>
        break;
 8010e80:	e041      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_SET_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010e82:	2300      	movs	r3, #0
 8010e84:	637b      	str	r3, [r7, #52]	; 0x34
 8010e86:	e00e      	b.n	8010ea6 <evtMspReceive+0x18fa>
            mcfg.rcmap[i] = pifMsp_ReadData8(p_packet);
 8010e88:	68b8      	ldr	r0, [r7, #8]
 8010e8a:	f007 f82f 	bl	8017eec <pifMsp_ReadData8>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	4619      	mov	r1, r3
 8010e92:	4a21      	ldr	r2, [pc, #132]	; (8010f18 <evtMspReceive+0x196c>)
 8010e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e96:	4413      	add	r3, r2
 8010e98:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010e9c:	460a      	mov	r2, r1
 8010e9e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8010ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea8:	2b07      	cmp	r3, #7
 8010eaa:	d9ed      	bls.n	8010e88 <evtMspReceive+0x18dc>
        break;
 8010eac:	e02b      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_REBOOT:
        pendReboot = true;
 8010eae:	4b1c      	ldr	r3, [pc, #112]	; (8010f20 <evtMspReceive+0x1974>)
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	701a      	strb	r2, [r3, #0]
        break;
 8010eb4:	e027      	b.n	8010f06 <evtMspReceive+0x195a>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8010eba:	e00a      	b.n	8010ed2 <evtMspReceive+0x1926>
            pifMsp_AddAnswer8(p_owner, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 8010ebc:	69fa      	ldr	r2, [r7, #28]
 8010ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec0:	4413      	add	r3, r2
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f007 f8ba 	bl	8018040 <pifMsp_AddAnswer8>
        for (i = 0; i < 11; i++)
 8010ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ece:	3301      	adds	r3, #1
 8010ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8010ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed4:	2b0a      	cmp	r3, #10
 8010ed6:	d9f1      	bls.n	8010ebc <evtMspReceive+0x1910>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010ed8:	2100      	movs	r1, #0
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f007 f942 	bl	8018164 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	f007 f93e 	bl	8018164 <pifMsp_AddAnswer32>
        break;
 8010ee8:	e00d      	b.n	8010f06 <evtMspReceive+0x195a>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f007 f9d7 	bl	80182a0 <pifMsp_MakeError>
        break;
 8010ef2:	e008      	b.n	8010f06 <evtMspReceive+0x195a>
        break;
 8010ef4:	bf00      	nop
 8010ef6:	e006      	b.n	8010f06 <evtMspReceive+0x195a>
        break;
 8010ef8:	bf00      	nop
 8010efa:	e004      	b.n	8010f06 <evtMspReceive+0x195a>
        break;
 8010efc:	bf00      	nop
 8010efe:	e002      	b.n	8010f06 <evtMspReceive+0x195a>
        break;
 8010f00:	bf00      	nop
 8010f02:	e000      	b.n	8010f06 <evtMspReceive+0x195a>
        break;
 8010f04:	bf00      	nop
    }
    pifMsp_SendAnswer(p_owner);
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	f007 fa1c 	bl	8018344 <pifMsp_SendAnswer>
}
 8010f0c:	bf00      	nop
 8010f0e:	373c      	adds	r7, #60	; 0x3c
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd90      	pop	{r4, r7, pc}
 8010f14:	20001590 	.word	0x20001590
 8010f18:	200008f8 	.word	0x200008f8
 8010f1c:	20000e64 	.word	0x20000e64
 8010f20:	20001b9a 	.word	0x20001b9a

08010f24 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	607a      	str	r2, [r7, #4]
 8010f30:	72fb      	strb	r3, [r7, #11]
    (void)p_owner;
    (void)p_issuer;

    if (f.ARMED) return;
 8010f32:	4b0c      	ldr	r3, [pc, #48]	; (8010f64 <evtMspOtherPacket+0x40>)
 8010f34:	785b      	ldrb	r3, [r3, #1]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d110      	bne.n	8010f5c <evtMspOtherPacket+0x38>

    if (data == '#')
 8010f3a:	7afb      	ldrb	r3, [r7, #11]
 8010f3c:	2b23      	cmp	r3, #35	; 0x23
 8010f3e:	d103      	bne.n	8010f48 <evtMspOtherPacket+0x24>
        s_change_cli = TRUE;
 8010f40:	4b09      	ldr	r3, [pc, #36]	; (8010f68 <evtMspOtherPacket+0x44>)
 8010f42:	2201      	movs	r2, #1
 8010f44:	701a      	strb	r2, [r3, #0]
 8010f46:	e00a      	b.n	8010f5e <evtMspOtherPacket+0x3a>
    else if (data == mcfg.reboot_character)
 8010f48:	4b08      	ldr	r3, [pc, #32]	; (8010f6c <evtMspOtherPacket+0x48>)
 8010f4a:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8010f4e:	7afa      	ldrb	r2, [r7, #11]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d104      	bne.n	8010f5e <evtMspOtherPacket+0x3a>
        systemReset(true);      // reboot to bootloader
 8010f54:	2001      	movs	r0, #1
 8010f56:	f7f0 feb5 	bl	8001cc4 <systemReset>
 8010f5a:	e000      	b.n	8010f5e <evtMspOtherPacket+0x3a>
    if (f.ARMED) return;
 8010f5c:	bf00      	nop
}
 8010f5e:	3710      	adds	r7, #16
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	20001738 	.word	0x20001738
 8010f68:	20001c54 	.word	0x20001c54
 8010f6c:	200008f8 	.word	0x200008f8

08010f70 <serialCom>:

void serialCom(void)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 8010f74:	4b0c      	ldr	r3, [pc, #48]	; (8010fa8 <serialCom+0x38>)
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00b      	beq.n	8010f94 <serialCom+0x24>
        s_change_cli = FALSE;
 8010f7c:	4b0a      	ldr	r3, [pc, #40]	; (8010fa8 <serialCom+0x38>)
 8010f7e:	2200      	movs	r2, #0
 8010f80:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 8010f82:	480a      	ldr	r0, [pc, #40]	; (8010fac <serialCom+0x3c>)
 8010f84:	f006 ff8c 	bl	8017ea0 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8010f88:	4b09      	ldr	r3, [pc, #36]	; (8010fb0 <serialCom+0x40>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	3304      	adds	r3, #4
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f5 f944 	bl	800621c <cliInit>
    };

    if (pendReboot)
 8010f94:	4b07      	ldr	r3, [pc, #28]	; (8010fb4 <serialCom+0x44>)
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <serialCom+0x32>
        systemReset(false); // noreturn
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	f7f0 fe91 	bl	8001cc4 <systemReset>
}
 8010fa2:	bf00      	nop
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20001c54 	.word	0x20001c54
 8010fac:	20001ba0 	.word	0x20001ba0
 8010fb0:	20000840 	.word	0x20000840
 8010fb4:	20001b9a 	.word	0x20001b9a

08010fb8 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 8010fc0:	4a07      	ldr	r2, [pc, #28]	; (8010fe0 <pif_Init+0x28>)
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 8010fc6:	4b07      	ldr	r3, [pc, #28]	; (8010fe4 <pif_Init+0x2c>)
 8010fc8:	2201      	movs	r2, #1
 8010fca:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8010fcc:	4b05      	ldr	r3, [pc, #20]	; (8010fe4 <pif_Init+0x2c>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 8010fd2:	bf00      	nop
 8010fd4:	370c      	adds	r7, #12
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop
 8010fe0:	20001c7c 	.word	0x20001c7c
 8010fe4:	20001c64 	.word	0x20001c64

08010fe8 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 8010fee:	4b56      	ldr	r3, [pc, #344]	; (8011148 <pif_sigTimer1ms+0x160>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	4a54      	ldr	r2, [pc, #336]	; (8011148 <pif_sigTimer1ms+0x160>)
 8010ff6:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8010ff8:	4b54      	ldr	r3, [pc, #336]	; (801114c <pif_sigTimer1ms+0x164>)
 8010ffa:	881b      	ldrh	r3, [r3, #0]
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	3301      	adds	r3, #1
 8011000:	b29a      	uxth	r2, r3
 8011002:	4b52      	ldr	r3, [pc, #328]	; (801114c <pif_sigTimer1ms+0x164>)
 8011004:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 8011006:	4b51      	ldr	r3, [pc, #324]	; (801114c <pif_sigTimer1ms+0x164>)
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	b29b      	uxth	r3, r3
 801100c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011010:	f0c0 808d 	bcc.w	801112e <pif_sigTimer1ms+0x146>
        pif_timer1ms = 0;
 8011014:	4b4d      	ldr	r3, [pc, #308]	; (801114c <pif_sigTimer1ms+0x164>)
 8011016:	2200      	movs	r2, #0
 8011018:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 801101a:	4b4d      	ldr	r3, [pc, #308]	; (8011150 <pif_sigTimer1ms+0x168>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	3301      	adds	r3, #1
 8011020:	4a4b      	ldr	r2, [pc, #300]	; (8011150 <pif_sigTimer1ms+0x168>)
 8011022:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 8011024:	4b4b      	ldr	r3, [pc, #300]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011026:	795b      	ldrb	r3, [r3, #5]
 8011028:	b2db      	uxtb	r3, r3
 801102a:	3301      	adds	r3, #1
 801102c:	b2da      	uxtb	r2, r3
 801102e:	4b49      	ldr	r3, [pc, #292]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011030:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 8011032:	4b48      	ldr	r3, [pc, #288]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011034:	795b      	ldrb	r3, [r3, #5]
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b3b      	cmp	r3, #59	; 0x3b
 801103a:	d971      	bls.n	8011120 <pif_sigTimer1ms+0x138>
    		pif_datetime.second = 0;
 801103c:	4b45      	ldr	r3, [pc, #276]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801103e:	2200      	movs	r2, #0
 8011040:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 8011042:	4b44      	ldr	r3, [pc, #272]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011044:	791b      	ldrb	r3, [r3, #4]
 8011046:	b2db      	uxtb	r3, r3
 8011048:	3301      	adds	r3, #1
 801104a:	b2da      	uxtb	r2, r3
 801104c:	4b41      	ldr	r3, [pc, #260]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801104e:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 8011050:	4b40      	ldr	r3, [pc, #256]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011052:	791b      	ldrb	r3, [r3, #4]
 8011054:	b2db      	uxtb	r3, r3
 8011056:	2b3b      	cmp	r3, #59	; 0x3b
 8011058:	d95b      	bls.n	8011112 <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 801105a:	4b3e      	ldr	r3, [pc, #248]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801105c:	2200      	movs	r2, #0
 801105e:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 8011060:	4b3c      	ldr	r3, [pc, #240]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011062:	78db      	ldrb	r3, [r3, #3]
 8011064:	b2db      	uxtb	r3, r3
 8011066:	3301      	adds	r3, #1
 8011068:	b2da      	uxtb	r2, r3
 801106a:	4b3a      	ldr	r3, [pc, #232]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801106c:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 801106e:	4b39      	ldr	r3, [pc, #228]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011070:	78db      	ldrb	r3, [r3, #3]
 8011072:	b2db      	uxtb	r3, r3
 8011074:	2b17      	cmp	r3, #23
 8011076:	d94c      	bls.n	8011112 <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 8011078:	4b36      	ldr	r3, [pc, #216]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801107a:	2200      	movs	r2, #0
 801107c:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 801107e:	4b35      	ldr	r3, [pc, #212]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011080:	789b      	ldrb	r3, [r3, #2]
 8011082:	b2db      	uxtb	r3, r3
 8011084:	3301      	adds	r3, #1
 8011086:	b2da      	uxtb	r2, r3
 8011088:	4b32      	ldr	r3, [pc, #200]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801108a:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 801108c:	4b31      	ldr	r3, [pc, #196]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801108e:	785b      	ldrb	r3, [r3, #1]
 8011090:	b2db      	uxtb	r3, r3
 8011092:	3b01      	subs	r3, #1
 8011094:	4a30      	ldr	r2, [pc, #192]	; (8011158 <pif_sigTimer1ms+0x170>)
 8011096:	5cd3      	ldrb	r3, [r2, r3]
 8011098:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 801109a:	4b2e      	ldr	r3, [pc, #184]	; (8011154 <pif_sigTimer1ms+0x16c>)
 801109c:	785b      	ldrb	r3, [r3, #1]
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d117      	bne.n	80110d4 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 80110a4:	4b2b      	ldr	r3, [pc, #172]	; (8011154 <pif_sigTimer1ms+0x16c>)
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80110b0:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 80110b2:	88bb      	ldrh	r3, [r7, #4]
 80110b4:	2b03      	cmp	r3, #3
 80110b6:	d80d      	bhi.n	80110d4 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 80110b8:	88bb      	ldrh	r3, [r7, #4]
 80110ba:	2b63      	cmp	r3, #99	; 0x63
 80110bc:	d807      	bhi.n	80110ce <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 80110be:	88bb      	ldrh	r3, [r7, #4]
 80110c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80110c4:	d206      	bcs.n	80110d4 <pif_sigTimer1ms+0xec>
 80110c6:	79fb      	ldrb	r3, [r7, #7]
 80110c8:	3301      	adds	r3, #1
 80110ca:	71fb      	strb	r3, [r7, #7]
 80110cc:	e002      	b.n	80110d4 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	3301      	adds	r3, #1
 80110d2:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 80110d4:	4b1f      	ldr	r3, [pc, #124]	; (8011154 <pif_sigTimer1ms+0x16c>)
 80110d6:	789b      	ldrb	r3, [r3, #2]
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	79fa      	ldrb	r2, [r7, #7]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d218      	bcs.n	8011112 <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 80110e0:	4b1c      	ldr	r3, [pc, #112]	; (8011154 <pif_sigTimer1ms+0x16c>)
 80110e2:	2201      	movs	r2, #1
 80110e4:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 80110e6:	4b1b      	ldr	r3, [pc, #108]	; (8011154 <pif_sigTimer1ms+0x16c>)
 80110e8:	785b      	ldrb	r3, [r3, #1]
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	3301      	adds	r3, #1
 80110ee:	b2da      	uxtb	r2, r3
 80110f0:	4b18      	ldr	r3, [pc, #96]	; (8011154 <pif_sigTimer1ms+0x16c>)
 80110f2:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 80110f4:	4b17      	ldr	r3, [pc, #92]	; (8011154 <pif_sigTimer1ms+0x16c>)
 80110f6:	785b      	ldrb	r3, [r3, #1]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	2b0c      	cmp	r3, #12
 80110fc:	d909      	bls.n	8011112 <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 80110fe:	4b15      	ldr	r3, [pc, #84]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011100:	2201      	movs	r2, #1
 8011102:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8011104:	4b13      	ldr	r3, [pc, #76]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	b2db      	uxtb	r3, r3
 801110a:	3301      	adds	r3, #1
 801110c:	b2da      	uxtb	r2, r3
 801110e:	4b11      	ldr	r3, [pc, #68]	; (8011154 <pif_sigTimer1ms+0x16c>)
 8011110:	701a      	strb	r2, [r3, #0]
    				}
    			}
    		}

#ifdef __PIF_DEBUG__
        	pif_performance.__state |= 4;
 8011112:	4b12      	ldr	r3, [pc, #72]	; (801115c <pif_sigTimer1ms+0x174>)
 8011114:	795b      	ldrb	r3, [r3, #5]
 8011116:	f043 0304 	orr.w	r3, r3, #4
 801111a:	b2da      	uxtb	r2, r3
 801111c:	4b0f      	ldr	r3, [pc, #60]	; (801115c <pif_sigTimer1ms+0x174>)
 801111e:	715a      	strb	r2, [r3, #5]
#endif			
    	}

    	pif_performance.__state |= 2;
 8011120:	4b0e      	ldr	r3, [pc, #56]	; (801115c <pif_sigTimer1ms+0x174>)
 8011122:	795b      	ldrb	r3, [r3, #5]
 8011124:	f043 0302 	orr.w	r3, r3, #2
 8011128:	b2da      	uxtb	r2, r3
 801112a:	4b0c      	ldr	r3, [pc, #48]	; (801115c <pif_sigTimer1ms+0x174>)
 801112c:	715a      	strb	r2, [r3, #5]
    }

   	pif_performance.__state |= 1;
 801112e:	4b0b      	ldr	r3, [pc, #44]	; (801115c <pif_sigTimer1ms+0x174>)
 8011130:	795b      	ldrb	r3, [r3, #5]
 8011132:	f043 0301 	orr.w	r3, r3, #1
 8011136:	b2da      	uxtb	r2, r3
 8011138:	4b08      	ldr	r3, [pc, #32]	; (801115c <pif_sigTimer1ms+0x174>)
 801113a:	715a      	strb	r2, [r3, #5]
}
 801113c:	bf00      	nop
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr
 8011148:	20001c6c 	.word	0x20001c6c
 801114c:	20001c5c 	.word	0x20001c5c
 8011150:	20001c60 	.word	0x20001c60
 8011154:	20001c64 	.word	0x20001c64
 8011158:	080296a4 	.word	0x080296a4
 801115c:	20001c70 	.word	0x20001c70

08011160 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	4603      	mov	r3, r0
 8011168:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 801116a:	4b0a      	ldr	r3, [pc, #40]	; (8011194 <pif_Delay1ms+0x34>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 8011170:	4b08      	ldr	r3, [pc, #32]	; (8011194 <pif_Delay1ms+0x34>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	b29a      	uxth	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	b29b      	uxth	r3, r3
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 801117e:	897a      	ldrh	r2, [r7, #10]
 8011180:	88fb      	ldrh	r3, [r7, #6]
 8011182:	429a      	cmp	r2, r3
 8011184:	d3f4      	bcc.n	8011170 <pif_Delay1ms+0x10>
}
 8011186:	bf00      	nop
 8011188:	bf00      	nop
 801118a:	3714      	adds	r7, #20
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	20001c6c 	.word	0x20001c6c

08011198 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	4603      	mov	r3, r0
 80111a0:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 80111a2:	4b0b      	ldr	r3, [pc, #44]	; (80111d0 <pif_Delay1us+0x38>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4798      	blx	r3
 80111a8:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 80111aa:	4b09      	ldr	r3, [pc, #36]	; (80111d0 <pif_Delay1us+0x38>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4798      	blx	r3
 80111b0:	4603      	mov	r3, r0
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80111bc:	897a      	ldrh	r2, [r7, #10]
 80111be:	88fb      	ldrh	r3, [r7, #6]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d3f2      	bcc.n	80111aa <pif_Delay1us+0x12>
}
 80111c4:	bf00      	nop
 80111c6:	bf00      	nop
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	20001c7c 	.word	0x20001c7c

080111d4 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b089      	sub	sp, #36	; 0x24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	4613      	mov	r3, r2
 80111e0:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 80111e6:	88fb      	ldrh	r3, [r7, #6]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d01b      	beq.n	8011224 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 80111ec:	88fb      	ldrh	r3, [r7, #6]
 80111ee:	3b01      	subs	r3, #1
 80111f0:	61fb      	str	r3, [r7, #28]
 80111f2:	e013      	b.n	801121c <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 80111f4:	68ba      	ldr	r2, [r7, #8]
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	fa22 f303 	lsr.w	r3, r2, r3
 80111fc:	b2db      	uxtb	r3, r3
 80111fe:	f003 0301 	and.w	r3, r3, #1
 8011202:	b2da      	uxtb	r2, r3
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	1c59      	adds	r1, r3, #1
 8011208:	61b9      	str	r1, [r7, #24]
 801120a:	4619      	mov	r1, r3
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	440b      	add	r3, r1
 8011210:	3230      	adds	r2, #48	; 0x30
 8011212:	b2d2      	uxtb	r2, r2
 8011214:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	3b01      	subs	r3, #1
 801121a:	61fb      	str	r3, [r7, #28]
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	2b00      	cmp	r3, #0
 8011220:	dae8      	bge.n	80111f4 <pif_BinToString+0x20>
 8011222:	e030      	b.n	8011286 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d025      	beq.n	8011276 <pif_BinToString+0xa2>
    	first = TRUE;
 801122a:	2301      	movs	r3, #1
 801122c:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 801122e:	231f      	movs	r3, #31
 8011230:	61fb      	str	r3, [r7, #28]
 8011232:	e01c      	b.n	801126e <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	fa22 f303 	lsr.w	r3, r2, r3
 801123c:	f003 0301 	and.w	r3, r3, #1
 8011240:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 8011242:	7dfb      	ldrb	r3, [r7, #23]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d002      	beq.n	801124e <pif_BinToString+0x7a>
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d00c      	beq.n	8011268 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	b2da      	uxtb	r2, r3
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	1c59      	adds	r1, r3, #1
 8011256:	61b9      	str	r1, [r7, #24]
 8011258:	4619      	mov	r1, r3
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	440b      	add	r3, r1
 801125e:	3230      	adds	r2, #48	; 0x30
 8011260:	b2d2      	uxtb	r2, r2
 8011262:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011264:	2300      	movs	r3, #0
 8011266:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	3b01      	subs	r3, #1
 801126c:	61fb      	str	r3, [r7, #28]
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	2b00      	cmp	r3, #0
 8011272:	dadf      	bge.n	8011234 <pif_BinToString+0x60>
 8011274:	e007      	b.n	8011286 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	1c5a      	adds	r2, r3, #1
 801127a:	61ba      	str	r2, [r7, #24]
 801127c:	461a      	mov	r2, r3
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	4413      	add	r3, r2
 8011282:	2230      	movs	r2, #48	; 0x30
 8011284:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011286:	69bb      	ldr	r3, [r7, #24]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3724      	adds	r7, #36	; 0x24
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011294:	b480      	push	{r7}
 8011296:	b08d      	sub	sp, #52	; 0x34
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	4613      	mov	r3, r2
 80112a0:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 80112aa:	2300      	movs	r3, #0
 80112ac:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80112b2:	4a43      	ldr	r2, [pc, #268]	; (80113c0 <pif_DecToString+0x12c>)
 80112b4:	f107 0314 	add.w	r3, r7, #20
 80112b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80112ba:	c303      	stmia	r3!, {r0, r1}
 80112bc:	801a      	strh	r2, [r3, #0]
 80112be:	3302      	adds	r3, #2
 80112c0:	0c12      	lsrs	r2, r2, #16
 80112c2:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 80112c8:	6a3b      	ldr	r3, [r7, #32]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d05e      	beq.n	801138c <pif_DecToString+0xf8>
        while (tmp_val) {
 80112ce:	e02c      	b.n	801132a <pif_DecToString+0x96>
        	exp_cnt++;
 80112d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112d2:	3301      	adds	r3, #1
 80112d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 80112d6:	6a3b      	ldr	r3, [r7, #32]
 80112d8:	2b09      	cmp	r3, #9
 80112da:	d914      	bls.n	8011306 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 80112dc:	6a39      	ldr	r1, [r7, #32]
 80112de:	4b39      	ldr	r3, [pc, #228]	; (80113c4 <pif_DecToString+0x130>)
 80112e0:	fba3 2301 	umull	r2, r3, r3, r1
 80112e4:	08da      	lsrs	r2, r3, #3
 80112e6:	4613      	mov	r3, r2
 80112e8:	009b      	lsls	r3, r3, #2
 80112ea:	4413      	add	r3, r2
 80112ec:	005b      	lsls	r3, r3, #1
 80112ee:	1aca      	subs	r2, r1, r3
 80112f0:	b2d2      	uxtb	r2, r2
 80112f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f4:	1c59      	adds	r1, r3, #1
 80112f6:	6279      	str	r1, [r7, #36]	; 0x24
 80112f8:	3230      	adds	r2, #48	; 0x30
 80112fa:	b2d2      	uxtb	r2, r2
 80112fc:	3330      	adds	r3, #48	; 0x30
 80112fe:	443b      	add	r3, r7
 8011300:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011304:	e00b      	b.n	801131e <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011306:	6a3b      	ldr	r3, [r7, #32]
 8011308:	b2da      	uxtb	r2, r3
 801130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130c:	1c59      	adds	r1, r3, #1
 801130e:	6279      	str	r1, [r7, #36]	; 0x24
 8011310:	3230      	adds	r2, #48	; 0x30
 8011312:	b2d2      	uxtb	r2, r2
 8011314:	3330      	adds	r3, #48	; 0x30
 8011316:	443b      	add	r3, r7
 8011318:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 801131c:	e008      	b.n	8011330 <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 801131e:	6a3b      	ldr	r3, [r7, #32]
 8011320:	4a28      	ldr	r2, [pc, #160]	; (80113c4 <pif_DecToString+0x130>)
 8011322:	fba2 2303 	umull	r2, r3, r2, r3
 8011326:	08db      	lsrs	r3, r3, #3
 8011328:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 801132a:	6a3b      	ldr	r3, [r7, #32]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d1cf      	bne.n	80112d0 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 8011330:	88fb      	ldrh	r3, [r7, #6]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d026      	beq.n	8011384 <pif_DecToString+0xf0>
 8011336:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011338:	88fb      	ldrh	r3, [r7, #6]
 801133a:	429a      	cmp	r2, r3
 801133c:	d222      	bcs.n	8011384 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 801133e:	88fa      	ldrh	r2, [r7, #6]
 8011340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011346:	e00a      	b.n	801135e <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 8011348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134a:	1c5a      	adds	r2, r3, #1
 801134c:	62ba      	str	r2, [r7, #40]	; 0x28
 801134e:	461a      	mov	r2, r3
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	4413      	add	r3, r2
 8011354:	2230      	movs	r2, #48	; 0x30
 8011356:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 8011358:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801135a:	3b01      	subs	r3, #1
 801135c:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 801135e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1f1      	bne.n	8011348 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 8011364:	e00e      	b.n	8011384 <pif_DecToString+0xf0>
            idx_inv--;
 8011366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011368:	3b01      	subs	r3, #1
 801136a:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 801136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	62ba      	str	r2, [r7, #40]	; 0x28
 8011372:	461a      	mov	r2, r3
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	4413      	add	r3, r2
 8011378:	f107 0114 	add.w	r1, r7, #20
 801137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801137e:	440a      	add	r2, r1
 8011380:	7812      	ldrb	r2, [r2, #0]
 8011382:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 8011384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1ed      	bne.n	8011366 <pif_DecToString+0xd2>
 801138a:	e012      	b.n	80113b2 <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 801138c:	88fb      	ldrh	r3, [r7, #6]
 801138e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 8011390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	62ba      	str	r2, [r7, #40]	; 0x28
 8011396:	461a      	mov	r2, r3
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	4413      	add	r3, r2
 801139c:	2230      	movs	r2, #48	; 0x30
 801139e:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 80113a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d002      	beq.n	80113ac <pif_DecToString+0x118>
 80113a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113a8:	3b01      	subs	r3, #1
 80113aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 80113ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d1ee      	bne.n	8011390 <pif_DecToString+0xfc>
    }
    return idx;
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3734      	adds	r7, #52	; 0x34
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	08027894 	.word	0x08027894
 80113c4:	cccccccd 	.word	0xcccccccd

080113c8 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b08b      	sub	sp, #44	; 0x2c
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	4611      	mov	r1, r2
 80113d4:	461a      	mov	r2, r3
 80113d6:	460b      	mov	r3, r1
 80113d8:	80fb      	strh	r3, [r7, #6]
 80113da:	4613      	mov	r3, r2
 80113dc:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 80113de:	2300      	movs	r3, #0
 80113e0:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 80113e2:	797b      	ldrb	r3, [r7, #5]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <pif_HexToString+0x26>
 80113e8:	4b2f      	ldr	r3, [pc, #188]	; (80114a8 <pif_HexToString+0xe0>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	e001      	b.n	80113f2 <pif_HexToString+0x2a>
 80113ee:	4b2f      	ldr	r3, [pc, #188]	; (80114ac <pif_HexToString+0xe4>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 80113f4:	88fb      	ldrh	r3, [r7, #6]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d01d      	beq.n	8011436 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 80113fa:	88fb      	ldrh	r3, [r7, #6]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	627b      	str	r3, [r7, #36]	; 0x24
 8011402:	e014      	b.n	801142e <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011404:	68ba      	ldr	r2, [r7, #8]
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	fa22 f303 	lsr.w	r3, r2, r3
 801140c:	f003 030f 	and.w	r3, r3, #15
 8011410:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011412:	69ba      	ldr	r2, [r7, #24]
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	441a      	add	r2, r3
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	1c59      	adds	r1, r3, #1
 801141c:	6239      	str	r1, [r7, #32]
 801141e:	4619      	mov	r1, r3
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	440b      	add	r3, r1
 8011424:	7812      	ldrb	r2, [r2, #0]
 8011426:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142a:	3b04      	subs	r3, #4
 801142c:	627b      	str	r3, [r7, #36]	; 0x24
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	2b00      	cmp	r3, #0
 8011432:	dae7      	bge.n	8011404 <pif_HexToString+0x3c>
 8011434:	e030      	b.n	8011498 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d025      	beq.n	8011488 <pif_HexToString+0xc0>
    	first = TRUE;
 801143c:	2301      	movs	r3, #1
 801143e:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011440:	231c      	movs	r3, #28
 8011442:	627b      	str	r3, [r7, #36]	; 0x24
 8011444:	e01c      	b.n	8011480 <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 8011446:	68ba      	ldr	r2, [r7, #8]
 8011448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144a:	fa22 f303 	lsr.w	r3, r2, r3
 801144e:	f003 030f 	and.w	r3, r3, #15
 8011452:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 8011454:	7ffb      	ldrb	r3, [r7, #31]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d002      	beq.n	8011460 <pif_HexToString+0x98>
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00c      	beq.n	801147a <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 8011460:	69ba      	ldr	r2, [r7, #24]
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	441a      	add	r2, r3
 8011466:	6a3b      	ldr	r3, [r7, #32]
 8011468:	1c59      	adds	r1, r3, #1
 801146a:	6239      	str	r1, [r7, #32]
 801146c:	4619      	mov	r1, r3
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	440b      	add	r3, r1
 8011472:	7812      	ldrb	r2, [r2, #0]
 8011474:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 8011476:	2300      	movs	r3, #0
 8011478:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 801147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147c:	3b04      	subs	r3, #4
 801147e:	627b      	str	r3, [r7, #36]	; 0x24
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	2b00      	cmp	r3, #0
 8011484:	dadf      	bge.n	8011446 <pif_HexToString+0x7e>
 8011486:	e007      	b.n	8011498 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 8011488:	6a3b      	ldr	r3, [r7, #32]
 801148a:	1c5a      	adds	r2, r3, #1
 801148c:	623a      	str	r2, [r7, #32]
 801148e:	461a      	mov	r2, r3
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	4413      	add	r3, r2
 8011494:	2230      	movs	r2, #48	; 0x30
 8011496:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 8011498:	6a3b      	ldr	r3, [r7, #32]
}
 801149a:	4618      	mov	r0, r3
 801149c:	372c      	adds	r7, #44	; 0x2c
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	20000120 	.word	0x20000120
 80114ac:	20000124 	.word	0x20000124

080114b0 <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 80114b0:	b5b0      	push	{r4, r5, r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	ed87 0b00 	vstr	d0, [r7]
 80114bc:	460b      	mov	r3, r1
 80114be:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 80114c0:	2300      	movs	r3, #0
 80114c2:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 80114c4:	f04f 0200 	mov.w	r2, #0
 80114c8:	f04f 0300 	mov.w	r3, #0
 80114cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80114d0:	f7ef fab8 	bl	8000a44 <__aeabi_dcmplt>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00d      	beq.n	80114f6 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 80114da:	8abb      	ldrh	r3, [r7, #20]
 80114dc:	1c5a      	adds	r2, r3, #1
 80114de:	82ba      	strh	r2, [r7, #20]
 80114e0:	461a      	mov	r2, r3
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	4413      	add	r3, r2
 80114e6:	222d      	movs	r2, #45	; 0x2d
 80114e8:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 80114ea:	683c      	ldr	r4, [r7, #0]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80114f2:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 80114f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80114fa:	f7ef faf3 	bl	8000ae4 <__aeabi_d2uiz>
 80114fe:	4603      	mov	r3, r0
 8011500:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 8011502:	8abb      	ldrh	r3, [r7, #20]
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	4413      	add	r3, r2
 8011508:	2200      	movs	r2, #0
 801150a:	6939      	ldr	r1, [r7, #16]
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff fec1 	bl	8011294 <pif_DecToString>
 8011512:	4603      	mov	r3, r0
 8011514:	b29a      	uxth	r2, r3
 8011516:	8abb      	ldrh	r3, [r7, #20]
 8011518:	4413      	add	r3, r2
 801151a:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 801151c:	8abb      	ldrh	r3, [r7, #20]
 801151e:	1c5a      	adds	r2, r3, #1
 8011520:	82ba      	strh	r2, [r7, #20]
 8011522:	461a      	mov	r2, r3
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	4413      	add	r3, r2
 8011528:	222e      	movs	r2, #46	; 0x2e
 801152a:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 801152c:	897b      	ldrh	r3, [r7, #10]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d101      	bne.n	8011536 <pif_FloatToString+0x86>
 8011532:	2306      	movs	r3, #6
 8011534:	817b      	strh	r3, [r7, #10]
	value -= num;
 8011536:	6938      	ldr	r0, [r7, #16]
 8011538:	f7ee ff98 	bl	800046c <__aeabi_ui2d>
 801153c:	4602      	mov	r2, r0
 801153e:	460b      	mov	r3, r1
 8011540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011544:	f7ee fe54 	bl	80001f0 <__aeabi_dsub>
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 8011550:	2300      	movs	r3, #0
 8011552:	82fb      	strh	r3, [r7, #22]
 8011554:	e00d      	b.n	8011572 <pif_FloatToString+0xc2>
 8011556:	f04f 0200 	mov.w	r2, #0
 801155a:	4b13      	ldr	r3, [pc, #76]	; (80115a8 <pif_FloatToString+0xf8>)
 801155c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011560:	f7ee fffe 	bl	8000560 <__aeabi_dmul>
 8011564:	4602      	mov	r2, r0
 8011566:	460b      	mov	r3, r1
 8011568:	e9c7 2300 	strd	r2, r3, [r7]
 801156c:	8afb      	ldrh	r3, [r7, #22]
 801156e:	3301      	adds	r3, #1
 8011570:	82fb      	strh	r3, [r7, #22]
 8011572:	8afa      	ldrh	r2, [r7, #22]
 8011574:	897b      	ldrh	r3, [r7, #10]
 8011576:	429a      	cmp	r2, r3
 8011578:	d3ed      	bcc.n	8011556 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 801157a:	8abb      	ldrh	r3, [r7, #20]
 801157c:	68fa      	ldr	r2, [r7, #12]
 801157e:	18d4      	adds	r4, r2, r3
 8011580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011584:	f7ef faae 	bl	8000ae4 <__aeabi_d2uiz>
 8011588:	4601      	mov	r1, r0
 801158a:	897b      	ldrh	r3, [r7, #10]
 801158c:	461a      	mov	r2, r3
 801158e:	4620      	mov	r0, r4
 8011590:	f7ff fe80 	bl	8011294 <pif_DecToString>
 8011594:	4603      	mov	r3, r0
 8011596:	b29a      	uxth	r2, r3
 8011598:	8abb      	ldrh	r3, [r7, #20]
 801159a:	4413      	add	r3, r2
 801159c:	82bb      	strh	r3, [r7, #20]
    return idx;
 801159e:	8abb      	ldrh	r3, [r7, #20]
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3718      	adds	r7, #24
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bdb0      	pop	{r4, r5, r7, pc}
 80115a8:	40240000 	.word	0x40240000

080115ac <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b08c      	sub	sp, #48	; 0x30
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 80115b8:	2300      	movs	r3, #0
 80115ba:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 80115bc:	e242      	b.n	8011a44 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	2b25      	cmp	r3, #37	; 0x25
 80115c4:	f040 8230 	bne.w	8011a28 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	3301      	adds	r3, #1
 80115d6:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	3b25      	subs	r3, #37	; 0x25
 80115de:	2b53      	cmp	r3, #83	; 0x53
 80115e0:	f200 822d 	bhi.w	8011a3e <pif_PrintFormat+0x492>
 80115e4:	a201      	add	r2, pc, #4	; (adr r2, 80115ec <pif_PrintFormat+0x40>)
 80115e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ea:	bf00      	nop
 80115ec:	08011a17 	.word	0x08011a17
 80115f0:	08011a3f 	.word	0x08011a3f
 80115f4:	08011a3f 	.word	0x08011a3f
 80115f8:	08011a3f 	.word	0x08011a3f
 80115fc:	08011a3f 	.word	0x08011a3f
 8011600:	08011a3f 	.word	0x08011a3f
 8011604:	08011a3f 	.word	0x08011a3f
 8011608:	08011a3f 	.word	0x08011a3f
 801160c:	08011a3f 	.word	0x08011a3f
 8011610:	08011a3f 	.word	0x08011a3f
 8011614:	08011a3f 	.word	0x08011a3f
 8011618:	0801173d 	.word	0x0801173d
 801161c:	0801173d 	.word	0x0801173d
 8011620:	0801173d 	.word	0x0801173d
 8011624:	0801173d 	.word	0x0801173d
 8011628:	0801173d 	.word	0x0801173d
 801162c:	0801173d 	.word	0x0801173d
 8011630:	0801173d 	.word	0x0801173d
 8011634:	0801173d 	.word	0x0801173d
 8011638:	0801173d 	.word	0x0801173d
 801163c:	0801173d 	.word	0x0801173d
 8011640:	08011a3f 	.word	0x08011a3f
 8011644:	08011a3f 	.word	0x08011a3f
 8011648:	08011a3f 	.word	0x08011a3f
 801164c:	08011a3f 	.word	0x08011a3f
 8011650:	08011a3f 	.word	0x08011a3f
 8011654:	08011a3f 	.word	0x08011a3f
 8011658:	08011a3f 	.word	0x08011a3f
 801165c:	08011a3f 	.word	0x08011a3f
 8011660:	08011a3f 	.word	0x08011a3f
 8011664:	08011a3f 	.word	0x08011a3f
 8011668:	08011a3f 	.word	0x08011a3f
 801166c:	08011a3f 	.word	0x08011a3f
 8011670:	08011a3f 	.word	0x08011a3f
 8011674:	08011a3f 	.word	0x08011a3f
 8011678:	08011a3f 	.word	0x08011a3f
 801167c:	08011a3f 	.word	0x08011a3f
 8011680:	08011a3f 	.word	0x08011a3f
 8011684:	08011a3f 	.word	0x08011a3f
 8011688:	08011a3f 	.word	0x08011a3f
 801168c:	08011a3f 	.word	0x08011a3f
 8011690:	08011a3f 	.word	0x08011a3f
 8011694:	08011a3f 	.word	0x08011a3f
 8011698:	08011a3f 	.word	0x08011a3f
 801169c:	08011a3f 	.word	0x08011a3f
 80116a0:	08011a3f 	.word	0x08011a3f
 80116a4:	08011a3f 	.word	0x08011a3f
 80116a8:	08011a3f 	.word	0x08011a3f
 80116ac:	08011a3f 	.word	0x08011a3f
 80116b0:	08011a3f 	.word	0x08011a3f
 80116b4:	08011a3f 	.word	0x08011a3f
 80116b8:	08011913 	.word	0x08011913
 80116bc:	08011a3f 	.word	0x08011a3f
 80116c0:	08011a3f 	.word	0x08011a3f
 80116c4:	08011a3f 	.word	0x08011a3f
 80116c8:	08011a3f 	.word	0x08011a3f
 80116cc:	08011a3f 	.word	0x08011a3f
 80116d0:	08011a3f 	.word	0x08011a3f
 80116d4:	08011a3f 	.word	0x08011a3f
 80116d8:	08011a3f 	.word	0x08011a3f
 80116dc:	08011a3f 	.word	0x08011a3f
 80116e0:	08011763 	.word	0x08011763
 80116e4:	080119f9 	.word	0x080119f9
 80116e8:	080117bb 	.word	0x080117bb
 80116ec:	08011a3f 	.word	0x08011a3f
 80116f0:	0801196b 	.word	0x0801196b
 80116f4:	08011a3f 	.word	0x08011a3f
 80116f8:	08011a3f 	.word	0x08011a3f
 80116fc:	080117bb 	.word	0x080117bb
 8011700:	08011a3f 	.word	0x08011a3f
 8011704:	08011a3f 	.word	0x08011a3f
 8011708:	0801175b 	.word	0x0801175b
 801170c:	08011a3f 	.word	0x08011a3f
 8011710:	08011a3f 	.word	0x08011a3f
 8011714:	08011a3f 	.word	0x08011a3f
 8011718:	08011a3f 	.word	0x08011a3f
 801171c:	08011a3f 	.word	0x08011a3f
 8011720:	08011a3f 	.word	0x08011a3f
 8011724:	080119a1 	.word	0x080119a1
 8011728:	08011a3f 	.word	0x08011a3f
 801172c:	08011863 	.word	0x08011863
 8011730:	08011a3f 	.word	0x08011a3f
 8011734:	08011a3f 	.word	0x08011a3f
 8011738:	080118bb 	.word	0x080118bb
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 801173c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801173e:	461a      	mov	r2, r3
 8011740:	0092      	lsls	r2, r2, #2
 8011742:	4413      	add	r3, r2
 8011744:	005b      	lsls	r3, r3, #1
 8011746:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	b29a      	uxth	r2, r3
 801174e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011750:	4413      	add	r3, r2
 8011752:	b29b      	uxth	r3, r3
 8011754:	3b30      	subs	r3, #48	; 0x30
 8011756:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 8011758:	e73b      	b.n	80115d2 <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 801175a:	2301      	movs	r3, #1
 801175c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 8011760:	e737      	b.n	80115d2 <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 8011762:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011766:	2b00      	cmp	r3, #0
 8011768:	d013      	beq.n	8011792 <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	1d19      	adds	r1, r3, #4
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	6011      	str	r1, [r2, #0]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011778:	6a3b      	ldr	r3, [r7, #32]
 801177a:	68fa      	ldr	r2, [r7, #12]
 801177c:	4413      	add	r3, r2
 801177e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011780:	6979      	ldr	r1, [r7, #20]
 8011782:	4618      	mov	r0, r3
 8011784:	f7ff fd26 	bl	80111d4 <pif_BinToString>
 8011788:	4602      	mov	r2, r0
 801178a:	6a3b      	ldr	r3, [r7, #32]
 801178c:	4413      	add	r3, r2
 801178e:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011790:	e155      	b.n	8011a3e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	1d19      	adds	r1, r3, #4
 8011798:	68ba      	ldr	r2, [r7, #8]
 801179a:	6011      	str	r1, [r2, #0]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	4413      	add	r3, r2
 80117a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80117a8:	69b9      	ldr	r1, [r7, #24]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7ff fd12 	bl	80111d4 <pif_BinToString>
 80117b0:	4602      	mov	r2, r0
 80117b2:	6a3b      	ldr	r3, [r7, #32]
 80117b4:	4413      	add	r3, r2
 80117b6:	623b      	str	r3, [r7, #32]
                    break;
 80117b8:	e141      	b.n	8011a3e <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 80117ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d027      	beq.n	8011812 <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	1d19      	adds	r1, r3, #4
 80117c8:	68ba      	ldr	r2, [r7, #8]
 80117ca:	6011      	str	r1, [r2, #0]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 80117d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	da10      	bge.n	80117f8 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 80117d6:	6a3b      	ldr	r3, [r7, #32]
 80117d8:	1c5a      	adds	r2, r3, #1
 80117da:	623a      	str	r2, [r7, #32]
 80117dc:	461a      	mov	r2, r3
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	4413      	add	r3, r2
 80117e2:	222d      	movs	r2, #45	; 0x2d
 80117e4:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 80117e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e8:	425b      	negs	r3, r3
 80117ea:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 80117ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d002      	beq.n	80117f8 <pif_PrintFormat+0x24c>
 80117f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117f4:	3b01      	subs	r3, #1
 80117f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 80117f8:	6a3b      	ldr	r3, [r7, #32]
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	4413      	add	r3, r2
 80117fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011800:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff fd46 	bl	8011294 <pif_DecToString>
 8011808:	4602      	mov	r2, r0
 801180a:	6a3b      	ldr	r3, [r7, #32]
 801180c:	4413      	add	r3, r2
 801180e:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011810:	e115      	b.n	8011a3e <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	1d19      	adds	r1, r3, #4
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	6011      	str	r1, [r2, #0]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011822:	2b00      	cmp	r3, #0
 8011824:	da10      	bge.n	8011848 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011826:	6a3b      	ldr	r3, [r7, #32]
 8011828:	1c5a      	adds	r2, r3, #1
 801182a:	623a      	str	r2, [r7, #32]
 801182c:	461a      	mov	r2, r3
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	4413      	add	r3, r2
 8011832:	222d      	movs	r2, #45	; 0x2d
 8011834:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	425b      	negs	r3, r3
 801183a:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 801183c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801183e:	2b00      	cmp	r3, #0
 8011840:	d002      	beq.n	8011848 <pif_PrintFormat+0x29c>
 8011842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011844:	3b01      	subs	r3, #1
 8011846:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	4413      	add	r3, r2
 801184e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011850:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011852:	4618      	mov	r0, r3
 8011854:	f7ff fd1e 	bl	8011294 <pif_DecToString>
 8011858:	4602      	mov	r2, r0
 801185a:	6a3b      	ldr	r3, [r7, #32]
 801185c:	4413      	add	r3, r2
 801185e:	623b      	str	r3, [r7, #32]
                    break;
 8011860:	e0ed      	b.n	8011a3e <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 8011862:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011866:	2b00      	cmp	r3, #0
 8011868:	d013      	beq.n	8011892 <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	1d19      	adds	r1, r3, #4
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	6011      	str	r1, [r2, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 8011878:	6a3b      	ldr	r3, [r7, #32]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	4413      	add	r3, r2
 801187e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011880:	6979      	ldr	r1, [r7, #20]
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff fd06 	bl	8011294 <pif_DecToString>
 8011888:	4602      	mov	r2, r0
 801188a:	6a3b      	ldr	r3, [r7, #32]
 801188c:	4413      	add	r3, r2
 801188e:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 8011890:	e0d5      	b.n	8011a3e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	1d19      	adds	r1, r3, #4
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	6011      	str	r1, [r2, #0]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118a8:	69b9      	ldr	r1, [r7, #24]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff fcf2 	bl	8011294 <pif_DecToString>
 80118b0:	4602      	mov	r2, r0
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	4413      	add	r3, r2
 80118b6:	623b      	str	r3, [r7, #32]
                    break;
 80118b8:	e0c1      	b.n	8011a3e <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 80118ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d013      	beq.n	80118ea <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	1d19      	adds	r1, r3, #4
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	6011      	str	r1, [r2, #0]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	68fa      	ldr	r2, [r7, #12]
 80118d4:	18d0      	adds	r0, r2, r3
 80118d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118d8:	2300      	movs	r3, #0
 80118da:	6979      	ldr	r1, [r7, #20]
 80118dc:	f7ff fd74 	bl	80113c8 <pif_HexToString>
 80118e0:	4602      	mov	r2, r0
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	4413      	add	r3, r2
 80118e6:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 80118e8:	e0a9      	b.n	8011a3e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	1d19      	adds	r1, r3, #4
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	6011      	str	r1, [r2, #0]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 80118f8:	6a3b      	ldr	r3, [r7, #32]
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	18d0      	adds	r0, r2, r3
 80118fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011900:	2300      	movs	r3, #0
 8011902:	69b9      	ldr	r1, [r7, #24]
 8011904:	f7ff fd60 	bl	80113c8 <pif_HexToString>
 8011908:	4602      	mov	r2, r0
 801190a:	6a3b      	ldr	r3, [r7, #32]
 801190c:	4413      	add	r3, r2
 801190e:	623b      	str	r3, [r7, #32]
                    break;
 8011910:	e095      	b.n	8011a3e <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011912:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011916:	2b00      	cmp	r3, #0
 8011918:	d013      	beq.n	8011942 <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	1d19      	adds	r1, r3, #4
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	6011      	str	r1, [r2, #0]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011928:	6a3b      	ldr	r3, [r7, #32]
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	18d0      	adds	r0, r2, r3
 801192e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011930:	2301      	movs	r3, #1
 8011932:	6979      	ldr	r1, [r7, #20]
 8011934:	f7ff fd48 	bl	80113c8 <pif_HexToString>
 8011938:	4602      	mov	r2, r0
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	4413      	add	r3, r2
 801193e:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011940:	e07d      	b.n	8011a3e <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	1d19      	adds	r1, r3, #4
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	6011      	str	r1, [r2, #0]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011950:	6a3b      	ldr	r3, [r7, #32]
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	18d0      	adds	r0, r2, r3
 8011956:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011958:	2301      	movs	r3, #1
 801195a:	69b9      	ldr	r1, [r7, #24]
 801195c:	f7ff fd34 	bl	80113c8 <pif_HexToString>
 8011960:	4602      	mov	r2, r0
 8011962:	6a3b      	ldr	r3, [r7, #32]
 8011964:	4413      	add	r3, r2
 8011966:	623b      	str	r3, [r7, #32]
                    break;
 8011968:	e069      	b.n	8011a3e <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	18d0      	adds	r0, r2, r3
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	3307      	adds	r3, #7
 8011976:	f023 0307 	bic.w	r3, r3, #7
 801197a:	f103 0108 	add.w	r1, r3, #8
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	6011      	str	r1, [r2, #0]
 8011982:	ed93 7b00 	vldr	d7, [r3]
 8011986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011988:	4619      	mov	r1, r3
 801198a:	eeb0 0a47 	vmov.f32	s0, s14
 801198e:	eef0 0a67 	vmov.f32	s1, s15
 8011992:	f7ff fd8d 	bl	80114b0 <pif_FloatToString>
 8011996:	4602      	mov	r2, r0
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	4413      	add	r3, r2
 801199c:	623b      	str	r3, [r7, #32]
                    break;
 801199e:	e04e      	b.n	8011a3e <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	1d19      	adds	r1, r3, #4
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	6011      	str	r1, [r2, #0]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d043      	beq.n	8011a3c <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 80119b4:	6938      	ldr	r0, [r7, #16]
 80119b6:	f7ee fc0f 	bl	80001d8 <strlen>
 80119ba:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 80119bc:	6a3a      	ldr	r2, [r7, #32]
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	4413      	add	r3, r2
 80119c2:	2b4e      	cmp	r3, #78	; 0x4e
 80119c4:	d807      	bhi.n	80119d6 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	68fa      	ldr	r2, [r7, #12]
 80119ca:	4413      	add	r3, r2
 80119cc:	6939      	ldr	r1, [r7, #16]
 80119ce:	4618      	mov	r0, r3
 80119d0:	f011 fc78 	bl	80232c4 <strcpy>
 80119d4:	e00b      	b.n	80119ee <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 80119dc:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 80119de:	6a3b      	ldr	r3, [r7, #32]
 80119e0:	68fa      	ldr	r2, [r7, #12]
 80119e2:	4413      	add	r3, r2
 80119e4:	69fa      	ldr	r2, [r7, #28]
 80119e6:	6939      	ldr	r1, [r7, #16]
 80119e8:	4618      	mov	r0, r3
 80119ea:	f011 fc95 	bl	8023318 <strncpy>
						}
						offset += size;
 80119ee:	6a3a      	ldr	r2, [r7, #32]
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	4413      	add	r3, r2
 80119f4:	623b      	str	r3, [r7, #32]
                    }
                    break;
 80119f6:	e021      	b.n	8011a3c <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	1d19      	adds	r1, r3, #4
 80119fe:	68ba      	ldr	r2, [r7, #8]
 8011a00:	6011      	str	r1, [r2, #0]
 8011a02:	6819      	ldr	r1, [r3, #0]
 8011a04:	6a3b      	ldr	r3, [r7, #32]
 8011a06:	1c5a      	adds	r2, r3, #1
 8011a08:	623a      	str	r2, [r7, #32]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	4413      	add	r3, r2
 8011a10:	b2ca      	uxtb	r2, r1
 8011a12:	701a      	strb	r2, [r3, #0]
                    break;
 8011a14:	e013      	b.n	8011a3e <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	1c5a      	adds	r2, r3, #1
 8011a1a:	623a      	str	r2, [r7, #32]
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	4413      	add	r3, r2
 8011a22:	2225      	movs	r2, #37	; 0x25
 8011a24:	701a      	strb	r2, [r3, #0]
                    break;
 8011a26:	e00a      	b.n	8011a3e <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011a28:	6a3b      	ldr	r3, [r7, #32]
 8011a2a:	1c5a      	adds	r2, r3, #1
 8011a2c:	623a      	str	r2, [r7, #32]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	4413      	add	r3, r2
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	7812      	ldrb	r2, [r2, #0]
 8011a38:	701a      	strb	r2, [r3, #0]
 8011a3a:	e000      	b.n	8011a3e <pif_PrintFormat+0x492>
                    break;
 8011a3c:	bf00      	nop
        }
        p_format = p_format + 1;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3301      	adds	r3, #1
 8011a42:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f47f adb8 	bne.w	80115be <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011a4e:	6a3b      	ldr	r3, [r7, #32]
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	4413      	add	r3, r2
 8011a54:	2200      	movs	r2, #0
 8011a56:	701a      	strb	r2, [r3, #0]
}
 8011a58:	bf00      	nop
 8011a5a:	3730      	adds	r7, #48	; 0x30
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011a60:	b40e      	push	{r1, r2, r3}
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b085      	sub	sp, #20
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011a6a:	f107 0320 	add.w	r3, r7, #32
 8011a6e:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011a70:	f107 030c 	add.w	r3, r7, #12
 8011a74:	69fa      	ldr	r2, [r7, #28]
 8011a76:	4619      	mov	r1, r3
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7ff fd97 	bl	80115ac <pif_PrintFormat>
	va_end(data);
}
 8011a7e:	bf00      	nop
 8011a80:	3714      	adds	r7, #20
 8011a82:	46bd      	mov	sp, r7
 8011a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a88:	b003      	add	sp, #12
 8011a8a:	4770      	bx	lr

08011a8c <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	460a      	mov	r2, r1
 8011a96:	80fb      	strh	r3, [r7, #6]
 8011a98:	4613      	mov	r3, r2
 8011a9a:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011a9c:	797b      	ldrb	r3, [r7, #5]
 8011a9e:	021b      	lsls	r3, r3, #8
 8011aa0:	b21a      	sxth	r2, r3
 8011aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aa6:	4053      	eors	r3, r2
 8011aa8:	b21b      	sxth	r3, r3
 8011aaa:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011aac:	2300      	movs	r3, #0
 8011aae:	81fb      	strh	r3, [r7, #14]
 8011ab0:	e013      	b.n	8011ada <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	da09      	bge.n	8011ace <pifCrc16_Add+0x42>
 8011aba:	88fb      	ldrh	r3, [r7, #6]
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	b21b      	sxth	r3, r3
 8011ac0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011ac4:	f083 0301 	eor.w	r3, r3, #1
 8011ac8:	b21b      	sxth	r3, r3
 8011aca:	80fb      	strh	r3, [r7, #6]
 8011acc:	e002      	b.n	8011ad4 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011ace:	88fb      	ldrh	r3, [r7, #6]
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011ad4:	89fb      	ldrh	r3, [r7, #14]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	81fb      	strh	r3, [r7, #14]
 8011ada:	89fb      	ldrh	r3, [r7, #14]
 8011adc:	2b07      	cmp	r3, #7
 8011ade:	d9e8      	bls.n	8011ab2 <pifCrc16_Add+0x26>
    }
	return crc;
 8011ae0:	88fb      	ldrh	r3, [r7, #6]
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3714      	adds	r7, #20
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	460b      	mov	r3, r1
 8011af8:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011afa:	2300      	movs	r3, #0
 8011afc:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011afe:	2300      	movs	r3, #0
 8011b00:	81fb      	strh	r3, [r7, #14]
 8011b02:	e00d      	b.n	8011b20 <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011b04:	89fb      	ldrh	r3, [r7, #14]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	4413      	add	r3, r2
 8011b0a:	781a      	ldrb	r2, [r3, #0]
 8011b0c:	89bb      	ldrh	r3, [r7, #12]
 8011b0e:	4611      	mov	r1, r2
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff ffbb 	bl	8011a8c <pifCrc16_Add>
 8011b16:	4603      	mov	r3, r0
 8011b18:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011b1a:	89fb      	ldrh	r3, [r7, #14]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	81fb      	strh	r3, [r7, #14]
 8011b20:	89fa      	ldrh	r2, [r7, #14]
 8011b22:	887b      	ldrh	r3, [r7, #2]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d3ed      	bcc.n	8011b04 <pifCrc16+0x16>
	}
	return crc;
 8011b28:	89bb      	ldrh	r3, [r7, #12]
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <pifCheckXor>:
	}
	return sum;
}

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011b32:	b480      	push	{r7}
 8011b34:	b085      	sub	sp, #20
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
 8011b3a:	460b      	mov	r3, r1
 8011b3c:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011b42:	2300      	movs	r3, #0
 8011b44:	81fb      	strh	r3, [r7, #14]
 8011b46:	e009      	b.n	8011b5c <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011b48:	89fb      	ldrh	r3, [r7, #14]
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	781a      	ldrb	r2, [r3, #0]
 8011b50:	7b7b      	ldrb	r3, [r7, #13]
 8011b52:	4053      	eors	r3, r2
 8011b54:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011b56:	89fb      	ldrh	r3, [r7, #14]
 8011b58:	3301      	adds	r3, #1
 8011b5a:	81fb      	strh	r3, [r7, #14]
 8011b5c:	89fa      	ldrh	r2, [r7, #14]
 8011b5e:	887b      	ldrh	r3, [r7, #2]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d3f1      	bcc.n	8011b48 <pifCheckXor+0x16>
	}
	return xor;
 8011b64:	7b7b      	ldrb	r3, [r7, #13]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3714      	adds	r7, #20
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr

08011b72 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b082      	sub	sp, #8
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	69db      	ldr	r3, [r3, #28]
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f002 f8a0 	bl	8013cc8 <pifRingBuffer_GetByte>
 8011b88:	4603      	mov	r3, r0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3708      	adds	r7, #8
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b086      	sub	sp, #24
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	60f8      	str	r0, [r7, #12]
 8011b9a:	60b9      	str	r1, [r7, #8]
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	699b      	ldr	r3, [r3, #24]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f001 ff4c 	bl	8013a42 <pifRingBuffer_GetRemainSize>
 8011baa:	4603      	mov	r3, r0
 8011bac:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011bae:	8afb      	ldrh	r3, [r7, #22]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d101      	bne.n	8011bb8 <_actSendData+0x26>
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	e012      	b.n	8011bde <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011bb8:	88fa      	ldrh	r2, [r7, #6]
 8011bba:	8afb      	ldrh	r3, [r7, #22]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d901      	bls.n	8011bc4 <_actSendData+0x32>
 8011bc0:	8afb      	ldrh	r3, [r7, #22]
 8011bc2:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	699b      	ldr	r3, [r3, #24]
 8011bc8:	88fa      	ldrh	r2, [r7, #6]
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f001 ffe3 	bl	8013b98 <pifRingBuffer_PutData>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <_actSendData+0x4a>
		return size;
 8011bd8:	88fb      	ldrh	r3, [r7, #6]
 8011bda:	e000      	b.n	8011bde <_actSendData+0x4c>
	}
	return 0;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3718      	adds	r7, #24
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
	...

08011be8 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d008      	beq.n	8011c0a <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	6892      	ldr	r2, [r2, #8]
 8011c04:	4611      	mov	r1, r2
 8011c06:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011c08:	e025      	b.n	8011c56 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	699b      	ldr	r3, [r3, #24]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d021      	beq.n	8011c56 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011c1a:	4911      	ldr	r1, [pc, #68]	; (8011c60 <_sendData+0x78>)
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	4798      	blx	r3
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d017      	beq.n	8011c56 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d112      	bne.n	8011c56 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2201      	movs	r2, #1
 8011c34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				if (p_owner->act_start_transfer) {
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00a      	beq.n	8011c56 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	68db      	ldr	r3, [r3, #12]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	4798      	blx	r3
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d103      	bne.n	8011c56 <_sendData+0x6e>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2200      	movs	r2, #0
 8011c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8011c56:	bf00      	nop
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	08011b93 	.word	0x08011b93

08011c64 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d104      	bne.n	8011c80 <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011c76:	4b0e      	ldr	r3, [pc, #56]	; (8011cb0 <pifComm_Init+0x4c>)
 8011c78:	2201      	movs	r2, #1
 8011c7a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	e012      	b.n	8011ca6 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011c80:	2234      	movs	r2, #52	; 0x34
 8011c82:	2100      	movs	r1, #0
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f011 f9d9 	bl	802303c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011c8a:	887b      	ldrh	r3, [r7, #2]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d106      	bne.n	8011c9e <pifComm_Init+0x3a>
 8011c90:	4b08      	ldr	r3, [pc, #32]	; (8011cb4 <pifComm_Init+0x50>)
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	1c5a      	adds	r2, r3, #1
 8011c96:	b291      	uxth	r1, r2
 8011c98:	4a06      	ldr	r2, [pc, #24]	; (8011cb4 <pifComm_Init+0x50>)
 8011c9a:	8011      	strh	r1, [r2, #0]
 8011c9c:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	887a      	ldrh	r2, [r7, #2]
 8011ca2:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8011ca4:	2301      	movs	r3, #1
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	20001c55 	.word	0x20001c55
 8011cb4:	2000011c 	.word	0x2000011c

08011cb8 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b082      	sub	sp, #8
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6a1b      	ldr	r3, [r3, #32]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d007      	beq.n	8011cd8 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6a1b      	ldr	r3, [r3, #32]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f002 fd9f 	bl	8014810 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	621a      	str	r2, [r3, #32]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	69db      	ldr	r3, [r3, #28]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d004      	beq.n	8011cea <pifComm_Clear+0x32>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	331c      	adds	r3, #28
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f001 fd6b 	bl	80137c0 <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	699b      	ldr	r3, [r3, #24]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d004      	beq.n	8011cfc <pifComm_Clear+0x44>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	3318      	adds	r3, #24
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f001 fd62 	bl	80137c0 <pifRingBuffer_Destroy>
}
 8011cfc:	bf00      	nop
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	807b      	strh	r3, [r7, #2]
 8011d10:	4613      	mov	r3, r2
 8011d12:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8011d14:	887b      	ldrh	r3, [r7, #2]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d104      	bne.n	8011d24 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8011d1a:	4b1a      	ldr	r3, [pc, #104]	; (8011d84 <pifComm_AllocRxBuffer+0x80>)
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011d20:	2300      	movs	r3, #0
 8011d22:	e02a      	b.n	8011d7a <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8011d24:	887b      	ldrh	r3, [r7, #2]
 8011d26:	4619      	mov	r1, r3
 8011d28:	2000      	movs	r0, #0
 8011d2a:	f001 fd1d 	bl	8013768 <pifRingBuffer_CreateHeap>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_rx_buffer) return FALSE;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	69db      	ldr	r3, [r3, #28]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d101      	bne.n	8011d40 <pifComm_AllocRxBuffer+0x3c>
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	e01c      	b.n	8011d7a <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 8011d40:	787b      	ldrb	r3, [r7, #1]
 8011d42:	2b64      	cmp	r3, #100	; 0x64
 8011d44:	d901      	bls.n	8011d4a <pifComm_AllocRxBuffer+0x46>
 8011d46:	2364      	movs	r3, #100	; 0x64
 8011d48:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 8011d4a:	887b      	ldrh	r3, [r7, #2]
 8011d4c:	2264      	movs	r2, #100	; 0x64
 8011d4e:	fb03 f202 	mul.w	r2, r3, r2
 8011d52:	787b      	ldrb	r3, [r7, #1]
 8011d54:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d58:	b29a      	uxth	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d102      	bne.n	8011d6c <pifComm_AllocRxBuffer+0x68>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	69db      	ldr	r3, [r3, #28]
 8011d70:	4905      	ldr	r1, [pc, #20]	; (8011d88 <pifComm_AllocRxBuffer+0x84>)
 8011d72:	4618      	mov	r0, r3
 8011d74:	f001 fda1 	bl	80138ba <pifRingBuffer_SetName>
    return TRUE;
 8011d78:	2301      	movs	r3, #1
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3708      	adds	r7, #8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	20001c55 	.word	0x20001c55
 8011d88:	080278a0 	.word	0x080278a0

08011d8c <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	460b      	mov	r3, r1
 8011d96:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8011d98:	887b      	ldrh	r3, [r7, #2]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d104      	bne.n	8011da8 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 8011d9e:	4b0f      	ldr	r3, [pc, #60]	; (8011ddc <pifComm_AllocTxBuffer+0x50>)
 8011da0:	2201      	movs	r2, #1
 8011da2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8011da4:	2300      	movs	r3, #0
 8011da6:	e014      	b.n	8011dd2 <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8011da8:	887b      	ldrh	r3, [r7, #2]
 8011daa:	4619      	mov	r1, r3
 8011dac:	2000      	movs	r0, #0
 8011dae:	f001 fcdb 	bl	8013768 <pifRingBuffer_CreateHeap>
 8011db2:	4602      	mov	r2, r0
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	699b      	ldr	r3, [r3, #24]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d101      	bne.n	8011dc4 <pifComm_AllocTxBuffer+0x38>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e006      	b.n	8011dd2 <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	699b      	ldr	r3, [r3, #24]
 8011dc8:	4905      	ldr	r1, [pc, #20]	; (8011de0 <pifComm_AllocTxBuffer+0x54>)
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f001 fd75 	bl	80138ba <pifRingBuffer_SetName>
	return TRUE;
 8011dd0:	2301      	movs	r3, #1
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	20001c55 	.word	0x20001c55
 8011de0:	080278a4 	.word	0x080278a4

08011de4 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	607a      	str	r2, [r7, #4]
 8011df0:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	625a      	str	r2, [r3, #36]	; 0x24
	p_owner->__evt_parsing = evt_parsing;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->__evt_sending = evt_sending;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	683a      	ldr	r2, [r7, #0]
 8011e02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011e04:	bf00      	nop
 8011e06:	3714      	adds	r7, #20
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b083      	sub	sp, #12
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	625a      	str	r2, [r3, #36]	; 0x24
	p_owner->__evt_parsing = NULL;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->__evt_sending = NULL;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011e2a:	bf00      	nop
 8011e2c:	370c      	adds	r7, #12
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr

08011e36 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b082      	sub	sp, #8
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
 8011e3e:	460b      	mov	r3, r1
 8011e40:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	69db      	ldr	r3, [r3, #28]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d101      	bne.n	8011e4e <pifComm_PutRxByte+0x18>
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	e01c      	b.n	8011e88 <pifComm_PutRxByte+0x52>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	69db      	ldr	r3, [r3, #28]
 8011e52:	78fa      	ldrb	r2, [r7, #3]
 8011e54:	4611      	mov	r1, r2
 8011e56:	4618      	mov	r0, r3
 8011e58:	f001 fe6a 	bl	8013b30 <pifRingBuffer_PutByte>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d101      	bne.n	8011e66 <pifComm_PutRxByte+0x30>
 8011e62:	2300      	movs	r3, #0
 8011e64:	e010      	b.n	8011e88 <pifComm_PutRxByte+0x52>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	69db      	ldr	r3, [r3, #28]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f001 fd9e 	bl	80139ac <pifRingBuffer_GetFillSize>
 8011e70:	4603      	mov	r3, r0
 8011e72:	461a      	mov	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d304      	bcc.n	8011e86 <pifComm_PutRxByte+0x50>
		pifTask_SetTrigger(p_owner->_p_task);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6a1b      	ldr	r3, [r3, #32]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f002 fbd7 	bl	8014634 <pifTask_SetTrigger>
	}
	return TRUE;
 8011e86:	2301      	movs	r3, #1
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3708      	adds	r7, #8
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b086      	sub	sp, #24
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	60f8      	str	r0, [r7, #12]
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	699b      	ldr	r3, [r3, #24]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d101      	bne.n	8011ea8 <pifComm_StartGetTxData+0x18>
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	e027      	b.n	8011ef8 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	699b      	ldr	r3, [r3, #24]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f001 fd6a 	bl	8013986 <pifRingBuffer_IsEmpty>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d001      	beq.n	8011ebc <pifComm_StartGetTxData+0x2c>
 8011eb8:	2302      	movs	r3, #2
 8011eba:	e01d      	b.n	8011ef8 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f001 fd07 	bl	80138d6 <pifRingBuffer_GetTailPointer>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	699b      	ldr	r3, [r3, #24]
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f001 fd8b 	bl	80139f0 <pifRingBuffer_GetLinerSize>
 8011eda:	4603      	mov	r3, r0
 8011edc:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d004      	beq.n	8011ef0 <pifComm_StartGetTxData+0x60>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	8afa      	ldrh	r2, [r7, #22]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d802      	bhi.n	8011ef6 <pifComm_StartGetTxData+0x66>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8afa      	ldrh	r2, [r7, #22]
 8011ef4:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8011ef6:	2301      	movs	r3, #1
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3718      	adds	r7, #24
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	460b      	mov	r3, r1
 8011f0a:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	699b      	ldr	r3, [r3, #24]
 8011f10:	887a      	ldrh	r2, [r7, #2]
 8011f12:	4611      	mov	r1, r2
 8011f14:	4618      	mov	r0, r3
 8011f16:	f001 ff48 	bl	8013daa <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	699b      	ldr	r3, [r3, #24]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f001 fd31 	bl	8013986 <pifRingBuffer_IsEmpty>
 8011f24:	4603      	mov	r3, r0
 8011f26:	005b      	lsls	r3, r3, #1
 8011f28:	b2db      	uxtb	r3, r3
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}

08011f32 <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 8011f32:	b580      	push	{r7, lr}
 8011f34:	b082      	sub	sp, #8
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pifTask_SetTrigger(p_owner->_p_task);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f002 fb74 	bl	8014634 <pifTask_SetTrigger>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <_doTask>:
	pifRingBuffer_Empty(p_owner->_p_rx_buffer);
	if (p_owner->evt_abort_rx) (*p_owner->evt_abort_rx)(p_owner->__p_client);
}

static uint16_t _doTask(PifTask* p_task)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d017      	beq.n	8011f9a <_doTask+0x46>
		if (p_owner->act_receive_data) {
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d008      	beq.n	8011f84 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	6852      	ldr	r2, [r2, #4]
 8011f7e:	4611      	mov	r1, r2
 8011f80:	4798      	blx	r3
 8011f82:	e00a      	b.n	8011f9a <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	69db      	ldr	r3, [r3, #28]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d006      	beq.n	8011f9a <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011f94:	4907      	ldr	r1, [pc, #28]	; (8011fb4 <_doTask+0x60>)
 8011f96:	4610      	mov	r0, r2
 8011f98:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d002      	beq.n	8011fa8 <_doTask+0x54>
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f7ff fe20 	bl	8011be8 <_sendData>
	return 0;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	08011b73 	.word	0x08011b73

08011fb8 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start, const char* name)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af02      	add	r7, sp, #8
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	4608      	mov	r0, r1
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	70fb      	strb	r3, [r7, #3]
 8011fca:	460b      	mov	r3, r1
 8011fcc:	803b      	strh	r3, [r7, #0]
 8011fce:	4613      	mov	r3, r2
 8011fd0:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 8011fd2:	8839      	ldrh	r1, [r7, #0]
 8011fd4:	78f8      	ldrb	r0, [r7, #3]
 8011fd6:	78bb      	ldrb	r3, [r7, #2]
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4a0d      	ldr	r2, [pc, #52]	; (8012014 <pifComm_AttachTask+0x5c>)
 8011fde:	f002 fbaf 	bl	8014740 <pifTaskManager_Add>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	621a      	str	r2, [r3, #32]
	if (p_owner->_p_task) {
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6a1b      	ldr	r3, [r3, #32]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00b      	beq.n	8012008 <pifComm_AttachTask+0x50>
		if (name) p_owner->_p_task->name = name;
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d004      	beq.n	8012000 <pifComm_AttachTask+0x48>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	693a      	ldr	r2, [r7, #16]
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	e003      	b.n	8012008 <pifComm_AttachTask+0x50>
		else p_owner->_p_task->name = "Comm";
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6a1b      	ldr	r3, [r3, #32]
 8012004:	4a04      	ldr	r2, [pc, #16]	; (8012018 <pifComm_AttachTask+0x60>)
 8012006:	601a      	str	r2, [r3, #0]
	}
	return p_owner->_p_task;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6a1b      	ldr	r3, [r3, #32]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	08011f55 	.word	0x08011f55
 8012018:	080278a8 	.word	0x080278a8

0801201c <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	4608      	mov	r0, r1
 8012026:	4611      	mov	r1, r2
 8012028:	461a      	mov	r2, r3
 801202a:	4603      	mov	r3, r0
 801202c:	817b      	strh	r3, [r7, #10]
 801202e:	460b      	mov	r3, r1
 8012030:	727b      	strb	r3, [r7, #9]
 8012032:	4613      	mov	r3, r2
 8012034:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d005      	beq.n	8012048 <pifI2cPort_Init+0x2c>
 801203c:	7a7b      	ldrb	r3, [r7, #9]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d002      	beq.n	8012048 <pifI2cPort_Init+0x2c>
 8012042:	88fb      	ldrh	r3, [r7, #6]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d104      	bne.n	8012052 <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 8012048:	4b17      	ldr	r3, [pc, #92]	; (80120a8 <pifI2cPort_Init+0x8c>)
 801204a:	2201      	movs	r2, #1
 801204c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801204e:	2300      	movs	r3, #0
 8012050:	e025      	b.n	801209e <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 8012052:	2230      	movs	r2, #48	; 0x30
 8012054:	2100      	movs	r1, #0
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f010 fff0 	bl	802303c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801205c:	897b      	ldrh	r3, [r7, #10]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d106      	bne.n	8012070 <pifI2cPort_Init+0x54>
 8012062:	4b12      	ldr	r3, [pc, #72]	; (80120ac <pifI2cPort_Init+0x90>)
 8012064:	881b      	ldrh	r3, [r3, #0]
 8012066:	1c5a      	adds	r2, r3, #1
 8012068:	b291      	uxth	r1, r2
 801206a:	4a10      	ldr	r2, [pc, #64]	; (80120ac <pifI2cPort_Init+0x90>)
 801206c:	8011      	strh	r1, [r2, #0]
 801206e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	897a      	ldrh	r2, [r7, #10]
 8012074:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	88fa      	ldrh	r2, [r7, #6]
 801207a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3310      	adds	r3, #16
 8012080:	7a7a      	ldrb	r2, [r7, #9]
 8012082:	210c      	movs	r1, #12
 8012084:	4618      	mov	r0, r3
 8012086:	f000 fae5 	bl	8012654 <pifFixList_Init>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d001      	beq.n	8012094 <pifI2cPort_Init+0x78>
    return TRUE;
 8012090:	2301      	movs	r3, #1
 8012092:	e004      	b.n	801209e <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012094:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 8012096:	68f8      	ldr	r0, [r7, #12]
 8012098:	f000 f80a 	bl	80120b0 <pifI2cPort_Clear>
	return FALSE;
 801209c:	2300      	movs	r3, #0
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	20001c55 	.word	0x20001c55
 80120ac:	2000011c 	.word	0x2000011c

080120b0 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	3310      	adds	r3, #16
 80120bc:	2100      	movs	r1, #0
 80120be:	4618      	mov	r0, r3
 80120c0:	f000 fb28 	bl	8012714 <pifFixList_Clear>
}
 80120c4:	bf00      	nop
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner, uint8_t addr)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	460b      	mov	r3, r1
 80120d6:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d104      	bne.n	80120e8 <pifI2cPort_AddDevice+0x1c>
		pif_error = E_INVALID_PARAM;
 80120de:	4b0f      	ldr	r3, [pc, #60]	; (801211c <pifI2cPort_AddDevice+0x50>)
 80120e0:	2201      	movs	r2, #1
 80120e2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80120e4:	2300      	movs	r3, #0
 80120e6:	e014      	b.n	8012112 <pifI2cPort_AddDevice+0x46>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	3310      	adds	r3, #16
 80120ec:	4618      	mov	r0, r3
 80120ee:	f000 fb44 	bl	801277a <pifFixList_AddFirst>
 80120f2:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d101      	bne.n	80120fe <pifI2cPort_AddDevice+0x32>
 80120fa:	2300      	movs	r3, #0
 80120fc:	e009      	b.n	8012112 <pifI2cPort_AddDevice+0x46>

    p_device->__p_port = p_owner;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	609a      	str	r2, [r3, #8]
	p_device->addr = addr;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	78fa      	ldrb	r2, [r7, #3]
 8012108:	701a      	strb	r2, [r3, #0]
    p_device->timeout = 10;		// 10ms
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	220a      	movs	r2, #10
 801210e:	805a      	strh	r2, [r3, #2]
    return p_device;
 8012110:	68fb      	ldr	r3, [r7, #12]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	20001c55 	.word	0x20001c55

08012120 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
	if (p_device) {
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d007      	beq.n	8012140 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	3310      	adds	r3, #16
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	4618      	mov	r0, r3
 8012138:	f000 fb53 	bl	80127e2 <pifFixList_Remove>
		p_device = NULL;
 801213c:	2300      	movs	r3, #0
 801213e:	603b      	str	r3, [r7, #0]
	}
}
 8012140:	bf00      	nop
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <pifI2cPort_TemporaryDevice>:

PifI2cDevice* pifI2cPort_TemporaryDevice(PifI2cPort* p_owner, uint8_t addr)
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	460b      	mov	r3, r1
 8012152:	70fb      	strb	r3, [r7, #3]
	static PifI2cDevice device;

	device.__p_port = p_owner;
 8012154:	4a07      	ldr	r2, [pc, #28]	; (8012174 <pifI2cPort_TemporaryDevice+0x2c>)
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6093      	str	r3, [r2, #8]
	device.addr = addr;
 801215a:	4a06      	ldr	r2, [pc, #24]	; (8012174 <pifI2cPort_TemporaryDevice+0x2c>)
 801215c:	78fb      	ldrb	r3, [r7, #3]
 801215e:	7013      	strb	r3, [r2, #0]
	device._state = IS_IDLE;
 8012160:	4b04      	ldr	r3, [pc, #16]	; (8012174 <pifI2cPort_TemporaryDevice+0x2c>)
 8012162:	2200      	movs	r2, #0
 8012164:	711a      	strb	r2, [r3, #4]
	return &device;
 8012166:	4b03      	ldr	r3, [pc, #12]	; (8012174 <pifI2cPort_TemporaryDevice+0x2c>)
}
 8012168:	4618      	mov	r0, r3
 801216a:	370c      	adds	r7, #12
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr
 8012174:	20001c80 	.word	0x20001c80

08012178 <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 8012178:	b5b0      	push	{r4, r5, r7, lr}
 801217a:	b08c      	sub	sp, #48	; 0x30
 801217c:	af02      	add	r7, sp, #8
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	603b      	str	r3, [r7, #0]
 8012184:	4613      	mov	r3, r2
 8012186:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	689b      	ldr	r3, [r3, #8]
 801218c:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <pifI2cDevice_Read+0x22>
 8012196:	2300      	movs	r3, #0
 8012198:	e08e      	b.n	80122b8 <pifI2cDevice_Read+0x140>
	if (p_port->__use_device) {
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00f      	beq.n	80121c2 <pifI2cDevice_Read+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	4613      	mov	r3, r2
 80121b4:	226d      	movs	r2, #109	; 0x6d
 80121b6:	4942      	ldr	r1, [pc, #264]	; (80122c0 <pifI2cDevice_Read+0x148>)
 80121b8:	2002      	movs	r0, #2
 80121ba:	f001 f977 	bl	80134ac <pifLog_Printf>
#endif
		return FALSE;
 80121be:	2300      	movs	r3, #0
 80121c0:	e07a      	b.n	80122b8 <pifI2cDevice_Read+0x140>
	}

	p_port->__use_device = p_owner;
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2201      	movs	r2, #1
 80121cc:	711a      	strb	r2, [r3, #4]
	ptr = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 80121d2:	e048      	b.n	8012266 <pifI2cDevice_Read+0xee>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121d8:	461a      	mov	r2, r3
 80121da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121dc:	4293      	cmp	r3, r2
 80121de:	bf28      	it	cs
 80121e0:	4613      	movcs	r3, r2
 80121e2:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	685c      	ldr	r4, [r3, #4]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	7818      	ldrb	r0, [r3, #0]
 80121ec:	68ba      	ldr	r2, [r7, #8]
 80121ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f0:	18d1      	adds	r1, r2, r3
 80121f2:	683a      	ldr	r2, [r7, #0]
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	18d5      	adds	r5, r2, r3
 80121f8:	7efb      	ldrb	r3, [r7, #27]
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	79fa      	ldrb	r2, [r7, #7]
 80121fe:	9300      	str	r3, [sp, #0]
 8012200:	462b      	mov	r3, r5
 8012202:	47a0      	blx	r4
 8012204:	4603      	mov	r3, r0
 8012206:	2b02      	cmp	r3, #2
 8012208:	d021      	beq.n	801224e <pifI2cDevice_Read+0xd6>
 801220a:	2b02      	cmp	r3, #2
 801220c:	dc23      	bgt.n	8012256 <pifI2cDevice_Read+0xde>
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <pifI2cDevice_Read+0x9e>
 8012212:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012214:	e01f      	b.n	8012256 <pifI2cDevice_Read+0xde>
			timer1ms = pif_cumulative_timer1ms;
 8012216:	4b2b      	ldr	r3, [pc, #172]	; (80122c4 <pifI2cDevice_Read+0x14c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 801221c:	e00a      	b.n	8012234 <pifI2cDevice_Read+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801221e:	4b29      	ldr	r3, [pc, #164]	; (80122c4 <pifI2cDevice_Read+0x14c>)
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	8852      	ldrh	r2, [r2, #2]
 801222a:	4293      	cmp	r3, r2
 801222c:	d902      	bls.n	8012234 <pifI2cDevice_Read+0xbc>
					line = __LINE__;
 801222e:	237d      	movs	r3, #125	; 0x7d
 8012230:	623b      	str	r3, [r7, #32]
					goto fail;
 8012232:	e023      	b.n	801227c <pifI2cDevice_Read+0x104>
			while (p_owner->_state == IS_RUN) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	791b      	ldrb	r3, [r3, #4]
 8012238:	b2db      	uxtb	r3, r3
 801223a:	2b01      	cmp	r3, #1
 801223c:	d0ef      	beq.n	801221e <pifI2cDevice_Read+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	791b      	ldrb	r3, [r3, #4]
 8012242:	b2db      	uxtb	r3, r3
 8012244:	2b03      	cmp	r3, #3
 8012246:	d105      	bne.n	8012254 <pifI2cDevice_Read+0xdc>
				line = __LINE__;
 8012248:	2384      	movs	r3, #132	; 0x84
 801224a:	623b      	str	r3, [r7, #32]
				goto fail;
 801224c:	e016      	b.n	801227c <pifI2cDevice_Read+0x104>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 801224e:	238f      	movs	r3, #143	; 0x8f
 8012250:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 8012252:	e013      	b.n	801227c <pifI2cDevice_Read+0x104>
			break;
 8012254:	bf00      	nop
		}
		ptr += len;
 8012256:	7efb      	ldrb	r3, [r7, #27]
 8012258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801225a:	4413      	add	r3, r2
 801225c:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 801225e:	7efb      	ldrb	r3, [r7, #27]
 8012260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012262:	1ad3      	subs	r3, r2, r3
 8012264:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 8012266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1b3      	bne.n	80121d4 <pifI2cDevice_Read+0x5c>
	}
	p_port->__use_device = NULL;
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	2200      	movs	r2, #0
 8012270:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2200      	movs	r2, #0
 8012276:	711a      	strb	r2, [r3, #4]
	return TRUE;
 8012278:	2301      	movs	r3, #1
 801227a:	e01d      	b.n	80122b8 <pifI2cDevice_Read+0x140>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	461a      	mov	r2, r3
 8012282:	4b11      	ldr	r3, [pc, #68]	; (80122c8 <pifI2cDevice_Read+0x150>)
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	9301      	str	r3, [sp, #4]
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	9300      	str	r3, [sp, #0]
 801228c:	4613      	mov	r3, r2
 801228e:	6a3a      	ldr	r2, [r7, #32]
 8012290:	490e      	ldr	r1, [pc, #56]	; (80122cc <pifI2cDevice_Read+0x154>)
 8012292:	2004      	movs	r0, #4
 8012294:	f001 f90a 	bl	80134ac <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 8012298:	69fb      	ldr	r3, [r7, #28]
 801229a:	2200      	movs	r2, #0
 801229c:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 801229e:	69fb      	ldr	r3, [r7, #28]
 80122a0:	881b      	ldrh	r3, [r3, #0]
 80122a2:	3301      	adds	r3, #1
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	711a      	strb	r2, [r3, #4]
	pif_error = E_TRANSFER_FAILED;
 80122b0:	4b05      	ldr	r3, [pc, #20]	; (80122c8 <pifI2cDevice_Read+0x150>)
 80122b2:	220a      	movs	r2, #10
 80122b4:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80122b6:	2300      	movs	r3, #0
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3728      	adds	r7, #40	; 0x28
 80122bc:	46bd      	mov	sp, r7
 80122be:	bdb0      	pop	{r4, r5, r7, pc}
 80122c0:	080278e0 	.word	0x080278e0
 80122c4:	20001c6c 	.word	0x20001c6c
 80122c8:	20001c55 	.word	0x20001c55
 80122cc:	08027900 	.word	0x08027900

080122d0 <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af02      	add	r7, sp, #8
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	460b      	mov	r3, r1
 80122da:	607a      	str	r2, [r7, #4]
 80122dc:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 80122de:	7af9      	ldrb	r1, [r7, #11]
 80122e0:	2301      	movs	r3, #1
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2201      	movs	r2, #1
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f7ff ff45 	bl	8012178 <pifI2cDevice_Read>
 80122ee:	4603      	mov	r3, r0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3710      	adds	r7, #16
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b088      	sub	sp, #32
 80122fc:	af02      	add	r7, sp, #8
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	460b      	mov	r3, r1
 8012302:	607a      	str	r2, [r7, #4]
 8012304:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012306:	7af9      	ldrb	r1, [r7, #11]
 8012308:	f107 0314 	add.w	r3, r7, #20
 801230c:	2202      	movs	r2, #2
 801230e:	9200      	str	r2, [sp, #0]
 8012310:	2201      	movs	r2, #1
 8012312:	68f8      	ldr	r0, [r7, #12]
 8012314:	f7ff ff30 	bl	8012178 <pifI2cDevice_Read>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d101      	bne.n	8012322 <pifI2cDevice_ReadRegWord+0x2a>
 801231e:	2300      	movs	r3, #0
 8012320:	e00a      	b.n	8012338 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 8012322:	7d3b      	ldrb	r3, [r7, #20]
 8012324:	b29b      	uxth	r3, r3
 8012326:	021b      	lsls	r3, r3, #8
 8012328:	b29a      	uxth	r2, r3
 801232a:	7d7b      	ldrb	r3, [r7, #21]
 801232c:	b29b      	uxth	r3, r3
 801232e:	4413      	add	r3, r2
 8012330:	b29a      	uxth	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012336:	2301      	movs	r3, #1
}
 8012338:	4618      	mov	r0, r3
 801233a:	3718      	adds	r7, #24
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af02      	add	r7, sp, #8
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	607a      	str	r2, [r7, #4]
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	460b      	mov	r3, r1
 801234e:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 8012350:	7af9      	ldrb	r1, [r7, #11]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2201      	movs	r2, #1
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f7ff ff0c 	bl	8012178 <pifI2cDevice_Read>
 8012360:	4603      	mov	r3, r0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b088      	sub	sp, #32
 801236e:	af02      	add	r7, sp, #8
 8012370:	60f8      	str	r0, [r7, #12]
 8012372:	607b      	str	r3, [r7, #4]
 8012374:	460b      	mov	r3, r1
 8012376:	72fb      	strb	r3, [r7, #11]
 8012378:	4613      	mov	r3, r2
 801237a:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 801237c:	893b      	ldrh	r3, [r7, #8]
 801237e:	0a1b      	lsrs	r3, r3, #8
 8012380:	b29b      	uxth	r3, r3
 8012382:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 8012384:	893b      	ldrh	r3, [r7, #8]
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2201      	movs	r2, #1
 801238a:	fa02 f303 	lsl.w	r3, r2, r3
 801238e:	b2db      	uxtb	r3, r3
 8012390:	3b01      	subs	r3, #1
 8012392:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 8012394:	7af9      	ldrb	r1, [r7, #11]
 8012396:	f107 0315 	add.w	r3, r7, #21
 801239a:	2201      	movs	r2, #1
 801239c:	9200      	str	r2, [sp, #0]
 801239e:	2201      	movs	r2, #1
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f7ff fee9 	bl	8012178 <pifI2cDevice_Read>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d101      	bne.n	80123b0 <pifI2cDevice_ReadRegBit8+0x46>
 80123ac:	2300      	movs	r3, #0
 80123ae:	e00d      	b.n	80123cc <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80123b0:	7d7b      	ldrb	r3, [r7, #21]
 80123b2:	461a      	mov	r2, r3
 80123b4:	7dfb      	ldrb	r3, [r7, #23]
 80123b6:	fa42 f303 	asr.w	r3, r2, r3
 80123ba:	b25a      	sxtb	r2, r3
 80123bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80123c0:	4013      	ands	r3, r2
 80123c2:	b25b      	sxtb	r3, r3
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80123ca:	2301      	movs	r3, #1
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3718      	adds	r7, #24
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80123d4:	b5b0      	push	{r4, r5, r7, lr}
 80123d6:	b08c      	sub	sp, #48	; 0x30
 80123d8:	af02      	add	r7, sp, #8
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	603b      	str	r3, [r7, #0]
 80123e0:	4613      	mov	r3, r2
 80123e2:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	689b      	ldr	r3, [r3, #8]
 80123e8:	61fb      	str	r3, [r7, #28]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d101      	bne.n	80123f6 <pifI2cDevice_Write+0x22>
 80123f2:	2300      	movs	r3, #0
 80123f4:	e08f      	b.n	8012516 <pifI2cDevice_Write+0x142>
	if (p_port->__use_device) {
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00f      	beq.n	801241e <pifI2cDevice_Write+0x4a>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	461a      	mov	r2, r3
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	b2db      	uxtb	r3, r3
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	4613      	mov	r3, r2
 8012410:	22de      	movs	r2, #222	; 0xde
 8012412:	4943      	ldr	r1, [pc, #268]	; (8012520 <pifI2cDevice_Write+0x14c>)
 8012414:	2002      	movs	r0, #2
 8012416:	f001 f849 	bl	80134ac <pifLog_Printf>
#endif
		return FALSE;
 801241a:	2300      	movs	r3, #0
 801241c:	e07b      	b.n	8012516 <pifI2cDevice_Write+0x142>
	}

	p_port->__use_device = p_owner;
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	68fa      	ldr	r2, [r7, #12]
 8012422:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2201      	movs	r2, #1
 8012428:	711a      	strb	r2, [r3, #4]
	ptr = 0;
 801242a:	2300      	movs	r3, #0
 801242c:	627b      	str	r3, [r7, #36]	; 0x24
	while (size) {
 801242e:	e049      	b.n	80124c4 <pifI2cDevice_Write+0xf0>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012434:	461a      	mov	r2, r3
 8012436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012438:	4293      	cmp	r3, r2
 801243a:	bf28      	it	cs
 801243c:	4613      	movcs	r3, r2
 801243e:	76fb      	strb	r3, [r7, #27]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	689c      	ldr	r4, [r3, #8]
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	7818      	ldrb	r0, [r3, #0]
 8012448:	68ba      	ldr	r2, [r7, #8]
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	18d1      	adds	r1, r2, r3
 801244e:	683a      	ldr	r2, [r7, #0]
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	18d5      	adds	r5, r2, r3
 8012454:	7efb      	ldrb	r3, [r7, #27]
 8012456:	b29b      	uxth	r3, r3
 8012458:	79fa      	ldrb	r2, [r7, #7]
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	462b      	mov	r3, r5
 801245e:	47a0      	blx	r4
 8012460:	4603      	mov	r3, r0
 8012462:	2b02      	cmp	r3, #2
 8012464:	d021      	beq.n	80124aa <pifI2cDevice_Write+0xd6>
 8012466:	2b02      	cmp	r3, #2
 8012468:	dc24      	bgt.n	80124b4 <pifI2cDevice_Write+0xe0>
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <pifI2cDevice_Write+0x9e>
 801246e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012470:	e020      	b.n	80124b4 <pifI2cDevice_Write+0xe0>
			timer1ms = pif_cumulative_timer1ms;
 8012472:	4b2c      	ldr	r3, [pc, #176]	; (8012524 <pifI2cDevice_Write+0x150>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	617b      	str	r3, [r7, #20]
			while (p_owner->_state == IS_RUN) {
 8012478:	e00a      	b.n	8012490 <pifI2cDevice_Write+0xbc>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801247a:	4b2a      	ldr	r3, [pc, #168]	; (8012524 <pifI2cDevice_Write+0x150>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	1ad3      	subs	r3, r2, r3
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	8852      	ldrh	r2, [r2, #2]
 8012486:	4293      	cmp	r3, r2
 8012488:	d902      	bls.n	8012490 <pifI2cDevice_Write+0xbc>
					line = __LINE__;
 801248a:	23ee      	movs	r3, #238	; 0xee
 801248c:	623b      	str	r3, [r7, #32]
					goto fail;
 801248e:	e024      	b.n	80124da <pifI2cDevice_Write+0x106>
			while (p_owner->_state == IS_RUN) {
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	791b      	ldrb	r3, [r3, #4]
 8012494:	b2db      	uxtb	r3, r3
 8012496:	2b01      	cmp	r3, #1
 8012498:	d0ef      	beq.n	801247a <pifI2cDevice_Write+0xa6>
			if (p_owner->_state == IS_ERROR) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	791b      	ldrb	r3, [r3, #4]
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	2b03      	cmp	r3, #3
 80124a2:	d106      	bne.n	80124b2 <pifI2cDevice_Write+0xde>
				line = __LINE__;
 80124a4:	23f5      	movs	r3, #245	; 0xf5
 80124a6:	623b      	str	r3, [r7, #32]
				goto fail;
 80124a8:	e017      	b.n	80124da <pifI2cDevice_Write+0x106>

		case IR_ERROR:
#ifndef __PIF_NO_LOG__
			line = __LINE__;
 80124aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124ae:	623b      	str	r3, [r7, #32]
#endif
			goto fail;
 80124b0:	e013      	b.n	80124da <pifI2cDevice_Write+0x106>
			break;
 80124b2:	bf00      	nop
		}
		ptr += len;
 80124b4:	7efb      	ldrb	r3, [r7, #27]
 80124b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124b8:	4413      	add	r3, r2
 80124ba:	627b      	str	r3, [r7, #36]	; 0x24
		size -= len;
 80124bc:	7efb      	ldrb	r3, [r7, #27]
 80124be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124c0:	1ad3      	subs	r3, r2, r3
 80124c2:	63bb      	str	r3, [r7, #56]	; 0x38
	while (size) {
 80124c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1b2      	bne.n	8012430 <pifI2cDevice_Write+0x5c>
	}
	p_port->__use_device = NULL;
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	2200      	movs	r2, #0
 80124ce:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2200      	movs	r2, #0
 80124d4:	711a      	strb	r2, [r3, #4]
	return TRUE;
 80124d6:	2301      	movs	r3, #1
 80124d8:	e01d      	b.n	8012516 <pifI2cDevice_Write+0x142>

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	461a      	mov	r2, r3
 80124e0:	4b11      	ldr	r3, [pc, #68]	; (8012528 <pifI2cDevice_Write+0x154>)
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	9301      	str	r3, [sp, #4]
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	9300      	str	r3, [sp, #0]
 80124ea:	4613      	mov	r3, r2
 80124ec:	6a3a      	ldr	r2, [r7, #32]
 80124ee:	490f      	ldr	r1, [pc, #60]	; (801252c <pifI2cDevice_Write+0x158>)
 80124f0:	2004      	movs	r0, #4
 80124f2:	f000 ffdb 	bl	80134ac <pifLog_Printf>
#endif
	p_port->__use_device = NULL;
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	2200      	movs	r2, #0
 80124fa:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	3301      	adds	r3, #1
 8012502:	b29a      	uxth	r2, r3
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2200      	movs	r2, #0
 801250c:	711a      	strb	r2, [r3, #4]
	pif_error = E_TRANSFER_FAILED;
 801250e:	4b06      	ldr	r3, [pc, #24]	; (8012528 <pifI2cDevice_Write+0x154>)
 8012510:	220a      	movs	r2, #10
 8012512:	701a      	strb	r2, [r3, #0]
	return FALSE;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3728      	adds	r7, #40	; 0x28
 801251a:	46bd      	mov	sp, r7
 801251c:	bdb0      	pop	{r4, r5, r7, pc}
 801251e:	bf00      	nop
 8012520:	0802791c 	.word	0x0802791c
 8012524:	20001c6c 	.word	0x20001c6c
 8012528:	20001c55 	.word	0x20001c55
 801252c:	0802793c 	.word	0x0802793c

08012530 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af02      	add	r7, sp, #8
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	460b      	mov	r3, r1
 801253a:	70fb      	strb	r3, [r7, #3]
 801253c:	4613      	mov	r3, r2
 801253e:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012540:	78f9      	ldrb	r1, [r7, #3]
 8012542:	1cbb      	adds	r3, r7, #2
 8012544:	2201      	movs	r2, #1
 8012546:	9200      	str	r2, [sp, #0]
 8012548:	2201      	movs	r2, #1
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f7ff ff42 	bl	80123d4 <pifI2cDevice_Write>
 8012550:	4603      	mov	r3, r0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3708      	adds	r7, #8
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
	...

0801255c <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af02      	add	r7, sp, #8
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	4608      	mov	r0, r1
 8012566:	4611      	mov	r1, r2
 8012568:	461a      	mov	r2, r3
 801256a:	4603      	mov	r3, r0
 801256c:	70fb      	strb	r3, [r7, #3]
 801256e:	460b      	mov	r3, r1
 8012570:	803b      	strh	r3, [r7, #0]
 8012572:	4613      	mov	r3, r2
 8012574:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012576:	883b      	ldrh	r3, [r7, #0]
 8012578:	0a1b      	lsrs	r3, r3, #8
 801257a:	b29b      	uxth	r3, r3
 801257c:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 801257e:	883b      	ldrh	r3, [r7, #0]
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2201      	movs	r2, #1
 8012584:	fa02 f303 	lsl.w	r3, r2, r3
 8012588:	b2db      	uxtb	r3, r3
 801258a:	3b01      	subs	r3, #1
 801258c:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 801258e:	78ba      	ldrb	r2, [r7, #2]
 8012590:	7bbb      	ldrb	r3, [r7, #14]
 8012592:	429a      	cmp	r2, r3
 8012594:	d904      	bls.n	80125a0 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 8012596:	4b21      	ldr	r3, [pc, #132]	; (801261c <pifI2cDevice_WriteRegBit8+0xc0>)
 8012598:	2206      	movs	r2, #6
 801259a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801259c:	2300      	movs	r3, #0
 801259e:	e039      	b.n	8012614 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 80125a0:	78f9      	ldrb	r1, [r7, #3]
 80125a2:	f107 030c 	add.w	r3, r7, #12
 80125a6:	2201      	movs	r2, #1
 80125a8:	9200      	str	r2, [sp, #0]
 80125aa:	2201      	movs	r2, #1
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff fde3 	bl	8012178 <pifI2cDevice_Read>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d101      	bne.n	80125bc <pifI2cDevice_WriteRegBit8+0x60>
 80125b8:	2300      	movs	r3, #0
 80125ba:	e02b      	b.n	8012614 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 80125bc:	7b3b      	ldrb	r3, [r7, #12]
 80125be:	461a      	mov	r2, r3
 80125c0:	7bfb      	ldrb	r3, [r7, #15]
 80125c2:	411a      	asrs	r2, r3
 80125c4:	7bbb      	ldrb	r3, [r7, #14]
 80125c6:	401a      	ands	r2, r3
 80125c8:	78bb      	ldrb	r3, [r7, #2]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d021      	beq.n	8012612 <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 80125ce:	7bba      	ldrb	r2, [r7, #14]
 80125d0:	7bfb      	ldrb	r3, [r7, #15]
 80125d2:	fa02 f303 	lsl.w	r3, r2, r3
 80125d6:	b25b      	sxtb	r3, r3
 80125d8:	43db      	mvns	r3, r3
 80125da:	b25a      	sxtb	r2, r3
 80125dc:	7b3b      	ldrb	r3, [r7, #12]
 80125de:	b25b      	sxtb	r3, r3
 80125e0:	4013      	ands	r3, r2
 80125e2:	b25a      	sxtb	r2, r3
 80125e4:	78b9      	ldrb	r1, [r7, #2]
 80125e6:	7bfb      	ldrb	r3, [r7, #15]
 80125e8:	fa01 f303 	lsl.w	r3, r1, r3
 80125ec:	b25b      	sxtb	r3, r3
 80125ee:	4313      	orrs	r3, r2
 80125f0:	b25b      	sxtb	r3, r3
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80125f6:	78f9      	ldrb	r1, [r7, #3]
 80125f8:	f107 030d 	add.w	r3, r7, #13
 80125fc:	2201      	movs	r2, #1
 80125fe:	9200      	str	r2, [sp, #0]
 8012600:	2201      	movs	r2, #1
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ff fee6 	bl	80123d4 <pifI2cDevice_Write>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d101      	bne.n	8012612 <pifI2cDevice_WriteRegBit8+0xb6>
 801260e:	2300      	movs	r3, #0
 8012610:	e000      	b.n	8012614 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 8012612:	2301      	movs	r3, #1
}
 8012614:	4618      	mov	r0, r3
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	20001c55 	.word	0x20001c55

08012620 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	460b      	mov	r3, r1
 801262a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012630:	2b00      	cmp	r3, #0
 8012632:	d009      	beq.n	8012648 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 8012634:	78fb      	ldrb	r3, [r7, #3]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d001      	beq.n	801263e <pifI2cPort_sigEndTransfer+0x1e>
 801263a:	2202      	movs	r2, #2
 801263c:	e000      	b.n	8012640 <pifI2cPort_sigEndTransfer+0x20>
 801263e:	2203      	movs	r2, #3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012644:	711a      	strb	r2, [r3, #4]
 8012646:	e000      	b.n	801264a <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012648:	bf00      	nop
}
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b088      	sub	sp, #32
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d005      	beq.n	8012672 <pifFixList_Init+0x1e>
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d002      	beq.n	8012672 <pifFixList_Init+0x1e>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d104      	bne.n	801267c <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012672:	4b27      	ldr	r3, [pc, #156]	; (8012710 <pifFixList_Init+0xbc>)
 8012674:	2201      	movs	r2, #1
 8012676:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012678:	2300      	movs	r3, #0
 801267a:	e045      	b.n	8012708 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	3308      	adds	r3, #8
 8012680:	687a      	ldr	r2, [r7, #4]
 8012682:	4611      	mov	r1, r2
 8012684:	4618      	mov	r0, r3
 8012686:	f010 fc89 	bl	8022f9c <calloc>
 801268a:	4603      	mov	r3, r0
 801268c:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d033      	beq.n	80126fc <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	69fa      	ldr	r2, [r7, #28]
 8012698:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	68ba      	ldr	r2, [r7, #8]
 801269e:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	2200      	movs	r2, #0
 80126aa:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	68db      	ldr	r3, [r3, #12]
 80126b6:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	69ba      	ldr	r2, [r7, #24]
 80126bc:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 80126be:	2301      	movs	r3, #1
 80126c0:	617b      	str	r3, [r7, #20]
 80126c2:	e00f      	b.n	80126e4 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	3308      	adds	r3, #8
 80126c8:	69fa      	ldr	r2, [r7, #28]
 80126ca:	4413      	add	r3, r2
 80126cc:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	69fa      	ldr	r2, [r7, #28]
 80126d2:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	2200      	movs	r2, #0
 80126d8:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	3301      	adds	r3, #1
 80126e2:	617b      	str	r3, [r7, #20]
 80126e4:	697a      	ldr	r2, [r7, #20]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	dbeb      	blt.n	80126c4 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	2200      	movs	r2, #0
 80126f0:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	2200      	movs	r2, #0
 80126f6:	605a      	str	r2, [r3, #4]

	return TRUE;
 80126f8:	2301      	movs	r3, #1
 80126fa:	e005      	b.n	8012708 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 80126fc:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 80126fe:	2100      	movs	r1, #0
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f000 f807 	bl	8012714 <pifFixList_Clear>
	return FALSE;
 8012706:	2300      	movs	r3, #0
}
 8012708:	4618      	mov	r0, r3
 801270a:	3720      	adds	r7, #32
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}
 8012710:	20001c55 	.word	0x20001c55

08012714 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d01f      	beq.n	8012766 <pifFixList_Clear+0x52>
		if (evt_clear) {
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d014      	beq.n	8012756 <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012732:	e00d      	b.n	8012750 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f103 0208 	add.w	r2, r3, #8
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	4610      	mov	r0, r2
 801273e:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d002      	beq.n	801274c <pifFixList_Clear+0x38>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	e000      	b.n	801274e <pifFixList_Clear+0x3a>
 801274c:	2300      	movs	r3, #0
 801274e:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1ee      	bne.n	8012734 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	4618      	mov	r0, r3
 801275c:	f010 fc58 	bl	8023010 <free>
		p_owner->p_node = NULL;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2200      	movs	r2, #0
 8012764:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2200      	movs	r2, #0
 801276a:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2200      	movs	r2, #0
 8012770:	605a      	str	r2, [r3, #4]
}
 8012772:	bf00      	nop
 8012774:	3710      	adds	r7, #16
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}

0801277a <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 801277a:	b580      	push	{r7, lr}
 801277c:	b084      	sub	sp, #16
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	695b      	ldr	r3, [r3, #20]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d101      	bne.n	801278e <pifFixList_AddFirst+0x14>
 801278a:	2300      	movs	r3, #0
 801278c:	e025      	b.n	80127da <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	695b      	ldr	r3, [r3, #20]
 8012792:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	691a      	ldr	r2, [r3, #16]
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	691b      	ldr	r3, [r3, #16]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d003      	beq.n	80127b4 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	691b      	ldr	r3, [r3, #16]
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	68fa      	ldr	r2, [r7, #12]
 80127b8:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	1c5a      	adds	r2, r3, #1
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	3308      	adds	r3, #8
 80127c8:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	461a      	mov	r2, r3
 80127d0:	2100      	movs	r1, #0
 80127d2:	68b8      	ldr	r0, [r7, #8]
 80127d4:	f010 fc32 	bl	802303c <memset>
    return p;
 80127d8:	68bb      	ldr	r3, [r7, #8]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 80127e2:	b480      	push	{r7}
 80127e4:	b085      	sub	sp, #20
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	3b08      	subs	r3, #8
 80127f0:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d005      	beq.n	8012806 <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	68fa      	ldr	r2, [r7, #12]
 8012800:	6812      	ldr	r2, [r2, #0]
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	e003      	b.n	801280e <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d004      	beq.n	8012820 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	68fa      	ldr	r2, [r7, #12]
 801281c:	6852      	ldr	r2, [r2, #4]
 801281e:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	695a      	ldr	r2, [r3, #20]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2200      	movs	r2, #0
 801282c:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	1e5a      	subs	r2, r3, #1
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	609a      	str	r2, [r3, #8]
}
 801283e:	bf00      	nop
 8012840:	3714      	adds	r7, #20
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr

0801284a <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 801284a:	b480      	push	{r7}
 801284c:	b083      	sub	sp, #12
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	689b      	ldr	r3, [r3, #8]
}
 8012856:	4618      	mov	r0, r3
 8012858:	370c      	adds	r7, #12
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr

08012862 <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012862:	b480      	push	{r7}
 8012864:	b083      	sub	sp, #12
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	691b      	ldr	r3, [r3, #16]
}
 801286e:	4618      	mov	r0, r3
 8012870:	370c      	adds	r7, #12
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr

0801287a <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 801287a:	b480      	push	{r7}
 801287c:	b083      	sub	sp, #12
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d002      	beq.n	801288e <pifFixList_Next+0x14>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	e000      	b.n	8012890 <pifFixList_Next+0x16>
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <pifLog_CmdHelp>:

#ifdef __PIF_LOG_COMMAND__


int pifLog_CmdHelp(int argc, char *argv[])
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
    const PifLogCmdEntry* p_entry;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available commands:\n");
 80128a6:	4916      	ldr	r1, [pc, #88]	; (8012900 <pifLog_CmdHelp+0x64>)
 80128a8:	2000      	movs	r0, #0
 80128aa:	f000 fd71 	bl	8013390 <pifLog_Print>
    i = 0;
 80128ae:	2300      	movs	r3, #0
 80128b0:	60fb      	str	r3, [r7, #12]
    while (1) {
        p_entry = &s_log.p_cmd_table[i];
 80128b2:	4b14      	ldr	r3, [pc, #80]	; (8012904 <pifLog_CmdHelp+0x68>)
 80128b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	011b      	lsls	r3, r3, #4
 80128ba:	4413      	add	r3, r2
 80128bc:	60bb      	str	r3, [r7, #8]
        if (!p_entry->p_name) break;
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d016      	beq.n	80128f4 <pifLog_CmdHelp+0x58>

        pifLog_Printf(LT_NONE, "  %s - %s\n", p_entry->p_name, p_entry->p_help);
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	689b      	ldr	r3, [r3, #8]
 80128ce:	490e      	ldr	r1, [pc, #56]	; (8012908 <pifLog_CmdHelp+0x6c>)
 80128d0:	2000      	movs	r0, #0
 80128d2:	f000 fdeb 	bl	80134ac <pifLog_Printf>
    	if (p_entry->p_args) {
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d006      	beq.n	80128ec <pifLog_CmdHelp+0x50>
            pifLog_Printf(LT_NONE, "\t%s\n", p_entry->p_args);
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	461a      	mov	r2, r3
 80128e4:	4909      	ldr	r1, [pc, #36]	; (801290c <pifLog_CmdHelp+0x70>)
 80128e6:	2000      	movs	r0, #0
 80128e8:	f000 fde0 	bl	80134ac <pifLog_Printf>
    	}
        i++;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	3301      	adds	r3, #1
 80128f0:	60fb      	str	r3, [r7, #12]
        p_entry = &s_log.p_cmd_table[i];
 80128f2:	e7de      	b.n	80128b2 <pifLog_CmdHelp+0x16>
        if (!p_entry->p_name) break;
 80128f4:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	080279a8 	.word	0x080279a8
 8012904:	20001c90 	.word	0x20001c90
 8012908:	080279c0 	.word	0x080279c0
 801290c:	080279cc 	.word	0x080279cc

08012910 <pifLog_CmdPrintVersion>:

int pifLog_CmdPrintVersion(int argc, char* argv[])
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af02      	add	r7, sp, #8
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 801291a:	4b07      	ldr	r3, [pc, #28]	; (8012938 <pifLog_CmdPrintVersion+0x28>)
 801291c:	9301      	str	r3, [sp, #4]
 801291e:	2300      	movs	r3, #0
 8012920:	9300      	str	r3, [sp, #0]
 8012922:	2301      	movs	r3, #1
 8012924:	2200      	movs	r2, #0
 8012926:	4905      	ldr	r1, [pc, #20]	; (801293c <pifLog_CmdPrintVersion+0x2c>)
 8012928:	2000      	movs	r0, #0
 801292a:	f000 fdbf 	bl	80134ac <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	080279f0 	.word	0x080279f0
 801293c:	080279d4 	.word	0x080279d4

08012940 <pifLog_CmdPrintTask>:

int pifLog_CmdPrintTask(int argc, char* argv[])
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifTaskManager_Print();
 801294a:	f002 fa77 	bl	8014e3c <pifTaskManager_Print>
	return PIF_LOG_CMD_NO_ERROR;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <pifLog_CmdSetStatus>:

int pifLog_CmdSetStatus(int argc, char* argv[])
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af02      	add	r7, sp, #8
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 0) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d136      	bne.n	80129d6 <pifLog_CmdSetStatus+0x7e>
    	pifLog_Printf(LT_NONE, "Use Rate: %u%%\n", pif_performance._use_rate);
 8012968:	4b4b      	ldr	r3, [pc, #300]	; (8012a98 <pifLog_CmdSetStatus+0x140>)
 801296a:	791b      	ldrb	r3, [r3, #4]
 801296c:	461a      	mov	r2, r3
 801296e:	494b      	ldr	r1, [pc, #300]	; (8012a9c <pifLog_CmdSetStatus+0x144>)
 8012970:	2000      	movs	r0, #0
 8012972:	f000 fd9b 	bl	80134ac <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012976:	4b4a      	ldr	r3, [pc, #296]	; (8012aa0 <pifLog_CmdSetStatus+0x148>)
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	461a      	mov	r2, r3
 801297c:	4949      	ldr	r1, [pc, #292]	; (8012aa4 <pifLog_CmdSetStatus+0x14c>)
 801297e:	2000      	movs	r0, #0
 8012980:	f000 fd94 	bl	80134ac <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012984:	4948      	ldr	r1, [pc, #288]	; (8012aa8 <pifLog_CmdSetStatus+0x150>)
 8012986:	2000      	movs	r0, #0
 8012988:	f000 fd90 	bl	80134ac <pifLog_Printf>
	   	i = 0;
 801298c:	2300      	movs	r3, #0
 801298e:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012990:	e019      	b.n	80129c6 <pifLog_CmdSetStatus+0x6e>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012992:	4a46      	ldr	r2, [pc, #280]	; (8012aac <pifLog_CmdSetStatus+0x154>)
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801299a:	4a44      	ldr	r2, [pc, #272]	; (8012aac <pifLog_CmdSetStatus+0x154>)
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	00db      	lsls	r3, r3, #3
 80129a0:	4413      	add	r3, r2
 80129a2:	6858      	ldr	r0, [r3, #4]
 80129a4:	4b42      	ldr	r3, [pc, #264]	; (8012ab0 <pifLog_CmdSetStatus+0x158>)
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	fa22 f303 	lsr.w	r3, r2, r3
 80129ae:	f003 0301 	and.w	r3, r3, #1
 80129b2:	9300      	str	r3, [sp, #0]
 80129b4:	4603      	mov	r3, r0
 80129b6:	460a      	mov	r2, r1
 80129b8:	493e      	ldr	r1, [pc, #248]	; (8012ab4 <pifLog_CmdSetStatus+0x15c>)
 80129ba:	2000      	movs	r0, #0
 80129bc:	f000 fd76 	bl	80134ac <pifLog_Printf>
			i++;
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	3301      	adds	r3, #1
 80129c4:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 80129c6:	4a39      	ldr	r2, [pc, #228]	; (8012aac <pifLog_CmdSetStatus+0x154>)
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1df      	bne.n	8012992 <pifLog_CmdSetStatus+0x3a>
		}
		return PIF_LOG_CMD_NO_ERROR;
 80129d2:	2300      	movs	r3, #0
 80129d4:	e05c      	b.n	8012a90 <pifLog_CmdSetStatus+0x138>
	}
	else if (argc > 1) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	dd57      	ble.n	8012a8c <pifLog_CmdSetStatus+0x134>
		switch (argv[1][0]) {
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	3304      	adds	r3, #4
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	2b74      	cmp	r3, #116	; 0x74
 80129e6:	d015      	beq.n	8012a14 <pifLog_CmdSetStatus+0xbc>
 80129e8:	2b74      	cmp	r3, #116	; 0x74
 80129ea:	dc16      	bgt.n	8012a1a <pifLog_CmdSetStatus+0xc2>
 80129ec:	2b66      	cmp	r3, #102	; 0x66
 80129ee:	d00e      	beq.n	8012a0e <pifLog_CmdSetStatus+0xb6>
 80129f0:	2b66      	cmp	r3, #102	; 0x66
 80129f2:	dc12      	bgt.n	8012a1a <pifLog_CmdSetStatus+0xc2>
 80129f4:	2b54      	cmp	r3, #84	; 0x54
 80129f6:	d00d      	beq.n	8012a14 <pifLog_CmdSetStatus+0xbc>
 80129f8:	2b54      	cmp	r3, #84	; 0x54
 80129fa:	dc0e      	bgt.n	8012a1a <pifLog_CmdSetStatus+0xc2>
 80129fc:	2b46      	cmp	r3, #70	; 0x46
 80129fe:	d006      	beq.n	8012a0e <pifLog_CmdSetStatus+0xb6>
 8012a00:	2b46      	cmp	r3, #70	; 0x46
 8012a02:	dc0a      	bgt.n	8012a1a <pifLog_CmdSetStatus+0xc2>
 8012a04:	2b30      	cmp	r3, #48	; 0x30
 8012a06:	d002      	beq.n	8012a0e <pifLog_CmdSetStatus+0xb6>
 8012a08:	2b31      	cmp	r3, #49	; 0x31
 8012a0a:	d003      	beq.n	8012a14 <pifLog_CmdSetStatus+0xbc>
 8012a0c:	e005      	b.n	8012a1a <pifLog_CmdSetStatus+0xc2>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	73fb      	strb	r3, [r7, #15]
			break;
 8012a12:	e005      	b.n	8012a20 <pifLog_CmdSetStatus+0xc8>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012a14:	2301      	movs	r3, #1
 8012a16:	73fb      	strb	r3, [r7, #15]
			break;
 8012a18:	e002      	b.n	8012a20 <pifLog_CmdSetStatus+0xc8>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012a1a:	f06f 0303 	mvn.w	r3, #3
 8012a1e:	e037      	b.n	8012a90 <pifLog_CmdSetStatus+0x138>
		}
		i = 0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012a24:	e029      	b.n	8012a7a <pifLog_CmdSetStatus+0x122>
			if (!strcasecmp(argv[0], c_log_flags[i].p_command)) {
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	4920      	ldr	r1, [pc, #128]	; (8012aac <pifLog_CmdSetStatus+0x154>)
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	00db      	lsls	r3, r3, #3
 8012a30:	440b      	add	r3, r1
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	4619      	mov	r1, r3
 8012a36:	4610      	mov	r0, r2
 8012a38:	f010 fc0e 	bl	8023258 <strcasecmp>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d118      	bne.n	8012a74 <pifLog_CmdSetStatus+0x11c>
				if (value) {
 8012a42:	7bfb      	ldrb	r3, [r7, #15]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d009      	beq.n	8012a5c <pifLog_CmdSetStatus+0x104>
					pif_log_flag.all |= 1L << i;
 8012a48:	4b19      	ldr	r3, [pc, #100]	; (8012ab0 <pifLog_CmdSetStatus+0x158>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	2101      	movs	r1, #1
 8012a4e:	68ba      	ldr	r2, [r7, #8]
 8012a50:	fa01 f202 	lsl.w	r2, r1, r2
 8012a54:	4313      	orrs	r3, r2
 8012a56:	4a16      	ldr	r2, [pc, #88]	; (8012ab0 <pifLog_CmdSetStatus+0x158>)
 8012a58:	6013      	str	r3, [r2, #0]
 8012a5a:	e009      	b.n	8012a70 <pifLog_CmdSetStatus+0x118>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012a5c:	4b14      	ldr	r3, [pc, #80]	; (8012ab0 <pifLog_CmdSetStatus+0x158>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2101      	movs	r1, #1
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	fa01 f202 	lsl.w	r2, r1, r2
 8012a68:	43d2      	mvns	r2, r2
 8012a6a:	4013      	ands	r3, r2
 8012a6c:	4a10      	ldr	r2, [pc, #64]	; (8012ab0 <pifLog_CmdSetStatus+0x158>)
 8012a6e:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012a70:	2300      	movs	r3, #0
 8012a72:	e00d      	b.n	8012a90 <pifLog_CmdSetStatus+0x138>
			}
			i++;
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	3301      	adds	r3, #1
 8012a78:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012a7a:	4a0c      	ldr	r2, [pc, #48]	; (8012aac <pifLog_CmdSetStatus+0x154>)
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1cf      	bne.n	8012a26 <pifLog_CmdSetStatus+0xce>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012a86:	f06f 0303 	mvn.w	r3, #3
 8012a8a:	e001      	b.n	8012a90 <pifLog_CmdSetStatus+0x138>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012a8c:	f06f 0302 	mvn.w	r3, #2
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	20001c70 	.word	0x20001c70
 8012a9c:	080279fc 	.word	0x080279fc
 8012aa0:	20001c55 	.word	0x20001c55
 8012aa4:	08027a0c 	.word	0x08027a0c
 8012aa8:	08027a18 	.word	0x08027a18
 8012aac:	080296b0 	.word	0x080296b0
 8012ab0:	20001c8c 	.word	0x20001c8c
 8012ab4:	08027a20 	.word	0x08027a20

08012ab8 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b088      	sub	sp, #32
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
    char tmp_char;
    uint8_t i;
    BOOL str_get_done_flag = FALSE;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	77bb      	strb	r3, [r7, #30]
    uint8_t enter = 0;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	777b      	strb	r3, [r7, #29]
    static uint8_t pre_enter = 0;
    const PifLogCmdEntry *cmd, *pstart, *pend;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012aca:	e1e2      	b.n	8012e92 <_getDebugString+0x3da>
		if (tmp_char >= 32 && tmp_char <= 126) {
 8012acc:	7bfb      	ldrb	r3, [r7, #15]
 8012ace:	2b1f      	cmp	r3, #31
 8012ad0:	d934      	bls.n	8012b3c <_getDebugString+0x84>
 8012ad2:	7bfb      	ldrb	r3, [r7, #15]
 8012ad4:	2b7e      	cmp	r3, #126	; 0x7e
 8012ad6:	d831      	bhi.n	8012b3c <_getDebugString+0x84>
			if (!p_owner->char_idx && tmp_char == ' ') continue;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d103      	bne.n	8012aea <_getDebugString+0x32>
 8012ae2:	7bfb      	ldrb	r3, [r7, #15]
 8012ae4:	2b20      	cmp	r3, #32
 8012ae6:	d100      	bne.n	8012aea <_getDebugString+0x32>
 8012ae8:	e1d3      	b.n	8012e92 <_getDebugString+0x3da>
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012af0:	461a      	mov	r2, r3
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012af8:	3b03      	subs	r3, #3
 8012afa:	429a      	cmp	r2, r3
 8012afc:	f280 815d 	bge.w	8012dba <_getDebugString+0x302>
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b04:	7bfa      	ldrb	r2, [r7, #15]
 8012b06:	4611      	mov	r1, r2
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f001 f811 	bl	8013b30 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6a1b      	ldr	r3, [r3, #32]
 8012b12:	6a1b      	ldr	r3, [r3, #32]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f001 fd8d 	bl	8014634 <pifTask_SetTrigger>
				p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b24:	4413      	add	r3, r2
 8012b26:	7bfa      	ldrb	r2, [r7, #15]
 8012b28:	701a      	strb	r2, [r3, #0]
				p_owner->char_idx++;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b30:	3301      	adds	r3, #1
 8012b32:	b2da      	uxtb	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012b3a:	e13e      	b.n	8012dba <_getDebugString+0x302>
            }
		}
		else {
			switch (tmp_char) {
 8012b3c:	7bfb      	ldrb	r3, [r7, #15]
 8012b3e:	2b0d      	cmp	r3, #13
 8012b40:	dc16      	bgt.n	8012b70 <_getDebugString+0xb8>
 8012b42:	2b08      	cmp	r3, #8
 8012b44:	f2c0 812c 	blt.w	8012da0 <_getDebugString+0x2e8>
 8012b48:	3b08      	subs	r3, #8
 8012b4a:	2b05      	cmp	r3, #5
 8012b4c:	f200 8128 	bhi.w	8012da0 <_getDebugString+0x2e8>
 8012b50:	a201      	add	r2, pc, #4	; (adr r2, 8012b58 <_getDebugString+0xa0>)
 8012b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b56:	bf00      	nop
 8012b58:	08012b77 	.word	0x08012b77
 8012b5c:	08012bbd 	.word	0x08012bbd
 8012b60:	08012d6b 	.word	0x08012d6b
 8012b64:	08012da1 	.word	0x08012da1
 8012b68:	08012d77 	.word	0x08012d77
 8012b6c:	08012d71 	.word	0x08012d71
 8012b70:	2b7f      	cmp	r3, #127	; 0x7f
 8012b72:	f040 8115 	bne.w	8012da0 <_getDebugString+0x2e8>
			case '\b':		// 0x08 / Backspace / CTRL-H
			case 0x7F:		// Delete
				if (p_owner->char_idx) {
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f000 8119 	beq.w	8012db4 <_getDebugString+0x2fc>
					p_owner->char_idx--;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b88:	3b01      	subs	r3, #1
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012b9c:	4413      	add	r3, r2
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	701a      	strb	r2, [r3, #0]
					pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b");
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba6:	499c      	ldr	r1, [pc, #624]	; (8012e18 <_getDebugString+0x360>)
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f001 f83f 	bl	8013c2c <pifRingBuffer_PutString>
					pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6a1b      	ldr	r3, [r3, #32]
 8012bb2:	6a1b      	ldr	r3, [r3, #32]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f001 fd3d 	bl	8014634 <pifTask_SetTrigger>
				}
				break;
 8012bba:	e0fb      	b.n	8012db4 <_getDebugString+0x2fc>

			case '\t':		// 0x09 / Horizontal Tab / CTRL-I
	            // do tab completion
			    pstart = NULL;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	617b      	str	r3, [r7, #20]
			    pend = NULL;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	613b      	str	r3, [r7, #16]
	            i = p_owner->char_idx;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bca:	77fb      	strb	r3, [r7, #31]
	            cmd = p_owner->p_cmd_table;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bd0:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012bd2:	e01b      	b.n	8012c0c <_getDebugString+0x154>
	                if (!(p_owner->char_idx && (strncasecmp(p_owner->p_rx_buffer, cmd->p_name, p_owner->char_idx) != 0))) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d00c      	beq.n	8012bf8 <_getDebugString+0x140>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	6819      	ldr	r1, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bec:	461a      	mov	r2, r3
 8012bee:	f010 fb71 	bl	80232d4 <strncasecmp>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d106      	bne.n	8012c06 <_getDebugString+0x14e>
						if (!pstart)
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d101      	bne.n	8012c02 <_getDebugString+0x14a>
							pstart = cmd;
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	617b      	str	r3, [r7, #20]
						pend = cmd;
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	613b      	str	r3, [r7, #16]
	                }
	                cmd++;
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	3310      	adds	r3, #16
 8012c0a:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1df      	bne.n	8012bd4 <_getDebugString+0x11c>
	            }
	            if (pstart) {    /* Buffer matches one or more commands */
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d05b      	beq.n	8012cd2 <_getDebugString+0x21a>
	                for (; ; p_owner->char_idx++) {
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c24:	4413      	add	r3, r2
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d04f      	beq.n	8012ccc <_getDebugString+0x214>
	                    if (pstart->p_name[p_owner->char_idx] != pend->p_name[p_owner->char_idx])
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c36:	4413      	add	r3, r2
 8012c38:	781a      	ldrb	r2, [r3, #0]
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	6879      	ldr	r1, [r7, #4]
 8012c40:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012c44:	440b      	add	r3, r1
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d141      	bne.n	8012cd0 <_getDebugString+0x218>
	                        break;
	                    if (!pstart->p_name[p_owner->char_idx] && p_owner->char_idx < p_owner->rx_buffer_size - 2) {
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c56:	4413      	add	r3, r2
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d11f      	bne.n	8012c9e <_getDebugString+0x1e6>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c64:	461a      	mov	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c6c:	3b02      	subs	r3, #2
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	da15      	bge.n	8012c9e <_getDebugString+0x1e6>
	                        /* Unambiguous -- append a space */
	                    	p_owner->p_rx_buffer[p_owner->char_idx++] = ' ';
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c7c:	1c59      	adds	r1, r3, #1
 8012c7e:	b2c8      	uxtb	r0, r1
 8012c80:	6879      	ldr	r1, [r7, #4]
 8012c82:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8012c86:	4413      	add	r3, r2
 8012c88:	2220      	movs	r2, #32
 8012c8a:	701a      	strb	r2, [r3, #0]
	                        p_owner->p_rx_buffer[p_owner->char_idx] = '\0';
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c96:	4413      	add	r3, r2
 8012c98:	2200      	movs	r2, #0
 8012c9a:	701a      	strb	r2, [r3, #0]
	                        break;
 8012c9c:	e019      	b.n	8012cd2 <_getDebugString+0x21a>
	                    }
	                    p_owner->p_rx_buffer[p_owner->char_idx] = pstart->p_name[p_owner->char_idx];
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012ca8:	441a      	add	r2, r3
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cae:	6879      	ldr	r1, [r7, #4]
 8012cb0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012cb4:	440b      	add	r3, r1
 8012cb6:	7812      	ldrb	r2, [r2, #0]
 8012cb8:	701a      	strb	r2, [r3, #0]
	                for (; ; p_owner->char_idx++) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	b2da      	uxtb	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012cca:	e7a6      	b.n	8012c1a <_getDebugString+0x162>
 8012ccc:	bf00      	nop
 8012cce:	e000      	b.n	8012cd2 <_getDebugString+0x21a>
	                        break;
 8012cd0:	bf00      	nop
	                }
	            }
	            if (!p_owner->char_idx || pstart != pend) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d003      	beq.n	8012ce4 <_getDebugString+0x22c>
 8012cdc:	697a      	ldr	r2, [r7, #20]
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d035      	beq.n	8012d50 <_getDebugString+0x298>
	                /* Print list of ambiguous matches */
	            	pifRingBuffer_PutString(p_owner->p_tx_buffer, "\r\033[K");
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce8:	494c      	ldr	r1, [pc, #304]	; (8012e1c <_getDebugString+0x364>)
 8012cea:	4618      	mov	r0, r3
 8012cec:	f000 ff9e 	bl	8013c2c <pifRingBuffer_PutString>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	61bb      	str	r3, [r7, #24]
 8012cf4:	e010      	b.n	8012d18 <_getDebugString+0x260>
	                	pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)cmd->p_name);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cfa:	69bb      	ldr	r3, [r7, #24]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4619      	mov	r1, r3
 8012d00:	4610      	mov	r0, r2
 8012d02:	f000 ff93 	bl	8013c2c <pifRingBuffer_PutString>
	                	pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\t');
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d0a:	2109      	movs	r1, #9
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f000 ff0f 	bl	8013b30 <pifRingBuffer_PutByte>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	3310      	adds	r3, #16
 8012d16:	61bb      	str	r3, [r7, #24]
 8012d18:	69ba      	ldr	r2, [r7, #24]
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d9ea      	bls.n	8012cf6 <_getDebugString+0x23e>
	                }
					pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d24:	4a3e      	ldr	r2, [pc, #248]	; (8012e20 <_getDebugString+0x368>)
 8012d26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 ff7e 	bl	8013c2c <pifRingBuffer_PutString>
	                i = 0;    /* Redraw prompt */
 8012d30:	2300      	movs	r3, #0
 8012d32:	77fb      	strb	r3, [r7, #31]
	            }
	            for (; i < p_owner->char_idx; i++)
 8012d34:	e00c      	b.n	8012d50 <_getDebugString+0x298>
	            	pifRingBuffer_PutByte(p_owner->p_tx_buffer, p_owner->p_rx_buffer[i]);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
 8012d40:	4413      	add	r3, r2
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	4619      	mov	r1, r3
 8012d46:	f000 fef3 	bl	8013b30 <pifRingBuffer_PutByte>
	            for (; i < p_owner->char_idx; i++)
 8012d4a:	7ffb      	ldrb	r3, [r7, #31]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	77fb      	strb	r3, [r7, #31]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d56:	7ffa      	ldrb	r2, [r7, #31]
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d3ec      	bcc.n	8012d36 <_getDebugString+0x27e>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6a1b      	ldr	r3, [r3, #32]
 8012d60:	6a1b      	ldr	r3, [r3, #32]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f001 fc66 	bl	8014634 <pifTask_SetTrigger>
				break;
 8012d68:	e027      	b.n	8012dba <_getDebugString+0x302>

			case '\n':		// 0x0A / Line Feed / CTRL-J
				enter = 1;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	777b      	strb	r3, [r7, #29]
				break;
 8012d6e:	e024      	b.n	8012dba <_getDebugString+0x302>

			case '\r':		// 0x0D / Carriage Return / CTRL-M
				enter = 2;
 8012d70:	2302      	movs	r3, #2
 8012d72:	777b      	strb	r3, [r7, #29]
				break;
 8012d74:	e021      	b.n	8012dba <_getDebugString+0x302>

			case 0x0C:		// Form Feed, New Page / CTRL-L
				pifRingBuffer_PutString(p_owner->p_tx_buffer, "\033[2J\033[1;1H");
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d7a:	492a      	ldr	r1, [pc, #168]	; (8012e24 <_getDebugString+0x36c>)
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f000 ff55 	bl	8013c2c <pifRingBuffer_PutString>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d86:	4a26      	ldr	r2, [pc, #152]	; (8012e20 <_getDebugString+0x368>)
 8012d88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012d8a:	4611      	mov	r1, r2
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f000 ff4d 	bl	8013c2c <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6a1b      	ldr	r3, [r3, #32]
 8012d96:	6a1b      	ldr	r3, [r3, #32]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f001 fc4b 	bl	8014634 <pifTask_SetTrigger>
				break;
 8012d9e:	e00c      	b.n	8012dba <_getDebugString+0x302>

			default:
				if (p_owner->evt_control_char) (*p_owner->evt_control_char)(tmp_char);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d007      	beq.n	8012db8 <_getDebugString+0x300>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dac:	7bfa      	ldrb	r2, [r7, #15]
 8012dae:	4610      	mov	r0, r2
 8012db0:	4798      	blx	r3
            	break;
 8012db2:	e001      	b.n	8012db8 <_getDebugString+0x300>
				break;
 8012db4:	bf00      	nop
 8012db6:	e000      	b.n	8012dba <_getDebugString+0x302>
            	break;
 8012db8:	bf00      	nop
			}
        }

		if (enter) {
 8012dba:	7f7b      	ldrb	r3, [r7, #29]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d026      	beq.n	8012e0e <_getDebugString+0x356>
			if (p_owner->char_idx) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d005      	beq.n	8012dd6 <_getDebugString+0x31e>
				str_get_done_flag = TRUE;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	77bb      	strb	r3, [r7, #30]
				pre_enter = enter;
 8012dce:	4a16      	ldr	r2, [pc, #88]	; (8012e28 <_getDebugString+0x370>)
 8012dd0:	7f7b      	ldrb	r3, [r7, #29]
 8012dd2:	7013      	strb	r3, [r2, #0]
 8012dd4:	e019      	b.n	8012e0a <_getDebugString+0x352>
			}
			else if (!pre_enter || enter == pre_enter) {
 8012dd6:	4b14      	ldr	r3, [pc, #80]	; (8012e28 <_getDebugString+0x370>)
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d004      	beq.n	8012de8 <_getDebugString+0x330>
 8012dde:	4b12      	ldr	r3, [pc, #72]	; (8012e28 <_getDebugString+0x370>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	7f7a      	ldrb	r2, [r7, #29]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d110      	bne.n	8012e0a <_getDebugString+0x352>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dec:	4a0c      	ldr	r2, [pc, #48]	; (8012e20 <_getDebugString+0x368>)
 8012dee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012df0:	4611      	mov	r1, r2
 8012df2:	4618      	mov	r0, r3
 8012df4:	f000 ff1a 	bl	8013c2c <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6a1b      	ldr	r3, [r3, #32]
 8012dfc:	6a1b      	ldr	r3, [r3, #32]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f001 fc18 	bl	8014634 <pifTask_SetTrigger>
				pre_enter = enter;
 8012e04:	4a08      	ldr	r2, [pc, #32]	; (8012e28 <_getDebugString+0x370>)
 8012e06:	7f7b      	ldrb	r3, [r7, #29]
 8012e08:	7013      	strb	r3, [r2, #0]
			}
			enter = 0;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	777b      	strb	r3, [r7, #29]
		}

        if (str_get_done_flag == TRUE) {
 8012e0e:	7fbb      	ldrb	r3, [r7, #30]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d13e      	bne.n	8012e92 <_getDebugString+0x3da>
        	// Strip trailing whitespace
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012e14:	e012      	b.n	8012e3c <_getDebugString+0x384>
 8012e16:	bf00      	nop
 8012e18:	08027a30 	.word	0x08027a30
 8012e1c:	08027a34 	.word	0x08027a34
 8012e20:	20001c90 	.word	0x20001c90
 8012e24:	08027a3c 	.word	0x08027a3c
 8012e28:	20001cf4 	.word	0x20001cf4
            	p_owner->char_idx--;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e32:	3b01      	subs	r3, #1
 8012e34:	b2da      	uxtb	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d009      	beq.n	8012e5a <_getDebugString+0x3a2>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e50:	3b01      	subs	r3, #1
 8012e52:	4413      	add	r3, r2
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	2b20      	cmp	r3, #32
 8012e58:	d0e8      	beq.n	8012e2c <_getDebugString+0x374>
            }
            if (p_owner->char_idx) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d014      	beq.n	8012e8e <_getDebugString+0x3d6>
				p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012e6e:	4413      	add	r3, r2
 8012e70:	2200      	movs	r2, #0
 8012e72:	701a      	strb	r2, [r3, #0]
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n');
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e78:	210a      	movs	r1, #10
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f000 fe58 	bl	8013b30 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6a1b      	ldr	r3, [r3, #32]
 8012e84:	6a1b      	ldr	r3, [r3, #32]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f001 fbd4 	bl	8014634 <pifTask_SetTrigger>
	        	break;
 8012e8c:	e00c      	b.n	8012ea8 <_getDebugString+0x3f0>
            }
            else {
            	str_get_done_flag = FALSE;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	77bb      	strb	r3, [r7, #30]
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6a1a      	ldr	r2, [r3, #32]
 8012e96:	f107 010f 	add.w	r1, r7, #15
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	4798      	blx	r3
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	f47f ae12 	bne.w	8012acc <_getDebugString+0x14>
        	}
        }
    }
    return str_get_done_flag;
 8012ea8:	7fbb      	ldrb	r3, [r7, #30]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3720      	adds	r7, #32
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop

08012eb4 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	74fb      	strb	r3, [r7, #19]
    argc = 0;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	60fb      	str	r3, [r7, #12]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ec8:	617b      	str	r3, [r7, #20]

    while (*p_tmp_cmd) {
 8012eca:	e022      	b.n	8012f12 <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	2b20      	cmp	r3, #32
 8012ed2:	d105      	bne.n	8012ee0 <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012eda:	2301      	movs	r3, #1
 8012edc:	74fb      	strb	r3, [r7, #19]
 8012ede:	e015      	b.n	8012f0c <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012ee0:	7cfb      	ldrb	r3, [r7, #19]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d012      	beq.n	8012f0c <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2b07      	cmp	r3, #7
 8012eea:	d80c      	bhi.n	8012f06 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012eec:	687a      	ldr	r2, [r7, #4]
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	330c      	adds	r3, #12
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	4413      	add	r3, r2
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	605a      	str	r2, [r3, #4]
                	argc++;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	3301      	adds	r3, #1
 8012efe:	60fb      	str	r3, [r7, #12]
                    find_arg = FALSE;
 8012f00:	2300      	movs	r3, #0
 8012f02:	74fb      	strb	r3, [r7, #19]
 8012f04:	e002      	b.n	8012f0c <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8012f06:	f06f 0301 	mvn.w	r3, #1
 8012f0a:	e02e      	b.n	8012f6a <_processDebugCmd+0xb6>
                }
            }
        }

        p_tmp_cmd++;
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	617b      	str	r3, [r7, #20]
    while (*p_tmp_cmd) {
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d1d8      	bne.n	8012ecc <_processDebugCmd+0x18>
    }

    if (argc) {
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d023      	beq.n	8012f68 <_processDebugCmd+0xb4>
		p_cmd_entry = p_owner->p_cmd_table;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f24:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012f26:	e018      	b.n	8012f5a <_processDebugCmd+0xa6>
			if (!strcasecmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f010 f990 	bl	8023258 <strcasecmp>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d10a      	bne.n	8012f54 <_processDebugCmd+0xa0>
				return p_cmd_entry->processor(argc - 1, &p_owner->p_argv[1]);
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	3a01      	subs	r2, #1
 8012f46:	4610      	mov	r0, r2
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	3238      	adds	r2, #56	; 0x38
 8012f4c:	4611      	mov	r1, r2
 8012f4e:	4798      	blx	r3
 8012f50:	4603      	mov	r3, r0
 8012f52:	e00a      	b.n	8012f6a <_processDebugCmd+0xb6>
            }

			p_cmd_entry++;
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	3310      	adds	r3, #16
 8012f58:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1e2      	bne.n	8012f28 <_processDebugCmd+0x74>
    	}
        return PIF_LOG_CMD_BAD_CMD;
 8012f62:	f04f 33ff 	mov.w	r3, #4294967295
 8012f66:	e000      	b.n	8012f6a <_processDebugCmd+0xb6>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8012f68:	2300      	movs	r3, #0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3718      	adds	r7, #24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b084      	sub	sp, #16
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d10f      	bne.n	8012faa <_evtParsing+0x38>
        if (_getDebugString(p_owner, act_receive_data)) {
 8012f8a:	6839      	ldr	r1, [r7, #0]
 8012f8c:	68f8      	ldr	r0, [r7, #12]
 8012f8e:	f7ff fd93 	bl	8012ab8 <_getDebugString>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d008      	beq.n	8012faa <_evtParsing+0x38>
        	p_owner->cmd_done = TRUE;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	pifTask_SetTrigger(p_owner->p_task);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f001 fb45 	bl	8014634 <pifTask_SetTrigger>
        }
    }
}
 8012faa:	bf00      	nop
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
	...

08012fb4 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b08e      	sub	sp, #56	; 0x38
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	status = _processDebugCmd(&s_log);
 8012fc0:	4850      	ldr	r0, [pc, #320]	; (8013104 <_doTask+0x150>)
 8012fc2:	f7ff ff77 	bl	8012eb4 <_processDebugCmd>
 8012fc6:	6338      	str	r0, [r7, #48]	; 0x30

	while (s_log.char_idx) {
 8012fc8:	e00f      	b.n	8012fea <_doTask+0x36>
		s_log.p_rx_buffer[s_log.char_idx] = 0;
 8012fca:	4b4e      	ldr	r3, [pc, #312]	; (8013104 <_doTask+0x150>)
 8012fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fce:	4a4d      	ldr	r2, [pc, #308]	; (8013104 <_doTask+0x150>)
 8012fd0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012fd4:	4413      	add	r3, r2
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	701a      	strb	r2, [r3, #0]
		s_log.char_idx--;
 8012fda:	4b4a      	ldr	r3, [pc, #296]	; (8013104 <_doTask+0x150>)
 8012fdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	b2da      	uxtb	r2, r3
 8012fe4:	4b47      	ldr	r3, [pc, #284]	; (8013104 <_doTask+0x150>)
 8012fe6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while (s_log.char_idx) {
 8012fea:	4b46      	ldr	r3, [pc, #280]	; (8013104 <_doTask+0x150>)
 8012fec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d1ea      	bne.n	8012fca <_doTask+0x16>
	}

	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ff8:	e009      	b.n	801300e <_doTask+0x5a>
		s_log.p_argv[i] = 0;
 8012ffa:	4a42      	ldr	r2, [pc, #264]	; (8013104 <_doTask+0x150>)
 8012ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ffe:	330c      	adds	r3, #12
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	2200      	movs	r2, #0
 8013006:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 8013008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801300a:	3301      	adds	r3, #1
 801300c:	637b      	str	r3, [r7, #52]	; 0x34
 801300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013010:	2b07      	cmp	r3, #7
 8013012:	ddf2      	ble.n	8012ffa <_doTask+0x46>
	}

	switch (status) {
 8013014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013016:	3304      	adds	r3, #4
 8013018:	2b03      	cmp	r3, #3
 801301a:	d83f      	bhi.n	801309c <_doTask+0xe8>
 801301c:	a201      	add	r2, pc, #4	; (adr r2, 8013024 <_doTask+0x70>)
 801301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013022:	bf00      	nop
 8013024:	08013083 	.word	0x08013083
 8013028:	08013069 	.word	0x08013069
 801302c:	0801304f 	.word	0x0801304f
 8013030:	08013035 	.word	0x08013035
	case PIF_LOG_CMD_BAD_CMD:
		// Handle the case of bad command.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n");
 8013034:	4b33      	ldr	r3, [pc, #204]	; (8013104 <_doTask+0x150>)
 8013036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013038:	4933      	ldr	r1, [pc, #204]	; (8013108 <_doTask+0x154>)
 801303a:	4618      	mov	r0, r3
 801303c:	f000 fdf6 	bl	8013c2c <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013040:	4b30      	ldr	r3, [pc, #192]	; (8013104 <_doTask+0x150>)
 8013042:	6a1b      	ldr	r3, [r3, #32]
 8013044:	6a1b      	ldr	r3, [r3, #32]
 8013046:	4618      	mov	r0, r3
 8013048:	f001 faf4 	bl	8014634 <pifTask_SetTrigger>
		break;
 801304c:	e043      	b.n	80130d6 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_MANY_ARGS:
		// Handle the case of too many arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments!\n");
 801304e:	4b2d      	ldr	r3, [pc, #180]	; (8013104 <_doTask+0x150>)
 8013050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013052:	492e      	ldr	r1, [pc, #184]	; (801310c <_doTask+0x158>)
 8013054:	4618      	mov	r0, r3
 8013056:	f000 fde9 	bl	8013c2c <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 801305a:	4b2a      	ldr	r3, [pc, #168]	; (8013104 <_doTask+0x150>)
 801305c:	6a1b      	ldr	r3, [r3, #32]
 801305e:	6a1b      	ldr	r3, [r3, #32]
 8013060:	4618      	mov	r0, r3
 8013062:	f001 fae7 	bl	8014634 <pifTask_SetTrigger>
		break;
 8013066:	e036      	b.n	80130d6 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_FEW_ARGS:
		// Handle the case of too few arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments!\n");
 8013068:	4b26      	ldr	r3, [pc, #152]	; (8013104 <_doTask+0x150>)
 801306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801306c:	4928      	ldr	r1, [pc, #160]	; (8013110 <_doTask+0x15c>)
 801306e:	4618      	mov	r0, r3
 8013070:	f000 fddc 	bl	8013c2c <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013074:	4b23      	ldr	r3, [pc, #140]	; (8013104 <_doTask+0x150>)
 8013076:	6a1b      	ldr	r3, [r3, #32]
 8013078:	6a1b      	ldr	r3, [r3, #32]
 801307a:	4618      	mov	r0, r3
 801307c:	f001 fada 	bl	8014634 <pifTask_SetTrigger>
		break;
 8013080:	e029      	b.n	80130d6 <_doTask+0x122>

	case PIF_LOG_CMD_INVALID_ARG:
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Invalid arguments!\n");
 8013082:	4b20      	ldr	r3, [pc, #128]	; (8013104 <_doTask+0x150>)
 8013084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013086:	4923      	ldr	r1, [pc, #140]	; (8013114 <_doTask+0x160>)
 8013088:	4618      	mov	r0, r3
 801308a:	f000 fdcf 	bl	8013c2c <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 801308e:	4b1d      	ldr	r3, [pc, #116]	; (8013104 <_doTask+0x150>)
 8013090:	6a1b      	ldr	r3, [r3, #32]
 8013092:	6a1b      	ldr	r3, [r3, #32]
 8013094:	4618      	mov	r0, r3
 8013096:	f001 facd 	bl	8014634 <pifTask_SetTrigger>
		break;
 801309a:	e01c      	b.n	80130d6 <_doTask+0x122>

	default:
		// Otherwise the command was executed.  Print the error
		// code if one was returned.
		if (status < PIF_LOG_CMD_NO_ERROR && status > PIF_LOG_CMD_USER_ERROR) {
 801309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309e:	2b00      	cmp	r3, #0
 80130a0:	da18      	bge.n	80130d4 <_doTask+0x120>
 80130a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a4:	f113 0f09 	cmn.w	r3, #9
 80130a8:	db14      	blt.n	80130d4 <_doTask+0x120>
			pif_Printf(msg, "Command returned error code: %d\n", status);
 80130aa:	f107 0308 	add.w	r3, r7, #8
 80130ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130b0:	4919      	ldr	r1, [pc, #100]	; (8013118 <_doTask+0x164>)
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fe fcd4 	bl	8011a60 <pif_Printf>
			pifRingBuffer_PutString(s_log.p_tx_buffer, msg);
 80130b8:	4b12      	ldr	r3, [pc, #72]	; (8013104 <_doTask+0x150>)
 80130ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130bc:	f107 0208 	add.w	r2, r7, #8
 80130c0:	4611      	mov	r1, r2
 80130c2:	4618      	mov	r0, r3
 80130c4:	f000 fdb2 	bl	8013c2c <pifRingBuffer_PutString>
			pifTask_SetTrigger(s_log.p_comm->_p_task);
 80130c8:	4b0e      	ldr	r3, [pc, #56]	; (8013104 <_doTask+0x150>)
 80130ca:	6a1b      	ldr	r3, [r3, #32]
 80130cc:	6a1b      	ldr	r3, [r3, #32]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f001 fab0 	bl	8014634 <pifTask_SetTrigger>
		}
		break;
 80130d4:	bf00      	nop
	}

	pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt);
 80130d6:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <_doTask+0x150>)
 80130d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130da:	4a0a      	ldr	r2, [pc, #40]	; (8013104 <_doTask+0x150>)
 80130dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80130de:	4611      	mov	r1, r2
 80130e0:	4618      	mov	r0, r3
 80130e2:	f000 fda3 	bl	8013c2c <pifRingBuffer_PutString>
	pifTask_SetTrigger(s_log.p_comm->_p_task);
 80130e6:	4b07      	ldr	r3, [pc, #28]	; (8013104 <_doTask+0x150>)
 80130e8:	6a1b      	ldr	r3, [r3, #32]
 80130ea:	6a1b      	ldr	r3, [r3, #32]
 80130ec:	4618      	mov	r0, r3
 80130ee:	f001 faa1 	bl	8014634 <pifTask_SetTrigger>

	s_log.cmd_done = FALSE;
 80130f2:	4b04      	ldr	r3, [pc, #16]	; (8013104 <_doTask+0x150>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 80130fa:	2300      	movs	r3, #0
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3738      	adds	r7, #56	; 0x38
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	20001c90 	.word	0x20001c90
 8013108:	08027a48 	.word	0x08027a48
 801310c:	08027a60 	.word	0x08027a60
 8013110:	08027a78 	.word	0x08027a78
 8013114:	08027a8c 	.word	0x08027a8c
 8013118:	08027aa0 	.word	0x08027aa0

0801311c <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 801311c:	b5b0      	push	{r4, r5, r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312e:	4618      	mov	r0, r3
 8013130:	f000 fc29 	bl	8013986 <pifRingBuffer_IsEmpty>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d11f      	bne.n	801317a <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6a1c      	ldr	r4, [r3, #32]
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013142:	2100      	movs	r1, #0
 8013144:	4618      	mov	r0, r3
 8013146:	f000 fbc6 	bl	80138d6 <pifRingBuffer_GetTailPointer>
 801314a:	4605      	mov	r5, r0
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013150:	2100      	movs	r1, #0
 8013152:	4618      	mov	r0, r3
 8013154:	f000 fc4c 	bl	80139f0 <pifRingBuffer_GetLinerSize>
 8013158:	4603      	mov	r3, r0
 801315a:	461a      	mov	r2, r3
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	4629      	mov	r1, r5
 8013160:	4620      	mov	r0, r4
 8013162:	4798      	blx	r3
 8013164:	4603      	mov	r3, r0
 8013166:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801316c:	897a      	ldrh	r2, [r7, #10]
 801316e:	4611      	mov	r1, r2
 8013170:	4618      	mov	r0, r3
 8013172:	f000 fe1a 	bl	8013daa <pifRingBuffer_Remove>
		return TRUE;
 8013176:	2301      	movs	r3, #1
 8013178:	e000      	b.n	801317c <_evtSending+0x60>
	}
	return FALSE;
 801317a:	2300      	movs	r3, #0
}
 801317c:	4618      	mov	r0, r3
 801317e:	3710      	adds	r7, #16
 8013180:	46bd      	mov	sp, r7
 8013182:	bdb0      	pop	{r4, r5, r7, pc}

08013184 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	460b      	mov	r3, r1
 801318e:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 8013190:	78fb      	ldrb	r3, [r7, #3]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d109      	bne.n	80131aa <_printLog+0x26>
 8013196:	4810      	ldr	r0, [pc, #64]	; (80131d8 <_printLog+0x54>)
 8013198:	f000 fbe4 	bl	8013964 <pifRingBuffer_IsBuffer>
 801319c:	4603      	mov	r3, r0
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d003      	beq.n	80131aa <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 80131a2:	6879      	ldr	r1, [r7, #4]
 80131a4:	480c      	ldr	r0, [pc, #48]	; (80131d8 <_printLog+0x54>)
 80131a6:	f000 fd41 	bl	8013c2c <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 80131aa:	4b0c      	ldr	r3, [pc, #48]	; (80131dc <_printLog+0x58>)
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d105      	bne.n	80131be <_printLog+0x3a>
 80131b2:	78fb      	ldrb	r3, [r7, #3]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d00b      	beq.n	80131d0 <_printLog+0x4c>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80131b8:	e001      	b.n	80131be <_printLog+0x3a>
        	pifTaskManager_Yield();
 80131ba:	f001 fc83 	bl	8014ac4 <pifTaskManager_Yield>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 80131be:	4b07      	ldr	r3, [pc, #28]	; (80131dc <_printLog+0x58>)
 80131c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c2:	6879      	ldr	r1, [r7, #4]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f000 fd31 	bl	8013c2c <pifRingBuffer_PutString>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d0f4      	beq.n	80131ba <_printLog+0x36>
        }
	}
}
 80131d0:	bf00      	nop
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	20001c94 	.word	0x20001c94
 80131dc:	20001c90 	.word	0x20001c90

080131e0 <_printTime>:

static void _printTime()
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
	int offset = 0;
 80131e6:	2300      	movs	r3, #0
 80131e8:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	1c5a      	adds	r2, r3, #1
 80131ee:	607a      	str	r2, [r7, #4]
 80131f0:	4a35      	ldr	r2, [pc, #212]	; (80132c8 <_printTime+0xe8>)
 80131f2:	210a      	movs	r1, #10
 80131f4:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	4a33      	ldr	r2, [pc, #204]	; (80132c8 <_printTime+0xe8>)
 80131fa:	4413      	add	r3, r2
 80131fc:	4a33      	ldr	r2, [pc, #204]	; (80132cc <_printTime+0xec>)
 80131fe:	7952      	ldrb	r2, [r2, #5]
 8013200:	b2d2      	uxtb	r2, r2
 8013202:	4611      	mov	r1, r2
 8013204:	2202      	movs	r2, #2
 8013206:	4618      	mov	r0, r3
 8013208:	f7fe f844 	bl	8011294 <pif_DecToString>
 801320c:	4602      	mov	r2, r0
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	4413      	add	r3, r2
 8013212:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	607a      	str	r2, [r7, #4]
 801321a:	4a2b      	ldr	r2, [pc, #172]	; (80132c8 <_printTime+0xe8>)
 801321c:	212e      	movs	r1, #46	; 0x2e
 801321e:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	4a29      	ldr	r2, [pc, #164]	; (80132c8 <_printTime+0xe8>)
 8013224:	4413      	add	r3, r2
 8013226:	4a2a      	ldr	r2, [pc, #168]	; (80132d0 <_printTime+0xf0>)
 8013228:	8812      	ldrh	r2, [r2, #0]
 801322a:	b292      	uxth	r2, r2
 801322c:	4611      	mov	r1, r2
 801322e:	2203      	movs	r2, #3
 8013230:	4618      	mov	r0, r3
 8013232:	f7fe f82f 	bl	8011294 <pif_DecToString>
 8013236:	4602      	mov	r2, r0
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	4413      	add	r3, r2
 801323c:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	1c5a      	adds	r2, r3, #1
 8013242:	607a      	str	r2, [r7, #4]
 8013244:	4a20      	ldr	r2, [pc, #128]	; (80132c8 <_printTime+0xe8>)
 8013246:	2120      	movs	r1, #32
 8013248:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	1c5a      	adds	r2, r3, #1
 801324e:	607a      	str	r2, [r7, #4]
 8013250:	4a1d      	ldr	r2, [pc, #116]	; (80132c8 <_printTime+0xe8>)
 8013252:	2154      	movs	r1, #84	; 0x54
 8013254:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	1c5a      	adds	r2, r3, #1
 801325a:	607a      	str	r2, [r7, #4]
 801325c:	4a1a      	ldr	r2, [pc, #104]	; (80132c8 <_printTime+0xe8>)
 801325e:	2120      	movs	r1, #32
 8013260:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	4a18      	ldr	r2, [pc, #96]	; (80132c8 <_printTime+0xe8>)
 8013266:	4413      	add	r3, r2
 8013268:	4a18      	ldr	r2, [pc, #96]	; (80132cc <_printTime+0xec>)
 801326a:	78d2      	ldrb	r2, [r2, #3]
 801326c:	b2d2      	uxtb	r2, r2
 801326e:	4611      	mov	r1, r2
 8013270:	2202      	movs	r2, #2
 8013272:	4618      	mov	r0, r3
 8013274:	f7fe f80e 	bl	8011294 <pif_DecToString>
 8013278:	4602      	mov	r2, r0
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4413      	add	r3, r2
 801327e:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	1c5a      	adds	r2, r3, #1
 8013284:	607a      	str	r2, [r7, #4]
 8013286:	4a10      	ldr	r2, [pc, #64]	; (80132c8 <_printTime+0xe8>)
 8013288:	213a      	movs	r1, #58	; 0x3a
 801328a:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4a0e      	ldr	r2, [pc, #56]	; (80132c8 <_printTime+0xe8>)
 8013290:	4413      	add	r3, r2
 8013292:	4a0e      	ldr	r2, [pc, #56]	; (80132cc <_printTime+0xec>)
 8013294:	7912      	ldrb	r2, [r2, #4]
 8013296:	b2d2      	uxtb	r2, r2
 8013298:	4611      	mov	r1, r2
 801329a:	2202      	movs	r2, #2
 801329c:	4618      	mov	r0, r3
 801329e:	f7fd fff9 	bl	8011294 <pif_DecToString>
 80132a2:	4602      	mov	r2, r0
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4413      	add	r3, r2
 80132a8:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	1c5a      	adds	r2, r3, #1
 80132ae:	607a      	str	r2, [r7, #4]
 80132b0:	4a05      	ldr	r2, [pc, #20]	; (80132c8 <_printTime+0xe8>)
 80132b2:	2120      	movs	r1, #32
 80132b4:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 80132b6:	2100      	movs	r1, #0
 80132b8:	4803      	ldr	r0, [pc, #12]	; (80132c8 <_printTime+0xe8>)
 80132ba:	f7ff ff63 	bl	8013184 <_printLog>
}
 80132be:	bf00      	nop
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	20001cf8 	.word	0x20001cf8
 80132cc:	20001c64 	.word	0x20001c64
 80132d0:	20001c5c 	.word	0x20001c5c

080132d4 <pifLog_Init>:

BOOL pifLog_Init()
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 80132da:	2264      	movs	r2, #100	; 0x64
 80132dc:	2100      	movs	r1, #0
 80132de:	480f      	ldr	r0, [pc, #60]	; (801331c <pifLog_Init+0x48>)
 80132e0:	f00f feac 	bl	802303c <memset>

	s_log.enable = TRUE;
 80132e4:	4b0d      	ldr	r3, [pc, #52]	; (801331c <pifLog_Init+0x48>)
 80132e6:	2201      	movs	r2, #1
 80132e8:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, _doTask, &s_log, FALSE);
 80132ea:	2300      	movs	r3, #0
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	4b0b      	ldr	r3, [pc, #44]	; (801331c <pifLog_Init+0x48>)
 80132f0:	4a0b      	ldr	r2, [pc, #44]	; (8013320 <pifLog_Init+0x4c>)
 80132f2:	2100      	movs	r1, #0
 80132f4:	2007      	movs	r0, #7
 80132f6:	f001 fa23 	bl	8014740 <pifTaskManager_Add>
 80132fa:	4603      	mov	r3, r0
 80132fc:	4a07      	ldr	r2, [pc, #28]	; (801331c <pifLog_Init+0x48>)
 80132fe:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 8013300:	4b06      	ldr	r3, [pc, #24]	; (801331c <pifLog_Init+0x48>)
 8013302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013304:	2b00      	cmp	r3, #0
 8013306:	d101      	bne.n	801330c <pifLog_Init+0x38>
 8013308:	2300      	movs	r3, #0
 801330a:	e004      	b.n	8013316 <pifLog_Init+0x42>
	s_log.p_task->name = "Log";
 801330c:	4b03      	ldr	r3, [pc, #12]	; (801331c <pifLog_Init+0x48>)
 801330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013310:	4a04      	ldr	r2, [pc, #16]	; (8013324 <pifLog_Init+0x50>)
 8013312:	601a      	str	r2, [r3, #0]
#endif
   	return TRUE;
 8013314:	2301      	movs	r3, #1
}
 8013316:	4618      	mov	r0, r3
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	20001c90 	.word	0x20001c90
 8013320:	08012fb5 	.word	0x08012fb5
 8013324:	08027ac4 	.word	0x08027ac4

08013328 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <pifLog_UseCommand+0x16>
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d104      	bne.n	8013348 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 801333e:	4b12      	ldr	r3, [pc, #72]	; (8013388 <pifLog_UseCommand+0x60>)
 8013340:	2201      	movs	r2, #1
 8013342:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013344:	2300      	movs	r3, #0
 8013346:	e01b      	b.n	8013380 <pifLog_UseCommand+0x58>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013348:	2120      	movs	r1, #32
 801334a:	2001      	movs	r0, #1
 801334c:	f00f fe26 	bl	8022f9c <calloc>
 8013350:	4603      	mov	r3, r0
 8013352:	461a      	mov	r2, r3
 8013354:	4b0d      	ldr	r3, [pc, #52]	; (801338c <pifLog_UseCommand+0x64>)
 8013356:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013358:	4b0c      	ldr	r3, [pc, #48]	; (801338c <pifLog_UseCommand+0x64>)
 801335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801335c:	2b00      	cmp	r3, #0
 801335e:	d104      	bne.n	801336a <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 8013360:	4b09      	ldr	r3, [pc, #36]	; (8013388 <pifLog_UseCommand+0x60>)
 8013362:	2203      	movs	r2, #3
 8013364:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013366:	2300      	movs	r3, #0
 8013368:	e00a      	b.n	8013380 <pifLog_UseCommand+0x58>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 801336a:	4b08      	ldr	r3, [pc, #32]	; (801338c <pifLog_UseCommand+0x64>)
 801336c:	2220      	movs	r2, #32
 801336e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table = p_cmd_table;
 8013372:	4a06      	ldr	r2, [pc, #24]	; (801338c <pifLog_UseCommand+0x64>)
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6593      	str	r3, [r2, #88]	; 0x58
    s_log.p_prompt = p_prompt;
 8013378:	4a04      	ldr	r2, [pc, #16]	; (801338c <pifLog_UseCommand+0x64>)
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	65d3      	str	r3, [r2, #92]	; 0x5c
    return TRUE;
 801337e:	2301      	movs	r3, #1
}
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	20001c55 	.word	0x20001c55
 801338c:	20001c90 	.word	0x20001c90

08013390 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b098      	sub	sp, #96	; 0x60
 8013394:	af00      	add	r7, sp, #0
 8013396:	4603      	mov	r3, r0
 8013398:	6039      	str	r1, [r7, #0]
 801339a:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 801339c:	2300      	movs	r3, #0
 801339e:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 80133a0:	79fb      	ldrb	r3, [r7, #7]
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d96b      	bls.n	801347e <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 80133a6:	4b3d      	ldr	r3, [pc, #244]	; (801349c <pifLog_Print+0x10c>)
 80133a8:	791b      	ldrb	r3, [r3, #4]
 80133aa:	b2da      	uxtb	r2, r3
 80133ac:	4b3c      	ldr	r3, [pc, #240]	; (80134a0 <pifLog_Print+0x110>)
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d006      	beq.n	80133c2 <pifLog_Print+0x32>
        	_printTime();
 80133b4:	f7ff ff14 	bl	80131e0 <_printTime>
        	s_minute = pif_datetime.minute;
 80133b8:	4b38      	ldr	r3, [pc, #224]	; (801349c <pifLog_Print+0x10c>)
 80133ba:	791b      	ldrb	r3, [r3, #4]
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	4b38      	ldr	r3, [pc, #224]	; (80134a0 <pifLog_Print+0x110>)
 80133c0:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80133c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133c4:	1c5a      	adds	r2, r3, #1
 80133c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80133c8:	3360      	adds	r3, #96	; 0x60
 80133ca:	443b      	add	r3, r7
 80133cc:	220a      	movs	r2, #10
 80133ce:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80133d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133d4:	f107 020c 	add.w	r2, r7, #12
 80133d8:	4413      	add	r3, r2
 80133da:	4a30      	ldr	r2, [pc, #192]	; (801349c <pifLog_Print+0x10c>)
 80133dc:	7952      	ldrb	r2, [r2, #5]
 80133de:	b2d2      	uxtb	r2, r2
 80133e0:	4611      	mov	r1, r2
 80133e2:	2202      	movs	r2, #2
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7fd ff55 	bl	8011294 <pif_DecToString>
 80133ea:	4602      	mov	r2, r0
 80133ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133ee:	4413      	add	r3, r2
 80133f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 80133f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133f4:	1c5a      	adds	r2, r3, #1
 80133f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80133f8:	3360      	adds	r3, #96	; 0x60
 80133fa:	443b      	add	r3, r7
 80133fc:	222e      	movs	r2, #46	; 0x2e
 80133fe:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 8013402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013404:	f107 020c 	add.w	r2, r7, #12
 8013408:	4413      	add	r3, r2
 801340a:	4a26      	ldr	r2, [pc, #152]	; (80134a4 <pifLog_Print+0x114>)
 801340c:	8812      	ldrh	r2, [r2, #0]
 801340e:	b292      	uxth	r2, r2
 8013410:	4611      	mov	r1, r2
 8013412:	2203      	movs	r2, #3
 8013414:	4618      	mov	r0, r3
 8013416:	f7fd ff3d 	bl	8011294 <pif_DecToString>
 801341a:	4602      	mov	r2, r0
 801341c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801341e:	4413      	add	r3, r2
 8013420:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 8013422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013424:	1c5a      	adds	r2, r3, #1
 8013426:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013428:	3360      	adds	r3, #96	; 0x60
 801342a:	443b      	add	r3, r7
 801342c:	2220      	movs	r2, #32
 801342e:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013432:	79fb      	ldrb	r3, [r7, #7]
 8013434:	1e9a      	subs	r2, r3, #2
 8013436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013438:	1c59      	adds	r1, r3, #1
 801343a:	65f9      	str	r1, [r7, #92]	; 0x5c
 801343c:	491a      	ldr	r1, [pc, #104]	; (80134a8 <pifLog_Print+0x118>)
 801343e:	5c8a      	ldrb	r2, [r1, r2]
 8013440:	3360      	adds	r3, #96	; 0x60
 8013442:	443b      	add	r3, r7
 8013444:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801344a:	1c5a      	adds	r2, r3, #1
 801344c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801344e:	3360      	adds	r3, #96	; 0x60
 8013450:	443b      	add	r3, r7
 8013452:	2220      	movs	r2, #32
 8013454:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013458:	f107 020c 	add.w	r2, r7, #12
 801345c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801345e:	4413      	add	r3, r2
 8013460:	2200      	movs	r2, #0
 8013462:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	2b01      	cmp	r3, #1
 8013468:	bf0c      	ite	eq
 801346a:	2301      	moveq	r3, #1
 801346c:	2300      	movne	r3, #0
 801346e:	b2db      	uxtb	r3, r3
 8013470:	461a      	mov	r2, r3
 8013472:	f107 030c 	add.w	r3, r7, #12
 8013476:	4611      	mov	r1, r2
 8013478:	4618      	mov	r0, r3
 801347a:	f7ff fe83 	bl	8013184 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	2b01      	cmp	r3, #1
 8013482:	bf0c      	ite	eq
 8013484:	2301      	moveq	r3, #1
 8013486:	2300      	movne	r3, #0
 8013488:	b2db      	uxtb	r3, r3
 801348a:	4619      	mov	r1, r3
 801348c:	6838      	ldr	r0, [r7, #0]
 801348e:	f7ff fe79 	bl	8013184 <_printLog>
}
 8013492:	bf00      	nop
 8013494:	3760      	adds	r7, #96	; 0x60
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	20001c64 	.word	0x20001c64
 80134a0:	20000128 	.word	0x20000128
 80134a4:	20001c5c 	.word	0x20001c5c
 80134a8:	080296e0 	.word	0x080296e0

080134ac <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 80134ac:	b40e      	push	{r1, r2, r3}
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b09b      	sub	sp, #108	; 0x6c
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	4603      	mov	r3, r0
 80134b6:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 80134b8:	2300      	movs	r3, #0
 80134ba:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 80134bc:	79fb      	ldrb	r3, [r7, #7]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d958      	bls.n	8013574 <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 80134c2:	4b3d      	ldr	r3, [pc, #244]	; (80135b8 <pifLog_Printf+0x10c>)
 80134c4:	791b      	ldrb	r3, [r3, #4]
 80134c6:	b2da      	uxtb	r2, r3
 80134c8:	4b3c      	ldr	r3, [pc, #240]	; (80135bc <pifLog_Printf+0x110>)
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d006      	beq.n	80134de <pifLog_Printf+0x32>
        	_printTime();
 80134d0:	f7ff fe86 	bl	80131e0 <_printTime>
        	s_minute = pif_datetime.minute;
 80134d4:	4b38      	ldr	r3, [pc, #224]	; (80135b8 <pifLog_Printf+0x10c>)
 80134d6:	791b      	ldrb	r3, [r3, #4]
 80134d8:	b2da      	uxtb	r2, r3
 80134da:	4b38      	ldr	r3, [pc, #224]	; (80135bc <pifLog_Printf+0x110>)
 80134dc:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80134de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134e0:	1c5a      	adds	r2, r3, #1
 80134e2:	667a      	str	r2, [r7, #100]	; 0x64
 80134e4:	3368      	adds	r3, #104	; 0x68
 80134e6:	443b      	add	r3, r7
 80134e8:	220a      	movs	r2, #10
 80134ea:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80134ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134f0:	f107 020c 	add.w	r2, r7, #12
 80134f4:	4413      	add	r3, r2
 80134f6:	4a30      	ldr	r2, [pc, #192]	; (80135b8 <pifLog_Printf+0x10c>)
 80134f8:	7952      	ldrb	r2, [r2, #5]
 80134fa:	b2d2      	uxtb	r2, r2
 80134fc:	4611      	mov	r1, r2
 80134fe:	2202      	movs	r2, #2
 8013500:	4618      	mov	r0, r3
 8013502:	f7fd fec7 	bl	8011294 <pif_DecToString>
 8013506:	4602      	mov	r2, r0
 8013508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801350a:	4413      	add	r3, r2
 801350c:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 801350e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013510:	1c5a      	adds	r2, r3, #1
 8013512:	667a      	str	r2, [r7, #100]	; 0x64
 8013514:	3368      	adds	r3, #104	; 0x68
 8013516:	443b      	add	r3, r7
 8013518:	222e      	movs	r2, #46	; 0x2e
 801351a:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 801351e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013520:	f107 020c 	add.w	r2, r7, #12
 8013524:	4413      	add	r3, r2
 8013526:	4a26      	ldr	r2, [pc, #152]	; (80135c0 <pifLog_Printf+0x114>)
 8013528:	8812      	ldrh	r2, [r2, #0]
 801352a:	b292      	uxth	r2, r2
 801352c:	4611      	mov	r1, r2
 801352e:	2203      	movs	r2, #3
 8013530:	4618      	mov	r0, r3
 8013532:	f7fd feaf 	bl	8011294 <pif_DecToString>
 8013536:	4602      	mov	r2, r0
 8013538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801353a:	4413      	add	r3, r2
 801353c:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 801353e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013540:	1c5a      	adds	r2, r3, #1
 8013542:	667a      	str	r2, [r7, #100]	; 0x64
 8013544:	3368      	adds	r3, #104	; 0x68
 8013546:	443b      	add	r3, r7
 8013548:	2220      	movs	r2, #32
 801354a:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 801354e:	79fb      	ldrb	r3, [r7, #7]
 8013550:	1e9a      	subs	r2, r3, #2
 8013552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013554:	1c59      	adds	r1, r3, #1
 8013556:	6679      	str	r1, [r7, #100]	; 0x64
 8013558:	491a      	ldr	r1, [pc, #104]	; (80135c4 <pifLog_Printf+0x118>)
 801355a:	5c8a      	ldrb	r2, [r1, r2]
 801355c:	3368      	adds	r3, #104	; 0x68
 801355e:	443b      	add	r3, r7
 8013560:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 8013564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013566:	1c5a      	adds	r2, r3, #1
 8013568:	667a      	str	r2, [r7, #100]	; 0x64
 801356a:	3368      	adds	r3, #104	; 0x68
 801356c:	443b      	add	r3, r7
 801356e:	2220      	movs	r2, #32
 8013570:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 8013574:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013578:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 801357a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801357c:	f107 020c 	add.w	r2, r7, #12
 8013580:	4413      	add	r3, r2
 8013582:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8013586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013588:	4618      	mov	r0, r3
 801358a:	f7fe f80f 	bl	80115ac <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	2b01      	cmp	r3, #1
 8013592:	bf0c      	ite	eq
 8013594:	2301      	moveq	r3, #1
 8013596:	2300      	movne	r3, #0
 8013598:	b2db      	uxtb	r3, r3
 801359a:	461a      	mov	r2, r3
 801359c:	f107 030c 	add.w	r3, r7, #12
 80135a0:	4611      	mov	r1, r2
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff fdee 	bl	8013184 <_printLog>
}
 80135a8:	bf00      	nop
 80135aa:	376c      	adds	r7, #108	; 0x6c
 80135ac:	46bd      	mov	sp, r7
 80135ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80135b2:	b003      	add	sp, #12
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	20001c64 	.word	0x20001c64
 80135bc:	20000128 	.word	0x20000128
 80135c0:	20001c5c 	.word	0x20001c5c
 80135c4:	080296e0 	.word	0x080296e0

080135c8 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 80135d0:	2150      	movs	r1, #80	; 0x50
 80135d2:	2000      	movs	r0, #0
 80135d4:	f000 f8c8 	bl	8013768 <pifRingBuffer_CreateHeap>
 80135d8:	4603      	mov	r3, r0
 80135da:	4a0b      	ldr	r2, [pc, #44]	; (8013608 <pifLog_AttachComm+0x40>)
 80135dc:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 80135de:	4b0a      	ldr	r3, [pc, #40]	; (8013608 <pifLog_AttachComm+0x40>)
 80135e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d101      	bne.n	80135ea <pifLog_AttachComm+0x22>
 80135e6:	2300      	movs	r3, #0
 80135e8:	e009      	b.n	80135fe <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 80135ea:	4a07      	ldr	r2, [pc, #28]	; (8013608 <pifLog_AttachComm+0x40>)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 80135f0:	4b06      	ldr	r3, [pc, #24]	; (801360c <pifLog_AttachComm+0x44>)
 80135f2:	4a07      	ldr	r2, [pc, #28]	; (8013610 <pifLog_AttachComm+0x48>)
 80135f4:	4904      	ldr	r1, [pc, #16]	; (8013608 <pifLog_AttachComm+0x40>)
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f7fe fbf4 	bl	8011de4 <pifComm_AttachClient>
    return TRUE;
 80135fc:	2301      	movs	r3, #1
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	20001c90 	.word	0x20001c90
 801360c:	0801311d 	.word	0x0801311d
 8013610:	08012f73 	.word	0x08012f73

08013614 <pifLog_DetachComm>:

void pifLog_DetachComm()
{
 8013614:	b580      	push	{r7, lr}
 8013616:	af00      	add	r7, sp, #0
	pifComm_DetachClient(s_log.p_comm);
 8013618:	4b06      	ldr	r3, [pc, #24]	; (8013634 <pifLog_DetachComm+0x20>)
 801361a:	6a1b      	ldr	r3, [r3, #32]
 801361c:	4618      	mov	r0, r3
 801361e:	f7fe fbf7 	bl	8011e10 <pifComm_DetachClient>
	s_log.p_comm = NULL;
 8013622:	4b04      	ldr	r3, [pc, #16]	; (8013634 <pifLog_DetachComm+0x20>)
 8013624:	2200      	movs	r2, #0
 8013626:	621a      	str	r2, [r3, #32]

	pifRingBuffer_Destroy(&s_log.p_tx_buffer);
 8013628:	4803      	ldr	r0, [pc, #12]	; (8013638 <pifLog_DetachComm+0x24>)
 801362a:	f000 f8c9 	bl	80137c0 <pifRingBuffer_Destroy>
}
 801362e:	bf00      	nop
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop
 8013634:	20001c90 	.word	0x20001c90
 8013638:	20001cb4 	.word	0x20001cb4

0801363c <pifLog_SendAndExit>:

void pifLog_SendAndExit()
{
 801363c:	b580      	push	{r7, lr}
 801363e:	af00      	add	r7, sp, #0
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013640:	e008      	b.n	8013654 <pifLog_SendAndExit+0x18>
		s_log.p_comm->_p_task->__evt_loop(s_log.p_comm->_p_task);
 8013642:	4b0a      	ldr	r3, [pc, #40]	; (801366c <pifLog_SendAndExit+0x30>)
 8013644:	6a1b      	ldr	r3, [r3, #32]
 8013646:	6a1b      	ldr	r3, [r3, #32]
 8013648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801364a:	4a08      	ldr	r2, [pc, #32]	; (801366c <pifLog_SendAndExit+0x30>)
 801364c:	6a12      	ldr	r2, [r2, #32]
 801364e:	6a12      	ldr	r2, [r2, #32]
 8013650:	4610      	mov	r0, r2
 8013652:	4798      	blx	r3
	while (pifRingBuffer_GetFillSize(s_log.p_tx_buffer)) {
 8013654:	4b05      	ldr	r3, [pc, #20]	; (801366c <pifLog_SendAndExit+0x30>)
 8013656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013658:	4618      	mov	r0, r3
 801365a:	f000 f9a7 	bl	80139ac <pifRingBuffer_GetFillSize>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1ee      	bne.n	8013642 <pifLog_SendAndExit+0x6>
	}
}
 8013664:	bf00      	nop
 8013666:	bf00      	nop
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	20001c90 	.word	0x20001c90

08013670 <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	460b      	mov	r3, r1
 801367a:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	791b      	ldrb	r3, [r3, #4]
 8013680:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8013684:	b2db      	uxtb	r3, r3
 8013686:	2b01      	cmp	r3, #1
 8013688:	d002      	beq.n	8013690 <_chopOff+0x20>
 801368a:	2b02      	cmp	r3, #2
 801368c:	d02e      	beq.n	80136ec <_chopOff+0x7c>
 801368e:	e065      	b.n	801375c <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 8013690:	2300      	movs	r3, #0
 8013692:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	8adb      	ldrh	r3, [r3, #22]
 8013698:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 801369a:	e021      	b.n	80136e0 <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	691a      	ldr	r2, [r3, #16]
 80136a0:	89bb      	ldrh	r3, [r7, #12]
 80136a2:	4413      	add	r3, r2
 80136a4:	781a      	ldrb	r2, [r3, #0]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	7e9b      	ldrb	r3, [r3, #26]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d108      	bne.n	80136c0 <_chopOff+0x50>
				if (size > count) {
 80136ae:	89fa      	ldrh	r2, [r7, #14]
 80136b0:	887b      	ldrh	r3, [r7, #2]
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d904      	bls.n	80136c0 <_chopOff+0x50>
					p_owner->__tail = tail;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	89ba      	ldrh	r2, [r7, #12]
 80136ba:	82da      	strh	r2, [r3, #22]
					return TRUE;
 80136bc:	2301      	movs	r3, #1
 80136be:	e04e      	b.n	801375e <_chopOff+0xee>
				}
			}
			tail++;
 80136c0:	89bb      	ldrh	r3, [r7, #12]
 80136c2:	3301      	adds	r3, #1
 80136c4:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	891b      	ldrh	r3, [r3, #8]
 80136ca:	89ba      	ldrh	r2, [r7, #12]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d304      	bcc.n	80136da <_chopOff+0x6a>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	891b      	ldrh	r3, [r3, #8]
 80136d4:	89ba      	ldrh	r2, [r7, #12]
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	81bb      	strh	r3, [r7, #12]
			size++;
 80136da:	89fb      	ldrh	r3, [r7, #14]
 80136dc:	3301      	adds	r3, #1
 80136de:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	8a9b      	ldrh	r3, [r3, #20]
 80136e4:	89ba      	ldrh	r2, [r7, #12]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d1d8      	bne.n	801369c <_chopOff+0x2c>
		}
		break;
 80136ea:	e037      	b.n	801375c <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 f95d 	bl	80139ac <pifRingBuffer_GetFillSize>
 80136f2:	4603      	mov	r3, r0
 80136f4:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	8b5b      	ldrh	r3, [r3, #26]
 80136fa:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 80136fc:	e004      	b.n	8013708 <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	8b5a      	ldrh	r2, [r3, #26]
 8013702:	89fb      	ldrh	r3, [r7, #14]
 8013704:	4413      	add	r3, r2
 8013706:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013708:	887a      	ldrh	r2, [r7, #2]
 801370a:	89fb      	ldrh	r3, [r7, #14]
 801370c:	429a      	cmp	r2, r3
 801370e:	d8f6      	bhi.n	80136fe <_chopOff+0x8e>
		}
		if (size < length) {
 8013710:	89fa      	ldrh	r2, [r7, #14]
 8013712:	897b      	ldrh	r3, [r7, #10]
 8013714:	429a      	cmp	r2, r3
 8013716:	d216      	bcs.n	8013746 <_chopOff+0xd6>
			p_owner->__tail += size;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	8ada      	ldrh	r2, [r3, #22]
 801371c:	89fb      	ldrh	r3, [r7, #14]
 801371e:	4413      	add	r3, r2
 8013720:	b29a      	uxth	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	8ada      	ldrh	r2, [r3, #22]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	891b      	ldrh	r3, [r3, #8]
 801372e:	429a      	cmp	r2, r3
 8013730:	d307      	bcc.n	8013742 <_chopOff+0xd2>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	8ada      	ldrh	r2, [r3, #22]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	b29a      	uxth	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013742:	2301      	movs	r3, #1
 8013744:	e00b      	b.n	801375e <_chopOff+0xee>
		}
		else if (count <= length) {
 8013746:	887a      	ldrh	r2, [r7, #2]
 8013748:	897b      	ldrh	r3, [r7, #10]
 801374a:	429a      	cmp	r2, r3
 801374c:	d805      	bhi.n	801375a <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	8a9a      	ldrh	r2, [r3, #20]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	82da      	strh	r2, [r3, #22]
			return TRUE;
 8013756:	2301      	movs	r3, #1
 8013758:	e001      	b.n	801375e <_chopOff+0xee>
		}
		break;
 801375a:	bf00      	nop
	}
	return FALSE;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	3710      	adds	r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
	...

08013768 <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	4603      	mov	r3, r0
 8013770:	460a      	mov	r2, r1
 8013772:	80fb      	strh	r3, [r7, #6]
 8013774:	4613      	mov	r3, r2
 8013776:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 8013778:	201c      	movs	r0, #28
 801377a:	f00f fc41 	bl	8023000 <malloc>
 801377e:	4603      	mov	r3, r0
 8013780:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d104      	bne.n	8013792 <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 8013788:	4b0c      	ldr	r3, [pc, #48]	; (80137bc <pifRingBuffer_CreateHeap+0x54>)
 801378a:	2203      	movs	r2, #3
 801378c:	701a      	strb	r2, [r3, #0]
		return NULL;
 801378e:	2300      	movs	r3, #0
 8013790:	e010      	b.n	80137b4 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	88ba      	ldrh	r2, [r7, #4]
 8013796:	88f9      	ldrh	r1, [r7, #6]
 8013798:	4618      	mov	r0, r3
 801379a:	f000 f829 	bl	80137f0 <pifRingBuffer_InitHeap>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d106      	bne.n	80137b2 <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 80137a4:	f107 030c 	add.w	r3, r7, #12
 80137a8:	4618      	mov	r0, r3
 80137aa:	f000 f809 	bl	80137c0 <pifRingBuffer_Destroy>
		return NULL;
 80137ae:	2300      	movs	r3, #0
 80137b0:	e000      	b.n	80137b4 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 80137b2:	68fb      	ldr	r3, [r7, #12]
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3710      	adds	r7, #16
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	20001c55 	.word	0x20001c55

080137c0 <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b082      	sub	sp, #8
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00c      	beq.n	80137e8 <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	4618      	mov	r0, r3
 80137d4:	f000 f856 	bl	8013884 <pifRingBuffer_Clear>
		free(*pp_owner);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	4618      	mov	r0, r3
 80137de:	f00f fc17 	bl	8023010 <free>
		*pp_owner = NULL;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]
	}
}
 80137e8:	bf00      	nop
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	460b      	mov	r3, r1
 80137fa:	807b      	strh	r3, [r7, #2]
 80137fc:	4613      	mov	r3, r2
 80137fe:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d002      	beq.n	801380c <pifRingBuffer_InitHeap+0x1c>
 8013806:	883b      	ldrh	r3, [r7, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d104      	bne.n	8013816 <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 801380c:	4b1b      	ldr	r3, [pc, #108]	; (801387c <pifRingBuffer_InitHeap+0x8c>)
 801380e:	2201      	movs	r2, #1
 8013810:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8013812:	2300      	movs	r3, #0
 8013814:	e02e      	b.n	8013874 <pifRingBuffer_InitHeap+0x84>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013816:	221c      	movs	r2, #28
 8013818:	2100      	movs	r1, #0
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f00f fc0e 	bl	802303c <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 8013820:	883b      	ldrh	r3, [r7, #0]
 8013822:	4619      	mov	r1, r3
 8013824:	2001      	movs	r0, #1
 8013826:	f00f fbb9 	bl	8022f9c <calloc>
 801382a:	4603      	mov	r3, r0
 801382c:	461a      	mov	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d108      	bne.n	801384c <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 801383a:	4b10      	ldr	r3, [pc, #64]	; (801387c <pifRingBuffer_InitHeap+0x8c>)
 801383c:	2203      	movs	r2, #3
 801383e:	701a      	strb	r2, [r3, #0]
		goto fail;
 8013840:	bf00      	nop
    p_owner->_size = size;
	p_owner->__backup_head = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 f81e 	bl	8013884 <pifRingBuffer_Clear>
    return FALSE;
 8013848:	2300      	movs	r3, #0
 801384a:	e013      	b.n	8013874 <pifRingBuffer_InitHeap+0x84>
	if (id == PIF_ID_AUTO) id = pif_id++;
 801384c:	887b      	ldrh	r3, [r7, #2]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d106      	bne.n	8013860 <pifRingBuffer_InitHeap+0x70>
 8013852:	4b0b      	ldr	r3, [pc, #44]	; (8013880 <pifRingBuffer_InitHeap+0x90>)
 8013854:	881b      	ldrh	r3, [r3, #0]
 8013856:	1c5a      	adds	r2, r3, #1
 8013858:	b291      	uxth	r1, r2
 801385a:	4a09      	ldr	r2, [pc, #36]	; (8013880 <pifRingBuffer_InitHeap+0x90>)
 801385c:	8011      	strh	r1, [r2, #0]
 801385e:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	887a      	ldrh	r2, [r7, #2]
 8013864:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	883a      	ldrh	r2, [r7, #0]
 801386a:	811a      	strh	r2, [r3, #8]
	p_owner->__backup_head = size;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	883a      	ldrh	r2, [r7, #0]
 8013870:	831a      	strh	r2, [r3, #24]
    return TRUE;
 8013872:	2301      	movs	r3, #1
}
 8013874:	4618      	mov	r0, r3
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	20001c55 	.word	0x20001c55
 8013880:	2000011c 	.word	0x2000011c

08013884 <pifRingBuffer_Clear>:
	p_owner->__backup_head = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	791b      	ldrb	r3, [r3, #4]
 8013890:	f003 0301 	and.w	r3, r3, #1
 8013894:	b2db      	uxtb	r3, r3
 8013896:	2b00      	cmp	r3, #0
 8013898:	d108      	bne.n	80138ac <pifRingBuffer_Clear+0x28>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	691b      	ldr	r3, [r3, #16]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d004      	beq.n	80138ac <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	691b      	ldr	r3, [r3, #16]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f00f fbb2 	bl	8023010 <free>
    }
    p_owner->__p_buffer = NULL;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	611a      	str	r2, [r3, #16]
}
 80138b2:	bf00      	nop
 80138b4:	3708      	adds	r7, #8
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 80138ba:	b480      	push	{r7}
 80138bc:	b083      	sub	sp, #12
 80138be:	af00      	add	r7, sp, #0
 80138c0:	6078      	str	r0, [r7, #4]
 80138c2:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	683a      	ldr	r2, [r7, #0]
 80138c8:	60da      	str	r2, [r3, #12]
}
 80138ca:	bf00      	nop
 80138cc:	370c      	adds	r7, #12
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 80138d6:	b480      	push	{r7}
 80138d8:	b083      	sub	sp, #12
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
 80138de:	460b      	mov	r3, r1
 80138e0:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6919      	ldr	r1, [r3, #16]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	8adb      	ldrh	r3, [r3, #22]
 80138ea:	461a      	mov	r2, r3
 80138ec:	887b      	ldrh	r3, [r7, #2]
 80138ee:	4413      	add	r3, r2
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	8912      	ldrh	r2, [r2, #8]
 80138f4:	fb93 f0f2 	sdiv	r0, r3, r2
 80138f8:	fb00 f202 	mul.w	r2, r0, r2
 80138fc:	1a9b      	subs	r3, r3, r2
 80138fe:	440b      	add	r3, r1
}
 8013900:	4618      	mov	r0, r3
 8013902:	370c      	adds	r7, #12
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr

0801390c <pifRingBuffer_MoveHeadForLinear>:

BOOL pifRingBuffer_MoveHeadForLinear(PifRingBuffer* p_owner, uint16_t size)
{
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	460b      	mov	r3, r1
 8013916:	807b      	strh	r3, [r7, #2]
	if (size >= p_owner->_size) return FALSE;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	891b      	ldrh	r3, [r3, #8]
 801391c:	887a      	ldrh	r2, [r7, #2]
 801391e:	429a      	cmp	r2, r3
 8013920:	d301      	bcc.n	8013926 <pifRingBuffer_MoveHeadForLinear+0x1a>
 8013922:	2300      	movs	r3, #0
 8013924:	e018      	b.n	8013958 <pifRingBuffer_MoveHeadForLinear+0x4c>
	if (p_owner->__head != p_owner->__tail) return FALSE;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	8a9a      	ldrh	r2, [r3, #20]
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	8adb      	ldrh	r3, [r3, #22]
 801392e:	429a      	cmp	r2, r3
 8013930:	d001      	beq.n	8013936 <pifRingBuffer_MoveHeadForLinear+0x2a>
 8013932:	2300      	movs	r3, #0
 8013934:	e010      	b.n	8013958 <pifRingBuffer_MoveHeadForLinear+0x4c>
	if (p_owner->_size - p_owner->__head < size) p_owner->__head = p_owner->__tail = 0;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	891b      	ldrh	r3, [r3, #8]
 801393a:	461a      	mov	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	8a9b      	ldrh	r3, [r3, #20]
 8013940:	1ad2      	subs	r2, r2, r3
 8013942:	887b      	ldrh	r3, [r7, #2]
 8013944:	429a      	cmp	r2, r3
 8013946:	da06      	bge.n	8013956 <pifRingBuffer_MoveHeadForLinear+0x4a>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	82da      	strh	r2, [r3, #22]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	8ada      	ldrh	r2, [r3, #22]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	829a      	strh	r2, [r3, #20]
	return TRUE;
 8013956:	2301      	movs	r3, #1
}
 8013958:	4618      	mov	r0, r3
 801395a:	370c      	adds	r7, #12
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013964:	b480      	push	{r7}
 8013966:	b083      	sub	sp, #12
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	691b      	ldr	r3, [r3, #16]
 8013970:	2b00      	cmp	r3, #0
 8013972:	bf14      	ite	ne
 8013974:	2301      	movne	r3, #1
 8013976:	2300      	moveq	r3, #0
 8013978:	b2db      	uxtb	r3, r3
}
 801397a:	4618      	mov	r0, r3
 801397c:	370c      	adds	r7, #12
 801397e:	46bd      	mov	sp, r7
 8013980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013984:	4770      	bx	lr

08013986 <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 8013986:	b480      	push	{r7}
 8013988:	b083      	sub	sp, #12
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	8a9a      	ldrh	r2, [r3, #20]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8adb      	ldrh	r3, [r3, #22]
 8013996:	429a      	cmp	r2, r3
 8013998:	bf0c      	ite	eq
 801399a:	2301      	moveq	r3, #1
 801399c:	2300      	movne	r3, #0
 801399e:	b2db      	uxtb	r3, r3
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	370c      	adds	r7, #12
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b085      	sub	sp, #20
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	8a9a      	ldrh	r2, [r3, #20]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	8adb      	ldrh	r3, [r3, #22]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d306      	bcc.n	80139ce <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8a9a      	ldrh	r2, [r3, #20]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	8adb      	ldrh	r3, [r3, #22]
 80139c8:	1ad3      	subs	r3, r2, r3
 80139ca:	81fb      	strh	r3, [r7, #14]
 80139cc:	e009      	b.n	80139e2 <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	891a      	ldrh	r2, [r3, #8]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	8adb      	ldrh	r3, [r3, #22]
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	b29a      	uxth	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	8a9b      	ldrh	r3, [r3, #20]
 80139de:	4413      	add	r3, r2
 80139e0:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 80139e2:	89fb      	ldrh	r3, [r7, #14]
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3714      	adds	r7, #20
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr

080139f0 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	460b      	mov	r3, r1
 80139fa:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	8adb      	ldrh	r3, [r3, #22]
 8013a00:	461a      	mov	r2, r3
 8013a02:	887b      	ldrh	r3, [r7, #2]
 8013a04:	4413      	add	r3, r2
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	8912      	ldrh	r2, [r2, #8]
 8013a0a:	fb93 f1f2 	sdiv	r1, r3, r2
 8013a0e:	fb01 f202 	mul.w	r2, r1, r2
 8013a12:	1a9b      	subs	r3, r3, r2
 8013a14:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	8a9b      	ldrh	r3, [r3, #20]
 8013a1a:	89fa      	ldrh	r2, [r7, #14]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d805      	bhi.n	8013a2c <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	8a9a      	ldrh	r2, [r3, #20]
 8013a24:	89fb      	ldrh	r3, [r7, #14]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	e004      	b.n	8013a36 <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	891a      	ldrh	r2, [r3, #8]
 8013a30:	89fb      	ldrh	r3, [r7, #14]
 8013a32:	1ad3      	subs	r3, r2, r3
 8013a34:	b29b      	uxth	r3, r3
    }
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3714      	adds	r7, #20
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr

08013a42 <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013a42:	b480      	push	{r7}
 8013a44:	b085      	sub	sp, #20
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	8a9a      	ldrh	r2, [r3, #20]
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	8adb      	ldrh	r3, [r3, #22]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d206      	bcs.n	8013a64 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	8ada      	ldrh	r2, [r3, #22]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	8a9b      	ldrh	r3, [r3, #20]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	81fb      	strh	r3, [r7, #14]
 8013a62:	e009      	b.n	8013a78 <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	891a      	ldrh	r2, [r3, #8]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	8a9b      	ldrh	r3, [r3, #20]
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	8adb      	ldrh	r3, [r3, #22]
 8013a74:	4413      	add	r3, r2
 8013a76:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013a78:	89fb      	ldrh	r3, [r7, #14]
 8013a7a:	3b01      	subs	r3, #1
 8013a7c:	b29b      	uxth	r3, r3
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3714      	adds	r7, #20
 8013a82:	46bd      	mov	sp, r7
 8013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a88:	4770      	bx	lr

08013a8a <pifRingBuffer_BeginPutting>:

void pifRingBuffer_BeginPutting(PifRingBuffer* p_owner)
{
 8013a8a:	b480      	push	{r7}
 8013a8c:	b083      	sub	sp, #12
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
	if (p_owner->__backup_head < p_owner->_size) {
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	8b1a      	ldrh	r2, [r3, #24]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	891b      	ldrh	r3, [r3, #8]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d203      	bcs.n	8013aa6 <pifRingBuffer_BeginPutting+0x1c>
		p_owner->__head = p_owner->__backup_head;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	8b1a      	ldrh	r2, [r3, #24]
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	829a      	strh	r2, [r3, #20]
	}
	p_owner->__backup_head = p_owner->__head;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	8a9a      	ldrh	r2, [r3, #20]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	831a      	strh	r2, [r3, #24]
}
 8013aae:	bf00      	nop
 8013ab0:	370c      	adds	r7, #12
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <pifRingBuffer_CommitPutting>:

void pifRingBuffer_CommitPutting(PifRingBuffer* p_owner)
{
 8013aba:	b480      	push	{r7}
 8013abc:	b083      	sub	sp, #12
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->_size;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	891a      	ldrh	r2, [r3, #8]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	831a      	strh	r2, [r3, #24]
}
 8013aca:	bf00      	nop
 8013acc:	370c      	adds	r7, #12
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad4:	4770      	bx	lr

08013ad6 <pifRingBuffer_RollbackPutting>:

void pifRingBuffer_RollbackPutting(PifRingBuffer* p_owner)
{
 8013ad6:	b480      	push	{r7}
 8013ad8:	b083      	sub	sp, #12
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	8b1a      	ldrh	r2, [r3, #24]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	829a      	strh	r2, [r3, #20]
	p_owner->__backup_head = p_owner->_size;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	891a      	ldrh	r2, [r3, #8]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	831a      	strh	r2, [r3, #24]
}
 8013aee:	bf00      	nop
 8013af0:	370c      	adds	r7, #12
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr

08013afa <pifRingBuffer_GetPointerPutting>:

uint8_t* pifRingBuffer_GetPointerPutting(PifRingBuffer* p_owner, uint16_t pos)
{
 8013afa:	b480      	push	{r7}
 8013afc:	b083      	sub	sp, #12
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
 8013b02:	460b      	mov	r3, r1
 8013b04:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__backup_head + pos) % p_owner->_size];
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6919      	ldr	r1, [r3, #16]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8b1b      	ldrh	r3, [r3, #24]
 8013b0e:	461a      	mov	r2, r3
 8013b10:	887b      	ldrh	r3, [r7, #2]
 8013b12:	4413      	add	r3, r2
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	8912      	ldrh	r2, [r2, #8]
 8013b18:	fb93 f0f2 	sdiv	r0, r3, r2
 8013b1c:	fb00 f202 	mul.w	r2, r0, r2
 8013b20:	1a9b      	subs	r3, r3, r2
 8013b22:	440b      	add	r3, r1
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	370c      	adds	r7, #12
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	460b      	mov	r3, r1
 8013b3a:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	8a9b      	ldrh	r3, [r3, #20]
 8013b40:	3301      	adds	r3, #1
 8013b42:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	891b      	ldrh	r3, [r3, #8]
 8013b48:	89fa      	ldrh	r2, [r7, #14]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d301      	bcc.n	8013b52 <pifRingBuffer_PutByte+0x22>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8adb      	ldrh	r3, [r3, #22]
 8013b56:	89fa      	ldrh	r2, [r7, #14]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d10b      	bne.n	8013b74 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013b5c:	2101      	movs	r1, #1
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f7ff fd86 	bl	8013670 <_chopOff>
 8013b64:	4603      	mov	r3, r0
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d104      	bne.n	8013b74 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013b6a:	4b0a      	ldr	r3, [pc, #40]	; (8013b94 <pifRingBuffer_PutByte+0x64>)
 8013b6c:	2204      	movs	r2, #4
 8013b6e:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013b70:	2300      	movs	r3, #0
 8013b72:	e00a      	b.n	8013b8a <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	691b      	ldr	r3, [r3, #16]
 8013b78:	687a      	ldr	r2, [r7, #4]
 8013b7a:	8a92      	ldrh	r2, [r2, #20]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	78fa      	ldrb	r2, [r7, #3]
 8013b80:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	89fa      	ldrh	r2, [r7, #14]
 8013b86:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013b88:	2301      	movs	r3, #1
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	20001c55 	.word	0x20001c55

08013b98 <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b086      	sub	sp, #24
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	4613      	mov	r3, r2
 8013ba4:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7ff ff4b 	bl	8013a42 <pifRingBuffer_GetRemainSize>
 8013bac:	4603      	mov	r3, r0
 8013bae:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013bb0:	88fa      	ldrh	r2, [r7, #6]
 8013bb2:	8abb      	ldrh	r3, [r7, #20]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d90f      	bls.n	8013bd8 <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013bb8:	88fa      	ldrh	r2, [r7, #6]
 8013bba:	8abb      	ldrh	r3, [r7, #20]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	b29b      	uxth	r3, r3
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f7ff fd54 	bl	8013670 <_chopOff>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d104      	bne.n	8013bd8 <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013bce:	4b16      	ldr	r3, [pc, #88]	; (8013c28 <pifRingBuffer_PutData+0x90>)
 8013bd0:	2204      	movs	r2, #4
 8013bd2:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	e023      	b.n	8013c20 <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013bd8:	2300      	movs	r3, #0
 8013bda:	82fb      	strh	r3, [r7, #22]
 8013bdc:	e01b      	b.n	8013c16 <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013bde:	8afb      	ldrh	r3, [r7, #22]
 8013be0:	68ba      	ldr	r2, [r7, #8]
 8013be2:	441a      	add	r2, r3
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	691b      	ldr	r3, [r3, #16]
 8013be8:	68f9      	ldr	r1, [r7, #12]
 8013bea:	8a89      	ldrh	r1, [r1, #20]
 8013bec:	440b      	add	r3, r1
 8013bee:	7812      	ldrb	r2, [r2, #0]
 8013bf0:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	8a9b      	ldrh	r3, [r3, #20]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	8a9a      	ldrh	r2, [r3, #20]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	891b      	ldrh	r3, [r3, #8]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d302      	bcc.n	8013c10 <pifRingBuffer_PutData+0x78>
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013c10:	8afb      	ldrh	r3, [r7, #22]
 8013c12:	3301      	adds	r3, #1
 8013c14:	82fb      	strh	r3, [r7, #22]
 8013c16:	8afa      	ldrh	r2, [r7, #22]
 8013c18:	88fb      	ldrh	r3, [r7, #6]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d3df      	bcc.n	8013bde <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013c1e:	2301      	movs	r3, #1
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3718      	adds	r7, #24
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	20001c55 	.word	0x20001c55

08013c2c <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff ff03 	bl	8013a42 <pifRingBuffer_GetRemainSize>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013c40:	6838      	ldr	r0, [r7, #0]
 8013c42:	f7ec fac9 	bl	80001d8 <strlen>
 8013c46:	4603      	mov	r3, r0
 8013c48:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013c4a:	897a      	ldrh	r2, [r7, #10]
 8013c4c:	89bb      	ldrh	r3, [r7, #12]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d90f      	bls.n	8013c72 <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013c52:	897a      	ldrh	r2, [r7, #10]
 8013c54:	89bb      	ldrh	r3, [r7, #12]
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7ff fd07 	bl	8013670 <_chopOff>
 8013c62:	4603      	mov	r3, r0
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d104      	bne.n	8013c72 <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013c68:	4b16      	ldr	r3, [pc, #88]	; (8013cc4 <pifRingBuffer_PutString+0x98>)
 8013c6a:	2204      	movs	r2, #4
 8013c6c:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	e023      	b.n	8013cba <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013c72:	2300      	movs	r3, #0
 8013c74:	81fb      	strh	r3, [r7, #14]
 8013c76:	e01b      	b.n	8013cb0 <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013c78:	89fb      	ldrh	r3, [r7, #14]
 8013c7a:	683a      	ldr	r2, [r7, #0]
 8013c7c:	441a      	add	r2, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	691b      	ldr	r3, [r3, #16]
 8013c82:	6879      	ldr	r1, [r7, #4]
 8013c84:	8a89      	ldrh	r1, [r1, #20]
 8013c86:	440b      	add	r3, r1
 8013c88:	7812      	ldrb	r2, [r2, #0]
 8013c8a:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	8a9b      	ldrh	r3, [r3, #20]
 8013c90:	3301      	adds	r3, #1
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	8a9a      	ldrh	r2, [r3, #20]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	891b      	ldrh	r3, [r3, #8]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d302      	bcc.n	8013caa <pifRingBuffer_PutString+0x7e>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013caa:	89fb      	ldrh	r3, [r7, #14]
 8013cac:	3301      	adds	r3, #1
 8013cae:	81fb      	strh	r3, [r7, #14]
 8013cb0:	89fa      	ldrh	r2, [r7, #14]
 8013cb2:	897b      	ldrh	r3, [r7, #10]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d3df      	bcc.n	8013c78 <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013cb8:	2301      	movs	r3, #1
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3710      	adds	r7, #16
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
 8013cc2:	bf00      	nop
 8013cc4:	20001c55 	.word	0x20001c55

08013cc8 <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	8ada      	ldrh	r2, [r3, #22]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	8a9b      	ldrh	r3, [r3, #20]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d101      	bne.n	8013ce2 <pifRingBuffer_GetByte+0x1a>
 8013cde:	2300      	movs	r3, #0
 8013ce0:	e017      	b.n	8013d12 <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	8ad2      	ldrh	r2, [r2, #22]
 8013cea:	4413      	add	r3, r2
 8013cec:	781a      	ldrb	r2, [r3, #0]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	8adb      	ldrh	r3, [r3, #22]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	b29a      	uxth	r2, r3
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8ada      	ldrh	r2, [r3, #22]
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	891b      	ldrh	r3, [r3, #8]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d302      	bcc.n	8013d10 <pifRingBuffer_GetByte+0x48>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8013d10:	2301      	movs	r3, #1
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	370c      	adds	r7, #12
 8013d16:	46bd      	mov	sp, r7
 8013d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1c:	4770      	bx	lr

08013d1e <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8013d1e:	b480      	push	{r7}
 8013d20:	b087      	sub	sp, #28
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	60f8      	str	r0, [r7, #12]
 8013d26:	607a      	str	r2, [r7, #4]
 8013d28:	461a      	mov	r2, r3
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	817b      	strh	r3, [r7, #10]
 8013d2e:	4613      	mov	r3, r2
 8013d30:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	8ada      	ldrh	r2, [r3, #22]
 8013d36:	893b      	ldrh	r3, [r7, #8]
 8013d38:	4413      	add	r3, r2
 8013d3a:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	891b      	ldrh	r3, [r3, #8]
 8013d40:	8afa      	ldrh	r2, [r7, #22]
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d304      	bcc.n	8013d50 <pifRingBuffer_CopyToArray+0x32>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	891b      	ldrh	r3, [r3, #8]
 8013d4a:	8afa      	ldrh	r2, [r7, #22]
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8013d50:	2300      	movs	r3, #0
 8013d52:	82bb      	strh	r3, [r7, #20]
 8013d54:	e01e      	b.n	8013d94 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	691a      	ldr	r2, [r3, #16]
 8013d5a:	8afb      	ldrh	r3, [r7, #22]
 8013d5c:	441a      	add	r2, r3
 8013d5e:	8abb      	ldrh	r3, [r7, #20]
 8013d60:	68f9      	ldr	r1, [r7, #12]
 8013d62:	440b      	add	r3, r1
 8013d64:	7812      	ldrb	r2, [r2, #0]
 8013d66:	701a      	strb	r2, [r3, #0]
		tail++;
 8013d68:	8afb      	ldrh	r3, [r7, #22]
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	891b      	ldrh	r3, [r3, #8]
 8013d72:	8afa      	ldrh	r2, [r7, #22]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d301      	bcc.n	8013d7c <pifRingBuffer_CopyToArray+0x5e>
 8013d78:	2300      	movs	r3, #0
 8013d7a:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	8a9b      	ldrh	r3, [r3, #20]
 8013d80:	8afa      	ldrh	r2, [r7, #22]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d103      	bne.n	8013d8e <pifRingBuffer_CopyToArray+0x70>
 8013d86:	8abb      	ldrh	r3, [r7, #20]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	e007      	b.n	8013d9e <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8013d8e:	8abb      	ldrh	r3, [r7, #20]
 8013d90:	3301      	adds	r3, #1
 8013d92:	82bb      	strh	r3, [r7, #20]
 8013d94:	8aba      	ldrh	r2, [r7, #20]
 8013d96:	897b      	ldrh	r3, [r7, #10]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d3dc      	bcc.n	8013d56 <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8013d9c:	897b      	ldrh	r3, [r7, #10]
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	371c      	adds	r7, #28
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr

08013daa <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b084      	sub	sp, #16
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
 8013db2:	460b      	mov	r3, r1
 8013db4:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f7ff fdf8 	bl	80139ac <pifRingBuffer_GetFillSize>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8013dc0:	887a      	ldrh	r2, [r7, #2]
 8013dc2:	89fb      	ldrh	r3, [r7, #14]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d304      	bcc.n	8013dd2 <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	8a9a      	ldrh	r2, [r3, #20]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8013dd0:	e00e      	b.n	8013df0 <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8adb      	ldrh	r3, [r3, #22]
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	887b      	ldrh	r3, [r7, #2]
 8013dda:	4413      	add	r3, r2
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	8912      	ldrh	r2, [r2, #8]
 8013de0:	fb93 f1f2 	sdiv	r1, r3, r2
 8013de4:	fb01 f202 	mul.w	r2, r1, r2
 8013de8:	1a9b      	subs	r3, r3, r2
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	82da      	strh	r2, [r3, #22]
}
 8013df0:	bf00      	nop
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b089      	sub	sp, #36	; 0x24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	4603      	mov	r3, r0
 8013e00:	6039      	str	r1, [r7, #0]
 8013e02:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8013e04:	f04f 33ff 	mov.w	r3, #4294967295
 8013e08:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	61bb      	str	r3, [r7, #24]
 8013e0e:	e00f      	b.n	8013e30 <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8013e10:	2201      	movs	r2, #1
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	fa02 f303 	lsl.w	r3, r2, r3
 8013e18:	461a      	mov	r2, r3
 8013e1a:	4b34      	ldr	r3, [pc, #208]	; (8013eec <_setTable+0xf4>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	4013      	ands	r3, r2
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d102      	bne.n	8013e2a <_setTable+0x32>
			num = i;
 8013e24:	69bb      	ldr	r3, [r7, #24]
 8013e26:	617b      	str	r3, [r7, #20]
			break;
 8013e28:	e005      	b.n	8013e36 <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013e2a:	69bb      	ldr	r3, [r7, #24]
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	61bb      	str	r3, [r7, #24]
 8013e30:	69bb      	ldr	r3, [r7, #24]
 8013e32:	2b1f      	cmp	r3, #31
 8013e34:	ddec      	ble.n	8013e10 <_setTable+0x18>
		}
	}
	if (num == -1) {
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e3c:	d105      	bne.n	8013e4a <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 8013e3e:	4b2c      	ldr	r3, [pc, #176]	; (8013ef0 <_setTable+0xf8>)
 8013e40:	2204      	movs	r2, #4
 8013e42:	701a      	strb	r2, [r3, #0]
		return -1;
 8013e44:	f04f 33ff 	mov.w	r3, #4294967295
 8013e48:	e04a      	b.n	8013ee0 <_setTable+0xe8>
	}
	bit = 1 << num;
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8013e52:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8013e54:	4b25      	ldr	r3, [pc, #148]	; (8013eec <_setTable+0xf4>)
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	4313      	orrs	r3, r2
 8013e5c:	4a23      	ldr	r2, [pc, #140]	; (8013eec <_setTable+0xf4>)
 8013e5e:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 8013e60:	88fb      	ldrh	r3, [r7, #6]
 8013e62:	015b      	lsls	r3, r3, #5
 8013e64:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8013e66:	4a23      	ldr	r2, [pc, #140]	; (8013ef4 <_setTable+0xfc>)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e6e:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	2b64      	cmp	r3, #100	; 0x64
 8013e74:	d930      	bls.n	8013ed8 <_setTable+0xe0>
		index = 100 * base;
 8013e76:	4b20      	ldr	r3, [pc, #128]	; (8013ef8 <_setTable+0x100>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2264      	movs	r2, #100	; 0x64
 8013e7c:	fb02 f303 	mul.w	r3, r2, r3
 8013e80:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013e82:	2300      	movs	r3, #0
 8013e84:	61bb      	str	r3, [r7, #24]
 8013e86:	e017      	b.n	8013eb8 <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	4a1c      	ldr	r2, [pc, #112]	; (8013efc <_setTable+0x104>)
 8013e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8013e90:	095b      	lsrs	r3, r3, #5
 8013e92:	f003 021f 	and.w	r2, r3, #31
 8013e96:	491a      	ldr	r1, [pc, #104]	; (8013f00 <_setTable+0x108>)
 8013e98:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013e9c:	f003 031f 	and.w	r3, r3, #31
 8013ea0:	693a      	ldr	r2, [r7, #16]
 8013ea2:	430a      	orrs	r2, r1
 8013ea4:	4916      	ldr	r1, [pc, #88]	; (8013f00 <_setTable+0x108>)
 8013ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 8013eaa:	69fa      	ldr	r2, [r7, #28]
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	4413      	add	r3, r2
 8013eb0:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	61bb      	str	r3, [r7, #24]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	4a10      	ldr	r2, [pc, #64]	; (8013efc <_setTable+0x104>)
 8013ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8013ec0:	1152      	asrs	r2, r2, #5
 8013ec2:	17db      	asrs	r3, r3, #31
 8013ec4:	1ad3      	subs	r3, r2, r3
 8013ec6:	69ba      	ldr	r2, [r7, #24]
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	dbdd      	blt.n	8013e88 <_setTable+0x90>
		}
		base++;
 8013ecc:	4b0a      	ldr	r3, [pc, #40]	; (8013ef8 <_setTable+0x100>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	3301      	adds	r3, #1
 8013ed2:	4a09      	ldr	r2, [pc, #36]	; (8013ef8 <_setTable+0x100>)
 8013ed4:	6013      	str	r3, [r2, #0]
 8013ed6:	e002      	b.n	8013ede <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	2201      	movs	r2, #1
 8013edc:	701a      	strb	r2, [r3, #0]
	}
	return num;
 8013ede:	697b      	ldr	r3, [r7, #20]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3724      	adds	r7, #36	; 0x24
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr
 8013eec:	20001d48 	.word	0x20001d48
 8013ef0:	20001c55 	.word	0x20001c55
 8013ef4:	0004e200 	.word	0x0004e200
 8013ef8:	20001dd8 	.word	0x20001dd8
 8013efc:	51eb851f 	.word	0x51eb851f
 8013f00:	20001d4c 	.word	0x20001d4c

08013f04 <_resetTable>:

static void _resetTable(int number)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b085      	sub	sp, #20
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	fa02 f303 	lsl.w	r3, r2, r3
 8013f14:	43db      	mvns	r3, r3
 8013f16:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f18:	2300      	movs	r3, #0
 8013f1a:	60fb      	str	r3, [r7, #12]
 8013f1c:	e00c      	b.n	8013f38 <_resetTable+0x34>
		s_table[i] &= mask;
 8013f1e:	4a0e      	ldr	r2, [pc, #56]	; (8013f58 <_resetTable+0x54>)
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	401a      	ands	r2, r3
 8013f2a:	490b      	ldr	r1, [pc, #44]	; (8013f58 <_resetTable+0x54>)
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	3301      	adds	r3, #1
 8013f36:	60fb      	str	r3, [r7, #12]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	2b1f      	cmp	r3, #31
 8013f3c:	ddef      	ble.n	8013f1e <_resetTable+0x1a>
	}
	s_table_number &= mask;
 8013f3e:	4b07      	ldr	r3, [pc, #28]	; (8013f5c <_resetTable+0x58>)
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	4013      	ands	r3, r2
 8013f46:	4a05      	ldr	r2, [pc, #20]	; (8013f5c <_resetTable+0x58>)
 8013f48:	6013      	str	r3, [r2, #0]
}
 8013f4a:	bf00      	nop
 8013f4c:	3714      	adds	r7, #20
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	20001d4c 	.word	0x20001d4c
 8013f5c:	20001d48 	.word	0x20001d48

08013f60 <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 8013f60:	b480      	push	{r7}
 8013f62:	b085      	sub	sp, #20
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d010      	beq.n	8013f92 <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8013f70:	4b0b      	ldr	r3, [pc, #44]	; (8013fa0 <_processingAlways+0x40>)
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013f80:	461a      	mov	r2, r3
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d302      	bcc.n	8013f8e <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
		}
		return NULL;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	e000      	b.n	8013f94 <_processingAlways+0x34>
	}
	return p_owner;
 8013f92:	687b      	ldr	r3, [r7, #4]
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3714      	adds	r7, #20
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr
 8013fa0:	20001c6c 	.word	0x20001c6c

08013fa4 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b084      	sub	sp, #16
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 8013fac:	4b0f      	ldr	r3, [pc, #60]	; (8013fec <_processingPeriodUs+0x48>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4798      	blx	r3
 8013fb2:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	895b      	ldrh	r3, [r3, #10]
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d30a      	bcc.n	8013fe0 <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	895b      	ldrh	r3, [r3, #10]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	1ad2      	subs	r2, r2, r3
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	441a      	add	r2, r3
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	e000      	b.n	8013fe2 <_processingPeriodUs+0x3e>
	}
	return NULL;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	20001c7c 	.word	0x20001c7c

08013ff0 <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b085      	sub	sp, #20
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 8013ff8:	4b0c      	ldr	r3, [pc, #48]	; (801402c <_processingPeriodMs+0x3c>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014002:	68fa      	ldr	r2, [r7, #12]
 8014004:	1ad3      	subs	r3, r2, r3
 8014006:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	895b      	ldrh	r3, [r3, #10]
 801400c:	461a      	mov	r2, r3
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	4293      	cmp	r3, r2
 8014012:	d304      	bcc.n	801401e <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	e000      	b.n	8014020 <_processingPeriodMs+0x30>
	}
	return NULL;
 801401e:	2300      	movs	r3, #0
}
 8014020:	4618      	mov	r0, r3
 8014022:	3714      	adds	r7, #20
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr
 801402c:	20001c6c 	.word	0x20001c6c

08014030 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801403c:	2b00      	cmp	r3, #0
 801403e:	d00f      	beq.n	8014060 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014040:	4b29      	ldr	r3, [pc, #164]	; (80140e8 <_processingRatio+0xb8>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	60bb      	str	r3, [r7, #8]
		if (gap >= p_owner->__delay_ms) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014050:	461a      	mov	r2, r3
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	4293      	cmp	r3, r2
 8014056:	d33b      	bcc.n	80140d0 <_processingRatio+0xa0>
			p_owner->__delay_ms = 0;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	879a      	strh	r2, [r3, #60]	; 0x3c
 801405e:	e037      	b.n	80140d0 <_processingRatio+0xa0>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8014060:	4b22      	ldr	r3, [pc, #136]	; (80140ec <_processingRatio+0xbc>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	461a      	mov	r2, r3
 8014066:	4b22      	ldr	r3, [pc, #136]	; (80140f0 <_processingRatio+0xc0>)
 8014068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014070:	2101      	movs	r1, #1
 8014072:	fa01 f202 	lsl.w	r2, r1, r2
 8014076:	4013      	ands	r3, r2
 8014078:	2b00      	cmp	r3, #0
 801407a:	d029      	beq.n	80140d0 <_processingRatio+0xa0>
#ifdef __PIF_DEBUG__
		time = pif_timer1sec;
 801407c:	4b1d      	ldr	r3, [pc, #116]	; (80140f4 <_processingRatio+0xc4>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	60fb      	str	r3, [r7, #12]
		if (time != pretime) {
 8014082:	4b1d      	ldr	r3, [pc, #116]	; (80140f8 <_processingRatio+0xc8>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	68fa      	ldr	r2, [r7, #12]
 8014088:	429a      	cmp	r2, r3
 801408a:	d01a      	beq.n	80140c2 <_processingRatio+0x92>
			p_owner->__period = 1000000.0 / p_owner->__count;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014090:	4618      	mov	r0, r3
 8014092:	f7ec f9eb 	bl	800046c <__aeabi_ui2d>
 8014096:	4602      	mov	r2, r0
 8014098:	460b      	mov	r3, r1
 801409a:	a111      	add	r1, pc, #68	; (adr r1, 80140e0 <_processingRatio+0xb0>)
 801409c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140a0:	f7ec fb88 	bl	80007b4 <__aeabi_ddiv>
 80140a4:	4602      	mov	r2, r0
 80140a6:	460b      	mov	r3, r1
 80140a8:	4610      	mov	r0, r2
 80140aa:	4619      	mov	r1, r3
 80140ac:	f7ec fd3a 	bl	8000b24 <__aeabi_d2f>
 80140b0:	4602      	mov	r2, r0
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	651a      	str	r2, [r3, #80]	; 0x50
			p_owner->__count = 0;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2200      	movs	r2, #0
 80140ba:	64da      	str	r2, [r3, #76]	; 0x4c
			pretime = time;
 80140bc:	4a0e      	ldr	r2, [pc, #56]	; (80140f8 <_processingRatio+0xc8>)
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	6013      	str	r3, [r2, #0]
		}
		p_owner->__count++;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140c6:	1c5a      	adds	r2, r3, #1
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
		return p_owner;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	e000      	b.n	80140d2 <_processingRatio+0xa2>
	}
	return NULL;
 80140d0:	2300      	movs	r3, #0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	f3af 8000 	nop.w
 80140e0:	00000000 	.word	0x00000000
 80140e4:	412e8480 	.word	0x412e8480
 80140e8:	20001c6c 	.word	0x20001c6c
 80140ec:	20001dcc 	.word	0x20001dcc
 80140f0:	20001d4c 	.word	0x20001d4c
 80140f4:	20001c60 	.word	0x20001c60
 80140f8:	20001ddc 	.word	0x20001ddc

080140fc <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b083      	sub	sp, #12
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	460b      	mov	r3, r1
 8014106:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	2b09      	cmp	r3, #9
 801410e:	d848      	bhi.n	80141a2 <_checkParam+0xa6>
 8014110:	a201      	add	r2, pc, #4	; (adr r2, 8014118 <_checkParam+0x1c>)
 8014112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014116:	bf00      	nop
 8014118:	08014141 	.word	0x08014141
 801411c:	080141ad 	.word	0x080141ad
 8014120:	08014165 	.word	0x08014165
 8014124:	08014175 	.word	0x08014175
 8014128:	08014165 	.word	0x08014165
 801412c:	08014175 	.word	0x08014175
 8014130:	08014197 	.word	0x08014197
 8014134:	080141ad 	.word	0x080141ad
 8014138:	080141ad 	.word	0x080141ad
 801413c:	08014165 	.word	0x08014165
    case TM_RATIO:
    	if (!period || period > 100) {
 8014140:	887b      	ldrh	r3, [r7, #2]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <_checkParam+0x50>
 8014146:	887b      	ldrh	r3, [r7, #2]
 8014148:	2b64      	cmp	r3, #100	; 0x64
 801414a:	d904      	bls.n	8014156 <_checkParam+0x5a>
    		pif_error = E_INVALID_PARAM;
 801414c:	4b1f      	ldr	r3, [pc, #124]	; (80141cc <_checkParam+0xd0>)
 801414e:	2201      	movs	r2, #1
 8014150:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014152:	2300      	movs	r3, #0
 8014154:	e034      	b.n	80141c0 <_checkParam+0xc4>
    	}
    	else if (period == 100) {
 8014156:	887b      	ldrh	r3, [r7, #2]
 8014158:	2b64      	cmp	r3, #100	; 0x64
 801415a:	d129      	bne.n	80141b0 <_checkParam+0xb4>
    		*p_mode = TM_ALWAYS;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2201      	movs	r2, #1
 8014160:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8014162:	e025      	b.n	80141b0 <_checkParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 8014164:	887b      	ldrh	r3, [r7, #2]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d124      	bne.n	80141b4 <_checkParam+0xb8>
    		pif_error = E_INVALID_PARAM;
 801416a:	4b18      	ldr	r3, [pc, #96]	; (80141cc <_checkParam+0xd0>)
 801416c:	2201      	movs	r2, #1
 801416e:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014170:	2300      	movs	r3, #0
 8014172:	e025      	b.n	80141c0 <_checkParam+0xc4>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 8014174:	887b      	ldrh	r3, [r7, #2]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d104      	bne.n	8014184 <_checkParam+0x88>
    		pif_error = E_INVALID_PARAM;
 801417a:	4b14      	ldr	r3, [pc, #80]	; (80141cc <_checkParam+0xd0>)
 801417c:	2201      	movs	r2, #1
 801417e:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014180:	2300      	movs	r3, #0
 8014182:	e01d      	b.n	80141c0 <_checkParam+0xc4>
    	}

    	if (!pif_act_timer1us) {
 8014184:	4b12      	ldr	r3, [pc, #72]	; (80141d0 <_checkParam+0xd4>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d115      	bne.n	80141b8 <_checkParam+0xbc>
    		pif_error = E_CANNOT_USE;
 801418c:	4b0f      	ldr	r3, [pc, #60]	; (80141cc <_checkParam+0xd0>)
 801418e:	2209      	movs	r2, #9
 8014190:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014192:	2300      	movs	r3, #0
 8014194:	e014      	b.n	80141c0 <_checkParam+0xc4>
        }
    	break;
    	
	case TM_EXTERNAL_CUTIN:
		if (s_task_cutin) return FALSE;
 8014196:	4b0f      	ldr	r3, [pc, #60]	; (80141d4 <_checkParam+0xd8>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00e      	beq.n	80141bc <_checkParam+0xc0>
 801419e:	2300      	movs	r3, #0
 80141a0:	e00e      	b.n	80141c0 <_checkParam+0xc4>
	case TM_ALWAYS:
	case TM_EXTERNAL_ORDER:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 80141a2:	4b0a      	ldr	r3, [pc, #40]	; (80141cc <_checkParam+0xd0>)
 80141a4:	2201      	movs	r2, #1
 80141a6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 80141a8:	2300      	movs	r3, #0
 80141aa:	e009      	b.n	80141c0 <_checkParam+0xc4>
		break;
 80141ac:	bf00      	nop
 80141ae:	e006      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141b0:	bf00      	nop
 80141b2:	e004      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141b4:	bf00      	nop
 80141b6:	e002      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141b8:	bf00      	nop
 80141ba:	e000      	b.n	80141be <_checkParam+0xc2>
    	break;
 80141bc:	bf00      	nop
    }
	return TRUE;
 80141be:	2301      	movs	r3, #1
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	370c      	adds	r7, #12
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr
 80141cc:	20001c55 	.word	0x20001c55
 80141d0:	20001c7c 	.word	0x20001c7c
 80141d4:	20001d44 	.word	0x20001d44

080141d8 <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	460b      	mov	r3, r1
 80141e2:	70fb      	strb	r3, [r7, #3]
 80141e4:	4613      	mov	r3, r2
 80141e6:	803b      	strh	r3, [r7, #0]
	int num = -1;
 80141e8:	f04f 33ff 	mov.w	r3, #4294967295
 80141ec:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 80141ee:	78fb      	ldrb	r3, [r7, #3]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10c      	bne.n	801420e <_setParam+0x36>
    	num = _setTable(period, &mode);
 80141f4:	1cfa      	adds	r2, r7, #3
 80141f6:	883b      	ldrh	r3, [r7, #0]
 80141f8:	4611      	mov	r1, r2
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7ff fdfc 	bl	8013df8 <_setTable>
 8014200:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014208:	d101      	bne.n	801420e <_setParam+0x36>
 801420a:	2300      	movs	r3, #0
 801420c:	e050      	b.n	80142b0 <_setParam+0xd8>
	}

    switch (mode) {
 801420e:	78fb      	ldrb	r3, [r7, #3]
 8014210:	2b09      	cmp	r3, #9
 8014212:	d845      	bhi.n	80142a0 <_setParam+0xc8>
 8014214:	a201      	add	r2, pc, #4	; (adr r2, 801421c <_setParam+0x44>)
 8014216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801421a:	bf00      	nop
 801421c:	08014245 	.word	0x08014245
 8014220:	08014253 	.word	0x08014253
 8014224:	0801425f 	.word	0x0801425f
 8014228:	0801426f 	.word	0x0801426f
 801422c:	0801425f 	.word	0x0801425f
 8014230:	0801426f 	.word	0x0801426f
 8014234:	08014283 	.word	0x08014283
 8014238:	08014295 	.word	0x08014295
 801423c:	08014295 	.word	0x08014295
 8014240:	0801425f 	.word	0x0801425f
    case TM_RATIO:
    	p_owner->__table_number = num;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	639a      	str	r2, [r3, #56]	; 0x38
    	p_owner->__processing = _processingRatio;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	4a1a      	ldr	r2, [pc, #104]	; (80142b8 <_setParam+0xe0>)
 801424e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014250:	e027      	b.n	80142a2 <_setParam+0xca>

    case TM_ALWAYS:
    	period = 100;
 8014252:	2364      	movs	r3, #100	; 0x64
 8014254:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4a18      	ldr	r2, [pc, #96]	; (80142bc <_setParam+0xe4>)
 801425a:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801425c:	e021      	b.n	80142a2 <_setParam+0xca>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 801425e:	4b18      	ldr	r3, [pc, #96]	; (80142c0 <_setParam+0xe8>)
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodMs;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	4a16      	ldr	r2, [pc, #88]	; (80142c4 <_setParam+0xec>)
 801426a:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801426c:	e019      	b.n	80142a2 <_setParam+0xca>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 801426e:	4b16      	ldr	r3, [pc, #88]	; (80142c8 <_setParam+0xf0>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	4798      	blx	r3
 8014274:	4602      	mov	r2, r0
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodUs;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	4a13      	ldr	r2, [pc, #76]	; (80142cc <_setParam+0xf4>)
 801427e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014280:	e00f      	b.n	80142a2 <_setParam+0xca>

	case TM_EXTERNAL_CUTIN:
		s_task_cutin = p_owner;
 8014282:	4a13      	ldr	r2, [pc, #76]	; (80142d0 <_setParam+0xf8>)
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6013      	str	r3, [r2, #0]
    	period = 0;
 8014288:	2300      	movs	r3, #0
 801428a:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8014292:	e006      	b.n	80142a2 <_setParam+0xca>

	case TM_TIMER:
    case TM_EXTERNAL_ORDER:
    	period = 0;
 8014294:	2300      	movs	r3, #0
 8014296:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2200      	movs	r2, #0
 801429c:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 801429e:	e000      	b.n	80142a2 <_setParam+0xca>

    default:
    	break;
 80142a0:	bf00      	nop
    }

    p_owner->_mode = mode;
 80142a2:	78fa      	ldrb	r2, [r7, #3]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	721a      	strb	r2, [r3, #8]
    p_owner->_period = period;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	883a      	ldrh	r2, [r7, #0]
 80142ac:	815a      	strh	r2, [r3, #10]
	return TRUE;
 80142ae:	2301      	movs	r3, #1
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	08014031 	.word	0x08014031
 80142bc:	08013f61 	.word	0x08013f61
 80142c0:	20001c6c 	.word	0x20001c6c
 80142c4:	08013ff1 	.word	0x08013ff1
 80142c8:	20001c7c 	.word	0x20001c7c
 80142cc:	08013fa5 	.word	0x08013fa5
 80142d0:	20001d44 	.word	0x20001d44

080142d4 <_processingTask>:

static void _processingTask(PifTask* p_owner)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return;
 80142dc:	4b42      	ldr	r3, [pc, #264]	; (80143e8 <_processingTask+0x114>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	2b04      	cmp	r3, #4
 80142e2:	dc79      	bgt.n	80143d8 <_processingTask+0x104>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
 80142e4:	4b41      	ldr	r3, [pc, #260]	; (80143ec <_processingTask+0x118>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d003      	beq.n	80142f4 <_processingTask+0x20>
 80142ec:	4b3f      	ldr	r3, [pc, #252]	; (80143ec <_processingTask+0x118>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2001      	movs	r0, #1
 80142f2:	4798      	blx	r3
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 80142f4:	4b3c      	ldr	r3, [pc, #240]	; (80143e8 <_processingTask+0x114>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	493d      	ldr	r1, [pc, #244]	; (80143f0 <_processingTask+0x11c>)
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 8014300:	4b39      	ldr	r3, [pc, #228]	; (80143e8 <_processingTask+0x114>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	3301      	adds	r3, #1
 8014306:	4a38      	ldr	r2, [pc, #224]	; (80143e8 <_processingTask+0x114>)
 8014308:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2201      	movs	r2, #1
 801430e:	725a      	strb	r2, [r3, #9]
	if (pif_act_timer1us) {
 8014310:	4b38      	ldr	r3, [pc, #224]	; (80143f4 <_processingTask+0x120>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d024      	beq.n	8014362 <_processingTask+0x8e>
		start_time = (*pif_act_timer1us)();
 8014318:	4b36      	ldr	r3, [pc, #216]	; (80143f4 <_processingTask+0x120>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	4798      	blx	r3
 801431e:	6138      	str	r0, [r7, #16]
		period = (*p_owner->__evt_loop)(p_owner);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	4798      	blx	r3
 8014328:	4603      	mov	r3, r0
 801432a:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 801432c:	4b31      	ldr	r3, [pc, #196]	; (80143f4 <_processingTask+0x120>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	4798      	blx	r3
 8014332:	4602      	mov	r2, r0
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	1ad3      	subs	r3, r2, r3
 8014338:	60fb      	str	r3, [r7, #12]
		p_owner->_execution_count++;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	699b      	ldr	r3, [r3, #24]
 801433e:	1c5a      	adds	r2, r3, #1
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	691b      	ldr	r3, [r3, #16]
 8014348:	68fa      	ldr	r2, [r7, #12]
 801434a:	429a      	cmp	r2, r3
 801434c:	d902      	bls.n	8014354 <_processingTask+0x80>
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	695a      	ldr	r2, [r3, #20]
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	441a      	add	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	615a      	str	r2, [r3, #20]
 8014360:	e005      	b.n	801436e <_processingTask+0x9a>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	4798      	blx	r3
 801436a:	4603      	mov	r3, r0
 801436c:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2200      	movs	r2, #0
 8014372:	725a      	strb	r2, [r3, #9]
	s_task_stack_ptr--;
 8014374:	4b1c      	ldr	r3, [pc, #112]	; (80143e8 <_processingTask+0x114>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	3b01      	subs	r3, #1
 801437a:	4a1b      	ldr	r2, [pc, #108]	; (80143e8 <_processingTask+0x114>)
 801437c:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 801437e:	4b1a      	ldr	r3, [pc, #104]	; (80143e8 <_processingTask+0x114>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a1b      	ldr	r2, [pc, #108]	; (80143f0 <_processingTask+0x11c>)
 8014384:	2100      	movs	r1, #0
 8014386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
 801438a:	4b18      	ldr	r3, [pc, #96]	; (80143ec <_processingTask+0x118>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d003      	beq.n	801439a <_processingTask+0xc6>
 8014392:	4b16      	ldr	r3, [pc, #88]	; (80143ec <_processingTask+0x118>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2000      	movs	r0, #0
 8014398:	4798      	blx	r3
#endif

	switch (p_owner->_mode) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	7a1b      	ldrb	r3, [r3, #8]
 801439e:	2b04      	cmp	r3, #4
 80143a0:	d002      	beq.n	80143a8 <_processingTask+0xd4>
 80143a2:	2b05      	cmp	r3, #5
 80143a4:	d00b      	beq.n	80143be <_processingTask+0xea>
			p_owner->__pretime = (*pif_act_timer1us)();
		}
		break;

	default:
		break;
 80143a6:	e01c      	b.n	80143e2 <_processingTask+0x10e>
		if (period > 0) {
 80143a8:	8afb      	ldrh	r3, [r7, #22]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d016      	beq.n	80143dc <_processingTask+0x108>
			p_owner->_period = period;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	8afa      	ldrh	r2, [r7, #22]
 80143b2:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = pif_cumulative_timer1ms;
 80143b4:	4b10      	ldr	r3, [pc, #64]	; (80143f8 <_processingTask+0x124>)
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80143bc:	e00e      	b.n	80143dc <_processingTask+0x108>
		if (period > 0) {
 80143be:	8afb      	ldrh	r3, [r7, #22]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d00d      	beq.n	80143e0 <_processingTask+0x10c>
			p_owner->_period = period;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	8afa      	ldrh	r2, [r7, #22]
 80143c8:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = (*pif_act_timer1us)();
 80143ca:	4b0a      	ldr	r3, [pc, #40]	; (80143f4 <_processingTask+0x120>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	4798      	blx	r3
 80143d0:	4602      	mov	r2, r0
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80143d6:	e003      	b.n	80143e0 <_processingTask+0x10c>
	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return;
 80143d8:	bf00      	nop
 80143da:	e002      	b.n	80143e2 <_processingTask+0x10e>
		break;
 80143dc:	bf00      	nop
 80143de:	e000      	b.n	80143e2 <_processingTask+0x10e>
		break;
 80143e0:	bf00      	nop
	}
}
 80143e2:	3718      	adds	r7, #24
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	20001d40 	.word	0x20001d40
 80143ec:	20001d0c 	.word	0x20001d0c
 80143f0:	20001d2c 	.word	0x20001d2c
 80143f4:	20001c7c 	.word	0x20001c7c
 80143f8:	20001c6c 	.word	0x20001c6c

080143fc <_checkLoopTime>:

static void _checkLoopTime()
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b084      	sub	sp, #16
 8014400:	af02      	add	r7, sp, #8
#endif
#ifdef __PIF_DEBUG__
	static uint32_t pretime = 0UL;
	static uint32_t max_loop = 0UL;

	if (pif_act_timer1us) {
 8014402:	4b46      	ldr	r3, [pc, #280]	; (801451c <_checkLoopTime+0x120>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d015      	beq.n	8014436 <_checkLoopTime+0x3a>
		value = (*pif_act_timer1us)() - pretime;
 801440a:	4b44      	ldr	r3, [pc, #272]	; (801451c <_checkLoopTime+0x120>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	4798      	blx	r3
 8014410:	4602      	mov	r2, r0
 8014412:	4b43      	ldr	r3, [pc, #268]	; (8014520 <_checkLoopTime+0x124>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	1ad3      	subs	r3, r2, r3
 8014418:	607b      	str	r3, [r7, #4]
		if (value > pif_performance.__max_loop_time1us) {
 801441a:	4b42      	ldr	r3, [pc, #264]	; (8014524 <_checkLoopTime+0x128>)
 801441c:	689b      	ldr	r3, [r3, #8]
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	429a      	cmp	r2, r3
 8014422:	d902      	bls.n	801442a <_checkLoopTime+0x2e>
			pif_performance.__max_loop_time1us = value;
 8014424:	4a3f      	ldr	r2, [pc, #252]	; (8014524 <_checkLoopTime+0x128>)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6093      	str	r3, [r2, #8]
		}
		pretime = (*pif_act_timer1us)();
 801442a:	4b3c      	ldr	r3, [pc, #240]	; (801451c <_checkLoopTime+0x120>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	4798      	blx	r3
 8014430:	4603      	mov	r3, r0
 8014432:	4a3b      	ldr	r2, [pc, #236]	; (8014520 <_checkLoopTime+0x124>)
 8014434:	6013      	str	r3, [r2, #0]
	}
#endif

	pif_performance._count++;
 8014436:	4b3b      	ldr	r3, [pc, #236]	; (8014524 <_checkLoopTime+0x128>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	3301      	adds	r3, #1
 801443c:	4a39      	ldr	r2, [pc, #228]	; (8014524 <_checkLoopTime+0x128>)
 801443e:	6013      	str	r3, [r2, #0]

	if (pif_performance.__state & 1) {		// 1ms
 8014440:	4b38      	ldr	r3, [pc, #224]	; (8014524 <_checkLoopTime+0x128>)
 8014442:	795b      	ldrb	r3, [r3, #5]
 8014444:	f003 0301 	and.w	r3, r3, #1
 8014448:	2b00      	cmp	r3, #0
 801444a:	d022      	beq.n	8014492 <_checkLoopTime+0x96>
		if (timer_10ms) timer_10ms--;
 801444c:	4b36      	ldr	r3, [pc, #216]	; (8014528 <_checkLoopTime+0x12c>)
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d006      	beq.n	8014462 <_checkLoopTime+0x66>
 8014454:	4b34      	ldr	r3, [pc, #208]	; (8014528 <_checkLoopTime+0x12c>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	3b01      	subs	r3, #1
 801445a:	b2da      	uxtb	r2, r3
 801445c:	4b32      	ldr	r3, [pc, #200]	; (8014528 <_checkLoopTime+0x12c>)
 801445e:	701a      	strb	r2, [r3, #0]
 8014460:	e017      	b.n	8014492 <_checkLoopTime+0x96>
		else {
			timer_10ms = 9;
 8014462:	4b31      	ldr	r3, [pc, #196]	; (8014528 <_checkLoopTime+0x12c>)
 8014464:	2209      	movs	r2, #9
 8014466:	701a      	strb	r2, [r3, #0]

			pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 8014468:	4b30      	ldr	r3, [pc, #192]	; (801452c <_checkLoopTime+0x130>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2264      	movs	r2, #100	; 0x64
 801446e:	fb03 f202 	mul.w	r2, r3, r2
 8014472:	4b2f      	ldr	r3, [pc, #188]	; (8014530 <_checkLoopTime+0x134>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	fbb2 f3f3 	udiv	r3, r2, r3
 801447a:	b2db      	uxtb	r3, r3
 801447c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8014480:	b2da      	uxtb	r2, r3
 8014482:	4b28      	ldr	r3, [pc, #160]	; (8014524 <_checkLoopTime+0x128>)
 8014484:	711a      	strb	r2, [r3, #4]
			s_loop_count = 0UL;
 8014486:	4b2a      	ldr	r3, [pc, #168]	; (8014530 <_checkLoopTime+0x134>)
 8014488:	2200      	movs	r2, #0
 801448a:	601a      	str	r2, [r3, #0]
			s_pass_count = 0UL;
 801448c:	4b27      	ldr	r3, [pc, #156]	; (801452c <_checkLoopTime+0x130>)
 801448e:	2200      	movs	r2, #0
 8014490:	601a      	str	r2, [r3, #0]
		}
	}

	if (pif_performance.__state & 2) {		// 1sec
 8014492:	4b24      	ldr	r3, [pc, #144]	; (8014524 <_checkLoopTime+0x128>)
 8014494:	795b      	ldrb	r3, [r3, #5]
 8014496:	f003 0302 	and.w	r3, r3, #2
 801449a:	2b00      	cmp	r3, #0
 801449c:	d027      	beq.n	80144ee <_checkLoopTime+0xf2>
#ifdef __PIF_DEBUG__
		if (pif_performance.__max_loop_time1us > max_loop) max_loop = pif_performance.__max_loop_time1us;
 801449e:	4b21      	ldr	r3, [pc, #132]	; (8014524 <_checkLoopTime+0x128>)
 80144a0:	689a      	ldr	r2, [r3, #8]
 80144a2:	4b24      	ldr	r3, [pc, #144]	; (8014534 <_checkLoopTime+0x138>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d903      	bls.n	80144b2 <_checkLoopTime+0xb6>
 80144aa:	4b1e      	ldr	r3, [pc, #120]	; (8014524 <_checkLoopTime+0x128>)
 80144ac:	689b      	ldr	r3, [r3, #8]
 80144ae:	4a21      	ldr	r2, [pc, #132]	; (8014534 <_checkLoopTime+0x138>)
 80144b0:	6013      	str	r3, [r2, #0]
	#ifndef __PIF_NO_LOG__
		if (pif_log_flag.bt.performance) {
 80144b2:	4b21      	ldr	r3, [pc, #132]	; (8014538 <_checkLoopTime+0x13c>)
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0301 	and.w	r3, r3, #1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d010      	beq.n	80144e2 <_checkLoopTime+0xe6>
			value = 1000000L / pif_performance._count;
 80144c0:	4b18      	ldr	r3, [pc, #96]	; (8014524 <_checkLoopTime+0x128>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4a1d      	ldr	r2, [pc, #116]	; (801453c <_checkLoopTime+0x140>)
 80144c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80144ca:	607b      	str	r3, [r7, #4]
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s) MLT=%luus", value, pif_performance._count, pif_performance.__max_loop_time1us);
 80144cc:	4b15      	ldr	r3, [pc, #84]	; (8014524 <_checkLoopTime+0x128>)
 80144ce:	681a      	ldr	r2, [r3, #0]
 80144d0:	4b14      	ldr	r3, [pc, #80]	; (8014524 <_checkLoopTime+0x128>)
 80144d2:	689b      	ldr	r3, [r3, #8]
 80144d4:	9300      	str	r3, [sp, #0]
 80144d6:	4613      	mov	r3, r2
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	4919      	ldr	r1, [pc, #100]	; (8014540 <_checkLoopTime+0x144>)
 80144dc:	2002      	movs	r0, #2
 80144de:	f7fe ffe5 	bl	80134ac <pifLog_Printf>
		}
	#endif
		pif_performance.__max_loop_time1us = 0UL;
 80144e2:	4b10      	ldr	r3, [pc, #64]	; (8014524 <_checkLoopTime+0x128>)
 80144e4:	2200      	movs	r2, #0
 80144e6:	609a      	str	r2, [r3, #8]
			value = 1000000L / pif_performance._count;
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
        }
	#endif
#endif
    	pif_performance._count = 0;
 80144e8:	4b0e      	ldr	r3, [pc, #56]	; (8014524 <_checkLoopTime+0x128>)
 80144ea:	2200      	movs	r2, #0
 80144ec:	601a      	str	r2, [r3, #0]
	}

#ifdef __PIF_DEBUG__
	if (pif_performance.__state & 4) {		// 1min
 80144ee:	4b0d      	ldr	r3, [pc, #52]	; (8014524 <_checkLoopTime+0x128>)
 80144f0:	795b      	ldrb	r3, [r3, #5]
 80144f2:	f003 0304 	and.w	r3, r3, #4
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d009      	beq.n	801450e <_checkLoopTime+0x112>
	#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "MLT=%luus", max_loop);
 80144fa:	4b0e      	ldr	r3, [pc, #56]	; (8014534 <_checkLoopTime+0x138>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	461a      	mov	r2, r3
 8014500:	4910      	ldr	r1, [pc, #64]	; (8014544 <_checkLoopTime+0x148>)
 8014502:	2002      	movs	r0, #2
 8014504:	f7fe ffd2 	bl	80134ac <pifLog_Printf>
	#endif
		max_loop = 0UL;
 8014508:	4b0a      	ldr	r3, [pc, #40]	; (8014534 <_checkLoopTime+0x138>)
 801450a:	2200      	movs	r2, #0
 801450c:	601a      	str	r2, [r3, #0]
    }
#endif

	pif_performance.__state = 0;
 801450e:	4b05      	ldr	r3, [pc, #20]	; (8014524 <_checkLoopTime+0x128>)
 8014510:	2200      	movs	r2, #0
 8014512:	715a      	strb	r2, [r3, #5]
}
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	20001c7c 	.word	0x20001c7c
 8014520:	20001de0 	.word	0x20001de0
 8014524:	20001c70 	.word	0x20001c70
 8014528:	20001de4 	.word	0x20001de4
 801452c:	20001dd4 	.word	0x20001dd4
 8014530:	20001dd0 	.word	0x20001dd0
 8014534:	20001de8 	.word	0x20001de8
 8014538:	20001c8c 	.word	0x20001c8c
 801453c:	000f4240 	.word	0x000f4240
 8014540:	08027b30 	.word	0x08027b30
 8014544:	08027b4c 	.word	0x08027b4c

08014548 <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
    pif_id++;
 8014550:	4b07      	ldr	r3, [pc, #28]	; (8014570 <pifTask_Init+0x28>)
 8014552:	881b      	ldrh	r3, [r3, #0]
 8014554:	3301      	adds	r3, #1
 8014556:	b29a      	uxth	r2, r3
 8014558:	4b05      	ldr	r3, [pc, #20]	; (8014570 <pifTask_Init+0x28>)
 801455a:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 801455c:	4b04      	ldr	r3, [pc, #16]	; (8014570 <pifTask_Init+0x28>)
 801455e:	881a      	ldrh	r2, [r3, #0]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	80da      	strh	r2, [r3, #6]
}
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	2000011c 	.word	0x2000011c

08014574 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	460b      	mov	r3, r1
 801457e:	70fb      	strb	r3, [r7, #3]
 8014580:	4613      	mov	r3, r2
 8014582:	803b      	strh	r3, [r7, #0]
	if (mode == p_owner->_mode) return TRUE;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	7a1a      	ldrb	r2, [r3, #8]
 8014588:	78fb      	ldrb	r3, [r7, #3]
 801458a:	429a      	cmp	r2, r3
 801458c:	d101      	bne.n	8014592 <pifTask_ChangeMode+0x1e>
 801458e:	2301      	movs	r3, #1
 8014590:	e028      	b.n	80145e4 <pifTask_ChangeMode+0x70>

	if (p_owner->_mode == TM_EXTERNAL_CUTIN) s_task_cutin = NULL;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	7a1b      	ldrb	r3, [r3, #8]
 8014596:	2b06      	cmp	r3, #6
 8014598:	d102      	bne.n	80145a0 <pifTask_ChangeMode+0x2c>
 801459a:	4b14      	ldr	r3, [pc, #80]	; (80145ec <pifTask_ChangeMode+0x78>)
 801459c:	2200      	movs	r2, #0
 801459e:	601a      	str	r2, [r3, #0]

	if (!_checkParam(&mode, period)) return FALSE;
 80145a0:	883a      	ldrh	r2, [r7, #0]
 80145a2:	1cfb      	adds	r3, r7, #3
 80145a4:	4611      	mov	r1, r2
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7ff fda8 	bl	80140fc <_checkParam>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d101      	bne.n	80145b6 <pifTask_ChangeMode+0x42>
 80145b2:	2300      	movs	r3, #0
 80145b4:	e016      	b.n	80145e4 <pifTask_ChangeMode+0x70>

	switch (p_owner->_mode) {
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	7a1b      	ldrb	r3, [r3, #8]
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d805      	bhi.n	80145ca <pifTask_ChangeMode+0x56>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7ff fc9e 	bl	8013f04 <_resetTable>
		break;
 80145c8:	e000      	b.n	80145cc <pifTask_ChangeMode+0x58>

	default:
		break;
 80145ca:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 80145cc:	78fb      	ldrb	r3, [r7, #3]
 80145ce:	883a      	ldrh	r2, [r7, #0]
 80145d0:	4619      	mov	r1, r3
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff fe00 	bl	80141d8 <_setParam>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d101      	bne.n	80145e2 <pifTask_ChangeMode+0x6e>
 80145de:	2300      	movs	r3, #0
 80145e0:	e000      	b.n	80145e4 <pifTask_ChangeMode+0x70>

    return TRUE;
 80145e2:	2301      	movs	r3, #1
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	20001d44 	.word	0x20001d44

080145f0 <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 80145f0:	b480      	push	{r7}
 80145f2:	b083      	sub	sp, #12
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	460b      	mov	r3, r1
 80145fa:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	7a1b      	ldrb	r3, [r3, #8]
 8014600:	2b03      	cmp	r3, #3
 8014602:	dc02      	bgt.n	801460a <pifTask_ChangePeriod+0x1a>
 8014604:	2b02      	cmp	r3, #2
 8014606:	da02      	bge.n	801460e <pifTask_ChangePeriod+0x1e>
 8014608:	e007      	b.n	801461a <pifTask_ChangePeriod+0x2a>
 801460a:	2b09      	cmp	r3, #9
 801460c:	d105      	bne.n	801461a <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	887a      	ldrh	r2, [r7, #2]
 8014612:	815a      	strh	r2, [r3, #10]
		break;
 8014614:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 8014616:	2301      	movs	r3, #1
 8014618:	e003      	b.n	8014622 <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 801461a:	4b05      	ldr	r3, [pc, #20]	; (8014630 <pifTask_ChangePeriod+0x40>)
 801461c:	2209      	movs	r2, #9
 801461e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8014620:	2300      	movs	r3, #0
}
 8014622:	4618      	mov	r0, r3
 8014624:	370c      	adds	r7, #12
 8014626:	46bd      	mov	sp, r7
 8014628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462c:	4770      	bx	lr
 801462e:	bf00      	nop
 8014630:	20001c55 	.word	0x20001c55

08014634 <pifTask_SetTrigger>:

BOOL pifTask_SetTrigger(PifTask* p_owner)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
	if (p_owner) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d014      	beq.n	801466c <pifTask_SetTrigger+0x38>
		if (pif_act_timer1us) p_owner->__trigger_time = (*pif_act_timer1us)();
 8014642:	4b0d      	ldr	r3, [pc, #52]	; (8014678 <pifTask_SetTrigger+0x44>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d006      	beq.n	8014658 <pifTask_SetTrigger+0x24>
 801464a:	4b0b      	ldr	r3, [pc, #44]	; (8014678 <pifTask_SetTrigger+0x44>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4798      	blx	r3
 8014650:	4602      	mov	r2, r0
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	649a      	str	r2, [r3, #72]	; 0x48
 8014656:	e003      	b.n	8014660 <pifTask_SetTrigger+0x2c>
		else p_owner->__trigger_time = pif_cumulative_timer1ms;
 8014658:	4b08      	ldr	r3, [pc, #32]	; (801467c <pifTask_SetTrigger+0x48>)
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	649a      	str	r2, [r3, #72]	; 0x48
		p_owner->__trigger = TRUE;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2201      	movs	r2, #1
 8014664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return TRUE;
 8014668:	2301      	movs	r3, #1
 801466a:	e000      	b.n	801466e <pifTask_SetTrigger+0x3a>
	}
	return FALSE;
 801466c:	2300      	movs	r3, #0
}
 801466e:	4618      	mov	r0, r3
 8014670:	3708      	adds	r7, #8
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	20001c7c 	.word	0x20001c7c
 801467c:	20001c6c 	.word	0x20001c6c

08014680 <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	460b      	mov	r3, r1
 801468a:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 801468c:	4b17      	ldr	r3, [pc, #92]	; (80146ec <pifTask_GetDeltaTime+0x6c>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d107      	bne.n	80146a4 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 8014694:	4b16      	ldr	r3, [pc, #88]	; (80146f0 <pifTask_GetDeltaTime+0x70>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801469c:	fb02 f303 	mul.w	r3, r2, r3
 80146a0:	60fb      	str	r3, [r7, #12]
 80146a2:	e003      	b.n	80146ac <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 80146a4:	4b11      	ldr	r3, [pc, #68]	; (80146ec <pifTask_GetDeltaTime+0x6c>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	4798      	blx	r3
 80146aa:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146b0:	68fa      	ldr	r2, [r7, #12]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	60bb      	str	r3, [r7, #8]
	if (reset) {
 80146b6:	78fb      	ldrb	r3, [r7, #3]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d011      	beq.n	80146e0 <pifTask_GetDeltaTime+0x60>
		if (p_owner->__last_execute_time) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00a      	beq.n	80146da <pifTask_GetDeltaTime+0x5a>
			p_owner->_total_period_time += delta;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	69da      	ldr	r2, [r3, #28]
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	441a      	add	r2, r3
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	61da      	str	r2, [r3, #28]
			p_owner->_period_count++;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6a1b      	ldr	r3, [r3, #32]
 80146d4:	1c5a      	adds	r2, r3, #1
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	621a      	str	r2, [r3, #32]
		}
		p_owner->__last_execute_time = currect;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return delta;
 80146e0:	68bb      	ldr	r3, [r7, #8]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	20001c7c 	.word	0x20001c7c
 80146f0:	20001c6c 	.word	0x20001c6c

080146f4 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	2158      	movs	r1, #88	; 0x58
 8014700:	480b      	ldr	r0, [pc, #44]	; (8014730 <pifTaskManager_Init+0x3c>)
 8014702:	f7fd ffa7 	bl	8012654 <pifFixList_Init>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d101      	bne.n	8014710 <pifTaskManager_Init+0x1c>
 801470c:	2300      	movs	r3, #0
 801470e:	e00b      	b.n	8014728 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 8014710:	4b08      	ldr	r3, [pc, #32]	; (8014734 <pifTaskManager_Init+0x40>)
 8014712:	2200      	movs	r2, #0
 8014714:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 8014716:	4b08      	ldr	r3, [pc, #32]	; (8014738 <pifTaskManager_Init+0x44>)
 8014718:	2200      	movs	r2, #0
 801471a:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 801471c:	2280      	movs	r2, #128	; 0x80
 801471e:	2100      	movs	r1, #0
 8014720:	4806      	ldr	r0, [pc, #24]	; (801473c <pifTaskManager_Init+0x48>)
 8014722:	f00e fc8b 	bl	802303c <memset>
	return TRUE;
 8014726:	2301      	movs	r3, #1
}
 8014728:	4618      	mov	r0, r3
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	20001d10 	.word	0x20001d10
 8014734:	20001d28 	.word	0x20001d28
 8014738:	20001d48 	.word	0x20001d48
 801473c:	20001d4c 	.word	0x20001d4c

08014740 <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	60ba      	str	r2, [r7, #8]
 8014748:	607b      	str	r3, [r7, #4]
 801474a:	4603      	mov	r3, r0
 801474c:	73fb      	strb	r3, [r7, #15]
 801474e:	460b      	mov	r3, r1
 8014750:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d104      	bne.n	8014762 <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 8014758:	4b2a      	ldr	r3, [pc, #168]	; (8014804 <pifTaskManager_Add+0xc4>)
 801475a:	2201      	movs	r2, #1
 801475c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801475e:	2300      	movs	r3, #0
 8014760:	e04b      	b.n	80147fa <pifTaskManager_Add+0xba>
	}

	if (!_checkParam(&mode, period)) return NULL;
 8014762:	89ba      	ldrh	r2, [r7, #12]
 8014764:	f107 030f 	add.w	r3, r7, #15
 8014768:	4611      	mov	r1, r2
 801476a:	4618      	mov	r0, r3
 801476c:	f7ff fcc6 	bl	80140fc <_checkParam>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	d101      	bne.n	801477a <pifTaskManager_Add+0x3a>
 8014776:	2300      	movs	r3, #0
 8014778:	e03f      	b.n	80147fa <pifTaskManager_Add+0xba>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 801477a:	4823      	ldr	r0, [pc, #140]	; (8014808 <pifTaskManager_Add+0xc8>)
 801477c:	f7fd fffd 	bl	801277a <pifFixList_AddFirst>
 8014780:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d101      	bne.n	801478c <pifTaskManager_Add+0x4c>
 8014788:	2300      	movs	r3, #0
 801478a:	e036      	b.n	80147fa <pifTaskManager_Add+0xba>

	pifTask_Init(p_owner);
 801478c:	6978      	ldr	r0, [r7, #20]
 801478e:	f7ff fedb 	bl	8014548 <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 8014792:	7bfb      	ldrb	r3, [r7, #15]
 8014794:	89ba      	ldrh	r2, [r7, #12]
 8014796:	4619      	mov	r1, r3
 8014798:	6978      	ldr	r0, [r7, #20]
 801479a:	f7ff fd1d 	bl	80141d8 <_setParam>
 801479e:	4603      	mov	r3, r0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d021      	beq.n	80147e8 <pifTaskManager_Add+0xa8>

    p_owner->__evt_loop = evt_loop;
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	68ba      	ldr	r2, [r7, #8]
 80147a8:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->_p_client = p_client;
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_EXTERNAL_ORDER && mode != TM_EXTERNAL_CUTIN) ? !start : TRUE;
 80147b0:	7bfb      	ldrb	r3, [r7, #15]
 80147b2:	2b07      	cmp	r3, #7
 80147b4:	d006      	beq.n	80147c4 <pifTaskManager_Add+0x84>
 80147b6:	7bfb      	ldrb	r3, [r7, #15]
 80147b8:	2b06      	cmp	r3, #6
 80147ba:	d003      	beq.n	80147c4 <pifTaskManager_Add+0x84>
 80147bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d101      	bne.n	80147c8 <pifTaskManager_Add+0x88>
 80147c4:	2301      	movs	r3, #1
 80147c6:	e000      	b.n	80147ca <pifTaskManager_Add+0x8a>
 80147c8:	2300      	movs	r3, #0
 80147ca:	b2da      	uxtb	r2, r3
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	711a      	strb	r2, [r3, #4]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 80147d0:	4b0e      	ldr	r3, [pc, #56]	; (801480c <pifTaskManager_Add+0xcc>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d105      	bne.n	80147e4 <pifTaskManager_Add+0xa4>
 80147d8:	480b      	ldr	r0, [pc, #44]	; (8014808 <pifTaskManager_Add+0xc8>)
 80147da:	f7fe f842 	bl	8012862 <pifFixList_Begin>
 80147de:	4603      	mov	r3, r0
 80147e0:	4a0a      	ldr	r2, [pc, #40]	; (801480c <pifTaskManager_Add+0xcc>)
 80147e2:	6013      	str	r3, [r2, #0]
    return p_owner;
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	e008      	b.n	80147fa <pifTaskManager_Add+0xba>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80147e8:	bf00      	nop

fail:
	if (p_owner) {
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d003      	beq.n	80147f8 <pifTaskManager_Add+0xb8>
		pifFixList_Remove(&s_tasks, p_owner);
 80147f0:	6979      	ldr	r1, [r7, #20]
 80147f2:	4805      	ldr	r0, [pc, #20]	; (8014808 <pifTaskManager_Add+0xc8>)
 80147f4:	f7fd fff5 	bl	80127e2 <pifFixList_Remove>
	}
	return NULL;
 80147f8:	2300      	movs	r3, #0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3718      	adds	r7, #24
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	20001c55 	.word	0x20001c55
 8014808:	20001d10 	.word	0x20001d10
 801480c:	20001d28 	.word	0x20001d28

08014810 <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 8014818:	4b17      	ldr	r3, [pc, #92]	; (8014878 <pifTaskManager_Remove+0x68>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	3308      	adds	r3, #8
 801481e:	687a      	ldr	r2, [r7, #4]
 8014820:	429a      	cmp	r2, r3
 8014822:	d102      	bne.n	801482a <pifTaskManager_Remove+0x1a>
 8014824:	4b14      	ldr	r3, [pc, #80]	; (8014878 <pifTaskManager_Remove+0x68>)
 8014826:	2200      	movs	r2, #0
 8014828:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	7a1b      	ldrb	r3, [r3, #8]
 801482e:	2b01      	cmp	r3, #1
 8014830:	d805      	bhi.n	801483e <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff fb64 	bl	8013f04 <_resetTable>
		break;
 801483c:	e000      	b.n	8014840 <pifTaskManager_Remove+0x30>

	default:
		break;
 801483e:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 8014840:	6879      	ldr	r1, [r7, #4]
 8014842:	480e      	ldr	r0, [pc, #56]	; (801487c <pifTaskManager_Remove+0x6c>)
 8014844:	f7fd ffcd 	bl	80127e2 <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 8014848:	480c      	ldr	r0, [pc, #48]	; (801487c <pifTaskManager_Remove+0x6c>)
 801484a:	f7fd fffe 	bl	801284a <pifFixList_Count>
 801484e:	4603      	mov	r3, r0
 8014850:	2b00      	cmp	r3, #0
 8014852:	d103      	bne.n	801485c <pifTaskManager_Remove+0x4c>
 8014854:	4b08      	ldr	r3, [pc, #32]	; (8014878 <pifTaskManager_Remove+0x68>)
 8014856:	2200      	movs	r2, #0
 8014858:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 801485a:	e009      	b.n	8014870 <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 801485c:	4b06      	ldr	r3, [pc, #24]	; (8014878 <pifTaskManager_Remove+0x68>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d105      	bne.n	8014870 <pifTaskManager_Remove+0x60>
 8014864:	4805      	ldr	r0, [pc, #20]	; (801487c <pifTaskManager_Remove+0x6c>)
 8014866:	f7fd fffc 	bl	8012862 <pifFixList_Begin>
 801486a:	4603      	mov	r3, r0
 801486c:	4a02      	ldr	r2, [pc, #8]	; (8014878 <pifTaskManager_Remove+0x68>)
 801486e:	6013      	str	r3, [r2, #0]
}
 8014870:	bf00      	nop
 8014872:	3708      	adds	r7, #8
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	20001d28 	.word	0x20001d28
 801487c:	20001d10 	.word	0x20001d10

08014880 <pifTaskManager_Count>:

int pifTaskManager_Count()
{
 8014880:	b580      	push	{r7, lr}
 8014882:	af00      	add	r7, sp, #0
	return pifFixList_Count(&s_tasks);
 8014884:	4802      	ldr	r0, [pc, #8]	; (8014890 <pifTaskManager_Count+0x10>)
 8014886:	f7fd ffe0 	bl	801284a <pifFixList_Count>
 801488a:	4603      	mov	r3, r0
}
 801488c:	4618      	mov	r0, r3
 801488e:	bd80      	pop	{r7, pc}
 8014890:	20001d10 	.word	0x20001d10

08014894 <pifTaskManager_Loop>:

void pifTaskManager_Loop()
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b08a      	sub	sp, #40	; 0x28
 8014898:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 801489a:	2300      	movs	r3, #0
 801489c:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 801489e:	2300      	movs	r3, #0
 80148a0:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 80148a2:	2300      	movs	r3, #0
 80148a4:	61fb      	str	r3, [r7, #28]
	int i, n, t = 0, count = pifFixList_Count(&s_tasks);
 80148a6:	2300      	movs	r3, #0
 80148a8:	613b      	str	r3, [r7, #16]
 80148aa:	487e      	ldr	r0, [pc, #504]	; (8014aa4 <pifTaskManager_Loop+0x210>)
 80148ac:	f7fd ffcd 	bl	801284a <pifFixList_Count>
 80148b0:	60b8      	str	r0, [r7, #8]
	BOOL trigger = FALSE;
 80148b2:	2300      	movs	r3, #0
 80148b4:	73fb      	strb	r3, [r7, #15]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 80148b6:	4b7c      	ldr	r3, [pc, #496]	; (8014aa8 <pifTaskManager_Loop+0x214>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d005      	beq.n	80148ca <pifTaskManager_Loop+0x36>
 80148be:	4b7a      	ldr	r3, [pc, #488]	; (8014aa8 <pifTaskManager_Loop+0x214>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	4798      	blx	r3
 80148c4:	4603      	mov	r3, r0
 80148c6:	4a79      	ldr	r2, [pc, #484]	; (8014aac <pifTaskManager_Loop+0x218>)
 80148c8:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 80148ca:	4b79      	ldr	r3, [pc, #484]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d109      	bne.n	80148e6 <pifTaskManager_Loop+0x52>
		if (!count) return;
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f000 80e1 	beq.w	8014a9c <pifTaskManager_Loop+0x208>
		s_it_current = pifFixList_Begin(&s_tasks);
 80148da:	4872      	ldr	r0, [pc, #456]	; (8014aa4 <pifTaskManager_Loop+0x210>)
 80148dc:	f7fd ffc1 	bl	8012862 <pifFixList_Begin>
 80148e0:	4603      	mov	r3, r0
 80148e2:	4a73      	ldr	r2, [pc, #460]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 80148e4:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80148e6:	4b73      	ldr	r3, [pc, #460]	; (8014ab4 <pifTaskManager_Loop+0x220>)
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	4413      	add	r3, r2
 80148ee:	4a71      	ldr	r2, [pc, #452]	; (8014ab4 <pifTaskManager_Loop+0x220>)
 80148f0:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger) {
 80148f2:	4b71      	ldr	r3, [pc, #452]	; (8014ab8 <pifTaskManager_Loop+0x224>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d012      	beq.n	8014920 <pifTaskManager_Loop+0x8c>
 80148fa:	4b6f      	ldr	r3, [pc, #444]	; (8014ab8 <pifTaskManager_Loop+0x224>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00c      	beq.n	8014920 <pifTaskManager_Loop+0x8c>
		s_task_cutin->__trigger = FALSE;
 8014906:	4b6c      	ldr	r3, [pc, #432]	; (8014ab8 <pifTaskManager_Loop+0x224>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2200      	movs	r2, #0
 801490c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 8014910:	4b69      	ldr	r3, [pc, #420]	; (8014ab8 <pifTaskManager_Loop+0x224>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8014916:	2301      	movs	r3, #1
 8014918:	73fb      	strb	r3, [r7, #15]
		i = 1;
 801491a:	2301      	movs	r3, #1
 801491c:	61bb      	str	r3, [r7, #24]
 801491e:	e062      	b.n	80149e6 <pifTaskManager_Loop+0x152>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014920:	2300      	movs	r3, #0
 8014922:	617b      	str	r3, [r7, #20]
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	61bb      	str	r3, [r7, #24]
 8014928:	e056      	b.n	80149d8 <pifTaskManager_Loop+0x144>
			p_owner = (PifTask*)s_it_current->data;
 801492a:	4b61      	ldr	r3, [pc, #388]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	3308      	adds	r3, #8
 8014930:	607b      	str	r3, [r7, #4]

			if (p_owner->__trigger) {
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014938:	2b00      	cmp	r3, #0
 801493a:	d008      	beq.n	801494e <pifTaskManager_Loop+0xba>
				p_owner->__trigger = FALSE;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2200      	movs	r2, #0
 8014940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014948:	2301      	movs	r3, #1
 801494a:	73fb      	strb	r3, [r7, #15]
 801494c:	e02d      	b.n	80149aa <pifTaskManager_Loop+0x116>
			}
			else if (!p_owner->pause) {
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	791b      	ldrb	r3, [r3, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d129      	bne.n	80149aa <pifTaskManager_Loop+0x116>
				if (p_owner->_mode == TM_TIMER) {
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	7a1b      	ldrb	r3, [r3, #8]
 801495a:	2b08      	cmp	r3, #8
 801495c:	d107      	bne.n	801496e <pifTaskManager_Loop+0xda>
					(*p_owner->__evt_loop)(p_owner);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	4798      	blx	r3
					t++;
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	3301      	adds	r3, #1
 801496a:	613b      	str	r3, [r7, #16]
 801496c:	e01d      	b.n	80149aa <pifTaskManager_Loop+0x116>
				}
				else if (p_owner->__processing) {
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014972:	2b00      	cmp	r3, #0
 8014974:	d019      	beq.n	80149aa <pifTaskManager_Loop+0x116>
					if (p_owner->_mode == TM_IDLE_MS) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	7a1b      	ldrb	r3, [r3, #8]
 801497a:	2b09      	cmp	r3, #9
 801497c:	d110      	bne.n	80149a0 <pifTaskManager_Loop+0x10c>
						if (!p_idle) {
 801497e:	6a3b      	ldr	r3, [r7, #32]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d112      	bne.n	80149aa <pifTaskManager_Loop+0x116>
							p_idle = (*p_owner->__processing)(p_owner);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	4798      	blx	r3
 801498c:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00a      	beq.n	80149aa <pifTaskManager_Loop+0x116>
								it_idle = s_it_current;
 8014994:	4b46      	ldr	r3, [pc, #280]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	61fb      	str	r3, [r7, #28]
								n = i;
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	617b      	str	r3, [r7, #20]
 801499e:	e004      	b.n	80149aa <pifTaskManager_Loop+0x116>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	4798      	blx	r3
 80149a8:	6278      	str	r0, [r7, #36]	; 0x24
					}
				}
			}

			s_it_current = pifFixList_Next(s_it_current);
 80149aa:	4b41      	ldr	r3, [pc, #260]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fd ff63 	bl	801287a <pifFixList_Next>
 80149b4:	4603      	mov	r3, r0
 80149b6:	4a3e      	ldr	r2, [pc, #248]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 80149b8:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 80149ba:	4b3d      	ldr	r3, [pc, #244]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d107      	bne.n	80149d2 <pifTaskManager_Loop+0x13e>
				s_it_current = pifFixList_Begin(&s_tasks);
 80149c2:	4838      	ldr	r0, [pc, #224]	; (8014aa4 <pifTaskManager_Loop+0x210>)
 80149c4:	f7fd ff4d 	bl	8012862 <pifFixList_Begin>
 80149c8:	4603      	mov	r3, r0
 80149ca:	4a39      	ldr	r2, [pc, #228]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 80149cc:	6013      	str	r3, [r2, #0]
				_checkLoopTime();
 80149ce:	f7ff fd15 	bl	80143fc <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 80149d2:	69bb      	ldr	r3, [r7, #24]
 80149d4:	3301      	adds	r3, #1
 80149d6:	61bb      	str	r3, [r7, #24]
 80149d8:	69ba      	ldr	r2, [r7, #24]
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	429a      	cmp	r2, r3
 80149de:	da02      	bge.n	80149e6 <pifTaskManager_Loop+0x152>
 80149e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d0a1      	beq.n	801492a <pifTaskManager_Loop+0x96>
			}
		}
	}

	if (p_select) {
 80149e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d034      	beq.n	8014a56 <pifTaskManager_Loop+0x1c2>
		if (trigger) {
 80149ec:	7bfb      	ldrb	r3, [r7, #15]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d02d      	beq.n	8014a4e <pifTaskManager_Loop+0x1ba>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 80149f2:	4b2d      	ldr	r3, [pc, #180]	; (8014aa8 <pifTaskManager_Loop+0x214>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00c      	beq.n	8014a14 <pifTaskManager_Loop+0x180>
 80149fa:	4b2b      	ldr	r3, [pc, #172]	; (8014aa8 <pifTaskManager_Loop+0x214>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	4798      	blx	r3
 8014a00:	4603      	mov	r3, r0
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014a12:	e009      	b.n	8014a28 <pifTaskManager_Loop+0x194>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014a14:	4b29      	ldr	r3, [pc, #164]	; (8014abc <pifTaskManager_Loop+0x228>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	b29a      	uxth	r2, r3
 8014a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	1ad3      	subs	r3, r2, r3
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a26:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d904      	bls.n	8014a40 <pifTaskManager_Loop+0x1ac>
 8014a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3e:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a46:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014a48:	441a      	add	r2, r3
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4c:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 8014a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a50:	f7ff fc40 	bl	80142d4 <_processingTask>
 8014a54:	e018      	b.n	8014a88 <pifTaskManager_Loop+0x1f4>
	}
	else if (p_idle) {
 8014a56:	6a3b      	ldr	r3, [r7, #32]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d015      	beq.n	8014a88 <pifTaskManager_Loop+0x1f4>
		i = n;
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014a60:	69f8      	ldr	r0, [r7, #28]
 8014a62:	f7fd ff0a 	bl	801287a <pifFixList_Next>
 8014a66:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d106      	bne.n	8014a7c <pifTaskManager_Loop+0x1e8>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014a6e:	480d      	ldr	r0, [pc, #52]	; (8014aa4 <pifTaskManager_Loop+0x210>)
 8014a70:	f7fd fef7 	bl	8012862 <pifFixList_Begin>
 8014a74:	4603      	mov	r3, r0
 8014a76:	4a0e      	ldr	r2, [pc, #56]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 8014a78:	6013      	str	r3, [r2, #0]
 8014a7a:	e002      	b.n	8014a82 <pifTaskManager_Loop+0x1ee>
		}
		else {
			s_it_current = it_idle;
 8014a7c:	4a0c      	ldr	r2, [pc, #48]	; (8014ab0 <pifTaskManager_Loop+0x21c>)
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 8014a82:	6a38      	ldr	r0, [r7, #32]
 8014a84:	f7ff fc26 	bl	80142d4 <_processingTask>
	}
	s_pass_count += i - t;
 8014a88:	69ba      	ldr	r2, [r7, #24]
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	1ad3      	subs	r3, r2, r3
 8014a8e:	461a      	mov	r2, r3
 8014a90:	4b0b      	ldr	r3, [pc, #44]	; (8014ac0 <pifTaskManager_Loop+0x22c>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	4413      	add	r3, r2
 8014a96:	4a0a      	ldr	r2, [pc, #40]	; (8014ac0 <pifTaskManager_Loop+0x22c>)
 8014a98:	6013      	str	r3, [r2, #0]
 8014a9a:	e000      	b.n	8014a9e <pifTaskManager_Loop+0x20a>
		if (!count) return;
 8014a9c:	bf00      	nop
}
 8014a9e:	3728      	adds	r7, #40	; 0x28
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	20001d10 	.word	0x20001d10
 8014aa8:	20001c7c 	.word	0x20001c7c
 8014aac:	20001c58 	.word	0x20001c58
 8014ab0:	20001d28 	.word	0x20001d28
 8014ab4:	20001dd0 	.word	0x20001dd0
 8014ab8:	20001d44 	.word	0x20001d44
 8014abc:	20001c6c 	.word	0x20001c6c
 8014ac0:	20001dd4 	.word	0x20001dd4

08014ac4 <pifTaskManager_Yield>:

void pifTaskManager_Yield()
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b08a      	sub	sp, #40	; 0x28
 8014ac8:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014aca:	2300      	movs	r3, #0
 8014acc:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	61fb      	str	r3, [r7, #28]
	int i, k, n, t = 0, count = pifFixList_Count(&s_tasks);
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	60fb      	str	r3, [r7, #12]
 8014ada:	488a      	ldr	r0, [pc, #552]	; (8014d04 <pifTaskManager_Yield+0x240>)
 8014adc:	f7fd feb5 	bl	801284a <pifFixList_Count>
 8014ae0:	6078      	str	r0, [r7, #4]
	BOOL trigger = FALSE;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	72fb      	strb	r3, [r7, #11]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 8014ae6:	4b88      	ldr	r3, [pc, #544]	; (8014d08 <pifTaskManager_Yield+0x244>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d005      	beq.n	8014afa <pifTaskManager_Yield+0x36>
 8014aee:	4b86      	ldr	r3, [pc, #536]	; (8014d08 <pifTaskManager_Yield+0x244>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	4798      	blx	r3
 8014af4:	4603      	mov	r3, r0
 8014af6:	4a85      	ldr	r2, [pc, #532]	; (8014d0c <pifTaskManager_Yield+0x248>)
 8014af8:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 8014afa:	4b85      	ldr	r3, [pc, #532]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d109      	bne.n	8014b16 <pifTaskManager_Yield+0x52>
		if (!count) return;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	f000 8132 	beq.w	8014d6e <pifTaskManager_Yield+0x2aa>
		s_it_current = pifFixList_Begin(&s_tasks);
 8014b0a:	487e      	ldr	r0, [pc, #504]	; (8014d04 <pifTaskManager_Yield+0x240>)
 8014b0c:	f7fd fea9 	bl	8012862 <pifFixList_Begin>
 8014b10:	4603      	mov	r3, r0
 8014b12:	4a7f      	ldr	r2, [pc, #508]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014b14:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 8014b16:	4b7f      	ldr	r3, [pc, #508]	; (8014d14 <pifTaskManager_Yield+0x250>)
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	4a7d      	ldr	r2, [pc, #500]	; (8014d14 <pifTaskManager_Yield+0x250>)
 8014b20:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger && !s_task_cutin->_running) {
 8014b22:	4b7d      	ldr	r3, [pc, #500]	; (8014d18 <pifTaskManager_Yield+0x254>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d017      	beq.n	8014b5a <pifTaskManager_Yield+0x96>
 8014b2a:	4b7b      	ldr	r3, [pc, #492]	; (8014d18 <pifTaskManager_Yield+0x254>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d011      	beq.n	8014b5a <pifTaskManager_Yield+0x96>
 8014b36:	4b78      	ldr	r3, [pc, #480]	; (8014d18 <pifTaskManager_Yield+0x254>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	7a5b      	ldrb	r3, [r3, #9]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10c      	bne.n	8014b5a <pifTaskManager_Yield+0x96>
		s_task_cutin->__trigger = FALSE;
 8014b40:	4b75      	ldr	r3, [pc, #468]	; (8014d18 <pifTaskManager_Yield+0x254>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2200      	movs	r2, #0
 8014b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 8014b4a:	4b73      	ldr	r3, [pc, #460]	; (8014d18 <pifTaskManager_Yield+0x254>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8014b50:	2301      	movs	r3, #1
 8014b52:	72fb      	strb	r3, [r7, #11]
		i = 1;
 8014b54:	2301      	movs	r3, #1
 8014b56:	61bb      	str	r3, [r7, #24]
 8014b58:	e097      	b.n	8014c8a <pifTaskManager_Yield+0x1c6>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	613b      	str	r3, [r7, #16]
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	61bb      	str	r3, [r7, #24]
 8014b62:	e08a      	b.n	8014c7a <pifTaskManager_Yield+0x1b6>
			p_owner = (PifTask*)s_it_current->data;
 8014b64:	4b6a      	ldr	r3, [pc, #424]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	3308      	adds	r3, #8
 8014b6a:	603b      	str	r3, [r7, #0]

			if (p_owner->_running) goto next;
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	7a5b      	ldrb	r3, [r3, #9]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d162      	bne.n	8014c3a <pifTaskManager_Yield+0x176>
			if (s_task_stack_ptr) {
 8014b74:	4b69      	ldr	r3, [pc, #420]	; (8014d1c <pifTaskManager_Yield+0x258>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d021      	beq.n	8014bc0 <pifTaskManager_Yield+0xfc>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	617b      	str	r3, [r7, #20]
 8014b80:	e012      	b.n	8014ba8 <pifTaskManager_Yield+0xe4>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014b82:	4a67      	ldr	r2, [pc, #412]	; (8014d20 <pifTaskManager_Yield+0x25c>)
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b8a:	795b      	ldrb	r3, [r3, #5]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d008      	beq.n	8014ba2 <pifTaskManager_Yield+0xde>
 8014b90:	4a63      	ldr	r2, [pc, #396]	; (8014d20 <pifTaskManager_Yield+0x25c>)
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b98:	795a      	ldrb	r2, [r3, #5]
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	795b      	ldrb	r3, [r3, #5]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d008      	beq.n	8014bb4 <pifTaskManager_Yield+0xf0>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	617b      	str	r3, [r7, #20]
 8014ba8:	4b5c      	ldr	r3, [pc, #368]	; (8014d1c <pifTaskManager_Yield+0x258>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	697a      	ldr	r2, [r7, #20]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	dbe7      	blt.n	8014b82 <pifTaskManager_Yield+0xbe>
 8014bb2:	e000      	b.n	8014bb6 <pifTaskManager_Yield+0xf2>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014bb4:	bf00      	nop
				}
				if (k < s_task_stack_ptr) goto next;
 8014bb6:	4b59      	ldr	r3, [pc, #356]	; (8014d1c <pifTaskManager_Yield+0x258>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	697a      	ldr	r2, [r7, #20]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	db3e      	blt.n	8014c3e <pifTaskManager_Yield+0x17a>
			}

			if (p_owner->__trigger) {
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d008      	beq.n	8014bdc <pifTaskManager_Yield+0x118>
				p_owner->__trigger = FALSE;
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	72fb      	strb	r3, [r7, #11]
 8014bda:	e033      	b.n	8014c44 <pifTaskManager_Yield+0x180>
			}
			else if (!p_owner->pause) {
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	791b      	ldrb	r3, [r3, #4]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d12e      	bne.n	8014c42 <pifTaskManager_Yield+0x17e>
				if (p_owner->_mode == TM_TIMER) {
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	7a1b      	ldrb	r3, [r3, #8]
 8014be8:	2b08      	cmp	r3, #8
 8014bea:	d107      	bne.n	8014bfc <pifTaskManager_Yield+0x138>
					(*p_owner->__evt_loop)(p_owner);
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bf0:	6838      	ldr	r0, [r7, #0]
 8014bf2:	4798      	blx	r3
					t++;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	60fb      	str	r3, [r7, #12]
 8014bfa:	e023      	b.n	8014c44 <pifTaskManager_Yield+0x180>
				}
				else if (p_owner->__processing) {
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d01e      	beq.n	8014c42 <pifTaskManager_Yield+0x17e>
					if (p_owner->_mode == TM_IDLE_MS) {
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	7a1b      	ldrb	r3, [r3, #8]
 8014c08:	2b09      	cmp	r3, #9
 8014c0a:	d110      	bne.n	8014c2e <pifTaskManager_Yield+0x16a>
						if (!p_idle) {
 8014c0c:	6a3b      	ldr	r3, [r7, #32]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d118      	bne.n	8014c44 <pifTaskManager_Yield+0x180>
							p_idle = (*p_owner->__processing)(p_owner);
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c16:	6838      	ldr	r0, [r7, #0]
 8014c18:	4798      	blx	r3
 8014c1a:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014c1c:	6a3b      	ldr	r3, [r7, #32]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d010      	beq.n	8014c44 <pifTaskManager_Yield+0x180>
								it_idle = s_it_current;
 8014c22:	4b3b      	ldr	r3, [pc, #236]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	61fb      	str	r3, [r7, #28]
								n = i;
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	613b      	str	r3, [r7, #16]
 8014c2c:	e00a      	b.n	8014c44 <pifTaskManager_Yield+0x180>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c32:	6838      	ldr	r0, [r7, #0]
 8014c34:	4798      	blx	r3
 8014c36:	6278      	str	r0, [r7, #36]	; 0x24
 8014c38:	e004      	b.n	8014c44 <pifTaskManager_Yield+0x180>
			if (p_owner->_running) goto next;
 8014c3a:	bf00      	nop
 8014c3c:	e002      	b.n	8014c44 <pifTaskManager_Yield+0x180>
				if (k < s_task_stack_ptr) goto next;
 8014c3e:	bf00      	nop
 8014c40:	e000      	b.n	8014c44 <pifTaskManager_Yield+0x180>
					}
				}
			}

next:
 8014c42:	bf00      	nop
			s_it_current = pifFixList_Next(s_it_current);
 8014c44:	4b32      	ldr	r3, [pc, #200]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7fd fe16 	bl	801287a <pifFixList_Next>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	4a2f      	ldr	r2, [pc, #188]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014c52:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8014c54:	4b2e      	ldr	r3, [pc, #184]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d10b      	bne.n	8014c74 <pifTaskManager_Yield+0x1b0>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014c5c:	4829      	ldr	r0, [pc, #164]	; (8014d04 <pifTaskManager_Yield+0x240>)
 8014c5e:	f7fd fe00 	bl	8012862 <pifFixList_Begin>
 8014c62:	4603      	mov	r3, r0
 8014c64:	4a2a      	ldr	r2, [pc, #168]	; (8014d10 <pifTaskManager_Yield+0x24c>)
 8014c66:	6013      	str	r3, [r2, #0]
				if (s_task_stack_ptr) _checkLoopTime();
 8014c68:	4b2c      	ldr	r3, [pc, #176]	; (8014d1c <pifTaskManager_Yield+0x258>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d001      	beq.n	8014c74 <pifTaskManager_Yield+0x1b0>
 8014c70:	f7ff fbc4 	bl	80143fc <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014c74:	69bb      	ldr	r3, [r7, #24]
 8014c76:	3301      	adds	r3, #1
 8014c78:	61bb      	str	r3, [r7, #24]
 8014c7a:	69ba      	ldr	r2, [r7, #24]
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	da03      	bge.n	8014c8a <pifTaskManager_Yield+0x1c6>
 8014c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f43f af6d 	beq.w	8014b64 <pifTaskManager_Yield+0xa0>
			}
		}
	}

	if (p_select) {
 8014c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d04b      	beq.n	8014d28 <pifTaskManager_Yield+0x264>
		if (trigger && s_task_stack_ptr) {
 8014c90:	7afb      	ldrb	r3, [r7, #11]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d031      	beq.n	8014cfa <pifTaskManager_Yield+0x236>
 8014c96:	4b21      	ldr	r3, [pc, #132]	; (8014d1c <pifTaskManager_Yield+0x258>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d02d      	beq.n	8014cfa <pifTaskManager_Yield+0x236>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 8014c9e:	4b1a      	ldr	r3, [pc, #104]	; (8014d08 <pifTaskManager_Yield+0x244>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00c      	beq.n	8014cc0 <pifTaskManager_Yield+0x1fc>
 8014ca6:	4b18      	ldr	r3, [pc, #96]	; (8014d08 <pifTaskManager_Yield+0x244>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	4798      	blx	r3
 8014cac:	4603      	mov	r3, r0
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	1ad3      	subs	r3, r2, r3
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014cbe:	e009      	b.n	8014cd4 <pifTaskManager_Yield+0x210>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014cc0:	4b18      	ldr	r3, [pc, #96]	; (8014d24 <pifTaskManager_Yield+0x260>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	b29a      	uxth	r2, r3
 8014cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	1ad3      	subs	r3, r2, r3
 8014cce:	b29a      	uxth	r2, r3
 8014cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd2:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014cd8:	461a      	mov	r2, r3
 8014cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d904      	bls.n	8014cec <pifTaskManager_Yield+0x228>
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cea:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cf2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014cf4:	441a      	add	r2, r3
 8014cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf8:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 8014cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cfc:	f7ff faea 	bl	80142d4 <_processingTask>
 8014d00:	e02b      	b.n	8014d5a <pifTaskManager_Yield+0x296>
 8014d02:	bf00      	nop
 8014d04:	20001d10 	.word	0x20001d10
 8014d08:	20001c7c 	.word	0x20001c7c
 8014d0c:	20001c58 	.word	0x20001c58
 8014d10:	20001d28 	.word	0x20001d28
 8014d14:	20001dd0 	.word	0x20001dd0
 8014d18:	20001d44 	.word	0x20001d44
 8014d1c:	20001d40 	.word	0x20001d40
 8014d20:	20001d2c 	.word	0x20001d2c
 8014d24:	20001c6c 	.word	0x20001c6c
	}
	else if (p_idle) {
 8014d28:	6a3b      	ldr	r3, [r7, #32]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d015      	beq.n	8014d5a <pifTaskManager_Yield+0x296>
		i = n;
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014d32:	69f8      	ldr	r0, [r7, #28]
 8014d34:	f7fd fda1 	bl	801287a <pifFixList_Next>
 8014d38:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d106      	bne.n	8014d4e <pifTaskManager_Yield+0x28a>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014d40:	480d      	ldr	r0, [pc, #52]	; (8014d78 <pifTaskManager_Yield+0x2b4>)
 8014d42:	f7fd fd8e 	bl	8012862 <pifFixList_Begin>
 8014d46:	4603      	mov	r3, r0
 8014d48:	4a0c      	ldr	r2, [pc, #48]	; (8014d7c <pifTaskManager_Yield+0x2b8>)
 8014d4a:	6013      	str	r3, [r2, #0]
 8014d4c:	e002      	b.n	8014d54 <pifTaskManager_Yield+0x290>
		}
		else {
			s_it_current = it_idle;
 8014d4e:	4a0b      	ldr	r2, [pc, #44]	; (8014d7c <pifTaskManager_Yield+0x2b8>)
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 8014d54:	6a38      	ldr	r0, [r7, #32]
 8014d56:	f7ff fabd 	bl	80142d4 <_processingTask>
	}
	s_pass_count += i - t;
 8014d5a:	69ba      	ldr	r2, [r7, #24]
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	1ad3      	subs	r3, r2, r3
 8014d60:	461a      	mov	r2, r3
 8014d62:	4b07      	ldr	r3, [pc, #28]	; (8014d80 <pifTaskManager_Yield+0x2bc>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	4413      	add	r3, r2
 8014d68:	4a05      	ldr	r2, [pc, #20]	; (8014d80 <pifTaskManager_Yield+0x2bc>)
 8014d6a:	6013      	str	r3, [r2, #0]
 8014d6c:	e000      	b.n	8014d70 <pifTaskManager_Yield+0x2ac>
		if (!count) return;
 8014d6e:	bf00      	nop
}
 8014d70:	3728      	adds	r7, #40	; 0x28
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	20001d10 	.word	0x20001d10
 8014d7c:	20001d28 	.word	0x20001d28
 8014d80:	20001dd4 	.word	0x20001dd4

08014d84 <pifTaskManager_YieldMs>:

void pifTaskManager_YieldMs(uint32_t time)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d00c      	beq.n	8014dac <pifTaskManager_YieldMs+0x28>

    start = pif_cumulative_timer1ms;
 8014d92:	4b08      	ldr	r3, [pc, #32]	; (8014db4 <pifTaskManager_YieldMs+0x30>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	60fb      	str	r3, [r7, #12]
    do {
		pifTaskManager_Yield();
 8014d98:	f7ff fe94 	bl	8014ac4 <pifTaskManager_Yield>
    } while (pif_cumulative_timer1ms - start <= time);
 8014d9c:	4b05      	ldr	r3, [pc, #20]	; (8014db4 <pifTaskManager_YieldMs+0x30>)
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	1ad3      	subs	r3, r2, r3
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d2f6      	bcs.n	8014d98 <pifTaskManager_YieldMs+0x14>
 8014daa:	e000      	b.n	8014dae <pifTaskManager_YieldMs+0x2a>
    if (!time) return;
 8014dac:	bf00      	nop
}
 8014dae:	3710      	adds	r7, #16
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	20001c6c 	.word	0x20001c6c

08014db8 <pifTaskManager_YieldAbort>:
		} while ((*pif_act_timer1us)() - start <= time);
    }
}

void pifTaskManager_YieldAbort(PifTaskCheckAbort p_check_abort, PifIssuerP p_issuer)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
    if (!p_check_abort) return;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d008      	beq.n	8014dda <pifTaskManager_YieldAbort+0x22>

    while (1) {
		pifTaskManager_Yield();
 8014dc8:	f7ff fe7c 	bl	8014ac4 <pifTaskManager_Yield>
		if ((*p_check_abort)(p_issuer)) break;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6838      	ldr	r0, [r7, #0]
 8014dd0:	4798      	blx	r3
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d102      	bne.n	8014dde <pifTaskManager_YieldAbort+0x26>
		pifTaskManager_Yield();
 8014dd8:	e7f6      	b.n	8014dc8 <pifTaskManager_YieldAbort+0x10>
    if (!p_check_abort) return;
 8014dda:	bf00      	nop
 8014ddc:	e000      	b.n	8014de0 <pifTaskManager_YieldAbort+0x28>
		if ((*p_check_abort)(p_issuer)) break;
 8014dde:	bf00      	nop
    }
}
 8014de0:	3708      	adds	r7, #8
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
	...

08014de8 <pifTaskManager_YieldAbortMs>:

void pifTaskManager_YieldAbortMs(uint32_t time, PifTaskCheckAbort p_check_abort, PifIssuerP p_issuer)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
    uint32_t start;

    if (!time) return;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d015      	beq.n	8014e26 <pifTaskManager_YieldAbortMs+0x3e>
    if (!p_check_abort) return;
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d014      	beq.n	8014e2a <pifTaskManager_YieldAbortMs+0x42>

    start = pif_cumulative_timer1ms;
 8014e00:	4b0d      	ldr	r3, [pc, #52]	; (8014e38 <pifTaskManager_YieldAbortMs+0x50>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	617b      	str	r3, [r7, #20]
    do {
		pifTaskManager_Yield();
 8014e06:	f7ff fe5d 	bl	8014ac4 <pifTaskManager_Yield>
		if ((*p_check_abort)(p_issuer)) break;
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	4798      	blx	r3
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d10b      	bne.n	8014e2e <pifTaskManager_YieldAbortMs+0x46>
    } while (pif_cumulative_timer1ms - start <= time);
 8014e16:	4b08      	ldr	r3, [pc, #32]	; (8014e38 <pifTaskManager_YieldAbortMs+0x50>)
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	1ad3      	subs	r3, r2, r3
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d2f0      	bcs.n	8014e06 <pifTaskManager_YieldAbortMs+0x1e>
 8014e24:	e004      	b.n	8014e30 <pifTaskManager_YieldAbortMs+0x48>
    if (!time) return;
 8014e26:	bf00      	nop
 8014e28:	e002      	b.n	8014e30 <pifTaskManager_YieldAbortMs+0x48>
    if (!p_check_abort) return;
 8014e2a:	bf00      	nop
 8014e2c:	e000      	b.n	8014e30 <pifTaskManager_YieldAbortMs+0x48>
		if ((*p_check_abort)(p_issuer)) break;
 8014e2e:	bf00      	nop
}
 8014e30:	3718      	adds	r7, #24
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}
 8014e36:	bf00      	nop
 8014e38:	20001c6c 	.word	0x20001c6c

08014e3c <pifTaskManager_Print>:
		} while ((*pif_act_timer1us)() - start <= time);
    }
}

void pifTaskManager_Print()
{
 8014e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e3e:	b091      	sub	sp, #68	; 0x44
 8014e40:	af04      	add	r7, sp, #16
	PifFixListIterator it;
	const char* mode[] = { "Ratio", "Always", "PeriodMs", "PeriodUs", "ChangeMs", "ChangeUs", "ExtCutin", "ExtOrder", "Timer", "IdleMs" };
 8014e42:	4b40      	ldr	r3, [pc, #256]	; (8014f44 <pifTaskManager_Print+0x108>)
 8014e44:	463c      	mov	r4, r7
 8014e46:	461d      	mov	r5, r3
 8014e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e54:	e884 0003 	stmia.w	r4, {r0, r1}

   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifFixList_Count(&s_tasks));
 8014e58:	483b      	ldr	r0, [pc, #236]	; (8014f48 <pifTaskManager_Print+0x10c>)
 8014e5a:	f7fd fcf6 	bl	801284a <pifFixList_Count>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	461a      	mov	r2, r3
 8014e62:	493a      	ldr	r1, [pc, #232]	; (8014f4c <pifTaskManager_Print+0x110>)
 8014e64:	2000      	movs	r0, #0
 8014e66:	f7fe fb21 	bl	80134ac <pifLog_Printf>
	it = pifFixList_Begin(&s_tasks);
 8014e6a:	4837      	ldr	r0, [pc, #220]	; (8014f48 <pifTaskManager_Print+0x10c>)
 8014e6c:	f7fd fcf9 	bl	8012862 <pifFixList_Begin>
 8014e70:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014e72:	e05f      	b.n	8014f34 <pifTaskManager_Print+0xf8>
		PifTask* p_owner = (PifTask*)it->data;
 8014e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e76:	3308      	adds	r3, #8
 8014e78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (p_owner->name) {
 8014e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d007      	beq.n	8014e92 <pifTaskManager_Print+0x56>
			pifLog_Printf(LT_NONE, "  %s", p_owner->name);
 8014e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	461a      	mov	r2, r3
 8014e88:	4931      	ldr	r1, [pc, #196]	; (8014f50 <pifTaskManager_Print+0x114>)
 8014e8a:	2000      	movs	r0, #0
 8014e8c:	f7fe fb0e 	bl	80134ac <pifLog_Printf>
 8014e90:	e003      	b.n	8014e9a <pifTaskManager_Print+0x5e>
		}
		else {
			pifLog_Print(LT_NONE, "  ---");
 8014e92:	4930      	ldr	r1, [pc, #192]	; (8014f54 <pifTaskManager_Print+0x118>)
 8014e94:	2000      	movs	r0, #0
 8014e96:	f7fe fa7b 	bl	8013390 <pifLog_Print>
		}
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e9c:	88db      	ldrh	r3, [r3, #6]
 8014e9e:	461e      	mov	r6, r3
 8014ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea2:	7a1b      	ldrb	r3, [r3, #8]
 8014ea4:	009b      	lsls	r3, r3, #2
 8014ea6:	3330      	adds	r3, #48	; 0x30
 8014ea8:	443b      	add	r3, r7
 8014eaa:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8014eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb0:	895b      	ldrh	r3, [r3, #10]
 8014eb2:	461d      	mov	r5, r3
 8014eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb6:	691b      	ldr	r3, [r3, #16]
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014eba:	6951      	ldr	r1, [r2, #20]
 8014ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ebe:	6992      	ldr	r2, [r2, #24]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014ec0:	fbb1 f2f2 	udiv	r2, r1, r2
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ec6:	6949      	ldr	r1, [r1, #20]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014ec8:	4c23      	ldr	r4, [pc, #140]	; (8014f58 <pifTaskManager_Print+0x11c>)
 8014eca:	fba4 4101 	umull	r4, r1, r4, r1
 8014ece:	0989      	lsrs	r1, r1, #6
 8014ed0:	9103      	str	r1, [sp, #12]
 8014ed2:	9202      	str	r2, [sp, #8]
 8014ed4:	9301      	str	r3, [sp, #4]
 8014ed6:	9500      	str	r5, [sp, #0]
 8014ed8:	4603      	mov	r3, r0
 8014eda:	4632      	mov	r2, r6
 8014edc:	491f      	ldr	r1, [pc, #124]	; (8014f5c <pifTaskManager_Print+0x120>)
 8014ede:	2000      	movs	r0, #0
 8014ee0:	f7fe fae4 	bl	80134ac <pifLog_Printf>
		if (p_owner->_total_period_time) {
 8014ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee6:	69db      	ldr	r3, [r3, #28]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d00a      	beq.n	8014f02 <pifTaskManager_Print+0xc6>
			pifLog_Printf(LT_NONE, ",  period: %dus", p_owner->_total_period_time / p_owner->_period_count);
 8014eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eee:	69da      	ldr	r2, [r3, #28]
 8014ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef2:	6a1b      	ldr	r3, [r3, #32]
 8014ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ef8:	461a      	mov	r2, r3
 8014efa:	4919      	ldr	r1, [pc, #100]	; (8014f60 <pifTaskManager_Print+0x124>)
 8014efc:	2000      	movs	r0, #0
 8014efe:	f7fe fad5 	bl	80134ac <pifLog_Printf>
		}
		if (p_owner->_total_trigger_delay) {
 8014f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d00c      	beq.n	8014f24 <pifTaskManager_Print+0xe8>
			pifLog_Printf(LT_NONE, ",  delay: M=%dus A=%dus", p_owner->_max_trigger_delay, p_owner->_total_trigger_delay / p_owner->_execution_count);
 8014f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f14:	699b      	ldr	r3, [r3, #24]
 8014f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f1a:	460a      	mov	r2, r1
 8014f1c:	4911      	ldr	r1, [pc, #68]	; (8014f64 <pifTaskManager_Print+0x128>)
 8014f1e:	2000      	movs	r0, #0
 8014f20:	f7fe fac4 	bl	80134ac <pifLog_Printf>
		}
		pifLog_Print(LT_NONE, "\n");
 8014f24:	4910      	ldr	r1, [pc, #64]	; (8014f68 <pifTaskManager_Print+0x12c>)
 8014f26:	2000      	movs	r0, #0
 8014f28:	f7fe fa32 	bl	8013390 <pifLog_Print>
		it = pifFixList_Next(it);
 8014f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f2e:	f7fd fca4 	bl	801287a <pifFixList_Next>
 8014f32:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d19c      	bne.n	8014e74 <pifTaskManager_Print+0x38>
	}
}
 8014f3a:	bf00      	nop
 8014f3c:	bf00      	nop
 8014f3e:	3734      	adds	r7, #52	; 0x34
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f44:	08027bd0 	.word	0x08027bd0
 8014f48:	20001d10 	.word	0x20001d10
 8014f4c:	08027b58 	.word	0x08027b58
 8014f50:	08027b68 	.word	0x08027b68
 8014f54:	08027b70 	.word	0x08027b70
 8014f58:	10624dd3 	.word	0x10624dd3
 8014f5c:	08027b78 	.word	0x08027b78
 8014f60:	08027ba4 	.word	0x08027ba4
 8014f64:	08027bb4 	.word	0x08027bb4
 8014f68:	08027bcc 	.word	0x08027bcc

08014f6c <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b086      	sub	sp, #24
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	3308      	adds	r3, #8
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7fd fc6f 	bl	8012862 <pifFixList_Begin>
 8014f84:	6178      	str	r0, [r7, #20]
	while (it) {
 8014f86:	e017      	b.n	8014fb8 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	3308      	adds	r3, #8
 8014f8c:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	7f1b      	ldrb	r3, [r3, #28]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d00c      	beq.n	8014fb0 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	6a1b      	ldr	r3, [r3, #32]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d005      	beq.n	8014fb0 <_doTask+0x44>
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6a1b      	ldr	r3, [r3, #32]
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	6912      	ldr	r2, [r2, #16]
 8014fac:	4610      	mov	r0, r2
 8014fae:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014fb0:	6978      	ldr	r0, [r7, #20]
 8014fb2:	f7fd fc62 	bl	801287a <pifFixList_Next>
 8014fb6:	6178      	str	r0, [r7, #20]
	while (it) {
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1e4      	bne.n	8014f88 <_doTask+0x1c>
	}
	return 0;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af02      	add	r7, sp, #8
 8014fce:	60f8      	str	r0, [r7, #12]
 8014fd0:	607a      	str	r2, [r7, #4]
 8014fd2:	603b      	str	r3, [r7, #0]
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d002      	beq.n	8014fe4 <pifTimerManager_Init+0x1c>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d104      	bne.n	8014fee <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014fe4:	4b21      	ldr	r3, [pc, #132]	; (801506c <pifTimerManager_Init+0xa4>)
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014fea:	2300      	movs	r3, #0
 8014fec:	e03a      	b.n	8015064 <pifTimerManager_Init+0x9c>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014fee:	2224      	movs	r2, #36	; 0x24
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	68f8      	ldr	r0, [r7, #12]
 8014ff4:	f00e f822 	bl	802303c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014ff8:	897b      	ldrh	r3, [r7, #10]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d106      	bne.n	801500c <pifTimerManager_Init+0x44>
 8014ffe:	4b1c      	ldr	r3, [pc, #112]	; (8015070 <pifTimerManager_Init+0xa8>)
 8015000:	881b      	ldrh	r3, [r3, #0]
 8015002:	1c5a      	adds	r2, r3, #1
 8015004:	b291      	uxth	r1, r2
 8015006:	4a1a      	ldr	r2, [pc, #104]	; (8015070 <pifTimerManager_Init+0xa8>)
 8015008:	8011      	strh	r1, [r2, #0]
 801500a:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	897a      	ldrh	r2, [r7, #10]
 8015010:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	3308      	adds	r3, #8
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	2128      	movs	r1, #40	; 0x28
 801501a:	4618      	mov	r0, r3
 801501c:	f7fd fb1a 	bl	8012654 <pifFixList_Init>
 8015020:	4603      	mov	r3, r0
 8015022:	2b00      	cmp	r3, #0
 8015024:	d017      	beq.n	8015056 <pifTimerManager_Init+0x8e>
    p_manager->_period1us = period1us;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	687a      	ldr	r2, [r7, #4]
 801502a:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 801502c:	2301      	movs	r3, #1
 801502e:	9300      	str	r3, [sp, #0]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	4a10      	ldr	r2, [pc, #64]	; (8015074 <pifTimerManager_Init+0xac>)
 8015034:	2100      	movs	r1, #0
 8015036:	2008      	movs	r0, #8
 8015038:	f7ff fb82 	bl	8014740 <pifTaskManager_Add>
 801503c:	4602      	mov	r2, r0
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	6a1b      	ldr	r3, [r3, #32]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d007      	beq.n	801505a <pifTimerManager_Init+0x92>
    p_manager->__p_task->name = "Timer";
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	6a1b      	ldr	r3, [r3, #32]
 801504e:	4a0a      	ldr	r2, [pc, #40]	; (8015078 <pifTimerManager_Init+0xb0>)
 8015050:	601a      	str	r2, [r3, #0]
    return TRUE;
 8015052:	2301      	movs	r3, #1
 8015054:	e006      	b.n	8015064 <pifTimerManager_Init+0x9c>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8015056:	bf00      	nop
 8015058:	e000      	b.n	801505c <pifTimerManager_Init+0x94>
    if (!p_manager->__p_task) goto fail;
 801505a:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	f000 f80d 	bl	801507c <pifTimerManager_Clear>
    return FALSE;
 8015062:	2300      	movs	r3, #0
}
 8015064:	4618      	mov	r0, r3
 8015066:	3710      	adds	r7, #16
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}
 801506c:	20001c55 	.word	0x20001c55
 8015070:	2000011c 	.word	0x2000011c
 8015074:	08014f6d 	.word	0x08014f6d
 8015078:	08027c24 	.word	0x08027c24

0801507c <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a1b      	ldr	r3, [r3, #32]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d007      	beq.n	801509c <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6a1b      	ldr	r3, [r3, #32]
 8015090:	4618      	mov	r0, r3
 8015092:	f7ff fbbd 	bl	8014810 <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2200      	movs	r2, #0
 801509a:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	3308      	adds	r3, #8
 80150a0:	2100      	movs	r1, #0
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fd fb36 	bl	8012714 <pifFixList_Clear>
}
 80150a8:	bf00      	nop
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	460b      	mov	r3, r1
 80150ba:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	3308      	adds	r3, #8
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7fd fb5a 	bl	801277a <pifFixList_AddFirst>
 80150c6:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d101      	bne.n	80150d2 <pifTimerManager_Add+0x22>
 80150ce:	2300      	movs	r3, #0
 80150d0:	e006      	b.n	80150e0 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	78fa      	ldrb	r2, [r7, #3]
 80150d6:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2200      	movs	r2, #0
 80150dc:	725a      	strb	r2, [r3, #9]
    return p_timer;
 80150de:	68fb      	ldr	r3, [r7, #12]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2202      	movs	r2, #2
 80150f4:	725a      	strb	r2, [r3, #9]
}
 80150f6:	bf00      	nop
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr

08015102 <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8015102:	b580      	push	{r7, lr}
 8015104:	b082      	sub	sp, #8
 8015106:	af00      	add	r7, sp, #0
 8015108:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	3308      	adds	r3, #8
 801510e:	4618      	mov	r0, r3
 8015110:	f7fd fb9b 	bl	801284a <pifFixList_Count>
 8015114:	4603      	mov	r3, r0
}
 8015116:	4618      	mov	r0, r3
 8015118:	3708      	adds	r7, #8
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
	...

08015120 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8015120:	b480      	push	{r7}
 8015122:	b083      	sub	sp, #12
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6039      	str	r1, [r7, #0]
	if (!target) {
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d104      	bne.n	801513a <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8015130:	4b11      	ldr	r3, [pc, #68]	; (8015178 <pifTimer_Start+0x58>)
 8015132:	2201      	movs	r2, #1
 8015134:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015136:	2300      	movs	r3, #0
 8015138:	e017      	b.n	801516a <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	7a5b      	ldrb	r3, [r3, #9]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d105      	bne.n	801514e <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2201      	movs	r2, #1
 8015146:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2200      	movs	r2, #0
 801514c:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	683a      	ldr	r2, [r7, #0]
 8015152:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	683a      	ldr	r2, [r7, #0]
 8015158:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	7a1b      	ldrb	r3, [r3, #8]
 801515e:	2b02      	cmp	r3, #2
 8015160:	d102      	bne.n	8015168 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2200      	movs	r2, #0
 8015166:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8015168:	2301      	movs	r3, #1
}
 801516a:	4618      	mov	r0, r3
 801516c:	370c      	adds	r7, #12
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	20001c55 	.word	0x20001c55

0801517c <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2200      	movs	r2, #0
 8015188:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	2200      	movs	r2, #0
 801518e:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	7a1b      	ldrb	r3, [r3, #8]
 8015194:	2b02      	cmp	r3, #2
 8015196:	d103      	bne.n	80151a0 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	2000      	movs	r0, #0
 801519e:	4798      	blx	r3
	}
}
 80151a0:	bf00      	nop
 80151a2:	3708      	adds	r7, #8
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b083      	sub	sp, #12
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2201      	movs	r2, #1
 80151bc:	725a      	strb	r2, [r3, #9]
}
 80151be:	bf00      	nop
 80151c0:	370c      	adds	r7, #12
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr

080151ca <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b086      	sub	sp, #24
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 80151d2:	2300      	movs	r3, #0
 80151d4:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	f000 8092 	beq.w	8015302 <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	3308      	adds	r3, #8
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7fd fb3d 	bl	8012862 <pifFixList_Begin>
 80151e8:	6138      	str	r0, [r7, #16]
	while (it) {
 80151ea:	e07c      	b.n	80152e6 <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	3308      	adds	r3, #8
 80151f0:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	7a5b      	ldrb	r3, [r3, #9]
 80151f6:	2b02      	cmp	r3, #2
 80151f8:	d105      	bne.n	8015206 <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d16e      	bne.n	80152de <pifTimerManager_sigTick+0x114>
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	617b      	str	r3, [r7, #20]
 8015204:	e06b      	b.n	80152de <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	68db      	ldr	r3, [r3, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d060      	beq.n	80152d0 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	1e5a      	subs	r2, r3, #1
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	7a1b      	ldrb	r3, [r3, #8]
 801521c:	2b02      	cmp	r3, #2
 801521e:	d031      	beq.n	8015284 <pifTimerManager_sigTick+0xba>
 8015220:	2b02      	cmp	r3, #2
 8015222:	dc5c      	bgt.n	80152de <pifTimerManager_sigTick+0x114>
 8015224:	2b00      	cmp	r3, #0
 8015226:	d002      	beq.n	801522e <pifTimerManager_sigTick+0x64>
 8015228:	2b01      	cmp	r3, #1
 801522a:	d015      	beq.n	8015258 <pifTimerManager_sigTick+0x8e>
 801522c:	e057      	b.n	80152de <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	68db      	ldr	r3, [r3, #12]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d14e      	bne.n	80152d4 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2200      	movs	r2, #0
 801523a:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	2201      	movs	r2, #1
 8015240:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015246:	2b00      	cmp	r3, #0
 8015248:	d044      	beq.n	80152d4 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801524e:	68fa      	ldr	r2, [r7, #12]
 8015250:	6952      	ldr	r2, [r2, #20]
 8015252:	4610      	mov	r0, r2
 8015254:	4798      	blx	r3
					}
				}
				break;
 8015256:	e03d      	b.n	80152d4 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d13b      	bne.n	80152d8 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2201      	movs	r2, #1
 801526c:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015272:	2b00      	cmp	r3, #0
 8015274:	d030      	beq.n	80152d8 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	6952      	ldr	r2, [r2, #20]
 801527e:	4610      	mov	r0, r2
 8015280:	4798      	blx	r3
					}
				}
				break;
 8015282:	e029      	b.n	80152d8 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	699a      	ldr	r2, [r3, #24]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	429a      	cmp	r2, r3
 801528e:	d016      	beq.n	80152be <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d107      	bne.n	80152a8 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	2000      	movs	r0, #0
 801529e:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	68da      	ldr	r2, [r3, #12]
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	699b      	ldr	r3, [r3, #24]
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d113      	bne.n	80152dc <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	2001      	movs	r0, #1
 80152ba:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 80152bc:	e00e      	b.n	80152dc <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d10a      	bne.n	80152dc <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681a      	ldr	r2, [r3, #0]
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	60da      	str	r2, [r3, #12]
				break;
 80152ce:	e005      	b.n	80152dc <pifTimerManager_sigTick+0x112>
			}
		}
 80152d0:	bf00      	nop
 80152d2:	e004      	b.n	80152de <pifTimerManager_sigTick+0x114>
				break;
 80152d4:	bf00      	nop
 80152d6:	e002      	b.n	80152de <pifTimerManager_sigTick+0x114>
				break;
 80152d8:	bf00      	nop
 80152da:	e000      	b.n	80152de <pifTimerManager_sigTick+0x114>
				break;
 80152dc:	bf00      	nop

		it = pifFixList_Next(it);
 80152de:	6938      	ldr	r0, [r7, #16]
 80152e0:	f7fd facb 	bl	801287a <pifFixList_Next>
 80152e4:	6138      	str	r0, [r7, #16]
	while (it) {
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f47f af7f 	bne.w	80151ec <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d007      	beq.n	8015304 <pifTimerManager_sigTick+0x13a>
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	3308      	adds	r3, #8
 80152f8:	6979      	ldr	r1, [r7, #20]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7fd fa71 	bl	80127e2 <pifFixList_Remove>
 8015300:	e000      	b.n	8015304 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8015302:	bf00      	nop
}
 8015304:	3718      	adds	r7, #24
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}

0801530a <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 801530a:	b480      	push	{r7}
 801530c:	b085      	sub	sp, #20
 801530e:	af00      	add	r7, sp, #0
 8015310:	60f8      	str	r0, [r7, #12]
 8015312:	60b9      	str	r1, [r7, #8]
 8015314:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	68ba      	ldr	r2, [r7, #8]
 801531a:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	611a      	str	r2, [r3, #16]
}
 8015322:	bf00      	nop
 8015324:	3714      	adds	r7, #20
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr
	...

08015330 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	460b      	mov	r3, r1
 801533a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d104      	bne.n	801534c <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015342:	4b09      	ldr	r3, [pc, #36]	; (8015368 <pifNoiseFilter_Init+0x38>)
 8015344:	2201      	movs	r2, #1
 8015346:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015348:	2300      	movs	r3, #0
 801534a:	e008      	b.n	801535e <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 801534c:	2208      	movs	r2, #8
 801534e:	2100      	movs	r1, #0
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f00d fe73 	bl	802303c <memset>

    p_owner->_type = type;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	78fa      	ldrb	r2, [r7, #3]
 801535a:	701a      	strb	r2, [r3, #0]
    return TRUE;
 801535c:	2301      	movs	r3, #1
}
 801535e:	4618      	mov	r0, r3
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	20001c55 	.word	0x20001c55

0801536c <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	6839      	ldr	r1, [r7, #0]
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	4798      	blx	r3
 8015380:	4603      	mov	r3, r0
}
 8015382:	4618      	mov	r0, r3
 8015384:	3708      	adds	r7, #8
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b082      	sub	sp, #8
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d002      	beq.n	80153a0 <_clear+0x16>
 801539a:	2b02      	cmp	r3, #2
 801539c:	d00d      	beq.n	80153ba <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 801539e:	e01c      	b.n	80153da <_clear+0x50>
		if (p_owner->__wf.value) {
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d015      	beq.n	80153d4 <_clear+0x4a>
			free(p_owner->__wf.value);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	699b      	ldr	r3, [r3, #24]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f00d fe2f 	bl	8023010 <free>
			p_owner->__wf.value = NULL;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2200      	movs	r2, #0
 80153b6:	619a      	str	r2, [r3, #24]
		break;
 80153b8:	e00c      	b.n	80153d4 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	69db      	ldr	r3, [r3, #28]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00a      	beq.n	80153d8 <_clear+0x4e>
			free(p_owner->__nc.diff);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	69db      	ldr	r3, [r3, #28]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f00d fe22 	bl	8023010 <free>
			p_owner->__nc.diff = NULL;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	61da      	str	r2, [r3, #28]
		break;
 80153d2:	e001      	b.n	80153d8 <_clear+0x4e>
		break;
 80153d4:	bf00      	nop
 80153d6:	e000      	b.n	80153da <_clear+0x50>
		break;
 80153d8:	bf00      	nop
	}
}
 80153da:	bf00      	nop
 80153dc:	3708      	adds	r7, #8
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80153e2:	b480      	push	{r7}
 80153e4:	b085      	sub	sp, #20
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
 80153ea:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153f6:	3301      	adds	r3, #1
 80153f8:	68fa      	ldr	r2, [r7, #12]
 80153fa:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80153fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8015402:	fb01 f202 	mul.w	r2, r1, r2
 8015406:	1a9b      	subs	r3, r3, r2
 8015408:	b25a      	sxtb	r2, r3
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	699a      	ldr	r2, [r3, #24]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	6919      	ldr	r1, [r3, #16]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801541c:	009b      	lsls	r3, r3, #2
 801541e:	440b      	add	r3, r1
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	1ad2      	subs	r2, r2, r3
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	691a      	ldr	r2, [r3, #16]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015432:	009b      	lsls	r3, r3, #2
 8015434:	4413      	add	r3, r2
 8015436:	683a      	ldr	r2, [r7, #0]
 8015438:	6812      	ldr	r2, [r2, #0]
 801543a:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	699a      	ldr	r2, [r3, #24]
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	6919      	ldr	r1, [r3, #16]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	440b      	add	r3, r1
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	441a      	add	r2, r3
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	699b      	ldr	r3, [r3, #24]
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015460:	fb93 f2f2 	sdiv	r2, r3, r2
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	330c      	adds	r3, #12
}
 801546c:	4618      	mov	r0, r3
 801546e:	3714      	adds	r7, #20
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr

08015478 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015478:	b480      	push	{r7}
 801547a:	b08b      	sub	sp, #44	; 0x2c
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	69da      	ldr	r2, [r3, #28]
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015490:	4619      	mov	r1, r3
 8015492:	460b      	mov	r3, r1
 8015494:	005b      	lsls	r3, r3, #1
 8015496:	440b      	add	r3, r1
 8015498:	005b      	lsls	r3, r3, #1
 801549a:	4413      	add	r3, r2
 801549c:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	b29a      	uxth	r2, r3
 80154a4:	69bb      	ldr	r3, [r7, #24]
 80154a6:	6919      	ldr	r1, [r3, #16]
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	440b      	add	r3, r1
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	1ad3      	subs	r3, r2, r3
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	b21b      	sxth	r3, r3
 80154bc:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 80154be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	1ad3      	subs	r3, r2, r3
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	b21b      	sxth	r3, r3
 80154d2:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 80154d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	da06      	bge.n	80154ea <_processNoiseCancel+0x72>
 80154dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	425b      	negs	r3, r3
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	b21b      	sxth	r3, r3
 80154e8:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 80154ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80154ee:	b29a      	uxth	r2, r3
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	4413      	add	r3, r2
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	b21b      	sxth	r3, r3
 80154fe:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015500:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015504:	2b00      	cmp	r3, #0
 8015506:	da06      	bge.n	8015516 <_processNoiseCancel+0x9e>
 8015508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801550c:	b29b      	uxth	r3, r3
 801550e:	425b      	negs	r3, r3
 8015510:	b29b      	uxth	r3, r3
 8015512:	b21b      	sxth	r3, r3
 8015514:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 8015516:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801551a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801551e:	429a      	cmp	r2, r3
 8015520:	dd6d      	ble.n	80155fe <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	691a      	ldr	r2, [r3, #16]
 8015526:	69bb      	ldr	r3, [r7, #24]
 8015528:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801552c:	009b      	lsls	r3, r3, #2
 801552e:	4413      	add	r3, r2
 8015530:	683a      	ldr	r2, [r7, #0]
 8015532:	6812      	ldr	r2, [r2, #0]
 8015534:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 801553a:	69bb      	ldr	r3, [r7, #24]
 801553c:	69da      	ldr	r2, [r3, #28]
 801553e:	69bb      	ldr	r3, [r7, #24]
 8015540:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8015544:	4619      	mov	r1, r3
 8015546:	460b      	mov	r3, r1
 8015548:	005b      	lsls	r3, r3, #1
 801554a:	440b      	add	r3, r1
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	4413      	add	r3, r2
 8015550:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	691a      	ldr	r2, [r3, #16]
 8015556:	69bb      	ldr	r3, [r7, #24]
 8015558:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	4413      	add	r3, r2
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	b29a      	uxth	r2, r3
 8015564:	69bb      	ldr	r3, [r7, #24]
 8015566:	6919      	ldr	r1, [r3, #16]
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 801556e:	009b      	lsls	r3, r3, #2
 8015570:	440b      	add	r3, r1
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	b29b      	uxth	r3, r3
 8015576:	1ad3      	subs	r3, r2, r3
 8015578:	b29b      	uxth	r3, r3
 801557a:	b21a      	sxth	r2, r3
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015586:	b29a      	uxth	r2, r3
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801558e:	b29b      	uxth	r3, r3
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	b29a      	uxth	r2, r3
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	3302      	adds	r3, #2
 8015598:	b212      	sxth	r2, r2
 801559a:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	3302      	adds	r3, #2
 80155a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	da0a      	bge.n	80155be <_processNoiseCancel+0x146>
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	3302      	adds	r3, #2
 80155ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	425b      	negs	r3, r3
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	3302      	adds	r3, #2
 80155ba:	b212      	sxth	r2, r2
 80155bc:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155cc:	b29b      	uxth	r3, r3
 80155ce:	4413      	add	r3, r2
 80155d0:	b29a      	uxth	r2, r3
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	3304      	adds	r3, #4
 80155d6:	b212      	sxth	r2, r2
 80155d8:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	3304      	adds	r3, #4
 80155de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	da43      	bge.n	801566e <_processNoiseCancel+0x1f6>
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	3304      	adds	r3, #4
 80155ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	425b      	negs	r3, r3
 80155f2:	b29a      	uxth	r2, r3
 80155f4:	693b      	ldr	r3, [r7, #16]
 80155f6:	3304      	adds	r3, #4
 80155f8:	b212      	sxth	r2, r2
 80155fa:	801a      	strh	r2, [r3, #0]
 80155fc:	e037      	b.n	801566e <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801560e:	3301      	adds	r3, #1
 8015610:	69ba      	ldr	r2, [r7, #24]
 8015612:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015616:	fb93 f1f2 	sdiv	r1, r3, r2
 801561a:	fb01 f202 	mul.w	r2, r1, r2
 801561e:	1a9b      	subs	r3, r3, r2
 8015620:	b25a      	sxtb	r2, r3
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	691a      	ldr	r2, [r3, #16]
 801562a:	69bb      	ldr	r3, [r7, #24]
 801562c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	4413      	add	r3, r2
 8015634:	683a      	ldr	r2, [r7, #0]
 8015636:	6812      	ldr	r2, [r2, #0]
 8015638:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 801563a:	69bb      	ldr	r3, [r7, #24]
 801563c:	69da      	ldr	r2, [r3, #28]
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015644:	4619      	mov	r1, r3
 8015646:	460b      	mov	r3, r1
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	440b      	add	r3, r1
 801564c:	005b      	lsls	r3, r3, #1
 801564e:	4413      	add	r3, r2
 8015650:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 8015652:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	3302      	adds	r3, #2
 801565e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015662:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	3304      	adds	r3, #4
 8015668:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801566c:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 801566e:	2300      	movs	r3, #0
 8015670:	61fb      	str	r3, [r7, #28]
	count = 0;
 8015672:	2300      	movs	r3, #0
 8015674:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015676:	2300      	movs	r3, #0
 8015678:	627b      	str	r3, [r7, #36]	; 0x24
 801567a:	e00e      	b.n	801569a <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	691a      	ldr	r2, [r3, #16]
 8015680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	4413      	add	r3, r2
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	69fa      	ldr	r2, [r7, #28]
 801568a:	4413      	add	r3, r2
 801568c:	61fb      	str	r3, [r7, #28]
		count++;
 801568e:	6a3b      	ldr	r3, [r7, #32]
 8015690:	3301      	adds	r3, #1
 8015692:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 8015694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015696:	3301      	adds	r3, #1
 8015698:	627b      	str	r3, [r7, #36]	; 0x24
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80156a0:	461a      	mov	r2, r3
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	4293      	cmp	r3, r2
 80156a6:	dbe9      	blt.n	801567c <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 80156a8:	6a3b      	ldr	r3, [r7, #32]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	dd05      	ble.n	80156ba <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 80156ae:	69fa      	ldr	r2, [r7, #28]
 80156b0:	6a3b      	ldr	r3, [r7, #32]
 80156b2:	fb92 f2f3 	sdiv	r2, r2, r3
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	330c      	adds	r3, #12
}
 80156be:	4618      	mov	r0, r3
 80156c0:	372c      	adds	r7, #44	; 0x2c
 80156c2:	46bd      	mov	sp, r7
 80156c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c8:	4770      	bx	lr
	...

080156cc <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d002      	beq.n	80156e4 <pifNoiseFilterInt32_Init+0x18>
 80156de:	78fb      	ldrb	r3, [r7, #3]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d104      	bne.n	80156ee <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 80156e4:	4b17      	ldr	r3, [pc, #92]	; (8015744 <pifNoiseFilterInt32_Init+0x78>)
 80156e6:	2201      	movs	r2, #1
 80156e8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80156ea:	2300      	movs	r3, #0
 80156ec:	e026      	b.n	801573c <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 80156ee:	2220      	movs	r2, #32
 80156f0:	2100      	movs	r1, #0
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f00d fca2 	bl	802303c <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 80156f8:	78fb      	ldrb	r3, [r7, #3]
 80156fa:	2104      	movs	r1, #4
 80156fc:	4618      	mov	r0, r3
 80156fe:	f00d fc4d 	bl	8022f9c <calloc>
 8015702:	4603      	mov	r3, r0
 8015704:	461a      	mov	r2, r3
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	691b      	ldr	r3, [r3, #16]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d104      	bne.n	801571c <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 8015712:	4b0c      	ldr	r3, [pc, #48]	; (8015744 <pifNoiseFilterInt32_Init+0x78>)
 8015714:	2203      	movs	r2, #3
 8015716:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015718:	2300      	movs	r3, #0
 801571a:	e00f      	b.n	801573c <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2100      	movs	r1, #0
 8015720:	4618      	mov	r0, r3
 8015722:	f7ff fe05 	bl	8015330 <pifNoiseFilter_Init>
    p_owner->_size = size;
 8015726:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2200      	movs	r2, #0
 8015732:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	4a04      	ldr	r2, [pc, #16]	; (8015748 <pifNoiseFilterInt32_Init+0x7c>)
 8015738:	605a      	str	r2, [r3, #4]
    return TRUE;
 801573a:	2301      	movs	r3, #1
}
 801573c:	4618      	mov	r0, r3
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	20001c55 	.word	0x20001c55
 8015748:	080153e3 	.word	0x080153e3

0801574c <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f7ff fe18 	bl	801538a <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015760:	2b02      	cmp	r3, #2
 8015762:	dd04      	ble.n	801576e <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801576a:	2b20      	cmp	r3, #32
 801576c:	dd04      	ble.n	8015778 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 801576e:	4b15      	ldr	r3, [pc, #84]	; (80157c4 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015770:	2201      	movs	r2, #1
 8015772:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015774:	2300      	movs	r3, #0
 8015776:	e021      	b.n	80157bc <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801577e:	461a      	mov	r2, r3
 8015780:	4613      	mov	r3, r2
 8015782:	005b      	lsls	r3, r3, #1
 8015784:	4413      	add	r3, r2
 8015786:	2102      	movs	r1, #2
 8015788:	4618      	mov	r0, r3
 801578a:	f00d fc07 	bl	8022f9c <calloc>
 801578e:	4603      	mov	r3, r0
 8015790:	461a      	mov	r2, r3
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	69db      	ldr	r3, [r3, #28]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d104      	bne.n	80157a8 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 801579e:	4b09      	ldr	r3, [pc, #36]	; (80157c4 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80157a0:	2203      	movs	r2, #3
 80157a2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80157a4:	2300      	movs	r3, #0
 80157a6:	e009      	b.n	80157bc <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2200      	movs	r2, #0
 80157ac:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	2202      	movs	r2, #2
 80157b2:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	4a04      	ldr	r2, [pc, #16]	; (80157c8 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 80157b8:	605a      	str	r2, [r3, #4]
	return TRUE;
 80157ba:	2301      	movs	r3, #1
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	20001c55 	.word	0x20001c55
 80157c8:	08015479 	.word	0x08015479

080157cc <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	3b30      	subs	r3, #48	; 0x30
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	461a      	mov	r2, r3
 80157e0:	0092      	lsls	r2, r2, #2
 80157e2:	4413      	add	r3, r2
 80157e4:	005b      	lsls	r3, r3, #1
 80157e6:	b2da      	uxtb	r2, r3
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	3301      	adds	r3, #1
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	4413      	add	r3, r2
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	3b30      	subs	r3, #48	; 0x30
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	3302      	adds	r3, #2
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	3b30      	subs	r3, #48	; 0x30
 8015802:	b2db      	uxtb	r3, r3
 8015804:	461a      	mov	r2, r3
 8015806:	0092      	lsls	r2, r2, #2
 8015808:	4413      	add	r3, r2
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	b2da      	uxtb	r2, r3
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	3303      	adds	r3, #3
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	4413      	add	r3, r2
 8015816:	b2db      	uxtb	r3, r3
 8015818:	3b30      	subs	r3, #48	; 0x30
 801581a:	b2da      	uxtb	r2, r3
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	3304      	adds	r3, #4
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	3b30      	subs	r3, #48	; 0x30
 8015828:	b2db      	uxtb	r3, r3
 801582a:	461a      	mov	r2, r3
 801582c:	0092      	lsls	r2, r2, #2
 801582e:	4413      	add	r3, r2
 8015830:	005b      	lsls	r3, r3, #1
 8015832:	b2da      	uxtb	r2, r3
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	3305      	adds	r3, #5
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	4413      	add	r3, r2
 801583c:	b2db      	uxtb	r3, r3
 801583e:	3b30      	subs	r3, #48	; 0x30
 8015840:	b2da      	uxtb	r2, r3
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	701a      	strb	r2, [r3, #0]
}
 8015846:	bf00      	nop
 8015848:	370c      	adds	r7, #12
 801584a:	46bd      	mov	sp, r7
 801584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015850:	4770      	bx	lr
	...

08015854 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 8015854:	b480      	push	{r7}
 8015856:	b085      	sub	sp, #20
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	3b30      	subs	r3, #48	; 0x30
 8015864:	b2db      	uxtb	r3, r3
 8015866:	461a      	mov	r2, r3
 8015868:	0092      	lsls	r2, r2, #2
 801586a:	4413      	add	r3, r2
 801586c:	005b      	lsls	r3, r3, #1
 801586e:	b2da      	uxtb	r2, r3
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	3301      	adds	r3, #1
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	4413      	add	r3, r2
 8015878:	b2db      	uxtb	r3, r3
 801587a:	3b30      	subs	r3, #48	; 0x30
 801587c:	b2da      	uxtb	r2, r3
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	3302      	adds	r3, #2
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	3b30      	subs	r3, #48	; 0x30
 801588a:	b2db      	uxtb	r3, r3
 801588c:	461a      	mov	r2, r3
 801588e:	0092      	lsls	r2, r2, #2
 8015890:	4413      	add	r3, r2
 8015892:	005b      	lsls	r3, r3, #1
 8015894:	b2da      	uxtb	r2, r3
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	3303      	adds	r3, #3
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	4413      	add	r3, r2
 801589e:	b2db      	uxtb	r3, r3
 80158a0:	3b30      	subs	r3, #48	; 0x30
 80158a2:	b2da      	uxtb	r2, r3
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	3304      	adds	r3, #4
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	3b30      	subs	r3, #48	; 0x30
 80158b0:	b2db      	uxtb	r3, r3
 80158b2:	461a      	mov	r2, r3
 80158b4:	0092      	lsls	r2, r2, #2
 80158b6:	4413      	add	r3, r2
 80158b8:	005b      	lsls	r3, r3, #1
 80158ba:	b2da      	uxtb	r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	3305      	adds	r3, #5
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	4413      	add	r3, r2
 80158c4:	b2db      	uxtb	r3, r3
 80158c6:	3b30      	subs	r3, #48	; 0x30
 80158c8:	b2da      	uxtb	r2, r3
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	3306      	adds	r3, #6
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	2b2e      	cmp	r3, #46	; 0x2e
 80158d6:	d134      	bne.n	8015942 <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	2200      	movs	r2, #0
 80158dc:	80da      	strh	r2, [r3, #6]
		digit = 100;
 80158de:	2364      	movs	r3, #100	; 0x64
 80158e0:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 80158e2:	2307      	movs	r3, #7
 80158e4:	60fb      	str	r3, [r7, #12]
 80158e6:	e027      	b.n	8015938 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	4413      	add	r3, r2
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	3301      	adds	r3, #1
 80158f2:	4a17      	ldr	r2, [pc, #92]	; (8015950 <_convertString2Time+0xfc>)
 80158f4:	4413      	add	r3, r2
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	f003 0304 	and.w	r3, r3, #4
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d01f      	beq.n	8015940 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	88da      	ldrh	r2, [r3, #6]
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	6879      	ldr	r1, [r7, #4]
 8015908:	440b      	add	r3, r1
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	3b30      	subs	r3, #48	; 0x30
 801590e:	b299      	uxth	r1, r3
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	b29b      	uxth	r3, r3
 8015914:	fb11 f303 	smulbb	r3, r1, r3
 8015918:	b29b      	uxth	r3, r3
 801591a:	4413      	add	r3, r2
 801591c:	b29a      	uxth	r2, r3
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 8015922:	68bb      	ldr	r3, [r7, #8]
 8015924:	4a0b      	ldr	r2, [pc, #44]	; (8015954 <_convertString2Time+0x100>)
 8015926:	fb82 1203 	smull	r1, r2, r2, r3
 801592a:	1092      	asrs	r2, r2, #2
 801592c:	17db      	asrs	r3, r3, #31
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	3301      	adds	r3, #1
 8015936:	60fb      	str	r3, [r7, #12]
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2b09      	cmp	r3, #9
 801593c:	ddd4      	ble.n	80158e8 <_convertString2Time+0x94>
		}
	}
}
 801593e:	e000      	b.n	8015942 <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 8015940:	bf00      	nop
}
 8015942:	bf00      	nop
 8015944:	3714      	adds	r7, #20
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr
 801594e:	bf00      	nop
 8015950:	080296ec 	.word	0x080296ec
 8015954:	66666667 	.word	0x66666667

08015958 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 8015958:	b5b0      	push	{r4, r5, r7, lr}
 801595a:	b088      	sub	sp, #32
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 8015960:	f04f 0200 	mov.w	r2, #0
 8015964:	f04f 0300 	mov.w	r3, #0
 8015968:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b2d      	cmp	r3, #45	; 0x2d
 8015976:	d120      	bne.n	80159ba <_convertString2Float+0x62>
 8015978:	69fb      	ldr	r3, [r7, #28]
 801597a:	3301      	adds	r3, #1
 801597c:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 801597e:	e01c      	b.n	80159ba <_convertString2Float+0x62>
		value *= 10;
 8015980:	f04f 0200 	mov.w	r2, #0
 8015984:	4b38      	ldr	r3, [pc, #224]	; (8015a68 <_convertString2Float+0x110>)
 8015986:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801598a:	f7ea fde9 	bl	8000560 <__aeabi_dmul>
 801598e:	4602      	mov	r2, r0
 8015990:	460b      	mov	r3, r1
 8015992:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 8015996:	69fb      	ldr	r3, [r7, #28]
 8015998:	1c5a      	adds	r2, r3, #1
 801599a:	61fa      	str	r2, [r7, #28]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	3b30      	subs	r3, #48	; 0x30
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7ea fd73 	bl	800048c <__aeabi_i2d>
 80159a6:	4602      	mov	r2, r0
 80159a8:	460b      	mov	r3, r1
 80159aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80159ae:	f7ea fc21 	bl	80001f4 <__adddf3>
 80159b2:	4602      	mov	r2, r0
 80159b4:	460b      	mov	r3, r1
 80159b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 80159ba:	69fb      	ldr	r3, [r7, #28]
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	3301      	adds	r3, #1
 80159c0:	4a2a      	ldr	r2, [pc, #168]	; (8015a6c <_convertString2Float+0x114>)
 80159c2:	4413      	add	r3, r2
 80159c4:	781b      	ldrb	r3, [r3, #0]
 80159c6:	f003 0304 	and.w	r3, r3, #4
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d1d8      	bne.n	8015980 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	781b      	ldrb	r3, [r3, #0]
 80159d2:	2b2d      	cmp	r3, #45	; 0x2d
 80159d4:	d105      	bne.n	80159e2 <_convertString2Float+0x8a>
 80159d6:	693c      	ldr	r4, [r7, #16]
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80159de:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	2b2e      	cmp	r3, #46	; 0x2e
 80159e8:	d133      	bne.n	8015a52 <_convertString2Float+0xfa>
		p++;
 80159ea:	69fb      	ldr	r3, [r7, #28]
 80159ec:	3301      	adds	r3, #1
 80159ee:	61fb      	str	r3, [r7, #28]
		unit = 10;
 80159f0:	f04f 0200 	mov.w	r2, #0
 80159f4:	4b1c      	ldr	r3, [pc, #112]	; (8015a68 <_convertString2Float+0x110>)
 80159f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 80159fa:	e020      	b.n	8015a3e <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 80159fc:	69fb      	ldr	r3, [r7, #28]
 80159fe:	1c5a      	adds	r2, r3, #1
 8015a00:	61fa      	str	r2, [r7, #28]
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	3b30      	subs	r3, #48	; 0x30
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7ea fd40 	bl	800048c <__aeabi_i2d>
 8015a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015a10:	f7ea fed0 	bl	80007b4 <__aeabi_ddiv>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015a1c:	f7ea fbea 	bl	80001f4 <__adddf3>
 8015a20:	4602      	mov	r2, r0
 8015a22:	460b      	mov	r3, r1
 8015a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 8015a28:	f04f 0200 	mov.w	r2, #0
 8015a2c:	4b0e      	ldr	r3, [pc, #56]	; (8015a68 <_convertString2Float+0x110>)
 8015a2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015a32:	f7ea fd95 	bl	8000560 <__aeabi_dmul>
 8015a36:	4602      	mov	r2, r0
 8015a38:	460b      	mov	r3, r1
 8015a3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 8015a3e:	69fb      	ldr	r3, [r7, #28]
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	3301      	adds	r3, #1
 8015a44:	4a09      	ldr	r2, [pc, #36]	; (8015a6c <_convertString2Float+0x114>)
 8015a46:	4413      	add	r3, r2
 8015a48:	781b      	ldrb	r3, [r3, #0]
 8015a4a:	f003 0304 	and.w	r3, r3, #4
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d1d4      	bne.n	80159fc <_convertString2Float+0xa4>
		}
	}
	return value;
 8015a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015a56:	ec43 2b17 	vmov	d7, r2, r3
}
 8015a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8015a5e:	eef0 0a67 	vmov.f32	s1, s15
 8015a62:	3720      	adds	r7, #32
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bdb0      	pop	{r4, r5, r7, pc}
 8015a68:	40240000 	.word	0x40240000
 8015a6c:	080296ec 	.word	0x080296ec

08015a70 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 8015a70:	b480      	push	{r7}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	60bb      	str	r3, [r7, #8]

	p = str;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	2b2d      	cmp	r3, #45	; 0x2d
 8015a86:	d111      	bne.n	8015aac <_convertString2Interger+0x3c>
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 8015a8e:	e00d      	b.n	8015aac <_convertString2Interger+0x3c>
		value *= 10;
 8015a90:	68ba      	ldr	r2, [r7, #8]
 8015a92:	4613      	mov	r3, r2
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	4413      	add	r3, r2
 8015a98:	005b      	lsls	r3, r3, #1
 8015a9a:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	1c5a      	adds	r2, r3, #1
 8015aa0:	60fa      	str	r2, [r7, #12]
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	3b30      	subs	r3, #48	; 0x30
 8015aa6:	68ba      	ldr	r2, [r7, #8]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	4a0a      	ldr	r2, [pc, #40]	; (8015adc <_convertString2Interger+0x6c>)
 8015ab4:	4413      	add	r3, r2
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	f003 0304 	and.w	r3, r3, #4
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1e7      	bne.n	8015a90 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8015ac6:	d102      	bne.n	8015ace <_convertString2Interger+0x5e>
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	425b      	negs	r3, r3
 8015acc:	60bb      	str	r3, [r7, #8]
	return value;
 8015ace:	68bb      	ldr	r3, [r7, #8]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3714      	adds	r7, #20
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ada:	4770      	bx	lr
 8015adc:	080296ec 	.word	0x080296ec

08015ae0 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015ae0:	b5b0      	push	{r4, r5, r7, lr}
 8015ae2:	b088      	sub	sp, #32
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	75fb      	strb	r3, [r7, #23]
 8015aec:	2300      	movs	r3, #0
 8015aee:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015af0:	2300      	movs	r3, #0
 8015af2:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	61fb      	str	r3, [r7, #28]
 8015af8:	e002      	b.n	8015b00 <_convertString2Degrees+0x20>
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	3301      	adds	r3, #1
 8015afe:	61fb      	str	r3, [r7, #28]
 8015b00:	69fb      	ldr	r3, [r7, #28]
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	3301      	adds	r3, #1
 8015b06:	4a46      	ldr	r2, [pc, #280]	; (8015c20 <_convertString2Degrees+0x140>)
 8015b08:	4413      	add	r3, r2
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	f003 0304 	and.w	r3, r3, #4
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d1f2      	bne.n	8015afa <_convertString2Degrees+0x1a>
	q = s;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015b18:	e011      	b.n	8015b3e <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 8015b1a:	7dfb      	ldrb	r3, [r7, #23]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d005      	beq.n	8015b2c <_convertString2Degrees+0x4c>
 8015b20:	7dfb      	ldrb	r3, [r7, #23]
 8015b22:	461a      	mov	r2, r3
 8015b24:	0092      	lsls	r2, r2, #2
 8015b26:	4413      	add	r3, r2
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	1c5a      	adds	r2, r3, #1
 8015b30:	61ba      	str	r2, [r7, #24]
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	3b30      	subs	r3, #48	; 0x30
 8015b36:	b2da      	uxtb	r2, r3
 8015b38:	7dfb      	ldrb	r3, [r7, #23]
 8015b3a:	4413      	add	r3, r2
 8015b3c:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 8015b3e:	69fa      	ldr	r2, [r7, #28]
 8015b40:	69bb      	ldr	r3, [r7, #24]
 8015b42:	1ad3      	subs	r3, r2, r3
 8015b44:	2b02      	cmp	r3, #2
 8015b46:	dce8      	bgt.n	8015b1a <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 8015b48:	e011      	b.n	8015b6e <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 8015b4a:	7dbb      	ldrb	r3, [r7, #22]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d005      	beq.n	8015b5c <_convertString2Degrees+0x7c>
 8015b50:	7dbb      	ldrb	r3, [r7, #22]
 8015b52:	461a      	mov	r2, r3
 8015b54:	0092      	lsls	r2, r2, #2
 8015b56:	4413      	add	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8015b5c:	69bb      	ldr	r3, [r7, #24]
 8015b5e:	1c5a      	adds	r2, r3, #1
 8015b60:	61ba      	str	r2, [r7, #24]
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	3b30      	subs	r3, #48	; 0x30
 8015b66:	b2da      	uxtb	r2, r3
 8015b68:	7dbb      	ldrb	r3, [r7, #22]
 8015b6a:	4413      	add	r3, r2
 8015b6c:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 8015b6e:	69fa      	ldr	r2, [r7, #28]
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	429a      	cmp	r2, r3
 8015b74:	d8e9      	bhi.n	8015b4a <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 8015b76:	69fb      	ldr	r3, [r7, #28]
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8015b7c:	d124      	bne.n	8015bc8 <_convertString2Degrees+0xe8>
		q = p + 1;
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	3301      	adds	r3, #1
 8015b82:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 8015b84:	2300      	movs	r3, #0
 8015b86:	73fb      	strb	r3, [r7, #15]
 8015b88:	e01b      	b.n	8015bc2 <_convertString2Degrees+0xe2>
			frac_min *= 10;
 8015b8a:	693a      	ldr	r2, [r7, #16]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	4413      	add	r3, r2
 8015b92:	005b      	lsls	r3, r3, #1
 8015b94:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	4a20      	ldr	r2, [pc, #128]	; (8015c20 <_convertString2Degrees+0x140>)
 8015b9e:	4413      	add	r3, r2
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	f003 0304 	and.w	r3, r3, #4
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d008      	beq.n	8015bbc <_convertString2Degrees+0xdc>
 8015baa:	69bb      	ldr	r3, [r7, #24]
 8015bac:	1c5a      	adds	r2, r3, #1
 8015bae:	61ba      	str	r2, [r7, #24]
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	3b30      	subs	r3, #48	; 0x30
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	693b      	ldr	r3, [r7, #16]
 8015bb8:	4413      	add	r3, r2
 8015bba:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 8015bbc:	7bfb      	ldrb	r3, [r7, #15]
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	73fb      	strb	r3, [r7, #15]
 8015bc2:	7bfb      	ldrb	r3, [r7, #15]
 8015bc4:	2b03      	cmp	r3, #3
 8015bc6:	d9e0      	bls.n	8015b8a <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015bc8:	7dfb      	ldrb	r3, [r7, #23]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7ea fc5e 	bl	800048c <__aeabi_i2d>
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	460d      	mov	r5, r1
 8015bd4:	7dbb      	ldrb	r3, [r7, #22]
 8015bd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8015bda:	fb03 f202 	mul.w	r2, r3, r2
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	4413      	add	r3, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7ea fc42 	bl	800046c <__aeabi_ui2d>
 8015be8:	a30b      	add	r3, pc, #44	; (adr r3, 8015c18 <_convertString2Degrees+0x138>)
 8015bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bee:	f7ea fde1 	bl	80007b4 <__aeabi_ddiv>
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	4629      	mov	r1, r5
 8015bfa:	f7ea fafb 	bl	80001f4 <__adddf3>
 8015bfe:	4602      	mov	r2, r0
 8015c00:	460b      	mov	r3, r1
 8015c02:	ec43 2b17 	vmov	d7, r2, r3
}
 8015c06:	eeb0 0a47 	vmov.f32	s0, s14
 8015c0a:	eef0 0a67 	vmov.f32	s1, s15
 8015c0e:	3720      	adds	r7, #32
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bdb0      	pop	{r4, r5, r7, pc}
 8015c14:	f3af 8000 	nop.w
 8015c18:	00000000 	.word	0x00000000
 8015c1c:	41224f80 	.word	0x41224f80
 8015c20:	080296ec 	.word	0x080296ec

08015c24 <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 8015c24:	b480      	push	{r7}
 8015c26:	b083      	sub	sp, #12
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015c2e:	79fb      	ldrb	r3, [r7, #7]
 8015c30:	3b30      	subs	r3, #48	; 0x30
 8015c32:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 8015c34:	79fb      	ldrb	r3, [r7, #7]
 8015c36:	2b09      	cmp	r3, #9
 8015c38:	d902      	bls.n	8015c40 <_convertAscii2Hex+0x1c>
 8015c3a:	79fb      	ldrb	r3, [r7, #7]
 8015c3c:	3b07      	subs	r3, #7
 8015c3e:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015c40:	79fb      	ldrb	r3, [r7, #7]
 8015c42:	f003 030f 	and.w	r3, r3, #15
 8015c46:	71fb      	strb	r3, [r7, #7]
	return n;
 8015c48:	79fb      	ldrb	r3, [r7, #7]
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	370c      	adds	r7, #12
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c54:	4770      	bx	lr

08015c56 <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 8015c56:	b580      	push	{r7, lr}
 8015c58:	b084      	sub	sp, #16
 8015c5a:	af00      	add	r7, sp, #0
 8015c5c:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 8015c62:	68fa      	ldr	r2, [r7, #12]
 8015c64:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015c68:	f36f 0341 	bfc	r3, #1, #1
 8015c6c:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015c70:	68fa      	ldr	r2, [r7, #12]
 8015c72:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015c76:	f36f 0300 	bfc	r3, #0, #1
 8015c7a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	2200      	movs	r2, #0
 8015c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d004      	beq.n	8015c9a <_evtTimerFinish+0x44>
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015c96:	68f8      	ldr	r0, [r7, #12]
 8015c98:	4798      	blx	r3
}
 8015c9a:	bf00      	nop
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
	...

08015ca4 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b082      	sub	sp, #8
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	460b      	mov	r3, r1
 8015cae:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d104      	bne.n	8015cc0 <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015cb6:	4b0e      	ldr	r3, [pc, #56]	; (8015cf0 <pifGps_Init+0x4c>)
 8015cb8:	2201      	movs	r2, #1
 8015cba:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	e012      	b.n	8015ce6 <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8015cc0:	22d0      	movs	r2, #208	; 0xd0
 8015cc2:	2100      	movs	r1, #0
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f00d f9b9 	bl	802303c <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8015cca:	887b      	ldrh	r3, [r7, #2]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d106      	bne.n	8015cde <pifGps_Init+0x3a>
 8015cd0:	4b08      	ldr	r3, [pc, #32]	; (8015cf4 <pifGps_Init+0x50>)
 8015cd2:	881b      	ldrh	r3, [r3, #0]
 8015cd4:	1c5a      	adds	r2, r3, #1
 8015cd6:	b291      	uxth	r1, r2
 8015cd8:	4a06      	ldr	r2, [pc, #24]	; (8015cf4 <pifGps_Init+0x50>)
 8015cda:	8011      	strh	r1, [r2, #0]
 8015cdc:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	887a      	ldrh	r2, [r7, #2]
 8015ce2:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015ce4:	2301      	movs	r3, #1
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3708      	adds	r7, #8
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}
 8015cee:	bf00      	nop
 8015cf0:	20001c55 	.word	0x20001c55
 8015cf4:	2000011c 	.word	0x2000011c

08015cf8 <pifGps_SetTimeout>:
	}
	p_owner->__evt_text = NULL;
}

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
 8015d04:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d02b      	beq.n	8015d64 <pifGps_SetTimeout+0x6c>
		if (!p_owner->__p_timer) {
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d11a      	bne.n	8015d4c <pifGps_SetTimeout+0x54>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015d16:	2100      	movs	r1, #0
 8015d18:	68b8      	ldr	r0, [r7, #8]
 8015d1a:	f7ff f9c9 	bl	80150b0 <pifTimerManager_Add>
 8015d1e:	4602      	mov	r2, r0
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			if (!p_owner->__p_timer) return FALSE;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d101      	bne.n	8015d34 <pifGps_SetTimeout+0x3c>
 8015d30:	2300      	movs	r3, #0
 8015d32:	e023      	b.n	8015d7c <pifGps_SetTimeout+0x84>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d3a:	68fa      	ldr	r2, [r7, #12]
 8015d3c:	4911      	ldr	r1, [pc, #68]	; (8015d84 <pifGps_SetTimeout+0x8c>)
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7ff fae3 	bl	801530a <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	683a      	ldr	r2, [r7, #0]
 8015d48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d52:	6879      	ldr	r1, [r7, #4]
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7ff f9e3 	bl	8015120 <pifTimer_Start>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d10c      	bne.n	8015d7a <pifGps_SetTimeout+0x82>
 8015d60:	2300      	movs	r3, #0
 8015d62:	e00b      	b.n	8015d7c <pifGps_SetTimeout+0x84>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d005      	beq.n	8015d7a <pifGps_SetTimeout+0x82>
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7ff fa01 	bl	801517c <pifTimer_Stop>
	}
    return TRUE;
 8015d7a:	2301      	movs	r3, #1
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3710      	adds	r7, #16
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	08015c57 	.word	0x08015c57

08015d88 <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015d96:	f043 0302 	orr.w	r3, r3, #2
 8015d9a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d003      	beq.n	8015dae <pifGps_SendEvent+0x26>
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d005      	beq.n	8015dc4 <pifGps_SendEvent+0x3c>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7ff f9f2 	bl	80151a8 <pifTimer_Reset>
}
 8015dc4:	bf00      	nop
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	0000      	movs	r0, r0
	...

08015dd0 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

void pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015dd4:	b090      	sub	sp, #64	; 0x40
 8015dd6:	af02      	add	r7, sp, #8
 8015dd8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015dda:	460b      	mov	r3, r1
 8015ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t sv_sat_num, sv_packet_idx, sv_sat_param;

	if (c == '$') {
 8015de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015de4:	2b24      	cmp	r3, #36	; 0x24
 8015de6:	d125      	bne.n	8015e34 <pifGps_ParsingNmea+0x64>
		p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dea:	2200      	movs	r2, #0
 8015dec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		p_owner->__param = 0;
 8015df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		p_owner->__offset = 0;
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
		p_owner->__parity = 0;
 8015e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e02:	2200      	movs	r2, #0
 8015e04:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		if (p_owner->evt_frame) {
 8015e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0a:	689b      	ldr	r3, [r3, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	f000 8603 	beq.w	8016a18 <pifGps_ParsingNmea+0xc48>
			p_owner->__string[0] = c;
 8015e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e14:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8015e18:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			p_owner->__string[1] = 0;
 8015e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1e:	2200      	movs	r2, #0
 8015e20:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			(p_owner->evt_frame)(p_owner->__string);
 8015e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e26:	689b      	ldr	r3, [r3, #8]
 8015e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e2a:	32a5      	adds	r2, #165	; 0xa5
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	4798      	blx	r3
		if (p_owner->__offset < PIF_GPS_NMEA_VALUE_SIZE) {
			p_owner->__string[p_owner->__offset++] = c;
			if (!p_owner->__checksum_param) p_owner->__parity ^= c;
		}
	}
}
 8015e30:	f000 bdf2 	b.w	8016a18 <pifGps_ParsingNmea+0xc48>
	else if (c == ',' || c == '*') {
 8015e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015e38:	2b2c      	cmp	r3, #44	; 0x2c
 8015e3a:	d004      	beq.n	8015e46 <pifGps_ParsingNmea+0x76>
 8015e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015e40:	2b2a      	cmp	r3, #42	; 0x2a
 8015e42:	f040 8519 	bne.w	8016878 <pifGps_ParsingNmea+0xaa8>
		p_owner->__string[p_owner->__offset] = 0;
 8015e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e48:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e50:	441a      	add	r2, r3
 8015e52:	2300      	movs	r3, #0
 8015e54:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
		if (p_owner->__param == 0) {
 8015e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e5a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	f040 813c 	bne.w	80160dc <pifGps_ParsingNmea+0x30c>
			if (p_owner->__offset >= 5) {
 8015e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e66:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8015e6a:	2b04      	cmp	r3, #4
 8015e6c:	f240 84b8 	bls.w	80167e0 <pifGps_ParsingNmea+0xa10>
				if (p_owner->__string[2] == 'D' && p_owner->__string[3] == 'T' && p_owner->__string[4] == 'M') c = PIF_GPS_NMEA_MSG_ID_DTM;
 8015e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e72:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015e76:	2b44      	cmp	r3, #68	; 0x44
 8015e78:	d10e      	bne.n	8015e98 <pifGps_ParsingNmea+0xc8>
 8015e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015e80:	2b54      	cmp	r3, #84	; 0x54
 8015e82:	d109      	bne.n	8015e98 <pifGps_ParsingNmea+0xc8>
 8015e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e86:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015e8a:	2b4d      	cmp	r3, #77	; 0x4d
 8015e8c:	d104      	bne.n	8015e98 <pifGps_ParsingNmea+0xc8>
 8015e8e:	2301      	movs	r3, #1
 8015e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8015e94:	f000 bca4 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'B' && p_owner->__string[4] == 'S') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e9a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015e9e:	2b47      	cmp	r3, #71	; 0x47
 8015ea0:	d10f      	bne.n	8015ec2 <pifGps_ParsingNmea+0xf2>
 8015ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015ea8:	2b42      	cmp	r3, #66	; 0x42
 8015eaa:	d10a      	bne.n	8015ec2 <pifGps_ParsingNmea+0xf2>
 8015eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eae:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015eb2:	2b53      	cmp	r3, #83	; 0x53
 8015eb4:	d105      	bne.n	8015ec2 <pifGps_ParsingNmea+0xf2>
 8015eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb8:	2202      	movs	r2, #2
 8015eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015ebe:	f000 bc8f 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'G' && p_owner->__string[4] == 'A') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec4:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015ec8:	2b47      	cmp	r3, #71	; 0x47
 8015eca:	d10f      	bne.n	8015eec <pifGps_ParsingNmea+0x11c>
 8015ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ece:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015ed2:	2b47      	cmp	r3, #71	; 0x47
 8015ed4:	d10a      	bne.n	8015eec <pifGps_ParsingNmea+0x11c>
 8015ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015edc:	2b41      	cmp	r3, #65	; 0x41
 8015ede:	d105      	bne.n	8015eec <pifGps_ParsingNmea+0x11c>
 8015ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee2:	2203      	movs	r2, #3
 8015ee4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015ee8:	f000 bc7a 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'L' && p_owner->__string[4] == 'L') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eee:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015ef2:	2b47      	cmp	r3, #71	; 0x47
 8015ef4:	d10f      	bne.n	8015f16 <pifGps_ParsingNmea+0x146>
 8015ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015efc:	2b4c      	cmp	r3, #76	; 0x4c
 8015efe:	d10a      	bne.n	8015f16 <pifGps_ParsingNmea+0x146>
 8015f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f02:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015f06:	2b4c      	cmp	r3, #76	; 0x4c
 8015f08:	d105      	bne.n	8015f16 <pifGps_ParsingNmea+0x146>
 8015f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0c:	2204      	movs	r2, #4
 8015f0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015f12:	f000 bc65 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'N' && p_owner->__string[4] == 'S') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f18:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015f1c:	2b47      	cmp	r3, #71	; 0x47
 8015f1e:	d10f      	bne.n	8015f40 <pifGps_ParsingNmea+0x170>
 8015f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f22:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015f26:	2b4e      	cmp	r3, #78	; 0x4e
 8015f28:	d10a      	bne.n	8015f40 <pifGps_ParsingNmea+0x170>
 8015f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015f30:	2b53      	cmp	r3, #83	; 0x53
 8015f32:	d105      	bne.n	8015f40 <pifGps_ParsingNmea+0x170>
 8015f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f36:	2205      	movs	r2, #5
 8015f38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015f3c:	f000 bc50 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'R' && p_owner->__string[4] == 'S') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015f46:	2b47      	cmp	r3, #71	; 0x47
 8015f48:	d10f      	bne.n	8015f6a <pifGps_ParsingNmea+0x19a>
 8015f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015f50:	2b52      	cmp	r3, #82	; 0x52
 8015f52:	d10a      	bne.n	8015f6a <pifGps_ParsingNmea+0x19a>
 8015f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f56:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015f5a:	2b53      	cmp	r3, #83	; 0x53
 8015f5c:	d105      	bne.n	8015f6a <pifGps_ParsingNmea+0x19a>
 8015f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f60:	2206      	movs	r2, #6
 8015f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015f66:	f000 bc3b 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'S' && p_owner->__string[4] == 'A') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015f70:	2b47      	cmp	r3, #71	; 0x47
 8015f72:	d10f      	bne.n	8015f94 <pifGps_ParsingNmea+0x1c4>
 8015f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f76:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015f7a:	2b53      	cmp	r3, #83	; 0x53
 8015f7c:	d10a      	bne.n	8015f94 <pifGps_ParsingNmea+0x1c4>
 8015f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f80:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015f84:	2b41      	cmp	r3, #65	; 0x41
 8015f86:	d105      	bne.n	8015f94 <pifGps_ParsingNmea+0x1c4>
 8015f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8a:	2207      	movs	r2, #7
 8015f8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015f90:	f000 bc26 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'S' && p_owner->__string[4] == 'T') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f96:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015f9a:	2b47      	cmp	r3, #71	; 0x47
 8015f9c:	d10f      	bne.n	8015fbe <pifGps_ParsingNmea+0x1ee>
 8015f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015fa4:	2b53      	cmp	r3, #83	; 0x53
 8015fa6:	d10a      	bne.n	8015fbe <pifGps_ParsingNmea+0x1ee>
 8015fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015faa:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015fae:	2b54      	cmp	r3, #84	; 0x54
 8015fb0:	d105      	bne.n	8015fbe <pifGps_ParsingNmea+0x1ee>
 8015fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb4:	2208      	movs	r2, #8
 8015fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015fba:	f000 bc11 	b.w	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'G' && p_owner->__string[3] == 'S' && p_owner->__string[4] == 'V') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015fc4:	2b47      	cmp	r3, #71	; 0x47
 8015fc6:	d10e      	bne.n	8015fe6 <pifGps_ParsingNmea+0x216>
 8015fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fca:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015fce:	2b53      	cmp	r3, #83	; 0x53
 8015fd0:	d109      	bne.n	8015fe6 <pifGps_ParsingNmea+0x216>
 8015fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8015fd8:	2b56      	cmp	r3, #86	; 0x56
 8015fda:	d104      	bne.n	8015fe6 <pifGps_ParsingNmea+0x216>
 8015fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fde:	2209      	movs	r2, #9
 8015fe0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015fe4:	e3fc      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'R' && p_owner->__string[3] == 'M' && p_owner->__string[4] == 'C') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8015fec:	2b52      	cmp	r3, #82	; 0x52
 8015fee:	d10e      	bne.n	801600e <pifGps_ParsingNmea+0x23e>
 8015ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8015ff6:	2b4d      	cmp	r3, #77	; 0x4d
 8015ff8:	d109      	bne.n	801600e <pifGps_ParsingNmea+0x23e>
 8015ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8016000:	2b43      	cmp	r3, #67	; 0x43
 8016002:	d104      	bne.n	801600e <pifGps_ParsingNmea+0x23e>
 8016004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016006:	220a      	movs	r2, #10
 8016008:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 801600c:	e3e8      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'T' && p_owner->__string[3] == 'H' && p_owner->__string[4] == 'S') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 801600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016010:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8016014:	2b54      	cmp	r3, #84	; 0x54
 8016016:	d10e      	bne.n	8016036 <pifGps_ParsingNmea+0x266>
 8016018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801601a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 801601e:	2b48      	cmp	r3, #72	; 0x48
 8016020:	d109      	bne.n	8016036 <pifGps_ParsingNmea+0x266>
 8016022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016024:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8016028:	2b53      	cmp	r3, #83	; 0x53
 801602a:	d104      	bne.n	8016036 <pifGps_ParsingNmea+0x266>
 801602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602e:	220b      	movs	r2, #11
 8016030:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8016034:	e3d4      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'T' && p_owner->__string[3] == 'X' && p_owner->__string[4] == 'T') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8016036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016038:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 801603c:	2b54      	cmp	r3, #84	; 0x54
 801603e:	d10e      	bne.n	801605e <pifGps_ParsingNmea+0x28e>
 8016040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016042:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8016046:	2b58      	cmp	r3, #88	; 0x58
 8016048:	d109      	bne.n	801605e <pifGps_ParsingNmea+0x28e>
 801604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8016050:	2b54      	cmp	r3, #84	; 0x54
 8016052:	d104      	bne.n	801605e <pifGps_ParsingNmea+0x28e>
 8016054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016056:	220c      	movs	r2, #12
 8016058:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 801605c:	e3c0      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'V' && p_owner->__string[3] == 'L' && p_owner->__string[4] == 'W') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 801605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016060:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8016064:	2b56      	cmp	r3, #86	; 0x56
 8016066:	d10e      	bne.n	8016086 <pifGps_ParsingNmea+0x2b6>
 8016068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 801606e:	2b4c      	cmp	r3, #76	; 0x4c
 8016070:	d109      	bne.n	8016086 <pifGps_ParsingNmea+0x2b6>
 8016072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016074:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8016078:	2b57      	cmp	r3, #87	; 0x57
 801607a:	d104      	bne.n	8016086 <pifGps_ParsingNmea+0x2b6>
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	220d      	movs	r2, #13
 8016080:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8016084:	e3ac      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'V' && p_owner->__string[3] == 'T' && p_owner->__string[4] == 'G') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8016086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016088:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 801608c:	2b56      	cmp	r3, #86	; 0x56
 801608e:	d10e      	bne.n	80160ae <pifGps_ParsingNmea+0x2de>
 8016090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016092:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8016096:	2b54      	cmp	r3, #84	; 0x54
 8016098:	d109      	bne.n	80160ae <pifGps_ParsingNmea+0x2de>
 801609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80160a0:	2b47      	cmp	r3, #71	; 0x47
 80160a2:	d104      	bne.n	80160ae <pifGps_ParsingNmea+0x2de>
 80160a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a6:	220e      	movs	r2, #14
 80160a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80160ac:	e398      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				else if (p_owner->__string[2] == 'Z' && p_owner->__string[3] == 'D' && p_owner->__string[4] == 'A') p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 80160ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80160b4:	2b5a      	cmp	r3, #90	; 0x5a
 80160b6:	f040 8393 	bne.w	80167e0 <pifGps_ParsingNmea+0xa10>
 80160ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160bc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80160c0:	2b44      	cmp	r3, #68	; 0x44
 80160c2:	f040 838d 	bne.w	80167e0 <pifGps_ParsingNmea+0xa10>
 80160c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80160cc:	2b41      	cmp	r3, #65	; 0x41
 80160ce:	f040 8387 	bne.w	80167e0 <pifGps_ParsingNmea+0xa10>
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	220f      	movs	r2, #15
 80160d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80160da:	e381      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
		else if (p_owner->__offset) {
 80160dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160de:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	f000 836b 	beq.w	80167be <pifGps_ParsingNmea+0x9ee>
			switch (p_owner->__msg_id) {
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80160ee:	3b01      	subs	r3, #1
 80160f0:	2b0e      	cmp	r3, #14
 80160f2:	f200 8375 	bhi.w	80167e0 <pifGps_ParsingNmea+0xa10>
 80160f6:	a201      	add	r2, pc, #4	; (adr r2, 80160fc <pifGps_ParsingNmea+0x32c>)
 80160f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160fc:	080167e1 	.word	0x080167e1
 8016100:	080167e1 	.word	0x080167e1
 8016104:	08016139 	.word	0x08016139
 8016108:	08016259 	.word	0x08016259
 801610c:	08016319 	.word	0x08016319
 8016110:	080167e1 	.word	0x080167e1
 8016114:	080167e1 	.word	0x080167e1
 8016118:	080167e1 	.word	0x080167e1
 801611c:	08016413 	.word	0x08016413
 8016120:	0801654b 	.word	0x0801654b
 8016124:	080167e1 	.word	0x080167e1
 8016128:	08016665 	.word	0x08016665
 801612c:	080167e1 	.word	0x080167e1
 8016130:	080166f7 	.word	0x080166f7
 8016134:	08016747 	.word	0x08016747
				switch (p_owner->__param) {
 8016138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801613e:	3b01      	subs	r3, #1
 8016140:	2b08      	cmp	r3, #8
 8016142:	f200 833e 	bhi.w	80167c2 <pifGps_ParsingNmea+0x9f2>
 8016146:	a201      	add	r2, pc, #4	; (adr r2, 801614c <pifGps_ParsingNmea+0x37c>)
 8016148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801614c:	08016171 	.word	0x08016171
 8016150:	08016185 	.word	0x08016185
 8016154:	0801619f 	.word	0x0801619f
 8016158:	080161c3 	.word	0x080161c3
 801615c:	080161dd 	.word	0x080161dd
 8016160:	08016201 	.word	0x08016201
 8016164:	08016221 	.word	0x08016221
 8016168:	080167c3 	.word	0x080167c3
 801616c:	08016237 	.word	0x08016237
					_convertString2Time(p_owner->__string, &p_owner->_utc);
 8016170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016172:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 8016176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016178:	330e      	adds	r3, #14
 801617a:	4619      	mov	r1, r3
 801617c:	4610      	mov	r0, r2
 801617e:	f7ff fb69 	bl	8015854 <_convertString2Time>
					break;
 8016182:	e068      	b.n	8016256 <pifGps_ParsingNmea+0x486>
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(p_owner->__string);
 8016184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016186:	33a5      	adds	r3, #165	; 0xa5
 8016188:	4618      	mov	r0, r3
 801618a:	f7ff fca9 	bl	8015ae0 <_convertString2Degrees>
 801618e:	eeb0 7a40 	vmov.f32	s14, s0
 8016192:	eef0 7a60 	vmov.f32	s15, s1
 8016196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016198:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801619c:	e05b      	b.n	8016256 <pifGps_ParsingNmea+0x486>
					if (p_owner->__string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80161a4:	2b53      	cmp	r3, #83	; 0x53
 80161a6:	d153      	bne.n	8016250 <pifGps_ParsingNmea+0x480>
 80161a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80161ae:	623a      	str	r2, [r7, #32]
 80161b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80161b4:	627b      	str	r3, [r7, #36]	; 0x24
 80161b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b8:	ed97 7b08 	vldr	d7, [r7, #32]
 80161bc:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80161c0:	e046      	b.n	8016250 <pifGps_ParsingNmea+0x480>
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(p_owner->__string);
 80161c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c4:	33a5      	adds	r3, #165	; 0xa5
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7ff fc8a 	bl	8015ae0 <_convertString2Degrees>
 80161cc:	eeb0 7a40 	vmov.f32	s14, s0
 80161d0:	eef0 7a60 	vmov.f32	s15, s1
 80161d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d6:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80161da:	e03c      	b.n	8016256 <pifGps_ParsingNmea+0x486>
					if (p_owner->__string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80161dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161de:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80161e2:	2b57      	cmp	r3, #87	; 0x57
 80161e4:	d136      	bne.n	8016254 <pifGps_ParsingNmea+0x484>
 80161e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80161ec:	61ba      	str	r2, [r7, #24]
 80161ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80161f2:	61fb      	str	r3, [r7, #28]
 80161f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f6:	ed97 7b06 	vldr	d7, [r7, #24]
 80161fa:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80161fe:	e029      	b.n	8016254 <pifGps_ParsingNmea+0x484>
					p_owner->_fix = (p_owner->__string[0]  > '0');
 8016200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016202:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8016206:	2b30      	cmp	r3, #48	; 0x30
 8016208:	bf8c      	ite	hi
 801620a:	2301      	movhi	r3, #1
 801620c:	2300      	movls	r3, #0
 801620e:	b2d9      	uxtb	r1, r3
 8016210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016212:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016216:	f361 0300 	bfi	r3, r1, #0, #1
 801621a:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
					break;
 801621e:	e01a      	b.n	8016256 <pifGps_ParsingNmea+0x486>
					p_owner->_num_sat = _convertString2Interger(p_owner->__string);
 8016220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016222:	33a5      	adds	r3, #165	; 0xa5
 8016224:	4618      	mov	r0, r3
 8016226:	f7ff fc23 	bl	8015a70 <_convertString2Interger>
 801622a:	4603      	mov	r3, r0
 801622c:	b2da      	uxtb	r2, r3
 801622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 8016234:	e00f      	b.n	8016256 <pifGps_ParsingNmea+0x486>
					p_owner->_altitude = _convertString2Float(p_owner->__string);
 8016236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016238:	33a5      	adds	r3, #165	; 0xa5
 801623a:	4618      	mov	r0, r3
 801623c:	f7ff fb8c 	bl	8015958 <_convertString2Float>
 8016240:	eeb0 7a40 	vmov.f32	s14, s0
 8016244:	eef0 7a60 	vmov.f32	s15, s1
 8016248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 801624e:	e002      	b.n	8016256 <pifGps_ParsingNmea+0x486>
					break;
 8016250:	bf00      	nop
 8016252:	e2b6      	b.n	80167c2 <pifGps_ParsingNmea+0x9f2>
					break;
 8016254:	bf00      	nop
				break;
 8016256:	e2b4      	b.n	80167c2 <pifGps_ParsingNmea+0x9f2>
				switch (p_owner->__param) {
 8016258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801625e:	3b01      	subs	r3, #1
 8016260:	2b04      	cmp	r3, #4
 8016262:	f200 82b0 	bhi.w	80167c6 <pifGps_ParsingNmea+0x9f6>
 8016266:	a201      	add	r2, pc, #4	; (adr r2, 801626c <pifGps_ParsingNmea+0x49c>)
 8016268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801626c:	08016281 	.word	0x08016281
 8016270:	0801629b 	.word	0x0801629b
 8016274:	080162bf 	.word	0x080162bf
 8016278:	080162d9 	.word	0x080162d9
 801627c:	080162fd 	.word	0x080162fd
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(p_owner->__string);
 8016280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016282:	33a5      	adds	r3, #165	; 0xa5
 8016284:	4618      	mov	r0, r3
 8016286:	f7ff fc2b 	bl	8015ae0 <_convertString2Degrees>
 801628a:	eeb0 7a40 	vmov.f32	s14, s0
 801628e:	eef0 7a60 	vmov.f32	s15, s1
 8016292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016294:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 8016298:	e03d      	b.n	8016316 <pifGps_ParsingNmea+0x546>
					if (p_owner->__string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80162a0:	2b53      	cmp	r3, #83	; 0x53
 80162a2:	d135      	bne.n	8016310 <pifGps_ParsingNmea+0x540>
 80162a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80162aa:	613a      	str	r2, [r7, #16]
 80162ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80162b0:	617b      	str	r3, [r7, #20]
 80162b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80162b8:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80162bc:	e028      	b.n	8016310 <pifGps_ParsingNmea+0x540>
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(p_owner->__string);
 80162be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c0:	33a5      	adds	r3, #165	; 0xa5
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7ff fc0c 	bl	8015ae0 <_convertString2Degrees>
 80162c8:	eeb0 7a40 	vmov.f32	s14, s0
 80162cc:	eef0 7a60 	vmov.f32	s15, s1
 80162d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d2:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80162d6:	e01e      	b.n	8016316 <pifGps_ParsingNmea+0x546>
					if (p_owner->__string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80162d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162da:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80162de:	2b57      	cmp	r3, #87	; 0x57
 80162e0:	d118      	bne.n	8016314 <pifGps_ParsingNmea+0x544>
 80162e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80162e8:	60ba      	str	r2, [r7, #8]
 80162ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80162ee:	60fb      	str	r3, [r7, #12]
 80162f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80162f6:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80162fa:	e00b      	b.n	8016314 <pifGps_ParsingNmea+0x544>
					 _convertString2Time(p_owner->__string, &p_owner->_utc);
 80162fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fe:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 8016302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016304:	330e      	adds	r3, #14
 8016306:	4619      	mov	r1, r3
 8016308:	4610      	mov	r0, r2
 801630a:	f7ff faa3 	bl	8015854 <_convertString2Time>
					break;
 801630e:	e002      	b.n	8016316 <pifGps_ParsingNmea+0x546>
					break;
 8016310:	bf00      	nop
 8016312:	e258      	b.n	80167c6 <pifGps_ParsingNmea+0x9f6>
					break;
 8016314:	bf00      	nop
				break;
 8016316:	e256      	b.n	80167c6 <pifGps_ParsingNmea+0x9f6>
				switch (p_owner->__param) {
 8016318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801631e:	3b01      	subs	r3, #1
 8016320:	2b08      	cmp	r3, #8
 8016322:	f200 8252 	bhi.w	80167ca <pifGps_ParsingNmea+0x9fa>
 8016326:	a201      	add	r2, pc, #4	; (adr r2, 801632c <pifGps_ParsingNmea+0x55c>)
 8016328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801632c:	08016351 	.word	0x08016351
 8016330:	08016365 	.word	0x08016365
 8016334:	0801637f 	.word	0x0801637f
 8016338:	080163a3 	.word	0x080163a3
 801633c:	080163bd 	.word	0x080163bd
 8016340:	080167cb 	.word	0x080167cb
 8016344:	080163db 	.word	0x080163db
 8016348:	080167cb 	.word	0x080167cb
 801634c:	080163f1 	.word	0x080163f1
					_convertString2Time(p_owner->__string, &p_owner->_utc);
 8016350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016352:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 8016356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016358:	330e      	adds	r3, #14
 801635a:	4619      	mov	r1, r3
 801635c:	4610      	mov	r0, r2
 801635e:	f7ff fa79 	bl	8015854 <_convertString2Time>
					break;
 8016362:	e055      	b.n	8016410 <pifGps_ParsingNmea+0x640>
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(p_owner->__string);
 8016364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016366:	33a5      	adds	r3, #165	; 0xa5
 8016368:	4618      	mov	r0, r3
 801636a:	f7ff fbb9 	bl	8015ae0 <_convertString2Degrees>
 801636e:	eeb0 7a40 	vmov.f32	s14, s0
 8016372:	eef0 7a60 	vmov.f32	s15, s1
 8016376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016378:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 801637c:	e048      	b.n	8016410 <pifGps_ParsingNmea+0x640>
					if (p_owner->__string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016380:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8016384:	2b53      	cmp	r3, #83	; 0x53
 8016386:	d140      	bne.n	801640a <pifGps_ParsingNmea+0x63a>
 8016388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801638e:	603a      	str	r2, [r7, #0]
 8016390:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016394:	607b      	str	r3, [r7, #4]
 8016396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016398:	ed97 7b00 	vldr	d7, [r7]
 801639c:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80163a0:	e033      	b.n	801640a <pifGps_ParsingNmea+0x63a>
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(p_owner->__string);
 80163a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a4:	33a5      	adds	r3, #165	; 0xa5
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7ff fb9a 	bl	8015ae0 <_convertString2Degrees>
 80163ac:	eeb0 7a40 	vmov.f32	s14, s0
 80163b0:	eef0 7a60 	vmov.f32	s15, s1
 80163b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b6:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80163ba:	e029      	b.n	8016410 <pifGps_ParsingNmea+0x640>
					if (p_owner->__string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80163bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163be:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80163c2:	2b57      	cmp	r3, #87	; 0x57
 80163c4:	d123      	bne.n	801640e <pifGps_ParsingNmea+0x63e>
 80163c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80163cc:	4692      	mov	sl, r2
 80163ce:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80163d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d4:	e9c3 ab08 	strd	sl, fp, [r3, #32]
					break;
 80163d8:	e019      	b.n	801640e <pifGps_ParsingNmea+0x63e>
					p_owner->_num_sat = _convertString2Interger(p_owner->__string);
 80163da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163dc:	33a5      	adds	r3, #165	; 0xa5
 80163de:	4618      	mov	r0, r3
 80163e0:	f7ff fb46 	bl	8015a70 <_convertString2Interger>
 80163e4:	4603      	mov	r3, r0
 80163e6:	b2da      	uxtb	r2, r3
 80163e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					break;
 80163ee:	e00f      	b.n	8016410 <pifGps_ParsingNmea+0x640>
					p_owner->_altitude = _convertString2Float(p_owner->__string);
 80163f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f2:	33a5      	adds	r3, #165	; 0xa5
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7ff faaf 	bl	8015958 <_convertString2Float>
 80163fa:	eeb0 7a40 	vmov.f32	s14, s0
 80163fe:	eef0 7a60 	vmov.f32	s15, s1
 8016402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016404:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 8016408:	e002      	b.n	8016410 <pifGps_ParsingNmea+0x640>
					break;
 801640a:	bf00      	nop
 801640c:	e1dd      	b.n	80167ca <pifGps_ParsingNmea+0x9fa>
					break;
 801640e:	bf00      	nop
				break;
 8016410:	e1db      	b.n	80167ca <pifGps_ParsingNmea+0x9fa>
				switch (p_owner->__param) {
 8016412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016414:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8016418:	2b03      	cmp	r3, #3
 801641a:	d010      	beq.n	801643e <pifGps_ParsingNmea+0x66e>
 801641c:	2b03      	cmp	r3, #3
 801641e:	dc1a      	bgt.n	8016456 <pifGps_ParsingNmea+0x686>
 8016420:	2b01      	cmp	r3, #1
 8016422:	d017      	beq.n	8016454 <pifGps_ParsingNmea+0x684>
 8016424:	2b02      	cmp	r3, #2
 8016426:	d116      	bne.n	8016456 <pifGps_ParsingNmea+0x686>
					p_owner->__sv_msg_num = _convertString2Interger(p_owner->__string);
 8016428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642a:	33a5      	adds	r3, #165	; 0xa5
 801642c:	4618      	mov	r0, r3
 801642e:	f7ff fb1f 	bl	8015a70 <_convertString2Interger>
 8016432:	4603      	mov	r3, r0
 8016434:	b2da      	uxtb	r2, r3
 8016436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016438:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					break;
 801643c:	e00b      	b.n	8016456 <pifGps_ParsingNmea+0x686>
					p_owner->_sv_num_sv = _convertString2Interger(p_owner->__string);
 801643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016440:	33a5      	adds	r3, #165	; 0xa5
 8016442:	4618      	mov	r0, r3
 8016444:	f7ff fb14 	bl	8015a70 <_convertString2Interger>
 8016448:	4603      	mov	r3, r0
 801644a:	b2da      	uxtb	r2, r3
 801644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
					break;
 8016452:	e000      	b.n	8016456 <pifGps_ParsingNmea+0x686>
					break;
 8016454:	bf00      	nop
				if (p_owner->__param < 4) break;
 8016456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016458:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801645c:	2b03      	cmp	r3, #3
 801645e:	f240 81b6 	bls.w	80167ce <pifGps_ParsingNmea+0x9fe>
				sv_packet_idx = (p_owner->__param - 4) / 4 + 1; // satellite number in packet, 1-4
 8016462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016464:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8016468:	3b04      	subs	r3, #4
 801646a:	2b00      	cmp	r3, #0
 801646c:	da00      	bge.n	8016470 <pifGps_ParsingNmea+0x6a0>
 801646e:	3303      	adds	r3, #3
 8016470:	109b      	asrs	r3, r3, #2
 8016472:	b2db      	uxtb	r3, r3
 8016474:	3301      	adds	r3, #1
 8016476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				sv_sat_num    = sv_packet_idx + (4 * (p_owner->__sv_msg_num - 1)); // global satellite number
 801647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8016480:	3b01      	subs	r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	009b      	lsls	r3, r3, #2
 8016486:	b2da      	uxtb	r2, r3
 8016488:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801648c:	4413      	add	r3, r2
 801648e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				sv_sat_param  = p_owner->__param - 3 - (4 * (sv_packet_idx - 1)); // parameter number for satellite
 8016492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016494:	f893 20a2 	ldrb.w	r2, [r3, #162]	; 0xa2
 8016498:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801649c:	3b01      	subs	r3, #1
 801649e:	b2db      	uxtb	r3, r3
 80164a0:	009b      	lsls	r3, r3, #2
 80164a2:	b2db      	uxtb	r3, r3
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	3b03      	subs	r3, #3
 80164aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 80164ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80164b2:	2b10      	cmp	r3, #16
 80164b4:	f200 818d 	bhi.w	80167d2 <pifGps_ParsingNmea+0xa02>
				switch (sv_sat_param) {
 80164b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80164bc:	3b01      	subs	r3, #1
 80164be:	2b03      	cmp	r3, #3
 80164c0:	d83b      	bhi.n	801653a <pifGps_ParsingNmea+0x76a>
 80164c2:	a201      	add	r2, pc, #4	; (adr r2, 80164c8 <pifGps_ParsingNmea+0x6f8>)
 80164c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164c8:	080164d9 	.word	0x080164d9
 80164cc:	0801653b 	.word	0x0801653b
 80164d0:	0801653b 	.word	0x0801653b
 80164d4:	0801650b 	.word	0x0801650b
					p_owner->_sv_chn[sv_sat_num - 1]  = sv_sat_num;
 80164d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80164dc:	3b01      	subs	r3, #1
 80164de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164e0:	4413      	add	r3, r2
 80164e2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80164e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
					p_owner->_sv_svid[sv_sat_num - 1] = _convertString2Interger(p_owner->__string);
 80164ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ec:	33a5      	adds	r3, #165	; 0xa5
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7ff fabe 	bl	8015a70 <_convertString2Interger>
 80164f4:	4602      	mov	r2, r0
 80164f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80164fa:	3b01      	subs	r3, #1
 80164fc:	b2d1      	uxtb	r1, r2
 80164fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016500:	4413      	add	r3, r2
 8016502:	460a      	mov	r2, r1
 8016504:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
					break;
 8016508:	e017      	b.n	801653a <pifGps_ParsingNmea+0x76a>
					p_owner->_sv_cno[sv_sat_num - 1] = _convertString2Interger(p_owner->__string);
 801650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801650c:	33a5      	adds	r3, #165	; 0xa5
 801650e:	4618      	mov	r0, r3
 8016510:	f7ff faae 	bl	8015a70 <_convertString2Interger>
 8016514:	4602      	mov	r2, r0
 8016516:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801651a:	3b01      	subs	r3, #1
 801651c:	b2d1      	uxtb	r1, r2
 801651e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016520:	4413      	add	r3, r2
 8016522:	460a      	mov	r2, r1
 8016524:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					p_owner->_sv_quality[sv_sat_num - 1] = 0; // only used by ublox
 8016528:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801652c:	3b01      	subs	r3, #1
 801652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016530:	4413      	add	r3, r2
 8016532:	2200      	movs	r2, #0
 8016534:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
					break;
 8016538:	bf00      	nop
				p_owner->_sv_received_count++;
 801653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016540:	1c5a      	adds	r2, r3, #1
 8016542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016544:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				break;
 8016548:	e14a      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				switch (p_owner->__param) {
 801654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8016550:	3b01      	subs	r3, #1
 8016552:	2b08      	cmp	r3, #8
 8016554:	f200 813f 	bhi.w	80167d6 <pifGps_ParsingNmea+0xa06>
 8016558:	a201      	add	r2, pc, #4	; (adr r2, 8016560 <pifGps_ParsingNmea+0x790>)
 801655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801655e:	bf00      	nop
 8016560:	08016585 	.word	0x08016585
 8016564:	080167d7 	.word	0x080167d7
 8016568:	08016599 	.word	0x08016599
 801656c:	080165b3 	.word	0x080165b3
 8016570:	080165d1 	.word	0x080165d1
 8016574:	080165eb 	.word	0x080165eb
 8016578:	08016609 	.word	0x08016609
 801657c:	0801662f 	.word	0x0801662f
 8016580:	08016649 	.word	0x08016649
					_convertString2Time(p_owner->__string, &p_owner->_utc);
 8016584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016586:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 801658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658c:	330e      	adds	r3, #14
 801658e:	4619      	mov	r1, r3
 8016590:	4610      	mov	r0, r2
 8016592:	f7ff f95f 	bl	8015854 <_convertString2Time>
					break;
 8016596:	e064      	b.n	8016662 <pifGps_ParsingNmea+0x892>
					p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(p_owner->__string);
 8016598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801659a:	33a5      	adds	r3, #165	; 0xa5
 801659c:	4618      	mov	r0, r3
 801659e:	f7ff fa9f 	bl	8015ae0 <_convertString2Degrees>
 80165a2:	eeb0 7a40 	vmov.f32	s14, s0
 80165a6:	eef0 7a60 	vmov.f32	s15, s1
 80165aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ac:	ed83 7b06 	vstr	d7, [r3, #24]
					break;
 80165b0:	e057      	b.n	8016662 <pifGps_ParsingNmea+0x892>
					if (p_owner->__string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80165b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80165b8:	2b53      	cmp	r3, #83	; 0x53
 80165ba:	d14f      	bne.n	801665c <pifGps_ParsingNmea+0x88c>
 80165bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165be:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80165c2:	4690      	mov	r8, r2
 80165c4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80165c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ca:	e9c3 8906 	strd	r8, r9, [r3, #24]
					break;
 80165ce:	e045      	b.n	801665c <pifGps_ParsingNmea+0x88c>
					p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(p_owner->__string);
 80165d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d2:	33a5      	adds	r3, #165	; 0xa5
 80165d4:	4618      	mov	r0, r3
 80165d6:	f7ff fa83 	bl	8015ae0 <_convertString2Degrees>
 80165da:	eeb0 7a40 	vmov.f32	s14, s0
 80165de:	eef0 7a60 	vmov.f32	s15, s1
 80165e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e4:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 80165e8:	e03b      	b.n	8016662 <pifGps_ParsingNmea+0x892>
					if (p_owner->__string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 80165ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80165f0:	2b57      	cmp	r3, #87	; 0x57
 80165f2:	d135      	bne.n	8016660 <pifGps_ParsingNmea+0x890>
 80165f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80165fa:	4614      	mov	r4, r2
 80165fc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8016600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016602:	e9c3 4508 	strd	r4, r5, [r3, #32]
					break;
 8016606:	e02b      	b.n	8016660 <pifGps_ParsingNmea+0x890>
					p_owner->_ground_speed = _convertString2Float(p_owner->__string) * 51444L;	// knots -> cm/s
 8016608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660a:	33a5      	adds	r3, #165	; 0xa5
 801660c:	4618      	mov	r0, r3
 801660e:	f7ff f9a3 	bl	8015958 <_convertString2Float>
 8016612:	ec51 0b10 	vmov	r0, r1, d0
 8016616:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 801661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661e:	f7e9 ff9f 	bl	8000560 <__aeabi_dmul>
 8016622:	4602      	mov	r2, r0
 8016624:	460b      	mov	r3, r1
 8016626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016628:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 801662c:	e019      	b.n	8016662 <pifGps_ParsingNmea+0x892>
					p_owner->_ground_course = _convertString2Float(p_owner->__string);
 801662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016630:	33a5      	adds	r3, #165	; 0xa5
 8016632:	4618      	mov	r0, r3
 8016634:	f7ff f990 	bl	8015958 <_convertString2Float>
 8016638:	eeb0 7a40 	vmov.f32	s14, s0
 801663c:	eef0 7a60 	vmov.f32	s15, s1
 8016640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016642:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 8016646:	e00c      	b.n	8016662 <pifGps_ParsingNmea+0x892>
					_convertString2Date(p_owner->__string, &p_owner->_utc);
 8016648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664a:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 801664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016650:	330e      	adds	r3, #14
 8016652:	4619      	mov	r1, r3
 8016654:	4610      	mov	r0, r2
 8016656:	f7ff f8b9 	bl	80157cc <_convertString2Date>
					break;
 801665a:	e002      	b.n	8016662 <pifGps_ParsingNmea+0x892>
					break;
 801665c:	bf00      	nop
 801665e:	e0ba      	b.n	80167d6 <pifGps_ParsingNmea+0xa06>
					break;
 8016660:	bf00      	nop
				break;
 8016662:	e0b8      	b.n	80167d6 <pifGps_ParsingNmea+0xa06>
				if (p_owner->__evt_text) {
 8016664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016666:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801666a:	2b00      	cmp	r3, #0
 801666c:	d041      	beq.n	80166f2 <pifGps_ParsingNmea+0x922>
					switch (p_owner->__param) {
 801666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016670:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8016674:	3b01      	subs	r3, #1
 8016676:	2b03      	cmp	r3, #3
 8016678:	f200 80af 	bhi.w	80167da <pifGps_ParsingNmea+0xa0a>
 801667c:	a201      	add	r2, pc, #4	; (adr r2, 8016684 <pifGps_ParsingNmea+0x8b4>)
 801667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016682:	bf00      	nop
 8016684:	08016695 	.word	0x08016695
 8016688:	080166ad 	.word	0x080166ad
 801668c:	080166c5 	.word	0x080166c5
 8016690:	080166dd 	.word	0x080166dd
						p_owner->__p_txt->total = _convertString2Interger(p_owner->__string);
 8016694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016696:	33a5      	adds	r3, #165	; 0xa5
 8016698:	4618      	mov	r0, r3
 801669a:	f7ff f9e9 	bl	8015a70 <_convertString2Interger>
 801669e:	4602      	mov	r2, r0
 80166a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80166a6:	b2d2      	uxtb	r2, r2
 80166a8:	701a      	strb	r2, [r3, #0]
						break;
 80166aa:	e023      	b.n	80166f4 <pifGps_ParsingNmea+0x924>
						p_owner->__p_txt->num = _convertString2Interger(p_owner->__string);
 80166ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ae:	33a5      	adds	r3, #165	; 0xa5
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7ff f9dd 	bl	8015a70 <_convertString2Interger>
 80166b6:	4602      	mov	r2, r0
 80166b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80166be:	b2d2      	uxtb	r2, r2
 80166c0:	705a      	strb	r2, [r3, #1]
						break;
 80166c2:	e017      	b.n	80166f4 <pifGps_ParsingNmea+0x924>
						p_owner->__p_txt->type = _convertString2Interger(p_owner->__string);
 80166c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166c6:	33a5      	adds	r3, #165	; 0xa5
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ff f9d1 	bl	8015a70 <_convertString2Interger>
 80166ce:	4602      	mov	r2, r0
 80166d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80166d6:	b2d2      	uxtb	r2, r2
 80166d8:	709a      	strb	r2, [r3, #2]
						break;
 80166da:	e00b      	b.n	80166f4 <pifGps_ParsingNmea+0x924>
						strncpy(p_owner->__p_txt->text, p_owner->__string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 80166dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80166e2:	1cd8      	adds	r0, r3, #3
 80166e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e6:	33a5      	adds	r3, #165	; 0xa5
 80166e8:	223f      	movs	r2, #63	; 0x3f
 80166ea:	4619      	mov	r1, r3
 80166ec:	f00c fe14 	bl	8023318 <strncpy>
						break;
 80166f0:	e000      	b.n	80166f4 <pifGps_ParsingNmea+0x924>
				}
 80166f2:	bf00      	nop
				break;
 80166f4:	e071      	b.n	80167da <pifGps_ParsingNmea+0xa0a>
				switch (p_owner->__param) {
 80166f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80166fc:	2b01      	cmp	r3, #1
 80166fe:	d002      	beq.n	8016706 <pifGps_ParsingNmea+0x936>
 8016700:	2b05      	cmp	r3, #5
 8016702:	d00d      	beq.n	8016720 <pifGps_ParsingNmea+0x950>
				break;
 8016704:	e06c      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
					p_owner->_ground_course = _convertString2Float(p_owner->__string);
 8016706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016708:	33a5      	adds	r3, #165	; 0xa5
 801670a:	4618      	mov	r0, r3
 801670c:	f7ff f924 	bl	8015958 <_convertString2Float>
 8016710:	eeb0 7a40 	vmov.f32	s14, s0
 8016714:	eef0 7a60 	vmov.f32	s15, s1
 8016718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
					break;
 801671e:	e011      	b.n	8016744 <pifGps_ParsingNmea+0x974>
					p_owner->_ground_speed = _convertString2Float(p_owner->__string) * 51444L;	// knots -> cm/s
 8016720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016722:	33a5      	adds	r3, #165	; 0xa5
 8016724:	4618      	mov	r0, r3
 8016726:	f7ff f917 	bl	8015958 <_convertString2Float>
 801672a:	ec51 0b10 	vmov	r0, r1, d0
 801672e:	a3bf      	add	r3, pc, #764	; (adr r3, 8016a2c <pifGps_ParsingNmea+0xc5c>)
 8016730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016734:	f7e9 ff14 	bl	8000560 <__aeabi_dmul>
 8016738:	4602      	mov	r2, r0
 801673a:	460b      	mov	r3, r1
 801673c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801673e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					break;
 8016742:	bf00      	nop
				break;
 8016744:	e04c      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				switch (p_owner->__param) {
 8016746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016748:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801674c:	3b01      	subs	r3, #1
 801674e:	2b03      	cmp	r3, #3
 8016750:	d845      	bhi.n	80167de <pifGps_ParsingNmea+0xa0e>
 8016752:	a201      	add	r2, pc, #4	; (adr r2, 8016758 <pifGps_ParsingNmea+0x988>)
 8016754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016758:	08016769 	.word	0x08016769
 801675c:	0801677d 	.word	0x0801677d
 8016760:	08016791 	.word	0x08016791
 8016764:	080167a5 	.word	0x080167a5
					_convertString2Time(p_owner->__string, &p_owner->_utc);
 8016768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801676a:	f103 02a5 	add.w	r2, r3, #165	; 0xa5
 801676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016770:	330e      	adds	r3, #14
 8016772:	4619      	mov	r1, r3
 8016774:	4610      	mov	r0, r2
 8016776:	f7ff f86d 	bl	8015854 <_convertString2Time>
					break;
 801677a:	e01f      	b.n	80167bc <pifGps_ParsingNmea+0x9ec>
					p_owner->_utc.day = _convertString2Interger(p_owner->__string);
 801677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677e:	33a5      	adds	r3, #165	; 0xa5
 8016780:	4618      	mov	r0, r3
 8016782:	f7ff f975 	bl	8015a70 <_convertString2Interger>
 8016786:	4603      	mov	r3, r0
 8016788:	b2da      	uxtb	r2, r3
 801678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678c:	741a      	strb	r2, [r3, #16]
					break;
 801678e:	e015      	b.n	80167bc <pifGps_ParsingNmea+0x9ec>
					p_owner->_utc.month = _convertString2Interger(p_owner->__string);
 8016790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016792:	33a5      	adds	r3, #165	; 0xa5
 8016794:	4618      	mov	r0, r3
 8016796:	f7ff f96b 	bl	8015a70 <_convertString2Interger>
 801679a:	4603      	mov	r3, r0
 801679c:	b2da      	uxtb	r2, r3
 801679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a0:	73da      	strb	r2, [r3, #15]
					break;
 80167a2:	e00b      	b.n	80167bc <pifGps_ParsingNmea+0x9ec>
					p_owner->_utc.year = _convertString2Interger(p_owner->__string) - 2000;
 80167a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a6:	33a5      	adds	r3, #165	; 0xa5
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7ff f961 	bl	8015a70 <_convertString2Interger>
 80167ae:	4603      	mov	r3, r0
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	3330      	adds	r3, #48	; 0x30
 80167b4:	b2da      	uxtb	r2, r3
 80167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b8:	739a      	strb	r2, [r3, #14]
					break;
 80167ba:	bf00      	nop
				break;
 80167bc:	e00f      	b.n	80167de <pifGps_ParsingNmea+0xa0e>
		}
 80167be:	bf00      	nop
 80167c0:	e00e      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				break;
 80167c2:	bf00      	nop
 80167c4:	e00c      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				break;
 80167c6:	bf00      	nop
 80167c8:	e00a      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				break;
 80167ca:	bf00      	nop
 80167cc:	e008      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				if (p_owner->__param < 4) break;
 80167ce:	bf00      	nop
 80167d0:	e006      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				if (sv_sat_num > PIF_GPS_SV_MAXSATS) break;
 80167d2:	bf00      	nop
 80167d4:	e004      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				break;
 80167d6:	bf00      	nop
 80167d8:	e002      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				break;
 80167da:	bf00      	nop
 80167dc:	e000      	b.n	80167e0 <pifGps_ParsingNmea+0xa10>
				break;
 80167de:	bf00      	nop
		if (p_owner->__msg_id) {
 80167e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d041      	beq.n	801686e <pifGps_ParsingNmea+0xa9e>
			p_owner->__param++;
 80167ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ec:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80167f0:	3301      	adds	r3, #1
 80167f2:	b2da      	uxtb	r2, r3
 80167f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			if (c == '*') p_owner->__checksum_param = 1;
 80167fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167fe:	2b2a      	cmp	r3, #42	; 0x2a
 8016800:	d104      	bne.n	801680c <pifGps_ParsingNmea+0xa3c>
 8016802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016804:	2201      	movs	r2, #1
 8016806:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 801680a:	e009      	b.n	8016820 <pifGps_ParsingNmea+0xa50>
			else p_owner->__parity ^= c;
 801680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680e:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8016812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016816:	4053      	eors	r3, r2
 8016818:	b2da      	uxtb	r2, r3
 801681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if (p_owner->evt_frame) {
 8016820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016822:	689b      	ldr	r3, [r3, #8]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d022      	beq.n	801686e <pifGps_ParsingNmea+0xa9e>
				p_owner->__string[p_owner->__offset++] = c;
 8016828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801682a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 801682e:	1c5a      	adds	r2, r3, #1
 8016830:	b2d1      	uxtb	r1, r2
 8016832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016834:	f882 10a3 	strb.w	r1, [r2, #163]	; 0xa3
 8016838:	461a      	mov	r2, r3
 801683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801683c:	4413      	add	r3, r2
 801683e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8016842:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
				p_owner->__string[p_owner->__offset++] = 0;
 8016846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016848:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 801684c:	1c5a      	adds	r2, r3, #1
 801684e:	b2d1      	uxtb	r1, r2
 8016850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016852:	f882 10a3 	strb.w	r1, [r2, #163]	; 0xa3
 8016856:	461a      	mov	r2, r3
 8016858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685a:	4413      	add	r3, r2
 801685c:	2200      	movs	r2, #0
 801685e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
				(p_owner->evt_frame)(p_owner->__string);
 8016862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016868:	32a5      	adds	r2, #165	; 0xa5
 801686a:	4610      	mov	r0, r2
 801686c:	4798      	blx	r3
		p_owner->__offset = 0;
 801686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016870:	2200      	movs	r2, #0
 8016872:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8016876:	e0cf      	b.n	8016a18 <pifGps_ParsingNmea+0xc48>
	else if (c == '\r' || c == '\n') {
 8016878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801687c:	2b0d      	cmp	r3, #13
 801687e:	d004      	beq.n	801688a <pifGps_ParsingNmea+0xaba>
 8016880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016884:	2b0a      	cmp	r3, #10
 8016886:	f040 809b 	bne.w	80169c0 <pifGps_ParsingNmea+0xbf0>
		if (p_owner->__msg_id && p_owner->__checksum_param) { //parity checksum
 801688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801688c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8016890:	2b00      	cmp	r3, #0
 8016892:	d065      	beq.n	8016960 <pifGps_ParsingNmea+0xb90>
 8016894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016896:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 801689a:	2b00      	cmp	r3, #0
 801689c:	d060      	beq.n	8016960 <pifGps_ParsingNmea+0xb90>
			uint8_t checksum = _convertAscii2Hex(p_owner->__string[0]);
 801689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7ff f9bd 	bl	8015c24 <_convertAscii2Hex>
 80168aa:	4603      	mov	r3, r0
 80168ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			checksum <<= 4;
 80168b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168b4:	011b      	lsls	r3, r3, #4
 80168b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			checksum += _convertAscii2Hex(p_owner->__string[1]);
 80168ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168bc:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7ff f9af 	bl	8015c24 <_convertAscii2Hex>
 80168c6:	4603      	mov	r3, r0
 80168c8:	461a      	mov	r2, r3
 80168ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168ce:	4413      	add	r3, r2
 80168d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (checksum == p_owner->__parity) {
 80168d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80168da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80168de:	429a      	cmp	r2, r3
 80168e0:	d124      	bne.n	801692c <pifGps_ParsingNmea+0xb5c>
				if (p_owner->evt_nmea_receive) {
 80168e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d00d      	beq.n	8016906 <pifGps_ParsingNmea+0xb36>
					if ((p_owner->evt_nmea_receive)(p_owner, p_owner->__msg_id)) pifGps_SendEvent(p_owner);
 80168ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168f0:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 80168f4:	4611      	mov	r1, r2
 80168f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80168f8:	4798      	blx	r3
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d002      	beq.n	8016906 <pifGps_ParsingNmea+0xb36>
 8016900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016902:	f7ff fa41 	bl	8015d88 <pifGps_SendEvent>
				if (p_owner->__msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 8016906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016908:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801690c:	2b0c      	cmp	r3, #12
 801690e:	d127      	bne.n	8016960 <pifGps_ParsingNmea+0xb90>
 8016910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016912:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016916:	2b00      	cmp	r3, #0
 8016918:	d022      	beq.n	8016960 <pifGps_ParsingNmea+0xb90>
					(p_owner->__evt_text)(p_owner->__p_txt);
 801691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8016920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016922:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8016926:	4610      	mov	r0, r2
 8016928:	4798      	blx	r3
 801692a:	e019      	b.n	8016960 <pifGps_ParsingNmea+0xb90>
				pifLog_Printf(LT_ERROR, "GPS(%u): MsgId=%u CS=%x:%x", __LINE__, p_owner->__msg_id, checksum, p_owner->__parity);
 801692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801692e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8016932:	4619      	mov	r1, r3
 8016934:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801693a:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 801693e:	9201      	str	r2, [sp, #4]
 8016940:	9300      	str	r3, [sp, #0]
 8016942:	460b      	mov	r3, r1
 8016944:	f240 12dd 	movw	r2, #477	; 0x1dd
 8016948:	4937      	ldr	r1, [pc, #220]	; (8016a28 <pifGps_ParsingNmea+0xc58>)
 801694a:	2004      	movs	r0, #4
 801694c:	f7fc fdae 	bl	80134ac <pifLog_Printf>
				p_owner->__msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8016950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016952:	2200      	movs	r2, #0
 8016954:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
				p_owner->__param = 0;
 8016958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695a:	2200      	movs	r2, #0
 801695c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		p_owner->__checksum_param = 0;
 8016960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016962:	2200      	movs	r2, #0
 8016964:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		if (p_owner->evt_frame) {
 8016968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696a:	689b      	ldr	r3, [r3, #8]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d022      	beq.n	80169b6 <pifGps_ParsingNmea+0xbe6>
			p_owner->__string[p_owner->__offset++] = c;
 8016970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016972:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8016976:	1c5a      	adds	r2, r3, #1
 8016978:	b2d1      	uxtb	r1, r2
 801697a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801697c:	f882 10a3 	strb.w	r1, [r2, #163]	; 0xa3
 8016980:	461a      	mov	r2, r3
 8016982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016984:	4413      	add	r3, r2
 8016986:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801698a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			p_owner->__string[p_owner->__offset++] = 0;
 801698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016990:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8016994:	1c5a      	adds	r2, r3, #1
 8016996:	b2d1      	uxtb	r1, r2
 8016998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801699a:	f882 10a3 	strb.w	r1, [r2, #163]	; 0xa3
 801699e:	461a      	mov	r2, r3
 80169a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a2:	4413      	add	r3, r2
 80169a4:	2200      	movs	r2, #0
 80169a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			(p_owner->evt_frame)(p_owner->__string);
 80169aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ac:	689b      	ldr	r3, [r3, #8]
 80169ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169b0:	32a5      	adds	r2, #165	; 0xa5
 80169b2:	4610      	mov	r0, r2
 80169b4:	4798      	blx	r3
		p_owner->__offset = 0;
 80169b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b8:	2200      	movs	r2, #0
 80169ba:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80169be:	e02b      	b.n	8016a18 <pifGps_ParsingNmea+0xc48>
	else if (c >= 32 && c < 128) {
 80169c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80169c4:	2b1f      	cmp	r3, #31
 80169c6:	d927      	bls.n	8016a18 <pifGps_ParsingNmea+0xc48>
 80169c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	db23      	blt.n	8016a18 <pifGps_ParsingNmea+0xc48>
		if (p_owner->__offset < PIF_GPS_NMEA_VALUE_SIZE) {
 80169d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80169d6:	2b1f      	cmp	r3, #31
 80169d8:	d81e      	bhi.n	8016a18 <pifGps_ParsingNmea+0xc48>
			p_owner->__string[p_owner->__offset++] = c;
 80169da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169dc:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80169e0:	1c5a      	adds	r2, r3, #1
 80169e2:	b2d1      	uxtb	r1, r2
 80169e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169e6:	f882 10a3 	strb.w	r1, [r2, #163]	; 0xa3
 80169ea:	461a      	mov	r2, r3
 80169ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ee:	4413      	add	r3, r2
 80169f0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80169f4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			if (!p_owner->__checksum_param) p_owner->__parity ^= c;
 80169f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169fa:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d10a      	bne.n	8016a18 <pifGps_ParsingNmea+0xc48>
 8016a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a04:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8016a08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016a0c:	4053      	eors	r3, r2
 8016a0e:	b2da      	uxtb	r2, r3
 8016a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a12:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8016a16:	e7ff      	b.n	8016a18 <pifGps_ParsingNmea+0xc48>
 8016a18:	bf00      	nop
 8016a1a:	3738      	adds	r7, #56	; 0x38
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016a22:	bf00      	nop
 8016a24:	f3af 8000 	nop.w
 8016a28:	08027c2c 	.word	0x08027c2c
 8016a2c:	00000000 	.word	0x00000000
 8016a30:	40e91e80 	.word	0x40e91e80

08016a34 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016a34:	b480      	push	{r7}
 8016a36:	b087      	sub	sp, #28
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	60b9      	str	r1, [r7, #8]
 8016a3e:	4613      	mov	r3, r2
 8016a40:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 8016a42:	2300      	movs	r3, #0
 8016a44:	75fb      	strb	r3, [r7, #23]
 8016a46:	2300      	movs	r3, #0
 8016a48:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	82bb      	strh	r3, [r7, #20]
 8016a4e:	e00d      	b.n	8016a6c <_checksumUbx+0x38>
		ck_a += p_header[i];
 8016a50:	8abb      	ldrh	r3, [r7, #20]
 8016a52:	68fa      	ldr	r2, [r7, #12]
 8016a54:	4413      	add	r3, r2
 8016a56:	781a      	ldrb	r2, [r3, #0]
 8016a58:	7dfb      	ldrb	r3, [r7, #23]
 8016a5a:	4413      	add	r3, r2
 8016a5c:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016a5e:	7dba      	ldrb	r2, [r7, #22]
 8016a60:	7dfb      	ldrb	r3, [r7, #23]
 8016a62:	4413      	add	r3, r2
 8016a64:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 8016a66:	8abb      	ldrh	r3, [r7, #20]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	82bb      	strh	r3, [r7, #20]
 8016a6c:	8abb      	ldrh	r3, [r7, #20]
 8016a6e:	2b03      	cmp	r3, #3
 8016a70:	d9ee      	bls.n	8016a50 <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 8016a72:	2300      	movs	r3, #0
 8016a74:	82bb      	strh	r3, [r7, #20]
 8016a76:	e00d      	b.n	8016a94 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 8016a78:	8abb      	ldrh	r3, [r7, #20]
 8016a7a:	68ba      	ldr	r2, [r7, #8]
 8016a7c:	4413      	add	r3, r2
 8016a7e:	781a      	ldrb	r2, [r3, #0]
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
 8016a82:	4413      	add	r3, r2
 8016a84:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 8016a86:	7dba      	ldrb	r2, [r7, #22]
 8016a88:	7dfb      	ldrb	r3, [r7, #23]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 8016a8e:	8abb      	ldrh	r3, [r7, #20]
 8016a90:	3301      	adds	r3, #1
 8016a92:	82bb      	strh	r3, [r7, #20]
 8016a94:	8aba      	ldrh	r2, [r7, #20]
 8016a96:	88fb      	ldrh	r3, [r7, #6]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d3ed      	bcc.n	8016a78 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 8016a9c:	7dfb      	ldrb	r3, [r7, #23]
 8016a9e:	b29a      	uxth	r2, r3
 8016aa0:	7dbb      	ldrb	r3, [r7, #22]
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	021b      	lsls	r3, r3, #8
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	4413      	add	r3, r2
 8016aaa:	b29b      	uxth	r3, r3
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	371c      	adds	r7, #28
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr

08016ab8 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, uint8_t data)
{
 8016ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aba:	b08f      	sub	sp, #60	; 0x3c
 8016abc:	af06      	add	r7, sp, #24
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	70fb      	strb	r3, [r7, #3]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8016aca:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	3308      	adds	r3, #8
 8016ad0:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	switch (p_owner->__rx.state) {
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8016ad8:	2b08      	cmp	r3, #8
 8016ada:	f200 80b7 	bhi.w	8016c4c <_parsingPacket+0x194>
 8016ade:	a201      	add	r2, pc, #4	; (adr r2, 8016ae4 <_parsingPacket+0x2c>)
 8016ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ae4:	08016b09 	.word	0x08016b09
 8016ae8:	08016b2f 	.word	0x08016b2f
 8016aec:	08016b49 	.word	0x08016b49
 8016af0:	08016b59 	.word	0x08016b59
 8016af4:	08016b69 	.word	0x08016b69
 8016af8:	08016b7b 	.word	0x08016b7b
 8016afc:	08016bb7 	.word	0x08016bb7
 8016b00:	08016bef 	.word	0x08016bef
 8016b04:	08016c03 	.word	0x08016c03
	case GURS_SYNC_CHAR_1:
		if (data == 0xB5) {
 8016b08:	78fb      	ldrb	r3, [r7, #3]
 8016b0a:	2bb5      	cmp	r3, #181	; 0xb5
 8016b0c:	d107      	bne.n	8016b1e <_parsingPacket+0x66>
			p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2201      	movs	r2, #1
 8016b12:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
#ifndef __PIF_NO_LOG__
			pre_err = PKT_ERR_NONE;
 8016b16:	4ba4      	ldr	r3, [pc, #656]	; (8016da8 <_parsingPacket+0x2f0>)
 8016b18:	2204      	movs	r2, #4
 8016b1a:	701a      	strb	r2, [r3, #0]
#endif
		}
		else {
			pifGps_ParsingNmea(&p_owner->_gps, data);
		}
		break;
 8016b1c:	e099      	b.n	8016c52 <_parsingPacket+0x19a>
			pifGps_ParsingNmea(&p_owner->_gps, data);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	3308      	adds	r3, #8
 8016b22:	78fa      	ldrb	r2, [r7, #3]
 8016b24:	4611      	mov	r1, r2
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7ff f952 	bl	8015dd0 <pifGps_ParsingNmea>
		break;
 8016b2c:	e091      	b.n	8016c52 <_parsingPacket+0x19a>

	case GURS_SYNC_CHAR_2:
		if (data == 0x62) {
 8016b2e:	78fb      	ldrb	r3, [r7, #3]
 8016b30:	2b62      	cmp	r3, #98	; 0x62
 8016b32:	d104      	bne.n	8016b3e <_parsingPacket+0x86>
			p_owner->__rx.state = GURS_CLASS;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2202      	movs	r2, #2
 8016b38:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			pkt_err = PKT_ERR_INVALID_DATA;
			line = __LINE__;
#endif
			goto fail;
		}
		break;
 8016b3c:	e089      	b.n	8016c52 <_parsingPacket+0x19a>
			pkt_err = PKT_ERR_INVALID_DATA;
 8016b3e:	2301      	movs	r3, #1
 8016b40:	76fb      	strb	r3, [r7, #27]
			line = __LINE__;
 8016b42:	235e      	movs	r3, #94	; 0x5e
 8016b44:	617b      	str	r3, [r7, #20]
			goto fail;
 8016b46:	e2e1      	b.n	801710c <_parsingPacket+0x654>

	case GURS_CLASS:
		p_packet->class_id = data;
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	78fa      	ldrb	r2, [r7, #3]
 8016b4c:	701a      	strb	r2, [r3, #0]
		p_owner->__rx.state = GURS_ID;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2203      	movs	r2, #3
 8016b52:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		break;
 8016b56:	e07c      	b.n	8016c52 <_parsingPacket+0x19a>

	case GURS_ID:
		p_packet->msg_id = data;
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	78fa      	ldrb	r2, [r7, #3]
 8016b5c:	705a      	strb	r2, [r3, #1]
		p_owner->__rx.state = GURS_LENGTH_LOW;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2204      	movs	r2, #4
 8016b62:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		break;
 8016b66:	e074      	b.n	8016c52 <_parsingPacket+0x19a>

	case GURS_LENGTH_LOW:
		p_packet->length = data;
 8016b68:	78fb      	ldrb	r3, [r7, #3]
 8016b6a:	b29a      	uxth	r2, r3
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	805a      	strh	r2, [r3, #2]
		p_owner->__rx.state = GURS_LENGTH_HIGH;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2205      	movs	r2, #5
 8016b74:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		break;
 8016b78:	e06b      	b.n	8016c52 <_parsingPacket+0x19a>

	case GURS_LENGTH_HIGH:
		p_packet->length |= data << 8;
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	885b      	ldrh	r3, [r3, #2]
 8016b7e:	b21a      	sxth	r2, r3
 8016b80:	78fb      	ldrb	r3, [r7, #3]
 8016b82:	021b      	lsls	r3, r3, #8
 8016b84:	b21b      	sxth	r3, r3
 8016b86:	4313      	orrs	r3, r2
 8016b88:	b21b      	sxth	r3, r3
 8016b8a:	b29a      	uxth	r2, r3
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	805a      	strh	r2, [r3, #2]
		if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	885b      	ldrh	r3, [r3, #2]
 8016b94:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8016b98:	d208      	bcs.n	8016bac <_parsingPacket+0xf4>
			p_owner->__rx.payload_count = 0;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
			p_owner->__rx.state = GURS_PAYLOAD;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2206      	movs	r2, #6
 8016ba6:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			pkt_err = PKT_ERR_BIG_LENGHT;
			line = __LINE__;
#endif
			goto fail;
		}
		break;
 8016baa:	e052      	b.n	8016c52 <_parsingPacket+0x19a>
			pkt_err = PKT_ERR_BIG_LENGHT;
 8016bac:	2300      	movs	r3, #0
 8016bae:	76fb      	strb	r3, [r7, #27]
			line = __LINE__;
 8016bb0:	237c      	movs	r3, #124	; 0x7c
 8016bb2:	617b      	str	r3, [r7, #20]
			goto fail;
 8016bb4:	e2aa      	b.n	801710c <_parsingPacket+0x654>

	case GURS_PAYLOAD:
		p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	78fa      	ldrb	r2, [r7, #3]
 8016bc4:	711a      	strb	r2, [r3, #4]
		p_owner->__rx.payload_count++;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 8016bcc:	3301      	adds	r3, #1
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
		if (p_owner->__rx.payload_count >= p_packet->length) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8b3 2136 	ldrh.w	r2, [r3, #310]	; 0x136
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	885b      	ldrh	r3, [r3, #2]
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d335      	bcc.n	8016c50 <_parsingPacket+0x198>
			p_owner->__rx.state = GURS_CK_A;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2207      	movs	r2, #7
 8016be8:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		}
		break;
 8016bec:	e030      	b.n	8016c50 <_parsingPacket+0x198>

	case GURS_CK_A:
		p_owner->__rx.checksum = data;
 8016bee:	78fb      	ldrb	r3, [r7, #3]
 8016bf0:	b29a      	uxth	r2, r3
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
		p_owner->__rx.state = GURS_CK_B;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2208      	movs	r2, #8
 8016bfc:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		break;
 8016c00:	e027      	b.n	8016c52 <_parsingPacket+0x19a>

	case GURS_CK_B:
		p_owner->__rx.checksum |= data << 8;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 8016c08:	b21a      	sxth	r2, r3
 8016c0a:	78fb      	ldrb	r3, [r7, #3]
 8016c0c:	021b      	lsls	r3, r3, #8
 8016c0e:	b21b      	sxth	r3, r3
 8016c10:	4313      	orrs	r3, r2
 8016c12:	b21b      	sxth	r3, r3
 8016c14:	b29a      	uxth	r2, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
		if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f8b3 42c4 	ldrh.w	r4, [r3, #708]	; 0x2c4
 8016c22:	693b      	ldr	r3, [r7, #16]
 8016c24:	1d19      	adds	r1, r3, #4
 8016c26:	693b      	ldr	r3, [r7, #16]
 8016c28:	885b      	ldrh	r3, [r3, #2]
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	6938      	ldr	r0, [r7, #16]
 8016c2e:	f7ff ff01 	bl	8016a34 <_checksumUbx>
 8016c32:	4603      	mov	r3, r0
 8016c34:	429c      	cmp	r4, r3
 8016c36:	d104      	bne.n	8016c42 <_parsingPacket+0x18a>
			p_owner->__rx.state = GURS_DONE;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2209      	movs	r2, #9
 8016c3c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			pkt_err = PKT_ERR_WRONG_CRC;
			line = __LINE__;
#endif
			goto fail;
		}
		break;
 8016c40:	e007      	b.n	8016c52 <_parsingPacket+0x19a>
			pkt_err = PKT_ERR_WRONG_CRC;
 8016c42:	2302      	movs	r3, #2
 8016c44:	76fb      	strb	r3, [r7, #27]
			line = __LINE__;
 8016c46:	2397      	movs	r3, #151	; 0x97
 8016c48:	617b      	str	r3, [r7, #20]
			goto fail;
 8016c4a:	e25f      	b.n	801710c <_parsingPacket+0x654>

	default:
		break;
 8016c4c:	bf00      	nop
 8016c4e:	e000      	b.n	8016c52 <_parsingPacket+0x19a>
		break;
 8016c50:	bf00      	nop
	}

    if (p_owner->__rx.state == GURS_DONE) {
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8016c58:	2b09      	cmp	r3, #9
 8016c5a:	f040 829a 	bne.w	8017192 <_parsingPacket+0x6da>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	2b01      	cmp	r3, #1
 8016c64:	d039      	beq.n	8016cda <_parsingPacket+0x222>
 8016c66:	2b05      	cmp	r3, #5
 8016c68:	f040 8229 	bne.w	80170be <_parsingPacket+0x606>
        case GUCI_ACK:
    		if (p_owner->_request_state == GURS_SEND && p_packet->payload.bytes[0] == GUCI_CFG && p_packet->payload.bytes[1] == p_owner->__cfg_msg_id) {
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8016c72:	b2db      	uxtb	r3, r3
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d12e      	bne.n	8016cd6 <_parsingPacket+0x21e>
 8016c78:	693b      	ldr	r3, [r7, #16]
 8016c7a:	791b      	ldrb	r3, [r3, #4]
 8016c7c:	2b06      	cmp	r3, #6
 8016c7e:	d12a      	bne.n	8016cd6 <_parsingPacket+0x21e>
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	795a      	ldrb	r2, [r3, #5]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d123      	bne.n	8016cd6 <_parsingPacket+0x21e>
            	switch (p_packet->msg_id) {
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	785b      	ldrb	r3, [r3, #1]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d006      	beq.n	8016ca4 <_parsingPacket+0x1ec>
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	d109      	bne.n	8016cae <_parsingPacket+0x1f6>
            	case GUMI_ACK_ACK:
            		p_owner->_request_state = GURS_ACK;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2203      	movs	r2, #3
 8016c9e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            		break;
 8016ca2:	e019      	b.n	8016cd8 <_parsingPacket+0x220>

            	case GUMI_ACK_NAK:
            		p_owner->_request_state = GURS_NAK;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2202      	movs	r2, #2
 8016ca8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            		break;
 8016cac:	e014      	b.n	8016cd8 <_parsingPacket+0x220>

                default:
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	8a9b      	ldrh	r3, [r3, #20]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	4b3d      	ldr	r3, [pc, #244]	; (8016dac <_parsingPacket+0x2f4>)
 8016cb6:	68db      	ldr	r3, [r3, #12]
 8016cb8:	693a      	ldr	r2, [r7, #16]
 8016cba:	7812      	ldrb	r2, [r2, #0]
 8016cbc:	4611      	mov	r1, r2
 8016cbe:	693a      	ldr	r2, [r7, #16]
 8016cc0:	7852      	ldrb	r2, [r2, #1]
 8016cc2:	9202      	str	r2, [sp, #8]
 8016cc4:	9101      	str	r1, [sp, #4]
 8016cc6:	9300      	str	r3, [sp, #0]
 8016cc8:	4603      	mov	r3, r0
 8016cca:	22b7      	movs	r2, #183	; 0xb7
 8016ccc:	4938      	ldr	r1, [pc, #224]	; (8016db0 <_parsingPacket+0x2f8>)
 8016cce:	2004      	movs	r0, #4
 8016cd0:	f7fc fbec 	bl	80134ac <pifLog_Printf>
#endif
                    break;
 8016cd4:	e000      	b.n	8016cd8 <_parsingPacket+0x220>
            	}
    		}
 8016cd6:	bf00      	nop
        	break;
 8016cd8:	e202      	b.n	80170e0 <_parsingPacket+0x628>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	785b      	ldrb	r3, [r3, #1]
 8016cde:	3b02      	subs	r3, #2
 8016ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8016ce2:	f200 81d3 	bhi.w	801708c <_parsingPacket+0x5d4>
 8016ce6:	a201      	add	r2, pc, #4	; (adr r2, 8016cec <_parsingPacket+0x234>)
 8016ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cec:	08016db5 	.word	0x08016db5
 8016cf0:	08016edf 	.word	0x08016edf
 8016cf4:	0801708d 	.word	0x0801708d
 8016cf8:	0801708d 	.word	0x0801708d
 8016cfc:	08016e97 	.word	0x08016e97
 8016d00:	08016e4b 	.word	0x08016e4b
 8016d04:	0801708d 	.word	0x0801708d
 8016d08:	0801708d 	.word	0x0801708d
 8016d0c:	0801708d 	.word	0x0801708d
 8016d10:	0801708d 	.word	0x0801708d
 8016d14:	0801708d 	.word	0x0801708d
 8016d18:	0801708d 	.word	0x0801708d
 8016d1c:	0801708d 	.word	0x0801708d
 8016d20:	0801708d 	.word	0x0801708d
 8016d24:	0801708d 	.word	0x0801708d
 8016d28:	0801708d 	.word	0x0801708d
 8016d2c:	0801703d 	.word	0x0801703d
 8016d30:	0801708d 	.word	0x0801708d
 8016d34:	0801708d 	.word	0x0801708d
 8016d38:	0801708d 	.word	0x0801708d
 8016d3c:	0801708d 	.word	0x0801708d
 8016d40:	0801708d 	.word	0x0801708d
 8016d44:	0801708d 	.word	0x0801708d
 8016d48:	0801708d 	.word	0x0801708d
 8016d4c:	0801708d 	.word	0x0801708d
 8016d50:	0801708d 	.word	0x0801708d
 8016d54:	0801708d 	.word	0x0801708d
 8016d58:	0801708d 	.word	0x0801708d
 8016d5c:	0801708d 	.word	0x0801708d
 8016d60:	0801708d 	.word	0x0801708d
 8016d64:	0801708d 	.word	0x0801708d
 8016d68:	08016fe5 	.word	0x08016fe5
 8016d6c:	0801708d 	.word	0x0801708d
 8016d70:	0801708d 	.word	0x0801708d
 8016d74:	0801708d 	.word	0x0801708d
 8016d78:	0801708d 	.word	0x0801708d
 8016d7c:	0801708d 	.word	0x0801708d
 8016d80:	0801708d 	.word	0x0801708d
 8016d84:	0801708d 	.word	0x0801708d
 8016d88:	0801708d 	.word	0x0801708d
 8016d8c:	0801708d 	.word	0x0801708d
 8016d90:	0801708d 	.word	0x0801708d
 8016d94:	0801708d 	.word	0x0801708d
 8016d98:	0801708d 	.word	0x0801708d
 8016d9c:	0801708d 	.word	0x0801708d
 8016da0:	0801708d 	.word	0x0801708d
 8016da4:	08016f1d 	.word	0x08016f1d
 8016da8:	2000013c 	.word	0x2000013c
 8016dac:	2000012c 	.word	0x2000012c
 8016db0:	08027c7c 	.word	0x08027c7c
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7e9 fb67 	bl	800048c <__aeabi_i2d>
 8016dbe:	a3b1      	add	r3, pc, #708	; (adr r3, 8017084 <_parsingPacket+0x5cc>)
 8016dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc4:	f7e9 fcf6 	bl	80007b4 <__aeabi_ddiv>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	460b      	mov	r3, r1
 8016dcc:	68f9      	ldr	r1, [r7, #12]
 8016dce:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7e9 fb58 	bl	800048c <__aeabi_i2d>
 8016ddc:	a3a9      	add	r3, pc, #676	; (adr r3, 8017084 <_parsingPacket+0x5cc>)
 8016dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de2:	f7e9 fce7 	bl	80007b4 <__aeabi_ddiv>
 8016de6:	4602      	mov	r2, r0
 8016de8:	460b      	mov	r3, r1
 8016dea:	68f9      	ldr	r1, [r7, #12]
 8016dec:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	695b      	ldr	r3, [r3, #20]
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7e9 fb49 	bl	800048c <__aeabi_i2d>
 8016dfa:	f04f 0200 	mov.w	r2, #0
 8016dfe:	4b9e      	ldr	r3, [pc, #632]	; (8017078 <_parsingPacket+0x5c0>)
 8016e00:	f7e9 fcd8 	bl	80007b4 <__aeabi_ddiv>
 8016e04:	4602      	mov	r2, r0
 8016e06:	460b      	mov	r3, r1
 8016e08:	68f9      	ldr	r1, [r7, #12]
 8016e0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	699a      	ldr	r2, [r3, #24]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	69da      	ldr	r2, [r3, #28]
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = p_owner->__next_fix;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8016e24:	f003 0301 	and.w	r3, r3, #1
 8016e28:	b2d9      	uxtb	r1, r3
 8016e2a:	68fa      	ldr	r2, [r7, #12]
 8016e2c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016e30:	f361 0300 	bfi	r3, r1, #0, #1
 8016e34:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 8016e40:	4b8e      	ldr	r3, [pc, #568]	; (801707c <_parsingPacket+0x5c4>)
 8016e42:	681a      	ldr	r2, [r3, #0]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 8016e48:	e138      	b.n	80170bc <_parsingPacket+0x604>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	891b      	ldrh	r3, [r3, #8]
 8016e4e:	b2db      	uxtb	r3, r3
 8016e50:	3344      	adds	r3, #68	; 0x44
 8016e52:	b2da      	uxtb	r2, r3
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	7a9a      	ldrb	r2, [r3, #10]
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	7ada      	ldrb	r2, [r3, #11]
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	7b1a      	ldrb	r2, [r3, #12]
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 8016e70:	693b      	ldr	r3, [r7, #16]
 8016e72:	7b5a      	ldrb	r2, [r3, #13]
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	7b9a      	ldrb	r2, [r3, #14]
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	695b      	ldr	r3, [r3, #20]
 8016e84:	461a      	mov	r2, r3
 8016e86:	4b7e      	ldr	r3, [pc, #504]	; (8017080 <_parsingPacket+0x5c8>)
 8016e88:	fba3 2302 	umull	r2, r3, r3, r2
 8016e8c:	0c9b      	lsrs	r3, r3, #18
 8016e8e:	b29a      	uxth	r2, r3
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	829a      	strh	r2, [r3, #20]
                    break;
 8016e94:	e112      	b.n	80170bc <_parsingPacket+0x604>

                case GUMI_NAV_SOL:
                	p_owner->__next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	7bdb      	ldrb	r3, [r3, #15]
 8016e9a:	f003 0301 	and.w	r3, r3, #1
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d005      	beq.n	8016eae <_parsingPacket+0x3f6>
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	7b9b      	ldrb	r3, [r3, #14]
 8016ea6:	2b03      	cmp	r3, #3
 8016ea8:	d101      	bne.n	8016eae <_parsingPacket+0x3f6>
 8016eaa:	2301      	movs	r3, #1
 8016eac:	e000      	b.n	8016eb0 <_parsingPacket+0x3f8>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	b2da      	uxtb	r2, r3
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f883 22ed 	strb.w	r2, [r3, #749]	; 0x2ed
                    if (!p_owner->__next_fix)
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d106      	bne.n	8016ed0 <_parsingPacket+0x418>
                    	p_parent->_fix = FALSE;
 8016ec2:	68fa      	ldr	r2, [r7, #12]
 8016ec4:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016ec8:	f36f 0300 	bfc	r3, #0, #1
 8016ecc:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016edc:	e0ee      	b.n	80170bc <_parsingPacket+0x604>

                case GUMI_NAV_STATUS:
                	p_owner->__next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	7a5b      	ldrb	r3, [r3, #9]
 8016ee2:	f003 0301 	and.w	r3, r3, #1
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d005      	beq.n	8016ef6 <_parsingPacket+0x43e>
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	7a1b      	ldrb	r3, [r3, #8]
 8016eee:	2b03      	cmp	r3, #3
 8016ef0:	d101      	bne.n	8016ef6 <_parsingPacket+0x43e>
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	e000      	b.n	8016ef8 <_parsingPacket+0x440>
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	b2da      	uxtb	r2, r3
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f883 22ed 	strb.w	r2, [r3, #749]	; 0x2ed
                    if (!p_owner->__next_fix)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	f040 80d5 	bne.w	80170b6 <_parsingPacket+0x5fe>
                    	p_parent->_fix = FALSE;
 8016f0c:	68fa      	ldr	r2, [r7, #12]
 8016f0e:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016f12:	f36f 0300 	bfc	r3, #0, #1
 8016f16:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016f1a:	e0cc      	b.n	80170b6 <_parsingPacket+0x5fe>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	7a1a      	ldrb	r2, [r3, #8]
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
                    if (p_owner->_num_ch > 16)
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8016f2c:	2b10      	cmp	r3, #16
 8016f2e:	d903      	bls.n	8016f38 <_parsingPacket+0x480>
                    	p_owner->_num_ch = 16;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2210      	movs	r2, #16
 8016f34:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016f38:	2300      	movs	r3, #0
 8016f3a:	61fb      	str	r3, [r7, #28]
 8016f3c:	e03f      	b.n	8016fbe <_parsingPacket+0x506>
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016f3e:	6939      	ldr	r1, [r7, #16]
 8016f40:	69fa      	ldr	r2, [r7, #28]
 8016f42:	4613      	mov	r3, r2
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	4413      	add	r3, r2
 8016f48:	009b      	lsls	r3, r3, #2
 8016f4a:	440b      	add	r3, r1
 8016f4c:	330c      	adds	r3, #12
 8016f4e:	7819      	ldrb	r1, [r3, #0]
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	4413      	add	r3, r2
 8016f56:	33de      	adds	r3, #222	; 0xde
 8016f58:	460a      	mov	r2, r1
 8016f5a:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016f5c:	6939      	ldr	r1, [r7, #16]
 8016f5e:	69fa      	ldr	r2, [r7, #28]
 8016f60:	4613      	mov	r3, r2
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	4413      	add	r3, r2
 8016f66:	009b      	lsls	r3, r3, #2
 8016f68:	440b      	add	r3, r1
 8016f6a:	330d      	adds	r3, #13
 8016f6c:	7819      	ldrb	r1, [r3, #0]
 8016f6e:	687a      	ldr	r2, [r7, #4]
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	4413      	add	r3, r2
 8016f74:	33ee      	adds	r3, #238	; 0xee
 8016f76:	460a      	mov	r2, r1
 8016f78:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016f7a:	6939      	ldr	r1, [r7, #16]
 8016f7c:	69fa      	ldr	r2, [r7, #28]
 8016f7e:	4613      	mov	r3, r2
 8016f80:	005b      	lsls	r3, r3, #1
 8016f82:	4413      	add	r3, r2
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	440b      	add	r3, r1
 8016f88:	330f      	adds	r3, #15
 8016f8a:	7819      	ldrb	r1, [r3, #0]
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	69fb      	ldr	r3, [r7, #28]
 8016f90:	4413      	add	r3, r2
 8016f92:	33fe      	adds	r3, #254	; 0xfe
 8016f94:	460a      	mov	r2, r1
 8016f96:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016f98:	6939      	ldr	r1, [r7, #16]
 8016f9a:	69fa      	ldr	r2, [r7, #28]
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	005b      	lsls	r3, r3, #1
 8016fa0:	4413      	add	r3, r2
 8016fa2:	009b      	lsls	r3, r3, #2
 8016fa4:	440b      	add	r3, r1
 8016fa6:	3310      	adds	r3, #16
 8016fa8:	7819      	ldrb	r1, [r3, #0]
 8016faa:	687a      	ldr	r2, [r7, #4]
 8016fac:	69fb      	ldr	r3, [r7, #28]
 8016fae:	4413      	add	r3, r2
 8016fb0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8016fb4:	460a      	mov	r2, r1
 8016fb6:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	3301      	adds	r3, #1
 8016fbc:	61fb      	str	r3, [r7, #28]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	69fb      	ldr	r3, [r7, #28]
 8016fc8:	4293      	cmp	r3, r2
 8016fca:	dbb8      	blt.n	8016f3e <_parsingPacket+0x486>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016fd8:	4b28      	ldr	r3, [pc, #160]	; (801707c <_parsingPacket+0x5c4>)
 8016fda:	681a      	ldr	r2, [r3, #0]
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
                    break;
 8016fe2:	e06b      	b.n	80170bc <_parsingPacket+0x604>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	7ddb      	ldrb	r3, [r3, #23]
 8016fe8:	f003 0304 	and.w	r3, r3, #4
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d064      	beq.n	80170ba <_parsingPacket+0x602>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	8a1b      	ldrh	r3, [r3, #16]
 8016ff4:	b2db      	uxtb	r3, r3
 8016ff6:	3330      	adds	r3, #48	; 0x30
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016ffe:	693b      	ldr	r3, [r7, #16]
 8017000:	7c9a      	ldrb	r2, [r3, #18]
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	7cda      	ldrb	r2, [r3, #19]
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 801700e:	693b      	ldr	r3, [r7, #16]
 8017010:	7d1a      	ldrb	r2, [r3, #20]
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	7d5a      	ldrb	r2, [r3, #21]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 801701e:	693b      	ldr	r3, [r7, #16]
 8017020:	7d9a      	ldrb	r2, [r3, #22]
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8017026:	693b      	ldr	r3, [r7, #16]
 8017028:	68db      	ldr	r3, [r3, #12]
 801702a:	461a      	mov	r2, r3
 801702c:	4b14      	ldr	r3, [pc, #80]	; (8017080 <_parsingPacket+0x5c8>)
 801702e:	fba3 2302 	umull	r2, r3, r3, r2
 8017032:	0c9b      	lsrs	r3, r3, #18
 8017034:	b29a      	uxth	r2, r3
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 801703a:	e03e      	b.n	80170ba <_parsingPacket+0x602>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	695b      	ldr	r3, [r3, #20]
 8017040:	4618      	mov	r0, r3
 8017042:	f7e9 fa13 	bl	800046c <__aeabi_ui2d>
 8017046:	4602      	mov	r2, r0
 8017048:	460b      	mov	r3, r1
 801704a:	68f9      	ldr	r1, [r7, #12]
 801704c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	69db      	ldr	r3, [r3, #28]
 8017054:	4618      	mov	r0, r3
 8017056:	f7e9 fa19 	bl	800048c <__aeabi_i2d>
 801705a:	a305      	add	r3, pc, #20	; (adr r3, 8017070 <_parsingPacket+0x5b8>)
 801705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017060:	f7e9 fba8 	bl	80007b4 <__aeabi_ddiv>
 8017064:	4602      	mov	r2, r0
 8017066:	460b      	mov	r3, r1
 8017068:	68f9      	ldr	r1, [r7, #12]
 801706a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    break;
 801706e:	e025      	b.n	80170bc <_parsingPacket+0x604>
 8017070:	00000000 	.word	0x00000000
 8017074:	40f86a00 	.word	0x40f86a00
 8017078:	408f4000 	.word	0x408f4000
 801707c:	20001c6c 	.word	0x20001c6c
 8017080:	431bde83 	.word	0x431bde83
 8017084:	00000000 	.word	0x00000000
 8017088:	416312d0 	.word	0x416312d0

                default:
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	8a9b      	ldrh	r3, [r3, #20]
 8017090:	4618      	mov	r0, r3
 8017092:	4b42      	ldr	r3, [pc, #264]	; (801719c <_parsingPacket+0x6e4>)
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	693a      	ldr	r2, [r7, #16]
 8017098:	7812      	ldrb	r2, [r2, #0]
 801709a:	4611      	mov	r1, r2
 801709c:	693a      	ldr	r2, [r7, #16]
 801709e:	7852      	ldrb	r2, [r2, #1]
 80170a0:	9202      	str	r2, [sp, #8]
 80170a2:	9101      	str	r1, [sp, #4]
 80170a4:	9300      	str	r3, [sp, #0]
 80170a6:	4603      	mov	r3, r0
 80170a8:	f240 1205 	movw	r2, #261	; 0x105
 80170ac:	493c      	ldr	r1, [pc, #240]	; (80171a0 <_parsingPacket+0x6e8>)
 80170ae:	2004      	movs	r0, #4
 80170b0:	f7fc f9fc 	bl	80134ac <pifLog_Printf>
#endif
                    break;
 80170b4:	e002      	b.n	80170bc <_parsingPacket+0x604>
                    break;
 80170b6:	bf00      	nop
 80170b8:	e012      	b.n	80170e0 <_parsingPacket+0x628>
                	break;
 80170ba:	bf00      	nop
            }
        	break;
 80170bc:	e010      	b.n	80170e0 <_parsingPacket+0x628>

		default:
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	8a9b      	ldrh	r3, [r3, #20]
 80170c2:	4619      	mov	r1, r3
 80170c4:	4b35      	ldr	r3, [pc, #212]	; (801719c <_parsingPacket+0x6e4>)
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	693a      	ldr	r2, [r7, #16]
 80170ca:	7812      	ldrb	r2, [r2, #0]
 80170cc:	9201      	str	r2, [sp, #4]
 80170ce:	9300      	str	r3, [sp, #0]
 80170d0:	460b      	mov	r3, r1
 80170d2:	f240 120d 	movw	r2, #269	; 0x10d
 80170d6:	4933      	ldr	r1, [pc, #204]	; (80171a4 <_parsingPacket+0x6ec>)
 80170d8:	2004      	movs	r0, #4
 80170da:	f7fc f9e7 	bl	80134ac <pifLog_Printf>
#endif
			break;
 80170de:	bf00      	nop
        }

		if (p_owner->evt_ubx_receive) {
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d00c      	beq.n	8017102 <_parsingPacket+0x64a>
			if ((*p_owner->evt_ubx_receive)(p_owner, p_packet)) pifGps_SendEvent(&p_owner->_gps);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	6939      	ldr	r1, [r7, #16]
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	4798      	blx	r3
 80170f2:	4603      	mov	r3, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d004      	beq.n	8017102 <_parsingPacket+0x64a>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	3308      	adds	r3, #8
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7fe fe43 	bl	8015d88 <pifGps_SendEvent>
		}

    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2200      	movs	r2, #0
 8017106:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    }
	return;
 801710a:	e042      	b.n	8017192 <_parsingPacket+0x6da>

fail:
#ifndef __PIF_NO_LOG__
	if (pkt_err != pre_err) {
 801710c:	4b26      	ldr	r3, [pc, #152]	; (80171a8 <_parsingPacket+0x6f0>)
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	7efa      	ldrb	r2, [r7, #27]
 8017112:	429a      	cmp	r2, r3
 8017114:	d038      	beq.n	8017188 <_parsingPacket+0x6d0>
		if (p_owner->__rx.state) {
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 801711c:	2b00      	cmp	r3, #0
 801711e:	d020      	beq.n	8017162 <_parsingPacket+0x6aa>
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	8a9b      	ldrh	r3, [r3, #20]
 8017124:	461e      	mov	r6, r3
 8017126:	7efb      	ldrb	r3, [r7, #27]
 8017128:	4a1c      	ldr	r2, [pc, #112]	; (801719c <_parsingPacket+0x6e4>)
 801712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801712e:	78fa      	ldrb	r2, [r7, #3]
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8017130:	6879      	ldr	r1, [r7, #4]
 8017132:	f891 1134 	ldrb.w	r1, [r1, #308]	; 0x134
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8017136:	4608      	mov	r0, r1
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8017138:	6939      	ldr	r1, [r7, #16]
 801713a:	7809      	ldrb	r1, [r1, #0]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 801713c:	460c      	mov	r4, r1
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 801713e:	6939      	ldr	r1, [r7, #16]
 8017140:	7849      	ldrb	r1, [r1, #1]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8017142:	460d      	mov	r5, r1
					p_owner->__rx.state, p_packet->class_id, p_packet->msg_id, p_packet->length);
 8017144:	6939      	ldr	r1, [r7, #16]
 8017146:	8849      	ldrh	r1, [r1, #2]
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh RS:%u CID:%u MID:%u Len:%u", line, p_owner->_gps._id, kPktErr[pkt_err], data,
 8017148:	9105      	str	r1, [sp, #20]
 801714a:	9504      	str	r5, [sp, #16]
 801714c:	9403      	str	r4, [sp, #12]
 801714e:	9002      	str	r0, [sp, #8]
 8017150:	9201      	str	r2, [sp, #4]
 8017152:	9300      	str	r3, [sp, #0]
 8017154:	4633      	mov	r3, r6
 8017156:	697a      	ldr	r2, [r7, #20]
 8017158:	4914      	ldr	r1, [pc, #80]	; (80171ac <_parsingPacket+0x6f4>)
 801715a:	2004      	movs	r0, #4
 801715c:	f7fc f9a6 	bl	80134ac <pifLog_Printf>
 8017160:	e00f      	b.n	8017182 <_parsingPacket+0x6ca>
		}
		else {
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s D:%xh", line, p_owner->_gps._id, kPktErr[pkt_err], data);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	8a9b      	ldrh	r3, [r3, #20]
 8017166:	4619      	mov	r1, r3
 8017168:	7efb      	ldrb	r3, [r7, #27]
 801716a:	4a0c      	ldr	r2, [pc, #48]	; (801719c <_parsingPacket+0x6e4>)
 801716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017170:	78fa      	ldrb	r2, [r7, #3]
 8017172:	9201      	str	r2, [sp, #4]
 8017174:	9300      	str	r3, [sp, #0]
 8017176:	460b      	mov	r3, r1
 8017178:	697a      	ldr	r2, [r7, #20]
 801717a:	490d      	ldr	r1, [pc, #52]	; (80171b0 <_parsingPacket+0x6f8>)
 801717c:	2004      	movs	r0, #4
 801717e:	f7fc f995 	bl	80134ac <pifLog_Printf>
		}
		pre_err = pkt_err;
 8017182:	4a09      	ldr	r2, [pc, #36]	; (80171a8 <_parsingPacket+0x6f0>)
 8017184:	7efb      	ldrb	r3, [r7, #27]
 8017186:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2200      	movs	r2, #0
 801718c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 8017190:	e000      	b.n	8017194 <_parsingPacket+0x6dc>
	return;
 8017192:	bf00      	nop
}
 8017194:	3724      	adds	r7, #36	; 0x24
 8017196:	46bd      	mov	sp, r7
 8017198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801719a:	bf00      	nop
 801719c:	2000012c 	.word	0x2000012c
 80171a0:	08027c7c 	.word	0x08027c7c
 80171a4:	08027c98 	.word	0x08027c98
 80171a8:	2000013c 	.word	0x2000013c
 80171ac:	08027cac 	.word	0x08027cac
 80171b0:	08027cdc 	.word	0x08027cdc

080171b4 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b084      	sub	sp, #16
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	60fb      	str	r3, [r7, #12]
    uint8_t data;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80171c2:	e004      	b.n	80171ce <_evtParsing+0x1a>
		_parsingPacket(p_owner, data);
 80171c4:	7afb      	ldrb	r3, [r7, #11]
 80171c6:	4619      	mov	r1, r3
 80171c8:	68f8      	ldr	r0, [r7, #12]
 80171ca:	f7ff fc75 	bl	8016ab8 <_parsingPacket>
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80171d4:	f107 010b 	add.w	r1, r7, #11
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	4610      	mov	r0, r2
 80171dc:	4798      	blx	r3
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d1ef      	bne.n	80171c4 <_evtParsing+0x10>
	}
}
 80171e4:	bf00      	nop
 80171e6:	bf00      	nop
 80171e8:	3710      	adds	r7, #16
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <_checkAbortSerial>:
	p_owner->__length = 0;
	return 0;
}

static BOOL _checkAbortSerial(PifIssuerP p_issuer)
{
 80171ee:	b580      	push	{r7, lr}
 80171f0:	b084      	sub	sp, #16
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	6078      	str	r0, [r7, #4]
	PifGpsUblox* p_owner = (PifGpsUblox*)p_issuer;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	60fb      	str	r3, [r7, #12]

	return pifRingBuffer_IsEmpty(&p_owner->__tx.buffer);
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017200:	4618      	mov	r0, r3
 8017202:	f7fc fbc0 	bl	8013986 <pifRingBuffer_IsEmpty>
 8017206:	4603      	mov	r3, r0
}
 8017208:	4618      	mov	r0, r3
 801720a:	3710      	adds	r7, #16
 801720c:	46bd      	mov	sp, r7
 801720e:	bd80      	pop	{r7, pc}

08017210 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, uint16_t waiting)
{
 8017210:	b590      	push	{r4, r7, lr}
 8017212:	b08b      	sub	sp, #44	; 0x2c
 8017214:	af02      	add	r7, sp, #8
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	4613      	mov	r3, r2
 801721c:	80fb      	strh	r3, [r7, #6]
	uint32_t header;
	uint8_t parity = 0;
 801721e:	2300      	movs	r3, #0
 8017220:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8017222:	2301      	movs	r3, #1
 8017224:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8017226:	69bb      	ldr	r3, [r7, #24]
 8017228:	68ba      	ldr	r2, [r7, #8]
 801722a:	4413      	add	r3, r2
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	2b2a      	cmp	r3, #42	; 0x2a
 8017230:	d145      	bne.n	80172be <_makeNmeaPacket+0xae>
			i++;
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	3301      	adds	r3, #1
 8017236:	61bb      	str	r3, [r7, #24]
			break;
 8017238:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 801723a:	4b5e      	ldr	r3, [pc, #376]	; (80173b4 <_makeNmeaPacket+0x1a4>)
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	7ffb      	ldrb	r3, [r7, #31]
 8017240:	091b      	lsrs	r3, r3, #4
 8017242:	b2db      	uxtb	r3, r3
 8017244:	f003 030f 	and.w	r3, r3, #15
 8017248:	441a      	add	r2, r3
 801724a:	69bb      	ldr	r3, [r7, #24]
 801724c:	68b9      	ldr	r1, [r7, #8]
 801724e:	440b      	add	r3, r1
 8017250:	7812      	ldrb	r2, [r2, #0]
 8017252:	701a      	strb	r2, [r3, #0]
 8017254:	69bb      	ldr	r3, [r7, #24]
 8017256:	3301      	adds	r3, #1
 8017258:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 801725a:	4b56      	ldr	r3, [pc, #344]	; (80173b4 <_makeNmeaPacket+0x1a4>)
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	7ffb      	ldrb	r3, [r7, #31]
 8017260:	f003 030f 	and.w	r3, r3, #15
 8017264:	441a      	add	r2, r3
 8017266:	69bb      	ldr	r3, [r7, #24]
 8017268:	68b9      	ldr	r1, [r7, #8]
 801726a:	440b      	add	r3, r1
 801726c:	7812      	ldrb	r2, [r2, #0]
 801726e:	701a      	strb	r2, [r3, #0]
 8017270:	69bb      	ldr	r3, [r7, #24]
 8017272:	3301      	adds	r3, #1
 8017274:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8017276:	69bb      	ldr	r3, [r7, #24]
 8017278:	68ba      	ldr	r2, [r7, #8]
 801727a:	4413      	add	r3, r2
 801727c:	220d      	movs	r2, #13
 801727e:	701a      	strb	r2, [r3, #0]
 8017280:	69bb      	ldr	r3, [r7, #24]
 8017282:	3301      	adds	r3, #1
 8017284:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8017286:	69bb      	ldr	r3, [r7, #24]
 8017288:	68ba      	ldr	r2, [r7, #8]
 801728a:	4413      	add	r3, r2
 801728c:	220a      	movs	r2, #10
 801728e:	701a      	strb	r2, [r3, #0]
 8017290:	69bb      	ldr	r3, [r7, #24]
 8017292:	3301      	adds	r3, #1
 8017294:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8017296:	69bb      	ldr	r3, [r7, #24]
 8017298:	68ba      	ldr	r2, [r7, #8]
 801729a:	4413      	add	r3, r2
 801729c:	2200      	movs	r2, #0
 801729e:	701a      	strb	r2, [r3, #0]

	if (!pifRingBuffer_MoveHeadForLinear(&p_owner->__tx.buffer, 4 + i)) goto fail;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 80172a6:	69bb      	ldr	r3, [r7, #24]
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	3304      	adds	r3, #4
 80172ac:	b29b      	uxth	r3, r3
 80172ae:	4619      	mov	r1, r3
 80172b0:	4610      	mov	r0, r2
 80172b2:	f7fc fb2b 	bl	801390c <pifRingBuffer_MoveHeadForLinear>
 80172b6:	4603      	mov	r3, r0
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d10b      	bne.n	80172d4 <_makeNmeaPacket+0xc4>
 80172bc:	e06f      	b.n	801739e <_makeNmeaPacket+0x18e>
			parity ^= p_data[i];
 80172be:	69bb      	ldr	r3, [r7, #24]
 80172c0:	68ba      	ldr	r2, [r7, #8]
 80172c2:	4413      	add	r3, r2
 80172c4:	781a      	ldrb	r2, [r3, #0]
 80172c6:	7ffb      	ldrb	r3, [r7, #31]
 80172c8:	4053      	eors	r3, r2
 80172ca:	77fb      	strb	r3, [r7, #31]
			i++;
 80172cc:	69bb      	ldr	r3, [r7, #24]
 80172ce:	3301      	adds	r3, #1
 80172d0:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 80172d2:	e7a8      	b.n	8017226 <_makeNmeaPacket+0x16>

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80172da:	4618      	mov	r0, r3
 80172dc:	f7fc fbd5 	bl	8013a8a <pifRingBuffer_BeginPutting>

	header = i;
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	617b      	str	r3, [r7, #20]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t*)&header, 4)) goto fail;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80172ea:	f107 0114 	add.w	r1, r7, #20
 80172ee:	2204      	movs	r2, #4
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7fc fc51 	bl	8013b98 <pifRingBuffer_PutData>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d04b      	beq.n	8017394 <_makeNmeaPacket+0x184>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t*)p_data, header)) goto fail;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017302:	697a      	ldr	r2, [r7, #20]
 8017304:	b292      	uxth	r2, r2
 8017306:	68b9      	ldr	r1, [r7, #8]
 8017308:	4618      	mov	r0, r3
 801730a:	f7fc fc45 	bl	8013b98 <pifRingBuffer_PutData>
 801730e:	4603      	mov	r3, r0
 8017310:	2b00      	cmp	r3, #0
 8017312:	d041      	beq.n	8017398 <_makeNmeaPacket+0x188>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801731a:	4618      	mov	r0, r3
 801731c:	f7fc fbcd 	bl	8013aba <pifRingBuffer_CommitPutting>

	if (p_owner->__p_comm) {
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8017326:	2b00      	cmp	r3, #0
 8017328:	d00d      	beq.n	8017346 <_makeNmeaPacket+0x136>
		pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8017330:	6a1b      	ldr	r3, [r3, #32]
 8017332:	4618      	mov	r0, r3
 8017334:	f7fd f97e 	bl	8014634 <pifTask_SetTrigger>

		pifTaskManager_YieldAbortMs(waiting, _checkAbortSerial, p_owner);
 8017338:	88fb      	ldrh	r3, [r7, #6]
 801733a:	68fa      	ldr	r2, [r7, #12]
 801733c:	491e      	ldr	r1, [pc, #120]	; (80173b8 <_makeNmeaPacket+0x1a8>)
 801733e:	4618      	mov	r0, r3
 8017340:	f7fd fd52 	bl	8014de8 <pifTaskManager_YieldAbortMs>
 8017344:	e020      	b.n	8017388 <_makeNmeaPacket+0x178>
	}
	else {
		if (!pifI2cDevice_Write(p_owner->__p_i2c_device, 0, 0, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, 4), i)) goto fail;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017352:	2104      	movs	r1, #4
 8017354:	4618      	mov	r0, r3
 8017356:	f7fc fabe 	bl	80138d6 <pifRingBuffer_GetTailPointer>
 801735a:	4602      	mov	r2, r0
 801735c:	69bb      	ldr	r3, [r7, #24]
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	4613      	mov	r3, r2
 8017362:	2200      	movs	r2, #0
 8017364:	2100      	movs	r1, #0
 8017366:	4620      	mov	r0, r4
 8017368:	f7fb f834 	bl	80123d4 <pifI2cDevice_Write>
 801736c:	4603      	mov	r3, r0
 801736e:	2b00      	cmp	r3, #0
 8017370:	d014      	beq.n	801739c <_makeNmeaPacket+0x18c>
		pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + i);
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8017378:	69bb      	ldr	r3, [r7, #24]
 801737a:	b29b      	uxth	r3, r3
 801737c:	3304      	adds	r3, #4
 801737e:	b29b      	uxth	r3, r3
 8017380:	4619      	mov	r1, r3
 8017382:	4610      	mov	r0, r2
 8017384:	f7fc fd11 	bl	8013daa <pifRingBuffer_Remove>
	}
	p_owner->_request_state = GURS_TIMEOUT;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	2204      	movs	r2, #4
 801738c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	return TRUE;
 8017390:	2301      	movs	r3, #1
 8017392:	e00b      	b.n	80173ac <_makeNmeaPacket+0x19c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t*)&header, 4)) goto fail;
 8017394:	bf00      	nop
 8017396:	e002      	b.n	801739e <_makeNmeaPacket+0x18e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t*)p_data, header)) goto fail;
 8017398:	bf00      	nop
 801739a:	e000      	b.n	801739e <_makeNmeaPacket+0x18e>
		if (!pifI2cDevice_Write(p_owner->__p_i2c_device, 0, 0, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, 4), i)) goto fail;
 801739c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7fc fb96 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	return FALSE;
 80173aa:	2300      	movs	r3, #0
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3724      	adds	r7, #36	; 0x24
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd90      	pop	{r4, r7, pc}
 80173b4:	20000120 	.word	0x20000120
 80173b8:	080171ef 	.word	0x080171ef

080173bc <_checkAbortSerialResponse>:

static BOOL _checkAbortSerialResponse(PifIssuerP p_issuer)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b084      	sub	sp, #16
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
	PifGpsUblox* p_owner = (PifGpsUblox*)p_issuer;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	60fb      	str	r3, [r7, #12]

	if (pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fc fad9 	bl	8013986 <pifRingBuffer_IsEmpty>
 80173d4:	4603      	mov	r3, r0
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d008      	beq.n	80173ec <_checkAbortSerialResponse+0x30>
		switch (p_owner->_request_state) {
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80173e0:	b2db      	uxtb	r3, r3
 80173e2:	3b02      	subs	r3, #2
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d803      	bhi.n	80173f0 <_checkAbortSerialResponse+0x34>
		case GURS_ACK:
		case GURS_NAK:
			return TRUE;
 80173e8:	2301      	movs	r3, #1
 80173ea:	e003      	b.n	80173f4 <_checkAbortSerialResponse+0x38>

		default:
			break;
		}
	}
 80173ec:	bf00      	nop
 80173ee:	e000      	b.n	80173f2 <_checkAbortSerialResponse+0x36>
			break;
 80173f0:	bf00      	nop
	return FALSE;
 80173f2:	2300      	movs	r3, #0
}
 80173f4:	4618      	mov	r0, r3
 80173f6:	3710      	adds	r7, #16
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bd80      	pop	{r7, pc}

080173fc <_checkAbortI2cResponse>:

static BOOL _checkAbortI2cResponse(PifIssuerP p_issuer)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b085      	sub	sp, #20
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
	PifGpsUblox* p_owner = (PifGpsUblox*)p_issuer;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	60fb      	str	r3, [r7, #12]

	switch (p_owner->_request_state) {
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 801740e:	b2db      	uxtb	r3, r3
 8017410:	3b02      	subs	r3, #2
 8017412:	2b01      	cmp	r3, #1
 8017414:	d801      	bhi.n	801741a <_checkAbortI2cResponse+0x1e>
	case GURS_ACK:
	case GURS_NAK:
		return TRUE;
 8017416:	2301      	movs	r3, #1
 8017418:	e001      	b.n	801741e <_checkAbortI2cResponse+0x22>

	default:
		break;
 801741a:	bf00      	nop
	}
	return FALSE;
 801741c:	2300      	movs	r3, #0
}
 801741e:	4618      	mov	r0, r3
 8017420:	3714      	adds	r7, #20
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
	...

0801742c <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, uint16_t waiting)
{
 801742c:	b590      	push	{r4, r7, lr}
 801742e:	b08b      	sub	sp, #44	; 0x2c
 8017430:	af02      	add	r7, sp, #8
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	603b      	str	r3, [r7, #0]
 8017438:	4613      	mov	r3, r2
 801743a:	80fb      	strh	r3, [r7, #6]
	uint32_t info;
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	3302      	adds	r3, #2
 8017440:	88fa      	ldrh	r2, [r7, #6]
 8017442:	6839      	ldr	r1, [r7, #0]
 8017444:	4618      	mov	r0, r3
 8017446:	f7ff faf5 	bl	8016a34 <_checksumUbx>
 801744a:	4603      	mov	r3, r0
 801744c:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 801744e:	8bfb      	ldrh	r3, [r7, #30]
 8017450:	b2db      	uxtb	r3, r3
 8017452:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8017454:	8bfb      	ldrh	r3, [r7, #30]
 8017456:	0a1b      	lsrs	r3, r3, #8
 8017458:	b29b      	uxth	r3, r3
 801745a:	b2db      	uxtb	r3, r3
 801745c:	757b      	strb	r3, [r7, #21]

	if (!pifRingBuffer_MoveHeadForLinear(&p_owner->__tx.buffer, 12 + length)) goto fail;
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8017464:	88fb      	ldrh	r3, [r7, #6]
 8017466:	330c      	adds	r3, #12
 8017468:	b29b      	uxth	r3, r3
 801746a:	4619      	mov	r1, r3
 801746c:	4610      	mov	r0, r2
 801746e:	f7fc fa4d 	bl	801390c <pifRingBuffer_MoveHeadForLinear>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	f000 80b4 	beq.w	80175e2 <_makeUbxPacket+0x1b6>

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017480:	4618      	mov	r0, r3
 8017482:	f7fc fb02 	bl	8013a8a <pifRingBuffer_BeginPutting>

	info = length + 8;
 8017486:	88fb      	ldrh	r3, [r7, #6]
 8017488:	3308      	adds	r3, #8
 801748a:	61bb      	str	r3, [r7, #24]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t*)&info, 4)) goto fail;
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017492:	f107 0118 	add.w	r1, r7, #24
 8017496:	2204      	movs	r2, #4
 8017498:	4618      	mov	r0, r3
 801749a:	f7fc fb7d 	bl	8013b98 <pifRingBuffer_PutData>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	f000 80a0 	beq.w	80175e6 <_makeUbxPacket+0x1ba>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80174ac:	2206      	movs	r2, #6
 80174ae:	68b9      	ldr	r1, [r7, #8]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7fc fb71 	bl	8013b98 <pifRingBuffer_PutData>
 80174b6:	4603      	mov	r3, r0
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	f000 8096 	beq.w	80175ea <_makeUbxPacket+0x1be>
	if (length > 0) {
 80174be:	88fb      	ldrh	r3, [r7, #6]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d00b      	beq.n	80174dc <_makeUbxPacket+0xb0>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80174ca:	88fa      	ldrh	r2, [r7, #6]
 80174cc:	6839      	ldr	r1, [r7, #0]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7fc fb62 	bl	8013b98 <pifRingBuffer_PutData>
 80174d4:	4603      	mov	r3, r0
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	f000 8089 	beq.w	80175ee <_makeUbxPacket+0x1c2>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80174e2:	f107 0114 	add.w	r1, r7, #20
 80174e6:	2202      	movs	r2, #2
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7fc fb55 	bl	8013b98 <pifRingBuffer_PutData>
 80174ee:	4603      	mov	r3, r0
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d07e      	beq.n	80175f2 <_makeUbxPacket+0x1c6>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7fc fadd 	bl	8013aba <pifRingBuffer_CommitPutting>

	if (p_owner->__p_comm) {
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8017506:	2b00      	cmp	r3, #0
 8017508:	d028      	beq.n	801755c <_makeUbxPacket+0x130>
		pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8017510:	6a1b      	ldr	r3, [r3, #32]
 8017512:	4618      	mov	r0, r3
 8017514:	f7fd f88e 	bl	8014634 <pifTask_SetTrigger>

		if (p_owner->_request_state == GURS_SEND) {
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 801751e:	b2db      	uxtb	r3, r3
 8017520:	2b01      	cmp	r3, #1
 8017522:	d110      	bne.n	8017546 <_makeUbxPacket+0x11a>
			pifTaskManager_YieldAbortMs(waiting, _checkAbortSerialResponse, p_owner);
 8017524:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017526:	68fa      	ldr	r2, [r7, #12]
 8017528:	493b      	ldr	r1, [pc, #236]	; (8017618 <_makeUbxPacket+0x1ec>)
 801752a:	4618      	mov	r0, r3
 801752c:	f7fd fc5c 	bl	8014de8 <pifTaskManager_YieldAbortMs>
			if (p_owner->_request_state == GURS_SEND) p_owner->_request_state = GURS_TIMEOUT;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8017536:	b2db      	uxtb	r3, r3
 8017538:	2b01      	cmp	r3, #1
 801753a:	d150      	bne.n	80175de <_makeUbxPacket+0x1b2>
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	2204      	movs	r2, #4
 8017540:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8017544:	e04b      	b.n	80175de <_makeUbxPacket+0x1b2>
		}
		else {
			pifTaskManager_YieldAbortMs(waiting, _checkAbortSerial, p_owner);
 8017546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017548:	68fa      	ldr	r2, [r7, #12]
 801754a:	4934      	ldr	r1, [pc, #208]	; (801761c <_makeUbxPacket+0x1f0>)
 801754c:	4618      	mov	r0, r3
 801754e:	f7fd fc4b 	bl	8014de8 <pifTaskManager_YieldAbortMs>
			p_owner->_request_state = GURS_TIMEOUT;
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	2204      	movs	r2, #4
 8017556:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 801755a:	e040      	b.n	80175de <_makeUbxPacket+0x1b2>
		}
	}
	else if (p_owner->__p_i2c_device) {
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8017562:	2b00      	cmp	r3, #0
 8017564:	d03b      	beq.n	80175de <_makeUbxPacket+0x1b2>
		if (!pifI2cDevice_Write(p_owner->__p_i2c_device, 0, 0, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, 4), 8 + length)) goto fail;
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017572:	2104      	movs	r1, #4
 8017574:	4618      	mov	r0, r3
 8017576:	f7fc f9ae 	bl	80138d6 <pifRingBuffer_GetTailPointer>
 801757a:	4602      	mov	r2, r0
 801757c:	88fb      	ldrh	r3, [r7, #6]
 801757e:	3308      	adds	r3, #8
 8017580:	9300      	str	r3, [sp, #0]
 8017582:	4613      	mov	r3, r2
 8017584:	2200      	movs	r2, #0
 8017586:	2100      	movs	r1, #0
 8017588:	4620      	mov	r0, r4
 801758a:	f7fa ff23 	bl	80123d4 <pifI2cDevice_Write>
 801758e:	4603      	mov	r3, r0
 8017590:	2b00      	cmp	r3, #0
 8017592:	d030      	beq.n	80175f6 <_makeUbxPacket+0x1ca>
		pifRingBuffer_Remove(&p_owner->__tx.buffer, 12 + length);
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 801759a:	88fb      	ldrh	r3, [r7, #6]
 801759c:	330c      	adds	r3, #12
 801759e:	b29b      	uxth	r3, r3
 80175a0:	4619      	mov	r1, r3
 80175a2:	4610      	mov	r0, r2
 80175a4:	f7fc fc01 	bl	8013daa <pifRingBuffer_Remove>

		if (p_owner->_request_state == GURS_SEND) {
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80175ae:	b2db      	uxtb	r3, r3
 80175b0:	2b01      	cmp	r3, #1
 80175b2:	d110      	bne.n	80175d6 <_makeUbxPacket+0x1aa>
			pifTaskManager_YieldAbortMs(waiting, _checkAbortI2cResponse, p_owner);
 80175b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80175b6:	68fa      	ldr	r2, [r7, #12]
 80175b8:	4919      	ldr	r1, [pc, #100]	; (8017620 <_makeUbxPacket+0x1f4>)
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7fd fc14 	bl	8014de8 <pifTaskManager_YieldAbortMs>
			if (p_owner->_request_state == GURS_SEND) p_owner->_request_state = GURS_TIMEOUT;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80175c6:	b2db      	uxtb	r3, r3
 80175c8:	2b01      	cmp	r3, #1
 80175ca:	d108      	bne.n	80175de <_makeUbxPacket+0x1b2>
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2204      	movs	r2, #4
 80175d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80175d4:	e003      	b.n	80175de <_makeUbxPacket+0x1b2>
		}
		else {
			p_owner->_request_state = GURS_TIMEOUT;
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	2204      	movs	r2, #4
 80175da:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		}
	}
	return TRUE;
 80175de:	2301      	movs	r3, #1
 80175e0:	e015      	b.n	801760e <_makeUbxPacket+0x1e2>
	if (!pifRingBuffer_MoveHeadForLinear(&p_owner->__tx.buffer, 12 + length)) goto fail;
 80175e2:	bf00      	nop
 80175e4:	e008      	b.n	80175f8 <_makeUbxPacket+0x1cc>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t*)&info, 4)) goto fail;
 80175e6:	bf00      	nop
 80175e8:	e006      	b.n	80175f8 <_makeUbxPacket+0x1cc>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 80175ea:	bf00      	nop
 80175ec:	e004      	b.n	80175f8 <_makeUbxPacket+0x1cc>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 80175ee:	bf00      	nop
 80175f0:	e002      	b.n	80175f8 <_makeUbxPacket+0x1cc>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 80175f2:	bf00      	nop
 80175f4:	e000      	b.n	80175f8 <_makeUbxPacket+0x1cc>
		if (!pifI2cDevice_Write(p_owner->__p_i2c_device, 0, 0, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, 4), 8 + length)) goto fail;
 80175f6:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80175fe:	4618      	mov	r0, r3
 8017600:	f7fc fa69 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	p_owner->_request_state = GURS_FAILURE;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	2205      	movs	r2, #5
 8017608:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	return FALSE;
 801760c:	2300      	movs	r3, #0
}
 801760e:	4618      	mov	r0, r3
 8017610:	3724      	adds	r7, #36	; 0x24
 8017612:	46bd      	mov	sp, r7
 8017614:	bd90      	pop	{r4, r7, pc}
 8017616:	bf00      	nop
 8017618:	080173bd 	.word	0x080173bd
 801761c:	080171ef 	.word	0x080171ef
 8017620:	080173fd 	.word	0x080173fd

08017624 <_evtSending>:

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8017624:	b5b0      	push	{r4, r5, r7, lr}
 8017626:	b084      	sub	sp, #16
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8017638:	b2db      	uxtb	r3, r3
 801763a:	2b02      	cmp	r3, #2
 801763c:	d05d      	beq.n	80176fa <_evtSending+0xd6>
 801763e:	2b02      	cmp	r3, #2
 8017640:	dc72      	bgt.n	8017728 <_evtSending+0x104>
 8017642:	2b00      	cmp	r3, #0
 8017644:	d002      	beq.n	801764c <_evtSending+0x28>
 8017646:	2b01      	cmp	r3, #1
 8017648:	d01c      	beq.n	8017684 <_evtSending+0x60>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 801764a:	e06d      	b.n	8017728 <_evtSending+0x104>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017652:	4618      	mov	r0, r3
 8017654:	f7fc f997 	bl	8013986 <pifRingBuffer_IsEmpty>
 8017658:	4603      	mov	r3, r0
 801765a:	2b00      	cmp	r3, #0
 801765c:	d166      	bne.n	801772c <_evtSending+0x108>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	f203 20e6 	addw	r0, r3, #742	; 0x2e6
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 801766a:	2300      	movs	r3, #0
 801766c:	2104      	movs	r1, #4
 801766e:	f7fc fb56 	bl	8013d1e <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	2204      	movs	r2, #4
 8017676:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
			p_owner->__tx.state = GUTS_SENDING;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	2201      	movs	r2, #1
 801767e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		break;
 8017682:	e053      	b.n	801772c <_evtSending+0x108>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
 8017696:	b29b      	uxth	r3, r3
 8017698:	4619      	mov	r1, r3
 801769a:	4610      	mov	r0, r2
 801769c:	f7fc f91b 	bl	80138d6 <pifRingBuffer_GetTailPointer>
 80176a0:	4605      	mov	r5, r0
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	4619      	mov	r1, r3
 80176b2:	4610      	mov	r0, r2
 80176b4:	f7fc f99c 	bl	80139f0 <pifRingBuffer_GetLinerSize>
 80176b8:	4603      	mov	r3, r0
 80176ba:	461a      	mov	r2, r3
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	4629      	mov	r1, r5
 80176c0:	4620      	mov	r0, r4
 80176c2:	4798      	blx	r3
 80176c4:	4603      	mov	r3, r0
 80176c6:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
 80176ce:	897b      	ldrh	r3, [r7, #10]
 80176d0:	b2db      	uxtb	r3, r3
 80176d2:	4413      	add	r3, r2
 80176d4:	b2da      	uxtb	r2, r3
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80176e2:	3303      	adds	r3, #3
 80176e4:	68fa      	ldr	r2, [r7, #12]
 80176e6:	f892 22ea 	ldrb.w	r2, [r2, #746]	; 0x2ea
 80176ea:	4293      	cmp	r3, r2
 80176ec:	da03      	bge.n	80176f6 <_evtSending+0xd2>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	2202      	movs	r2, #2
 80176f2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		return TRUE;
 80176f6:	2301      	movs	r3, #1
 80176f8:	e01c      	b.n	8017734 <_evtSending+0x110>
		if (!p_owner->__tx.ui.st.response) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
 8017700:	2b00      	cmp	r3, #0
 8017702:	d115      	bne.n	8017730 <_evtSending+0x10c>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8017710:	b29b      	uxth	r3, r3
 8017712:	3304      	adds	r3, #4
 8017714:	b29b      	uxth	r3, r3
 8017716:	4619      	mov	r1, r3
 8017718:	4610      	mov	r0, r2
 801771a:	f7fc fb46 	bl	8013daa <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	2200      	movs	r2, #0
 8017722:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		break;
 8017726:	e003      	b.n	8017730 <_evtSending+0x10c>
		break;
 8017728:	bf00      	nop
 801772a:	e002      	b.n	8017732 <_evtSending+0x10e>
		break;
 801772c:	bf00      	nop
 801772e:	e000      	b.n	8017732 <_evtSending+0x10e>
		break;
 8017730:	bf00      	nop
	}
	return FALSE;
 8017732:	2300      	movs	r3, #0
}
 8017734:	4618      	mov	r0, r3
 8017736:	3710      	adds	r7, #16
 8017738:	46bd      	mov	sp, r7
 801773a:	bdb0      	pop	{r4, r5, r7, pc}

0801773c <_evtAbortRx>:

static void _evtAbortRx(void* p_client)
{
 801773c:	b480      	push	{r7}
 801773e:	b083      	sub	sp, #12
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
	((PifGpsUblox *)p_client)->__rx.state = GURS_SYNC_CHAR_1;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2200      	movs	r2, #0
 8017748:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 801774c:	bf00      	nop
 801774e:	370c      	adds	r7, #12
 8017750:	46bd      	mov	sp, r7
 8017752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017756:	4770      	bx	lr

08017758 <_checkAbortBlocking>:

static BOOL _checkAbortBlocking(PifIssuerP p_issuer)
{
 8017758:	b480      	push	{r7}
 801775a:	b083      	sub	sp, #12
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
	return ((PifGpsUblox*)p_issuer)->__tx.state == GUTS_IDLE;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8017766:	b2db      	uxtb	r3, r3
 8017768:	2b00      	cmp	r3, #0
 801776a:	bf0c      	ite	eq
 801776c:	2301      	moveq	r3, #1
 801776e:	2300      	movne	r3, #0
 8017770:	b2db      	uxtb	r3, r3
}
 8017772:	4618      	mov	r0, r3
 8017774:	370c      	adds	r7, #12
 8017776:	46bd      	mov	sp, r7
 8017778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777c:	4770      	bx	lr
	...

08017780 <_checkBlocking>:

static BOOL _checkBlocking(PifGpsUblox* p_owner, BOOL blocking)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b082      	sub	sp, #8
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	460b      	mov	r3, r1
 801778a:	70fb      	strb	r3, [r7, #3]
	if (blocking) {
 801778c:	78fb      	ldrb	r3, [r7, #3]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d004      	beq.n	801779c <_checkBlocking+0x1c>
		pifTaskManager_YieldAbort(_checkAbortBlocking, p_owner);
 8017792:	6879      	ldr	r1, [r7, #4]
 8017794:	480b      	ldr	r0, [pc, #44]	; (80177c4 <_checkBlocking+0x44>)
 8017796:	f7fd fb0f 	bl	8014db8 <pifTaskManager_YieldAbort>
 801779a:	e00e      	b.n	80177ba <_checkBlocking+0x3a>
	}
	else {
		if (p_owner->__tx.state != GUTS_IDLE) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80177a2:	b2db      	uxtb	r3, r3
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d008      	beq.n	80177ba <_checkBlocking+0x3a>
			p_owner->_request_state = GURS_FAILURE;
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2205      	movs	r2, #5
 80177ac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			pif_error = E_INVALID_STATE;
 80177b0:	4b05      	ldr	r3, [pc, #20]	; (80177c8 <_checkBlocking+0x48>)
 80177b2:	2202      	movs	r2, #2
 80177b4:	701a      	strb	r2, [r3, #0]
			return FALSE;
 80177b6:	2300      	movs	r3, #0
 80177b8:	e000      	b.n	80177bc <_checkBlocking+0x3c>
		}
	}
	return TRUE;
 80177ba:	2301      	movs	r3, #1
}
 80177bc:	4618      	mov	r0, r3
 80177be:	3708      	adds	r7, #8
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	08017759 	.word	0x08017759
 80177c8:	20001c55 	.word	0x20001c55

080177cc <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af02      	add	r7, sp, #8
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	460b      	mov	r3, r1
 80177d6:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d103      	bne.n	80177e6 <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 80177de:	4b1e      	ldr	r3, [pc, #120]	; (8017858 <pifGpsUblox_Init+0x8c>)
 80177e0:	2201      	movs	r2, #1
 80177e2:	701a      	strb	r2, [r3, #0]
		goto fail;
 80177e4:	e026      	b.n	8017834 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 80177e6:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80177ea:	2100      	movs	r1, #0
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f00b fc25 	bl	802303c <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	3308      	adds	r3, #8
 80177f6:	887a      	ldrh	r2, [r7, #2]
 80177f8:	4611      	mov	r1, r2
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7fe fa52 	bl	8015ca4 <pifGps_Init>
 8017800:	4603      	mov	r3, r0
 8017802:	2b00      	cmp	r3, #0
 8017804:	d013      	beq.n	801782e <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801780c:	2240      	movs	r2, #64	; 0x40
 801780e:	2100      	movs	r1, #0
 8017810:	4618      	mov	r0, r3
 8017812:	f7fb ffed 	bl	80137f0 <pifRingBuffer_InitHeap>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d00a      	beq.n	8017832 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017822:	490e      	ldr	r1, [pc, #56]	; (801785c <pifGpsUblox_Init+0x90>)
 8017824:	4618      	mov	r0, r3
 8017826:	f7fc f848 	bl	80138ba <pifRingBuffer_SetName>
    return TRUE;
 801782a:	2301      	movs	r3, #1
 801782c:	e010      	b.n	8017850 <pifGpsUblox_Init+0x84>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 801782e:	bf00      	nop
 8017830:	e000      	b.n	8017834 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017832:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f000 f815 	bl	8017864 <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 801783a:	887b      	ldrh	r3, [r7, #2]
 801783c:	4a06      	ldr	r2, [pc, #24]	; (8017858 <pifGpsUblox_Init+0x8c>)
 801783e:	7812      	ldrb	r2, [r2, #0]
 8017840:	9200      	str	r2, [sp, #0]
 8017842:	f240 2255 	movw	r2, #597	; 0x255
 8017846:	4906      	ldr	r1, [pc, #24]	; (8017860 <pifGpsUblox_Init+0x94>)
 8017848:	2004      	movs	r0, #4
 801784a:	f7fb fe2f 	bl	80134ac <pifLog_Printf>
#endif
    return FALSE;
 801784e:	2300      	movs	r3, #0
}
 8017850:	4618      	mov	r0, r3
 8017852:	3708      	adds	r7, #8
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}
 8017858:	20001c55 	.word	0x20001c55
 801785c:	08027d34 	.word	0x08027d34
 8017860:	08027d38 	.word	0x08027d38

08017864 <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b082      	sub	sp, #8
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017872:	4618      	mov	r0, r3
 8017874:	f7fc f806 	bl	8013884 <pifRingBuffer_Clear>
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
 8017888:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	683a      	ldr	r2, [r7, #0]
 801788e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017892:	4b06      	ldr	r3, [pc, #24]	; (80178ac <pifGpsUblox_AttachComm+0x2c>)
 8017894:	4a06      	ldr	r2, [pc, #24]	; (80178b0 <pifGpsUblox_AttachComm+0x30>)
 8017896:	6879      	ldr	r1, [r7, #4]
 8017898:	6838      	ldr	r0, [r7, #0]
 801789a:	f7fa faa3 	bl	8011de4 <pifComm_AttachClient>
	p_comm->evt_abort_rx = _evtAbortRx;
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	4a04      	ldr	r2, [pc, #16]	; (80178b4 <pifGpsUblox_AttachComm+0x34>)
 80178a2:	611a      	str	r2, [r3, #16]
}
 80178a4:	bf00      	nop
 80178a6:	3708      	adds	r7, #8
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}
 80178ac:	08017625 	.word	0x08017625
 80178b0:	080171b5 	.word	0x080171b5
 80178b4:	0801773d 	.word	0x0801773d

080178b8 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, waiting);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking, uint16_t waiting)
{
 80178b8:	b590      	push	{r4, r7, lr}
 80178ba:	b091      	sub	sp, #68	; 0x44
 80178bc:	af02      	add	r7, sp, #8
 80178be:	60f8      	str	r0, [r7, #12]
 80178c0:	4608      	mov	r0, r1
 80178c2:	4611      	mov	r1, r2
 80178c4:	461a      	mov	r2, r3
 80178c6:	4603      	mov	r3, r0
 80178c8:	72fb      	strb	r3, [r7, #11]
 80178ca:	460b      	mov	r3, r1
 80178cc:	813b      	strh	r3, [r7, #8]
 80178ce:	4613      	mov	r3, r2
 80178d0:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (!_checkBlocking(p_owner, blocking)) return FALSE;
 80178d2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80178d6:	4619      	mov	r1, r3
 80178d8:	68f8      	ldr	r0, [r7, #12]
 80178da:	f7ff ff51 	bl	8017780 <_checkBlocking>
 80178de:	4603      	mov	r3, r0
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d101      	bne.n	80178e8 <pifGpsUblox_SetPubxConfig+0x30>
 80178e4:	2300      	movs	r3, #0
 80178e6:	e015      	b.n	8017914 <pifGpsUblox_SetPubxConfig+0x5c>

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 80178e8:	7af9      	ldrb	r1, [r7, #11]
 80178ea:	893c      	ldrh	r4, [r7, #8]
 80178ec:	88fb      	ldrh	r3, [r7, #6]
 80178ee:	f107 0010 	add.w	r0, r7, #16
 80178f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80178f4:	9201      	str	r2, [sp, #4]
 80178f6:	9300      	str	r3, [sp, #0]
 80178f8:	4623      	mov	r3, r4
 80178fa:	460a      	mov	r2, r1
 80178fc:	4907      	ldr	r1, [pc, #28]	; (801791c <pifGpsUblox_SetPubxConfig+0x64>)
 80178fe:	f7fa f8af 	bl	8011a60 <pif_Printf>

	return _makeNmeaPacket(p_owner, data, waiting);
 8017902:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017906:	f107 0310 	add.w	r3, r7, #16
 801790a:	4619      	mov	r1, r3
 801790c:	68f8      	ldr	r0, [r7, #12]
 801790e:	f7ff fc7f 	bl	8017210 <_makeNmeaPacket>
 8017912:	4603      	mov	r3, r0
}
 8017914:	4618      	mov	r0, r3
 8017916:	373c      	adds	r7, #60	; 0x3c
 8017918:	46bd      	mov	sp, r7
 801791a:	bd90      	pop	{r4, r7, pc}
 801791c:	08027d98 	.word	0x08027d98

08017920 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, waiting);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking, uint16_t waiting)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b086      	sub	sp, #24
 8017924:	af02      	add	r7, sp, #8
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	4608      	mov	r0, r1
 801792a:	4611      	mov	r1, r2
 801792c:	461a      	mov	r2, r3
 801792e:	4603      	mov	r3, r0
 8017930:	70fb      	strb	r3, [r7, #3]
 8017932:	460b      	mov	r3, r1
 8017934:	70bb      	strb	r3, [r7, #2]
 8017936:	4613      	mov	r3, r2
 8017938:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 801793a:	f246 23b5 	movw	r3, #25269	; 0x62b5
 801793e:	60bb      	str	r3, [r7, #8]
 8017940:	2300      	movs	r3, #0
 8017942:	81bb      	strh	r3, [r7, #12]

	if (!_checkBlocking(p_owner, blocking)) return FALSE;
 8017944:	7f3b      	ldrb	r3, [r7, #28]
 8017946:	4619      	mov	r1, r3
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7ff ff19 	bl	8017780 <_checkBlocking>
 801794e:	4603      	mov	r3, r0
 8017950:	2b00      	cmp	r3, #0
 8017952:	d101      	bne.n	8017958 <pifGpsUblox_SendUbxMsg+0x38>
 8017954:	2300      	movs	r3, #0
 8017956:	e025      	b.n	80179a4 <pifGpsUblox_SendUbxMsg+0x84>

	header[2] = class_id;
 8017958:	78fb      	ldrb	r3, [r7, #3]
 801795a:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 801795c:	78bb      	ldrb	r3, [r7, #2]
 801795e:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017960:	883b      	ldrh	r3, [r7, #0]
 8017962:	b2db      	uxtb	r3, r3
 8017964:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 8017966:	883b      	ldrh	r3, [r7, #0]
 8017968:	0a1b      	lsrs	r3, r3, #8
 801796a:	b29b      	uxth	r3, r3
 801796c:	b2db      	uxtb	r3, r3
 801796e:	737b      	strb	r3, [r7, #13]

	if (class_id == GUCI_CFG) {
 8017970:	78fb      	ldrb	r3, [r7, #3]
 8017972:	2b06      	cmp	r3, #6
 8017974:	d108      	bne.n	8017988 <pifGpsUblox_SendUbxMsg+0x68>
		p_owner->_request_state = GURS_SEND;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	2201      	movs	r2, #1
 801797a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		p_owner->__cfg_msg_id = msg_id;
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	78ba      	ldrb	r2, [r7, #2]
 8017982:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
 8017986:	e003      	b.n	8017990 <pifGpsUblox_SendUbxMsg+0x70>
	}
	else {
		p_owner->_request_state = GURS_NONE;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2200      	movs	r2, #0
 801798c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	}

	return _makeUbxPacket(p_owner, header, length, payload, waiting);
 8017990:	883a      	ldrh	r2, [r7, #0]
 8017992:	f107 0108 	add.w	r1, r7, #8
 8017996:	8c3b      	ldrh	r3, [r7, #32]
 8017998:	9300      	str	r3, [sp, #0]
 801799a:	69bb      	ldr	r3, [r7, #24]
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f7ff fd45 	bl	801742c <_makeUbxPacket>
 80179a2:	4603      	mov	r3, r0
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3710      	adds	r7, #16
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}

080179ac <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b086      	sub	sp, #24
 80179b0:	af02      	add	r7, sp, #8
 80179b2:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d103      	bne.n	80179c2 <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 80179ba:	4b0e      	ldr	r3, [pc, #56]	; (80179f4 <_evtTimerRxTimeout+0x48>)
 80179bc:	2201      	movs	r2, #1
 80179be:	701a      	strb	r2, [r3, #0]
		return;
 80179c0:	e014      	b.n	80179ec <_evtTimerRxTimeout+0x40>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	60fb      	str	r3, [r7, #12]

#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	881b      	ldrh	r3, [r3, #0]
 80179ca:	4619      	mov	r1, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	7a1b      	ldrb	r3, [r3, #8]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80179d0:	461a      	mov	r2, r3
			p_owner->__rx.state, p_owner->__rx.packet.data_count);
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	7d5b      	ldrb	r3, [r3, #21]
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) ParsingPacket(Timeout) State:%u Cnt:%u", __LINE__, p_owner->_id,
 80179d6:	9301      	str	r3, [sp, #4]
 80179d8:	9200      	str	r2, [sp, #0]
 80179da:	460b      	mov	r3, r1
 80179dc:	2216      	movs	r2, #22
 80179de:	4906      	ldr	r1, [pc, #24]	; (80179f8 <_evtTimerRxTimeout+0x4c>)
 80179e0:	2004      	movs	r0, #4
 80179e2:	f7fb fd63 	bl	80134ac <pifLog_Printf>
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	2200      	movs	r2, #0
 80179ea:	721a      	strb	r2, [r3, #8]
}
 80179ec:	3710      	adds	r7, #16
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	20001c55 	.word	0x20001c55
 80179f8:	08027dd4 	.word	0x08027dd4

080179fc <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 80179fc:	b590      	push	{r4, r7, lr}
 80179fe:	b08b      	sub	sp, #44	; 0x2c
 8017a00:	af04      	add	r7, sp, #16
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	3314      	adds	r3, #20
 8017a0a:	60fb      	str	r3, [r7, #12]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017a0c:	e0b1      	b.n	8017b72 <_parsingPacket+0x176>
		switch (p_owner->__rx.state) {
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	7a1b      	ldrb	r3, [r3, #8]
 8017a12:	2b05      	cmp	r3, #5
 8017a14:	f200 80ac 	bhi.w	8017b70 <_parsingPacket+0x174>
 8017a18:	a201      	add	r2, pc, #4	; (adr r2, 8017a20 <_parsingPacket+0x24>)
 8017a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a1e:	bf00      	nop
 8017a20:	08017a39 	.word	0x08017a39
 8017a24:	08017a7f 	.word	0x08017a7f
 8017a28:	08017a97 	.word	0x08017a97
 8017a2c:	08017aaf 	.word	0x08017aaf
 8017a30:	08017adb 	.word	0x08017adb
 8017a34:	08017b03 	.word	0x08017b03
		case MRS_IDLE:
			if (data == '$') {
 8017a38:	7afb      	ldrb	r3, [r7, #11]
 8017a3a:	2b24      	cmp	r3, #36	; 0x24
 8017a3c:	d109      	bne.n	8017a52 <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2201      	movs	r2, #1
 8017a42:	721a      	strb	r2, [r3, #8]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6a1b      	ldr	r3, [r3, #32]
 8017a48:	21c8      	movs	r1, #200	; 0xc8
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7fd fb68 	bl	8015120 <pifTimer_Start>
 8017a50:	e08f      	b.n	8017b72 <_parsingPacket+0x176>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->__evt_other_packet) {
 8017a52:	4b65      	ldr	r3, [pc, #404]	; (8017be8 <_parsingPacket+0x1ec>)
 8017a54:	781b      	ldrb	r3, [r3, #0]
 8017a56:	2b03      	cmp	r3, #3
 8017a58:	d10b      	bne.n	8017a72 <_parsingPacket+0x76>
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d007      	beq.n	8017a72 <_parsingPacket+0x76>
				(*p_owner->__evt_other_packet)(p_owner, data, p_owner->__p_issuer);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a66:	7af9      	ldrb	r1, [r7, #11]
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	4798      	blx	r3
 8017a70:	e004      	b.n	8017a7c <_parsingPacket+0x80>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 8017a72:	2301      	movs	r3, #1
 8017a74:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
 8017a76:	234b      	movs	r3, #75	; 0x4b
 8017a78:	613b      	str	r3, [r7, #16]
#endif
				goto fail;
 8017a7a:	e089      	b.n	8017b90 <_parsingPacket+0x194>
			}
			break;
 8017a7c:	e079      	b.n	8017b72 <_parsingPacket+0x176>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017a7e:	7afb      	ldrb	r3, [r7, #11]
 8017a80:	2b4d      	cmp	r3, #77	; 0x4d
 8017a82:	d103      	bne.n	8017a8c <_parsingPacket+0x90>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	2202      	movs	r2, #2
 8017a88:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017a8a:	e072      	b.n	8017b72 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017a90:	2358      	movs	r3, #88	; 0x58
 8017a92:	613b      	str	r3, [r7, #16]
				goto fail;
 8017a94:	e07c      	b.n	8017b90 <_parsingPacket+0x194>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 8017a96:	7afb      	ldrb	r3, [r7, #11]
 8017a98:	2b3c      	cmp	r3, #60	; 0x3c
 8017a9a:	d103      	bne.n	8017aa4 <_parsingPacket+0xa8>
				p_owner->__rx.state = MRS_DIRECTION;
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2203      	movs	r2, #3
 8017aa0:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017aa2:	e066      	b.n	8017b72 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017aa8:	2365      	movs	r3, #101	; 0x65
 8017aaa:	613b      	str	r3, [r7, #16]
				goto fail;
 8017aac:	e070      	b.n	8017b90 <_parsingPacket+0x194>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 8017aae:	7afb      	ldrb	r3, [r7, #11]
 8017ab0:	2b7c      	cmp	r3, #124	; 0x7c
 8017ab2:	d80d      	bhi.n	8017ad0 <_parsingPacket+0xd4>
				p_packet->data_count = data;
 8017ab4:	7afa      	ldrb	r2, [r7, #11]
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	68db      	ldr	r3, [r3, #12]
 8017abe:	7afa      	ldrb	r2, [r7, #11]
 8017ac0:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2201      	movs	r2, #1
 8017ac6:	741a      	strb	r2, [r3, #16]
				p_owner->__rx.state = MRS_LENGTH;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	2204      	movs	r2, #4
 8017acc:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017ace:	e050      	b.n	8017b72 <_parsingPacket+0x176>
				pkt_err = PKT_ERR_BIG_LENGHT;
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	75fb      	strb	r3, [r7, #23]
				line = __LINE__;
 8017ad4:	2375      	movs	r3, #117	; 0x75
 8017ad6:	613b      	str	r3, [r7, #16]
				goto fail;
 8017ad8:	e05a      	b.n	8017b90 <_parsingPacket+0x194>

		case MRS_LENGTH:
			p_packet->command = data;
 8017ada:	7afa      	ldrb	r2, [r7, #11]
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	68db      	ldr	r3, [r3, #12]
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	7c12      	ldrb	r2, [r2, #16]
 8017ae8:	4413      	add	r3, r2
 8017aea:	7afa      	ldrb	r2, [r7, #11]
 8017aec:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	7c1b      	ldrb	r3, [r3, #16]
 8017af2:	3301      	adds	r3, #1
 8017af4:	b2da      	uxtb	r2, r3
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	741a      	strb	r2, [r3, #16]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2205      	movs	r2, #5
 8017afe:	721a      	strb	r2, [r3, #8]
			break;
 8017b00:	e037      	b.n	8017b72 <_parsingPacket+0x176>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	68db      	ldr	r3, [r3, #12]
 8017b06:	687a      	ldr	r2, [r7, #4]
 8017b08:	7c12      	ldrb	r2, [r2, #16]
 8017b0a:	4413      	add	r3, r2
 8017b0c:	7afa      	ldrb	r2, [r7, #11]
 8017b0e:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	7c1b      	ldrb	r3, [r3, #16]
 8017b14:	3301      	adds	r3, #1
 8017b16:	b2da      	uxtb	r2, r3
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	741a      	strb	r2, [r3, #16]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	785b      	ldrb	r3, [r3, #1]
 8017b20:	3302      	adds	r3, #2
 8017b22:	687a      	ldr	r2, [r7, #4]
 8017b24:	7c12      	ldrb	r2, [r2, #16]
 8017b26:	4293      	cmp	r3, r2
 8017b28:	da23      	bge.n	8017b72 <_parsingPacket+0x176>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	68da      	ldr	r2, [r3, #12]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	785b      	ldrb	r3, [r3, #1]
 8017b32:	b29b      	uxth	r3, r3
 8017b34:	3302      	adds	r3, #2
 8017b36:	b29b      	uxth	r3, r3
 8017b38:	4619      	mov	r1, r3
 8017b3a:	4610      	mov	r0, r2
 8017b3c:	f7f9 fff9 	bl	8011b32 <pifCheckXor>
 8017b40:	4603      	mov	r3, r0
 8017b42:	461a      	mov	r2, r3
 8017b44:	7afb      	ldrb	r3, [r7, #11]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d10d      	bne.n	8017b66 <_parsingPacket+0x16a>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	6a1b      	ldr	r3, [r3, #32]
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7fd fb14 	bl	801517c <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	68db      	ldr	r3, [r3, #12]
 8017b58:	1c9a      	adds	r2, r3, #2
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2206      	movs	r2, #6
 8017b62:	721a      	strb	r2, [r3, #8]
					return;
 8017b64:	e03c      	b.n	8017be0 <_parsingPacket+0x1e4>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 8017b66:	2302      	movs	r3, #2
 8017b68:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
 8017b6a:	2391      	movs	r3, #145	; 0x91
 8017b6c:	613b      	str	r3, [r7, #16]
#endif
					goto fail;
 8017b6e:	e00f      	b.n	8017b90 <_parsingPacket+0x194>
				}
			}
			break;

		default:
			break;
 8017b70:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	685a      	ldr	r2, [r3, #4]
 8017b76:	f107 010b 	add.w	r1, r7, #11
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	4610      	mov	r0, r2
 8017b7e:	4798      	blx	r3
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f47f af43 	bne.w	8017a0e <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 8017b88:	4b17      	ldr	r3, [pc, #92]	; (8017be8 <_parsingPacket+0x1ec>)
 8017b8a:	2203      	movs	r2, #3
 8017b8c:	701a      	strb	r2, [r3, #0]
	return;
 8017b8e:	e027      	b.n	8017be0 <_parsingPacket+0x1e4>

fail:
	if (pkt_err != pre_error) {
 8017b90:	4b15      	ldr	r3, [pc, #84]	; (8017be8 <_parsingPacket+0x1ec>)
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	7dfa      	ldrb	r2, [r7, #23]
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d01a      	beq.n	8017bd0 <_parsingPacket+0x1d4>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	881b      	ldrh	r3, [r3, #0]
 8017b9e:	461c      	mov	r4, r3
 8017ba0:	7dfb      	ldrb	r3, [r7, #23]
 8017ba2:	4a12      	ldr	r2, [pc, #72]	; (8017bec <_parsingPacket+0x1f0>)
 8017ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ba8:	7afa      	ldrb	r2, [r7, #11]
 8017baa:	4611      	mov	r1, r2
				p_owner->__rx.state, p_packet->data_count);
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	7a12      	ldrb	r2, [r2, #8]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017bb0:	4610      	mov	r0, r2
				p_owner->__rx.state, p_packet->data_count);
 8017bb2:	68fa      	ldr	r2, [r7, #12]
 8017bb4:	7852      	ldrb	r2, [r2, #1]
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
 8017bb6:	9203      	str	r2, [sp, #12]
 8017bb8:	9002      	str	r0, [sp, #8]
 8017bba:	9101      	str	r1, [sp, #4]
 8017bbc:	9300      	str	r3, [sp, #0]
 8017bbe:	4623      	mov	r3, r4
 8017bc0:	693a      	ldr	r2, [r7, #16]
 8017bc2:	490b      	ldr	r1, [pc, #44]	; (8017bf0 <_parsingPacket+0x1f4>)
 8017bc4:	2004      	movs	r0, #4
 8017bc6:	f7fb fc71 	bl	80134ac <pifLog_Printf>
#endif
		pre_error = pkt_err;
 8017bca:	4a07      	ldr	r2, [pc, #28]	; (8017be8 <_parsingPacket+0x1ec>)
 8017bcc:	7dfb      	ldrb	r3, [r7, #23]
 8017bce:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	6a1b      	ldr	r3, [r3, #32]
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7fd fad1 	bl	801517c <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	721a      	strb	r2, [r3, #8]
}
 8017be0:	371c      	adds	r7, #28
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd90      	pop	{r4, r7, pc}
 8017be6:	bf00      	nop
 8017be8:	2000014c 	.word	0x2000014c
 8017bec:	20000140 	.word	0x20000140
 8017bf0:	08027e30 	.word	0x08027e30

08017bf4 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b084      	sub	sp, #16
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	7a1b      	ldrb	r3, [r3, #8]
 8017c06:	2b05      	cmp	r3, #5
 8017c08:	d803      	bhi.n	8017c12 <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 8017c0a:	6839      	ldr	r1, [r7, #0]
 8017c0c:	68f8      	ldr	r0, [r7, #12]
 8017c0e:	f7ff fef5 	bl	80179fc <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	7a1b      	ldrb	r3, [r3, #8]
 8017c16:	2b06      	cmp	r3, #6
 8017c18:	d119      	bne.n	8017c4e <_evtParsing+0x5a>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

		p_owner->__rx.packet.p_pointer = p_owner->__rx.packet.p_data;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	699a      	ldr	r2, [r3, #24]
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	61da      	str	r2, [r3, #28]
    	if (p_owner->__evt_receive) (*p_owner->__evt_receive)(p_owner, &p_owner->__rx.packet, p_owner->__p_issuer);
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d008      	beq.n	8017c3c <_evtParsing+0x48>
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c2e:	68fa      	ldr	r2, [r7, #12]
 8017c30:	f102 0114 	add.w	r1, r2, #20
 8017c34:	68fa      	ldr	r2, [r7, #12]
 8017c36:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017c38:	68f8      	ldr	r0, [r7, #12]
 8017c3a:	4798      	blx	r3
    	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	685b      	ldr	r3, [r3, #4]
 8017c40:	6a1b      	ldr	r3, [r3, #32]
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7fc fcf6 	bl	8014634 <pifTask_SetTrigger>
    	p_owner->__rx.state = MRS_IDLE;
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	721a      	strb	r2, [r3, #8]
    }
}
 8017c4e:	bf00      	nop
 8017c50:	3710      	adds	r7, #16
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}

08017c56 <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 8017c56:	b5b0      	push	{r4, r5, r7, lr}
 8017c58:	b084      	sub	sp, #16
 8017c5a:	af00      	add	r7, sp, #0
 8017c5c:	6078      	str	r0, [r7, #4]
 8017c5e:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	7a1b      	ldrb	r3, [r3, #8]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d001      	beq.n	8017c70 <_evtSending+0x1a>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	e06f      	b.n	8017d50 <_evtSending+0xfa>

	switch (p_owner->__tx.state) {
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d002      	beq.n	8017c80 <_evtSending+0x2a>
 8017c7a:	2b01      	cmp	r3, #1
 8017c7c:	d021      	beq.n	8017cc2 <_evtSending+0x6c>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 8017c7e:	e066      	b.n	8017d4e <_evtSending+0xf8>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	3324      	adds	r3, #36	; 0x24
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7fb fe7e 	bl	8013986 <pifRingBuffer_IsEmpty>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d15d      	bne.n	8017d4c <_evtSending+0xf6>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	3324      	adds	r3, #36	; 0x24
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7fb fe89 	bl	80139ac <pifRingBuffer_GetFillSize>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	461a      	mov	r2, r3
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			p_owner->__tx.pos = 0;
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			p_owner->__tx.state = MTS_SENDING;
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	2201      	movs	r2, #1
 8017cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	685b      	ldr	r3, [r3, #4]
 8017cb8:	6a1b      	ldr	r3, [r3, #32]
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f7fc fcba 	bl	8014634 <pifTask_SetTrigger>
		break;
 8017cc0:	e044      	b.n	8017d4c <_evtSending+0xf6>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	685c      	ldr	r4, [r3, #4]
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	4610      	mov	r0, r2
 8017cd6:	f7fb fdfe 	bl	80138d6 <pifRingBuffer_GetTailPointer>
 8017cda:	4605      	mov	r5, r0
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017ce8:	4619      	mov	r1, r3
 8017cea:	4610      	mov	r0, r2
 8017cec:	f7fb fe80 	bl	80139f0 <pifRingBuffer_GetLinerSize>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	461a      	mov	r2, r3
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	4629      	mov	r1, r5
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	4798      	blx	r3
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 8017d00:	897b      	ldrh	r3, [r7, #10]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d101      	bne.n	8017d0a <_evtSending+0xb4>
 8017d06:	2300      	movs	r3, #0
 8017d08:	e022      	b.n	8017d50 <_evtSending+0xfa>
		p_owner->__tx.pos += length;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8017d10:	897b      	ldrh	r3, [r7, #10]
 8017d12:	4413      	add	r3, r2
 8017d14:	b29a      	uxth	r2, r3
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d30d      	bcc.n	8017d48 <_evtSending+0xf2>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017d38:	4619      	mov	r1, r3
 8017d3a:	4610      	mov	r0, r2
 8017d3c:	f7fc f835 	bl	8013daa <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2200      	movs	r2, #0
 8017d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return TRUE;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	e001      	b.n	8017d50 <_evtSending+0xfa>
		break;
 8017d4c:	bf00      	nop
	}
	return FALSE;
 8017d4e:	2300      	movs	r3, #0
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3710      	adds	r7, #16
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bdb0      	pop	{r4, r5, r7, pc}

08017d58 <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b086      	sub	sp, #24
 8017d5c:	af02      	add	r7, sp, #8
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	60b9      	str	r1, [r7, #8]
 8017d62:	4613      	mov	r3, r2
 8017d64:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d103      	bne.n	8017d74 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017d6c:	4b2c      	ldr	r3, [pc, #176]	; (8017e20 <pifMsp_Init+0xc8>)
 8017d6e:	2201      	movs	r2, #1
 8017d70:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017d72:	e042      	b.n	8017dfa <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 8017d74:	2258      	movs	r2, #88	; 0x58
 8017d76:	2100      	movs	r1, #0
 8017d78:	68f8      	ldr	r0, [r7, #12]
 8017d7a:	f00b f95f 	bl	802303c <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 8017d7e:	2180      	movs	r1, #128	; 0x80
 8017d80:	2001      	movs	r0, #1
 8017d82:	f00b f90b 	bl	8022f9c <calloc>
 8017d86:	4603      	mov	r3, r0
 8017d88:	461a      	mov	r2, r3
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	60da      	str	r2, [r3, #12]
    if (!p_owner->__rx.p_packet) {
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	68db      	ldr	r3, [r3, #12]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d103      	bne.n	8017d9e <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 8017d96:	4b22      	ldr	r3, [pc, #136]	; (8017e20 <pifMsp_Init+0xc8>)
 8017d98:	2203      	movs	r2, #3
 8017d9a:	701a      	strb	r2, [r3, #0]
        goto fail;
 8017d9c:	e02d      	b.n	8017dfa <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	3324      	adds	r3, #36	; 0x24
 8017da2:	2280      	movs	r2, #128	; 0x80
 8017da4:	2100      	movs	r1, #0
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fb fd22 	bl	80137f0 <pifRingBuffer_InitHeap>
 8017dac:	4603      	mov	r3, r0
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d020      	beq.n	8017df4 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 8017db2:	2100      	movs	r1, #0
 8017db4:	68b8      	ldr	r0, [r7, #8]
 8017db6:	f7fd f97b 	bl	80150b0 <pifTimerManager_Add>
 8017dba:	4602      	mov	r2, r0
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	621a      	str	r2, [r3, #32]
    if (!p_owner->__rx.p_timer) goto fail;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	6a1b      	ldr	r3, [r3, #32]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d017      	beq.n	8017df8 <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	6a1b      	ldr	r3, [r3, #32]
 8017dcc:	68fa      	ldr	r2, [r7, #12]
 8017dce:	4915      	ldr	r1, [pc, #84]	; (8017e24 <pifMsp_Init+0xcc>)
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7fd fa9a 	bl	801530a <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017dd6:	88fb      	ldrh	r3, [r7, #6]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d106      	bne.n	8017dea <pifMsp_Init+0x92>
 8017ddc:	4b12      	ldr	r3, [pc, #72]	; (8017e28 <pifMsp_Init+0xd0>)
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	1c5a      	adds	r2, r3, #1
 8017de2:	b291      	uxth	r1, r2
 8017de4:	4a10      	ldr	r2, [pc, #64]	; (8017e28 <pifMsp_Init+0xd0>)
 8017de6:	8011      	strh	r1, [r2, #0]
 8017de8:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	88fa      	ldrh	r2, [r7, #6]
 8017dee:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8017df0:	2301      	movs	r3, #1
 8017df2:	e010      	b.n	8017e16 <pifMsp_Init+0xbe>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 8017df4:	bf00      	nop
 8017df6:	e000      	b.n	8017dfa <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 8017df8:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 8017dfa:	68f8      	ldr	r0, [r7, #12]
 8017dfc:	f000 f818 	bl	8017e30 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
 8017e00:	88fb      	ldrh	r3, [r7, #6]
 8017e02:	4a07      	ldr	r2, [pc, #28]	; (8017e20 <pifMsp_Init+0xc8>)
 8017e04:	7812      	ldrb	r2, [r2, #0]
 8017e06:	9200      	str	r2, [sp, #0]
 8017e08:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8017e0c:	4907      	ldr	r1, [pc, #28]	; (8017e2c <pifMsp_Init+0xd4>)
 8017e0e:	2004      	movs	r0, #4
 8017e10:	f7fb fb4c 	bl	80134ac <pifLog_Printf>
#endif
    return FALSE;
 8017e14:	2300      	movs	r3, #0
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	20001c55 	.word	0x20001c55
 8017e24:	080179ad 	.word	0x080179ad
 8017e28:	2000011c 	.word	0x2000011c
 8017e2c:	08027e54 	.word	0x08027e54

08017e30 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b082      	sub	sp, #8
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	68db      	ldr	r3, [r3, #12]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d007      	beq.n	8017e50 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	68db      	ldr	r3, [r3, #12]
 8017e44:	4618      	mov	r0, r3
 8017e46:	f00b f8e3 	bl	8023010 <free>
		p_owner->__rx.p_packet = NULL;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	60da      	str	r2, [r3, #12]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	3324      	adds	r3, #36	; 0x24
 8017e54:	4618      	mov	r0, r3
 8017e56:	f7fb fd15 	bl	8013884 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	6a1b      	ldr	r3, [r3, #32]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d004      	beq.n	8017e6c <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	6a1b      	ldr	r3, [r3, #32]
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7fd f93e 	bl	80150e8 <pifTimerManager_Remove>
	}
#endif
}
 8017e6c:	bf00      	nop
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b082      	sub	sp, #8
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	683a      	ldr	r2, [r7, #0]
 8017e82:	605a      	str	r2, [r3, #4]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017e84:	4b04      	ldr	r3, [pc, #16]	; (8017e98 <pifMsp_AttachComm+0x24>)
 8017e86:	4a05      	ldr	r2, [pc, #20]	; (8017e9c <pifMsp_AttachComm+0x28>)
 8017e88:	6879      	ldr	r1, [r7, #4]
 8017e8a:	6838      	ldr	r0, [r7, #0]
 8017e8c:	f7f9 ffaa 	bl	8011de4 <pifComm_AttachClient>
}
 8017e90:	bf00      	nop
 8017e92:	3708      	adds	r7, #8
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}
 8017e98:	08017c57 	.word	0x08017c57
 8017e9c:	08017bf5 	.word	0x08017bf5

08017ea0 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b082      	sub	sp, #8
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7f9 ffaf 	bl	8011e10 <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	605a      	str	r2, [r3, #4]
}
 8017eb8:	bf00      	nop
 8017eba:	3708      	adds	r7, #8
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}

08017ec0 <pifMsp_AttachEvtReceive>:

void pifMsp_AttachEvtReceive(PifMsp* p_owner, PifEvtMspReceive evt_receive, PifEvtMspOtherPacket evt_other_packet, PifIssuerP p_issuer)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b085      	sub	sp, #20
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	607a      	str	r2, [r7, #4]
 8017ecc:	603b      	str	r3, [r7, #0]
	p_owner->__evt_receive = evt_receive;
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	68ba      	ldr	r2, [r7, #8]
 8017ed2:	651a      	str	r2, [r3, #80]	; 0x50
	p_owner->__evt_other_packet = evt_other_packet;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	687a      	ldr	r2, [r7, #4]
 8017ed8:	655a      	str	r2, [r3, #84]	; 0x54
	p_owner->__p_issuer = p_issuer;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	683a      	ldr	r2, [r7, #0]
 8017ede:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8017ee0:	bf00      	nop
 8017ee2:	3714      	adds	r7, #20
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eea:	4770      	bx	lr

08017eec <pifMsp_ReadData8>:

uint8_t pifMsp_ReadData8(PifMspPacket* p_packet)
{
 8017eec:	b480      	push	{r7}
 8017eee:	b085      	sub	sp, #20
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
	uint8_t data;

	data = p_packet->p_pointer[0];
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	689b      	ldr	r3, [r3, #8]
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	73fb      	strb	r3, [r7, #15]
	p_packet->p_pointer++;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	689b      	ldr	r3, [r3, #8]
 8017f00:	1c5a      	adds	r2, r3, #1
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	609a      	str	r2, [r3, #8]
	return data;
 8017f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f08:	4618      	mov	r0, r3
 8017f0a:	3714      	adds	r7, #20
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f12:	4770      	bx	lr

08017f14 <pifMsp_ReadData16>:

uint16_t pifMsp_ReadData16(PifMspPacket* p_packet)
{
 8017f14:	b480      	push	{r7}
 8017f16:	b085      	sub	sp, #20
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8);
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	689b      	ldr	r3, [r3, #8]
 8017f20:	781b      	ldrb	r3, [r3, #0]
 8017f22:	b21a      	sxth	r2, r3
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	689b      	ldr	r3, [r3, #8]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	021b      	lsls	r3, r3, #8
 8017f2e:	b21b      	sxth	r3, r3
 8017f30:	4313      	orrs	r3, r2
 8017f32:	b21b      	sxth	r3, r3
 8017f34:	81fb      	strh	r3, [r7, #14]
	p_packet->p_pointer += 2;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	689b      	ldr	r3, [r3, #8]
 8017f3a:	1c9a      	adds	r2, r3, #2
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	609a      	str	r2, [r3, #8]
	return data;
 8017f40:	89fb      	ldrh	r3, [r7, #14]
}
 8017f42:	4618      	mov	r0, r3
 8017f44:	3714      	adds	r7, #20
 8017f46:	46bd      	mov	sp, r7
 8017f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4c:	4770      	bx	lr

08017f4e <pifMsp_ReadData32>:

uint32_t pifMsp_ReadData32(PifMspPacket* p_packet)
{
 8017f4e:	b480      	push	{r7}
 8017f50:	b085      	sub	sp, #20
 8017f52:	af00      	add	r7, sp, #0
 8017f54:	6078      	str	r0, [r7, #4]
	uint32_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8) | (p_packet->p_pointer[2] << 16) | (p_packet->p_pointer[3] << 24);
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	689b      	ldr	r3, [r3, #8]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	689b      	ldr	r3, [r3, #8]
 8017f62:	3301      	adds	r3, #1
 8017f64:	781b      	ldrb	r3, [r3, #0]
 8017f66:	021b      	lsls	r3, r3, #8
 8017f68:	431a      	orrs	r2, r3
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	689b      	ldr	r3, [r3, #8]
 8017f6e:	3302      	adds	r3, #2
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	041b      	lsls	r3, r3, #16
 8017f74:	431a      	orrs	r2, r3
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	689b      	ldr	r3, [r3, #8]
 8017f7a:	3303      	adds	r3, #3
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	061b      	lsls	r3, r3, #24
 8017f80:	4313      	orrs	r3, r2
 8017f82:	60fb      	str	r3, [r7, #12]
	p_packet->p_pointer += 4;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	689b      	ldr	r3, [r3, #8]
 8017f88:	1d1a      	adds	r2, r3, #4
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	609a      	str	r2, [r3, #8]
	return data;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	3714      	adds	r7, #20
 8017f94:	46bd      	mov	sp, r7
 8017f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9a:	4770      	bx	lr

08017f9c <pifMsp_MakeAnswer>:
	}
	p_packet->p_pointer += size;
}

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b086      	sub	sp, #24
 8017fa0:	af02      	add	r7, sp, #8
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	3324      	adds	r3, #36	; 0x24
 8017faa:	4618      	mov	r0, r3
 8017fac:	f7fb fd6d 	bl	8013a8a <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017fb0:	2324      	movs	r3, #36	; 0x24
 8017fb2:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017fb4:	234d      	movs	r3, #77	; 0x4d
 8017fb6:	727b      	strb	r3, [r7, #9]
	header[2] = '>';
 8017fb8:	233e      	movs	r3, #62	; 0x3e
 8017fba:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	3324      	adds	r3, #36	; 0x24
 8017fca:	f107 0108 	add.w	r1, r7, #8
 8017fce:	2205      	movs	r2, #5
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7fb fde1 	bl	8013b98 <pifRingBuffer_PutData>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d009      	beq.n	8017ff0 <pifMsp_MakeAnswer+0x54>
	p_owner->__check_xor = header[4];
 8017fdc:	7b3a      	ldrb	r2, [r7, #12]
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017fec:	2301      	movs	r3, #1
 8017fee:	e01e      	b.n	801802e <pifMsp_MakeAnswer+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017ff0:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	3324      	adds	r3, #36	; 0x24
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fb fd6d 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017ffc:	4b0e      	ldr	r3, [pc, #56]	; (8018038 <pifMsp_MakeAnswer+0x9c>)
 8017ffe:	781b      	ldrb	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d102      	bne.n	801800a <pifMsp_MakeAnswer+0x6e>
 8018004:	4b0c      	ldr	r3, [pc, #48]	; (8018038 <pifMsp_MakeAnswer+0x9c>)
 8018006:	2204      	movs	r2, #4
 8018008:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	4619      	mov	r1, r3
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	781b      	ldrb	r3, [r3, #0]
 8018014:	461a      	mov	r2, r3
 8018016:	4b08      	ldr	r3, [pc, #32]	; (8018038 <pifMsp_MakeAnswer+0x9c>)
 8018018:	781b      	ldrb	r3, [r3, #0]
 801801a:	9301      	str	r3, [sp, #4]
 801801c:	9200      	str	r2, [sp, #0]
 801801e:	460b      	mov	r3, r1
 8018020:	f240 1269 	movw	r2, #361	; 0x169
 8018024:	4905      	ldr	r1, [pc, #20]	; (801803c <pifMsp_MakeAnswer+0xa0>)
 8018026:	2004      	movs	r0, #4
 8018028:	f7fb fa40 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 801802c:	2300      	movs	r3, #0
}
 801802e:	4618      	mov	r0, r3
 8018030:	3710      	adds	r7, #16
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}
 8018036:	bf00      	nop
 8018038:	20001c55 	.word	0x20001c55
 801803c:	08027e68 	.word	0x08027e68

08018040 <pifMsp_AddAnswer8>:

BOOL pifMsp_AddAnswer8(PifMsp* p_owner, uint8_t data)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b084      	sub	sp, #16
 8018044:	af02      	add	r7, sp, #8
 8018046:	6078      	str	r0, [r7, #4]
 8018048:	460b      	mov	r3, r1
 801804a:	70fb      	strb	r3, [r7, #3]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	3324      	adds	r3, #36	; 0x24
 8018050:	1cf9      	adds	r1, r7, #3
 8018052:	2201      	movs	r2, #1
 8018054:	4618      	mov	r0, r3
 8018056:	f7fb fd9f 	bl	8013b98 <pifRingBuffer_PutData>
 801805a:	4603      	mov	r3, r0
 801805c:	2b00      	cmp	r3, #0
 801805e:	d012      	beq.n	8018086 <pifMsp_AddAnswer8+0x46>
	p_owner->__check_xor ^= data;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018066:	78fb      	ldrb	r3, [r7, #3]
 8018068:	4053      	eors	r3, r2
 801806a:	b2da      	uxtb	r2, r3
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 1;
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018078:	3301      	adds	r3, #1
 801807a:	b29a      	uxth	r2, r3
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8018082:	2301      	movs	r3, #1
 8018084:	e01a      	b.n	80180bc <pifMsp_AddAnswer8+0x7c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 8018086:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	3324      	adds	r3, #36	; 0x24
 801808c:	4618      	mov	r0, r3
 801808e:	f7fb fd22 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8018092:	4b0c      	ldr	r3, [pc, #48]	; (80180c4 <pifMsp_AddAnswer8+0x84>)
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d102      	bne.n	80180a0 <pifMsp_AddAnswer8+0x60>
 801809a:	4b0a      	ldr	r3, [pc, #40]	; (80180c4 <pifMsp_AddAnswer8+0x84>)
 801809c:	2204      	movs	r2, #4
 801809e:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	881b      	ldrh	r3, [r3, #0]
 80180a4:	461a      	mov	r2, r3
 80180a6:	4b07      	ldr	r3, [pc, #28]	; (80180c4 <pifMsp_AddAnswer8+0x84>)
 80180a8:	781b      	ldrb	r3, [r3, #0]
 80180aa:	9300      	str	r3, [sp, #0]
 80180ac:	4613      	mov	r3, r2
 80180ae:	f240 1279 	movw	r2, #377	; 0x179
 80180b2:	4905      	ldr	r1, [pc, #20]	; (80180c8 <pifMsp_AddAnswer8+0x88>)
 80180b4:	2004      	movs	r0, #4
 80180b6:	f7fb f9f9 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 80180ba:	2300      	movs	r3, #0
}
 80180bc:	4618      	mov	r0, r3
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	20001c55 	.word	0x20001c55
 80180c8:	08027e54 	.word	0x08027e54

080180cc <pifMsp_AddAnswer16>:

BOOL pifMsp_AddAnswer16(PifMsp* p_owner, uint16_t data)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b084      	sub	sp, #16
 80180d0:	af02      	add	r7, sp, #8
 80180d2:	6078      	str	r0, [r7, #4]
 80180d4:	460b      	mov	r3, r1
 80180d6:	807b      	strh	r3, [r7, #2]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	3324      	adds	r3, #36	; 0x24
 80180dc:	1cb9      	adds	r1, r7, #2
 80180de:	2202      	movs	r2, #2
 80180e0:	4618      	mov	r0, r3
 80180e2:	f7fb fd59 	bl	8013b98 <pifRingBuffer_PutData>
 80180e6:	4603      	mov	r3, r0
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d018      	beq.n	801811e <pifMsp_AddAnswer16+0x52>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 2);
 80180ec:	1cbb      	adds	r3, r7, #2
 80180ee:	2102      	movs	r1, #2
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7f9 fd1e 	bl	8011b32 <pifCheckXor>
 80180f6:	4603      	mov	r3, r0
 80180f8:	461a      	mov	r2, r3
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018100:	4053      	eors	r3, r2
 8018102:	b2da      	uxtb	r2, r3
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 2;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018110:	3302      	adds	r3, #2
 8018112:	b29a      	uxth	r2, r3
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 801811a:	2301      	movs	r3, #1
 801811c:	e01a      	b.n	8018154 <pifMsp_AddAnswer16+0x88>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 801811e:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	3324      	adds	r3, #36	; 0x24
 8018124:	4618      	mov	r0, r3
 8018126:	f7fb fcd6 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 801812a:	4b0c      	ldr	r3, [pc, #48]	; (801815c <pifMsp_AddAnswer16+0x90>)
 801812c:	781b      	ldrb	r3, [r3, #0]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d102      	bne.n	8018138 <pifMsp_AddAnswer16+0x6c>
 8018132:	4b0a      	ldr	r3, [pc, #40]	; (801815c <pifMsp_AddAnswer16+0x90>)
 8018134:	2204      	movs	r2, #4
 8018136:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	461a      	mov	r2, r3
 801813e:	4b07      	ldr	r3, [pc, #28]	; (801815c <pifMsp_AddAnswer16+0x90>)
 8018140:	781b      	ldrb	r3, [r3, #0]
 8018142:	9300      	str	r3, [sp, #0]
 8018144:	4613      	mov	r3, r2
 8018146:	f240 1289 	movw	r2, #393	; 0x189
 801814a:	4905      	ldr	r1, [pc, #20]	; (8018160 <pifMsp_AddAnswer16+0x94>)
 801814c:	2004      	movs	r0, #4
 801814e:	f7fb f9ad 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 8018152:	2300      	movs	r3, #0
}
 8018154:	4618      	mov	r0, r3
 8018156:	3708      	adds	r7, #8
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}
 801815c:	20001c55 	.word	0x20001c55
 8018160:	08027e54 	.word	0x08027e54

08018164 <pifMsp_AddAnswer32>:

BOOL pifMsp_AddAnswer32(PifMsp* p_owner, uint32_t data)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b084      	sub	sp, #16
 8018168:	af02      	add	r7, sp, #8
 801816a:	6078      	str	r0, [r7, #4]
 801816c:	6039      	str	r1, [r7, #0]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	3324      	adds	r3, #36	; 0x24
 8018172:	4639      	mov	r1, r7
 8018174:	2204      	movs	r2, #4
 8018176:	4618      	mov	r0, r3
 8018178:	f7fb fd0e 	bl	8013b98 <pifRingBuffer_PutData>
 801817c:	4603      	mov	r3, r0
 801817e:	2b00      	cmp	r3, #0
 8018180:	d018      	beq.n	80181b4 <pifMsp_AddAnswer32+0x50>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 4);
 8018182:	463b      	mov	r3, r7
 8018184:	2104      	movs	r1, #4
 8018186:	4618      	mov	r0, r3
 8018188:	f7f9 fcd3 	bl	8011b32 <pifCheckXor>
 801818c:	4603      	mov	r3, r0
 801818e:	461a      	mov	r2, r3
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018196:	4053      	eors	r3, r2
 8018198:	b2da      	uxtb	r2, r3
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 4;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80181a6:	3304      	adds	r3, #4
 80181a8:	b29a      	uxth	r2, r3
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80181b0:	2301      	movs	r3, #1
 80181b2:	e01a      	b.n	80181ea <pifMsp_AddAnswer32+0x86>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 80181b4:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	3324      	adds	r3, #36	; 0x24
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7fb fc8b 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80181c0:	4b0c      	ldr	r3, [pc, #48]	; (80181f4 <pifMsp_AddAnswer32+0x90>)
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d102      	bne.n	80181ce <pifMsp_AddAnswer32+0x6a>
 80181c8:	4b0a      	ldr	r3, [pc, #40]	; (80181f4 <pifMsp_AddAnswer32+0x90>)
 80181ca:	2204      	movs	r2, #4
 80181cc:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	881b      	ldrh	r3, [r3, #0]
 80181d2:	461a      	mov	r2, r3
 80181d4:	4b07      	ldr	r3, [pc, #28]	; (80181f4 <pifMsp_AddAnswer32+0x90>)
 80181d6:	781b      	ldrb	r3, [r3, #0]
 80181d8:	9300      	str	r3, [sp, #0]
 80181da:	4613      	mov	r3, r2
 80181dc:	f240 1299 	movw	r2, #409	; 0x199
 80181e0:	4905      	ldr	r1, [pc, #20]	; (80181f8 <pifMsp_AddAnswer32+0x94>)
 80181e2:	2004      	movs	r0, #4
 80181e4:	f7fb f962 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 80181e8:	2300      	movs	r3, #0
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3708      	adds	r7, #8
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
 80181f2:	bf00      	nop
 80181f4:	20001c55 	.word	0x20001c55
 80181f8:	08027e54 	.word	0x08027e54

080181fc <pifMsp_AddAnswer>:

BOOL pifMsp_AddAnswer(PifMsp* p_owner, uint8_t* p_data, uint16_t size)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b086      	sub	sp, #24
 8018200:	af02      	add	r7, sp, #8
 8018202:	60f8      	str	r0, [r7, #12]
 8018204:	60b9      	str	r1, [r7, #8]
 8018206:	4613      	mov	r3, r2
 8018208:	80fb      	strh	r3, [r7, #6]
	if (size > 0) {
 801820a:	88fb      	ldrh	r3, [r7, #6]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d021      	beq.n	8018254 <pifMsp_AddAnswer+0x58>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	3324      	adds	r3, #36	; 0x24
 8018214:	88fa      	ldrh	r2, [r7, #6]
 8018216:	68b9      	ldr	r1, [r7, #8]
 8018218:	4618      	mov	r0, r3
 801821a:	f7fb fcbd 	bl	8013b98 <pifRingBuffer_PutData>
 801821e:	4603      	mov	r3, r0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d019      	beq.n	8018258 <pifMsp_AddAnswer+0x5c>
		p_owner->__check_xor ^= pifCheckXor(p_data, size);
 8018224:	88fb      	ldrh	r3, [r7, #6]
 8018226:	4619      	mov	r1, r3
 8018228:	68b8      	ldr	r0, [r7, #8]
 801822a:	f7f9 fc82 	bl	8011b32 <pifCheckXor>
 801822e:	4603      	mov	r3, r0
 8018230:	461a      	mov	r2, r3
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018238:	4053      	eors	r3, r2
 801823a:	b2da      	uxtb	r2, r3
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		p_owner->__data_size += size;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018248:	88fb      	ldrh	r3, [r7, #6]
 801824a:	4413      	add	r3, r2
 801824c:	b29a      	uxth	r2, r3
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
	return TRUE;
 8018254:	2301      	movs	r3, #1
 8018256:	e01a      	b.n	801828e <pifMsp_AddAnswer+0x92>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8018258:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	3324      	adds	r3, #36	; 0x24
 801825e:	4618      	mov	r0, r3
 8018260:	f7fb fc39 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8018264:	4b0c      	ldr	r3, [pc, #48]	; (8018298 <pifMsp_AddAnswer+0x9c>)
 8018266:	781b      	ldrb	r3, [r3, #0]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d102      	bne.n	8018272 <pifMsp_AddAnswer+0x76>
 801826c:	4b0a      	ldr	r3, [pc, #40]	; (8018298 <pifMsp_AddAnswer+0x9c>)
 801826e:	2204      	movs	r2, #4
 8018270:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	881b      	ldrh	r3, [r3, #0]
 8018276:	461a      	mov	r2, r3
 8018278:	4b07      	ldr	r3, [pc, #28]	; (8018298 <pifMsp_AddAnswer+0x9c>)
 801827a:	781b      	ldrb	r3, [r3, #0]
 801827c:	9300      	str	r3, [sp, #0]
 801827e:	4613      	mov	r3, r2
 8018280:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018284:	4905      	ldr	r1, [pc, #20]	; (801829c <pifMsp_AddAnswer+0xa0>)
 8018286:	2004      	movs	r0, #4
 8018288:	f7fb f910 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 801828c:	2300      	movs	r3, #0
}
 801828e:	4618      	mov	r0, r3
 8018290:	3710      	adds	r7, #16
 8018292:	46bd      	mov	sp, r7
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	20001c55 	.word	0x20001c55
 801829c:	08027e54 	.word	0x08027e54

080182a0 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b086      	sub	sp, #24
 80182a4:	af02      	add	r7, sp, #8
 80182a6:	6078      	str	r0, [r7, #4]
 80182a8:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	3324      	adds	r3, #36	; 0x24
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7fb fbeb 	bl	8013a8a <pifRingBuffer_BeginPutting>

	header[0] = '$';
 80182b4:	2324      	movs	r3, #36	; 0x24
 80182b6:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 80182b8:	234d      	movs	r3, #77	; 0x4d
 80182ba:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 80182bc:	2321      	movs	r3, #33	; 0x21
 80182be:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 80182c0:	2300      	movs	r3, #0
 80182c2:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	3324      	adds	r3, #36	; 0x24
 80182ce:	f107 0108 	add.w	r1, r7, #8
 80182d2:	2205      	movs	r2, #5
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7fb fc5f 	bl	8013b98 <pifRingBuffer_PutData>
 80182da:	4603      	mov	r3, r0
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d009      	beq.n	80182f4 <pifMsp_MakeError+0x54>
	p_owner->__check_xor = header[4];
 80182e0:	7b3a      	ldrb	r2, [r7, #12]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2200      	movs	r2, #0
 80182ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80182f0:	2301      	movs	r3, #1
 80182f2:	e01e      	b.n	8018332 <pifMsp_MakeError+0x92>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80182f4:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	3324      	adds	r3, #36	; 0x24
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fb fbeb 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8018300:	4b0e      	ldr	r3, [pc, #56]	; (801833c <pifMsp_MakeError+0x9c>)
 8018302:	781b      	ldrb	r3, [r3, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d102      	bne.n	801830e <pifMsp_MakeError+0x6e>
 8018308:	4b0c      	ldr	r3, [pc, #48]	; (801833c <pifMsp_MakeError+0x9c>)
 801830a:	2204      	movs	r2, #4
 801830c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	881b      	ldrh	r3, [r3, #0]
 8018312:	4619      	mov	r1, r3
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	461a      	mov	r2, r3
 801831a:	4b08      	ldr	r3, [pc, #32]	; (801833c <pifMsp_MakeError+0x9c>)
 801831c:	781b      	ldrb	r3, [r3, #0]
 801831e:	9301      	str	r3, [sp, #4]
 8018320:	9200      	str	r2, [sp, #0]
 8018322:	460b      	mov	r3, r1
 8018324:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8018328:	4905      	ldr	r1, [pc, #20]	; (8018340 <pifMsp_MakeError+0xa0>)
 801832a:	2004      	movs	r0, #4
 801832c:	f7fb f8be 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 8018330:	2300      	movs	r3, #0
}
 8018332:	4618      	mov	r0, r3
 8018334:	3710      	adds	r7, #16
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}
 801833a:	bf00      	nop
 801833c:	20001c55 	.word	0x20001c55
 8018340:	08027e68 	.word	0x08027e68

08018344 <pifMsp_SendAnswer>:

BOOL pifMsp_SendAnswer(PifMsp* p_owner)
{
 8018344:	b590      	push	{r4, r7, lr}
 8018346:	b085      	sub	sp, #20
 8018348:	af02      	add	r7, sp, #8
 801834a:	6078      	str	r0, [r7, #4]
	*pifRingBuffer_GetPointerPutting(&p_owner->__tx.answer_buffer, 3) = p_owner->__data_size;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	3324      	adds	r3, #36	; 0x24
 8018356:	2103      	movs	r1, #3
 8018358:	4618      	mov	r0, r3
 801835a:	f7fb fbce 	bl	8013afa <pifRingBuffer_GetPointerPutting>
 801835e:	4603      	mov	r3, r0
 8018360:	b2e2      	uxtb	r2, r4
 8018362:	701a      	strb	r2, [r3, #0]
	p_owner->__check_xor ^= p_owner->__data_size;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018370:	b2db      	uxtb	r3, r3
 8018372:	4053      	eors	r3, r2
 8018374:	b2da      	uxtb	r2, r3
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018388:	4619      	mov	r1, r3
 801838a:	4610      	mov	r0, r2
 801838c:	f7fb fbd0 	bl	8013b30 <pifRingBuffer_PutByte>
 8018390:	4603      	mov	r3, r0
 8018392:	2b00      	cmp	r3, #0
 8018394:	d00c      	beq.n	80183b0 <pifMsp_SendAnswer+0x6c>

	pifRingBuffer_CommitPutting(&p_owner->__tx.answer_buffer);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	3324      	adds	r3, #36	; 0x24
 801839a:	4618      	mov	r0, r3
 801839c:	f7fb fb8d 	bl	8013aba <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	6a1b      	ldr	r3, [r3, #32]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7fc f944 	bl	8014634 <pifTask_SetTrigger>
	return TRUE;
 80183ac:	2301      	movs	r3, #1
 80183ae:	e01a      	b.n	80183e6 <pifMsp_SendAnswer+0xa2>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 80183b0:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	3324      	adds	r3, #36	; 0x24
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7fb fb8d 	bl	8013ad6 <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80183bc:	4b0c      	ldr	r3, [pc, #48]	; (80183f0 <pifMsp_SendAnswer+0xac>)
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d102      	bne.n	80183ca <pifMsp_SendAnswer+0x86>
 80183c4:	4b0a      	ldr	r3, [pc, #40]	; (80183f0 <pifMsp_SendAnswer+0xac>)
 80183c6:	2204      	movs	r2, #4
 80183c8:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	881b      	ldrh	r3, [r3, #0]
 80183ce:	461a      	mov	r2, r3
 80183d0:	4b07      	ldr	r3, [pc, #28]	; (80183f0 <pifMsp_SendAnswer+0xac>)
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	9300      	str	r3, [sp, #0]
 80183d6:	4613      	mov	r3, r2
 80183d8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80183dc:	4905      	ldr	r1, [pc, #20]	; (80183f4 <pifMsp_SendAnswer+0xb0>)
 80183de:	2004      	movs	r0, #4
 80183e0:	f7fb f864 	bl	80134ac <pifLog_Printf>
#endif
	return FALSE;
 80183e4:	2300      	movs	r3, #0
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	370c      	adds	r7, #12
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd90      	pop	{r4, r7, pc}
 80183ee:	bf00      	nop
 80183f0:	20001c55 	.word	0x20001c55
 80183f4:	08027e54 	.word	0x08027e54

080183f8 <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 80183f8:	b480      	push	{r7}
 80183fa:	b085      	sub	sp, #20
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	60b9      	str	r1, [r7, #8]
 8018402:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	68ba      	ldr	r2, [r7, #8]
 8018408:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	687a      	ldr	r2, [r7, #4]
 801840e:	61da      	str	r2, [r3, #28]
}
 8018410:	bf00      	nop
 8018412:	3714      	adds	r7, #20
 8018414:	46bd      	mov	sp, r7
 8018416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841a:	4770      	bx	lr

0801841c <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	460b      	mov	r3, r1
 8018426:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 8018428:	2300      	movs	r3, #0
 801842a:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018432:	2b02      	cmp	r3, #2
 8018434:	d04f      	beq.n	80184d6 <_processRcPpm+0xba>
 8018436:	2b02      	cmp	r3, #2
 8018438:	f300 80b5 	bgt.w	80185a6 <_processRcPpm+0x18a>
 801843c:	2b00      	cmp	r3, #0
 801843e:	d002      	beq.n	8018446 <_processRcPpm+0x2a>
 8018440:	2b01      	cmp	r3, #1
 8018442:	d010      	beq.n	8018466 <_processRcPpm+0x4a>
 8018444:	e0af      	b.n	80185a6 <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801844c:	887a      	ldrh	r2, [r7, #2]
 801844e:	429a      	cmp	r2, r3
 8018450:	f0c0 80a4 	bcc.w	801859c <_processRcPpm+0x180>
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801845a:	3301      	adds	r3, #1
 801845c:	b2da      	uxtb	r2, r3
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8018464:	e09a      	b.n	801859c <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801846c:	887a      	ldrh	r2, [r7, #2]
 801846e:	429a      	cmp	r2, r3
 8018470:	d224      	bcs.n	80184bc <_processRcPpm+0xa0>
			p_owner->_channel++;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018478:	b2db      	uxtb	r3, r3
 801847a:	3301      	adds	r3, #1
 801847c:	b2db      	uxtb	r3, r3
 801847e:	b25a      	sxtb	r2, r3
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801848c:	461a      	mov	r2, r3
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018494:	429a      	cmp	r2, r3
 8018496:	f280 8083 	bge.w	80185a0 <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80184a0:	461a      	mov	r2, r3
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	789b      	ldrb	r3, [r3, #2]
 80184a6:	429a      	cmp	r2, r3
 80184a8:	db7a      	blt.n	80185a0 <_processRcPpm+0x184>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80184b0:	b2db      	uxtb	r3, r3
 80184b2:	3301      	adds	r3, #1
 80184b4:	b2da      	uxtb	r2, r3
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 80184ba:	e071      	b.n	80185a0 <_processRcPpm+0x184>
			p_owner->_channel = -1;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	22ff      	movs	r2, #255	; 0xff
 80184c0:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80184ca:	3301      	adds	r3, #1
 80184cc:	b2da      	uxtb	r2, r3
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 80184d4:	e064      	b.n	80185a0 <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80184dc:	887a      	ldrh	r2, [r7, #2]
 80184de:	429a      	cmp	r2, r3
 80184e0:	d257      	bcs.n	8018592 <_processRcPpm+0x176>
			p_owner->_channel++;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	3301      	adds	r3, #1
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	b25a      	sxtb	r2, r3
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80184fc:	461a      	mov	r2, r3
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018504:	429a      	cmp	r2, r3
 8018506:	da4d      	bge.n	80185a4 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	b2db      	uxtb	r3, r3
 8018514:	2b00      	cmp	r3, #0
 8018516:	d019      	beq.n	801854c <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801851c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8018520:	b29b      	uxth	r3, r3
 8018522:	461a      	mov	r2, r3
 8018524:	887b      	ldrh	r3, [r7, #2]
 8018526:	4293      	cmp	r3, r2
 8018528:	d31b      	bcc.n	8018562 <_processRcPpm+0x146>
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801852e:	887a      	ldrh	r2, [r7, #2]
 8018530:	429a      	cmp	r2, r3
 8018532:	d816      	bhi.n	8018562 <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801853e:	005b      	lsls	r3, r3, #1
 8018540:	4413      	add	r3, r2
 8018542:	887a      	ldrh	r2, [r7, #2]
 8018544:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 8018546:	887b      	ldrh	r3, [r7, #2]
 8018548:	81fb      	strh	r3, [r7, #14]
 801854a:	e00a      	b.n	8018562 <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018556:	005b      	lsls	r3, r3, #1
 8018558:	4413      	add	r3, r2
 801855a:	887a      	ldrh	r2, [r7, #2]
 801855c:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 801855e:	887b      	ldrh	r3, [r7, #2]
 8018560:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 8018562:	89fb      	ldrh	r3, [r7, #14]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d01d      	beq.n	80185a4 <_processRcPpm+0x188>
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801856e:	3301      	adds	r3, #1
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	7892      	ldrb	r2, [r2, #2]
 8018574:	4293      	cmp	r3, r2
 8018576:	db15      	blt.n	80185a4 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	699b      	ldr	r3, [r3, #24]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d011      	beq.n	80185a4 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	699b      	ldr	r3, [r3, #24]
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	687a      	ldr	r2, [r7, #4]
 8018588:	6d11      	ldr	r1, [r2, #80]	; 0x50
 801858a:	687a      	ldr	r2, [r7, #4]
 801858c:	69d2      	ldr	r2, [r2, #28]
 801858e:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 8018590:	e008      	b.n	80185a4 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	22ff      	movs	r2, #255	; 0xff
 8018596:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 801859a:	e003      	b.n	80185a4 <_processRcPpm+0x188>
		break;
 801859c:	bf00      	nop
 801859e:	e002      	b.n	80185a6 <_processRcPpm+0x18a>
		break;
 80185a0:	bf00      	nop
 80185a2:	e000      	b.n	80185a6 <_processRcPpm+0x18a>
		break;
 80185a4:	bf00      	nop
	}
	return rtn;
 80185a6:	89fb      	ldrh	r3, [r7, #14]
}
 80185a8:	4618      	mov	r0, r3
 80185aa:	3710      	adds	r7, #16
 80185ac:	46bd      	mov	sp, r7
 80185ae:	bd80      	pop	{r7, pc}

080185b0 <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	4608      	mov	r0, r1
 80185ba:	4611      	mov	r1, r2
 80185bc:	461a      	mov	r2, r3
 80185be:	4603      	mov	r3, r0
 80185c0:	817b      	strh	r3, [r7, #10]
 80185c2:	460b      	mov	r3, r1
 80185c4:	727b      	strb	r3, [r7, #9]
 80185c6:	4613      	mov	r3, r2
 80185c8:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d104      	bne.n	80185da <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 80185d0:	4b1e      	ldr	r3, [pc, #120]	; (801864c <pifRcPpm_Init+0x9c>)
 80185d2:	2201      	movs	r2, #1
 80185d4:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80185d6:	2300      	movs	r3, #0
 80185d8:	e033      	b.n	8018642 <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 80185da:	2254      	movs	r2, #84	; 0x54
 80185dc:	2100      	movs	r1, #0
 80185de:	68f8      	ldr	r0, [r7, #12]
 80185e0:	f00a fd2c 	bl	802303c <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 80185e4:	7a7b      	ldrb	r3, [r7, #9]
 80185e6:	4619      	mov	r1, r3
 80185e8:	2002      	movs	r0, #2
 80185ea:	f00a fcd7 	bl	8022f9c <calloc>
 80185ee:	4603      	mov	r3, r0
 80185f0:	461a      	mov	r2, r3
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d104      	bne.n	8018608 <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 80185fe:	4b13      	ldr	r3, [pc, #76]	; (801864c <pifRcPpm_Init+0x9c>)
 8018600:	2203      	movs	r2, #3
 8018602:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018604:	2300      	movs	r3, #0
 8018606:	e01c      	b.n	8018642 <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018608:	897b      	ldrh	r3, [r7, #10]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d106      	bne.n	801861c <pifRcPpm_Init+0x6c>
 801860e:	4b10      	ldr	r3, [pc, #64]	; (8018650 <pifRcPpm_Init+0xa0>)
 8018610:	881b      	ldrh	r3, [r3, #0]
 8018612:	1c5a      	adds	r2, r3, #1
 8018614:	b291      	uxth	r1, r2
 8018616:	4a0e      	ldr	r2, [pc, #56]	; (8018650 <pifRcPpm_Init+0xa0>)
 8018618:	8011      	strh	r1, [r2, #0]
 801861a:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	897a      	ldrh	r2, [r7, #10]
 8018620:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	2200      	movs	r2, #0
 8018626:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	22ff      	movs	r2, #255	; 0xff
 801862c:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	7a7a      	ldrb	r2, [r7, #9]
 8018634:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	88fa      	ldrh	r2, [r7, #6]
 801863c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 8018640:	2301      	movs	r3, #1
}
 8018642:	4618      	mov	r0, r3
 8018644:	3710      	adds	r7, #16
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	20001c55 	.word	0x20001c55
 8018650:	2000011c 	.word	0x2000011c

08018654 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 8018654:	b480      	push	{r7}
 8018656:	b085      	sub	sp, #20
 8018658:	af00      	add	r7, sp, #0
 801865a:	60f8      	str	r0, [r7, #12]
 801865c:	60b9      	str	r1, [r7, #8]
 801865e:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 8018660:	68fa      	ldr	r2, [r7, #12]
 8018662:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8018666:	f043 0301 	orr.w	r3, r3, #1
 801866a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018674:	b299      	uxth	r1, r3
 8018676:	68fa      	ldr	r2, [r7, #12]
 8018678:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 801867a:	f361 034f 	bfi	r3, r1, #1, #15
 801867e:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	b29a      	uxth	r2, r3
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 8018688:	2301      	movs	r3, #1
}
 801868a:	4618      	mov	r0, r3
 801868c:	3714      	adds	r7, #20
 801868e:	46bd      	mov	sp, r7
 8018690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018694:	4770      	bx	lr

08018696 <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 8018696:	b580      	push	{r7, lr}
 8018698:	b084      	sub	sp, #16
 801869a:	af00      	add	r7, sp, #0
 801869c:	6078      	str	r0, [r7, #4]
 801869e:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 80186a0:	2300      	movs	r3, #0
 80186a2:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80186aa:	687a      	ldr	r2, [r7, #4]
 80186ac:	3305      	adds	r3, #5
 80186ae:	00db      	lsls	r3, r3, #3
 80186b0:	4413      	add	r3, r2
 80186b2:	683a      	ldr	r2, [r7, #0]
 80186b4:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80186bc:	687a      	ldr	r2, [r7, #4]
 80186be:	3305      	adds	r3, #5
 80186c0:	00db      	lsls	r3, r3, #3
 80186c2:	4413      	add	r3, r2
 80186c4:	685b      	ldr	r3, [r3, #4]
 80186c6:	b29a      	uxth	r2, r3
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80186ce:	6879      	ldr	r1, [r7, #4]
 80186d0:	3305      	adds	r3, #5
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	440b      	add	r3, r1
 80186d6:	685b      	ldr	r3, [r3, #4]
 80186d8:	b29b      	uxth	r3, r3
 80186da:	1ad3      	subs	r3, r2, r3
 80186dc:	b29b      	uxth	r3, r3
 80186de:	4619      	mov	r1, r3
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f7ff fe9b 	bl	801841c <_processRcPpm>
 80186e6:	4603      	mov	r3, r0
 80186e8:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80186fc:	3301      	adds	r3, #1
 80186fe:	b2db      	uxtb	r3, r3
 8018700:	f003 0303 	and.w	r3, r3, #3
 8018704:	b2da      	uxtb	r2, r3
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018712:	2b03      	cmp	r3, #3
 8018714:	d807      	bhi.n	8018726 <pifRcPpm_sigTick+0x90>
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801871c:	3301      	adds	r3, #1
 801871e:	b2da      	uxtb	r2, r3
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 8018726:	89fb      	ldrh	r3, [r7, #14]
}
 8018728:	4618      	mov	r0, r3
 801872a:	3710      	adds	r7, #16
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b082      	sub	sp, #8
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	460b      	mov	r3, r1
 801873a:	807b      	strh	r3, [r7, #2]
 801873c:	4613      	mov	r3, r2
 801873e:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d104      	bne.n	8018750 <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 8018746:	4b25      	ldr	r3, [pc, #148]	; (80187dc <pifRcPwm_Init+0xac>)
 8018748:	2201      	movs	r2, #1
 801874a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801874c:	2300      	movs	r3, #0
 801874e:	e041      	b.n	80187d4 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 8018750:	2230      	movs	r2, #48	; 0x30
 8018752:	2100      	movs	r1, #0
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f00a fc71 	bl	802303c <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 801875a:	787b      	ldrb	r3, [r7, #1]
 801875c:	4619      	mov	r1, r3
 801875e:	2024      	movs	r0, #36	; 0x24
 8018760:	f00a fc1c 	bl	8022f9c <calloc>
 8018764:	4603      	mov	r3, r0
 8018766:	461a      	mov	r2, r3
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018770:	2b00      	cmp	r3, #0
 8018772:	d108      	bne.n	8018786 <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 8018774:	4b19      	ldr	r3, [pc, #100]	; (80187dc <pifRcPwm_Init+0xac>)
 8018776:	2203      	movs	r2, #3
 8018778:	701a      	strb	r2, [r3, #0]
        goto fail;
 801877a:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f000 f831 	bl	80187e4 <pifRcPwm_Clear>
	return FALSE;
 8018782:	2300      	movs	r3, #0
 8018784:	e026      	b.n	80187d4 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018786:	787b      	ldrb	r3, [r7, #1]
 8018788:	4619      	mov	r1, r3
 801878a:	2002      	movs	r0, #2
 801878c:	f00a fc06 	bl	8022f9c <calloc>
 8018790:	4603      	mov	r3, r0
 8018792:	461a      	mov	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801879c:	2b00      	cmp	r3, #0
 801879e:	d104      	bne.n	80187aa <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 80187a0:	4b0e      	ldr	r3, [pc, #56]	; (80187dc <pifRcPwm_Init+0xac>)
 80187a2:	2203      	movs	r2, #3
 80187a4:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80187a6:	2300      	movs	r3, #0
 80187a8:	e014      	b.n	80187d4 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 80187aa:	887b      	ldrh	r3, [r7, #2]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d106      	bne.n	80187be <pifRcPwm_Init+0x8e>
 80187b0:	4b0b      	ldr	r3, [pc, #44]	; (80187e0 <pifRcPwm_Init+0xb0>)
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	1c5a      	adds	r2, r3, #1
 80187b6:	b291      	uxth	r1, r2
 80187b8:	4a09      	ldr	r2, [pc, #36]	; (80187e0 <pifRcPwm_Init+0xb0>)
 80187ba:	8011      	strh	r1, [r2, #0]
 80187bc:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	887a      	ldrh	r2, [r7, #2]
 80187c2:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2200      	movs	r2, #0
 80187c8:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	787a      	ldrb	r2, [r7, #1]
 80187ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 80187d2:	2301      	movs	r3, #1
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3708      	adds	r7, #8
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}
 80187dc:	20001c55 	.word	0x20001c55
 80187e0:	2000011c 	.word	0x2000011c

080187e4 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d007      	beq.n	8018804 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f8:	4618      	mov	r0, r3
 80187fa:	f00a fc09 	bl	8023010 <free>
		p_owner->__p_channel = NULL;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2200      	movs	r2, #0
 8018802:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018808:	2b00      	cmp	r3, #0
 801880a:	d007      	beq.n	801881c <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018810:	4618      	mov	r0, r3
 8018812:	f00a fbfd 	bl	8023010 <free>
		p_owner->__p_data = NULL;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	2200      	movs	r2, #0
 801881a:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 801881c:	bf00      	nop
 801881e:	3708      	adds	r7, #8
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}

08018824 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 8018824:	b480      	push	{r7}
 8018826:	b085      	sub	sp, #20
 8018828:	af00      	add	r7, sp, #0
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 8018830:	68fa      	ldr	r2, [r7, #12]
 8018832:	f892 3020 	ldrb.w	r3, [r2, #32]
 8018836:	f043 0301 	orr.w	r3, r3, #1
 801883a:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018844:	b299      	uxth	r1, r3
 8018846:	68fa      	ldr	r2, [r7, #12]
 8018848:	8c13      	ldrh	r3, [r2, #32]
 801884a:	f361 034f 	bfi	r3, r1, #1, #15
 801884e:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	b29a      	uxth	r2, r3
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 8018858:	2301      	movs	r3, #1
}
 801885a:	4618      	mov	r0, r3
 801885c:	3714      	adds	r7, #20
 801885e:	46bd      	mov	sp, r7
 8018860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018864:	4770      	bx	lr

08018866 <pifGy86_Detect>:
    memset(&param, 0, sizeof(PifGy86Param));
    return &param;
}

BOOL pifGy86_Detect(PifI2cPort* p_i2c)
{
 8018866:	b580      	push	{r7, lr}
 8018868:	b082      	sub	sp, #8
 801886a:	af00      	add	r7, sp, #0
 801886c:	6078      	str	r0, [r7, #4]
    if (!pifMpu60x0_Detect(p_i2c, MPU60X0_I2C_ADDR(0))) return FALSE;
 801886e:	2168      	movs	r1, #104	; 0x68
 8018870:	6878      	ldr	r0, [r7, #4]
 8018872:	f001 fa6f 	bl	8019d54 <pifMpu60x0_Detect>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d101      	bne.n	8018880 <pifGy86_Detect+0x1a>
 801887c:	2300      	movs	r3, #0
 801887e:	e000      	b.n	8018882 <pifGy86_Detect+0x1c>
//    if (!pifHmc5883_Detect(p_i2c)) return FALSE;
    return TRUE;
 8018880:	2301      	movs	r3, #1
}
 8018882:	4618      	mov	r0, r3
 8018884:	3708      	adds	r7, #8
 8018886:	46bd      	mov	sp, r7
 8018888:	bd80      	pop	{r7, pc}
	...

0801888c <pifGy86_Init>:

BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifGy86Param* p_param, PifImuSensor* p_imu_sensor)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b08e      	sub	sp, #56	; 0x38
 8018890:	af02      	add	r7, sp, #8
 8018892:	60f8      	str	r0, [r7, #12]
 8018894:	607a      	str	r2, [r7, #4]
 8018896:	603b      	str	r3, [r7, #0]
 8018898:	460b      	mov	r3, r1
 801889a:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d005      	beq.n	80188ae <pifGy86_Init+0x22>
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d002      	beq.n	80188ae <pifGy86_Init+0x22>
 80188a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d104      	bne.n	80188b8 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 80188ae:	4b16      	ldr	r3, [pc, #88]	; (8018908 <pifGy86_Init+0x7c>)
 80188b0:	2201      	movs	r2, #1
 80188b2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80188b4:	2300      	movs	r3, #0
 80188b6:	e212      	b.n	8018cde <pifGy86_Init+0x452>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 80188b8:	2264      	movs	r2, #100	; 0x64
 80188ba:	2100      	movs	r1, #0
 80188bc:	68f8      	ldr	r0, [r7, #12]
 80188be:	f00a fbbd 	bl	802303c <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	1d18      	adds	r0, r3, #4
 80188c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188c8:	9300      	str	r3, [sp, #0]
 80188ca:	2368      	movs	r3, #104	; 0x68
 80188cc:	687a      	ldr	r2, [r7, #4]
 80188ce:	2100      	movs	r1, #0
 80188d0:	f001 fa86 	bl	8019de0 <pifMpu60x0_Init>
 80188d4:	4603      	mov	r3, r0
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	f000 81c8 	beq.w	8018c6c <pifGy86_Init+0x3e0>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	68db      	ldr	r3, [r3, #12]
 80188e0:	2200      	movs	r2, #0
 80188e2:	2119      	movs	r1, #25
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7f9 fe23 	bl	8012530 <pifI2cDevice_WriteRegByte>
 80188ea:	4603      	mov	r3, r0
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f000 81bf 	beq.w	8018c70 <pifGy86_Init+0x3e4>

    pwr_mgmt_1.byte = 0;
 80188f2:	2300      	movs	r3, #0
 80188f4:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_param ? p_param->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d007      	beq.n	801890c <pifGy86_Init+0x80>
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	785b      	ldrb	r3, [r3, #1]
 8018900:	f003 0307 	and.w	r3, r3, #7
 8018904:	b2da      	uxtb	r2, r3
 8018906:	e002      	b.n	801890e <pifGy86_Init+0x82>
 8018908:	20001c55 	.word	0x20001c55
 801890c:	2203      	movs	r2, #3
 801890e:	7d3b      	ldrb	r3, [r7, #20]
 8018910:	f362 0302 	bfi	r3, r2, #0, #3
 8018914:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	68db      	ldr	r3, [r3, #12]
 801891a:	7d3a      	ldrb	r2, [r7, #20]
 801891c:	216b      	movs	r1, #107	; 0x6b
 801891e:	4618      	mov	r0, r3
 8018920:	f7f9 fe06 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018924:	4603      	mov	r3, r0
 8018926:	2b00      	cmp	r3, #0
 8018928:	f000 81a4 	beq.w	8018c74 <pifGy86_Init+0x3e8>

    if (p_param) {
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d03a      	beq.n	80189a8 <pifGy86_Init+0x11c>
    	if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, &config.byte)) goto fail;
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	68db      	ldr	r3, [r3, #12]
 8018936:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801893a:	211a      	movs	r1, #26
 801893c:	4618      	mov	r0, r3
 801893e:	f7f9 fcc7 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8018942:	4603      	mov	r3, r0
 8018944:	2b00      	cmp	r3, #0
 8018946:	f000 8197 	beq.w	8018c78 <pifGy86_Init+0x3ec>
   		config.bit.dlpf_cfg = p_param->mpu60x0_dlpf_cfg;
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	789b      	ldrb	r3, [r3, #2]
 801894e:	f003 0307 	and.w	r3, r3, #7
 8018952:	b2da      	uxtb	r2, r3
 8018954:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018958:	f362 0302 	bfi	r3, r2, #0, #3
 801895c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	68db      	ldr	r3, [r3, #12]
 8018964:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018968:	211a      	movs	r1, #26
 801896a:	4618      	mov	r0, r3
 801896c:	f7f9 fde0 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018970:	4603      	mov	r3, r0
 8018972:	2b00      	cmp	r3, #0
 8018974:	f000 8182 	beq.w	8018c7c <pifGy86_Init+0x3f0>

    	if (!pifMpu60x0_SetFsSel(&p_owner->_mpu6050, p_param->mpu60x0_fs_sel)) goto fail;
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	1d1a      	adds	r2, r3, #4
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	78db      	ldrb	r3, [r3, #3]
 8018980:	4619      	mov	r1, r3
 8018982:	4610      	mov	r0, r2
 8018984:	f001 fb10 	bl	8019fa8 <pifMpu60x0_SetFsSel>
 8018988:	4603      	mov	r3, r0
 801898a:	2b00      	cmp	r3, #0
 801898c:	f000 8178 	beq.w	8018c80 <pifGy86_Init+0x3f4>

        if (!pifMpu60x0_SetAfsSel(&p_owner->_mpu6050, p_param->mpu60x0_afs_sel)) goto fail;
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	1d1a      	adds	r2, r3, #4
 8018994:	683b      	ldr	r3, [r7, #0]
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	4619      	mov	r1, r3
 801899a:	4610      	mov	r0, r2
 801899c:	f001 fb23 	bl	8019fe6 <pifMpu60x0_SetAfsSel>
 80189a0:	4603      	mov	r3, r0
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f000 816e 	beq.w	8018c84 <pifGy86_Init+0x3f8>
    }

    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, &i2c_mst_ctrl.byte)) goto fail;
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	68db      	ldr	r3, [r3, #12]
 80189ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80189b0:	2124      	movs	r1, #36	; 0x24
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7f9 fc8c 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 8164 	beq.w	8018c88 <pifGy86_Init+0x3fc>
    i2c_mst_ctrl.bit.i2c_mst_clk = p_param->mpu60x0_i2c_mst_clk;
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	791b      	ldrb	r3, [r3, #4]
 80189c4:	f003 030f 	and.w	r3, r3, #15
 80189c8:	b2da      	uxtb	r2, r3
 80189ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80189ce:	f362 0303 	bfi	r3, r2, #0, #4
 80189d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	68db      	ldr	r3, [r3, #12]
 80189da:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80189de:	2124      	movs	r1, #36	; 0x24
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7f9 fda5 	bl	8012530 <pifI2cDevice_WriteRegByte>
 80189e6:	4603      	mov	r3, r0
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	f000 814f 	beq.w	8018c8c <pifGy86_Init+0x400>

    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, &int_pin_cfg.byte)) goto fail;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	f107 0218 	add.w	r2, r7, #24
 80189f6:	2137      	movs	r1, #55	; 0x37
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7f9 fc69 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	f000 8145 	beq.w	8018c90 <pifGy86_Init+0x404>
    int_pin_cfg.bit.int_rd_clear = TRUE;
 8018a06:	7e3b      	ldrb	r3, [r7, #24]
 8018a08:	f043 0310 	orr.w	r3, r3, #16
 8018a0c:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8018a0e:	7e3b      	ldrb	r3, [r7, #24]
 8018a10:	f043 0302 	orr.w	r3, r3, #2
 8018a14:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	68db      	ldr	r3, [r3, #12]
 8018a1a:	7e3a      	ldrb	r2, [r7, #24]
 8018a1c:	2137      	movs	r1, #55	; 0x37
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7f9 fd86 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018a24:	4603      	mov	r3, r0
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	f000 8134 	beq.w	8018c94 <pifGy86_Init+0x408>

    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, &int_enable.byte)) goto fail;
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	f107 021c 	add.w	r2, r7, #28
 8018a34:	2138      	movs	r1, #56	; 0x38
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7f9 fc4a 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	f000 812a 	beq.w	8018c98 <pifGy86_Init+0x40c>
    int_enable.bit.data_rdy_en = TRUE;
 8018a44:	7f3b      	ldrb	r3, [r7, #28]
 8018a46:	f043 0301 	orr.w	r3, r3, #1
 8018a4a:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	68db      	ldr	r3, [r3, #12]
 8018a50:	7f3a      	ldrb	r2, [r7, #28]
 8018a52:	2138      	movs	r1, #56	; 0x38
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7f9 fd6b 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	f000 811d 	beq.w	8018c9c <pifGy86_Init+0x410>

    pif_Delay1ms(100);
 8018a62:	2064      	movs	r0, #100	; 0x64
 8018a64:	f7f8 fb7c 	bl	8011160 <pif_Delay1ms>

    if (!pifHmc5883_Detect(p_i2c)) goto fail;
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f000 fb31 	bl	80190d0 <pifHmc5883_Detect>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	f000 8115 	beq.w	8018ca0 <pifGy86_Init+0x414>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	f103 0014 	add.w	r0, r3, #20
 8018a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a7e:	687a      	ldr	r2, [r7, #4]
 8018a80:	2100      	movs	r1, #0
 8018a82:	f000 fb77 	bl	8019174 <pifHmc5883_Init>
 8018a86:	4603      	mov	r3, r0
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f000 810b 	beq.w	8018ca4 <pifGy86_Init+0x418>

    if (p_param) {
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d039      	beq.n	8018b08 <pifGy86_Init+0x27c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8018a94:	7c3b      	ldrb	r3, [r7, #16]
 8018a96:	f36f 0301 	bfc	r3, #0, #2
 8018a9a:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_param->hmc5883_samples;
 8018a9c:	683b      	ldr	r3, [r7, #0]
 8018a9e:	7a1b      	ldrb	r3, [r3, #8]
 8018aa0:	f003 0303 	and.w	r3, r3, #3
 8018aa4:	b2da      	uxtb	r2, r3
 8018aa6:	7c3b      	ldrb	r3, [r7, #16]
 8018aa8:	f362 1346 	bfi	r3, r2, #5, #2
 8018aac:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_param->hmc5883_data_rate;
 8018aae:	683b      	ldr	r3, [r7, #0]
 8018ab0:	795b      	ldrb	r3, [r3, #5]
 8018ab2:	f003 0307 	and.w	r3, r3, #7
 8018ab6:	b2da      	uxtb	r2, r3
 8018ab8:	7c3b      	ldrb	r3, [r7, #16]
 8018aba:	f362 0384 	bfi	r3, r2, #2, #3
 8018abe:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac4:	7c3a      	ldrb	r2, [r7, #16]
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7f9 fd31 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	f000 80e9 	beq.w	8018ca8 <pifGy86_Init+0x41c>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_param->hmc5883_gain)) goto fail;
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	f103 0214 	add.w	r2, r3, #20
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	799b      	ldrb	r3, [r3, #6]
 8018ae0:	4619      	mov	r1, r3
 8018ae2:	4610      	mov	r0, r2
 8018ae4:	f000 fcea 	bl	80194bc <pifHmc5883_SetGain>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	f000 80de 	beq.w	8018cac <pifGy86_Init+0x420>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_param->hmc5883_mode)) goto fail;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	79db      	ldrb	r3, [r3, #7]
 8018af8:	2202      	movs	r2, #2
 8018afa:	2102      	movs	r1, #2
 8018afc:	f7f9 fd2e 	bl	801255c <pifI2cDevice_WriteRegBit8>
 8018b00:	4603      	mov	r3, r0
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	f000 80d4 	beq.w	8018cb0 <pifGy86_Init+0x424>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	68d8      	ldr	r0, [r3, #12]
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	f240 1201 	movw	r2, #257	; 0x101
 8018b12:	2137      	movs	r1, #55	; 0x37
 8018b14:	f7f9 fd22 	bl	801255c <pifI2cDevice_WriteRegBit8>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	f000 80ca 	beq.w	8018cb4 <pifGy86_Init+0x428>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01)) goto fail; // DATA_RDY_EN interrupt enable
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	68db      	ldr	r3, [r3, #12]
 8018b24:	2201      	movs	r2, #1
 8018b26:	2138      	movs	r1, #56	; 0x38
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f7f9 fd01 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	f000 80c1 	beq.w	8018cb8 <pifGy86_Init+0x42c>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	68d8      	ldr	r0, [r3, #12]
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	f240 5201 	movw	r2, #1281	; 0x501
 8018b40:	216a      	movs	r1, #106	; 0x6a
 8018b42:	f7f9 fd0b 	bl	801255c <pifI2cDevice_WriteRegBit8>
 8018b46:	4603      	mov	r3, r0
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	f000 80b7 	beq.w	8018cbc <pifGy86_Init+0x430>

    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8018b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b52:	221e      	movs	r2, #30
 8018b54:	f362 0306 	bfi	r3, r2, #0, #7
 8018b58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8018b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	68db      	ldr	r3, [r3, #12]
 8018b6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8018b70:	2125      	movs	r1, #37	; 0x25
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7f9 fcdc 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f000 80a0 	beq.w	8018cc0 <pifGy86_Init+0x434>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	68db      	ldr	r3, [r3, #12]
 8018b84:	2203      	movs	r2, #3
 8018b86:	2126      	movs	r1, #38	; 0x26
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7f9 fcd1 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	f000 8097 	beq.w	8018cc4 <pifGy86_Init+0x438>

    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, &i2c_slv_ctrl.byte)) goto fail;
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	68db      	ldr	r3, [r3, #12]
 8018b9a:	f107 0220 	add.w	r2, r7, #32
 8018b9e:	2127      	movs	r1, #39	; 0x27
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7f9 fb95 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	f000 808d 	beq.w	8018cc8 <pifGy86_Init+0x43c>
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 8018bae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018bb2:	2206      	movs	r2, #6
 8018bb4:	f362 0303 	bfi	r3, r2, #0, #4
 8018bb8:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 8018bbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bc4:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	68db      	ldr	r3, [r3, #12]
 8018bcc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018bd0:	2127      	movs	r1, #39	; 0x27
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7f9 fcac 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d076      	beq.n	8018ccc <pifGy86_Init+0x440>

    if (p_param && p_param->ms5611_evt_read) {
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d02a      	beq.n	8018c3a <pifGy86_Init+0x3ae>
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	68db      	ldr	r3, [r3, #12]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d026      	beq.n	8018c3a <pifGy86_Init+0x3ae>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8018bf2:	2377      	movs	r3, #119	; 0x77
 8018bf4:	687a      	ldr	r2, [r7, #4]
 8018bf6:	2100      	movs	r1, #0
 8018bf8:	f001 fece 	bl	801a998 <pifMs5611_Init>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d066      	beq.n	8018cd0 <pifGy86_Init+0x444>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_param->ms5611_osr);
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	7a5b      	ldrb	r3, [r3, #9]
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	4619      	mov	r1, r3
 8018c10:	4610      	mov	r0, r2
 8018c12:	f001 ff5b 	bl	801aacc <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_param->ms5611_read_period, p_param->ms5611_evt_read, FALSE)) goto fail;
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	8959      	ldrh	r1, [r3, #10]
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	68da      	ldr	r2, [r3, #12]
 8018c24:	2300      	movs	r3, #0
 8018c26:	f001 ff8d 	bl	801ab44 <pifMs5611_AddTaskForReading>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d051      	beq.n	8018cd4 <pifGy86_Init+0x448>
        p_owner->_ms5611._p_task->disallow_yield_id = p_param->disallow_yield_id;
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c34:	683a      	ldr	r2, [r7, #0]
 8018c36:	7c12      	ldrb	r2, [r2, #16]
 8018c38:	715a      	strb	r2, [r3, #5]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018c3a:	897b      	ldrh	r3, [r7, #10]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d106      	bne.n	8018c4e <pifGy86_Init+0x3c2>
 8018c40:	4b29      	ldr	r3, [pc, #164]	; (8018ce8 <pifGy86_Init+0x45c>)
 8018c42:	881b      	ldrh	r3, [r3, #0]
 8018c44:	1c5a      	adds	r2, r3, #1
 8018c46:	b291      	uxth	r1, r2
 8018c48:	4a27      	ldr	r2, [pc, #156]	; (8018ce8 <pifGy86_Init+0x45c>)
 8018c4a:	8011      	strh	r1, [r2, #0]
 8018c4c:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	897a      	ldrh	r2, [r7, #10]
 8018c52:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	2200      	movs	r2, #0
 8018c58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 8018c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c5e:	4a23      	ldr	r2, [pc, #140]	; (8018cec <pifGy86_Init+0x460>)
 8018c60:	62da      	str	r2, [r3, #44]	; 0x2c
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8018c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c64:	68fa      	ldr	r2, [r7, #12]
 8018c66:	631a      	str	r2, [r3, #48]	; 0x30
    return TRUE;
 8018c68:	2301      	movs	r3, #1
 8018c6a:	e038      	b.n	8018cde <pifGy86_Init+0x452>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8018c6c:	bf00      	nop
 8018c6e:	e032      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8018c70:	bf00      	nop
 8018c72:	e030      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018c74:	bf00      	nop
 8018c76:	e02e      	b.n	8018cd6 <pifGy86_Init+0x44a>
    	if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, &config.byte)) goto fail;
 8018c78:	bf00      	nop
 8018c7a:	e02c      	b.n	8018cd6 <pifGy86_Init+0x44a>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8018c7c:	bf00      	nop
 8018c7e:	e02a      	b.n	8018cd6 <pifGy86_Init+0x44a>
    	if (!pifMpu60x0_SetFsSel(&p_owner->_mpu6050, p_param->mpu60x0_fs_sel)) goto fail;
 8018c80:	bf00      	nop
 8018c82:	e028      	b.n	8018cd6 <pifGy86_Init+0x44a>
        if (!pifMpu60x0_SetAfsSel(&p_owner->_mpu6050, p_param->mpu60x0_afs_sel)) goto fail;
 8018c84:	bf00      	nop
 8018c86:	e026      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, &i2c_mst_ctrl.byte)) goto fail;
 8018c88:	bf00      	nop
 8018c8a:	e024      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8018c8c:	bf00      	nop
 8018c8e:	e022      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, &int_pin_cfg.byte)) goto fail;
 8018c90:	bf00      	nop
 8018c92:	e020      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8018c94:	bf00      	nop
 8018c96:	e01e      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, &int_enable.byte)) goto fail;
 8018c98:	bf00      	nop
 8018c9a:	e01c      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8018c9c:	bf00      	nop
 8018c9e:	e01a      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifHmc5883_Detect(p_i2c)) goto fail;
 8018ca0:	bf00      	nop
 8018ca2:	e018      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8018ca4:	bf00      	nop
 8018ca6:	e016      	b.n	8018cd6 <pifGy86_Init+0x44a>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018ca8:	bf00      	nop
 8018caa:	e014      	b.n	8018cd6 <pifGy86_Init+0x44a>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_param->hmc5883_gain)) goto fail;
 8018cac:	bf00      	nop
 8018cae:	e012      	b.n	8018cd6 <pifGy86_Init+0x44a>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_param->hmc5883_mode)) goto fail;
 8018cb0:	bf00      	nop
 8018cb2:	e010      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8018cb4:	bf00      	nop
 8018cb6:	e00e      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01)) goto fail; // DATA_RDY_EN interrupt enable
 8018cb8:	bf00      	nop
 8018cba:	e00c      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8018cbc:	bf00      	nop
 8018cbe:	e00a      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 8018cc0:	bf00      	nop
 8018cc2:	e008      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 8018cc4:	bf00      	nop
 8018cc6:	e006      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_ReadRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, &i2c_slv_ctrl.byte)) goto fail;
 8018cc8:	bf00      	nop
 8018cca:	e004      	b.n	8018cd6 <pifGy86_Init+0x44a>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 8018ccc:	bf00      	nop
 8018cce:	e002      	b.n	8018cd6 <pifGy86_Init+0x44a>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 8018cd0:	bf00      	nop
 8018cd2:	e000      	b.n	8018cd6 <pifGy86_Init+0x44a>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_param->ms5611_read_period, p_param->ms5611_evt_read, FALSE)) goto fail;
 8018cd4:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 8018cd6:	68f8      	ldr	r0, [r7, #12]
 8018cd8:	f000 f80a 	bl	8018cf0 <pifGy86_Clear>
	return FALSE;
 8018cdc:	2300      	movs	r3, #0
}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	3730      	adds	r7, #48	; 0x30
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	bf00      	nop
 8018ce8:	2000011c 	.word	0x2000011c
 8018cec:	08018d1f 	.word	0x08018d1f

08018cf0 <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b082      	sub	sp, #8
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	332c      	adds	r3, #44	; 0x2c
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	f001 fec1 	bl	801aa84 <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	3314      	adds	r3, #20
 8018d06:	4618      	mov	r0, r3
 8018d08:	f000 fbc0 	bl	801948c <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	3304      	adds	r3, #4
 8018d10:	4618      	mov	r0, r3
 8018d12:	f001 f931 	bl	8019f78 <pifMpu60x0_Clear>
}
 8018d16:	bf00      	nop
 8018d18:	3708      	adds	r7, #8
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}

08018d1e <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 8018d1e:	b580      	push	{r7, lr}
 8018d20:	b084      	sub	sp, #16
 8018d22:	af00      	add	r7, sp, #0
 8018d24:	6078      	str	r0, [r7, #4]
 8018d26:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	68d8      	ldr	r0, [r3, #12]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8018d32:	3349      	adds	r3, #73	; 0x49
 8018d34:	b2d9      	uxtb	r1, r3
 8018d36:	f107 0208 	add.w	r2, r7, #8
 8018d3a:	2306      	movs	r3, #6
 8018d3c:	f7f9 fb00 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 8018d40:	4603      	mov	r3, r0
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d101      	bne.n	8018d4a <pifGy86_ReadMag+0x2c>
 8018d46:	2300      	movs	r3, #0
 8018d48:	e04d      	b.n	8018de6 <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8018d4a:	7a3b      	ldrb	r3, [r7, #8]
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	021b      	lsls	r3, r3, #8
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	7a7b      	ldrb	r3, [r7, #9]
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	4413      	add	r3, r2
 8018d58:	b29b      	uxth	r3, r3
 8018d5a:	b21b      	sxth	r3, r3
 8018d5c:	ee07 3a90 	vmov	s15, r3
 8018d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	edd3 7a05 	vldr	s15, [r3, #20]
 8018d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d72:	ee17 3a90 	vmov	r3, s15
 8018d76:	b21a      	sxth	r2, r3
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8018d7c:	7abb      	ldrb	r3, [r7, #10]
 8018d7e:	b29b      	uxth	r3, r3
 8018d80:	021b      	lsls	r3, r3, #8
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	7afb      	ldrb	r3, [r7, #11]
 8018d86:	b29b      	uxth	r3, r3
 8018d88:	4413      	add	r3, r2
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	b21b      	sxth	r3, r3
 8018d8e:	ee07 3a90 	vmov	s15, r3
 8018d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	edd3 7a07 	vldr	s15, [r3, #28]
 8018d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	3304      	adds	r3, #4
 8018da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018da8:	ee17 2a90 	vmov	r2, s15
 8018dac:	b212      	sxth	r2, r2
 8018dae:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 8018db0:	7b3b      	ldrb	r3, [r7, #12]
 8018db2:	b29b      	uxth	r3, r3
 8018db4:	021b      	lsls	r3, r3, #8
 8018db6:	b29a      	uxth	r2, r3
 8018db8:	7b7b      	ldrb	r3, [r7, #13]
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	4413      	add	r3, r2
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	b21b      	sxth	r3, r3
 8018dc2:	ee07 3a90 	vmov	s15, r3
 8018dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	edd3 7a06 	vldr	s15, [r3, #24]
 8018dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	3302      	adds	r3, #2
 8018dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ddc:	ee17 2a90 	vmov	r2, s15
 8018de0:	b212      	sxth	r2, r2
 8018de2:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8018de4:	2301      	movs	r3, #1
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	3710      	adds	r7, #16
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}

08018dee <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 8018dee:	b580      	push	{r7, lr}
 8018df0:	b084      	sub	sp, #16
 8018df2:	af00      	add	r7, sp, #0
 8018df4:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	68db      	ldr	r3, [r3, #12]
 8018dfa:	60fb      	str	r3, [r7, #12]

	switch (p_owner->__state) {
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	7d1b      	ldrb	r3, [r3, #20]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d002      	beq.n	8018e0a <_doTask+0x1c>
 8018e04:	2b03      	cmp	r3, #3
 8018e06:	d004      	beq.n	8018e12 <_doTask+0x24>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
		p_owner->__state = HSS_READY;
		break;

	default:
		break;
 8018e08:	e011      	b.n	8018e2e <_doTask+0x40>
		pifHcSr04_Trigger(p_owner);
 8018e0a:	68f8      	ldr	r0, [r7, #12]
 8018e0c:	f000 f866 	bl	8018edc <pifHcSr04_Trigger>
		break;
 8018e10:	e00d      	b.n	8018e2e <_doTask+0x40>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	685b      	ldr	r3, [r3, #4]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d005      	beq.n	8018e26 <_doTask+0x38>
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	68fa      	ldr	r2, [r7, #12]
 8018e20:	69d2      	ldr	r2, [r2, #28]
 8018e22:	4610      	mov	r0, r2
 8018e24:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	2200      	movs	r2, #0
 8018e2a:	751a      	strb	r2, [r3, #20]
		break;
 8018e2c:	bf00      	nop
	}
	return 0;
 8018e2e:	2300      	movs	r3, #0
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	3710      	adds	r7, #16
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}

08018e38 <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b084      	sub	sp, #16
 8018e3c:	af02      	add	r7, sp, #8
 8018e3e:	6078      	str	r0, [r7, #4]
 8018e40:	460b      	mov	r3, r1
 8018e42:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d104      	bne.n	8018e54 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018e4a:	4b1f      	ldr	r3, [pc, #124]	; (8018ec8 <pifHcSr04_Init+0x90>)
 8018e4c:	2201      	movs	r2, #1
 8018e4e:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018e50:	2300      	movs	r3, #0
 8018e52:	e035      	b.n	8018ec0 <pifHcSr04_Init+0x88>
	}

	if (!pif_act_timer1us) {
 8018e54:	4b1d      	ldr	r3, [pc, #116]	; (8018ecc <pifHcSr04_Init+0x94>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d104      	bne.n	8018e66 <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8018e5c:	4b1a      	ldr	r3, [pc, #104]	; (8018ec8 <pifHcSr04_Init+0x90>)
 8018e5e:	2209      	movs	r2, #9
 8018e60:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018e62:	2300      	movs	r3, #0
 8018e64:	e02c      	b.n	8018ec0 <pifHcSr04_Init+0x88>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8018e66:	2220      	movs	r2, #32
 8018e68:	2100      	movs	r1, #0
 8018e6a:	6878      	ldr	r0, [r7, #4]
 8018e6c:	f00a f8e6 	bl	802303c <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, _doTask, p_owner, FALSE);
 8018e70:	2300      	movs	r3, #0
 8018e72:	9300      	str	r3, [sp, #0]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	4a16      	ldr	r2, [pc, #88]	; (8018ed0 <pifHcSr04_Init+0x98>)
 8018e78:	2132      	movs	r1, #50	; 0x32
 8018e7a:	2002      	movs	r0, #2
 8018e7c:	f7fb fc60 	bl	8014740 <pifTaskManager_Add>
 8018e80:	4602      	mov	r2, r0
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	68db      	ldr	r3, [r3, #12]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d101      	bne.n	8018e92 <pifHcSr04_Init+0x5a>
 8018e8e:	2300      	movs	r3, #0
 8018e90:	e016      	b.n	8018ec0 <pifHcSr04_Init+0x88>
	p_owner->_p_task->name = "HC_SR04";
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	68db      	ldr	r3, [r3, #12]
 8018e96:	4a0f      	ldr	r2, [pc, #60]	; (8018ed4 <pifHcSr04_Init+0x9c>)
 8018e98:	601a      	str	r2, [r3, #0]

	if (id == PIF_ID_AUTO) id = pif_id++;
 8018e9a:	887b      	ldrh	r3, [r7, #2]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d106      	bne.n	8018eae <pifHcSr04_Init+0x76>
 8018ea0:	4b0d      	ldr	r3, [pc, #52]	; (8018ed8 <pifHcSr04_Init+0xa0>)
 8018ea2:	881b      	ldrh	r3, [r3, #0]
 8018ea4:	1c5a      	adds	r2, r3, #1
 8018ea6:	b291      	uxth	r1, r2
 8018ea8:	4a0b      	ldr	r2, [pc, #44]	; (8018ed8 <pifHcSr04_Init+0xa0>)
 8018eaa:	8011      	strh	r1, [r2, #0]
 8018eac:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	887a      	ldrh	r2, [r7, #2]
 8018eb2:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 8018eb4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	f000 f849 	bl	8018f50 <pifHcSr04_SetTemperature>

    return TRUE;
 8018ebe:	2301      	movs	r3, #1
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}
 8018ec8:	20001c55 	.word	0x20001c55
 8018ecc:	20001c7c 	.word	0x20001c7c
 8018ed0:	08018def 	.word	0x08018def
 8018ed4:	08027e80 	.word	0x08027e80
 8018ed8:	2000011c 	.word	0x2000011c

08018edc <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b082      	sub	sp, #8
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	2001      	movs	r0, #1
 8018eea:	4798      	blx	r3
	pif_Delay1us(11);
 8018eec:	200b      	movs	r0, #11
 8018eee:	f7f8 f953 	bl	8011198 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	2000      	movs	r0, #0
 8018ef8:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	2201      	movs	r2, #1
 8018efe:	751a      	strb	r2, [r3, #20]
}
 8018f00:	bf00      	nop
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	460b      	mov	r3, r1
 8018f12:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d002      	beq.n	8018f20 <pifHcSr04_StartTrigger+0x18>
 8018f1a:	887b      	ldrh	r3, [r7, #2]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d104      	bne.n	8018f2a <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 8018f20:	4b0a      	ldr	r3, [pc, #40]	; (8018f4c <pifHcSr04_StartTrigger+0x44>)
 8018f22:	2201      	movs	r2, #1
 8018f24:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018f26:	2300      	movs	r3, #0
 8018f28:	e00b      	b.n	8018f42 <pifHcSr04_StartTrigger+0x3a>
	}

	pifTask_ChangePeriod(p_owner->_p_task, period);
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	68db      	ldr	r3, [r3, #12]
 8018f2e:	887a      	ldrh	r2, [r7, #2]
 8018f30:	4611      	mov	r1, r2
 8018f32:	4618      	mov	r0, r3
 8018f34:	f7fb fb5c 	bl	80145f0 <pifTask_ChangePeriod>
	p_owner->_p_task->pause = FALSE;
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	68db      	ldr	r3, [r3, #12]
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	711a      	strb	r2, [r3, #4]
	return TRUE;
 8018f40:	2301      	movs	r3, #1
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3708      	adds	r7, #8
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	bf00      	nop
 8018f4c:	20001c55 	.word	0x20001c55

08018f50 <pifHcSr04_SetTemperature>:
{
	p_owner->_p_task->pause = TRUE;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 8018f50:	b480      	push	{r7}
 8018f52:	b083      	sub	sp, #12
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0f / ((331.6f + 0.6f * temperature) / 10000.0f);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8018f5c:	edd7 7a00 	vldr	s15, [r7]
 8018f60:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8018f94 <pifHcSr04_SetTemperature+0x44>
 8018f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f68:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8018f98 <pifHcSr04_SetTemperature+0x48>
 8018f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018f70:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8018f9c <pifHcSr04_SetTemperature+0x4c>
 8018f74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018f78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8018f86:	bf00      	nop
 8018f88:	370c      	adds	r7, #12
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f90:	4770      	bx	lr
 8018f92:	bf00      	nop
 8018f94:	3f19999a 	.word	0x3f19999a
 8018f98:	43a5cccd 	.word	0x43a5cccd
 8018f9c:	461c4000 	.word	0x461c4000

08018fa0 <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b082      	sub	sp, #8
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
 8018fa8:	460b      	mov	r3, r1
 8018faa:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	7d1b      	ldrb	r3, [r3, #20]
 8018fb0:	2b01      	cmp	r3, #1
 8018fb2:	d002      	beq.n	8018fba <pifHcSr04_sigReceiveEcho+0x1a>
 8018fb4:	2b02      	cmp	r3, #2
 8018fb6:	d00d      	beq.n	8018fd4 <pifHcSr04_sigReceiveEcho+0x34>
			pifTask_SetTrigger(p_owner->_p_task);
		}
		break;

	default:
		break;
 8018fb8:	e031      	b.n	801901e <pifHcSr04_sigReceiveEcho+0x7e>
		if (state) {
 8018fba:	78fb      	ldrb	r3, [r7, #3]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d02b      	beq.n	8019018 <pifHcSr04_sigReceiveEcho+0x78>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 8018fc0:	4b19      	ldr	r3, [pc, #100]	; (8019028 <pifHcSr04_sigReceiveEcho+0x88>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4798      	blx	r3
 8018fc6:	4602      	mov	r2, r0
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	619a      	str	r2, [r3, #24]
			p_owner->__state = HSS_HIGH;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	2202      	movs	r2, #2
 8018fd0:	751a      	strb	r2, [r3, #20]
		break;
 8018fd2:	e021      	b.n	8019018 <pifHcSr04_sigReceiveEcho+0x78>
		if (!state) {
 8018fd4:	78fb      	ldrb	r3, [r7, #3]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d120      	bne.n	801901c <pifHcSr04_sigReceiveEcho+0x7c>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 8018fda:	4b13      	ldr	r3, [pc, #76]	; (8019028 <pifHcSr04_sigReceiveEcho+0x88>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	4798      	blx	r3
 8018fe0:	4602      	mov	r2, r0
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	699b      	ldr	r3, [r3, #24]
 8018fe6:	1ad3      	subs	r3, r2, r3
 8018fe8:	ee07 3a90 	vmov	s15, r3
 8018fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	ed93 7a04 	vldr	s14, [r3, #16]
 8018ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ffe:	ee17 2a90 	vmov	r2, s15
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_LOW;
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	2203      	movs	r2, #3
 801900a:	751a      	strb	r2, [r3, #20]
			pifTask_SetTrigger(p_owner->_p_task);
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	68db      	ldr	r3, [r3, #12]
 8019010:	4618      	mov	r0, r3
 8019012:	f7fb fb0f 	bl	8014634 <pifTask_SetTrigger>
		break;
 8019016:	e001      	b.n	801901c <pifHcSr04_sigReceiveEcho+0x7c>
		break;
 8019018:	bf00      	nop
 801901a:	e000      	b.n	801901e <pifHcSr04_sigReceiveEcho+0x7e>
		break;
 801901c:	bf00      	nop
	}
}
 801901e:	bf00      	nop
 8019020:	3708      	adds	r7, #8
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	20001c7c 	.word	0x20001c7c

0801902c <_changeGain>:
#define HMC58X3_Y_SELF_TEST_GAUSS (+1.16f)       // Y axis level when bias current is applied.
#define HMC58X3_Z_SELF_TEST_GAUSS (+1.08f)       // Z axis level when bias current is applied.


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 801902c:	b480      	push	{r7}
 801902e:	b083      	sub	sp, #12
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
 8019034:	460b      	mov	r3, r1
 8019036:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8019038:	78fb      	ldrb	r3, [r7, #3]
 801903a:	2b07      	cmp	r3, #7
 801903c:	d832      	bhi.n	80190a4 <_changeGain+0x78>
 801903e:	a201      	add	r2, pc, #4	; (adr r2, 8019044 <_changeGain+0x18>)
 8019040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019044:	08019065 	.word	0x08019065
 8019048:	0801906d 	.word	0x0801906d
 801904c:	08019075 	.word	0x08019075
 8019050:	0801907d 	.word	0x0801907d
 8019054:	08019085 	.word	0x08019085
 8019058:	0801908d 	.word	0x0801908d
 801905c:	08019095 	.word	0x08019095
 8019060:	0801909d 	.word	0x0801909d
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	4a12      	ldr	r2, [pc, #72]	; (80190b0 <_changeGain+0x84>)
 8019068:	60da      	str	r2, [r3, #12]
 801906a:	e01b      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	4a11      	ldr	r2, [pc, #68]	; (80190b4 <_changeGain+0x88>)
 8019070:	60da      	str	r2, [r3, #12]
 8019072:	e017      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	4a10      	ldr	r2, [pc, #64]	; (80190b8 <_changeGain+0x8c>)
 8019078:	60da      	str	r2, [r3, #12]
 801907a:	e013      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	4a0f      	ldr	r2, [pc, #60]	; (80190bc <_changeGain+0x90>)
 8019080:	60da      	str	r2, [r3, #12]
 8019082:	e00f      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	4a0e      	ldr	r2, [pc, #56]	; (80190c0 <_changeGain+0x94>)
 8019088:	60da      	str	r2, [r3, #12]
 801908a:	e00b      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	4a0d      	ldr	r2, [pc, #52]	; (80190c4 <_changeGain+0x98>)
 8019090:	60da      	str	r2, [r3, #12]
 8019092:	e007      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	4a0c      	ldr	r2, [pc, #48]	; (80190c8 <_changeGain+0x9c>)
 8019098:	60da      	str	r2, [r3, #12]
 801909a:	e003      	b.n	80190a4 <_changeGain+0x78>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	4a0b      	ldr	r2, [pc, #44]	; (80190cc <_changeGain+0xa0>)
 80190a0:	60da      	str	r2, [r3, #12]
 80190a2:	bf00      	nop
	}
}
 80190a4:	bf00      	nop
 80190a6:	370c      	adds	r7, #12
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr
 80190b0:	44ab4000 	.word	0x44ab4000
 80190b4:	44884000 	.word	0x44884000
 80190b8:	444d0000 	.word	0x444d0000
 80190bc:	44250000 	.word	0x44250000
 80190c0:	43dc0000 	.word	0x43dc0000
 80190c4:	43c30000 	.word	0x43c30000
 80190c8:	43a50000 	.word	0x43a50000
 80190cc:	43660000 	.word	0x43660000

080190d0 <pifHmc5883_Detect>:

BOOL pifHmc5883_Detect(PifI2cPort* p_i2c)
{
 80190d0:	b590      	push	{r4, r7, lr}
 80190d2:	b08b      	sub	sp, #44	; 0x2c
 80190d4:	af02      	add	r7, sp, #8
 80190d6:	6078      	str	r0, [r7, #4]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
 80190d8:	4b23      	ldr	r3, [pc, #140]	; (8019168 <pifHmc5883_Detect+0x98>)
 80190da:	f107 040c 	add.w	r4, r7, #12
 80190de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80190e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data[3];
	PifI2cDevice* p_device;

    p_device = pifI2cPort_TemporaryDevice(p_i2c, HMC5883_I2C_ADDR);
 80190e4:	211e      	movs	r1, #30
 80190e6:	6878      	ldr	r0, [r7, #4]
 80190e8:	f7f9 f82e 	bl	8012148 <pifI2cPort_TemporaryDevice>
 80190ec:	61f8      	str	r0, [r7, #28]

    if (!pifI2cDevice_ReadRegBytes(p_device, HMC5883_REG_IDENT_A, data, 3)) return FALSE;
 80190ee:	f107 0208 	add.w	r2, r7, #8
 80190f2:	2303      	movs	r3, #3
 80190f4:	210a      	movs	r1, #10
 80190f6:	69f8      	ldr	r0, [r7, #28]
 80190f8:	f7f9 f922 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 80190fc:	4603      	mov	r3, r0
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d101      	bne.n	8019106 <pifHmc5883_Detect+0x36>
 8019102:	2300      	movs	r3, #0
 8019104:	e02b      	b.n	801915e <pifHmc5883_Detect+0x8e>
	if (data[0] != 'H') return FALSE;
 8019106:	7a3b      	ldrb	r3, [r7, #8]
 8019108:	2b48      	cmp	r3, #72	; 0x48
 801910a:	d001      	beq.n	8019110 <pifHmc5883_Detect+0x40>
 801910c:	2300      	movs	r3, #0
 801910e:	e026      	b.n	801915e <pifHmc5883_Detect+0x8e>
#ifndef __PIF_NO_LOG__	
    if (data[0] < 32 || data[1] < 32 || data[2] < 32) {
 8019110:	7a3b      	ldrb	r3, [r7, #8]
 8019112:	2b1f      	cmp	r3, #31
 8019114:	d905      	bls.n	8019122 <pifHmc5883_Detect+0x52>
 8019116:	7a7b      	ldrb	r3, [r7, #9]
 8019118:	2b1f      	cmp	r3, #31
 801911a:	d902      	bls.n	8019122 <pifHmc5883_Detect+0x52>
 801911c:	7abb      	ldrb	r3, [r7, #10]
 801911e:	2b1f      	cmp	r3, #31
 8019120:	d80e      	bhi.n	8019140 <pifHmc5883_Detect+0x70>
    	pifLog_Printf(LT_INFO, "%s%2Xh %2Xh %2Xh", ident, data[0], data[1], data[2]);
 8019122:	7a3b      	ldrb	r3, [r7, #8]
 8019124:	4618      	mov	r0, r3
 8019126:	7a7b      	ldrb	r3, [r7, #9]
 8019128:	7aba      	ldrb	r2, [r7, #10]
 801912a:	4611      	mov	r1, r2
 801912c:	f107 020c 	add.w	r2, r7, #12
 8019130:	9101      	str	r1, [sp, #4]
 8019132:	9300      	str	r3, [sp, #0]
 8019134:	4603      	mov	r3, r0
 8019136:	490d      	ldr	r1, [pc, #52]	; (801916c <pifHmc5883_Detect+0x9c>)
 8019138:	2002      	movs	r0, #2
 801913a:	f7fa f9b7 	bl	80134ac <pifLog_Printf>
 801913e:	e00d      	b.n	801915c <pifHmc5883_Detect+0x8c>
    }
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
 8019140:	7a3b      	ldrb	r3, [r7, #8]
 8019142:	4618      	mov	r0, r3
 8019144:	7a7b      	ldrb	r3, [r7, #9]
 8019146:	7aba      	ldrb	r2, [r7, #10]
 8019148:	4611      	mov	r1, r2
 801914a:	f107 020c 	add.w	r2, r7, #12
 801914e:	9101      	str	r1, [sp, #4]
 8019150:	9300      	str	r3, [sp, #0]
 8019152:	4603      	mov	r3, r0
 8019154:	4906      	ldr	r1, [pc, #24]	; (8019170 <pifHmc5883_Detect+0xa0>)
 8019156:	2002      	movs	r0, #2
 8019158:	f7fa f9a8 	bl	80134ac <pifLog_Printf>
    }
#endif
    return TRUE;
 801915c:	2301      	movs	r3, #1
}
 801915e:	4618      	mov	r0, r3
 8019160:	3724      	adds	r7, #36	; 0x24
 8019162:	46bd      	mov	sp, r7
 8019164:	bd90      	pop	{r4, r7, pc}
 8019166:	bf00      	nop
 8019168:	08027ea8 	.word	0x08027ea8
 801916c:	08027e88 	.word	0x08027e88
 8019170:	08027e9c 	.word	0x08027e9c

08019174 <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 8019174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019178:	b092      	sub	sp, #72	; 0x48
 801917a:	af04      	add	r7, sp, #16
 801917c:	60f8      	str	r0, [r7, #12]
 801917e:	607a      	str	r2, [r7, #4]
 8019180:	603b      	str	r3, [r7, #0]
 8019182:	460b      	mov	r3, r1
 8019184:	817b      	strh	r3, [r7, #10]
	uint8_t data[4];
	PifHmc5883ConfigA config_a;
    int16_t adc[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 8019186:	2300      	movs	r3, #0
 8019188:	617b      	str	r3, [r7, #20]
 801918a:	2300      	movs	r3, #0
 801918c:	61bb      	str	r3, [r7, #24]
 801918e:	2300      	movs	r3, #0
 8019190:	61fb      	str	r3, [r7, #28]
    BOOL bret = TRUE;           // Error indicator
 8019192:	2301      	movs	r3, #1
 8019194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d005      	beq.n	80191aa <pifHmc5883_Init+0x36>
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d002      	beq.n	80191aa <pifHmc5883_Init+0x36>
 80191a4:	683b      	ldr	r3, [r7, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d104      	bne.n	80191b4 <pifHmc5883_Init+0x40>
		pif_error = E_INVALID_PARAM;
 80191aa:	4bb2      	ldr	r3, [pc, #712]	; (8019474 <pifHmc5883_Init+0x300>)
 80191ac:	2201      	movs	r2, #1
 80191ae:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80191b0:	2300      	movs	r3, #0
 80191b2:	e159      	b.n	8019468 <pifHmc5883_Init+0x2f4>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 80191b4:	2218      	movs	r2, #24
 80191b6:	2100      	movs	r1, #0
 80191b8:	68f8      	ldr	r0, [r7, #12]
 80191ba:	f009 ff3f 	bl	802303c <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c, HMC5883_I2C_ADDR);
 80191be:	211e      	movs	r1, #30
 80191c0:	6878      	ldr	r0, [r7, #4]
 80191c2:	f7f8 ff83 	bl	80120cc <pifI2cPort_AddDevice>
 80191c6:	4602      	mov	r2, r0
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	691b      	ldr	r3, [r3, #16]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d101      	bne.n	80191d8 <pifHmc5883_Init+0x64>
 80191d4:	2300      	movs	r3, #0
 80191d6:	e147      	b.n	8019468 <pifHmc5883_Init+0x2f4>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	6918      	ldr	r0, [r3, #16]
 80191dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80191e0:	f240 5203 	movw	r2, #1283	; 0x503
 80191e4:	2101      	movs	r1, #1
 80191e6:	f7f9 f8c0 	bl	801236a <pifI2cDevice_ReadRegBit8>
 80191ea:	4603      	mov	r3, r0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	f000 8136 	beq.w	801945e <pifHmc5883_Init+0x2ea>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data[0]);
 80191f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80191f6:	4619      	mov	r1, r3
 80191f8:	6838      	ldr	r0, [r7, #0]
 80191fa:	f7ff ff17 	bl	801902c <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 80191fe:	897b      	ldrh	r3, [r7, #10]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d106      	bne.n	8019212 <pifHmc5883_Init+0x9e>
 8019204:	4b9c      	ldr	r3, [pc, #624]	; (8019478 <pifHmc5883_Init+0x304>)
 8019206:	881b      	ldrh	r3, [r3, #0]
 8019208:	1c5a      	adds	r2, r3, #1
 801920a:	b291      	uxth	r1, r2
 801920c:	4a9a      	ldr	r2, [pc, #616]	; (8019478 <pifHmc5883_Init+0x304>)
 801920e:	8011      	strh	r1, [r2, #0]
 8019210:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	897a      	ldrh	r2, [r7, #10]
 8019216:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801921e:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019226:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801922e:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	683a      	ldr	r2, [r7, #0]
 8019234:	615a      	str	r2, [r3, #20]

    config_a.byte = 0;
 8019236:	2300      	movs	r3, #0
 8019238:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 801923c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019240:	2201      	movs	r2, #1
 8019242:	f362 0301 	bfi	r3, r2, #0, #2
 8019246:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 801924a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801924e:	2204      	movs	r2, #4
 8019250:	f362 0384 	bfi	r3, r2, #2, #3
 8019254:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_CONFIG_A, config_a.byte);   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	691b      	ldr	r3, [r3, #16]
 801925c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019260:	2100      	movs	r1, #0
 8019262:	4618      	mov	r0, r3
 8019264:	f7f9 f964 	bl	8012530 <pifI2cDevice_WriteRegByte>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    pifHmc5883_SetGain(p_owner, HMC5883_GAIN_2_5GA); // Set the Gain to 2.5Ga (7:5->011)
 8019268:	2103      	movs	r1, #3
 801926a:	68f8      	ldr	r0, [r7, #12]
 801926c:	f000 f926 	bl	80194bc <pifHmc5883_SetGain>
    pif_Delay1ms(100);
 8019270:	2064      	movs	r0, #100	; 0x64
 8019272:	f7f7 ff75 	bl	8011160 <pif_Delay1ms>

    for (i = 0; i < 10;) {  // Collect 10 samples
 8019276:	2300      	movs	r3, #0
 8019278:	637b      	str	r3, [r7, #52]	; 0x34
 801927a:	e039      	b.n	80192f0 <pifHmc5883_Init+0x17c>
        pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE);
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	691b      	ldr	r3, [r3, #16]
 8019280:	2201      	movs	r2, #1
 8019282:	2102      	movs	r1, #2
 8019284:	4618      	mov	r0, r3
 8019286:	f7f9 f953 	bl	8012530 <pifI2cDevice_WriteRegByte>
        pif_Delay1ms(50);
 801928a:	2032      	movs	r0, #50	; 0x32
 801928c:	f7f7 ff68 	bl	8011160 <pif_Delay1ms>
        if (pifHmc5883_ReadMag(p_owner, adc)) {       // Get the raw values in case the scales have already been changed.
 8019290:	f107 0320 	add.w	r3, r7, #32
 8019294:	4619      	mov	r1, r3
 8019296:	68f8      	ldr	r0, [r7, #12]
 8019298:	f000 f92f 	bl	80194fa <pifHmc5883_ReadMag>
 801929c:	4603      	mov	r3, r0
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d026      	beq.n	80192f0 <pifHmc5883_Init+0x17c>
			// Since the measurements are noisy, they should be averaged rather than taking the max.
			xyz_total[AXIS_X] += adc[AXIS_X];
 80192a2:	697b      	ldr	r3, [r7, #20]
 80192a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192a8:	4413      	add	r3, r2
 80192aa:	617b      	str	r3, [r7, #20]
			xyz_total[AXIS_Y] += adc[AXIS_Y];
 80192ac:	69bb      	ldr	r3, [r7, #24]
 80192ae:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80192b2:	4413      	add	r3, r2
 80192b4:	61bb      	str	r3, [r7, #24]
			xyz_total[AXIS_Z] += adc[AXIS_Z];
 80192b6:	69fb      	ldr	r3, [r7, #28]
 80192b8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80192bc:	4413      	add	r3, r2
 80192be:	61fb      	str	r3, [r7, #28]

			// Detect saturation.
			if (-4096 >= MIN(adc[AXIS_X], MIN(adc[AXIS_Y], adc[AXIS_Z]))) {
 80192c0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80192c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192c8:	4293      	cmp	r3, r2
 80192ca:	bfa8      	it	ge
 80192cc:	4613      	movge	r3, r2
 80192ce:	b21a      	sxth	r2, r3
 80192d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192d4:	4293      	cmp	r3, r2
 80192d6:	bfa8      	it	ge
 80192d8:	4613      	movge	r3, r2
 80192da:	b21b      	sxth	r3, r3
 80192dc:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80192e0:	dc03      	bgt.n	80192ea <pifHmc5883_Init+0x176>
				bret = FALSE;
 80192e2:	2300      	movs	r3, #0
 80192e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80192e8:	e005      	b.n	80192f6 <pifHmc5883_Init+0x182>
			}
			i++;
 80192ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192ec:	3301      	adds	r3, #1
 80192ee:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < 10;) {  // Collect 10 samples
 80192f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192f2:	2b09      	cmp	r3, #9
 80192f4:	ddc2      	ble.n	801927c <pifHmc5883_Init+0x108>
        }
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80192f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80192fa:	2202      	movs	r2, #2
 80192fc:	f362 0301 	bfi	r3, r2, #0, #2
 8019300:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_CONFIG_A, config_a.byte);   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	691b      	ldr	r3, [r3, #16]
 8019308:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801930c:	2100      	movs	r1, #0
 801930e:	4618      	mov	r0, r3
 8019310:	f7f9 f90e 	bl	8012530 <pifI2cDevice_WriteRegByte>
    for (i = 0; i < 10;) {
 8019314:	2300      	movs	r3, #0
 8019316:	637b      	str	r3, [r7, #52]	; 0x34
 8019318:	e039      	b.n	801938e <pifHmc5883_Init+0x21a>
        pifI2cDevice_WriteRegByte(p_owner->_p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE);
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	691b      	ldr	r3, [r3, #16]
 801931e:	2201      	movs	r2, #1
 8019320:	2102      	movs	r1, #2
 8019322:	4618      	mov	r0, r3
 8019324:	f7f9 f904 	bl	8012530 <pifI2cDevice_WriteRegByte>
        pif_Delay1ms(50);
 8019328:	2032      	movs	r0, #50	; 0x32
 801932a:	f7f7 ff19 	bl	8011160 <pif_Delay1ms>
        if (pifHmc5883_ReadMag(p_owner, adc)) {                // Get the raw values in case the scales have already been changed.
 801932e:	f107 0320 	add.w	r3, r7, #32
 8019332:	4619      	mov	r1, r3
 8019334:	68f8      	ldr	r0, [r7, #12]
 8019336:	f000 f8e0 	bl	80194fa <pifHmc5883_ReadMag>
 801933a:	4603      	mov	r3, r0
 801933c:	2b00      	cmp	r3, #0
 801933e:	d026      	beq.n	801938e <pifHmc5883_Init+0x21a>
			// Since the measurements are noisy, they should be averaged.
			xyz_total[AXIS_X] -= adc[AXIS_X];
 8019340:	697b      	ldr	r3, [r7, #20]
 8019342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019346:	1a9b      	subs	r3, r3, r2
 8019348:	617b      	str	r3, [r7, #20]
			xyz_total[AXIS_Y] -= adc[AXIS_Y];
 801934a:	69bb      	ldr	r3, [r7, #24]
 801934c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8019350:	1a9b      	subs	r3, r3, r2
 8019352:	61bb      	str	r3, [r7, #24]
			xyz_total[AXIS_Z] -= adc[AXIS_Z];
 8019354:	69fb      	ldr	r3, [r7, #28]
 8019356:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 801935a:	1a9b      	subs	r3, r3, r2
 801935c:	61fb      	str	r3, [r7, #28]

			// Detect saturation.
			if (-4096 >= MIN(adc[AXIS_X], MIN(adc[AXIS_Y], adc[AXIS_Z]))) {
 801935e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8019362:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019366:	4293      	cmp	r3, r2
 8019368:	bfa8      	it	ge
 801936a:	4613      	movge	r3, r2
 801936c:	b21a      	sxth	r2, r3
 801936e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019372:	4293      	cmp	r3, r2
 8019374:	bfa8      	it	ge
 8019376:	4613      	movge	r3, r2
 8019378:	b21b      	sxth	r3, r3
 801937a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 801937e:	dc03      	bgt.n	8019388 <pifHmc5883_Init+0x214>
				bret = FALSE;
 8019380:	2300      	movs	r3, #0
 8019382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 8019386:	e005      	b.n	8019394 <pifHmc5883_Init+0x220>
			}
			i++;
 8019388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801938a:	3301      	adds	r3, #1
 801938c:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < 10;) {
 801938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019390:	2b09      	cmp	r3, #9
 8019392:	ddc2      	ble.n	801931a <pifHmc5883_Init+0x1a6>
        }
    }

    if (bret) {                	// Something went wrong so get a best guess
 8019394:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019398:	2b00      	cmp	r3, #0
 801939a:	d032      	beq.n	8019402 <pifHmc5883_Init+0x28e>
        if (xyz_total[AXIS_X]) p_owner->scale[AXIS_X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[AXIS_X]);
 801939c:	697b      	ldr	r3, [r7, #20]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d00d      	beq.n	80193be <pifHmc5883_Init+0x24a>
 80193a2:	697b      	ldr	r3, [r7, #20]
 80193a4:	ee07 3a90 	vmov	s15, r3
 80193a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80193ac:	eddf 6a33 	vldr	s13, [pc, #204]	; 801947c <pifHmc5883_Init+0x308>
 80193b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80193b4:	eef0 7ae7 	vabs.f32	s15, s15
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	edc3 7a00 	vstr	s15, [r3]
        if (xyz_total[AXIS_Y]) p_owner->scale[AXIS_Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[AXIS_Y]);
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d00d      	beq.n	80193e0 <pifHmc5883_Init+0x26c>
 80193c4:	69bb      	ldr	r3, [r7, #24]
 80193c6:	ee07 3a90 	vmov	s15, r3
 80193ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80193ce:	eddf 6a2b 	vldr	s13, [pc, #172]	; 801947c <pifHmc5883_Init+0x308>
 80193d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80193d6:	eef0 7ae7 	vabs.f32	s15, s15
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	edc3 7a01 	vstr	s15, [r3, #4]
        if (xyz_total[AXIS_Z]) p_owner->scale[AXIS_Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[AXIS_Z]);
 80193e0:	69fb      	ldr	r3, [r7, #28]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d00d      	beq.n	8019402 <pifHmc5883_Init+0x28e>
 80193e6:	69fb      	ldr	r3, [r7, #28]
 80193e8:	ee07 3a90 	vmov	s15, r3
 80193ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80193f0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8019480 <pifHmc5883_Init+0x30c>
 80193f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80193f8:	eef0 7ae7 	vabs.f32	s15, s15
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	edc3 7a02 	vstr	s15, [r3, #8]
    }

#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Mag scale: X=%f Y=%f Z=%f", p_owner->scale[AXIS_X], p_owner->scale[AXIS_Y], p_owner->scale[AXIS_Z]);
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	4618      	mov	r0, r3
 8019408:	f7e7 f852 	bl	80004b0 <__aeabi_f2d>
 801940c:	4680      	mov	r8, r0
 801940e:	4689      	mov	r9, r1
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	685b      	ldr	r3, [r3, #4]
 8019414:	4618      	mov	r0, r3
 8019416:	f7e7 f84b 	bl	80004b0 <__aeabi_f2d>
 801941a:	4604      	mov	r4, r0
 801941c:	460d      	mov	r5, r1
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	689b      	ldr	r3, [r3, #8]
 8019422:	4618      	mov	r0, r3
 8019424:	f7e7 f844 	bl	80004b0 <__aeabi_f2d>
 8019428:	4602      	mov	r2, r0
 801942a:	460b      	mov	r3, r1
 801942c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019430:	e9cd 4500 	strd	r4, r5, [sp]
 8019434:	4642      	mov	r2, r8
 8019436:	464b      	mov	r3, r9
 8019438:	4912      	ldr	r1, [pc, #72]	; (8019484 <pifHmc5883_Init+0x310>)
 801943a:	2002      	movs	r0, #2
 801943c:	f7fa f836 	bl	80134ac <pifLog_Printf>
#endif

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	f043 0304 	orr.w	r3, r3, #4
 8019448:	b2da      	uxtb	r2, r3
 801944a:	683b      	ldr	r3, [r7, #0]
 801944c:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	4a0d      	ldr	r2, [pc, #52]	; (8019488 <pifHmc5883_Init+0x314>)
 8019452:	62da      	str	r2, [r3, #44]	; 0x2c
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	68fa      	ldr	r2, [r7, #12]
 8019458:	631a      	str	r2, [r3, #48]	; 0x30
    return TRUE;
 801945a:	2301      	movs	r3, #1
 801945c:	e004      	b.n	8019468 <pifHmc5883_Init+0x2f4>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 801945e:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 8019460:	68f8      	ldr	r0, [r7, #12]
 8019462:	f000 f813 	bl	801948c <pifHmc5883_Clear>
	return FALSE;
 8019466:	2300      	movs	r3, #0
}
 8019468:	4618      	mov	r0, r3
 801946a:	3738      	adds	r7, #56	; 0x38
 801946c:	46bd      	mov	sp, r7
 801946e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019472:	bf00      	nop
 8019474:	20001c55 	.word	0x20001c55
 8019478:	2000011c 	.word	0x2000011c
 801947c:	466f4000 	.word	0x466f4000
 8019480:	465ec001 	.word	0x465ec001
 8019484:	08027eb8 	.word	0x08027eb8
 8019488:	080194fb 	.word	0x080194fb

0801948c <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b082      	sub	sp, #8
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	691b      	ldr	r3, [r3, #16]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d00b      	beq.n	80194b4 <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	691b      	ldr	r3, [r3, #16]
 80194a0:	689a      	ldr	r2, [r3, #8]
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	691b      	ldr	r3, [r3, #16]
 80194a6:	4619      	mov	r1, r3
 80194a8:	4610      	mov	r0, r2
 80194aa:	f7f8 fe39 	bl	8012120 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2200      	movs	r2, #0
 80194b2:	611a      	str	r2, [r3, #16]
	}
}
 80194b4:	bf00      	nop
 80194b6:	3708      	adds	r7, #8
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}

080194bc <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b082      	sub	sp, #8
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
 80194c4:	460b      	mov	r3, r1
 80194c6:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6918      	ldr	r0, [r3, #16]
 80194cc:	78fb      	ldrb	r3, [r7, #3]
 80194ce:	f240 5203 	movw	r2, #1283	; 0x503
 80194d2:	2101      	movs	r1, #1
 80194d4:	f7f9 f842 	bl	801255c <pifI2cDevice_WriteRegBit8>
 80194d8:	4603      	mov	r3, r0
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d101      	bne.n	80194e2 <pifHmc5883_SetGain+0x26>
 80194de:	2300      	movs	r3, #0
 80194e0:	e007      	b.n	80194f2 <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	695b      	ldr	r3, [r3, #20]
 80194e6:	78fa      	ldrb	r2, [r7, #3]
 80194e8:	4611      	mov	r1, r2
 80194ea:	4618      	mov	r0, r3
 80194ec:	f7ff fd9e 	bl	801902c <_changeGain>
    return TRUE;
 80194f0:	2301      	movs	r3, #1
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3708      	adds	r7, #8
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}

080194fa <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 80194fa:	b580      	push	{r7, lr}
 80194fc:	b084      	sub	sp, #16
 80194fe:	af00      	add	r7, sp, #0
 8019500:	6078      	str	r0, [r7, #4]
 8019502:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	691b      	ldr	r3, [r3, #16]
 8019508:	f107 0208 	add.w	r2, r7, #8
 801950c:	2109      	movs	r1, #9
 801950e:	4618      	mov	r0, r3
 8019510:	f7f8 fede 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8019514:	4603      	mov	r3, r0
 8019516:	2b00      	cmp	r3, #0
 8019518:	d101      	bne.n	801951e <pifHmc5883_ReadMag+0x24>
 801951a:	2300      	movs	r3, #0
 801951c:	e061      	b.n	80195e2 <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 801951e:	7a3b      	ldrb	r3, [r7, #8]
 8019520:	f003 0301 	and.w	r3, r3, #1
 8019524:	2b00      	cmp	r3, #0
 8019526:	d101      	bne.n	801952c <pifHmc5883_ReadMag+0x32>
 8019528:	2300      	movs	r3, #0
 801952a:	e05a      	b.n	80195e2 <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	6918      	ldr	r0, [r3, #16]
 8019530:	f107 0208 	add.w	r2, r7, #8
 8019534:	2306      	movs	r3, #6
 8019536:	2103      	movs	r1, #3
 8019538:	f7f8 ff02 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d101      	bne.n	8019546 <pifHmc5883_ReadMag+0x4c>
 8019542:	2300      	movs	r3, #0
 8019544:	e04d      	b.n	80195e2 <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 8019546:	7a3b      	ldrb	r3, [r7, #8]
 8019548:	b29b      	uxth	r3, r3
 801954a:	021b      	lsls	r3, r3, #8
 801954c:	b29a      	uxth	r2, r3
 801954e:	7a7b      	ldrb	r3, [r7, #9]
 8019550:	b29b      	uxth	r3, r3
 8019552:	4413      	add	r3, r2
 8019554:	b29b      	uxth	r3, r3
 8019556:	b21b      	sxth	r3, r3
 8019558:	ee07 3a90 	vmov	s15, r3
 801955c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	edd3 7a00 	vldr	s15, [r3]
 8019566:	ee67 7a27 	vmul.f32	s15, s14, s15
 801956a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801956e:	ee17 3a90 	vmov	r3, s15
 8019572:	b21a      	sxth	r2, r3
 8019574:	683b      	ldr	r3, [r7, #0]
 8019576:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 8019578:	7abb      	ldrb	r3, [r7, #10]
 801957a:	b29b      	uxth	r3, r3
 801957c:	021b      	lsls	r3, r3, #8
 801957e:	b29a      	uxth	r2, r3
 8019580:	7afb      	ldrb	r3, [r7, #11]
 8019582:	b29b      	uxth	r3, r3
 8019584:	4413      	add	r3, r2
 8019586:	b29b      	uxth	r3, r3
 8019588:	b21b      	sxth	r3, r3
 801958a:	ee07 3a90 	vmov	s15, r3
 801958e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	edd3 7a02 	vldr	s15, [r3, #8]
 8019598:	ee67 7a27 	vmul.f32	s15, s14, s15
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	3304      	adds	r3, #4
 80195a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80195a4:	ee17 2a90 	vmov	r2, s15
 80195a8:	b212      	sxth	r2, r2
 80195aa:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 80195ac:	7b3b      	ldrb	r3, [r7, #12]
 80195ae:	b29b      	uxth	r3, r3
 80195b0:	021b      	lsls	r3, r3, #8
 80195b2:	b29a      	uxth	r2, r3
 80195b4:	7b7b      	ldrb	r3, [r7, #13]
 80195b6:	b29b      	uxth	r3, r3
 80195b8:	4413      	add	r3, r2
 80195ba:	b29b      	uxth	r3, r3
 80195bc:	b21b      	sxth	r3, r3
 80195be:	ee07 3a90 	vmov	s15, r3
 80195c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80195cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	3302      	adds	r3, #2
 80195d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80195d8:	ee17 2a90 	vmov	r2, s15
 80195dc:	b212      	sxth	r2, r2
 80195de:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80195e0:	2301      	movs	r3, #1
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3710      	adds	r7, #16
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}

080195ea <_alignBoard>:

#include <math.h>


static void _alignBoard(PifImuSensor* p_owner, float* vec)
{
 80195ea:	b580      	push	{r7, lr}
 80195ec:	b086      	sub	sp, #24
 80195ee:	af00      	add	r7, sp, #0
 80195f0:	6078      	str	r0, [r7, #4]
 80195f2:	6039      	str	r1, [r7, #0]
    float x = vec[AXIS_X];
 80195f4:	683b      	ldr	r3, [r7, #0]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	617b      	str	r3, [r7, #20]
    float y = vec[AXIS_Y];
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	613b      	str	r3, [r7, #16]
    float z = vec[AXIS_Z];
 8019600:	683b      	ldr	r3, [r7, #0]
 8019602:	689b      	ldr	r3, [r3, #8]
 8019604:	60fb      	str	r3, [r7, #12]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801960c:	edd7 7a05 	vldr	s15, [r7, #20]
 8019610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 801961a:	edd7 7a04 	vldr	s15, [r7, #16]
 801961e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 801962c:	edd7 7a03 	vldr	s15, [r7, #12]
 8019630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019638:	eeb0 0a67 	vmov.f32	s0, s15
 801963c:	f00a f820 	bl	8023680 <lrintf>
 8019640:	ee07 0a90 	vmov	s15, r0
 8019644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	edc3 7a00 	vstr	s15, [r3]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8019654:	edd7 7a05 	vldr	s15, [r7, #20]
 8019658:	ee27 7a27 	vmul.f32	s14, s14, s15
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8019662:	edd7 7a04 	vldr	s15, [r7, #16]
 8019666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801966a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8019674:	edd7 7a03 	vldr	s15, [r7, #12]
 8019678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801967c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019680:	eeb0 0a67 	vmov.f32	s0, s15
 8019684:	f009 fffc 	bl	8023680 <lrintf>
 8019688:	ee07 0a90 	vmov	s15, r0
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	3304      	adds	r3, #4
 8019690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019694:	edc3 7a00 	vstr	s15, [r3]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801969e:	edd7 7a05 	vldr	s15, [r7, #20]
 80196a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80196ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80196b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80196be:	edd7 7a03 	vldr	s15, [r7, #12]
 80196c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196ca:	eeb0 0a67 	vmov.f32	s0, s15
 80196ce:	f009 ffd7 	bl	8023680 <lrintf>
 80196d2:	ee07 0a90 	vmov	s15, r0
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	3308      	adds	r3, #8
 80196da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196de:	edc3 7a00 	vstr	s15, [r3]
}
 80196e2:	bf00      	nop
 80196e4:	3718      	adds	r7, #24
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd80      	pop	{r7, pc}
	...

080196ec <_alignSensors>:

static void _alignSensors(PifImuSensor* p_owner, float* src, float* dest, uint8_t rotation)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b084      	sub	sp, #16
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	607a      	str	r2, [r7, #4]
 80196f8:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 80196fa:	78fb      	ldrb	r3, [r7, #3]
 80196fc:	3b02      	subs	r3, #2
 80196fe:	2b06      	cmp	r3, #6
 8019700:	f200 80b3 	bhi.w	801986a <_alignSensors+0x17e>
 8019704:	a201      	add	r2, pc, #4	; (adr r2, 801970c <_alignSensors+0x20>)
 8019706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801970a:	bf00      	nop
 801970c:	08019729 	.word	0x08019729
 8019710:	0801974f 	.word	0x0801974f
 8019714:	0801977f 	.word	0x0801977f
 8019718:	080197a7 	.word	0x080197a7
 801971c:	080197d7 	.word	0x080197d7
 8019720:	080197ff 	.word	0x080197ff
 8019724:	08019831 	.word	0x08019831
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 8019728:	68bb      	ldr	r3, [r7, #8]
 801972a:	685a      	ldr	r2, [r3, #4]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	edd3 7a00 	vldr	s15, [r3]
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	3304      	adds	r3, #4
 801973a:	eef1 7a67 	vneg.f32	s15, s15
 801973e:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = src[AXIS_Z];
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	3308      	adds	r3, #8
 8019746:	68ba      	ldr	r2, [r7, #8]
 8019748:	6892      	ldr	r2, [r2, #8]
 801974a:	601a      	str	r2, [r3, #0]
            break;
 801974c:	e09c      	b.n	8019888 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 801974e:	68bb      	ldr	r3, [r7, #8]
 8019750:	edd3 7a00 	vldr	s15, [r3]
 8019754:	eef1 7a67 	vneg.f32	s15, s15
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = -src[AXIS_Y];
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	3304      	adds	r3, #4
 8019762:	edd3 7a00 	vldr	s15, [r3]
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	3304      	adds	r3, #4
 801976a:	eef1 7a67 	vneg.f32	s15, s15
 801976e:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = src[AXIS_Z];
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	3308      	adds	r3, #8
 8019776:	68ba      	ldr	r2, [r7, #8]
 8019778:	6892      	ldr	r2, [r2, #8]
 801977a:	601a      	str	r2, [r3, #0]
            break;
 801977c:	e084      	b.n	8019888 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 801977e:	68bb      	ldr	r3, [r7, #8]
 8019780:	3304      	adds	r3, #4
 8019782:	edd3 7a00 	vldr	s15, [r3]
 8019786:	eef1 7a67 	vneg.f32	s15, s15
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = src[AXIS_X];
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	3304      	adds	r3, #4
 8019794:	68ba      	ldr	r2, [r7, #8]
 8019796:	6812      	ldr	r2, [r2, #0]
 8019798:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	3308      	adds	r3, #8
 801979e:	68ba      	ldr	r2, [r7, #8]
 80197a0:	6892      	ldr	r2, [r2, #8]
 80197a2:	601a      	str	r2, [r3, #0]
            break;
 80197a4:	e070      	b.n	8019888 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 80197a6:	68bb      	ldr	r3, [r7, #8]
 80197a8:	edd3 7a00 	vldr	s15, [r3]
 80197ac:	eef1 7a67 	vneg.f32	s15, s15
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = src[AXIS_Y];
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	3304      	adds	r3, #4
 80197ba:	68ba      	ldr	r2, [r7, #8]
 80197bc:	6852      	ldr	r2, [r2, #4]
 80197be:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80197c0:	68bb      	ldr	r3, [r7, #8]
 80197c2:	3308      	adds	r3, #8
 80197c4:	edd3 7a00 	vldr	s15, [r3]
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	3308      	adds	r3, #8
 80197cc:	eef1 7a67 	vneg.f32	s15, s15
 80197d0:	edc3 7a00 	vstr	s15, [r3]
            break;
 80197d4:	e058      	b.n	8019888 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	685a      	ldr	r2, [r3, #4]
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	3304      	adds	r3, #4
 80197e2:	68ba      	ldr	r2, [r7, #8]
 80197e4:	6812      	ldr	r2, [r2, #0]
 80197e6:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	3308      	adds	r3, #8
 80197ec:	edd3 7a00 	vldr	s15, [r3]
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	3308      	adds	r3, #8
 80197f4:	eef1 7a67 	vneg.f32	s15, s15
 80197f8:	edc3 7a00 	vstr	s15, [r3]
            break;
 80197fc:	e044      	b.n	8019888 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 80197fe:	68bb      	ldr	r3, [r7, #8]
 8019800:	681a      	ldr	r2, [r3, #0]
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019806:	68bb      	ldr	r3, [r7, #8]
 8019808:	3304      	adds	r3, #4
 801980a:	edd3 7a00 	vldr	s15, [r3]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	3304      	adds	r3, #4
 8019812:	eef1 7a67 	vneg.f32	s15, s15
 8019816:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = -src[AXIS_Z];
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	3308      	adds	r3, #8
 801981e:	edd3 7a00 	vldr	s15, [r3]
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	3308      	adds	r3, #8
 8019826:	eef1 7a67 	vneg.f32	s15, s15
 801982a:	edc3 7a00 	vstr	s15, [r3]
            break;
 801982e:	e02b      	b.n	8019888 <_alignSensors+0x19c>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8019830:	68bb      	ldr	r3, [r7, #8]
 8019832:	3304      	adds	r3, #4
 8019834:	edd3 7a00 	vldr	s15, [r3]
 8019838:	eef1 7a67 	vneg.f32	s15, s15
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Y] = -src[AXIS_X];
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	edd3 7a00 	vldr	s15, [r3]
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	3304      	adds	r3, #4
 801984c:	eef1 7a67 	vneg.f32	s15, s15
 8019850:	edc3 7a00 	vstr	s15, [r3]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	3308      	adds	r3, #8
 8019858:	edd3 7a00 	vldr	s15, [r3]
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	3308      	adds	r3, #8
 8019860:	eef1 7a67 	vneg.f32	s15, s15
 8019864:	edc3 7a00 	vstr	s15, [r3]
            break;
 8019868:	e00e      	b.n	8019888 <_alignSensors+0x19c>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 801986a:	68bb      	ldr	r3, [r7, #8]
 801986c:	681a      	ldr	r2, [r3, #0]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	601a      	str	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	3304      	adds	r3, #4
 8019876:	68ba      	ldr	r2, [r7, #8]
 8019878:	6852      	ldr	r2, [r2, #4]
 801987a:	601a      	str	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	3308      	adds	r3, #8
 8019880:	68ba      	ldr	r2, [r7, #8]
 8019882:	6892      	ldr	r2, [r2, #8]
 8019884:	601a      	str	r2, [r3, #0]
            break;
 8019886:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801988e:	2b00      	cmp	r3, #0
 8019890:	d003      	beq.n	801989a <_alignSensors+0x1ae>
        _alignBoard(p_owner, dest);
 8019892:	6879      	ldr	r1, [r7, #4]
 8019894:	68f8      	ldr	r0, [r7, #12]
 8019896:	f7ff fea8 	bl	80195ea <_alignBoard>
}
 801989a:	bf00      	nop
 801989c:	3710      	adds	r7, #16
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}
 80198a2:	bf00      	nop

080198a4 <pifImuSensor_Init>:

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b082      	sub	sp, #8
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 80198ac:	2274      	movs	r2, #116	; 0x74
 80198ae:	2100      	movs	r1, #0
 80198b0:	6878      	ldr	r0, [r7, #4]
 80198b2:	f009 fbc3 	bl	802303c <memset>

	p_owner->_gyro_gain = 1;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80198bc:	605a      	str	r2, [r3, #4]
	p_owner->_accel_gain = 1;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80198c4:	609a      	str	r2, [r3, #8]
	p_owner->_mag_gain = 1;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80198cc:	60da      	str	r2, [r3, #12]
}
 80198ce:	bf00      	nop
 80198d0:	3708      	adds	r7, #8
 80198d2:	46bd      	mov	sp, r7
 80198d4:	bd80      	pop	{r7, pc}
	...

080198d8 <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b092      	sub	sp, #72	; 0x48
 80198dc:	af00      	add	r7, sp, #0
 80198de:	60f8      	str	r0, [r7, #12]
 80198e0:	4608      	mov	r0, r1
 80198e2:	4611      	mov	r1, r2
 80198e4:	461a      	mov	r2, r3
 80198e6:	4603      	mov	r3, r0
 80198e8:	817b      	strh	r3, [r7, #10]
 80198ea:	460b      	mov	r3, r1
 80198ec:	813b      	strh	r3, [r7, #8]
 80198ee:	4613      	mov	r3, r2
 80198f0:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 80198f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d108      	bne.n	801990c <pifImuSensor_InitBoardAlignment+0x34>
 80198fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d104      	bne.n	801990c <pifImuSensor_InitBoardAlignment+0x34>
 8019902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019906:	2b00      	cmp	r3, #0
 8019908:	f000 80da 	beq.w	8019ac0 <pifImuSensor_InitBoardAlignment+0x1e8>

    p_owner->__board_alignment = TRUE;
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	2201      	movs	r2, #1
 8019910:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    // deg2rad
    roll = board_align_roll * PIF_PI / 180.0f;
 8019914:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019918:	ee07 3a90 	vmov	s15, r3
 801991c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019920:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8019ac8 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019924:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019928:	eddf 6a68 	vldr	s13, [pc, #416]	; 8019acc <pifImuSensor_InitBoardAlignment+0x1f4>
 801992c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019930:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    pitch = board_align_pitch * PIF_PI / 180.0f;
 8019934:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019938:	ee07 3a90 	vmov	s15, r3
 801993c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019940:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8019ac8 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019944:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019948:	eddf 6a60 	vldr	s13, [pc, #384]	; 8019acc <pifImuSensor_InitBoardAlignment+0x1f4>
 801994c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019950:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    yaw = board_align_yaw * PIF_PI / 180.0f;
 8019954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019958:	ee07 3a90 	vmov	s15, r3
 801995c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019960:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8019ac8 <pifImuSensor_InitBoardAlignment+0x1f0>
 8019964:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019968:	eddf 6a58 	vldr	s13, [pc, #352]	; 8019acc <pifImuSensor_InitBoardAlignment+0x1f4>
 801996c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019970:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 8019974:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019978:	f009 fe3e 	bl	80235f8 <cosf>
 801997c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 8019980:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019984:	f009 febc 	bl	8023700 <sinf>
 8019988:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 801998c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019990:	f009 fe32 	bl	80235f8 <cosf>
 8019994:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 8019998:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 801999c:	f009 feb0 	bl	8023700 <sinf>
 80199a0:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 80199a4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80199a8:	f009 fe26 	bl	80235f8 <cosf>
 80199ac:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 80199b0:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80199b4:	f009 fea4 	bl	8023700 <sinf>
 80199b8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 80199bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80199c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80199c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199c8:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 80199cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80199d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80199d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199d8:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 80199dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80199e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80199e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199e8:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 80199ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80199f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80199f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199f8:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 80199fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019a00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a08:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	69fa      	ldr	r2, [r7, #28]
 8019a10:	651a      	str	r2, [r3, #80]	; 0x50
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 8019a12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019a16:	eeb1 7a67 	vneg.f32	s14, s15
 8019a1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][2] = siny;
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a2c:	659a      	str	r2, [r3, #88]	; 0x58

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 8019a2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8019a32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8019a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 8019a48:	ed97 7a04 	vldr	s14, [r7, #16]
 8019a4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a54:	ed97 7a08 	vldr	s14, [r7, #32]
 8019a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 8019a62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019a66:	eeb1 7a67 	vneg.f32	s14, s15
 8019a6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8019a78:	ed97 7a08 	vldr	s14, [r7, #32]
 8019a7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a84:	ed97 7a04 	vldr	s14, [r7, #16]
 8019a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8019a92:	ed97 7a06 	vldr	s14, [r7, #24]
 8019a96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8019aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8019aac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019ab0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8019abe:	e000      	b.n	8019ac2 <pifImuSensor_InitBoardAlignment+0x1ea>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019ac0:	bf00      	nop
}
 8019ac2:	3748      	adds	r7, #72	; 0x48
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	bd80      	pop	{r7, pc}
 8019ac8:	40490fdb 	.word	0x40490fdb
 8019acc:	43340000 	.word	0x43340000

08019ad0 <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019ad0:	b480      	push	{r7}
 8019ad2:	b083      	sub	sp, #12
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	6078      	str	r0, [r7, #4]
 8019ad8:	460b      	mov	r3, r1
 8019ada:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019adc:	78fb      	ldrb	r3, [r7, #3]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d002      	beq.n	8019ae8 <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	78fa      	ldrb	r2, [r7, #3]
 8019ae6:	741a      	strb	r2, [r3, #16]
}
 8019ae8:	bf00      	nop
 8019aea:	370c      	adds	r7, #12
 8019aec:	46bd      	mov	sp, r7
 8019aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af2:	4770      	bx	lr

08019af4 <pifImuSensor_ReadRawGyro>:

BOOL pifImuSensor_ReadRawGyro(PifImuSensor* p_owner, float* p_gyro)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b088      	sub	sp, #32
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	6039      	str	r1, [r7, #0]
	int16_t data[AXIS_COUNT];
    float gyro[AXIS_COUNT];

	if (!(p_owner->_measure & IMU_MEASURE_GYROSCOPE)) return FALSE;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	781b      	ldrb	r3, [r3, #0]
 8019b02:	f003 0301 	and.w	r3, r3, #1
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d101      	bne.n	8019b0e <pifImuSensor_ReadRawGyro+0x1a>
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	e02d      	b.n	8019b6a <pifImuSensor_ReadRawGyro+0x76>

	if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, data)) return FALSE;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	695b      	ldr	r3, [r3, #20]
 8019b12:	687a      	ldr	r2, [r7, #4]
 8019b14:	6992      	ldr	r2, [r2, #24]
 8019b16:	f107 0118 	add.w	r1, r7, #24
 8019b1a:	4610      	mov	r0, r2
 8019b1c:	4798      	blx	r3
 8019b1e:	4603      	mov	r3, r0
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d101      	bne.n	8019b28 <pifImuSensor_ReadRawGyro+0x34>
 8019b24:	2300      	movs	r3, #0
 8019b26:	e020      	b.n	8019b6a <pifImuSensor_ReadRawGyro+0x76>

	gyro[AXIS_X] = data[AXIS_X];
 8019b28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019b2c:	ee07 3a90 	vmov	s15, r3
 8019b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b34:	edc7 7a03 	vstr	s15, [r7, #12]
	gyro[AXIS_Y] = data[AXIS_Y];
 8019b38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019b3c:	ee07 3a90 	vmov	s15, r3
 8019b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b44:	edc7 7a04 	vstr	s15, [r7, #16]
	gyro[AXIS_Z] = data[AXIS_Z];
 8019b48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019b4c:	ee07 3a90 	vmov	s15, r3
 8019b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b54:	edc7 7a05 	vstr	s15, [r7, #20]

	_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	7c1b      	ldrb	r3, [r3, #16]
 8019b5c:	f107 010c 	add.w	r1, r7, #12
 8019b60:	683a      	ldr	r2, [r7, #0]
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	f7ff fdc2 	bl	80196ec <_alignSensors>
	return TRUE;
 8019b68:	2301      	movs	r3, #1
}
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	3720      	adds	r7, #32
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	bd80      	pop	{r7, pc}

08019b72 <pifImuSensor_SetAccelAlign>:
	_alignSensors(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019b72:	b480      	push	{r7}
 8019b74:	b083      	sub	sp, #12
 8019b76:	af00      	add	r7, sp, #0
 8019b78:	6078      	str	r0, [r7, #4]
 8019b7a:	460b      	mov	r3, r1
 8019b7c:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019b7e:	78fb      	ldrb	r3, [r7, #3]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d002      	beq.n	8019b8a <pifImuSensor_SetAccelAlign+0x18>
        p_owner->__accel_info.align = align;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	78fa      	ldrb	r2, [r7, #3]
 8019b88:	771a      	strb	r2, [r3, #28]
}
 8019b8a:	bf00      	nop
 8019b8c:	370c      	adds	r7, #12
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b94:	4770      	bx	lr

08019b96 <pifImuSensor_ReadRawAccel>:

BOOL pifImuSensor_ReadRawAccel(PifImuSensor* p_owner, float* p_accel)
{
 8019b96:	b580      	push	{r7, lr}
 8019b98:	b088      	sub	sp, #32
 8019b9a:	af00      	add	r7, sp, #0
 8019b9c:	6078      	str	r0, [r7, #4]
 8019b9e:	6039      	str	r1, [r7, #0]
	int16_t data[AXIS_COUNT];
    float accel[AXIS_COUNT];

	if (!(p_owner->_measure & IMU_MEASURE_ACCELERO)) return FALSE;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	781b      	ldrb	r3, [r3, #0]
 8019ba4:	f003 0302 	and.w	r3, r3, #2
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d101      	bne.n	8019bb0 <pifImuSensor_ReadRawAccel+0x1a>
 8019bac:	2300      	movs	r3, #0
 8019bae:	e02d      	b.n	8019c0c <pifImuSensor_ReadRawAccel+0x76>

	if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, data)) return FALSE;
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	6a1b      	ldr	r3, [r3, #32]
 8019bb4:	687a      	ldr	r2, [r7, #4]
 8019bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019bb8:	f107 0118 	add.w	r1, r7, #24
 8019bbc:	4610      	mov	r0, r2
 8019bbe:	4798      	blx	r3
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d101      	bne.n	8019bca <pifImuSensor_ReadRawAccel+0x34>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	e020      	b.n	8019c0c <pifImuSensor_ReadRawAccel+0x76>

	accel[AXIS_X] = data[AXIS_X];
 8019bca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bce:	ee07 3a90 	vmov	s15, r3
 8019bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bd6:	edc7 7a03 	vstr	s15, [r7, #12]
	accel[AXIS_Y] = data[AXIS_Y];
 8019bda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019bde:	ee07 3a90 	vmov	s15, r3
 8019be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019be6:	edc7 7a04 	vstr	s15, [r7, #16]
	accel[AXIS_Z] = data[AXIS_Z];
 8019bea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019bee:	ee07 3a90 	vmov	s15, r3
 8019bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bf6:	edc7 7a05 	vstr	s15, [r7, #20]

	_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	7f1b      	ldrb	r3, [r3, #28]
 8019bfe:	f107 010c 	add.w	r1, r7, #12
 8019c02:	683a      	ldr	r2, [r7, #0]
 8019c04:	6878      	ldr	r0, [r7, #4]
 8019c06:	f7ff fd71 	bl	80196ec <_alignSensors>
	return TRUE;
 8019c0a:	2301      	movs	r3, #1
}
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	3720      	adds	r7, #32
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}

08019c14 <pifImuSensor_SetMagAlign>:
	_alignSensors(p_owner, accel, p_accel, p_owner->__accel_info.align);
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019c14:	b480      	push	{r7}
 8019c16:	b083      	sub	sp, #12
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	460b      	mov	r3, r1
 8019c1e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019c20:	78fb      	ldrb	r3, [r7, #3]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d003      	beq.n	8019c2e <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	78fa      	ldrb	r2, [r7, #3]
 8019c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8019c2e:	bf00      	nop
 8019c30:	370c      	adds	r7, #12
 8019c32:	46bd      	mov	sp, r7
 8019c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c38:	4770      	bx	lr

08019c3a <pifImuSensor_ReadRawMag>:

BOOL pifImuSensor_ReadRawMag(PifImuSensor* p_owner, float* p_mag)
{
 8019c3a:	b580      	push	{r7, lr}
 8019c3c:	b088      	sub	sp, #32
 8019c3e:	af00      	add	r7, sp, #0
 8019c40:	6078      	str	r0, [r7, #4]
 8019c42:	6039      	str	r1, [r7, #0]
	int16_t data[AXIS_COUNT];
    float mag[AXIS_COUNT];

	if (!(p_owner->_measure & IMU_MEASURE_MAGNETO)) return FALSE;
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	781b      	ldrb	r3, [r3, #0]
 8019c48:	f003 0304 	and.w	r3, r3, #4
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d101      	bne.n	8019c54 <pifImuSensor_ReadRawMag+0x1a>
 8019c50:	2300      	movs	r3, #0
 8019c52:	e02e      	b.n	8019cb2 <pifImuSensor_ReadRawMag+0x78>

	if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, data)) return FALSE;
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c58:	687a      	ldr	r2, [r7, #4]
 8019c5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019c5c:	f107 0118 	add.w	r1, r7, #24
 8019c60:	4610      	mov	r0, r2
 8019c62:	4798      	blx	r3
 8019c64:	4603      	mov	r3, r0
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d101      	bne.n	8019c6e <pifImuSensor_ReadRawMag+0x34>
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	e021      	b.n	8019cb2 <pifImuSensor_ReadRawMag+0x78>

	mag[AXIS_X] = data[AXIS_X];
 8019c6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c72:	ee07 3a90 	vmov	s15, r3
 8019c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c7a:	edc7 7a03 	vstr	s15, [r7, #12]
	mag[AXIS_Y] = data[AXIS_Y];
 8019c7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019c82:	ee07 3a90 	vmov	s15, r3
 8019c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c8a:	edc7 7a04 	vstr	s15, [r7, #16]
	mag[AXIS_Z] = data[AXIS_Z];
 8019c8e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019c92:	ee07 3a90 	vmov	s15, r3
 8019c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c9a:	edc7 7a05 	vstr	s15, [r7, #20]

	_alignSensors(p_owner, mag, p_mag, p_owner->__mag_info.align);
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ca4:	f107 010c 	add.w	r1, r7, #12
 8019ca8:	683a      	ldr	r2, [r7, #0]
 8019caa:	6878      	ldr	r0, [r7, #4]
 8019cac:	f7ff fd1e 	bl	80196ec <_alignSensors>
	return TRUE;
 8019cb0:	2301      	movs	r3, #1
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	3720      	adds	r7, #32
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
 8019cba:	0000      	movs	r0, r0
 8019cbc:	0000      	movs	r0, r0
	...

08019cc0 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b082      	sub	sp, #8
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	460b      	mov	r3, r1
 8019cca:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d101      	bne.n	8019cd6 <_changeFsSel+0x16>
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	e017      	b.n	8019d06 <_changeFsSel+0x46>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8019cd6:	78fb      	ldrb	r3, [r7, #3]
 8019cd8:	2201      	movs	r2, #1
 8019cda:	fa02 f303 	lsl.w	r3, r2, r3
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7e6 fbd4 	bl	800048c <__aeabi_i2d>
 8019ce4:	4602      	mov	r2, r0
 8019ce6:	460b      	mov	r3, r1
 8019ce8:	a109      	add	r1, pc, #36	; (adr r1, 8019d10 <_changeFsSel+0x50>)
 8019cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cee:	f7e6 fd61 	bl	80007b4 <__aeabi_ddiv>
 8019cf2:	4602      	mov	r2, r0
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	4610      	mov	r0, r2
 8019cf8:	4619      	mov	r1, r3
 8019cfa:	f7e6 ff13 	bl	8000b24 <__aeabi_d2f>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	605a      	str	r2, [r3, #4]
	return TRUE;
 8019d04:	2301      	movs	r3, #1
}
 8019d06:	4618      	mov	r0, r3
 8019d08:	3708      	adds	r7, #8
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bd80      	pop	{r7, pc}
 8019d0e:	bf00      	nop
 8019d10:	00000000 	.word	0x00000000
 8019d14:	40606000 	.word	0x40606000

08019d18 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8019d18:	b480      	push	{r7}
 8019d1a:	b083      	sub	sp, #12
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	460b      	mov	r3, r1
 8019d22:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d101      	bne.n	8019d2e <_changeAfsSel+0x16>
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	e00c      	b.n	8019d48 <_changeAfsSel+0x30>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8019d2e:	78fb      	ldrb	r3, [r7, #3]
 8019d30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019d34:	fa42 f303 	asr.w	r3, r2, r3
 8019d38:	ee07 3a90 	vmov	s15, r3
 8019d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	edc3 7a02 	vstr	s15, [r3, #8]
	return TRUE;
 8019d46:	2301      	movs	r3, #1
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	370c      	adds	r7, #12
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d52:	4770      	bx	lr

08019d54 <pifMpu60x0_Detect>:

BOOL pifMpu60x0_Detect(PifI2cPort* p_i2c, uint8_t addr)
{
 8019d54:	b590      	push	{r4, r7, lr}
 8019d56:	b089      	sub	sp, #36	; 0x24
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
 8019d5c:	460b      	mov	r3, r1
 8019d5e:	70fb      	strb	r3, [r7, #3]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "MPU60X0 Ident: ";
 8019d60:	4b1c      	ldr	r3, [pc, #112]	; (8019dd4 <pifMpu60x0_Detect+0x80>)
 8019d62:	f107 040c 	add.w	r4, r7, #12
 8019d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif	
	uint8_t data;
	PifI2cDevice* p_device;

    p_device = pifI2cPort_TemporaryDevice(p_i2c, addr);
 8019d6c:	78fb      	ldrb	r3, [r7, #3]
 8019d6e:	4619      	mov	r1, r3
 8019d70:	6878      	ldr	r0, [r7, #4]
 8019d72:	f7f8 f9e9 	bl	8012148 <pifI2cPort_TemporaryDevice>
 8019d76:	61f8      	str	r0, [r7, #28]

	if (!pifI2cDevice_ReadRegByte(p_device, MPU60X0_REG_WHO_AM_I, &data)) return FALSE;
 8019d78:	f107 030b 	add.w	r3, r7, #11
 8019d7c:	461a      	mov	r2, r3
 8019d7e:	2175      	movs	r1, #117	; 0x75
 8019d80:	69f8      	ldr	r0, [r7, #28]
 8019d82:	f7f8 faa5 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d101      	bne.n	8019d90 <pifMpu60x0_Detect+0x3c>
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	e01c      	b.n	8019dca <pifMpu60x0_Detect+0x76>
	if (data != addr) return FALSE;
 8019d90:	7afb      	ldrb	r3, [r7, #11]
 8019d92:	78fa      	ldrb	r2, [r7, #3]
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d001      	beq.n	8019d9c <pifMpu60x0_Detect+0x48>
 8019d98:	2300      	movs	r3, #0
 8019d9a:	e016      	b.n	8019dca <pifMpu60x0_Detect+0x76>
#ifndef __PIF_NO_LOG__	
	if (data < 32) {
 8019d9c:	7afb      	ldrb	r3, [r7, #11]
 8019d9e:	2b1f      	cmp	r3, #31
 8019da0:	d809      	bhi.n	8019db6 <pifMpu60x0_Detect+0x62>
		pifLog_Printf(LT_INFO, "%s%Xh", ident, data >> 1);
 8019da2:	7afb      	ldrb	r3, [r7, #11]
 8019da4:	085b      	lsrs	r3, r3, #1
 8019da6:	b2db      	uxtb	r3, r3
 8019da8:	f107 020c 	add.w	r2, r7, #12
 8019dac:	490a      	ldr	r1, [pc, #40]	; (8019dd8 <pifMpu60x0_Detect+0x84>)
 8019dae:	2002      	movs	r0, #2
 8019db0:	f7f9 fb7c 	bl	80134ac <pifLog_Printf>
 8019db4:	e008      	b.n	8019dc8 <pifMpu60x0_Detect+0x74>
	}
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
 8019db6:	7afb      	ldrb	r3, [r7, #11]
 8019db8:	085b      	lsrs	r3, r3, #1
 8019dba:	b2db      	uxtb	r3, r3
 8019dbc:	f107 020c 	add.w	r2, r7, #12
 8019dc0:	4906      	ldr	r1, [pc, #24]	; (8019ddc <pifMpu60x0_Detect+0x88>)
 8019dc2:	2002      	movs	r0, #2
 8019dc4:	f7f9 fb72 	bl	80134ac <pifLog_Printf>
	}
#endif
	return TRUE;
 8019dc8:	2301      	movs	r3, #1
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3724      	adds	r7, #36	; 0x24
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	bd90      	pop	{r4, r7, pc}
 8019dd2:	bf00      	nop
 8019dd4:	08027ee4 	.word	0x08027ee4
 8019dd8:	08027ed4 	.word	0x08027ed4
 8019ddc:	08027edc 	.word	0x08027edc

08019de0 <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b088      	sub	sp, #32
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	60f8      	str	r0, [r7, #12]
 8019de8:	607a      	str	r2, [r7, #4]
 8019dea:	461a      	mov	r2, r3
 8019dec:	460b      	mov	r3, r1
 8019dee:	817b      	strh	r3, [r7, #10]
 8019df0:	4613      	mov	r3, r2
 8019df2:	727b      	strb	r3, [r7, #9]
    PifMpu60x0AccelConfig accel_config;
    PifMpu60x0GyroConfig gyro_config;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d005      	beq.n	8019e06 <pifMpu60x0_Init+0x26>
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d002      	beq.n	8019e06 <pifMpu60x0_Init+0x26>
 8019e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d104      	bne.n	8019e10 <pifMpu60x0_Init+0x30>
		pif_error = E_INVALID_PARAM;
 8019e06:	4b58      	ldr	r3, [pc, #352]	; (8019f68 <pifMpu60x0_Init+0x188>)
 8019e08:	2201      	movs	r2, #1
 8019e0a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	e0a6      	b.n	8019f5e <pifMpu60x0_Init+0x17e>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8019e10:	2210      	movs	r2, #16
 8019e12:	2100      	movs	r1, #0
 8019e14:	68f8      	ldr	r0, [r7, #12]
 8019e16:	f009 f911 	bl	802303c <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c, addr);
 8019e1a:	7a7b      	ldrb	r3, [r7, #9]
 8019e1c:	4619      	mov	r1, r3
 8019e1e:	6878      	ldr	r0, [r7, #4]
 8019e20:	f7f8 f954 	bl	80120cc <pifI2cPort_AddDevice>
 8019e24:	4602      	mov	r2, r0
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	689b      	ldr	r3, [r3, #8]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d101      	bne.n	8019e36 <pifMpu60x0_Init+0x56>
 8019e32:	2300      	movs	r3, #0
 8019e34:	e093      	b.n	8019f5e <pifMpu60x0_Init+0x17e>

   	pwr_mgmt_1.byte = 0;
 8019e36:	2300      	movs	r3, #0
 8019e38:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 8019e3a:	7d3b      	ldrb	r3, [r7, #20]
 8019e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e40:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	689b      	ldr	r3, [r3, #8]
 8019e46:	7d3a      	ldrb	r2, [r7, #20]
 8019e48:	216b      	movs	r1, #107	; 0x6b
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7f8 fb70 	bl	8012530 <pifI2cDevice_WriteRegByte>
 8019e50:	4603      	mov	r3, r0
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d076      	beq.n	8019f44 <pifMpu60x0_Init+0x164>
	pifTaskManager_YieldMs(100);
 8019e56:	2064      	movs	r0, #100	; 0x64
 8019e58:	f7fa ff94 	bl	8014d84 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, &gyro_config.byte)) goto fail;
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	689b      	ldr	r3, [r3, #8]
 8019e60:	f107 0218 	add.w	r2, r7, #24
 8019e64:	211b      	movs	r1, #27
 8019e66:	4618      	mov	r0, r3
 8019e68:	f7f8 fa32 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d06a      	beq.n	8019f48 <pifMpu60x0_Init+0x168>
    if (!_changeFsSel(p_imu_sensor, gyro_config.bit.fs_sel)) goto fail;
 8019e72:	7e3b      	ldrb	r3, [r7, #24]
 8019e74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	4619      	mov	r1, r3
 8019e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e7e:	f7ff ff1f 	bl	8019cc0 <_changeFsSel>
 8019e82:	4603      	mov	r3, r0
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d061      	beq.n	8019f4c <pifMpu60x0_Init+0x16c>

    if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, &accel_config.byte)) goto fail;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	689b      	ldr	r3, [r3, #8]
 8019e8c:	f107 021c 	add.w	r2, r7, #28
 8019e90:	211c      	movs	r1, #28
 8019e92:	4618      	mov	r0, r3
 8019e94:	f7f8 fa1c 	bl	80122d0 <pifI2cDevice_ReadRegByte>
 8019e98:	4603      	mov	r3, r0
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d058      	beq.n	8019f50 <pifMpu60x0_Init+0x170>
    if (!_changeAfsSel(p_imu_sensor, accel_config.bit.afs_sel)) goto fail;
 8019e9e:	7f3b      	ldrb	r3, [r7, #28]
 8019ea0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8019ea4:	b2db      	uxtb	r3, r3
 8019ea6:	4619      	mov	r1, r3
 8019ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019eaa:	f7ff ff35 	bl	8019d18 <_changeAfsSel>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d04f      	beq.n	8019f54 <pifMpu60x0_Init+0x174>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019eb4:	897b      	ldrh	r3, [r7, #10]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d106      	bne.n	8019ec8 <pifMpu60x0_Init+0xe8>
 8019eba:	4b2c      	ldr	r3, [pc, #176]	; (8019f6c <pifMpu60x0_Init+0x18c>)
 8019ebc:	881b      	ldrh	r3, [r3, #0]
 8019ebe:	1c5a      	adds	r2, r3, #1
 8019ec0:	b291      	uxth	r1, r2
 8019ec2:	4a2a      	ldr	r2, [pc, #168]	; (8019f6c <pifMpu60x0_Init+0x18c>)
 8019ec4:	8011      	strh	r1, [r2, #0]
 8019ec6:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	897a      	ldrh	r2, [r7, #10]
 8019ecc:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ed8:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 8019eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019edc:	781b      	ldrb	r3, [r3, #0]
 8019ede:	f043 0303 	orr.w	r3, r3, #3
 8019ee2:	b2da      	uxtb	r2, r3
 8019ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee6:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 8019ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eea:	2201      	movs	r2, #1
 8019eec:	741a      	strb	r2, [r3, #16]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 8019eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef0:	4a1f      	ldr	r2, [pc, #124]	; (8019f70 <pifMpu60x0_Init+0x190>)
 8019ef2:	615a      	str	r2, [r3, #20]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 8019ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef6:	68fa      	ldr	r2, [r7, #12]
 8019ef8:	619a      	str	r2, [r3, #24]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 8019efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019efc:	2201      	movs	r2, #1
 8019efe:	771a      	strb	r2, [r3, #28]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 8019f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f02:	4a1c      	ldr	r2, [pc, #112]	; (8019f74 <pifMpu60x0_Init+0x194>)
 8019f04:	621a      	str	r2, [r3, #32]
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 8019f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f08:	68fa      	ldr	r2, [r7, #12]
 8019f0a:	625a      	str	r2, [r3, #36]	; 0x24

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 8019f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f0e:	2200      	movs	r2, #0
 8019f10:	869a      	strh	r2, [r3, #52]	; 0x34
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 8019f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f14:	2200      	movs	r2, #0
 8019f16:	86da      	strh	r2, [r3, #54]	; 0x36
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 8019f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__use_calibrate = FALSE;
 8019f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f20:	2200      	movs	r2, #0
 8019f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 8019f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f28:	2200      	movs	r2, #0
 8019f2a:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 8019f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f2e:	2200      	movs	r2, #0
 8019f30:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 8019f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f34:	2200      	movs	r2, #0
 8019f36:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__actual_threshold = 0;
 8019f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f3a:	f04f 0200 	mov.w	r2, #0
 8019f3e:	649a      	str	r2, [r3, #72]	; 0x48
    return TRUE;
 8019f40:	2301      	movs	r3, #1
 8019f42:	e00c      	b.n	8019f5e <pifMpu60x0_Init+0x17e>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019f44:	bf00      	nop
 8019f46:	e006      	b.n	8019f56 <pifMpu60x0_Init+0x176>
    if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, &gyro_config.byte)) goto fail;
 8019f48:	bf00      	nop
 8019f4a:	e004      	b.n	8019f56 <pifMpu60x0_Init+0x176>
    if (!_changeFsSel(p_imu_sensor, gyro_config.bit.fs_sel)) goto fail;
 8019f4c:	bf00      	nop
 8019f4e:	e002      	b.n	8019f56 <pifMpu60x0_Init+0x176>
    if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, &accel_config.byte)) goto fail;
 8019f50:	bf00      	nop
 8019f52:	e000      	b.n	8019f56 <pifMpu60x0_Init+0x176>
    if (!_changeAfsSel(p_imu_sensor, accel_config.bit.afs_sel)) goto fail;
 8019f54:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 8019f56:	68f8      	ldr	r0, [r7, #12]
 8019f58:	f000 f80e 	bl	8019f78 <pifMpu60x0_Clear>
	return FALSE;
 8019f5c:	2300      	movs	r3, #0
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	3720      	adds	r7, #32
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	20001c55 	.word	0x20001c55
 8019f6c:	2000011c 	.word	0x2000011c
 8019f70:	0801a025 	.word	0x0801a025
 8019f74:	0801a0eb 	.word	0x0801a0eb

08019f78 <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b082      	sub	sp, #8
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	689b      	ldr	r3, [r3, #8]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d00b      	beq.n	8019fa0 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	689b      	ldr	r3, [r3, #8]
 8019f8c:	689a      	ldr	r2, [r3, #8]
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	689b      	ldr	r3, [r3, #8]
 8019f92:	4619      	mov	r1, r3
 8019f94:	4610      	mov	r0, r2
 8019f96:	f7f8 f8c3 	bl	8012120 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	609a      	str	r2, [r3, #8]
    }
}
 8019fa0:	bf00      	nop
 8019fa2:	3708      	adds	r7, #8
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd80      	pop	{r7, pc}

08019fa8 <pifMpu60x0_SetFsSel>:
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetFsSel(PifMpu60x0* p_owner, PifMpu60x0FsSel fs_sel)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b082      	sub	sp, #8
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, fs_sel)) return FALSE;
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6898      	ldr	r0, [r3, #8]
 8019fb8:	78fb      	ldrb	r3, [r7, #3]
 8019fba:	f240 3202 	movw	r2, #770	; 0x302
 8019fbe:	211b      	movs	r1, #27
 8019fc0:	f7f8 facc 	bl	801255c <pifI2cDevice_WriteRegBit8>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d101      	bne.n	8019fce <pifMpu60x0_SetFsSel+0x26>
 8019fca:	2300      	movs	r3, #0
 8019fcc:	e007      	b.n	8019fde <pifMpu60x0_SetFsSel+0x36>
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	68db      	ldr	r3, [r3, #12]
 8019fd2:	78fa      	ldrb	r2, [r7, #3]
 8019fd4:	4611      	mov	r1, r2
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7ff fe72 	bl	8019cc0 <_changeFsSel>
	return TRUE;
 8019fdc:	2301      	movs	r3, #1
}
 8019fde:	4618      	mov	r0, r3
 8019fe0:	3708      	adds	r7, #8
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}

08019fe6 <pifMpu60x0_SetAfsSel>:
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAfsSel(PifMpu60x0* p_owner, PifMpu60x0AfsSel afs_sel)
{
 8019fe6:	b580      	push	{r7, lr}
 8019fe8:	b082      	sub	sp, #8
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
 8019fee:	460b      	mov	r3, r1
 8019ff0:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, afs_sel)) return FALSE;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	6898      	ldr	r0, [r3, #8]
 8019ff6:	78fb      	ldrb	r3, [r7, #3]
 8019ff8:	f240 3202 	movw	r2, #770	; 0x302
 8019ffc:	211c      	movs	r1, #28
 8019ffe:	f7f8 faad 	bl	801255c <pifI2cDevice_WriteRegBit8>
 801a002:	4603      	mov	r3, r0
 801a004:	2b00      	cmp	r3, #0
 801a006:	d101      	bne.n	801a00c <pifMpu60x0_SetAfsSel+0x26>
 801a008:	2300      	movs	r3, #0
 801a00a:	e007      	b.n	801a01c <pifMpu60x0_SetAfsSel+0x36>
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	68db      	ldr	r3, [r3, #12]
 801a010:	78fa      	ldrb	r2, [r7, #3]
 801a012:	4611      	mov	r1, r2
 801a014:	4618      	mov	r0, r3
 801a016:	f7ff fe7f 	bl	8019d18 <_changeAfsSel>
	return TRUE;
 801a01a:	2301      	movs	r3, #1
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3708      	adds	r7, #8
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <pifMpu60x0_ReadGyro>:

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b084      	sub	sp, #16
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	6898      	ldr	r0, [r3, #8]
 801a032:	f107 0208 	add.w	r2, r7, #8
 801a036:	2306      	movs	r3, #6
 801a038:	2143      	movs	r1, #67	; 0x43
 801a03a:	f7f8 f981 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 801a03e:	4603      	mov	r3, r0
 801a040:	2b00      	cmp	r3, #0
 801a042:	d101      	bne.n	801a048 <pifMpu60x0_ReadGyro+0x24>
 801a044:	2300      	movs	r3, #0
 801a046:	e04c      	b.n	801a0e2 <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 801a048:	7a3b      	ldrb	r3, [r7, #8]
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	021b      	lsls	r3, r3, #8
 801a04e:	b29a      	uxth	r2, r3
 801a050:	7a7b      	ldrb	r3, [r7, #9]
 801a052:	b29b      	uxth	r3, r3
 801a054:	4413      	add	r3, r2
 801a056:	b29b      	uxth	r3, r3
 801a058:	b21a      	sxth	r2, r3
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 801a05e:	7abb      	ldrb	r3, [r7, #10]
 801a060:	b29b      	uxth	r3, r3
 801a062:	021b      	lsls	r3, r3, #8
 801a064:	b29a      	uxth	r2, r3
 801a066:	7afb      	ldrb	r3, [r7, #11]
 801a068:	b29b      	uxth	r3, r3
 801a06a:	4413      	add	r3, r2
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	3302      	adds	r3, #2
 801a072:	b212      	sxth	r2, r2
 801a074:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 801a076:	7b3b      	ldrb	r3, [r7, #12]
 801a078:	b29b      	uxth	r3, r3
 801a07a:	021b      	lsls	r3, r3, #8
 801a07c:	b29a      	uxth	r2, r3
 801a07e:	7b7b      	ldrb	r3, [r7, #13]
 801a080:	b29b      	uxth	r3, r3
 801a082:	4413      	add	r3, r2
 801a084:	b29a      	uxth	r2, r3
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	3304      	adds	r3, #4
 801a08a:	b212      	sxth	r2, r2
 801a08c:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	781b      	ldrb	r3, [r3, #0]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d024      	beq.n	801a0e0 <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 801a096:	683b      	ldr	r3, [r7, #0]
 801a098:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a09c:	461a      	mov	r2, r3
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a0a6:	b21a      	sxth	r2, r3
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	3302      	adds	r3, #2
 801a0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0b4:	461a      	mov	r2, r3
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	781b      	ldrb	r3, [r3, #0]
 801a0ba:	fb92 f2f3 	sdiv	r2, r2, r3
 801a0be:	683b      	ldr	r3, [r7, #0]
 801a0c0:	3302      	adds	r3, #2
 801a0c2:	b212      	sxth	r2, r2
 801a0c4:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 801a0c6:	683b      	ldr	r3, [r7, #0]
 801a0c8:	3304      	adds	r3, #4
 801a0ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	781b      	ldrb	r3, [r3, #0]
 801a0d4:	fb92 f2f3 	sdiv	r2, r2, r3
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	3304      	adds	r3, #4
 801a0dc:	b212      	sxth	r2, r2
 801a0de:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a0e0:	2301      	movs	r3, #1
}
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	3710      	adds	r7, #16
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bd80      	pop	{r7, pc}

0801a0ea <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 801a0ea:	b580      	push	{r7, lr}
 801a0ec:	b084      	sub	sp, #16
 801a0ee:	af00      	add	r7, sp, #0
 801a0f0:	6078      	str	r0, [r7, #4]
 801a0f2:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	6898      	ldr	r0, [r3, #8]
 801a0f8:	f107 0208 	add.w	r2, r7, #8
 801a0fc:	2306      	movs	r3, #6
 801a0fe:	213b      	movs	r1, #59	; 0x3b
 801a100:	f7f8 f91e 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 801a104:	4603      	mov	r3, r0
 801a106:	2b00      	cmp	r3, #0
 801a108:	d101      	bne.n	801a10e <pifMpu60x0_ReadAccel+0x24>
 801a10a:	2300      	movs	r3, #0
 801a10c:	e04c      	b.n	801a1a8 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 801a10e:	7a3b      	ldrb	r3, [r7, #8]
 801a110:	b29b      	uxth	r3, r3
 801a112:	021b      	lsls	r3, r3, #8
 801a114:	b29a      	uxth	r2, r3
 801a116:	7a7b      	ldrb	r3, [r7, #9]
 801a118:	b29b      	uxth	r3, r3
 801a11a:	4413      	add	r3, r2
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	b21a      	sxth	r2, r3
 801a120:	683b      	ldr	r3, [r7, #0]
 801a122:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 801a124:	7abb      	ldrb	r3, [r7, #10]
 801a126:	b29b      	uxth	r3, r3
 801a128:	021b      	lsls	r3, r3, #8
 801a12a:	b29a      	uxth	r2, r3
 801a12c:	7afb      	ldrb	r3, [r7, #11]
 801a12e:	b29b      	uxth	r3, r3
 801a130:	4413      	add	r3, r2
 801a132:	b29a      	uxth	r2, r3
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	3302      	adds	r3, #2
 801a138:	b212      	sxth	r2, r2
 801a13a:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 801a13c:	7b3b      	ldrb	r3, [r7, #12]
 801a13e:	b29b      	uxth	r3, r3
 801a140:	021b      	lsls	r3, r3, #8
 801a142:	b29a      	uxth	r2, r3
 801a144:	7b7b      	ldrb	r3, [r7, #13]
 801a146:	b29b      	uxth	r3, r3
 801a148:	4413      	add	r3, r2
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	3304      	adds	r3, #4
 801a150:	b212      	sxth	r2, r2
 801a152:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	785b      	ldrb	r3, [r3, #1]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d024      	beq.n	801a1a6 <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a162:	461a      	mov	r2, r3
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	785b      	ldrb	r3, [r3, #1]
 801a168:	fb92 f3f3 	sdiv	r3, r2, r3
 801a16c:	b21a      	sxth	r2, r3
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	3302      	adds	r3, #2
 801a176:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a17a:	461a      	mov	r2, r3
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	785b      	ldrb	r3, [r3, #1]
 801a180:	fb92 f2f3 	sdiv	r2, r2, r3
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	3302      	adds	r3, #2
 801a188:	b212      	sxth	r2, r2
 801a18a:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 801a18c:	683b      	ldr	r3, [r7, #0]
 801a18e:	3304      	adds	r3, #4
 801a190:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a194:	461a      	mov	r2, r3
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	785b      	ldrb	r3, [r3, #1]
 801a19a:	fb92 f2f3 	sdiv	r2, r2, r3
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	3304      	adds	r3, #4
 801a1a2:	b212      	sxth	r2, r2
 801a1a4:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a1a6:	2301      	movs	r3, #1
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3710      	adds	r7, #16
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	b087      	sub	sp, #28
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 801a1bc:	2301      	movs	r3, #1
 801a1be:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	8adb      	ldrh	r3, [r3, #22]
 801a1c4:	b2db      	uxtb	r3, r3
 801a1c6:	f003 030f 	and.w	r3, r3, #15
 801a1ca:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	8adb      	ldrh	r3, [r3, #22]
 801a1d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801a1d4:	b29a      	uxth	r2, r3
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 801a1da:	2300      	movs	r3, #0
 801a1dc:	617b      	str	r3, [r7, #20]
 801a1de:	e00b      	b.n	801a1f8 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	697a      	ldr	r2, [r7, #20]
 801a1e4:	3204      	adds	r2, #4
 801a1e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d001      	beq.n	801a1f2 <_checkPromCrc+0x42>
            zero = 0;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 801a1f2:	697b      	ldr	r3, [r7, #20]
 801a1f4:	3301      	adds	r3, #1
 801a1f6:	617b      	str	r3, [r7, #20]
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	2b07      	cmp	r3, #7
 801a1fc:	ddf0      	ble.n	801a1e0 <_checkPromCrc+0x30>
    }
    if (zero)
 801a1fe:	7afb      	ldrb	r3, [r7, #11]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d001      	beq.n	801a208 <_checkPromCrc+0x58>
        return FALSE;
 801a204:	2300      	movs	r3, #0
 801a206:	e04b      	b.n	801a2a0 <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 801a208:	2300      	movs	r3, #0
 801a20a:	617b      	str	r3, [r7, #20]
 801a20c:	e033      	b.n	801a276 <_checkPromCrc+0xc6>
        if (i & 1)
 801a20e:	697b      	ldr	r3, [r7, #20]
 801a210:	f003 0301 	and.w	r3, r3, #1
 801a214:	2b00      	cmp	r3, #0
 801a216:	d00a      	beq.n	801a22e <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	105a      	asrs	r2, r3, #1
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	3204      	adds	r2, #4
 801a220:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a224:	b2db      	uxtb	r3, r3
 801a226:	68fa      	ldr	r2, [r7, #12]
 801a228:	4053      	eors	r3, r2
 801a22a:	60fb      	str	r3, [r7, #12]
 801a22c:	e00b      	b.n	801a246 <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 801a22e:	697b      	ldr	r3, [r7, #20]
 801a230:	105a      	asrs	r2, r3, #1
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	3204      	adds	r2, #4
 801a236:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a23a:	0a1b      	lsrs	r3, r3, #8
 801a23c:	b29b      	uxth	r3, r3
 801a23e:	461a      	mov	r2, r3
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	4053      	eors	r3, r2
 801a244:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a246:	2308      	movs	r3, #8
 801a248:	613b      	str	r3, [r7, #16]
 801a24a:	e00e      	b.n	801a26a <_checkPromCrc+0xba>
            if (res & 0x8000)
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a252:	2b00      	cmp	r3, #0
 801a254:	d003      	beq.n	801a25e <_checkPromCrc+0xae>
                res ^= 0x1800;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801a25c:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	005b      	lsls	r3, r3, #1
 801a262:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a264:	693b      	ldr	r3, [r7, #16]
 801a266:	3b01      	subs	r3, #1
 801a268:	613b      	str	r3, [r7, #16]
 801a26a:	693b      	ldr	r3, [r7, #16]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	dced      	bgt.n	801a24c <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 801a270:	697b      	ldr	r3, [r7, #20]
 801a272:	3301      	adds	r3, #1
 801a274:	617b      	str	r3, [r7, #20]
 801a276:	697b      	ldr	r3, [r7, #20]
 801a278:	2b0f      	cmp	r3, #15
 801a27a:	ddc8      	ble.n	801a20e <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	8ada      	ldrh	r2, [r3, #22]
 801a280:	7abb      	ldrb	r3, [r7, #10]
 801a282:	b29b      	uxth	r3, r3
 801a284:	4313      	orrs	r3, r2
 801a286:	b29a      	uxth	r2, r3
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801a28c:	7aba      	ldrb	r2, [r7, #10]
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	0b1b      	lsrs	r3, r3, #12
 801a292:	f003 030f 	and.w	r3, r3, #15
 801a296:	429a      	cmp	r2, r3
 801a298:	d101      	bne.n	801a29e <_checkPromCrc+0xee>
        return TRUE;
 801a29a:	2301      	movs	r3, #1
 801a29c:	e000      	b.n	801a2a0 <_checkPromCrc+0xf0>

    return FALSE;
 801a29e:	2300      	movs	r3, #0
}
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	371c      	adds	r7, #28
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2aa:	4770      	bx	lr

0801a2ac <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, float* p_pressure, float* p_temperature)
{
 801a2ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a2b0:	b0d2      	sub	sp, #328	; 0x148
 801a2b2:	af00      	add	r7, sp, #0
 801a2b4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 801a2b8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801a2bc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 801a2c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a2c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a2c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a2ca:	8a5b      	ldrh	r3, [r3, #18]
 801a2cc:	021b      	lsls	r3, r3, #8
 801a2ce:	1ad3      	subs	r3, r2, r3
 801a2d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 801a2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a2d8:	17da      	asrs	r2, r3, #31
 801a2da:	469a      	mov	sl, r3
 801a2dc:	4693      	mov	fp, r2
 801a2de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a2e2:	8a9b      	ldrh	r3, [r3, #20]
 801a2e4:	b29b      	uxth	r3, r3
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	4698      	mov	r8, r3
 801a2ea:	4691      	mov	r9, r2
 801a2ec:	fb08 f20b 	mul.w	r2, r8, fp
 801a2f0:	fb0a f309 	mul.w	r3, sl, r9
 801a2f4:	4413      	add	r3, r2
 801a2f6:	fbaa 4508 	umull	r4, r5, sl, r8
 801a2fa:	442b      	add	r3, r5
 801a2fc:	461d      	mov	r5, r3
 801a2fe:	f04f 0200 	mov.w	r2, #0
 801a302:	f04f 0300 	mov.w	r3, #0
 801a306:	0de2      	lsrs	r2, r4, #23
 801a308:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 801a30c:	15eb      	asrs	r3, r5, #23
 801a30e:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 801a312:	6739      	str	r1, [r7, #112]	; 0x70
 801a314:	f143 0300 	adc.w	r3, r3, #0
 801a318:	677b      	str	r3, [r7, #116]	; 0x74
 801a31a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801a31e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 801a322:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a326:	899b      	ldrh	r3, [r3, #12]
 801a328:	b29b      	uxth	r3, r3
 801a32a:	2200      	movs	r2, #0
 801a32c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801a330:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801a334:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801a338:	460b      	mov	r3, r1
 801a33a:	0c1b      	lsrs	r3, r3, #16
 801a33c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801a340:	460b      	mov	r3, r1
 801a342:	041b      	lsls	r3, r3, #16
 801a344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a34c:	8a1b      	ldrh	r3, [r3, #16]
 801a34e:	b29b      	uxth	r3, r3
 801a350:	2200      	movs	r2, #0
 801a352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a356:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801a35a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a35e:	17da      	asrs	r2, r3, #31
 801a360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a364:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801a368:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801a36c:	462b      	mov	r3, r5
 801a36e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 801a372:	4642      	mov	r2, r8
 801a374:	fb02 f203 	mul.w	r2, r2, r3
 801a378:	464b      	mov	r3, r9
 801a37a:	4621      	mov	r1, r4
 801a37c:	fb01 f303 	mul.w	r3, r1, r3
 801a380:	4413      	add	r3, r2
 801a382:	4622      	mov	r2, r4
 801a384:	4641      	mov	r1, r8
 801a386:	fba2 1201 	umull	r1, r2, r2, r1
 801a38a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801a38e:	460a      	mov	r2, r1
 801a390:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801a394:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a398:	4413      	add	r3, r2
 801a39a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801a39e:	f04f 0200 	mov.w	r2, #0
 801a3a2:	f04f 0300 	mov.w	r3, #0
 801a3a6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801a3aa:	4621      	mov	r1, r4
 801a3ac:	09ca      	lsrs	r2, r1, #7
 801a3ae:	4629      	mov	r1, r5
 801a3b0:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801a3b4:	4629      	mov	r1, r5
 801a3b6:	11cb      	asrs	r3, r1, #7
 801a3b8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801a3bc:	4621      	mov	r1, r4
 801a3be:	1889      	adds	r1, r1, r2
 801a3c0:	66b9      	str	r1, [r7, #104]	; 0x68
 801a3c2:	4629      	mov	r1, r5
 801a3c4:	eb43 0101 	adc.w	r1, r3, r1
 801a3c8:	66f9      	str	r1, [r7, #108]	; 0x6c
 801a3ca:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801a3ce:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 801a3d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a3d6:	895b      	ldrh	r3, [r3, #10]
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	2200      	movs	r2, #0
 801a3dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a3e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801a3e4:	f04f 0000 	mov.w	r0, #0
 801a3e8:	f04f 0100 	mov.w	r1, #0
 801a3ec:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801a3f0:	462b      	mov	r3, r5
 801a3f2:	03d9      	lsls	r1, r3, #15
 801a3f4:	4623      	mov	r3, r4
 801a3f6:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 801a3fa:	4623      	mov	r3, r4
 801a3fc:	03d8      	lsls	r0, r3, #15
 801a3fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a402:	89db      	ldrh	r3, [r3, #14]
 801a404:	b29b      	uxth	r3, r3
 801a406:	2200      	movs	r2, #0
 801a408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a40c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a414:	17da      	asrs	r2, r3, #31
 801a416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801a41a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801a41e:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801a422:	464b      	mov	r3, r9
 801a424:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 801a428:	4652      	mov	r2, sl
 801a42a:	fb02 f203 	mul.w	r2, r2, r3
 801a42e:	465b      	mov	r3, fp
 801a430:	4644      	mov	r4, r8
 801a432:	fb04 f303 	mul.w	r3, r4, r3
 801a436:	4413      	add	r3, r2
 801a438:	4642      	mov	r2, r8
 801a43a:	4654      	mov	r4, sl
 801a43c:	fba2 4204 	umull	r4, r2, r2, r4
 801a440:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801a444:	4622      	mov	r2, r4
 801a446:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801a44a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801a44e:	4413      	add	r3, r2
 801a450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801a454:	f04f 0200 	mov.w	r2, #0
 801a458:	f04f 0300 	mov.w	r3, #0
 801a45c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 801a460:	4644      	mov	r4, r8
 801a462:	0a22      	lsrs	r2, r4, #8
 801a464:	464c      	mov	r4, r9
 801a466:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801a46a:	464c      	mov	r4, r9
 801a46c:	1223      	asrs	r3, r4, #8
 801a46e:	1884      	adds	r4, r0, r2
 801a470:	663c      	str	r4, [r7, #96]	; 0x60
 801a472:	eb41 0303 	adc.w	r3, r1, r3
 801a476:	667b      	str	r3, [r7, #100]	; 0x64
 801a478:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801a47c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 801a480:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a484:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801a488:	f173 0300 	sbcs.w	r3, r3, #0
 801a48c:	f280 8150 	bge.w	801a730 <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 801a490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a494:	17da      	asrs	r2, r3, #31
 801a496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a49a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a49e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a4a2:	17da      	asrs	r2, r3, #31
 801a4a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a4a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801a4ac:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 801a4b0:	462b      	mov	r3, r5
 801a4b2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801a4b6:	4642      	mov	r2, r8
 801a4b8:	fb02 f203 	mul.w	r2, r2, r3
 801a4bc:	464b      	mov	r3, r9
 801a4be:	4621      	mov	r1, r4
 801a4c0:	fb01 f303 	mul.w	r3, r1, r3
 801a4c4:	4413      	add	r3, r2
 801a4c6:	4622      	mov	r2, r4
 801a4c8:	4641      	mov	r1, r8
 801a4ca:	fba2 1201 	umull	r1, r2, r2, r1
 801a4ce:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801a4d2:	460a      	mov	r2, r1
 801a4d4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801a4d8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801a4dc:	4413      	add	r3, r2
 801a4de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801a4e2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	da08      	bge.n	801a4fc <_calcurateBarometric+0x250>
 801a4ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a4ee:	1851      	adds	r1, r2, r1
 801a4f0:	65b9      	str	r1, [r7, #88]	; 0x58
 801a4f2:	f143 0300 	adc.w	r3, r3, #0
 801a4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a4f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a4fc:	f04f 0000 	mov.w	r0, #0
 801a500:	f04f 0100 	mov.w	r1, #0
 801a504:	0fd0      	lsrs	r0, r2, #31
 801a506:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a50a:	17d9      	asrs	r1, r3, #31
 801a50c:	2300      	movs	r3, #0
 801a50e:	4242      	negs	r2, r0
 801a510:	653a      	str	r2, [r7, #80]	; 0x50
 801a512:	eb63 0301 	sbc.w	r3, r3, r1
 801a516:	657b      	str	r3, [r7, #84]	; 0x54
 801a518:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801a51c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a520:	1814      	adds	r4, r2, r0
 801a522:	64bc      	str	r4, [r7, #72]	; 0x48
 801a524:	414b      	adcs	r3, r1
 801a526:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a528:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801a52c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 801a530:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a534:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 801a538:	6439      	str	r1, [r7, #64]	; 0x40
 801a53a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801a53e:	647b      	str	r3, [r7, #68]	; 0x44
 801a540:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801a544:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 801a548:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a54c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a550:	fb03 f102 	mul.w	r1, r3, r2
 801a554:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a558:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a55c:	fb02 f303 	mul.w	r3, r2, r3
 801a560:	18ca      	adds	r2, r1, r3
 801a562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a566:	fba3 1303 	umull	r1, r3, r3, r3
 801a56a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a56e:	460b      	mov	r3, r1
 801a570:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801a574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a578:	18d3      	adds	r3, r2, r3
 801a57a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a57e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 801a582:	4622      	mov	r2, r4
 801a584:	462b      	mov	r3, r5
 801a586:	f04f 0000 	mov.w	r0, #0
 801a58a:	f04f 0100 	mov.w	r1, #0
 801a58e:	0099      	lsls	r1, r3, #2
 801a590:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801a594:	0090      	lsls	r0, r2, #2
 801a596:	4602      	mov	r2, r0
 801a598:	460b      	mov	r3, r1
 801a59a:	4621      	mov	r1, r4
 801a59c:	1851      	adds	r1, r2, r1
 801a59e:	63b9      	str	r1, [r7, #56]	; 0x38
 801a5a0:	4629      	mov	r1, r5
 801a5a2:	eb43 0101 	adc.w	r1, r3, r1
 801a5a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a5a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801a5ac:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 801a5b0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a5b4:	f04f 0000 	mov.w	r0, #0
 801a5b8:	f04f 0100 	mov.w	r1, #0
 801a5bc:	0850      	lsrs	r0, r2, #1
 801a5be:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801a5c2:	1059      	asrs	r1, r3, #1
 801a5c4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a5c8:	1a14      	subs	r4, r2, r0
 801a5ca:	633c      	str	r4, [r7, #48]	; 0x30
 801a5cc:	eb63 0301 	sbc.w	r3, r3, r1
 801a5d0:	637b      	str	r3, [r7, #52]	; 0x34
 801a5d2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801a5d6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 801a5da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a5de:	f04f 0000 	mov.w	r0, #0
 801a5e2:	f04f 0100 	mov.w	r1, #0
 801a5e6:	0890      	lsrs	r0, r2, #2
 801a5e8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801a5ec:	1099      	asrs	r1, r3, #2
 801a5ee:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801a5f2:	1a14      	subs	r4, r2, r0
 801a5f4:	62bc      	str	r4, [r7, #40]	; 0x28
 801a5f6:	eb63 0301 	sbc.w	r3, r3, r1
 801a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5fc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801a600:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 801a604:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a608:	497c      	ldr	r1, [pc, #496]	; (801a7fc <_calcurateBarometric+0x550>)
 801a60a:	428a      	cmp	r2, r1
 801a60c:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801a610:	f280 808e 	bge.w	801a730 <_calcurateBarometric+0x484>
			delt = temp + 1500;
 801a614:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a618:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801a61c:	1851      	adds	r1, r2, r1
 801a61e:	6239      	str	r1, [r7, #32]
 801a620:	f143 0300 	adc.w	r3, r3, #0
 801a624:	627b      	str	r3, [r7, #36]	; 0x24
 801a626:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801a62a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 801a62e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a636:	fb03 f102 	mul.w	r1, r3, r2
 801a63a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a63e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a642:	fb02 f303 	mul.w	r3, r2, r3
 801a646:	18ca      	adds	r2, r1, r3
 801a648:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a64c:	fba3 1303 	umull	r1, r3, r3, r3
 801a650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a654:	460b      	mov	r3, r1
 801a656:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a65e:	18d3      	adds	r3, r2, r3
 801a660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a664:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801a668:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801a66c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 801a670:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a674:	4614      	mov	r4, r2
 801a676:	461d      	mov	r5, r3
 801a678:	f04f 0000 	mov.w	r0, #0
 801a67c:	f04f 0100 	mov.w	r1, #0
 801a680:	00d9      	lsls	r1, r3, #3
 801a682:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a686:	00d0      	lsls	r0, r2, #3
 801a688:	1a23      	subs	r3, r4, r0
 801a68a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a68e:	eb65 0301 	sbc.w	r3, r5, r1
 801a692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a696:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a69a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801a69e:	4621      	mov	r1, r4
 801a6a0:	1851      	adds	r1, r2, r1
 801a6a2:	61b9      	str	r1, [r7, #24]
 801a6a4:	4629      	mov	r1, r5
 801a6a6:	eb43 0101 	adc.w	r1, r3, r1
 801a6aa:	61f9      	str	r1, [r7, #28]
 801a6ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801a6b0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801a6b4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	460b      	mov	r3, r1
 801a6bc:	1894      	adds	r4, r2, r2
 801a6be:	613c      	str	r4, [r7, #16]
 801a6c0:	415b      	adcs	r3, r3
 801a6c2:	617b      	str	r3, [r7, #20]
 801a6c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a6c8:	1814      	adds	r4, r2, r0
 801a6ca:	60bc      	str	r4, [r7, #8]
 801a6cc:	414b      	adcs	r3, r1
 801a6ce:	60fb      	str	r3, [r7, #12]
 801a6d0:	f04f 0200 	mov.w	r2, #0
 801a6d4:	f04f 0300 	mov.w	r3, #0
 801a6d8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801a6dc:	464c      	mov	r4, r9
 801a6de:	00a3      	lsls	r3, r4, #2
 801a6e0:	4644      	mov	r4, r8
 801a6e2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801a6e6:	4644      	mov	r4, r8
 801a6e8:	00a2      	lsls	r2, r4, #2
 801a6ea:	4614      	mov	r4, r2
 801a6ec:	461d      	mov	r5, r3
 801a6ee:	4623      	mov	r3, r4
 801a6f0:	1a1b      	subs	r3, r3, r0
 801a6f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a6f6:	462b      	mov	r3, r5
 801a6f8:	eb63 0301 	sbc.w	r3, r3, r1
 801a6fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a700:	f04f 0200 	mov.w	r2, #0
 801a704:	f04f 0300 	mov.w	r3, #0
 801a708:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801a70c:	4621      	mov	r1, r4
 801a70e:	084a      	lsrs	r2, r1, #1
 801a710:	4629      	mov	r1, r5
 801a712:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801a716:	4629      	mov	r1, r5
 801a718:	104b      	asrs	r3, r1, #1
 801a71a:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 801a71e:	1a84      	subs	r4, r0, r2
 801a720:	603c      	str	r4, [r7, #0]
 801a722:	eb61 0303 	sbc.w	r3, r1, r3
 801a726:	607b      	str	r3, [r7, #4]
 801a728:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a72c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100.0;
 801a730:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801a734:	f7e5 fee6 	bl	8000504 <__aeabi_l2d>
 801a738:	f04f 0200 	mov.w	r2, #0
 801a73c:	4b30      	ldr	r3, [pc, #192]	; (801a800 <_calcurateBarometric+0x554>)
 801a73e:	f7e6 f839 	bl	80007b4 <__aeabi_ddiv>
 801a742:	4602      	mov	r2, r0
 801a744:	460b      	mov	r3, r1
 801a746:	4610      	mov	r0, r2
 801a748:	4619      	mov	r1, r3
 801a74a:	f7e6 f9eb 	bl	8000b24 <__aeabi_d2f>
 801a74e:	4602      	mov	r2, r0
 801a750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a754:	601a      	str	r2, [r3, #0]
	*p_pressure = (float)(((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15);
 801a756:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a75c:	2200      	movs	r2, #0
 801a75e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a762:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a766:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a76a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801a76e:	462a      	mov	r2, r5
 801a770:	fb02 f203 	mul.w	r2, r2, r3
 801a774:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a778:	4621      	mov	r1, r4
 801a77a:	fb01 f303 	mul.w	r3, r1, r3
 801a77e:	4413      	add	r3, r2
 801a780:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a784:	4621      	mov	r1, r4
 801a786:	fba2 1201 	umull	r1, r2, r2, r1
 801a78a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801a78e:	460a      	mov	r2, r1
 801a790:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801a794:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a798:	4413      	add	r3, r2
 801a79a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a79e:	f04f 0200 	mov.w	r2, #0
 801a7a2:	f04f 0300 	mov.w	r3, #0
 801a7a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801a7aa:	4621      	mov	r1, r4
 801a7ac:	0d4a      	lsrs	r2, r1, #21
 801a7ae:	4629      	mov	r1, r5
 801a7b0:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801a7b4:	4629      	mov	r1, r5
 801a7b6:	154b      	asrs	r3, r1, #21
 801a7b8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801a7bc:	1a14      	subs	r4, r2, r0
 801a7be:	67bc      	str	r4, [r7, #120]	; 0x78
 801a7c0:	eb63 0301 	sbc.w	r3, r3, r1
 801a7c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a7c6:	f04f 0200 	mov.w	r2, #0
 801a7ca:	f04f 0300 	mov.w	r3, #0
 801a7ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801a7d2:	4621      	mov	r1, r4
 801a7d4:	0bca      	lsrs	r2, r1, #15
 801a7d6:	4629      	mov	r1, r5
 801a7d8:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801a7dc:	4629      	mov	r1, r5
 801a7de:	13cb      	asrs	r3, r1, #15
 801a7e0:	4610      	mov	r0, r2
 801a7e2:	4619      	mov	r1, r3
 801a7e4:	f7e6 fabe 	bl	8000d64 <__aeabi_l2f>
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a7ee:	601a      	str	r2, [r3, #0]
}
 801a7f0:	bf00      	nop
 801a7f2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a7fc:	fffffa24 	.word	0xfffffa24
 801a800:	40590000 	.word	0x40590000

0801a804 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b08a      	sub	sp, #40	; 0x28
 801a808:	af02      	add	r7, sp, #8
 801a80a:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	68db      	ldr	r3, [r3, #12]
 801a810:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 100;
 801a812:	2364      	movs	r3, #100	; 0x64
 801a814:	83fb      	strh	r3, [r7, #30]
	uint16_t gap;
	float pressure;
	float temperature;

	switch (p_owner->__state) {
 801a816:	69bb      	ldr	r3, [r7, #24]
 801a818:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a81c:	3b01      	subs	r3, #1
 801a81e:	2b04      	cmp	r3, #4
 801a820:	f200 80a9 	bhi.w	801a976 <_doTask+0x172>
 801a824:	a201      	add	r2, pc, #4	; (adr r2, 801a82c <_doTask+0x28>)
 801a826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a82a:	bf00      	nop
 801a82c:	0801a841 	.word	0x0801a841
 801a830:	0801a881 	.word	0x0801a881
 801a834:	0801a8b3 	.word	0x0801a8b3
 801a838:	0801a8e9 	.word	0x0801a8e9
 801a83c:	0801a91b 	.word	0x0801a91b
	case MS5611_STATE_TEMPERATURE_START:
		p_owner->__start_time = pif_cumulative_timer1ms;
 801a840:	4b54      	ldr	r3, [pc, #336]	; (801a994 <_doTask+0x190>)
 801a842:	681a      	ldr	r2, [r3, #0]
 801a844:	69bb      	ldr	r3, [r7, #24]
 801a846:	62da      	str	r2, [r3, #44]	; 0x2c
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801a848:	69bb      	ldr	r3, [r7, #24]
 801a84a:	8b1b      	ldrh	r3, [r3, #24]
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	3350      	adds	r3, #80	; 0x50
 801a850:	b2db      	uxtb	r3, r3
 801a852:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a854:	69bb      	ldr	r3, [r7, #24]
 801a856:	6858      	ldr	r0, [r3, #4]
 801a858:	f107 0310 	add.w	r3, r7, #16
 801a85c:	2201      	movs	r2, #1
 801a85e:	9200      	str	r2, [sp, #0]
 801a860:	2200      	movs	r2, #0
 801a862:	2100      	movs	r1, #0
 801a864:	f7f7 fdb6 	bl	80123d4 <pifI2cDevice_Write>
 801a868:	4603      	mov	r3, r0
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	f000 8085 	beq.w	801a97a <_doTask+0x176>
			p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801a870:	69bb      	ldr	r3, [r7, #24]
 801a872:	2202      	movs	r2, #2
 801a874:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801a878:	69bb      	ldr	r3, [r7, #24]
 801a87a:	7e9b      	ldrb	r3, [r3, #26]
 801a87c:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801a87e:	e07c      	b.n	801a97a <_doTask+0x176>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801a880:	69bb      	ldr	r3, [r7, #24]
 801a882:	6858      	ldr	r0, [r3, #4]
 801a884:	f107 0210 	add.w	r2, r7, #16
 801a888:	2303      	movs	r3, #3
 801a88a:	2100      	movs	r1, #0
 801a88c:	f7f7 fd58 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 801a890:	4603      	mov	r3, r0
 801a892:	2b00      	cmp	r3, #0
 801a894:	d073      	beq.n	801a97e <_doTask+0x17a>
			p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801a896:	7c3b      	ldrb	r3, [r7, #16]
 801a898:	041b      	lsls	r3, r3, #16
 801a89a:	7c7a      	ldrb	r2, [r7, #17]
 801a89c:	0212      	lsls	r2, r2, #8
 801a89e:	4413      	add	r3, r2
 801a8a0:	7cba      	ldrb	r2, [r7, #18]
 801a8a2:	441a      	add	r2, r3
 801a8a4:	69bb      	ldr	r3, [r7, #24]
 801a8a6:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__state = MS5611_STATE_PRESSURE_START;
 801a8a8:	69bb      	ldr	r3, [r7, #24]
 801a8aa:	2203      	movs	r2, #3
 801a8ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801a8b0:	e065      	b.n	801a97e <_doTask+0x17a>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801a8b2:	69bb      	ldr	r3, [r7, #24]
 801a8b4:	8b1b      	ldrh	r3, [r3, #24]
 801a8b6:	b2db      	uxtb	r3, r3
 801a8b8:	3340      	adds	r3, #64	; 0x40
 801a8ba:	b2db      	uxtb	r3, r3
 801a8bc:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a8be:	69bb      	ldr	r3, [r7, #24]
 801a8c0:	6858      	ldr	r0, [r3, #4]
 801a8c2:	f107 0310 	add.w	r3, r7, #16
 801a8c6:	2201      	movs	r2, #1
 801a8c8:	9200      	str	r2, [sp, #0]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	2100      	movs	r1, #0
 801a8ce:	f7f7 fd81 	bl	80123d4 <pifI2cDevice_Write>
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d054      	beq.n	801a982 <_doTask+0x17e>
			p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801a8d8:	69bb      	ldr	r3, [r7, #24]
 801a8da:	2204      	movs	r2, #4
 801a8dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801a8e0:	69bb      	ldr	r3, [r7, #24]
 801a8e2:	7e9b      	ldrb	r3, [r3, #26]
 801a8e4:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801a8e6:	e04c      	b.n	801a982 <_doTask+0x17e>

	case MS5611_STATE_PRESSURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801a8e8:	69bb      	ldr	r3, [r7, #24]
 801a8ea:	6858      	ldr	r0, [r3, #4]
 801a8ec:	f107 0210 	add.w	r2, r7, #16
 801a8f0:	2303      	movs	r3, #3
 801a8f2:	2100      	movs	r1, #0
 801a8f4:	f7f7 fd24 	bl	8012340 <pifI2cDevice_ReadRegBytes>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d043      	beq.n	801a986 <_doTask+0x182>
			p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801a8fe:	7c3b      	ldrb	r3, [r7, #16]
 801a900:	041b      	lsls	r3, r3, #16
 801a902:	7c7a      	ldrb	r2, [r7, #17]
 801a904:	0212      	lsls	r2, r2, #8
 801a906:	4413      	add	r3, r2
 801a908:	7cba      	ldrb	r2, [r7, #18]
 801a90a:	441a      	add	r2, r3
 801a90c:	69bb      	ldr	r3, [r7, #24]
 801a90e:	625a      	str	r2, [r3, #36]	; 0x24
			p_owner->__state = MS5611_STATE_CALCURATE;
 801a910:	69bb      	ldr	r3, [r7, #24]
 801a912:	2205      	movs	r2, #5
 801a914:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801a918:	e035      	b.n	801a986 <_doTask+0x182>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801a91a:	f107 0208 	add.w	r2, r7, #8
 801a91e:	f107 030c 	add.w	r3, r7, #12
 801a922:	4619      	mov	r1, r3
 801a924:	69b8      	ldr	r0, [r7, #24]
 801a926:	f7ff fcc1 	bl	801a2ac <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801a92a:	69bb      	ldr	r3, [r7, #24]
 801a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d00a      	beq.n	801a948 <_doTask+0x144>
 801a932:	69bb      	ldr	r3, [r7, #24]
 801a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a936:	edd7 7a03 	vldr	s15, [r7, #12]
 801a93a:	ed97 7a02 	vldr	s14, [r7, #8]
 801a93e:	eef0 0a47 	vmov.f32	s1, s14
 801a942:	eeb0 0a67 	vmov.f32	s0, s15
 801a946:	4798      	blx	r3
		gap = pif_cumulative_timer1ms - p_owner->__start_time;
 801a948:	4b12      	ldr	r3, [pc, #72]	; (801a994 <_doTask+0x190>)
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	b29a      	uxth	r2, r3
 801a94e:	69bb      	ldr	r3, [r7, #24]
 801a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a952:	b29b      	uxth	r3, r3
 801a954:	1ad3      	subs	r3, r2, r3
 801a956:	82fb      	strh	r3, [r7, #22]
		if (gap < p_owner->__read_period) {
 801a958:	69bb      	ldr	r3, [r7, #24]
 801a95a:	8c1b      	ldrh	r3, [r3, #32]
 801a95c:	8afa      	ldrh	r2, [r7, #22]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d204      	bcs.n	801a96c <_doTask+0x168>
			delay = p_owner->__read_period - gap;
 801a962:	69bb      	ldr	r3, [r7, #24]
 801a964:	8c1a      	ldrh	r2, [r3, #32]
 801a966:	8afb      	ldrh	r3, [r7, #22]
 801a968:	1ad3      	subs	r3, r2, r3
 801a96a:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801a96c:	69bb      	ldr	r3, [r7, #24]
 801a96e:	2201      	movs	r2, #1
 801a970:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801a974:	e008      	b.n	801a988 <_doTask+0x184>

	default:
		break;
 801a976:	bf00      	nop
 801a978:	e006      	b.n	801a988 <_doTask+0x184>
		break;
 801a97a:	bf00      	nop
 801a97c:	e004      	b.n	801a988 <_doTask+0x184>
		break;
 801a97e:	bf00      	nop
 801a980:	e002      	b.n	801a988 <_doTask+0x184>
		break;
 801a982:	bf00      	nop
 801a984:	e000      	b.n	801a988 <_doTask+0x184>
		break;
 801a986:	bf00      	nop
	}
	return delay;
 801a988:	8bfb      	ldrh	r3, [r7, #30]
}
 801a98a:	4618      	mov	r0, r3
 801a98c:	3720      	adds	r7, #32
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}
 801a992:	bf00      	nop
 801a994:	20001c6c 	.word	0x20001c6c

0801a998 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b086      	sub	sp, #24
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	60f8      	str	r0, [r7, #12]
 801a9a0:	607a      	str	r2, [r7, #4]
 801a9a2:	461a      	mov	r2, r3
 801a9a4:	460b      	mov	r3, r1
 801a9a6:	817b      	strh	r3, [r7, #10]
 801a9a8:	4613      	mov	r3, r2
 801a9aa:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d002      	beq.n	801a9b8 <pifMs5611_Init+0x20>
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d104      	bne.n	801a9c2 <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801a9b8:	4b30      	ldr	r3, [pc, #192]	; (801aa7c <pifMs5611_Init+0xe4>)
 801a9ba:	2201      	movs	r2, #1
 801a9bc:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801a9be:	2300      	movs	r3, #0
 801a9c0:	e058      	b.n	801aa74 <pifMs5611_Init+0xdc>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801a9c2:	2234      	movs	r2, #52	; 0x34
 801a9c4:	2100      	movs	r1, #0
 801a9c6:	68f8      	ldr	r0, [r7, #12]
 801a9c8:	f008 fb38 	bl	802303c <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c, addr);
 801a9cc:	7a7b      	ldrb	r3, [r7, #9]
 801a9ce:	4619      	mov	r1, r3
 801a9d0:	6878      	ldr	r0, [r7, #4]
 801a9d2:	f7f7 fb7b 	bl	80120cc <pifI2cPort_AddDevice>
 801a9d6:	4602      	mov	r2, r0
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	685b      	ldr	r3, [r3, #4]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d101      	bne.n	801a9e8 <pifMs5611_Init+0x50>
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	e045      	b.n	801aa74 <pifMs5611_Init+0xdc>

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	685b      	ldr	r3, [r3, #4]
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	211e      	movs	r1, #30
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7f7 fd9d 	bl	8012530 <pifI2cDevice_WriteRegByte>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d032      	beq.n	801aa62 <pifMs5611_Init+0xca>
	pifTaskManager_YieldMs(100);
 801a9fc:	2064      	movs	r0, #100	; 0x64
 801a9fe:	f7fa f9c1 	bl	8014d84 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801aa02:	2300      	movs	r3, #0
 801aa04:	617b      	str	r3, [r7, #20]
 801aa06:	e014      	b.n	801aa32 <pifMs5611_Init+0x9a>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	6858      	ldr	r0, [r3, #4]
 801aa0c:	697b      	ldr	r3, [r7, #20]
 801aa0e:	3350      	adds	r3, #80	; 0x50
 801aa10:	b2db      	uxtb	r3, r3
 801aa12:	005b      	lsls	r3, r3, #1
 801aa14:	b2d9      	uxtb	r1, r3
 801aa16:	697b      	ldr	r3, [r7, #20]
 801aa18:	3304      	adds	r3, #4
 801aa1a:	005b      	lsls	r3, r3, #1
 801aa1c:	68fa      	ldr	r2, [r7, #12]
 801aa1e:	4413      	add	r3, r2
 801aa20:	461a      	mov	r2, r3
 801aa22:	f7f7 fc69 	bl	80122f8 <pifI2cDevice_ReadRegWord>
 801aa26:	4603      	mov	r3, r0
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d01c      	beq.n	801aa66 <pifMs5611_Init+0xce>
	for (i = 0; i < 8; i++) {
 801aa2c:	697b      	ldr	r3, [r7, #20]
 801aa2e:	3301      	adds	r3, #1
 801aa30:	617b      	str	r3, [r7, #20]
 801aa32:	697b      	ldr	r3, [r7, #20]
 801aa34:	2b07      	cmp	r3, #7
 801aa36:	dde7      	ble.n	801aa08 <pifMs5611_Init+0x70>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801aa38:	68f8      	ldr	r0, [r7, #12]
 801aa3a:	f7ff fbb9 	bl	801a1b0 <_checkPromCrc>
 801aa3e:	4603      	mov	r3, r0
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d012      	beq.n	801aa6a <pifMs5611_Init+0xd2>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801aa44:	897b      	ldrh	r3, [r7, #10]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d106      	bne.n	801aa58 <pifMs5611_Init+0xc0>
 801aa4a:	4b0d      	ldr	r3, [pc, #52]	; (801aa80 <pifMs5611_Init+0xe8>)
 801aa4c:	881b      	ldrh	r3, [r3, #0]
 801aa4e:	1c5a      	adds	r2, r3, #1
 801aa50:	b291      	uxth	r1, r2
 801aa52:	4a0b      	ldr	r2, [pc, #44]	; (801aa80 <pifMs5611_Init+0xe8>)
 801aa54:	8011      	strh	r1, [r2, #0]
 801aa56:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	897a      	ldrh	r2, [r7, #10]
 801aa5c:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801aa5e:	2301      	movs	r3, #1
 801aa60:	e008      	b.n	801aa74 <pifMs5611_Init+0xdc>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801aa62:	bf00      	nop
 801aa64:	e002      	b.n	801aa6c <pifMs5611_Init+0xd4>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801aa66:	bf00      	nop
 801aa68:	e000      	b.n	801aa6c <pifMs5611_Init+0xd4>
	if (!_checkPromCrc(p_owner)) goto fail;
 801aa6a:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801aa6c:	68f8      	ldr	r0, [r7, #12]
 801aa6e:	f000 f809 	bl	801aa84 <pifMs5611_Clear>
	return FALSE;
 801aa72:	2300      	movs	r3, #0
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	3718      	adds	r7, #24
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}
 801aa7c:	20001c55 	.word	0x20001c55
 801aa80:	2000011c 	.word	0x2000011c

0801aa84 <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b082      	sub	sp, #8
 801aa88:	af00      	add	r7, sp, #0
 801aa8a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	69db      	ldr	r3, [r3, #28]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d007      	beq.n	801aaa4 <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	69db      	ldr	r3, [r3, #28]
 801aa98:	4618      	mov	r0, r3
 801aa9a:	f7f9 feb9 	bl	8014810 <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	685b      	ldr	r3, [r3, #4]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d00b      	beq.n	801aac4 <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	689a      	ldr	r2, [r3, #8]
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	685b      	ldr	r3, [r3, #4]
 801aab6:	4619      	mov	r1, r3
 801aab8:	4610      	mov	r0, r2
 801aaba:	f7f7 fb31 	bl	8012120 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	2200      	movs	r2, #0
 801aac2:	605a      	str	r2, [r3, #4]
	}
}
 801aac4:	bf00      	nop
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}

0801aacc <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801aacc:	b480      	push	{r7}
 801aace:	b083      	sub	sp, #12
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	460b      	mov	r3, r1
 801aad6:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	887a      	ldrh	r2, [r7, #2]
 801aadc:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801aade:	887b      	ldrh	r3, [r7, #2]
 801aae0:	2b08      	cmp	r3, #8
 801aae2:	d829      	bhi.n	801ab38 <pifMs5611_SetOverSamplingRate+0x6c>
 801aae4:	a201      	add	r2, pc, #4	; (adr r2, 801aaec <pifMs5611_SetOverSamplingRate+0x20>)
 801aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaea:	bf00      	nop
 801aaec:	0801ab11 	.word	0x0801ab11
 801aaf0:	0801ab39 	.word	0x0801ab39
 801aaf4:	0801ab19 	.word	0x0801ab19
 801aaf8:	0801ab39 	.word	0x0801ab39
 801aafc:	0801ab21 	.word	0x0801ab21
 801ab00:	0801ab39 	.word	0x0801ab39
 801ab04:	0801ab29 	.word	0x0801ab29
 801ab08:	0801ab39 	.word	0x0801ab39
 801ab0c:	0801ab31 	.word	0x0801ab31
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	2202      	movs	r2, #2
 801ab14:	769a      	strb	r2, [r3, #26]
 801ab16:	e00f      	b.n	801ab38 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	2203      	movs	r2, #3
 801ab1c:	769a      	strb	r2, [r3, #26]
 801ab1e:	e00b      	b.n	801ab38 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	2204      	movs	r2, #4
 801ab24:	769a      	strb	r2, [r3, #26]
 801ab26:	e007      	b.n	801ab38 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	2206      	movs	r2, #6
 801ab2c:	769a      	strb	r2, [r3, #26]
 801ab2e:	e003      	b.n	801ab38 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	220b      	movs	r2, #11
 801ab34:	769a      	strb	r2, [r3, #26]
 801ab36:	bf00      	nop
	}
}
 801ab38:	bf00      	nop
 801ab3a:	370c      	adds	r7, #12
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab42:	4770      	bx	lr

0801ab44 <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtBaroRead evt_read, BOOL start)
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b086      	sub	sp, #24
 801ab48:	af02      	add	r7, sp, #8
 801ab4a:	60f8      	str	r0, [r7, #12]
 801ab4c:	607a      	str	r2, [r7, #4]
 801ab4e:	461a      	mov	r2, r3
 801ab50:	460b      	mov	r3, r1
 801ab52:	817b      	strh	r3, [r7, #10]
 801ab54:	4613      	mov	r3, r2
 801ab56:	727b      	strb	r3, [r7, #9]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, read_period, _doTask, p_owner, start);
 801ab58:	8979      	ldrh	r1, [r7, #10]
 801ab5a:	7a7b      	ldrb	r3, [r7, #9]
 801ab5c:	9300      	str	r3, [sp, #0]
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	4a0f      	ldr	r2, [pc, #60]	; (801aba0 <pifMs5611_AddTaskForReading+0x5c>)
 801ab62:	2004      	movs	r0, #4
 801ab64:	f7f9 fdec 	bl	8014740 <pifTaskManager_Add>
 801ab68:	4602      	mov	r2, r0
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	69db      	ldr	r3, [r3, #28]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d101      	bne.n	801ab7a <pifMs5611_AddTaskForReading+0x36>
 801ab76:	2300      	movs	r3, #0
 801ab78:	e00e      	b.n	801ab98 <pifMs5611_AddTaskForReading+0x54>
    p_owner->_p_task->name = "MS5611";
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	69db      	ldr	r3, [r3, #28]
 801ab7e:	4a09      	ldr	r2, [pc, #36]	; (801aba4 <pifMs5611_AddTaskForReading+0x60>)
 801ab80:	601a      	str	r2, [r3, #0]

    p_owner->__read_period = read_period;
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	897a      	ldrh	r2, [r7, #10]
 801ab86:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	687a      	ldr	r2, [r7, #4]
 801ab8c:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	2201      	movs	r2, #1
 801ab92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801ab96:	2301      	movs	r3, #1
}
 801ab98:	4618      	mov	r0, r3
 801ab9a:	3710      	adds	r7, #16
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	0801a805 	.word	0x0801a805
 801aba4:	08027ef4 	.word	0x08027ef4

0801aba8 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801aba8:	b580      	push	{r7, lr}
 801abaa:	b086      	sub	sp, #24
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	68db      	ldr	r3, [r3, #12]
 801abb4:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801abb6:	2300      	movs	r3, #0
 801abb8:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801abba:	693b      	ldr	r3, [r7, #16]
 801abbc:	691b      	ldr	r3, [r3, #16]
 801abbe:	693a      	ldr	r2, [r7, #16]
 801abc0:	7d12      	ldrb	r2, [r2, #20]
 801abc2:	4413      	add	r3, r2
 801abc4:	781b      	ldrb	r3, [r3, #0]
 801abc6:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801abc8:	693b      	ldr	r3, [r7, #16]
 801abca:	7b1b      	ldrb	r3, [r3, #12]
 801abcc:	3b01      	subs	r3, #1
 801abce:	2b03      	cmp	r3, #3
 801abd0:	d87f      	bhi.n	801acd2 <_doTask+0x12a>
 801abd2:	a201      	add	r2, pc, #4	; (adr r2, 801abd8 <_doTask+0x30>)
 801abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abd8:	0801abe9 	.word	0x0801abe9
 801abdc:	0801ac0b 	.word	0x0801ac0b
 801abe0:	0801ac2d 	.word	0x0801ac2d
 801abe4:	0801ac9f 	.word	0x0801ac9f
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801abe8:	693b      	ldr	r3, [r7, #16]
 801abea:	699b      	ldr	r3, [r3, #24]
 801abec:	693a      	ldr	r2, [r7, #16]
 801abee:	8892      	ldrh	r2, [r2, #4]
 801abf0:	2101      	movs	r1, #1
 801abf2:	4610      	mov	r0, r2
 801abf4:	4798      	blx	r3
		p_owner->__pos++;
 801abf6:	693b      	ldr	r3, [r7, #16]
 801abf8:	7d1b      	ldrb	r3, [r3, #20]
 801abfa:	3301      	adds	r3, #1
 801abfc:	b2da      	uxtb	r2, r3
 801abfe:	693b      	ldr	r3, [r7, #16]
 801ac00:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801ac02:	693b      	ldr	r3, [r7, #16]
 801ac04:	2202      	movs	r2, #2
 801ac06:	731a      	strb	r2, [r3, #12]
		break;
 801ac08:	e064      	b.n	801acd4 <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801ac0a:	693b      	ldr	r3, [r7, #16]
 801ac0c:	699b      	ldr	r3, [r3, #24]
 801ac0e:	693a      	ldr	r2, [r7, #16]
 801ac10:	8892      	ldrh	r2, [r2, #4]
 801ac12:	2100      	movs	r1, #0
 801ac14:	4610      	mov	r0, r2
 801ac16:	4798      	blx	r3
		p_owner->__pos++;
 801ac18:	693b      	ldr	r3, [r7, #16]
 801ac1a:	7d1b      	ldrb	r3, [r3, #20]
 801ac1c:	3301      	adds	r3, #1
 801ac1e:	b2da      	uxtb	r2, r3
 801ac20:	693b      	ldr	r3, [r7, #16]
 801ac22:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801ac24:	693b      	ldr	r3, [r7, #16]
 801ac26:	2203      	movs	r2, #3
 801ac28:	731a      	strb	r2, [r3, #12]
		break;
 801ac2a:	e053      	b.n	801acd4 <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801ac2c:	89fb      	ldrh	r3, [r7, #14]
 801ac2e:	2bef      	cmp	r3, #239	; 0xef
 801ac30:	d810      	bhi.n	801ac54 <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801ac32:	693b      	ldr	r3, [r7, #16]
 801ac34:	699b      	ldr	r3, [r3, #24]
 801ac36:	693a      	ldr	r2, [r7, #16]
 801ac38:	8892      	ldrh	r2, [r2, #4]
 801ac3a:	2101      	movs	r1, #1
 801ac3c:	4610      	mov	r0, r2
 801ac3e:	4798      	blx	r3
			p_owner->__pos++;
 801ac40:	693b      	ldr	r3, [r7, #16]
 801ac42:	7d1b      	ldrb	r3, [r3, #20]
 801ac44:	3301      	adds	r3, #1
 801ac46:	b2da      	uxtb	r2, r3
 801ac48:	693b      	ldr	r3, [r7, #16]
 801ac4a:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801ac4c:	693b      	ldr	r3, [r7, #16]
 801ac4e:	2202      	movs	r2, #2
 801ac50:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801ac52:	e03f      	b.n	801acd4 <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801ac54:	89fb      	ldrh	r3, [r7, #14]
 801ac56:	2bf0      	cmp	r3, #240	; 0xf0
 801ac58:	d105      	bne.n	801ac66 <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	2204      	movs	r2, #4
 801ac5e:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801ac60:	2301      	movs	r3, #1
 801ac62:	82fb      	strh	r3, [r7, #22]
		break;
 801ac64:	e036      	b.n	801acd4 <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801ac66:	89fb      	ldrh	r3, [r7, #14]
 801ac68:	b2db      	uxtb	r3, r3
 801ac6a:	3310      	adds	r3, #16
 801ac6c:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801ac6e:	693b      	ldr	r3, [r7, #16]
 801ac70:	7d5b      	ldrb	r3, [r3, #21]
 801ac72:	7b7a      	ldrb	r2, [r7, #13]
 801ac74:	429a      	cmp	r2, r3
 801ac76:	d90c      	bls.n	801ac92 <_doTask+0xea>
				p_owner->__pos = 0;
 801ac78:	693b      	ldr	r3, [r7, #16]
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	7d5b      	ldrb	r3, [r3, #21]
 801ac82:	3301      	adds	r3, #1
 801ac84:	b2da      	uxtb	r2, r3
 801ac86:	693b      	ldr	r3, [r7, #16]
 801ac88:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801ac8a:	693b      	ldr	r3, [r7, #16]
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	731a      	strb	r2, [r3, #12]
 801ac90:	e002      	b.n	801ac98 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801ac92:	693b      	ldr	r3, [r7, #16]
 801ac94:	2204      	movs	r2, #4
 801ac96:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801ac98:	2301      	movs	r3, #1
 801ac9a:	82fb      	strh	r3, [r7, #22]
		break;
 801ac9c:	e01a      	b.n	801acd4 <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801ac9e:	693b      	ldr	r3, [r7, #16]
 801aca0:	699b      	ldr	r3, [r3, #24]
 801aca2:	693a      	ldr	r2, [r7, #16]
 801aca4:	8892      	ldrh	r2, [r2, #4]
 801aca6:	2100      	movs	r1, #0
 801aca8:	4610      	mov	r0, r2
 801acaa:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801acac:	693b      	ldr	r3, [r7, #16]
 801acae:	2200      	movs	r2, #0
 801acb0:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801acb2:	693b      	ldr	r3, [r7, #16]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d005      	beq.n	801acc6 <_doTask+0x11e>
 801acba:	693b      	ldr	r3, [r7, #16]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	693a      	ldr	r2, [r7, #16]
 801acc0:	8892      	ldrh	r2, [r2, #4]
 801acc2:	4610      	mov	r0, r2
 801acc4:	4798      	blx	r3
		delay = 1;
 801acc6:	2301      	movs	r3, #1
 801acc8:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2201      	movs	r2, #1
 801acce:	711a      	strb	r2, [r3, #4]
		break;
 801acd0:	e000      	b.n	801acd4 <_doTask+0x12c>

	default:
		break;
 801acd2:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801acd4:	8afb      	ldrh	r3, [r7, #22]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d106      	bne.n	801ace8 <_doTask+0x140>
 801acda:	89fb      	ldrh	r3, [r7, #14]
 801acdc:	461a      	mov	r2, r3
 801acde:	0092      	lsls	r2, r2, #2
 801ace0:	4413      	add	r3, r2
 801ace2:	005b      	lsls	r3, r3, #1
 801ace4:	b29b      	uxth	r3, r3
 801ace6:	e000      	b.n	801acea <_doTask+0x142>
 801ace8:	8afb      	ldrh	r3, [r7, #22]
}
 801acea:	4618      	mov	r0, r3
 801acec:	3718      	adds	r7, #24
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}
 801acf2:	bf00      	nop

0801acf4 <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b086      	sub	sp, #24
 801acf8:	af02      	add	r7, sp, #8
 801acfa:	60f8      	str	r0, [r7, #12]
 801acfc:	460b      	mov	r3, r1
 801acfe:	607a      	str	r2, [r7, #4]
 801ad00:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d002      	beq.n	801ad0e <pifBuzzer_Init+0x1a>
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d104      	bne.n	801ad18 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801ad0e:	4b1a      	ldr	r3, [pc, #104]	; (801ad78 <pifBuzzer_Init+0x84>)
 801ad10:	2201      	movs	r2, #1
 801ad12:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801ad14:	2300      	movs	r3, #0
 801ad16:	e02a      	b.n	801ad6e <pifBuzzer_Init+0x7a>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801ad18:	221c      	movs	r2, #28
 801ad1a:	2100      	movs	r1, #0
 801ad1c:	68f8      	ldr	r0, [r7, #12]
 801ad1e:	f008 f98d 	bl	802303c <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801ad22:	2300      	movs	r3, #0
 801ad24:	9300      	str	r3, [sp, #0]
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	4a14      	ldr	r2, [pc, #80]	; (801ad7c <pifBuzzer_Init+0x88>)
 801ad2a:	2101      	movs	r1, #1
 801ad2c:	2004      	movs	r0, #4
 801ad2e:	f7f9 fd07 	bl	8014740 <pifTaskManager_Add>
 801ad32:	4602      	mov	r2, r0
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	689b      	ldr	r3, [r3, #8]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d101      	bne.n	801ad44 <pifBuzzer_Init+0x50>
 801ad40:	2300      	movs	r3, #0
 801ad42:	e014      	b.n	801ad6e <pifBuzzer_Init+0x7a>
	p_owner->_p_task->name = "Buzzer";
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	689b      	ldr	r3, [r3, #8]
 801ad48:	4a0d      	ldr	r2, [pc, #52]	; (801ad80 <pifBuzzer_Init+0x8c>)
 801ad4a:	601a      	str	r2, [r3, #0]

    if (id == PIF_ID_AUTO) id = pif_id++;
 801ad4c:	897b      	ldrh	r3, [r7, #10]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d106      	bne.n	801ad60 <pifBuzzer_Init+0x6c>
 801ad52:	4b0c      	ldr	r3, [pc, #48]	; (801ad84 <pifBuzzer_Init+0x90>)
 801ad54:	881b      	ldrh	r3, [r3, #0]
 801ad56:	1c5a      	adds	r2, r3, #1
 801ad58:	b291      	uxth	r1, r2
 801ad5a:	4a0a      	ldr	r2, [pc, #40]	; (801ad84 <pifBuzzer_Init+0x90>)
 801ad5c:	8011      	strh	r1, [r2, #0]
 801ad5e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	897a      	ldrh	r2, [r7, #10]
 801ad64:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	687a      	ldr	r2, [r7, #4]
 801ad6a:	619a      	str	r2, [r3, #24]
    return TRUE;
 801ad6c:	2301      	movs	r3, #1
}
 801ad6e:	4618      	mov	r0, r3
 801ad70:	3710      	adds	r7, #16
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	20001c55 	.word	0x20001c55
 801ad7c:	0801aba9 	.word	0x0801aba9
 801ad80:	08027efc 	.word	0x08027efc
 801ad84:	2000011c 	.word	0x2000011c

0801ad88 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801ad88:	b480      	push	{r7}
 801ad8a:	b083      	sub	sp, #12
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
 801ad90:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	689b      	ldr	r3, [r3, #8]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d101      	bne.n	801ad9e <pifBuzzer_Start+0x16>
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	e010      	b.n	801adc0 <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	683a      	ldr	r2, [r7, #0]
 801ada2:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2200      	movs	r2, #0
 801ada8:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2200      	movs	r2, #0
 801adae:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2201      	movs	r2, #1
 801adb4:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	689b      	ldr	r3, [r3, #8]
 801adba:	2200      	movs	r2, #0
 801adbc:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801adbe:	2301      	movs	r3, #1
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	370c      	adds	r7, #12
 801adc4:	46bd      	mov	sp, r7
 801adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adca:	4770      	bx	lr

0801adcc <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801adcc:	b480      	push	{r7}
 801adce:	b083      	sub	sp, #12
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2204      	movs	r2, #4
 801add8:	731a      	strb	r2, [r3, #12]
}
 801adda:	bf00      	nop
 801addc:	370c      	adds	r7, #12
 801adde:	46bd      	mov	sp, r7
 801ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade4:	4770      	bx	lr

0801ade6 <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801ade6:	b580      	push	{r7, lr}
 801ade8:	b086      	sub	sp, #24
 801adea:	af02      	add	r7, sp, #8
 801adec:	60f8      	str	r0, [r7, #12]
 801adee:	60b9      	str	r1, [r7, #8]
 801adf0:	607a      	str	r2, [r7, #4]
 801adf2:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	7a19      	ldrb	r1, [r3, #8]
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	0a1b      	lsrs	r3, r3, #8
 801adfc:	b2da      	uxtb	r2, r3
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	685b      	ldr	r3, [r3, #4]
 801ae02:	430a      	orrs	r2, r1
 801ae04:	b2d2      	uxtb	r2, r2
 801ae06:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	6858      	ldr	r0, [r3, #4]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	b2d9      	uxtb	r1, r3
 801ae10:	683b      	ldr	r3, [r7, #0]
 801ae12:	9300      	str	r3, [sp, #0]
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	2201      	movs	r2, #1
 801ae18:	f7f7 f9ae 	bl	8012178 <pifI2cDevice_Read>
 801ae1c:	4603      	mov	r3, r0
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d101      	bne.n	801ae26 <_actStorageI2c_Read_1+0x40>
 801ae22:	2300      	movs	r3, #0
 801ae24:	e000      	b.n	801ae28 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801ae26:	2301      	movs	r3, #1
}
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3710      	adds	r7, #16
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}

0801ae30 <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b086      	sub	sp, #24
 801ae34:	af02      	add	r7, sp, #8
 801ae36:	60f8      	str	r0, [r7, #12]
 801ae38:	60b9      	str	r1, [r7, #8]
 801ae3a:	607a      	str	r2, [r7, #4]
 801ae3c:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	7a19      	ldrb	r1, [r3, #8]
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	0a1b      	lsrs	r3, r3, #8
 801ae46:	b2da      	uxtb	r2, r3
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	685b      	ldr	r3, [r3, #4]
 801ae4c:	430a      	orrs	r2, r1
 801ae4e:	b2d2      	uxtb	r2, r2
 801ae50:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	6858      	ldr	r0, [r3, #4]
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	b2d9      	uxtb	r1, r3
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	9300      	str	r3, [sp, #0]
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2201      	movs	r2, #1
 801ae62:	f7f7 fab7 	bl	80123d4 <pifI2cDevice_Write>
 801ae66:	4603      	mov	r3, r0
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d101      	bne.n	801ae70 <_actStorageI2c_Write_1+0x40>
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	e009      	b.n	801ae84 <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	7a5b      	ldrb	r3, [r3, #9]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d004      	beq.n	801ae82 <_actStorageI2c_Write_1+0x52>
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	7a5b      	ldrb	r3, [r3, #9]
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7f9 ff81 	bl	8014d84 <pifTaskManager_YieldMs>
	return TRUE;
 801ae82:	2301      	movs	r3, #1
}
 801ae84:	4618      	mov	r0, r3
 801ae86:	3710      	adds	r7, #16
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	bd80      	pop	{r7, pc}

0801ae8c <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b086      	sub	sp, #24
 801ae90:	af02      	add	r7, sp, #8
 801ae92:	60f8      	str	r0, [r7, #12]
 801ae94:	60b9      	str	r1, [r7, #8]
 801ae96:	607a      	str	r2, [r7, #4]
 801ae98:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	7a19      	ldrb	r1, [r3, #8]
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	0c1b      	lsrs	r3, r3, #16
 801aea2:	b2da      	uxtb	r2, r3
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	685b      	ldr	r3, [r3, #4]
 801aea8:	430a      	orrs	r2, r1
 801aeaa:	b2d2      	uxtb	r2, r2
 801aeac:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	6858      	ldr	r0, [r3, #4]
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	b299      	uxth	r1, r3
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	9300      	str	r3, [sp, #0]
 801aeba:	68bb      	ldr	r3, [r7, #8]
 801aebc:	2202      	movs	r2, #2
 801aebe:	f7f7 f95b 	bl	8012178 <pifI2cDevice_Read>
 801aec2:	4603      	mov	r3, r0
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d101      	bne.n	801aecc <_actStorageI2c_Read_2+0x40>
 801aec8:	2300      	movs	r3, #0
 801aeca:	e000      	b.n	801aece <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801aecc:	2301      	movs	r3, #1
}
 801aece:	4618      	mov	r0, r3
 801aed0:	3710      	adds	r7, #16
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd80      	pop	{r7, pc}

0801aed6 <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801aed6:	b580      	push	{r7, lr}
 801aed8:	b086      	sub	sp, #24
 801aeda:	af02      	add	r7, sp, #8
 801aedc:	60f8      	str	r0, [r7, #12]
 801aede:	60b9      	str	r1, [r7, #8]
 801aee0:	607a      	str	r2, [r7, #4]
 801aee2:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	7a19      	ldrb	r1, [r3, #8]
 801aee8:	68bb      	ldr	r3, [r7, #8]
 801aeea:	0c1b      	lsrs	r3, r3, #16
 801aeec:	b2da      	uxtb	r2, r3
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	685b      	ldr	r3, [r3, #4]
 801aef2:	430a      	orrs	r2, r1
 801aef4:	b2d2      	uxtb	r2, r2
 801aef6:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	6858      	ldr	r0, [r3, #4]
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	b299      	uxth	r1, r3
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	9300      	str	r3, [sp, #0]
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	2202      	movs	r2, #2
 801af08:	f7f7 fa64 	bl	80123d4 <pifI2cDevice_Write>
 801af0c:	4603      	mov	r3, r0
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d101      	bne.n	801af16 <_actStorageI2c_Write_2+0x40>
 801af12:	2300      	movs	r3, #0
 801af14:	e009      	b.n	801af2a <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	7a5b      	ldrb	r3, [r3, #9]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d004      	beq.n	801af28 <_actStorageI2c_Write_2+0x52>
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	7a5b      	ldrb	r3, [r3, #9]
 801af22:	4618      	mov	r0, r3
 801af24:	f7f9 ff2e 	bl	8014d84 <pifTaskManager_YieldMs>
	return TRUE;
 801af28:	2301      	movs	r3, #1
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3710      	adds	r7, #16
 801af2e:	46bd      	mov	sp, r7
 801af30:	bd80      	pop	{r7, pc}
	...

0801af34 <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b084      	sub	sp, #16
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	4611      	mov	r1, r2
 801af40:	461a      	mov	r2, r3
 801af42:	460b      	mov	r3, r1
 801af44:	71fb      	strb	r3, [r7, #7]
 801af46:	4613      	mov	r3, r2
 801af48:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d002      	beq.n	801af56 <pifStorage_AttachI2c+0x22>
 801af50:	68bb      	ldr	r3, [r7, #8]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d104      	bne.n	801af60 <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801af56:	4b1b      	ldr	r3, [pc, #108]	; (801afc4 <pifStorage_AttachI2c+0x90>)
 801af58:	2201      	movs	r2, #1
 801af5a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801af5c:	2300      	movs	r3, #0
 801af5e:	e02d      	b.n	801afbc <pifStorage_AttachI2c+0x88>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port, addr);
 801af60:	79fb      	ldrb	r3, [r7, #7]
 801af62:	4619      	mov	r1, r3
 801af64:	68b8      	ldr	r0, [r7, #8]
 801af66:	f7f7 f8b1 	bl	80120cc <pifI2cPort_AddDevice>
 801af6a:	4602      	mov	r2, r0
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	685b      	ldr	r3, [r3, #4]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d101      	bne.n	801af7c <pifStorage_AttachI2c+0x48>
 801af78:	2300      	movs	r3, #0
 801af7a:	e01f      	b.n	801afbc <pifStorage_AttachI2c+0x88>

    p_owner->__addr = addr;
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	79fa      	ldrb	r2, [r7, #7]
 801af80:	721a      	strb	r2, [r3, #8]
    p_owner->__write_delay_ms = write_delay_ms;
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	7e3a      	ldrb	r2, [r7, #24]
 801af86:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801af88:	79bb      	ldrb	r3, [r7, #6]
 801af8a:	2b01      	cmp	r3, #1
 801af8c:	d007      	beq.n	801af9e <pifStorage_AttachI2c+0x6a>
 801af8e:	2b02      	cmp	r3, #2
 801af90:	d00c      	beq.n	801afac <pifStorage_AttachI2c+0x78>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801af92:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801af94:	68f8      	ldr	r0, [r7, #12]
 801af96:	f000 f81f 	bl	801afd8 <pifStorage_DetachI2c>
	return FALSE;
 801af9a:	2300      	movs	r3, #0
 801af9c:	e00e      	b.n	801afbc <pifStorage_AttachI2c+0x88>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	4a09      	ldr	r2, [pc, #36]	; (801afc8 <pifStorage_AttachI2c+0x94>)
 801afa2:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	4a09      	ldr	r2, [pc, #36]	; (801afcc <pifStorage_AttachI2c+0x98>)
 801afa8:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801afaa:	e006      	b.n	801afba <pifStorage_AttachI2c+0x86>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	4a08      	ldr	r2, [pc, #32]	; (801afd0 <pifStorage_AttachI2c+0x9c>)
 801afb0:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	4a07      	ldr	r2, [pc, #28]	; (801afd4 <pifStorage_AttachI2c+0xa0>)
 801afb6:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801afb8:	bf00      	nop
	return TRUE;
 801afba:	2301      	movs	r3, #1
}
 801afbc:	4618      	mov	r0, r3
 801afbe:	3710      	adds	r7, #16
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bd80      	pop	{r7, pc}
 801afc4:	20001c55 	.word	0x20001c55
 801afc8:	0801ade7 	.word	0x0801ade7
 801afcc:	0801ae31 	.word	0x0801ae31
 801afd0:	0801ae8d 	.word	0x0801ae8d
 801afd4:	0801aed7 	.word	0x0801aed7

0801afd8 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	685b      	ldr	r3, [r3, #4]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d00b      	beq.n	801b000 <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	685b      	ldr	r3, [r3, #4]
 801afec:	689a      	ldr	r2, [r3, #8]
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	4619      	mov	r1, r3
 801aff4:	4610      	mov	r0, r2
 801aff6:	f7f7 f893 	bl	8012120 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	2200      	movs	r2, #0
 801affe:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	2200      	movs	r2, #0
 801b004:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2200      	movs	r2, #0
 801b00a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801b00c:	bf00      	nop
 801b00e:	3708      	adds	r7, #8
 801b010:	46bd      	mov	sp, r7
 801b012:	bd80      	pop	{r7, pc}

0801b014 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b082      	sub	sp, #8
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	68db      	ldr	r3, [r3, #12]
 801b020:	6878      	ldr	r0, [r7, #4]
 801b022:	4798      	blx	r3
 801b024:	4603      	mov	r3, r0
}
 801b026:	4618      	mov	r0, r3
 801b028:	3708      	adds	r7, #8
 801b02a:	46bd      	mov	sp, r7
 801b02c:	bd80      	pop	{r7, pc}

0801b02e <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801b02e:	b580      	push	{r7, lr}
 801b030:	b082      	sub	sp, #8
 801b032:	af00      	add	r7, sp, #0
 801b034:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	691b      	ldr	r3, [r3, #16]
 801b03a:	6878      	ldr	r0, [r7, #4]
 801b03c:	4798      	blx	r3
 801b03e:	4603      	mov	r3, r0
}
 801b040:	4618      	mov	r0, r3
 801b042:	3708      	adds	r7, #8
 801b044:	46bd      	mov	sp, r7
 801b046:	bd80      	pop	{r7, pc}

0801b048 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b082      	sub	sp, #8
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
 801b050:	460b      	mov	r3, r1
 801b052:	807b      	strh	r3, [r7, #2]
 801b054:	4613      	mov	r3, r2
 801b056:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	695b      	ldr	r3, [r3, #20]
 801b05c:	883a      	ldrh	r2, [r7, #0]
 801b05e:	8879      	ldrh	r1, [r7, #2]
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	4798      	blx	r3
 801b064:	4603      	mov	r3, r0
}
 801b066:	4618      	mov	r0, r3
 801b068:	3708      	adds	r7, #8
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b082      	sub	sp, #8
 801b072:	af00      	add	r7, sp, #0
 801b074:	6078      	str	r0, [r7, #4]
 801b076:	460b      	mov	r3, r1
 801b078:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	69db      	ldr	r3, [r3, #28]
 801b07e:	887a      	ldrh	r2, [r7, #2]
 801b080:	4611      	mov	r1, r2
 801b082:	6878      	ldr	r0, [r7, #4]
 801b084:	4798      	blx	r3
 801b086:	4603      	mov	r3, r0
}
 801b088:	4618      	mov	r0, r3
 801b08a:	3708      	adds	r7, #8
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bd80      	pop	{r7, pc}

0801b090 <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801b090:	b590      	push	{r4, r7, lr}
 801b092:	b085      	sub	sp, #20
 801b094:	af00      	add	r7, sp, #0
 801b096:	60f8      	str	r0, [r7, #12]
 801b098:	60b9      	str	r1, [r7, #8]
 801b09a:	607a      	str	r2, [r7, #4]
 801b09c:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	6a1c      	ldr	r4, [r3, #32]
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	687a      	ldr	r2, [r7, #4]
 801b0a6:	68b9      	ldr	r1, [r7, #8]
 801b0a8:	68f8      	ldr	r0, [r7, #12]
 801b0aa:	47a0      	blx	r4
 801b0ac:	4603      	mov	r3, r0
}
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	3714      	adds	r7, #20
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	bd90      	pop	{r4, r7, pc}

0801b0b6 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801b0b6:	b590      	push	{r4, r7, lr}
 801b0b8:	b085      	sub	sp, #20
 801b0ba:	af00      	add	r7, sp, #0
 801b0bc:	60f8      	str	r0, [r7, #12]
 801b0be:	60b9      	str	r1, [r7, #8]
 801b0c0:	607a      	str	r2, [r7, #4]
 801b0c2:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b0c8:	683b      	ldr	r3, [r7, #0]
 801b0ca:	687a      	ldr	r2, [r7, #4]
 801b0cc:	68b9      	ldr	r1, [r7, #8]
 801b0ce:	68f8      	ldr	r0, [r7, #12]
 801b0d0:	47a0      	blx	r4
 801b0d2:	4603      	mov	r3, r0
}
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	3714      	adds	r7, #20
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd90      	pop	{r4, r7, pc}

0801b0dc <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801b0dc:	b480      	push	{r7}
 801b0de:	b085      	sub	sp, #20
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b0e8:	899b      	ldrh	r3, [r3, #12]
 801b0ea:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801b0ec:	89fb      	ldrh	r3, [r7, #14]
 801b0ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0f2:	4293      	cmp	r3, r2
 801b0f4:	d105      	bne.n	801b102 <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801b0f6:	4b0c      	ldr	r3, [pc, #48]	; (801b128 <_getNewDataNode+0x4c>)
 801b0f8:	2204      	movs	r2, #4
 801b0fa:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801b0fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b100:	e00c      	b.n	801b11c <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b106:	89fa      	ldrh	r2, [r7, #14]
 801b108:	4613      	mov	r3, r2
 801b10a:	005b      	lsls	r3, r3, #1
 801b10c:	4413      	add	r3, r2
 801b10e:	009b      	lsls	r3, r3, #2
 801b110:	18ca      	adds	r2, r1, r3
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b116:	88d2      	ldrh	r2, [r2, #6]
 801b118:	819a      	strh	r2, [r3, #12]
	return node;
 801b11a:	89fb      	ldrh	r3, [r7, #14]
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	3714      	adds	r7, #20
 801b120:	46bd      	mov	sp, r7
 801b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b126:	4770      	bx	lr
 801b128:	20001c55 	.word	0x20001c55

0801b12c <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801b12c:	b590      	push	{r4, r7, lr}
 801b12e:	b087      	sub	sp, #28
 801b130:	af00      	add	r7, sp, #0
 801b132:	60f8      	str	r0, [r7, #12]
 801b134:	60b9      	str	r1, [r7, #8]
 801b136:	607a      	str	r2, [r7, #4]
 801b138:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801b13a:	2300      	movs	r3, #0
 801b13c:	617b      	str	r3, [r7, #20]
	while (size) {
 801b13e:	e01d      	b.n	801b17c <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801b140:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b142:	683a      	ldr	r2, [r7, #0]
 801b144:	4293      	cmp	r3, r2
 801b146:	bf28      	it	cs
 801b148:	4613      	movcs	r3, r2
 801b14a:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b150:	68f8      	ldr	r0, [r7, #12]
 801b152:	68ba      	ldr	r2, [r7, #8]
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	18d1      	adds	r1, r2, r3
 801b158:	687a      	ldr	r2, [r7, #4]
 801b15a:	697b      	ldr	r3, [r7, #20]
 801b15c:	441a      	add	r2, r3
 801b15e:	693b      	ldr	r3, [r7, #16]
 801b160:	47a0      	blx	r4
 801b162:	4603      	mov	r3, r0
 801b164:	2b00      	cmp	r3, #0
 801b166:	d101      	bne.n	801b16c <_readData+0x40>
 801b168:	2300      	movs	r3, #0
 801b16a:	e00b      	b.n	801b184 <_readData+0x58>

		ptr += len;
 801b16c:	697a      	ldr	r2, [r7, #20]
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	4413      	add	r3, r2
 801b172:	617b      	str	r3, [r7, #20]
		size -= len;
 801b174:	683a      	ldr	r2, [r7, #0]
 801b176:	693b      	ldr	r3, [r7, #16]
 801b178:	1ad3      	subs	r3, r2, r3
 801b17a:	603b      	str	r3, [r7, #0]
	while (size) {
 801b17c:	683b      	ldr	r3, [r7, #0]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d1de      	bne.n	801b140 <_readData+0x14>
	}
	return TRUE;
 801b182:	2301      	movs	r3, #1
}
 801b184:	4618      	mov	r0, r3
 801b186:	371c      	adds	r7, #28
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd90      	pop	{r4, r7, pc}

0801b18c <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b18c:	b590      	push	{r4, r7, lr}
 801b18e:	b089      	sub	sp, #36	; 0x24
 801b190:	af00      	add	r7, sp, #0
 801b192:	60f8      	str	r0, [r7, #12]
 801b194:	60b9      	str	r1, [r7, #8]
 801b196:	607a      	str	r2, [r7, #4]
 801b198:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b19e:	88db      	ldrh	r3, [r3, #6]
 801b1a0:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	61fb      	str	r3, [r7, #28]
	while (size) {
 801b1a6:	e01d      	b.n	801b1e4 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801b1a8:	8b7b      	ldrh	r3, [r7, #26]
 801b1aa:	683a      	ldr	r2, [r7, #0]
 801b1ac:	4293      	cmp	r3, r2
 801b1ae:	bf28      	it	cs
 801b1b0:	4613      	movcs	r3, r2
 801b1b2:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801b1b8:	68f8      	ldr	r0, [r7, #12]
 801b1ba:	68ba      	ldr	r2, [r7, #8]
 801b1bc:	69fb      	ldr	r3, [r7, #28]
 801b1be:	18d1      	adds	r1, r2, r3
 801b1c0:	687a      	ldr	r2, [r7, #4]
 801b1c2:	69fb      	ldr	r3, [r7, #28]
 801b1c4:	441a      	add	r2, r3
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	47a0      	blx	r4
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d101      	bne.n	801b1d4 <_writeData+0x48>
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	e00b      	b.n	801b1ec <_writeData+0x60>

		ptr += len;
 801b1d4:	69fa      	ldr	r2, [r7, #28]
 801b1d6:	697b      	ldr	r3, [r7, #20]
 801b1d8:	4413      	add	r3, r2
 801b1da:	61fb      	str	r3, [r7, #28]
		size -= len;
 801b1dc:	683a      	ldr	r2, [r7, #0]
 801b1de:	697b      	ldr	r3, [r7, #20]
 801b1e0:	1ad3      	subs	r3, r2, r3
 801b1e2:	603b      	str	r3, [r7, #0]
	while (size) {
 801b1e4:	683b      	ldr	r3, [r7, #0]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d1de      	bne.n	801b1a8 <_writeData+0x1c>
	}
	return TRUE;
 801b1ea:	2301      	movs	r3, #1
}
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	3724      	adds	r7, #36	; 0x24
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd90      	pop	{r4, r7, pc}

0801b1f4 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	460b      	mov	r3, r1
 801b1fe:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d104      	bne.n	801b210 <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801b206:	4b18      	ldr	r3, [pc, #96]	; (801b268 <pifStorageVar_Init+0x74>)
 801b208:	2201      	movs	r2, #1
 801b20a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b20c:	2300      	movs	r3, #0
 801b20e:	e027      	b.n	801b260 <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801b210:	2248      	movs	r2, #72	; 0x48
 801b212:	2100      	movs	r1, #0
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f007 ff11 	bl	802303c <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801b21a:	887b      	ldrh	r3, [r7, #2]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d106      	bne.n	801b22e <pifStorageVar_Init+0x3a>
 801b220:	4b12      	ldr	r3, [pc, #72]	; (801b26c <pifStorageVar_Init+0x78>)
 801b222:	881b      	ldrh	r3, [r3, #0]
 801b224:	1c5a      	adds	r2, r3, #1
 801b226:	b291      	uxth	r1, r2
 801b228:	4a10      	ldr	r2, [pc, #64]	; (801b26c <pifStorageVar_Init+0x78>)
 801b22a:	8011      	strh	r1, [r2, #0]
 801b22c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	887a      	ldrh	r2, [r7, #2]
 801b232:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	4a0e      	ldr	r2, [pc, #56]	; (801b270 <pifStorageVar_Init+0x7c>)
 801b238:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	4a0d      	ldr	r2, [pc, #52]	; (801b274 <pifStorageVar_Init+0x80>)
 801b23e:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	4a0d      	ldr	r2, [pc, #52]	; (801b278 <pifStorageVar_Init+0x84>)
 801b244:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	4a0c      	ldr	r2, [pc, #48]	; (801b27c <pifStorageVar_Init+0x88>)
 801b24a:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	4a0c      	ldr	r2, [pc, #48]	; (801b280 <pifStorageVar_Init+0x8c>)
 801b250:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	4a0b      	ldr	r2, [pc, #44]	; (801b284 <pifStorageVar_Init+0x90>)
 801b256:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	4a0b      	ldr	r2, [pc, #44]	; (801b288 <pifStorageVar_Init+0x94>)
 801b25c:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801b25e:	2301      	movs	r3, #1
}
 801b260:	4618      	mov	r0, r3
 801b262:	3708      	adds	r7, #8
 801b264:	46bd      	mov	sp, r7
 801b266:	bd80      	pop	{r7, pc}
 801b268:	20001c55 	.word	0x20001c55
 801b26c:	2000011c 	.word	0x2000011c
 801b270:	0801b4b7 	.word	0x0801b4b7
 801b274:	0801b4d1 	.word	0x0801b4d1
 801b278:	0801b671 	.word	0x0801b671
 801b27c:	0801b91d 	.word	0x0801b91d
 801b280:	0801ba39 	.word	0x0801ba39
 801b284:	0801bacd 	.word	0x0801bacd
 801b288:	0801bb25 	.word	0x0801bb25

0801b28c <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b082      	sub	sp, #8
 801b290:	af00      	add	r7, sp, #0
 801b292:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d007      	beq.n	801b2ac <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f007 feb5 	bl	8023010 <free>
        p_owner->__p_info_buffer = NULL;
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	2200      	movs	r2, #0
 801b2b6:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	2200      	movs	r2, #0
 801b2c2:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 801b2d6:	bf00      	nop
 801b2d8:	3708      	adds	r7, #8
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
	...

0801b2e0 <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801b2e0:	b590      	push	{r4, r7, lr}
 801b2e2:	b089      	sub	sp, #36	; 0x24
 801b2e4:	af02      	add	r7, sp, #8
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	607a      	str	r2, [r7, #4]
 801b2ea:	461a      	mov	r2, r3
 801b2ec:	460b      	mov	r3, r1
 801b2ee:	817b      	strh	r3, [r7, #10]
 801b2f0:	4613      	mov	r3, r2
 801b2f2:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d008      	beq.n	801b30c <pifStorageVar_SetMedia+0x2c>
 801b2fa:	897b      	ldrh	r3, [r7, #10]
 801b2fc:	2b0f      	cmp	r3, #15
 801b2fe:	d905      	bls.n	801b30c <pifStorageVar_SetMedia+0x2c>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d002      	beq.n	801b30c <pifStorageVar_SetMedia+0x2c>
 801b306:	7a7b      	ldrb	r3, [r7, #9]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d104      	bne.n	801b316 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801b30c:	4b5c      	ldr	r3, [pc, #368]	; (801b480 <pifStorageVar_SetMedia+0x1a0>)
 801b30e:	2201      	movs	r2, #1
 801b310:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b312:	2300      	movs	r3, #0
 801b314:	e0af      	b.n	801b476 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801b316:	897b      	ldrh	r3, [r7, #10]
 801b318:	687a      	ldr	r2, [r7, #4]
 801b31a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b31e:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d003      	beq.n	801b32e <pifStorageVar_SetMedia+0x4e>
 801b326:	697b      	ldr	r3, [r7, #20]
 801b328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b32c:	d304      	bcc.n	801b338 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801b32e:	4b54      	ldr	r3, [pc, #336]	; (801b480 <pifStorageVar_SetMedia+0x1a0>)
 801b330:	2201      	movs	r2, #1
 801b332:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b334:	2300      	movs	r3, #0
 801b336:	e09e      	b.n	801b476 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801b338:	7a7a      	ldrb	r2, [r7, #9]
 801b33a:	4613      	mov	r3, r2
 801b33c:	005b      	lsls	r3, r3, #1
 801b33e:	4413      	add	r3, r2
 801b340:	009b      	lsls	r3, r3, #2
 801b342:	461a      	mov	r2, r3
 801b344:	897b      	ldrh	r3, [r7, #10]
 801b346:	4413      	add	r3, r2
 801b348:	f103 020f 	add.w	r2, r3, #15
 801b34c:	897b      	ldrh	r3, [r7, #10]
 801b34e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b352:	b29a      	uxth	r2, r3
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b35c:	461a      	mov	r2, r3
 801b35e:	897b      	ldrh	r3, [r7, #10]
 801b360:	fb02 f303 	mul.w	r3, r2, r3
 801b364:	461a      	mov	r2, r3
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b36e:	4619      	mov	r1, r3
 801b370:	2001      	movs	r0, #1
 801b372:	f007 fe13 	bl	8022f9c <calloc>
 801b376:	4603      	mov	r3, r0
 801b378:	461a      	mov	r2, r3
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b382:	2b00      	cmp	r3, #0
 801b384:	d104      	bne.n	801b390 <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801b386:	4b3e      	ldr	r3, [pc, #248]	; (801b480 <pifStorageVar_SetMedia+0x1a0>)
 801b388:	2203      	movs	r2, #3
 801b38a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b38c:	2300      	movs	r3, #0
 801b38e:	e072      	b.n	801b476 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b398:	897b      	ldrh	r3, [r7, #10]
 801b39a:	9300      	str	r3, [sp, #0]
 801b39c:	4613      	mov	r3, r2
 801b39e:	2200      	movs	r2, #0
 801b3a0:	68f8      	ldr	r0, [r7, #12]
 801b3a2:	f7ff fec3 	bl	801b12c <_readData>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d108      	bne.n	801b3be <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801b3ac:	4b34      	ldr	r3, [pc, #208]	; (801b480 <pifStorageVar_SetMedia+0x1a0>)
 801b3ae:	220d      	movs	r2, #13
 801b3b0:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801b3b2:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d05b      	beq.n	801b474 <pifStorageVar_SetMedia+0x194>
 801b3bc:	e052      	b.n	801b464 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b3c2:	68fb      	ldr	r3, [r7, #12]
 801b3c4:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3ca:	f103 0210 	add.w	r2, r3, #16
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801b3d2:	68fb      	ldr	r3, [r7, #12]
 801b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3d6:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b3d8:	693b      	ldr	r3, [r7, #16]
 801b3da:	781b      	ldrb	r3, [r3, #0]
 801b3dc:	2b70      	cmp	r3, #112	; 0x70
 801b3de:	d121      	bne.n	801b424 <pifStorageVar_SetMedia+0x144>
 801b3e0:	693b      	ldr	r3, [r7, #16]
 801b3e2:	785b      	ldrb	r3, [r3, #1]
 801b3e4:	2b69      	cmp	r3, #105	; 0x69
 801b3e6:	d11d      	bne.n	801b424 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b3e8:	693b      	ldr	r3, [r7, #16]
 801b3ea:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b3ec:	2b66      	cmp	r3, #102	; 0x66
 801b3ee:	d119      	bne.n	801b424 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b3f0:	693b      	ldr	r3, [r7, #16]
 801b3f2:	78db      	ldrb	r3, [r3, #3]
 801b3f4:	2b73      	cmp	r3, #115	; 0x73
 801b3f6:	d115      	bne.n	801b424 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801b3f8:	693b      	ldr	r3, [r7, #16]
 801b3fa:	795b      	ldrb	r3, [r3, #5]
 801b3fc:	7a7a      	ldrb	r2, [r7, #9]
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d112      	bne.n	801b428 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801b402:	693b      	ldr	r3, [r7, #16]
 801b404:	89dc      	ldrh	r4, [r3, #14]
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b40a:	210a      	movs	r1, #10
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7f6 fb6e 	bl	8011aee <pifCrc16>
 801b412:	4603      	mov	r3, r0
 801b414:	429c      	cmp	r4, r3
 801b416:	d109      	bne.n	801b42c <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801b418:	68fb      	ldr	r3, [r7, #12]
 801b41a:	2201      	movs	r2, #1
 801b41c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b420:	2301      	movs	r3, #1
 801b422:	e028      	b.n	801b476 <pifStorageVar_SetMedia+0x196>
        goto set;
 801b424:	bf00      	nop
 801b426:	e002      	b.n	801b42e <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b428:	bf00      	nop
 801b42a:	e000      	b.n	801b42e <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b42c:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801b42e:	693b      	ldr	r3, [r7, #16]
 801b430:	2270      	movs	r2, #112	; 0x70
 801b432:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801b434:	693b      	ldr	r3, [r7, #16]
 801b436:	2269      	movs	r2, #105	; 0x69
 801b438:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801b43a:	693b      	ldr	r3, [r7, #16]
 801b43c:	2266      	movs	r2, #102	; 0x66
 801b43e:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801b440:	693b      	ldr	r3, [r7, #16]
 801b442:	2273      	movs	r2, #115	; 0x73
 801b444:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801b446:	693b      	ldr	r3, [r7, #16]
 801b448:	2201      	movs	r2, #1
 801b44a:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	7a7a      	ldrb	r2, [r7, #9]
 801b450:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801b452:	693b      	ldr	r3, [r7, #16]
 801b454:	897a      	ldrh	r2, [r7, #10]
 801b456:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801b458:	697b      	ldr	r3, [r7, #20]
 801b45a:	b29a      	uxth	r2, r3
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801b460:	2301      	movs	r3, #1
 801b462:	e008      	b.n	801b476 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b468:	4618      	mov	r0, r3
 801b46a:	f007 fdd1 	bl	8023010 <free>
		p_owner->__p_info_buffer = NULL;
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	2200      	movs	r2, #0
 801b472:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801b474:	2300      	movs	r3, #0
}
 801b476:	4618      	mov	r0, r3
 801b478:	371c      	adds	r7, #28
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd90      	pop	{r4, r7, pc}
 801b47e:	bf00      	nop
 801b480:	20001c55 	.word	0x20001c55

0801b484 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b086      	sub	sp, #24
 801b488:	af02      	add	r7, sp, #8
 801b48a:	60f8      	str	r0, [r7, #12]
 801b48c:	60b9      	str	r1, [r7, #8]
 801b48e:	4611      	mov	r1, r2
 801b490:	461a      	mov	r2, r3
 801b492:	460b      	mov	r3, r1
 801b494:	71fb      	strb	r3, [r7, #7]
 801b496:	4613      	mov	r3, r2
 801b498:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801b49a:	68f8      	ldr	r0, [r7, #12]
 801b49c:	79b9      	ldrb	r1, [r7, #6]
 801b49e:	79fa      	ldrb	r2, [r7, #7]
 801b4a0:	7e3b      	ldrb	r3, [r7, #24]
 801b4a2:	9300      	str	r3, [sp, #0]
 801b4a4:	460b      	mov	r3, r1
 801b4a6:	68b9      	ldr	r1, [r7, #8]
 801b4a8:	f7ff fd44 	bl	801af34 <pifStorage_AttachI2c>
 801b4ac:	4603      	mov	r3, r0
}
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	3710      	adds	r7, #16
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	bd80      	pop	{r7, pc}

0801b4b6 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801b4b6:	b480      	push	{r7}
 801b4b8:	b083      	sub	sp, #12
 801b4ba:	af00      	add	r7, sp, #0
 801b4bc:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	370c      	adds	r7, #12
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ce:	4770      	bx	lr

0801b4d0 <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801b4d0:	b590      	push	{r4, r7, lr}
 801b4d2:	b08d      	sub	sp, #52	; 0x34
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4e0:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d104      	bne.n	801b4f2 <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801b4e8:	4b60      	ldr	r3, [pc, #384]	; (801b66c <pifStorageVar_Format+0x19c>)
 801b4ea:	2201      	movs	r2, #1
 801b4ec:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	e0b8      	b.n	801b664 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801b4f2:	6a3b      	ldr	r3, [r7, #32]
 801b4f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4f8:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801b4fa:	6a3b      	ldr	r3, [r7, #32]
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801b500:	210a      	movs	r1, #10
 801b502:	6a38      	ldr	r0, [r7, #32]
 801b504:	f7f6 faf3 	bl	8011aee <pifCrc16>
 801b508:	4603      	mov	r3, r0
 801b50a:	461a      	mov	r2, r3
 801b50c:	6a3b      	ldr	r3, [r7, #32]
 801b50e:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b514:	f103 0010 	add.w	r0, r3, #16
 801b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b51c:	3b10      	subs	r3, #16
 801b51e:	461a      	mov	r2, r3
 801b520:	21ff      	movs	r1, #255	; 0xff
 801b522:	f007 fd8b 	bl	802303c <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b526:	2300      	movs	r3, #0
 801b528:	62bb      	str	r3, [r7, #40]	; 0x28
 801b52a:	e019      	b.n	801b560 <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b52e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b532:	4613      	mov	r3, r2
 801b534:	005b      	lsls	r3, r3, #1
 801b536:	4413      	add	r3, r2
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	440b      	add	r3, r1
 801b53c:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801b53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b540:	b29b      	uxth	r3, r3
 801b542:	3301      	adds	r3, #1
 801b544:	b29a      	uxth	r2, r3
 801b546:	69fb      	ldr	r3, [r7, #28]
 801b548:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b54a:	2106      	movs	r1, #6
 801b54c:	69f8      	ldr	r0, [r7, #28]
 801b54e:	f7f6 face 	bl	8011aee <pifCrc16>
 801b552:	4603      	mov	r3, r0
 801b554:	461a      	mov	r2, r3
 801b556:	69fb      	ldr	r3, [r7, #28]
 801b558:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b55c:	3301      	adds	r3, #1
 801b55e:	62bb      	str	r3, [r7, #40]	; 0x28
 801b560:	6a3b      	ldr	r3, [r7, #32]
 801b562:	795b      	ldrb	r3, [r3, #5]
 801b564:	3b01      	subs	r3, #1
 801b566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b568:	429a      	cmp	r2, r3
 801b56a:	dbdf      	blt.n	801b52c <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b56e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b570:	6a3b      	ldr	r3, [r7, #32]
 801b572:	795b      	ldrb	r3, [r3, #5]
 801b574:	4619      	mov	r1, r3
 801b576:	460b      	mov	r3, r1
 801b578:	005b      	lsls	r3, r3, #1
 801b57a:	440b      	add	r3, r1
 801b57c:	009b      	lsls	r3, r3, #2
 801b57e:	3b0c      	subs	r3, #12
 801b580:	4413      	add	r3, r2
 801b582:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b584:	2106      	movs	r1, #6
 801b586:	69f8      	ldr	r0, [r7, #28]
 801b588:	f7f6 fab1 	bl	8011aee <pifCrc16>
 801b58c:	4603      	mov	r3, r0
 801b58e:	461a      	mov	r2, r3
 801b590:	69fb      	ldr	r3, [r7, #28]
 801b592:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b59c:	2100      	movs	r1, #0
 801b59e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b5a0:	f7ff fdf4 	bl	801b18c <_writeData>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d104      	bne.n	801b5b4 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801b5aa:	4b30      	ldr	r3, [pc, #192]	; (801b66c <pifStorageVar_Format+0x19c>)
 801b5ac:	220d      	movs	r2, #13
 801b5ae:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	e057      	b.n	801b664 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801b5b4:	2300      	movs	r3, #0
 801b5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b5c2:	e046      	b.n	801b652 <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801b5c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b5c8:	2b10      	cmp	r3, #16
 801b5ca:	bf28      	it	cs
 801b5cc:	2310      	movcs	r3, #16
 801b5ce:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5d2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b5d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b5d8:	7efb      	ldrb	r3, [r7, #27]
 801b5da:	f107 0108 	add.w	r1, r7, #8
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	47a0      	blx	r4
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d104      	bne.n	801b5f2 <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801b5e8:	4b20      	ldr	r3, [pc, #128]	; (801b66c <pifStorageVar_Format+0x19c>)
 801b5ea:	220d      	movs	r2, #13
 801b5ec:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	e038      	b.n	801b664 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b5f8:	e01a      	b.n	801b630 <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5fe:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801b602:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b606:	440a      	add	r2, r1
 801b608:	4413      	add	r3, r2
 801b60a:	781a      	ldrb	r2, [r3, #0]
 801b60c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b610:	3330      	adds	r3, #48	; 0x30
 801b612:	443b      	add	r3, r7
 801b614:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801b618:	429a      	cmp	r2, r3
 801b61a:	d004      	beq.n	801b626 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801b61c:	4b13      	ldr	r3, [pc, #76]	; (801b66c <pifStorageVar_Format+0x19c>)
 801b61e:	220f      	movs	r2, #15
 801b620:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801b622:	2300      	movs	r3, #0
 801b624:	e01e      	b.n	801b664 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801b626:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b62a:	3301      	adds	r3, #1
 801b62c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b630:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b634:	7efb      	ldrb	r3, [r7, #27]
 801b636:	429a      	cmp	r2, r3
 801b638:	d3df      	bcc.n	801b5fa <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801b63a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b63e:	7efb      	ldrb	r3, [r7, #27]
 801b640:	4413      	add	r3, r2
 801b642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801b646:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801b64a:	7efb      	ldrb	r3, [r7, #27]
 801b64c:	1ad3      	subs	r3, r2, r3
 801b64e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b652:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b656:	2b00      	cmp	r3, #0
 801b658:	d1b4      	bne.n	801b5c4 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b65c:	2201      	movs	r2, #1
 801b65e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b662:	2301      	movs	r3, #1
}
 801b664:	4618      	mov	r0, r3
 801b666:	3734      	adds	r7, #52	; 0x34
 801b668:	46bd      	mov	sp, r7
 801b66a:	bd90      	pop	{r4, r7, pc}
 801b66c:	20001c55 	.word	0x20001c55

0801b670 <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b08a      	sub	sp, #40	; 0x28
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]
 801b678:	460b      	mov	r3, r1
 801b67a:	807b      	strh	r3, [r7, #2]
 801b67c:	4613      	mov	r3, r2
 801b67e:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b684:	69fb      	ldr	r3, [r7, #28]
 801b686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b688:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801b68a:	69bb      	ldr	r3, [r7, #24]
 801b68c:	88db      	ldrh	r3, [r3, #6]
 801b68e:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801b690:	883a      	ldrh	r2, [r7, #0]
 801b692:	8afb      	ldrh	r3, [r7, #22]
 801b694:	4413      	add	r3, r2
 801b696:	1e5a      	subs	r2, r3, #1
 801b698:	8afb      	ldrh	r3, [r7, #22]
 801b69a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b69e:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801b6a0:	69fb      	ldr	r3, [r7, #28]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d002      	beq.n	801b6ac <pifStorageVar_Create+0x3c>
 801b6a6:	887b      	ldrh	r3, [r7, #2]
 801b6a8:	2bff      	cmp	r3, #255	; 0xff
 801b6aa:	d104      	bne.n	801b6b6 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801b6ac:	4b9a      	ldr	r3, [pc, #616]	; (801b918 <pifStorageVar_Create+0x2a8>)
 801b6ae:	2201      	movs	r2, #1
 801b6b0:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	e12b      	b.n	801b90e <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801b6b6:	69fb      	ldr	r3, [r7, #28]
 801b6b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d104      	bne.n	801b6ca <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801b6c0:	4b95      	ldr	r3, [pc, #596]	; (801b918 <pifStorageVar_Create+0x2a8>)
 801b6c2:	220f      	movs	r2, #15
 801b6c4:	701a      	strb	r2, [r3, #0]
		return NULL;
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	e121      	b.n	801b90e <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801b6ca:	69bb      	ldr	r3, [r7, #24]
 801b6cc:	895b      	ldrh	r3, [r3, #10]
 801b6ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b6d2:	4293      	cmp	r3, r2
 801b6d4:	d127      	bne.n	801b726 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801b6d6:	69fb      	ldr	r3, [r7, #28]
 801b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6da:	891b      	ldrh	r3, [r3, #8]
 801b6dc:	8aba      	ldrh	r2, [r7, #20]
 801b6de:	429a      	cmp	r2, r3
 801b6e0:	d904      	bls.n	801b6ec <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801b6e2:	4b8d      	ldr	r3, [pc, #564]	; (801b918 <pifStorageVar_Create+0x2a8>)
 801b6e4:	2204      	movs	r2, #4
 801b6e6:	701a      	strb	r2, [r3, #0]
			return NULL;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	e110      	b.n	801b90e <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801b6ec:	69fb      	ldr	r3, [r7, #28]
 801b6ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6f0:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801b6f2:	69f8      	ldr	r0, [r7, #28]
 801b6f4:	f7ff fcf2 	bl	801b0dc <_getNewDataNode>
 801b6f8:	4603      	mov	r3, r0
 801b6fa:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801b6fc:	69fb      	ldr	r3, [r7, #28]
 801b6fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b700:	89fa      	ldrh	r2, [r7, #14]
 801b702:	4613      	mov	r3, r2
 801b704:	005b      	lsls	r3, r3, #1
 801b706:	4413      	add	r3, r2
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	440b      	add	r3, r1
 801b70c:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801b70e:	69bb      	ldr	r3, [r7, #24]
 801b710:	895a      	ldrh	r2, [r3, #10]
 801b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b714:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b71c:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801b71e:	69bb      	ldr	r3, [r7, #24]
 801b720:	89fa      	ldrh	r2, [r7, #14]
 801b722:	815a      	strh	r2, [r3, #10]
		goto save;
 801b724:	e0d1      	b.n	801b8ca <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801b726:	69bb      	ldr	r3, [r7, #24]
 801b728:	895b      	ldrh	r3, [r3, #10]
 801b72a:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801b72c:	69fb      	ldr	r3, [r7, #28]
 801b72e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b730:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b732:	4613      	mov	r3, r2
 801b734:	005b      	lsls	r3, r3, #1
 801b736:	4413      	add	r3, r2
 801b738:	009b      	lsls	r3, r3, #2
 801b73a:	440b      	add	r3, r1
 801b73c:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801b73e:	69fb      	ldr	r3, [r7, #28]
 801b740:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b742:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801b744:	693b      	ldr	r3, [r7, #16]
 801b746:	889b      	ldrh	r3, [r3, #4]
 801b748:	8c3a      	ldrh	r2, [r7, #32]
 801b74a:	429a      	cmp	r2, r3
 801b74c:	f000 80b2 	beq.w	801b8b4 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801b750:	693b      	ldr	r3, [r7, #16]
 801b752:	889b      	ldrh	r3, [r3, #4]
 801b754:	461a      	mov	r2, r3
 801b756:	8c3b      	ldrh	r3, [r7, #32]
 801b758:	1ad2      	subs	r2, r2, r3
 801b75a:	8abb      	ldrh	r3, [r7, #20]
 801b75c:	429a      	cmp	r2, r3
 801b75e:	f2c0 80a9 	blt.w	801b8b4 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801b762:	69f8      	ldr	r0, [r7, #28]
 801b764:	f7ff fcba 	bl	801b0dc <_getNewDataNode>
 801b768:	4603      	mov	r3, r0
 801b76a:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801b76c:	89fb      	ldrh	r3, [r7, #14]
 801b76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b772:	4293      	cmp	r3, r2
 801b774:	d101      	bne.n	801b77a <pifStorageVar_Create+0x10a>
 801b776:	2300      	movs	r3, #0
 801b778:	e0c9      	b.n	801b90e <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801b77a:	69fb      	ldr	r3, [r7, #28]
 801b77c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b77e:	89fa      	ldrh	r2, [r7, #14]
 801b780:	4613      	mov	r3, r2
 801b782:	005b      	lsls	r3, r3, #1
 801b784:	4413      	add	r3, r2
 801b786:	009b      	lsls	r3, r3, #2
 801b788:	440b      	add	r3, r1
 801b78a:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801b78c:	69bb      	ldr	r3, [r7, #24]
 801b78e:	895a      	ldrh	r2, [r3, #10]
 801b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b792:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b79a:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801b79c:	69bb      	ldr	r3, [r7, #24]
 801b79e:	89fa      	ldrh	r2, [r7, #14]
 801b7a0:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801b7a2:	693b      	ldr	r3, [r7, #16]
 801b7a4:	89fa      	ldrh	r2, [r7, #14]
 801b7a6:	811a      	strh	r2, [r3, #8]
				goto save;
 801b7a8:	e08f      	b.n	801b8ca <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801b7aa:	69fb      	ldr	r3, [r7, #28]
 801b7ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b7ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b7b0:	4613      	mov	r3, r2
 801b7b2:	005b      	lsls	r3, r3, #1
 801b7b4:	4413      	add	r3, r2
 801b7b6:	009b      	lsls	r3, r3, #2
 801b7b8:	440b      	add	r3, r1
 801b7ba:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801b7bc:	693b      	ldr	r3, [r7, #16]
 801b7be:	889a      	ldrh	r2, [r3, #4]
 801b7c0:	693b      	ldr	r3, [r7, #16]
 801b7c2:	885b      	ldrh	r3, [r3, #2]
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	8afb      	ldrh	r3, [r7, #22]
 801b7c8:	440b      	add	r3, r1
 801b7ca:	1e59      	subs	r1, r3, #1
 801b7cc:	8afb      	ldrh	r3, [r7, #22]
 801b7ce:	fb91 f3f3 	sdiv	r3, r1, r3
 801b7d2:	b29b      	uxth	r3, r3
 801b7d4:	4413      	add	r3, r2
 801b7d6:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801b7d8:	693b      	ldr	r3, [r7, #16]
 801b7da:	88db      	ldrh	r3, [r3, #6]
 801b7dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	d127      	bne.n	801b834 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801b7e4:	69bb      	ldr	r3, [r7, #24]
 801b7e6:	891b      	ldrh	r3, [r3, #8]
 801b7e8:	461a      	mov	r2, r3
 801b7ea:	8c3b      	ldrh	r3, [r7, #32]
 801b7ec:	1ad2      	subs	r2, r2, r3
 801b7ee:	8abb      	ldrh	r3, [r7, #20]
 801b7f0:	429a      	cmp	r2, r3
 801b7f2:	db5c      	blt.n	801b8ae <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b7f4:	69f8      	ldr	r0, [r7, #28]
 801b7f6:	f7ff fc71 	bl	801b0dc <_getNewDataNode>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b7fe:	89fb      	ldrh	r3, [r7, #14]
 801b800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b804:	4293      	cmp	r3, r2
 801b806:	d101      	bne.n	801b80c <pifStorageVar_Create+0x19c>
 801b808:	2300      	movs	r3, #0
 801b80a:	e080      	b.n	801b90e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b80c:	69fb      	ldr	r3, [r7, #28]
 801b80e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b810:	89fa      	ldrh	r2, [r7, #14]
 801b812:	4613      	mov	r3, r2
 801b814:	005b      	lsls	r3, r3, #1
 801b816:	4413      	add	r3, r2
 801b818:	009b      	lsls	r3, r3, #2
 801b81a:	440b      	add	r3, r1
 801b81c:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	88da      	ldrh	r2, [r3, #6]
 801b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b824:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b828:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b82a:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801b82c:	693b      	ldr	r3, [r7, #16]
 801b82e:	89fa      	ldrh	r2, [r7, #14]
 801b830:	80da      	strh	r2, [r3, #6]
					goto save;
 801b832:	e04a      	b.n	801b8ca <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801b834:	69fb      	ldr	r3, [r7, #28]
 801b836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b838:	693b      	ldr	r3, [r7, #16]
 801b83a:	88db      	ldrh	r3, [r3, #6]
 801b83c:	4619      	mov	r1, r3
 801b83e:	460b      	mov	r3, r1
 801b840:	005b      	lsls	r3, r3, #1
 801b842:	440b      	add	r3, r1
 801b844:	009b      	lsls	r3, r3, #2
 801b846:	4413      	add	r3, r2
 801b848:	889b      	ldrh	r3, [r3, #4]
 801b84a:	461a      	mov	r2, r3
 801b84c:	8c3b      	ldrh	r3, [r7, #32]
 801b84e:	1ad2      	subs	r2, r2, r3
 801b850:	8abb      	ldrh	r3, [r7, #20]
 801b852:	429a      	cmp	r2, r3
 801b854:	db2b      	blt.n	801b8ae <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b856:	69f8      	ldr	r0, [r7, #28]
 801b858:	f7ff fc40 	bl	801b0dc <_getNewDataNode>
 801b85c:	4603      	mov	r3, r0
 801b85e:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b860:	89fb      	ldrh	r3, [r7, #14]
 801b862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b866:	4293      	cmp	r3, r2
 801b868:	d101      	bne.n	801b86e <pifStorageVar_Create+0x1fe>
 801b86a:	2300      	movs	r3, #0
 801b86c:	e04f      	b.n	801b90e <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b86e:	69fb      	ldr	r3, [r7, #28]
 801b870:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b872:	89fa      	ldrh	r2, [r7, #14]
 801b874:	4613      	mov	r3, r2
 801b876:	005b      	lsls	r3, r3, #1
 801b878:	4413      	add	r3, r2
 801b87a:	009b      	lsls	r3, r3, #2
 801b87c:	440b      	add	r3, r1
 801b87e:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b880:	693b      	ldr	r3, [r7, #16]
 801b882:	88da      	ldrh	r2, [r3, #6]
 801b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b886:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b88c:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801b88e:	69fb      	ldr	r3, [r7, #28]
 801b890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b892:	693b      	ldr	r3, [r7, #16]
 801b894:	88db      	ldrh	r3, [r3, #6]
 801b896:	4619      	mov	r1, r3
 801b898:	460b      	mov	r3, r1
 801b89a:	005b      	lsls	r3, r3, #1
 801b89c:	440b      	add	r3, r1
 801b89e:	009b      	lsls	r3, r3, #2
 801b8a0:	4413      	add	r3, r2
 801b8a2:	89fa      	ldrh	r2, [r7, #14]
 801b8a4:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801b8a6:	693b      	ldr	r3, [r7, #16]
 801b8a8:	89fa      	ldrh	r2, [r7, #14]
 801b8aa:	80da      	strh	r2, [r3, #6]
					goto save;
 801b8ac:	e00d      	b.n	801b8ca <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801b8ae:	693b      	ldr	r3, [r7, #16]
 801b8b0:	88db      	ldrh	r3, [r3, #6]
 801b8b2:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801b8b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b8ba:	4293      	cmp	r3, r2
 801b8bc:	f47f af75 	bne.w	801b7aa <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801b8c0:	4b15      	ldr	r3, [pc, #84]	; (801b918 <pifStorageVar_Create+0x2a8>)
 801b8c2:	2204      	movs	r2, #4
 801b8c4:	701a      	strb	r2, [r3, #0]
	return NULL;
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	e021      	b.n	801b90e <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8cc:	887a      	ldrh	r2, [r7, #2]
 801b8ce:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d2:	883a      	ldrh	r2, [r7, #0]
 801b8d4:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8d8:	8c3a      	ldrh	r2, [r7, #32]
 801b8da:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801b8dc:	2106      	movs	r1, #6
 801b8de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b8e0:	f7f6 f905 	bl	8011aee <pifCrc16>
 801b8e4:	4603      	mov	r3, r0
 801b8e6:	461a      	mov	r2, r3
 801b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ea:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b8ec:	69fb      	ldr	r3, [r7, #28]
 801b8ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b8f0:	69fb      	ldr	r3, [r7, #28]
 801b8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8f4:	2100      	movs	r1, #0
 801b8f6:	69f8      	ldr	r0, [r7, #28]
 801b8f8:	f7ff fc48 	bl	801b18c <_writeData>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d104      	bne.n	801b90c <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801b902:	4b05      	ldr	r3, [pc, #20]	; (801b918 <pifStorageVar_Create+0x2a8>)
 801b904:	220d      	movs	r2, #13
 801b906:	701a      	strb	r2, [r3, #0]
        return NULL;
 801b908:	2300      	movs	r3, #0
 801b90a:	e000      	b.n	801b90e <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b90e:	4618      	mov	r0, r3
 801b910:	3728      	adds	r7, #40	; 0x28
 801b912:	46bd      	mov	sp, r7
 801b914:	bd80      	pop	{r7, pc}
 801b916:	bf00      	nop
 801b918:	20001c55 	.word	0x20001c55

0801b91c <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b086      	sub	sp, #24
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
 801b924:	460b      	mov	r3, r1
 801b926:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b92c:	693b      	ldr	r3, [r7, #16]
 801b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b930:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801b932:	693b      	ldr	r3, [r7, #16]
 801b934:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d104      	bne.n	801b946 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801b93c:	4b3d      	ldr	r3, [pc, #244]	; (801ba34 <pifStorageVar_Delete+0x118>)
 801b93e:	220f      	movs	r2, #15
 801b940:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801b942:	2300      	movs	r3, #0
 801b944:	e072      	b.n	801ba2c <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	895b      	ldrh	r3, [r3, #10]
 801b94a:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801b94c:	e065      	b.n	801ba1a <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801b94e:	693b      	ldr	r3, [r7, #16]
 801b950:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b952:	8afa      	ldrh	r2, [r7, #22]
 801b954:	4613      	mov	r3, r2
 801b956:	005b      	lsls	r3, r3, #1
 801b958:	4413      	add	r3, r2
 801b95a:	009b      	lsls	r3, r3, #2
 801b95c:	440b      	add	r3, r1
 801b95e:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	881b      	ldrh	r3, [r3, #0]
 801b964:	887a      	ldrh	r2, [r7, #2]
 801b966:	429a      	cmp	r2, r3
 801b968:	d154      	bne.n	801ba14 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801b96a:	2206      	movs	r2, #6
 801b96c:	21ff      	movs	r1, #255	; 0xff
 801b96e:	68b8      	ldr	r0, [r7, #8]
 801b970:	f007 fb64 	bl	802303c <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801b974:	68bb      	ldr	r3, [r7, #8]
 801b976:	891b      	ldrh	r3, [r3, #8]
 801b978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b97c:	4293      	cmp	r3, r2
 801b97e:	d00d      	beq.n	801b99c <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801b980:	693b      	ldr	r3, [r7, #16]
 801b982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	891b      	ldrh	r3, [r3, #8]
 801b988:	4619      	mov	r1, r3
 801b98a:	460b      	mov	r3, r1
 801b98c:	005b      	lsls	r3, r3, #1
 801b98e:	440b      	add	r3, r1
 801b990:	009b      	lsls	r3, r3, #2
 801b992:	4413      	add	r3, r2
 801b994:	68ba      	ldr	r2, [r7, #8]
 801b996:	88d2      	ldrh	r2, [r2, #6]
 801b998:	80da      	strh	r2, [r3, #6]
 801b99a:	e003      	b.n	801b9a4 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801b99c:	68bb      	ldr	r3, [r7, #8]
 801b99e:	88da      	ldrh	r2, [r3, #6]
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	88db      	ldrh	r3, [r3, #6]
 801b9a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9ac:	4293      	cmp	r3, r2
 801b9ae:	d00c      	beq.n	801b9ca <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b9b4:	68bb      	ldr	r3, [r7, #8]
 801b9b6:	88db      	ldrh	r3, [r3, #6]
 801b9b8:	4619      	mov	r1, r3
 801b9ba:	460b      	mov	r3, r1
 801b9bc:	005b      	lsls	r3, r3, #1
 801b9be:	440b      	add	r3, r1
 801b9c0:	009b      	lsls	r3, r3, #2
 801b9c2:	4413      	add	r3, r2
 801b9c4:	68ba      	ldr	r2, [r7, #8]
 801b9c6:	8912      	ldrh	r2, [r2, #8]
 801b9c8:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	899a      	ldrh	r2, [r3, #12]
 801b9ce:	68bb      	ldr	r3, [r7, #8]
 801b9d0:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801b9d2:	68bb      	ldr	r3, [r7, #8]
 801b9d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9d8:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b9da:	2106      	movs	r1, #6
 801b9dc:	68b8      	ldr	r0, [r7, #8]
 801b9de:	f7f6 f886 	bl	8011aee <pifCrc16>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	461a      	mov	r2, r3
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	8afa      	ldrh	r2, [r7, #22]
 801b9ee:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b9f4:	693b      	ldr	r3, [r7, #16]
 801b9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9f8:	2100      	movs	r1, #0
 801b9fa:	6938      	ldr	r0, [r7, #16]
 801b9fc:	f7ff fbc6 	bl	801b18c <_writeData>
 801ba00:	4603      	mov	r3, r0
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d104      	bne.n	801ba10 <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801ba06:	4b0b      	ldr	r3, [pc, #44]	; (801ba34 <pifStorageVar_Delete+0x118>)
 801ba08:	220d      	movs	r2, #13
 801ba0a:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	e00d      	b.n	801ba2c <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801ba10:	2301      	movs	r3, #1
 801ba12:	e00b      	b.n	801ba2c <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801ba14:	68bb      	ldr	r3, [r7, #8]
 801ba16:	88db      	ldrh	r3, [r3, #6]
 801ba18:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801ba1a:	8afb      	ldrh	r3, [r7, #22]
 801ba1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba20:	4293      	cmp	r3, r2
 801ba22:	d194      	bne.n	801b94e <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801ba24:	4b03      	ldr	r3, [pc, #12]	; (801ba34 <pifStorageVar_Delete+0x118>)
 801ba26:	220e      	movs	r2, #14
 801ba28:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801ba2a:	2300      	movs	r3, #0
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	3718      	adds	r7, #24
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	20001c55 	.word	0x20001c55

0801ba38 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801ba38:	b590      	push	{r4, r7, lr}
 801ba3a:	b087      	sub	sp, #28
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
 801ba40:	460b      	mov	r3, r1
 801ba42:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801ba48:	693b      	ldr	r3, [r7, #16]
 801ba4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba4c:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801ba4e:	693b      	ldr	r3, [r7, #16]
 801ba50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d104      	bne.n	801ba62 <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801ba58:	4b1b      	ldr	r3, [pc, #108]	; (801bac8 <pifStorageVar_Open+0x90>)
 801ba5a:	220f      	movs	r2, #15
 801ba5c:	701a      	strb	r2, [r3, #0]
		return NULL;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	e02d      	b.n	801babe <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	895b      	ldrh	r3, [r3, #10]
 801ba66:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801ba68:	e020      	b.n	801baac <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801ba6a:	693b      	ldr	r3, [r7, #16]
 801ba6c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ba6e:	8afa      	ldrh	r2, [r7, #22]
 801ba70:	4613      	mov	r3, r2
 801ba72:	005b      	lsls	r3, r3, #1
 801ba74:	4413      	add	r3, r2
 801ba76:	009b      	lsls	r3, r3, #2
 801ba78:	440b      	add	r3, r1
 801ba7a:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	881b      	ldrh	r3, [r3, #0]
 801ba80:	887a      	ldrh	r2, [r7, #2]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d10f      	bne.n	801baa6 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801ba86:	68bb      	ldr	r3, [r7, #8]
 801ba88:	895c      	ldrh	r4, [r3, #10]
 801ba8a:	2106      	movs	r1, #6
 801ba8c:	68b8      	ldr	r0, [r7, #8]
 801ba8e:	f7f6 f82e 	bl	8011aee <pifCrc16>
 801ba92:	4603      	mov	r3, r0
 801ba94:	429c      	cmp	r4, r3
 801ba96:	d004      	beq.n	801baa2 <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801ba98:	4b0b      	ldr	r3, [pc, #44]	; (801bac8 <pifStorageVar_Open+0x90>)
 801ba9a:	220c      	movs	r2, #12
 801ba9c:	701a      	strb	r2, [r3, #0]
				return NULL;
 801ba9e:	2300      	movs	r3, #0
 801baa0:	e00d      	b.n	801babe <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	e00b      	b.n	801babe <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	88db      	ldrh	r3, [r3, #6]
 801baaa:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801baac:	8afb      	ldrh	r3, [r7, #22]
 801baae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bab2:	4293      	cmp	r3, r2
 801bab4:	d1d9      	bne.n	801ba6a <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801bab6:	4b04      	ldr	r3, [pc, #16]	; (801bac8 <pifStorageVar_Open+0x90>)
 801bab8:	220e      	movs	r2, #14
 801baba:	701a      	strb	r2, [r3, #0]
	return NULL;
 801babc:	2300      	movs	r3, #0
}
 801babe:	4618      	mov	r0, r3
 801bac0:	371c      	adds	r7, #28
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd90      	pop	{r4, r7, pc}
 801bac6:	bf00      	nop
 801bac8:	20001c55 	.word	0x20001c55

0801bacc <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b088      	sub	sp, #32
 801bad0:	af02      	add	r7, sp, #8
 801bad2:	60f8      	str	r0, [r7, #12]
 801bad4:	60b9      	str	r1, [r7, #8]
 801bad6:	607a      	str	r2, [r7, #4]
 801bad8:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bade:	697b      	ldr	r3, [r7, #20]
 801bae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d104      	bne.n	801baf2 <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801bae8:	4b0d      	ldr	r3, [pc, #52]	; (801bb20 <pifStorageVar_Read+0x54>)
 801baea:	220f      	movs	r2, #15
 801baec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801baee:	2300      	movs	r3, #0
 801baf0:	e012      	b.n	801bb18 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	889b      	ldrh	r3, [r3, #4]
 801baf6:	461a      	mov	r2, r3
 801baf8:	697b      	ldr	r3, [r7, #20]
 801bafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bafc:	88db      	ldrh	r3, [r3, #6]
 801bafe:	fb02 f303 	mul.w	r3, r2, r3
 801bb02:	461a      	mov	r2, r3
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb08:	88db      	ldrh	r3, [r3, #6]
 801bb0a:	9300      	str	r3, [sp, #0]
 801bb0c:	683b      	ldr	r3, [r7, #0]
 801bb0e:	68b9      	ldr	r1, [r7, #8]
 801bb10:	6978      	ldr	r0, [r7, #20]
 801bb12:	f7ff fb0b 	bl	801b12c <_readData>
 801bb16:	4603      	mov	r3, r0
}
 801bb18:	4618      	mov	r0, r3
 801bb1a:	3718      	adds	r7, #24
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}
 801bb20:	20001c55 	.word	0x20001c55

0801bb24 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b086      	sub	sp, #24
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	60f8      	str	r0, [r7, #12]
 801bb2c:	60b9      	str	r1, [r7, #8]
 801bb2e:	607a      	str	r2, [r7, #4]
 801bb30:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bb36:	697b      	ldr	r3, [r7, #20]
 801bb38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d104      	bne.n	801bb4a <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801bb40:	4b0b      	ldr	r3, [pc, #44]	; (801bb70 <pifStorageVar_Write+0x4c>)
 801bb42:	220f      	movs	r2, #15
 801bb44:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bb46:	2300      	movs	r3, #0
 801bb48:	e00e      	b.n	801bb68 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801bb4a:	68bb      	ldr	r3, [r7, #8]
 801bb4c:	889b      	ldrh	r3, [r3, #4]
 801bb4e:	461a      	mov	r2, r3
 801bb50:	697b      	ldr	r3, [r7, #20]
 801bb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb54:	88db      	ldrh	r3, [r3, #6]
 801bb56:	fb02 f303 	mul.w	r3, r2, r3
 801bb5a:	4619      	mov	r1, r3
 801bb5c:	683b      	ldr	r3, [r7, #0]
 801bb5e:	687a      	ldr	r2, [r7, #4]
 801bb60:	6978      	ldr	r0, [r7, #20]
 801bb62:	f7ff fb13 	bl	801b18c <_writeData>
 801bb66:	4603      	mov	r3, r0
}
 801bb68:	4618      	mov	r0, r3
 801bb6a:	3718      	adds	r7, #24
 801bb6c:	46bd      	mov	sp, r7
 801bb6e:	bd80      	pop	{r7, pc}
 801bb70:	20001c55 	.word	0x20001c55

0801bb74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801bb74:	b580      	push	{r7, lr}
 801bb76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bb78:	4b0e      	ldr	r3, [pc, #56]	; (801bbb4 <HAL_Init+0x40>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	4a0d      	ldr	r2, [pc, #52]	; (801bbb4 <HAL_Init+0x40>)
 801bb7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bb82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801bb84:	4b0b      	ldr	r3, [pc, #44]	; (801bbb4 <HAL_Init+0x40>)
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	4a0a      	ldr	r2, [pc, #40]	; (801bbb4 <HAL_Init+0x40>)
 801bb8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bb8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801bb90:	4b08      	ldr	r3, [pc, #32]	; (801bbb4 <HAL_Init+0x40>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4a07      	ldr	r2, [pc, #28]	; (801bbb4 <HAL_Init+0x40>)
 801bb96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bb9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bb9c:	2003      	movs	r0, #3
 801bb9e:	f000 fd51 	bl	801c644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801bba2:	2000      	movs	r0, #0
 801bba4:	f000 f808 	bl	801bbb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801bba8:	f7e7 fb42 	bl	8003230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bbac:	2300      	movs	r3, #0
}
 801bbae:	4618      	mov	r0, r3
 801bbb0:	bd80      	pop	{r7, pc}
 801bbb2:	bf00      	nop
 801bbb4:	40023c00 	.word	0x40023c00

0801bbb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bbb8:	b580      	push	{r7, lr}
 801bbba:	b082      	sub	sp, #8
 801bbbc:	af00      	add	r7, sp, #0
 801bbbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801bbc0:	4b12      	ldr	r3, [pc, #72]	; (801bc0c <HAL_InitTick+0x54>)
 801bbc2:	681a      	ldr	r2, [r3, #0]
 801bbc4:	4b12      	ldr	r3, [pc, #72]	; (801bc10 <HAL_InitTick+0x58>)
 801bbc6:	781b      	ldrb	r3, [r3, #0]
 801bbc8:	4619      	mov	r1, r3
 801bbca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bbce:	fbb3 f3f1 	udiv	r3, r3, r1
 801bbd2:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	f000 fd77 	bl	801c6ca <HAL_SYSTICK_Config>
 801bbdc:	4603      	mov	r3, r0
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d001      	beq.n	801bbe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801bbe2:	2301      	movs	r3, #1
 801bbe4:	e00e      	b.n	801bc04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	2b0f      	cmp	r3, #15
 801bbea:	d80a      	bhi.n	801bc02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bbec:	2200      	movs	r2, #0
 801bbee:	6879      	ldr	r1, [r7, #4]
 801bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbf4:	f000 fd31 	bl	801c65a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bbf8:	4a06      	ldr	r2, [pc, #24]	; (801bc14 <HAL_InitTick+0x5c>)
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	e000      	b.n	801bc04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801bc02:	2301      	movs	r3, #1
}
 801bc04:	4618      	mov	r0, r3
 801bc06:	3708      	adds	r7, #8
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bd80      	pop	{r7, pc}
 801bc0c:	20000020 	.word	0x20000020
 801bc10:	20000154 	.word	0x20000154
 801bc14:	20000150 	.word	0x20000150

0801bc18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bc18:	b480      	push	{r7}
 801bc1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801bc1c:	4b06      	ldr	r3, [pc, #24]	; (801bc38 <HAL_IncTick+0x20>)
 801bc1e:	781b      	ldrb	r3, [r3, #0]
 801bc20:	461a      	mov	r2, r3
 801bc22:	4b06      	ldr	r3, [pc, #24]	; (801bc3c <HAL_IncTick+0x24>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	4413      	add	r3, r2
 801bc28:	4a04      	ldr	r2, [pc, #16]	; (801bc3c <HAL_IncTick+0x24>)
 801bc2a:	6013      	str	r3, [r2, #0]
}
 801bc2c:	bf00      	nop
 801bc2e:	46bd      	mov	sp, r7
 801bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc34:	4770      	bx	lr
 801bc36:	bf00      	nop
 801bc38:	20000154 	.word	0x20000154
 801bc3c:	20001dec 	.word	0x20001dec

0801bc40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bc40:	b480      	push	{r7}
 801bc42:	af00      	add	r7, sp, #0
  return uwTick;
 801bc44:	4b03      	ldr	r3, [pc, #12]	; (801bc54 <HAL_GetTick+0x14>)
 801bc46:	681b      	ldr	r3, [r3, #0]
}
 801bc48:	4618      	mov	r0, r3
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc50:	4770      	bx	lr
 801bc52:	bf00      	nop
 801bc54:	20001dec 	.word	0x20001dec

0801bc58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b084      	sub	sp, #16
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801bc60:	2300      	movs	r3, #0
 801bc62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d101      	bne.n	801bc6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801bc6a:	2301      	movs	r3, #1
 801bc6c:	e033      	b.n	801bcd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d109      	bne.n	801bc8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801bc76:	6878      	ldr	r0, [r7, #4]
 801bc78:	f7e7 fb02 	bl	8003280 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2200      	movs	r2, #0
 801bc80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	2200      	movs	r2, #0
 801bc86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc8e:	f003 0310 	and.w	r3, r3, #16
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d118      	bne.n	801bcc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801bc9e:	f023 0302 	bic.w	r3, r3, #2
 801bca2:	f043 0202 	orr.w	r2, r3, #2
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f000 fa58 	bl	801c160 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bcba:	f023 0303 	bic.w	r3, r3, #3
 801bcbe:	f043 0201 	orr.w	r2, r3, #1
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	641a      	str	r2, [r3, #64]	; 0x40
 801bcc6:	e001      	b.n	801bccc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801bcc8:	2301      	movs	r3, #1
 801bcca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	2200      	movs	r2, #0
 801bcd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	3710      	adds	r7, #16
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bd80      	pop	{r7, pc}
	...

0801bce0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b086      	sub	sp, #24
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	60f8      	str	r0, [r7, #12]
 801bce8:	60b9      	str	r1, [r7, #8]
 801bcea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801bcec:	2300      	movs	r3, #0
 801bcee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bcf6:	2b01      	cmp	r3, #1
 801bcf8:	d101      	bne.n	801bcfe <HAL_ADC_Start_DMA+0x1e>
 801bcfa:	2302      	movs	r3, #2
 801bcfc:	e0ce      	b.n	801be9c <HAL_ADC_Start_DMA+0x1bc>
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	2201      	movs	r2, #1
 801bd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	689b      	ldr	r3, [r3, #8]
 801bd0c:	f003 0301 	and.w	r3, r3, #1
 801bd10:	2b01      	cmp	r3, #1
 801bd12:	d018      	beq.n	801bd46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	689a      	ldr	r2, [r3, #8]
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	f042 0201 	orr.w	r2, r2, #1
 801bd22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801bd24:	4b5f      	ldr	r3, [pc, #380]	; (801bea4 <HAL_ADC_Start_DMA+0x1c4>)
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	4a5f      	ldr	r2, [pc, #380]	; (801bea8 <HAL_ADC_Start_DMA+0x1c8>)
 801bd2a:	fba2 2303 	umull	r2, r3, r2, r3
 801bd2e:	0c9a      	lsrs	r2, r3, #18
 801bd30:	4613      	mov	r3, r2
 801bd32:	005b      	lsls	r3, r3, #1
 801bd34:	4413      	add	r3, r2
 801bd36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801bd38:	e002      	b.n	801bd40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	3b01      	subs	r3, #1
 801bd3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801bd40:	693b      	ldr	r3, [r7, #16]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d1f9      	bne.n	801bd3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	689b      	ldr	r3, [r3, #8]
 801bd4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bd54:	d107      	bne.n	801bd66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	689a      	ldr	r2, [r3, #8]
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bd64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	689b      	ldr	r3, [r3, #8]
 801bd6c:	f003 0301 	and.w	r3, r3, #1
 801bd70:	2b01      	cmp	r3, #1
 801bd72:	f040 8086 	bne.w	801be82 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801bd7e:	f023 0301 	bic.w	r3, r3, #1
 801bd82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d007      	beq.n	801bda8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801bda0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bdb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bdb4:	d106      	bne.n	801bdc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bdba:	f023 0206 	bic.w	r2, r3, #6
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	645a      	str	r2, [r3, #68]	; 0x44
 801bdc2:	e002      	b.n	801bdca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	2200      	movs	r2, #0
 801bdc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	2200      	movs	r2, #0
 801bdce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801bdd2:	4b36      	ldr	r3, [pc, #216]	; (801beac <HAL_ADC_Start_DMA+0x1cc>)
 801bdd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdda:	4a35      	ldr	r2, [pc, #212]	; (801beb0 <HAL_ADC_Start_DMA+0x1d0>)
 801bddc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bde2:	4a34      	ldr	r2, [pc, #208]	; (801beb4 <HAL_ADC_Start_DMA+0x1d4>)
 801bde4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdea:	4a33      	ldr	r2, [pc, #204]	; (801beb8 <HAL_ADC_Start_DMA+0x1d8>)
 801bdec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801bdf6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	685a      	ldr	r2, [r3, #4]
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801be06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	689a      	ldr	r2, [r3, #8]
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801be16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	334c      	adds	r3, #76	; 0x4c
 801be22:	4619      	mov	r1, r3
 801be24:	68ba      	ldr	r2, [r7, #8]
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	f000 fd0a 	bl	801c840 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801be2c:	697b      	ldr	r3, [r7, #20]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	f003 031f 	and.w	r3, r3, #31
 801be34:	2b00      	cmp	r3, #0
 801be36:	d10f      	bne.n	801be58 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	689b      	ldr	r3, [r3, #8]
 801be3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801be42:	2b00      	cmp	r3, #0
 801be44:	d129      	bne.n	801be9a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	689a      	ldr	r2, [r3, #8]
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801be54:	609a      	str	r2, [r3, #8]
 801be56:	e020      	b.n	801be9a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	4a17      	ldr	r2, [pc, #92]	; (801bebc <HAL_ADC_Start_DMA+0x1dc>)
 801be5e:	4293      	cmp	r3, r2
 801be60:	d11b      	bne.n	801be9a <HAL_ADC_Start_DMA+0x1ba>
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	689b      	ldr	r3, [r3, #8]
 801be68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d114      	bne.n	801be9a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	689a      	ldr	r2, [r3, #8]
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801be7e:	609a      	str	r2, [r3, #8]
 801be80:	e00b      	b.n	801be9a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be86:	f043 0210 	orr.w	r2, r3, #16
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be92:	f043 0201 	orr.w	r2, r3, #1
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801be9a:	2300      	movs	r3, #0
}
 801be9c:	4618      	mov	r0, r3
 801be9e:	3718      	adds	r7, #24
 801bea0:	46bd      	mov	sp, r7
 801bea2:	bd80      	pop	{r7, pc}
 801bea4:	20000020 	.word	0x20000020
 801bea8:	431bde83 	.word	0x431bde83
 801beac:	40012300 	.word	0x40012300
 801beb0:	0801c359 	.word	0x0801c359
 801beb4:	0801c413 	.word	0x0801c413
 801beb8:	0801c42f 	.word	0x0801c42f
 801bebc:	40012000 	.word	0x40012000

0801bec0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801bec0:	b480      	push	{r7}
 801bec2:	b083      	sub	sp, #12
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801bec8:	bf00      	nop
 801beca:	370c      	adds	r7, #12
 801becc:	46bd      	mov	sp, r7
 801bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed2:	4770      	bx	lr

0801bed4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801bed4:	b480      	push	{r7}
 801bed6:	b083      	sub	sp, #12
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801bedc:	bf00      	nop
 801bede:	370c      	adds	r7, #12
 801bee0:	46bd      	mov	sp, r7
 801bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee6:	4770      	bx	lr

0801bee8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801bee8:	b480      	push	{r7}
 801beea:	b083      	sub	sp, #12
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801bef0:	bf00      	nop
 801bef2:	370c      	adds	r7, #12
 801bef4:	46bd      	mov	sp, r7
 801bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801befa:	4770      	bx	lr

0801befc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801befc:	b480      	push	{r7}
 801befe:	b085      	sub	sp, #20
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
 801bf04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801bf06:	2300      	movs	r3, #0
 801bf08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bf10:	2b01      	cmp	r3, #1
 801bf12:	d101      	bne.n	801bf18 <HAL_ADC_ConfigChannel+0x1c>
 801bf14:	2302      	movs	r3, #2
 801bf16:	e113      	b.n	801c140 <HAL_ADC_ConfigChannel+0x244>
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	2201      	movs	r2, #1
 801bf1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801bf20:	683b      	ldr	r3, [r7, #0]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	2b09      	cmp	r3, #9
 801bf26:	d925      	bls.n	801bf74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	68d9      	ldr	r1, [r3, #12]
 801bf2e:	683b      	ldr	r3, [r7, #0]
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	461a      	mov	r2, r3
 801bf36:	4613      	mov	r3, r2
 801bf38:	005b      	lsls	r3, r3, #1
 801bf3a:	4413      	add	r3, r2
 801bf3c:	3b1e      	subs	r3, #30
 801bf3e:	2207      	movs	r2, #7
 801bf40:	fa02 f303 	lsl.w	r3, r2, r3
 801bf44:	43da      	mvns	r2, r3
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	400a      	ands	r2, r1
 801bf4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	68d9      	ldr	r1, [r3, #12]
 801bf54:	683b      	ldr	r3, [r7, #0]
 801bf56:	689a      	ldr	r2, [r3, #8]
 801bf58:	683b      	ldr	r3, [r7, #0]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	b29b      	uxth	r3, r3
 801bf5e:	4618      	mov	r0, r3
 801bf60:	4603      	mov	r3, r0
 801bf62:	005b      	lsls	r3, r3, #1
 801bf64:	4403      	add	r3, r0
 801bf66:	3b1e      	subs	r3, #30
 801bf68:	409a      	lsls	r2, r3
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	430a      	orrs	r2, r1
 801bf70:	60da      	str	r2, [r3, #12]
 801bf72:	e022      	b.n	801bfba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	6919      	ldr	r1, [r3, #16]
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	b29b      	uxth	r3, r3
 801bf80:	461a      	mov	r2, r3
 801bf82:	4613      	mov	r3, r2
 801bf84:	005b      	lsls	r3, r3, #1
 801bf86:	4413      	add	r3, r2
 801bf88:	2207      	movs	r2, #7
 801bf8a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf8e:	43da      	mvns	r2, r3
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	400a      	ands	r2, r1
 801bf96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	6919      	ldr	r1, [r3, #16]
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	689a      	ldr	r2, [r3, #8]
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	b29b      	uxth	r3, r3
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	4603      	mov	r3, r0
 801bfac:	005b      	lsls	r3, r3, #1
 801bfae:	4403      	add	r3, r0
 801bfb0:	409a      	lsls	r2, r3
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	430a      	orrs	r2, r1
 801bfb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801bfba:	683b      	ldr	r3, [r7, #0]
 801bfbc:	685b      	ldr	r3, [r3, #4]
 801bfbe:	2b06      	cmp	r3, #6
 801bfc0:	d824      	bhi.n	801c00c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801bfc8:	683b      	ldr	r3, [r7, #0]
 801bfca:	685a      	ldr	r2, [r3, #4]
 801bfcc:	4613      	mov	r3, r2
 801bfce:	009b      	lsls	r3, r3, #2
 801bfd0:	4413      	add	r3, r2
 801bfd2:	3b05      	subs	r3, #5
 801bfd4:	221f      	movs	r2, #31
 801bfd6:	fa02 f303 	lsl.w	r3, r2, r3
 801bfda:	43da      	mvns	r2, r3
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	400a      	ands	r2, r1
 801bfe2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801bfea:	683b      	ldr	r3, [r7, #0]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	b29b      	uxth	r3, r3
 801bff0:	4618      	mov	r0, r3
 801bff2:	683b      	ldr	r3, [r7, #0]
 801bff4:	685a      	ldr	r2, [r3, #4]
 801bff6:	4613      	mov	r3, r2
 801bff8:	009b      	lsls	r3, r3, #2
 801bffa:	4413      	add	r3, r2
 801bffc:	3b05      	subs	r3, #5
 801bffe:	fa00 f203 	lsl.w	r2, r0, r3
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	430a      	orrs	r2, r1
 801c008:	635a      	str	r2, [r3, #52]	; 0x34
 801c00a:	e04c      	b.n	801c0a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801c00c:	683b      	ldr	r3, [r7, #0]
 801c00e:	685b      	ldr	r3, [r3, #4]
 801c010:	2b0c      	cmp	r3, #12
 801c012:	d824      	bhi.n	801c05e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	685a      	ldr	r2, [r3, #4]
 801c01e:	4613      	mov	r3, r2
 801c020:	009b      	lsls	r3, r3, #2
 801c022:	4413      	add	r3, r2
 801c024:	3b23      	subs	r3, #35	; 0x23
 801c026:	221f      	movs	r2, #31
 801c028:	fa02 f303 	lsl.w	r3, r2, r3
 801c02c:	43da      	mvns	r2, r3
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	400a      	ands	r2, r1
 801c034:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c03c:	683b      	ldr	r3, [r7, #0]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	b29b      	uxth	r3, r3
 801c042:	4618      	mov	r0, r3
 801c044:	683b      	ldr	r3, [r7, #0]
 801c046:	685a      	ldr	r2, [r3, #4]
 801c048:	4613      	mov	r3, r2
 801c04a:	009b      	lsls	r3, r3, #2
 801c04c:	4413      	add	r3, r2
 801c04e:	3b23      	subs	r3, #35	; 0x23
 801c050:	fa00 f203 	lsl.w	r2, r0, r3
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	430a      	orrs	r2, r1
 801c05a:	631a      	str	r2, [r3, #48]	; 0x30
 801c05c:	e023      	b.n	801c0a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c064:	683b      	ldr	r3, [r7, #0]
 801c066:	685a      	ldr	r2, [r3, #4]
 801c068:	4613      	mov	r3, r2
 801c06a:	009b      	lsls	r3, r3, #2
 801c06c:	4413      	add	r3, r2
 801c06e:	3b41      	subs	r3, #65	; 0x41
 801c070:	221f      	movs	r2, #31
 801c072:	fa02 f303 	lsl.w	r3, r2, r3
 801c076:	43da      	mvns	r2, r3
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	400a      	ands	r2, r1
 801c07e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	b29b      	uxth	r3, r3
 801c08c:	4618      	mov	r0, r3
 801c08e:	683b      	ldr	r3, [r7, #0]
 801c090:	685a      	ldr	r2, [r3, #4]
 801c092:	4613      	mov	r3, r2
 801c094:	009b      	lsls	r3, r3, #2
 801c096:	4413      	add	r3, r2
 801c098:	3b41      	subs	r3, #65	; 0x41
 801c09a:	fa00 f203 	lsl.w	r2, r0, r3
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	430a      	orrs	r2, r1
 801c0a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c0a6:	4b29      	ldr	r3, [pc, #164]	; (801c14c <HAL_ADC_ConfigChannel+0x250>)
 801c0a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	4a28      	ldr	r2, [pc, #160]	; (801c150 <HAL_ADC_ConfigChannel+0x254>)
 801c0b0:	4293      	cmp	r3, r2
 801c0b2:	d10f      	bne.n	801c0d4 <HAL_ADC_ConfigChannel+0x1d8>
 801c0b4:	683b      	ldr	r3, [r7, #0]
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	2b12      	cmp	r3, #18
 801c0ba:	d10b      	bne.n	801c0d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	685b      	ldr	r3, [r3, #4]
 801c0c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	685b      	ldr	r3, [r3, #4]
 801c0cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	4a1d      	ldr	r2, [pc, #116]	; (801c150 <HAL_ADC_ConfigChannel+0x254>)
 801c0da:	4293      	cmp	r3, r2
 801c0dc:	d12b      	bne.n	801c136 <HAL_ADC_ConfigChannel+0x23a>
 801c0de:	683b      	ldr	r3, [r7, #0]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	4a1c      	ldr	r2, [pc, #112]	; (801c154 <HAL_ADC_ConfigChannel+0x258>)
 801c0e4:	4293      	cmp	r3, r2
 801c0e6:	d003      	beq.n	801c0f0 <HAL_ADC_ConfigChannel+0x1f4>
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	2b11      	cmp	r3, #17
 801c0ee:	d122      	bne.n	801c136 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	685b      	ldr	r3, [r3, #4]
 801c0f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	685b      	ldr	r3, [r3, #4]
 801c100:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	4a11      	ldr	r2, [pc, #68]	; (801c154 <HAL_ADC_ConfigChannel+0x258>)
 801c10e:	4293      	cmp	r3, r2
 801c110:	d111      	bne.n	801c136 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801c112:	4b11      	ldr	r3, [pc, #68]	; (801c158 <HAL_ADC_ConfigChannel+0x25c>)
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	4a11      	ldr	r2, [pc, #68]	; (801c15c <HAL_ADC_ConfigChannel+0x260>)
 801c118:	fba2 2303 	umull	r2, r3, r2, r3
 801c11c:	0c9a      	lsrs	r2, r3, #18
 801c11e:	4613      	mov	r3, r2
 801c120:	009b      	lsls	r3, r3, #2
 801c122:	4413      	add	r3, r2
 801c124:	005b      	lsls	r3, r3, #1
 801c126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c128:	e002      	b.n	801c130 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801c12a:	68bb      	ldr	r3, [r7, #8]
 801c12c:	3b01      	subs	r3, #1
 801c12e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c130:	68bb      	ldr	r3, [r7, #8]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d1f9      	bne.n	801c12a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	2200      	movs	r2, #0
 801c13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801c13e:	2300      	movs	r3, #0
}
 801c140:	4618      	mov	r0, r3
 801c142:	3714      	adds	r7, #20
 801c144:	46bd      	mov	sp, r7
 801c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c14a:	4770      	bx	lr
 801c14c:	40012300 	.word	0x40012300
 801c150:	40012000 	.word	0x40012000
 801c154:	10000012 	.word	0x10000012
 801c158:	20000020 	.word	0x20000020
 801c15c:	431bde83 	.word	0x431bde83

0801c160 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801c160:	b480      	push	{r7}
 801c162:	b085      	sub	sp, #20
 801c164:	af00      	add	r7, sp, #0
 801c166:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c168:	4b79      	ldr	r3, [pc, #484]	; (801c350 <ADC_Init+0x1f0>)
 801c16a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	685b      	ldr	r3, [r3, #4]
 801c170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	685a      	ldr	r2, [r3, #4]
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	685b      	ldr	r3, [r3, #4]
 801c180:	431a      	orrs	r2, r3
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	685a      	ldr	r2, [r3, #4]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	6859      	ldr	r1, [r3, #4]
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	691b      	ldr	r3, [r3, #16]
 801c1a0:	021a      	lsls	r2, r3, #8
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	430a      	orrs	r2, r1
 801c1a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	685a      	ldr	r2, [r3, #4]
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801c1b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	6859      	ldr	r1, [r3, #4]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	689a      	ldr	r2, [r3, #8]
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	430a      	orrs	r2, r1
 801c1ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	689a      	ldr	r2, [r3, #8]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c1da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	6899      	ldr	r1, [r3, #8]
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	68da      	ldr	r2, [r3, #12]
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	430a      	orrs	r2, r1
 801c1ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1f2:	4a58      	ldr	r2, [pc, #352]	; (801c354 <ADC_Init+0x1f4>)
 801c1f4:	4293      	cmp	r3, r2
 801c1f6:	d022      	beq.n	801c23e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	689a      	ldr	r2, [r3, #8]
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	6899      	ldr	r1, [r3, #8]
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	430a      	orrs	r2, r1
 801c218:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	689a      	ldr	r2, [r3, #8]
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	6899      	ldr	r1, [r3, #8]
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	430a      	orrs	r2, r1
 801c23a:	609a      	str	r2, [r3, #8]
 801c23c:	e00f      	b.n	801c25e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	689a      	ldr	r2, [r3, #8]
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c24c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	689a      	ldr	r2, [r3, #8]
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c25c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	689a      	ldr	r2, [r3, #8]
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	f022 0202 	bic.w	r2, r2, #2
 801c26c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	6899      	ldr	r1, [r3, #8]
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	7e1b      	ldrb	r3, [r3, #24]
 801c278:	005a      	lsls	r2, r3, #1
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	430a      	orrs	r2, r1
 801c280:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d01b      	beq.n	801c2c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	685a      	ldr	r2, [r3, #4]
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c29a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	685a      	ldr	r2, [r3, #4]
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801c2aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	6859      	ldr	r1, [r3, #4]
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2b6:	3b01      	subs	r3, #1
 801c2b8:	035a      	lsls	r2, r3, #13
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	430a      	orrs	r2, r1
 801c2c0:	605a      	str	r2, [r3, #4]
 801c2c2:	e007      	b.n	801c2d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	685a      	ldr	r2, [r3, #4]
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c2d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801c2e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	69db      	ldr	r3, [r3, #28]
 801c2ee:	3b01      	subs	r3, #1
 801c2f0:	051a      	lsls	r2, r3, #20
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	430a      	orrs	r2, r1
 801c2f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	689a      	ldr	r2, [r3, #8]
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	6899      	ldr	r1, [r3, #8]
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c316:	025a      	lsls	r2, r3, #9
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	430a      	orrs	r2, r1
 801c31e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	689a      	ldr	r2, [r3, #8]
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c32e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	6899      	ldr	r1, [r3, #8]
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	695b      	ldr	r3, [r3, #20]
 801c33a:	029a      	lsls	r2, r3, #10
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	430a      	orrs	r2, r1
 801c342:	609a      	str	r2, [r3, #8]
}
 801c344:	bf00      	nop
 801c346:	3714      	adds	r7, #20
 801c348:	46bd      	mov	sp, r7
 801c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c34e:	4770      	bx	lr
 801c350:	40012300 	.word	0x40012300
 801c354:	0f000001 	.word	0x0f000001

0801c358 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b084      	sub	sp, #16
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c364:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c36a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d13c      	bne.n	801c3ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	689b      	ldr	r3, [r3, #8]
 801c384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d12b      	bne.n	801c3e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c390:	2b00      	cmp	r3, #0
 801c392:	d127      	bne.n	801c3e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c39a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d006      	beq.n	801c3b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	689b      	ldr	r3, [r3, #8]
 801c3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d119      	bne.n	801c3e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	685a      	ldr	r2, [r3, #4]
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	f022 0220 	bic.w	r2, r2, #32
 801c3be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d105      	bne.n	801c3e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3dc:	f043 0201 	orr.w	r2, r3, #1
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801c3e4:	68f8      	ldr	r0, [r7, #12]
 801c3e6:	f7ff fd6b 	bl	801bec0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801c3ea:	e00e      	b.n	801c40a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3f0:	f003 0310 	and.w	r3, r3, #16
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d003      	beq.n	801c400 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801c3f8:	68f8      	ldr	r0, [r7, #12]
 801c3fa:	f7ff fd75 	bl	801bee8 <HAL_ADC_ErrorCallback>
}
 801c3fe:	e004      	b.n	801c40a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c406:	6878      	ldr	r0, [r7, #4]
 801c408:	4798      	blx	r3
}
 801c40a:	bf00      	nop
 801c40c:	3710      	adds	r7, #16
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}

0801c412 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c412:	b580      	push	{r7, lr}
 801c414:	b084      	sub	sp, #16
 801c416:	af00      	add	r7, sp, #0
 801c418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c41e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801c420:	68f8      	ldr	r0, [r7, #12]
 801c422:	f7ff fd57 	bl	801bed4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c426:	bf00      	nop
 801c428:	3710      	adds	r7, #16
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bd80      	pop	{r7, pc}

0801c42e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801c42e:	b580      	push	{r7, lr}
 801c430:	b084      	sub	sp, #16
 801c432:	af00      	add	r7, sp, #0
 801c434:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c43a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	2240      	movs	r2, #64	; 0x40
 801c440:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c446:	f043 0204 	orr.w	r2, r3, #4
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801c44e:	68f8      	ldr	r0, [r7, #12]
 801c450:	f7ff fd4a 	bl	801bee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c454:	bf00      	nop
 801c456:	3710      	adds	r7, #16
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd80      	pop	{r7, pc}

0801c45c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c45c:	b480      	push	{r7}
 801c45e:	b085      	sub	sp, #20
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	f003 0307 	and.w	r3, r3, #7
 801c46a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c46c:	4b0c      	ldr	r3, [pc, #48]	; (801c4a0 <__NVIC_SetPriorityGrouping+0x44>)
 801c46e:	68db      	ldr	r3, [r3, #12]
 801c470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c472:	68ba      	ldr	r2, [r7, #8]
 801c474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801c478:	4013      	ands	r3, r2
 801c47a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801c488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c48c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801c48e:	4a04      	ldr	r2, [pc, #16]	; (801c4a0 <__NVIC_SetPriorityGrouping+0x44>)
 801c490:	68bb      	ldr	r3, [r7, #8]
 801c492:	60d3      	str	r3, [r2, #12]
}
 801c494:	bf00      	nop
 801c496:	3714      	adds	r7, #20
 801c498:	46bd      	mov	sp, r7
 801c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c49e:	4770      	bx	lr
 801c4a0:	e000ed00 	.word	0xe000ed00

0801c4a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801c4a4:	b480      	push	{r7}
 801c4a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c4a8:	4b04      	ldr	r3, [pc, #16]	; (801c4bc <__NVIC_GetPriorityGrouping+0x18>)
 801c4aa:	68db      	ldr	r3, [r3, #12]
 801c4ac:	0a1b      	lsrs	r3, r3, #8
 801c4ae:	f003 0307 	and.w	r3, r3, #7
}
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ba:	4770      	bx	lr
 801c4bc:	e000ed00 	.word	0xe000ed00

0801c4c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c4c0:	b480      	push	{r7}
 801c4c2:	b083      	sub	sp, #12
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	db0b      	blt.n	801c4ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c4d2:	79fb      	ldrb	r3, [r7, #7]
 801c4d4:	f003 021f 	and.w	r2, r3, #31
 801c4d8:	4907      	ldr	r1, [pc, #28]	; (801c4f8 <__NVIC_EnableIRQ+0x38>)
 801c4da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c4de:	095b      	lsrs	r3, r3, #5
 801c4e0:	2001      	movs	r0, #1
 801c4e2:	fa00 f202 	lsl.w	r2, r0, r2
 801c4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801c4ea:	bf00      	nop
 801c4ec:	370c      	adds	r7, #12
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f4:	4770      	bx	lr
 801c4f6:	bf00      	nop
 801c4f8:	e000e100 	.word	0xe000e100

0801c4fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c4fc:	b480      	push	{r7}
 801c4fe:	b083      	sub	sp, #12
 801c500:	af00      	add	r7, sp, #0
 801c502:	4603      	mov	r3, r0
 801c504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	db12      	blt.n	801c534 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c50e:	79fb      	ldrb	r3, [r7, #7]
 801c510:	f003 021f 	and.w	r2, r3, #31
 801c514:	490a      	ldr	r1, [pc, #40]	; (801c540 <__NVIC_DisableIRQ+0x44>)
 801c516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c51a:	095b      	lsrs	r3, r3, #5
 801c51c:	2001      	movs	r0, #1
 801c51e:	fa00 f202 	lsl.w	r2, r0, r2
 801c522:	3320      	adds	r3, #32
 801c524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801c528:	f3bf 8f4f 	dsb	sy
}
 801c52c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801c52e:	f3bf 8f6f 	isb	sy
}
 801c532:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801c534:	bf00      	nop
 801c536:	370c      	adds	r7, #12
 801c538:	46bd      	mov	sp, r7
 801c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c53e:	4770      	bx	lr
 801c540:	e000e100 	.word	0xe000e100

0801c544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801c544:	b480      	push	{r7}
 801c546:	b083      	sub	sp, #12
 801c548:	af00      	add	r7, sp, #0
 801c54a:	4603      	mov	r3, r0
 801c54c:	6039      	str	r1, [r7, #0]
 801c54e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c554:	2b00      	cmp	r3, #0
 801c556:	db0a      	blt.n	801c56e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c558:	683b      	ldr	r3, [r7, #0]
 801c55a:	b2da      	uxtb	r2, r3
 801c55c:	490c      	ldr	r1, [pc, #48]	; (801c590 <__NVIC_SetPriority+0x4c>)
 801c55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c562:	0112      	lsls	r2, r2, #4
 801c564:	b2d2      	uxtb	r2, r2
 801c566:	440b      	add	r3, r1
 801c568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801c56c:	e00a      	b.n	801c584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	b2da      	uxtb	r2, r3
 801c572:	4908      	ldr	r1, [pc, #32]	; (801c594 <__NVIC_SetPriority+0x50>)
 801c574:	79fb      	ldrb	r3, [r7, #7]
 801c576:	f003 030f 	and.w	r3, r3, #15
 801c57a:	3b04      	subs	r3, #4
 801c57c:	0112      	lsls	r2, r2, #4
 801c57e:	b2d2      	uxtb	r2, r2
 801c580:	440b      	add	r3, r1
 801c582:	761a      	strb	r2, [r3, #24]
}
 801c584:	bf00      	nop
 801c586:	370c      	adds	r7, #12
 801c588:	46bd      	mov	sp, r7
 801c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c58e:	4770      	bx	lr
 801c590:	e000e100 	.word	0xe000e100
 801c594:	e000ed00 	.word	0xe000ed00

0801c598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c598:	b480      	push	{r7}
 801c59a:	b089      	sub	sp, #36	; 0x24
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	60f8      	str	r0, [r7, #12]
 801c5a0:	60b9      	str	r1, [r7, #8]
 801c5a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	f003 0307 	and.w	r3, r3, #7
 801c5aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c5ac:	69fb      	ldr	r3, [r7, #28]
 801c5ae:	f1c3 0307 	rsb	r3, r3, #7
 801c5b2:	2b04      	cmp	r3, #4
 801c5b4:	bf28      	it	cs
 801c5b6:	2304      	movcs	r3, #4
 801c5b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c5ba:	69fb      	ldr	r3, [r7, #28]
 801c5bc:	3304      	adds	r3, #4
 801c5be:	2b06      	cmp	r3, #6
 801c5c0:	d902      	bls.n	801c5c8 <NVIC_EncodePriority+0x30>
 801c5c2:	69fb      	ldr	r3, [r7, #28]
 801c5c4:	3b03      	subs	r3, #3
 801c5c6:	e000      	b.n	801c5ca <NVIC_EncodePriority+0x32>
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c5cc:	f04f 32ff 	mov.w	r2, #4294967295
 801c5d0:	69bb      	ldr	r3, [r7, #24]
 801c5d2:	fa02 f303 	lsl.w	r3, r2, r3
 801c5d6:	43da      	mvns	r2, r3
 801c5d8:	68bb      	ldr	r3, [r7, #8]
 801c5da:	401a      	ands	r2, r3
 801c5dc:	697b      	ldr	r3, [r7, #20]
 801c5de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c5e0:	f04f 31ff 	mov.w	r1, #4294967295
 801c5e4:	697b      	ldr	r3, [r7, #20]
 801c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 801c5ea:	43d9      	mvns	r1, r3
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c5f0:	4313      	orrs	r3, r2
         );
}
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	3724      	adds	r7, #36	; 0x24
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5fc:	4770      	bx	lr
	...

0801c600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b082      	sub	sp, #8
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	3b01      	subs	r3, #1
 801c60c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c610:	d301      	bcc.n	801c616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c612:	2301      	movs	r3, #1
 801c614:	e00f      	b.n	801c636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c616:	4a0a      	ldr	r2, [pc, #40]	; (801c640 <SysTick_Config+0x40>)
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	3b01      	subs	r3, #1
 801c61c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c61e:	210f      	movs	r1, #15
 801c620:	f04f 30ff 	mov.w	r0, #4294967295
 801c624:	f7ff ff8e 	bl	801c544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c628:	4b05      	ldr	r3, [pc, #20]	; (801c640 <SysTick_Config+0x40>)
 801c62a:	2200      	movs	r2, #0
 801c62c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c62e:	4b04      	ldr	r3, [pc, #16]	; (801c640 <SysTick_Config+0x40>)
 801c630:	2207      	movs	r2, #7
 801c632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c634:	2300      	movs	r3, #0
}
 801c636:	4618      	mov	r0, r3
 801c638:	3708      	adds	r7, #8
 801c63a:	46bd      	mov	sp, r7
 801c63c:	bd80      	pop	{r7, pc}
 801c63e:	bf00      	nop
 801c640:	e000e010 	.word	0xe000e010

0801c644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c644:	b580      	push	{r7, lr}
 801c646:	b082      	sub	sp, #8
 801c648:	af00      	add	r7, sp, #0
 801c64a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c64c:	6878      	ldr	r0, [r7, #4]
 801c64e:	f7ff ff05 	bl	801c45c <__NVIC_SetPriorityGrouping>
}
 801c652:	bf00      	nop
 801c654:	3708      	adds	r7, #8
 801c656:	46bd      	mov	sp, r7
 801c658:	bd80      	pop	{r7, pc}

0801c65a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c65a:	b580      	push	{r7, lr}
 801c65c:	b086      	sub	sp, #24
 801c65e:	af00      	add	r7, sp, #0
 801c660:	4603      	mov	r3, r0
 801c662:	60b9      	str	r1, [r7, #8]
 801c664:	607a      	str	r2, [r7, #4]
 801c666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801c668:	2300      	movs	r3, #0
 801c66a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801c66c:	f7ff ff1a 	bl	801c4a4 <__NVIC_GetPriorityGrouping>
 801c670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801c672:	687a      	ldr	r2, [r7, #4]
 801c674:	68b9      	ldr	r1, [r7, #8]
 801c676:	6978      	ldr	r0, [r7, #20]
 801c678:	f7ff ff8e 	bl	801c598 <NVIC_EncodePriority>
 801c67c:	4602      	mov	r2, r0
 801c67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c682:	4611      	mov	r1, r2
 801c684:	4618      	mov	r0, r3
 801c686:	f7ff ff5d 	bl	801c544 <__NVIC_SetPriority>
}
 801c68a:	bf00      	nop
 801c68c:	3718      	adds	r7, #24
 801c68e:	46bd      	mov	sp, r7
 801c690:	bd80      	pop	{r7, pc}

0801c692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c692:	b580      	push	{r7, lr}
 801c694:	b082      	sub	sp, #8
 801c696:	af00      	add	r7, sp, #0
 801c698:	4603      	mov	r3, r0
 801c69a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801c69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	f7ff ff0d 	bl	801c4c0 <__NVIC_EnableIRQ>
}
 801c6a6:	bf00      	nop
 801c6a8:	3708      	adds	r7, #8
 801c6aa:	46bd      	mov	sp, r7
 801c6ac:	bd80      	pop	{r7, pc}

0801c6ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c6ae:	b580      	push	{r7, lr}
 801c6b0:	b082      	sub	sp, #8
 801c6b2:	af00      	add	r7, sp, #0
 801c6b4:	4603      	mov	r3, r0
 801c6b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801c6b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7ff ff1d 	bl	801c4fc <__NVIC_DisableIRQ>
}
 801c6c2:	bf00      	nop
 801c6c4:	3708      	adds	r7, #8
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	bd80      	pop	{r7, pc}

0801c6ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801c6ca:	b580      	push	{r7, lr}
 801c6cc:	b082      	sub	sp, #8
 801c6ce:	af00      	add	r7, sp, #0
 801c6d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	f7ff ff94 	bl	801c600 <SysTick_Config>
 801c6d8:	4603      	mov	r3, r0
}
 801c6da:	4618      	mov	r0, r3
 801c6dc:	3708      	adds	r7, #8
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
	...

0801c6e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b086      	sub	sp, #24
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801c6f0:	f7ff faa6 	bl	801bc40 <HAL_GetTick>
 801c6f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d101      	bne.n	801c700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801c6fc:	2301      	movs	r3, #1
 801c6fe:	e099      	b.n	801c834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	2202      	movs	r2, #2
 801c704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	2200      	movs	r2, #0
 801c70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	681a      	ldr	r2, [r3, #0]
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	f022 0201 	bic.w	r2, r2, #1
 801c71e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c720:	e00f      	b.n	801c742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c722:	f7ff fa8d 	bl	801bc40 <HAL_GetTick>
 801c726:	4602      	mov	r2, r0
 801c728:	693b      	ldr	r3, [r7, #16]
 801c72a:	1ad3      	subs	r3, r2, r3
 801c72c:	2b05      	cmp	r3, #5
 801c72e:	d908      	bls.n	801c742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2220      	movs	r2, #32
 801c734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	2203      	movs	r2, #3
 801c73a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801c73e:	2303      	movs	r3, #3
 801c740:	e078      	b.n	801c834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f003 0301 	and.w	r3, r3, #1
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d1e8      	bne.n	801c722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c758:	697a      	ldr	r2, [r7, #20]
 801c75a:	4b38      	ldr	r3, [pc, #224]	; (801c83c <HAL_DMA_Init+0x158>)
 801c75c:	4013      	ands	r3, r2
 801c75e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	685a      	ldr	r2, [r3, #4]
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	689b      	ldr	r3, [r3, #8]
 801c768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c76e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	691b      	ldr	r3, [r3, #16]
 801c774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c77a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	699b      	ldr	r3, [r3, #24]
 801c780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	6a1b      	ldr	r3, [r3, #32]
 801c78c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c78e:	697a      	ldr	r2, [r7, #20]
 801c790:	4313      	orrs	r3, r2
 801c792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c798:	2b04      	cmp	r3, #4
 801c79a:	d107      	bne.n	801c7ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7a4:	4313      	orrs	r3, r2
 801c7a6:	697a      	ldr	r2, [r7, #20]
 801c7a8:	4313      	orrs	r3, r2
 801c7aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	697a      	ldr	r2, [r7, #20]
 801c7b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	695b      	ldr	r3, [r3, #20]
 801c7ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c7bc:	697b      	ldr	r3, [r7, #20]
 801c7be:	f023 0307 	bic.w	r3, r3, #7
 801c7c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7c8:	697a      	ldr	r2, [r7, #20]
 801c7ca:	4313      	orrs	r3, r2
 801c7cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7d2:	2b04      	cmp	r3, #4
 801c7d4:	d117      	bne.n	801c806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7da:	697a      	ldr	r2, [r7, #20]
 801c7dc:	4313      	orrs	r3, r2
 801c7de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d00e      	beq.n	801c806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c7e8:	6878      	ldr	r0, [r7, #4]
 801c7ea:	f000 fb1b 	bl	801ce24 <DMA_CheckFifoParam>
 801c7ee:	4603      	mov	r3, r0
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d008      	beq.n	801c806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2240      	movs	r2, #64	; 0x40
 801c7f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	2201      	movs	r2, #1
 801c7fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801c802:	2301      	movs	r3, #1
 801c804:	e016      	b.n	801c834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	697a      	ldr	r2, [r7, #20]
 801c80c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c80e:	6878      	ldr	r0, [r7, #4]
 801c810:	f000 fad2 	bl	801cdb8 <DMA_CalcBaseAndBitshift>
 801c814:	4603      	mov	r3, r0
 801c816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c81c:	223f      	movs	r2, #63	; 0x3f
 801c81e:	409a      	lsls	r2, r3
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	2200      	movs	r2, #0
 801c828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	2201      	movs	r2, #1
 801c82e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801c832:	2300      	movs	r3, #0
}
 801c834:	4618      	mov	r0, r3
 801c836:	3718      	adds	r7, #24
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}
 801c83c:	f010803f 	.word	0xf010803f

0801c840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b086      	sub	sp, #24
 801c844:	af00      	add	r7, sp, #0
 801c846:	60f8      	str	r0, [r7, #12]
 801c848:	60b9      	str	r1, [r7, #8]
 801c84a:	607a      	str	r2, [r7, #4]
 801c84c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c84e:	2300      	movs	r3, #0
 801c850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c85e:	2b01      	cmp	r3, #1
 801c860:	d101      	bne.n	801c866 <HAL_DMA_Start_IT+0x26>
 801c862:	2302      	movs	r3, #2
 801c864:	e040      	b.n	801c8e8 <HAL_DMA_Start_IT+0xa8>
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	2201      	movs	r2, #1
 801c86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c874:	b2db      	uxtb	r3, r3
 801c876:	2b01      	cmp	r3, #1
 801c878:	d12f      	bne.n	801c8da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	2202      	movs	r2, #2
 801c87e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	2200      	movs	r2, #0
 801c886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c888:	683b      	ldr	r3, [r7, #0]
 801c88a:	687a      	ldr	r2, [r7, #4]
 801c88c:	68b9      	ldr	r1, [r7, #8]
 801c88e:	68f8      	ldr	r0, [r7, #12]
 801c890:	f000 fa64 	bl	801cd5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c898:	223f      	movs	r2, #63	; 0x3f
 801c89a:	409a      	lsls	r2, r3
 801c89c:	693b      	ldr	r3, [r7, #16]
 801c89e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	681a      	ldr	r2, [r3, #0]
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	f042 0216 	orr.w	r2, r2, #22
 801c8ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d007      	beq.n	801c8c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	681a      	ldr	r2, [r3, #0]
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	f042 0208 	orr.w	r2, r2, #8
 801c8c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	681a      	ldr	r2, [r3, #0]
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	f042 0201 	orr.w	r2, r2, #1
 801c8d6:	601a      	str	r2, [r3, #0]
 801c8d8:	e005      	b.n	801c8e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	2200      	movs	r2, #0
 801c8de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801c8e2:	2302      	movs	r3, #2
 801c8e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801c8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	3718      	adds	r7, #24
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	bd80      	pop	{r7, pc}

0801c8f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b084      	sub	sp, #16
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801c8fe:	f7ff f99f 	bl	801bc40 <HAL_GetTick>
 801c902:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c90a:	b2db      	uxtb	r3, r3
 801c90c:	2b02      	cmp	r3, #2
 801c90e:	d008      	beq.n	801c922 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	2280      	movs	r2, #128	; 0x80
 801c914:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	2200      	movs	r2, #0
 801c91a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801c91e:	2301      	movs	r3, #1
 801c920:	e052      	b.n	801c9c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	681a      	ldr	r2, [r3, #0]
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	f022 0216 	bic.w	r2, r2, #22
 801c930:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	695a      	ldr	r2, [r3, #20]
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c940:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c946:	2b00      	cmp	r3, #0
 801c948:	d103      	bne.n	801c952 <HAL_DMA_Abort+0x62>
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d007      	beq.n	801c962 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	681a      	ldr	r2, [r3, #0]
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	f022 0208 	bic.w	r2, r2, #8
 801c960:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	681a      	ldr	r2, [r3, #0]
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	f022 0201 	bic.w	r2, r2, #1
 801c970:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c972:	e013      	b.n	801c99c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c974:	f7ff f964 	bl	801bc40 <HAL_GetTick>
 801c978:	4602      	mov	r2, r0
 801c97a:	68bb      	ldr	r3, [r7, #8]
 801c97c:	1ad3      	subs	r3, r2, r3
 801c97e:	2b05      	cmp	r3, #5
 801c980:	d90c      	bls.n	801c99c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	2220      	movs	r2, #32
 801c986:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	2203      	movs	r2, #3
 801c98c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	2200      	movs	r2, #0
 801c994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801c998:	2303      	movs	r3, #3
 801c99a:	e015      	b.n	801c9c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	f003 0301 	and.w	r3, r3, #1
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d1e4      	bne.n	801c974 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9ae:	223f      	movs	r2, #63	; 0x3f
 801c9b0:	409a      	lsls	r2, r3
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	2201      	movs	r2, #1
 801c9ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	2200      	movs	r2, #0
 801c9c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801c9c6:	2300      	movs	r3, #0
}
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	3710      	adds	r7, #16
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bd80      	pop	{r7, pc}

0801c9d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801c9d0:	b480      	push	{r7}
 801c9d2:	b083      	sub	sp, #12
 801c9d4:	af00      	add	r7, sp, #0
 801c9d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801c9de:	b2db      	uxtb	r3, r3
 801c9e0:	2b02      	cmp	r3, #2
 801c9e2:	d004      	beq.n	801c9ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	2280      	movs	r2, #128	; 0x80
 801c9e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	e00c      	b.n	801ca08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	2205      	movs	r2, #5
 801c9f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	681a      	ldr	r2, [r3, #0]
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	f022 0201 	bic.w	r2, r2, #1
 801ca04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801ca06:	2300      	movs	r3, #0
}
 801ca08:	4618      	mov	r0, r3
 801ca0a:	370c      	adds	r7, #12
 801ca0c:	46bd      	mov	sp, r7
 801ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca12:	4770      	bx	lr

0801ca14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b086      	sub	sp, #24
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801ca20:	4b8e      	ldr	r3, [pc, #568]	; (801cc5c <HAL_DMA_IRQHandler+0x248>)
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	4a8e      	ldr	r2, [pc, #568]	; (801cc60 <HAL_DMA_IRQHandler+0x24c>)
 801ca26:	fba2 2303 	umull	r2, r3, r2, r3
 801ca2a:	0a9b      	lsrs	r3, r3, #10
 801ca2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801ca34:	693b      	ldr	r3, [r7, #16]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca3e:	2208      	movs	r2, #8
 801ca40:	409a      	lsls	r2, r3
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	4013      	ands	r3, r2
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d01a      	beq.n	801ca80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	f003 0304 	and.w	r3, r3, #4
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d013      	beq.n	801ca80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	681a      	ldr	r2, [r3, #0]
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	f022 0204 	bic.w	r2, r2, #4
 801ca66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca6c:	2208      	movs	r2, #8
 801ca6e:	409a      	lsls	r2, r3
 801ca70:	693b      	ldr	r3, [r7, #16]
 801ca72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca78:	f043 0201 	orr.w	r2, r3, #1
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca84:	2201      	movs	r2, #1
 801ca86:	409a      	lsls	r2, r3
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	4013      	ands	r3, r2
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d012      	beq.n	801cab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	695b      	ldr	r3, [r3, #20]
 801ca96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d00b      	beq.n	801cab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801caa2:	2201      	movs	r2, #1
 801caa4:	409a      	lsls	r2, r3
 801caa6:	693b      	ldr	r3, [r7, #16]
 801caa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801caae:	f043 0202 	orr.w	r2, r3, #2
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801caba:	2204      	movs	r2, #4
 801cabc:	409a      	lsls	r2, r3
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	4013      	ands	r3, r2
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d012      	beq.n	801caec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	f003 0302 	and.w	r3, r3, #2
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d00b      	beq.n	801caec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cad8:	2204      	movs	r2, #4
 801cada:	409a      	lsls	r2, r3
 801cadc:	693b      	ldr	r3, [r7, #16]
 801cade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cae4:	f043 0204 	orr.w	r2, r3, #4
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801caf0:	2210      	movs	r2, #16
 801caf2:	409a      	lsls	r2, r3
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	4013      	ands	r3, r2
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d043      	beq.n	801cb84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	f003 0308 	and.w	r3, r3, #8
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d03c      	beq.n	801cb84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cb0e:	2210      	movs	r2, #16
 801cb10:	409a      	lsls	r2, r3
 801cb12:	693b      	ldr	r3, [r7, #16]
 801cb14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d018      	beq.n	801cb56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d108      	bne.n	801cb44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d024      	beq.n	801cb84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb3e:	6878      	ldr	r0, [r7, #4]
 801cb40:	4798      	blx	r3
 801cb42:	e01f      	b.n	801cb84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d01b      	beq.n	801cb84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb50:	6878      	ldr	r0, [r7, #4]
 801cb52:	4798      	blx	r3
 801cb54:	e016      	b.n	801cb84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d107      	bne.n	801cb74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	681a      	ldr	r2, [r3, #0]
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	f022 0208 	bic.w	r2, r2, #8
 801cb72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d003      	beq.n	801cb84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb80:	6878      	ldr	r0, [r7, #4]
 801cb82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cb88:	2220      	movs	r2, #32
 801cb8a:	409a      	lsls	r2, r3
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	4013      	ands	r3, r2
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	f000 808f 	beq.w	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	f003 0310 	and.w	r3, r3, #16
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	f000 8087 	beq.w	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbaa:	2220      	movs	r2, #32
 801cbac:	409a      	lsls	r2, r3
 801cbae:	693b      	ldr	r3, [r7, #16]
 801cbb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cbb8:	b2db      	uxtb	r3, r3
 801cbba:	2b05      	cmp	r3, #5
 801cbbc:	d136      	bne.n	801cc2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	681a      	ldr	r2, [r3, #0]
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	f022 0216 	bic.w	r2, r2, #22
 801cbcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	695a      	ldr	r2, [r3, #20]
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	681b      	ldr	r3, [r3, #0]
 801cbd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cbdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d103      	bne.n	801cbee <HAL_DMA_IRQHandler+0x1da>
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d007      	beq.n	801cbfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	681a      	ldr	r2, [r3, #0]
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	f022 0208 	bic.w	r2, r2, #8
 801cbfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc02:	223f      	movs	r2, #63	; 0x3f
 801cc04:	409a      	lsls	r2, r3
 801cc06:	693b      	ldr	r3, [r7, #16]
 801cc08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	2201      	movs	r2, #1
 801cc0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	2200      	movs	r2, #0
 801cc16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d07e      	beq.n	801cd20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc26:	6878      	ldr	r0, [r7, #4]
 801cc28:	4798      	blx	r3
        }
        return;
 801cc2a:	e079      	b.n	801cd20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d01d      	beq.n	801cc76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d10d      	bne.n	801cc64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d031      	beq.n	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc54:	6878      	ldr	r0, [r7, #4]
 801cc56:	4798      	blx	r3
 801cc58:	e02c      	b.n	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
 801cc5a:	bf00      	nop
 801cc5c:	20000020 	.word	0x20000020
 801cc60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d023      	beq.n	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc70:	6878      	ldr	r0, [r7, #4]
 801cc72:	4798      	blx	r3
 801cc74:	e01e      	b.n	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d10f      	bne.n	801cca4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	681a      	ldr	r2, [r3, #0]
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f022 0210 	bic.w	r2, r2, #16
 801cc92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	2201      	movs	r2, #1
 801cc98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	2200      	movs	r2, #0
 801cca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d003      	beq.n	801ccb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ccb0:	6878      	ldr	r0, [r7, #4]
 801ccb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d032      	beq.n	801cd22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccc0:	f003 0301 	and.w	r3, r3, #1
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d022      	beq.n	801cd0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	2205      	movs	r2, #5
 801cccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	681a      	ldr	r2, [r3, #0]
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	f022 0201 	bic.w	r2, r2, #1
 801ccde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801cce0:	68bb      	ldr	r3, [r7, #8]
 801cce2:	3301      	adds	r3, #1
 801cce4:	60bb      	str	r3, [r7, #8]
 801cce6:	697a      	ldr	r2, [r7, #20]
 801cce8:	429a      	cmp	r2, r3
 801ccea:	d307      	bcc.n	801ccfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	681b      	ldr	r3, [r3, #0]
 801ccf2:	f003 0301 	and.w	r3, r3, #1
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d1f2      	bne.n	801cce0 <HAL_DMA_IRQHandler+0x2cc>
 801ccfa:	e000      	b.n	801ccfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 801ccfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2201      	movs	r2, #1
 801cd02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	2200      	movs	r2, #0
 801cd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d005      	beq.n	801cd22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd1a:	6878      	ldr	r0, [r7, #4]
 801cd1c:	4798      	blx	r3
 801cd1e:	e000      	b.n	801cd22 <HAL_DMA_IRQHandler+0x30e>
        return;
 801cd20:	bf00      	nop
    }
  }
}
 801cd22:	3718      	adds	r7, #24
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}

0801cd28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801cd28:	b480      	push	{r7}
 801cd2a:	b083      	sub	sp, #12
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cd36:	b2db      	uxtb	r3, r3
}
 801cd38:	4618      	mov	r0, r3
 801cd3a:	370c      	adds	r7, #12
 801cd3c:	46bd      	mov	sp, r7
 801cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd42:	4770      	bx	lr

0801cd44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801cd44:	b480      	push	{r7}
 801cd46:	b083      	sub	sp, #12
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801cd50:	4618      	mov	r0, r3
 801cd52:	370c      	adds	r7, #12
 801cd54:	46bd      	mov	sp, r7
 801cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd5a:	4770      	bx	lr

0801cd5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801cd5c:	b480      	push	{r7}
 801cd5e:	b085      	sub	sp, #20
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	60f8      	str	r0, [r7, #12]
 801cd64:	60b9      	str	r1, [r7, #8]
 801cd66:	607a      	str	r2, [r7, #4]
 801cd68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	681a      	ldr	r2, [r3, #0]
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801cd78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	683a      	ldr	r2, [r7, #0]
 801cd80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	689b      	ldr	r3, [r3, #8]
 801cd86:	2b40      	cmp	r3, #64	; 0x40
 801cd88:	d108      	bne.n	801cd9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	687a      	ldr	r2, [r7, #4]
 801cd90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	68ba      	ldr	r2, [r7, #8]
 801cd98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801cd9a:	e007      	b.n	801cdac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	681b      	ldr	r3, [r3, #0]
 801cda0:	68ba      	ldr	r2, [r7, #8]
 801cda2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	687a      	ldr	r2, [r7, #4]
 801cdaa:	60da      	str	r2, [r3, #12]
}
 801cdac:	bf00      	nop
 801cdae:	3714      	adds	r7, #20
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdb6:	4770      	bx	lr

0801cdb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801cdb8:	b480      	push	{r7}
 801cdba:	b085      	sub	sp, #20
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	b2db      	uxtb	r3, r3
 801cdc6:	3b10      	subs	r3, #16
 801cdc8:	4a14      	ldr	r2, [pc, #80]	; (801ce1c <DMA_CalcBaseAndBitshift+0x64>)
 801cdca:	fba2 2303 	umull	r2, r3, r2, r3
 801cdce:	091b      	lsrs	r3, r3, #4
 801cdd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801cdd2:	4a13      	ldr	r2, [pc, #76]	; (801ce20 <DMA_CalcBaseAndBitshift+0x68>)
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	4413      	add	r3, r2
 801cdd8:	781b      	ldrb	r3, [r3, #0]
 801cdda:	461a      	mov	r2, r3
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	2b03      	cmp	r3, #3
 801cde4:	d909      	bls.n	801cdfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801cdee:	f023 0303 	bic.w	r3, r3, #3
 801cdf2:	1d1a      	adds	r2, r3, #4
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	659a      	str	r2, [r3, #88]	; 0x58
 801cdf8:	e007      	b.n	801ce0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801ce02:	f023 0303 	bic.w	r3, r3, #3
 801ce06:	687a      	ldr	r2, [r7, #4]
 801ce08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801ce0e:	4618      	mov	r0, r3
 801ce10:	3714      	adds	r7, #20
 801ce12:	46bd      	mov	sp, r7
 801ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce18:	4770      	bx	lr
 801ce1a:	bf00      	nop
 801ce1c:	aaaaaaab 	.word	0xaaaaaaab
 801ce20:	080296e4 	.word	0x080296e4

0801ce24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801ce24:	b480      	push	{r7}
 801ce26:	b085      	sub	sp, #20
 801ce28:	af00      	add	r7, sp, #0
 801ce2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ce2c:	2300      	movs	r3, #0
 801ce2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	699b      	ldr	r3, [r3, #24]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d11f      	bne.n	801ce7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801ce3e:	68bb      	ldr	r3, [r7, #8]
 801ce40:	2b03      	cmp	r3, #3
 801ce42:	d856      	bhi.n	801cef2 <DMA_CheckFifoParam+0xce>
 801ce44:	a201      	add	r2, pc, #4	; (adr r2, 801ce4c <DMA_CheckFifoParam+0x28>)
 801ce46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce4a:	bf00      	nop
 801ce4c:	0801ce5d 	.word	0x0801ce5d
 801ce50:	0801ce6f 	.word	0x0801ce6f
 801ce54:	0801ce5d 	.word	0x0801ce5d
 801ce58:	0801cef3 	.word	0x0801cef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d046      	beq.n	801cef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801ce68:	2301      	movs	r3, #1
 801ce6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801ce6c:	e043      	b.n	801cef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801ce76:	d140      	bne.n	801cefa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801ce78:	2301      	movs	r3, #1
 801ce7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801ce7c:	e03d      	b.n	801cefa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	699b      	ldr	r3, [r3, #24]
 801ce82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ce86:	d121      	bne.n	801cecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801ce88:	68bb      	ldr	r3, [r7, #8]
 801ce8a:	2b03      	cmp	r3, #3
 801ce8c:	d837      	bhi.n	801cefe <DMA_CheckFifoParam+0xda>
 801ce8e:	a201      	add	r2, pc, #4	; (adr r2, 801ce94 <DMA_CheckFifoParam+0x70>)
 801ce90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce94:	0801cea5 	.word	0x0801cea5
 801ce98:	0801ceab 	.word	0x0801ceab
 801ce9c:	0801cea5 	.word	0x0801cea5
 801cea0:	0801cebd 	.word	0x0801cebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801cea4:	2301      	movs	r3, #1
 801cea6:	73fb      	strb	r3, [r7, #15]
      break;
 801cea8:	e030      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ceae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d025      	beq.n	801cf02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801ceb6:	2301      	movs	r3, #1
 801ceb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801ceba:	e022      	b.n	801cf02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801cec4:	d11f      	bne.n	801cf06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801cec6:	2301      	movs	r3, #1
 801cec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801ceca:	e01c      	b.n	801cf06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801cecc:	68bb      	ldr	r3, [r7, #8]
 801cece:	2b02      	cmp	r3, #2
 801ced0:	d903      	bls.n	801ceda <DMA_CheckFifoParam+0xb6>
 801ced2:	68bb      	ldr	r3, [r7, #8]
 801ced4:	2b03      	cmp	r3, #3
 801ced6:	d003      	beq.n	801cee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801ced8:	e018      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801ceda:	2301      	movs	r3, #1
 801cedc:	73fb      	strb	r3, [r7, #15]
      break;
 801cede:	e015      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d00e      	beq.n	801cf0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801ceec:	2301      	movs	r3, #1
 801ceee:	73fb      	strb	r3, [r7, #15]
      break;
 801cef0:	e00b      	b.n	801cf0a <DMA_CheckFifoParam+0xe6>
      break;
 801cef2:	bf00      	nop
 801cef4:	e00a      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      break;
 801cef6:	bf00      	nop
 801cef8:	e008      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      break;
 801cefa:	bf00      	nop
 801cefc:	e006      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      break;
 801cefe:	bf00      	nop
 801cf00:	e004      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      break;
 801cf02:	bf00      	nop
 801cf04:	e002      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      break;   
 801cf06:	bf00      	nop
 801cf08:	e000      	b.n	801cf0c <DMA_CheckFifoParam+0xe8>
      break;
 801cf0a:	bf00      	nop
    }
  } 
  
  return status; 
 801cf0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf0e:	4618      	mov	r0, r3
 801cf10:	3714      	adds	r7, #20
 801cf12:	46bd      	mov	sp, r7
 801cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf18:	4770      	bx	lr
 801cf1a:	bf00      	nop

0801cf1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801cf1c:	b480      	push	{r7}
 801cf1e:	b089      	sub	sp, #36	; 0x24
 801cf20:	af00      	add	r7, sp, #0
 801cf22:	6078      	str	r0, [r7, #4]
 801cf24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801cf26:	2300      	movs	r3, #0
 801cf28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801cf2e:	2300      	movs	r3, #0
 801cf30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801cf32:	2300      	movs	r3, #0
 801cf34:	61fb      	str	r3, [r7, #28]
 801cf36:	e159      	b.n	801d1ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801cf38:	2201      	movs	r2, #1
 801cf3a:	69fb      	ldr	r3, [r7, #28]
 801cf3c:	fa02 f303 	lsl.w	r3, r2, r3
 801cf40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801cf42:	683b      	ldr	r3, [r7, #0]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	697a      	ldr	r2, [r7, #20]
 801cf48:	4013      	ands	r3, r2
 801cf4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801cf4c:	693a      	ldr	r2, [r7, #16]
 801cf4e:	697b      	ldr	r3, [r7, #20]
 801cf50:	429a      	cmp	r2, r3
 801cf52:	f040 8148 	bne.w	801d1e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801cf56:	683b      	ldr	r3, [r7, #0]
 801cf58:	685b      	ldr	r3, [r3, #4]
 801cf5a:	f003 0303 	and.w	r3, r3, #3
 801cf5e:	2b01      	cmp	r3, #1
 801cf60:	d005      	beq.n	801cf6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801cf62:	683b      	ldr	r3, [r7, #0]
 801cf64:	685b      	ldr	r3, [r3, #4]
 801cf66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801cf6a:	2b02      	cmp	r3, #2
 801cf6c:	d130      	bne.n	801cfd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	689b      	ldr	r3, [r3, #8]
 801cf72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801cf74:	69fb      	ldr	r3, [r7, #28]
 801cf76:	005b      	lsls	r3, r3, #1
 801cf78:	2203      	movs	r2, #3
 801cf7a:	fa02 f303 	lsl.w	r3, r2, r3
 801cf7e:	43db      	mvns	r3, r3
 801cf80:	69ba      	ldr	r2, [r7, #24]
 801cf82:	4013      	ands	r3, r2
 801cf84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801cf86:	683b      	ldr	r3, [r7, #0]
 801cf88:	68da      	ldr	r2, [r3, #12]
 801cf8a:	69fb      	ldr	r3, [r7, #28]
 801cf8c:	005b      	lsls	r3, r3, #1
 801cf8e:	fa02 f303 	lsl.w	r3, r2, r3
 801cf92:	69ba      	ldr	r2, [r7, #24]
 801cf94:	4313      	orrs	r3, r2
 801cf96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	69ba      	ldr	r2, [r7, #24]
 801cf9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	685b      	ldr	r3, [r3, #4]
 801cfa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801cfa4:	2201      	movs	r2, #1
 801cfa6:	69fb      	ldr	r3, [r7, #28]
 801cfa8:	fa02 f303 	lsl.w	r3, r2, r3
 801cfac:	43db      	mvns	r3, r3
 801cfae:	69ba      	ldr	r2, [r7, #24]
 801cfb0:	4013      	ands	r3, r2
 801cfb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801cfb4:	683b      	ldr	r3, [r7, #0]
 801cfb6:	685b      	ldr	r3, [r3, #4]
 801cfb8:	091b      	lsrs	r3, r3, #4
 801cfba:	f003 0201 	and.w	r2, r3, #1
 801cfbe:	69fb      	ldr	r3, [r7, #28]
 801cfc0:	fa02 f303 	lsl.w	r3, r2, r3
 801cfc4:	69ba      	ldr	r2, [r7, #24]
 801cfc6:	4313      	orrs	r3, r2
 801cfc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	69ba      	ldr	r2, [r7, #24]
 801cfce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801cfd0:	683b      	ldr	r3, [r7, #0]
 801cfd2:	685b      	ldr	r3, [r3, #4]
 801cfd4:	f003 0303 	and.w	r3, r3, #3
 801cfd8:	2b03      	cmp	r3, #3
 801cfda:	d017      	beq.n	801d00c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	68db      	ldr	r3, [r3, #12]
 801cfe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801cfe2:	69fb      	ldr	r3, [r7, #28]
 801cfe4:	005b      	lsls	r3, r3, #1
 801cfe6:	2203      	movs	r2, #3
 801cfe8:	fa02 f303 	lsl.w	r3, r2, r3
 801cfec:	43db      	mvns	r3, r3
 801cfee:	69ba      	ldr	r2, [r7, #24]
 801cff0:	4013      	ands	r3, r2
 801cff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801cff4:	683b      	ldr	r3, [r7, #0]
 801cff6:	689a      	ldr	r2, [r3, #8]
 801cff8:	69fb      	ldr	r3, [r7, #28]
 801cffa:	005b      	lsls	r3, r3, #1
 801cffc:	fa02 f303 	lsl.w	r3, r2, r3
 801d000:	69ba      	ldr	r2, [r7, #24]
 801d002:	4313      	orrs	r3, r2
 801d004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	69ba      	ldr	r2, [r7, #24]
 801d00a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d00c:	683b      	ldr	r3, [r7, #0]
 801d00e:	685b      	ldr	r3, [r3, #4]
 801d010:	f003 0303 	and.w	r3, r3, #3
 801d014:	2b02      	cmp	r3, #2
 801d016:	d123      	bne.n	801d060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801d018:	69fb      	ldr	r3, [r7, #28]
 801d01a:	08da      	lsrs	r2, r3, #3
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	3208      	adds	r2, #8
 801d020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d026:	69fb      	ldr	r3, [r7, #28]
 801d028:	f003 0307 	and.w	r3, r3, #7
 801d02c:	009b      	lsls	r3, r3, #2
 801d02e:	220f      	movs	r2, #15
 801d030:	fa02 f303 	lsl.w	r3, r2, r3
 801d034:	43db      	mvns	r3, r3
 801d036:	69ba      	ldr	r2, [r7, #24]
 801d038:	4013      	ands	r3, r2
 801d03a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801d03c:	683b      	ldr	r3, [r7, #0]
 801d03e:	691a      	ldr	r2, [r3, #16]
 801d040:	69fb      	ldr	r3, [r7, #28]
 801d042:	f003 0307 	and.w	r3, r3, #7
 801d046:	009b      	lsls	r3, r3, #2
 801d048:	fa02 f303 	lsl.w	r3, r2, r3
 801d04c:	69ba      	ldr	r2, [r7, #24]
 801d04e:	4313      	orrs	r3, r2
 801d050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801d052:	69fb      	ldr	r3, [r7, #28]
 801d054:	08da      	lsrs	r2, r3, #3
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	3208      	adds	r2, #8
 801d05a:	69b9      	ldr	r1, [r7, #24]
 801d05c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	005b      	lsls	r3, r3, #1
 801d06a:	2203      	movs	r2, #3
 801d06c:	fa02 f303 	lsl.w	r3, r2, r3
 801d070:	43db      	mvns	r3, r3
 801d072:	69ba      	ldr	r2, [r7, #24]
 801d074:	4013      	ands	r3, r2
 801d076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801d078:	683b      	ldr	r3, [r7, #0]
 801d07a:	685b      	ldr	r3, [r3, #4]
 801d07c:	f003 0203 	and.w	r2, r3, #3
 801d080:	69fb      	ldr	r3, [r7, #28]
 801d082:	005b      	lsls	r3, r3, #1
 801d084:	fa02 f303 	lsl.w	r3, r2, r3
 801d088:	69ba      	ldr	r2, [r7, #24]
 801d08a:	4313      	orrs	r3, r2
 801d08c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	69ba      	ldr	r2, [r7, #24]
 801d092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801d094:	683b      	ldr	r3, [r7, #0]
 801d096:	685b      	ldr	r3, [r3, #4]
 801d098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	f000 80a2 	beq.w	801d1e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	60fb      	str	r3, [r7, #12]
 801d0a6:	4b57      	ldr	r3, [pc, #348]	; (801d204 <HAL_GPIO_Init+0x2e8>)
 801d0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0aa:	4a56      	ldr	r2, [pc, #344]	; (801d204 <HAL_GPIO_Init+0x2e8>)
 801d0ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d0b0:	6453      	str	r3, [r2, #68]	; 0x44
 801d0b2:	4b54      	ldr	r3, [pc, #336]	; (801d204 <HAL_GPIO_Init+0x2e8>)
 801d0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d0ba:	60fb      	str	r3, [r7, #12]
 801d0bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801d0be:	4a52      	ldr	r2, [pc, #328]	; (801d208 <HAL_GPIO_Init+0x2ec>)
 801d0c0:	69fb      	ldr	r3, [r7, #28]
 801d0c2:	089b      	lsrs	r3, r3, #2
 801d0c4:	3302      	adds	r3, #2
 801d0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801d0cc:	69fb      	ldr	r3, [r7, #28]
 801d0ce:	f003 0303 	and.w	r3, r3, #3
 801d0d2:	009b      	lsls	r3, r3, #2
 801d0d4:	220f      	movs	r2, #15
 801d0d6:	fa02 f303 	lsl.w	r3, r2, r3
 801d0da:	43db      	mvns	r3, r3
 801d0dc:	69ba      	ldr	r2, [r7, #24]
 801d0de:	4013      	ands	r3, r2
 801d0e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	4a49      	ldr	r2, [pc, #292]	; (801d20c <HAL_GPIO_Init+0x2f0>)
 801d0e6:	4293      	cmp	r3, r2
 801d0e8:	d019      	beq.n	801d11e <HAL_GPIO_Init+0x202>
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	4a48      	ldr	r2, [pc, #288]	; (801d210 <HAL_GPIO_Init+0x2f4>)
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	d013      	beq.n	801d11a <HAL_GPIO_Init+0x1fe>
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	4a47      	ldr	r2, [pc, #284]	; (801d214 <HAL_GPIO_Init+0x2f8>)
 801d0f6:	4293      	cmp	r3, r2
 801d0f8:	d00d      	beq.n	801d116 <HAL_GPIO_Init+0x1fa>
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	4a46      	ldr	r2, [pc, #280]	; (801d218 <HAL_GPIO_Init+0x2fc>)
 801d0fe:	4293      	cmp	r3, r2
 801d100:	d007      	beq.n	801d112 <HAL_GPIO_Init+0x1f6>
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	4a45      	ldr	r2, [pc, #276]	; (801d21c <HAL_GPIO_Init+0x300>)
 801d106:	4293      	cmp	r3, r2
 801d108:	d101      	bne.n	801d10e <HAL_GPIO_Init+0x1f2>
 801d10a:	2304      	movs	r3, #4
 801d10c:	e008      	b.n	801d120 <HAL_GPIO_Init+0x204>
 801d10e:	2307      	movs	r3, #7
 801d110:	e006      	b.n	801d120 <HAL_GPIO_Init+0x204>
 801d112:	2303      	movs	r3, #3
 801d114:	e004      	b.n	801d120 <HAL_GPIO_Init+0x204>
 801d116:	2302      	movs	r3, #2
 801d118:	e002      	b.n	801d120 <HAL_GPIO_Init+0x204>
 801d11a:	2301      	movs	r3, #1
 801d11c:	e000      	b.n	801d120 <HAL_GPIO_Init+0x204>
 801d11e:	2300      	movs	r3, #0
 801d120:	69fa      	ldr	r2, [r7, #28]
 801d122:	f002 0203 	and.w	r2, r2, #3
 801d126:	0092      	lsls	r2, r2, #2
 801d128:	4093      	lsls	r3, r2
 801d12a:	69ba      	ldr	r2, [r7, #24]
 801d12c:	4313      	orrs	r3, r2
 801d12e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801d130:	4935      	ldr	r1, [pc, #212]	; (801d208 <HAL_GPIO_Init+0x2ec>)
 801d132:	69fb      	ldr	r3, [r7, #28]
 801d134:	089b      	lsrs	r3, r3, #2
 801d136:	3302      	adds	r3, #2
 801d138:	69ba      	ldr	r2, [r7, #24]
 801d13a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801d13e:	4b38      	ldr	r3, [pc, #224]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d140:	689b      	ldr	r3, [r3, #8]
 801d142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d144:	693b      	ldr	r3, [r7, #16]
 801d146:	43db      	mvns	r3, r3
 801d148:	69ba      	ldr	r2, [r7, #24]
 801d14a:	4013      	ands	r3, r2
 801d14c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	685b      	ldr	r3, [r3, #4]
 801d152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d156:	2b00      	cmp	r3, #0
 801d158:	d003      	beq.n	801d162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801d15a:	69ba      	ldr	r2, [r7, #24]
 801d15c:	693b      	ldr	r3, [r7, #16]
 801d15e:	4313      	orrs	r3, r2
 801d160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801d162:	4a2f      	ldr	r2, [pc, #188]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d164:	69bb      	ldr	r3, [r7, #24]
 801d166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801d168:	4b2d      	ldr	r3, [pc, #180]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d16a:	68db      	ldr	r3, [r3, #12]
 801d16c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d16e:	693b      	ldr	r3, [r7, #16]
 801d170:	43db      	mvns	r3, r3
 801d172:	69ba      	ldr	r2, [r7, #24]
 801d174:	4013      	ands	r3, r2
 801d176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801d178:	683b      	ldr	r3, [r7, #0]
 801d17a:	685b      	ldr	r3, [r3, #4]
 801d17c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d180:	2b00      	cmp	r3, #0
 801d182:	d003      	beq.n	801d18c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801d184:	69ba      	ldr	r2, [r7, #24]
 801d186:	693b      	ldr	r3, [r7, #16]
 801d188:	4313      	orrs	r3, r2
 801d18a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801d18c:	4a24      	ldr	r2, [pc, #144]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d18e:	69bb      	ldr	r3, [r7, #24]
 801d190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801d192:	4b23      	ldr	r3, [pc, #140]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d194:	685b      	ldr	r3, [r3, #4]
 801d196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d198:	693b      	ldr	r3, [r7, #16]
 801d19a:	43db      	mvns	r3, r3
 801d19c:	69ba      	ldr	r2, [r7, #24]
 801d19e:	4013      	ands	r3, r2
 801d1a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	685b      	ldr	r3, [r3, #4]
 801d1a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d003      	beq.n	801d1b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801d1ae:	69ba      	ldr	r2, [r7, #24]
 801d1b0:	693b      	ldr	r3, [r7, #16]
 801d1b2:	4313      	orrs	r3, r2
 801d1b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801d1b6:	4a1a      	ldr	r2, [pc, #104]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d1b8:	69bb      	ldr	r3, [r7, #24]
 801d1ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801d1bc:	4b18      	ldr	r3, [pc, #96]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d1c2:	693b      	ldr	r3, [r7, #16]
 801d1c4:	43db      	mvns	r3, r3
 801d1c6:	69ba      	ldr	r2, [r7, #24]
 801d1c8:	4013      	ands	r3, r2
 801d1ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801d1cc:	683b      	ldr	r3, [r7, #0]
 801d1ce:	685b      	ldr	r3, [r3, #4]
 801d1d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d003      	beq.n	801d1e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801d1d8:	69ba      	ldr	r2, [r7, #24]
 801d1da:	693b      	ldr	r3, [r7, #16]
 801d1dc:	4313      	orrs	r3, r2
 801d1de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801d1e0:	4a0f      	ldr	r2, [pc, #60]	; (801d220 <HAL_GPIO_Init+0x304>)
 801d1e2:	69bb      	ldr	r3, [r7, #24]
 801d1e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d1e6:	69fb      	ldr	r3, [r7, #28]
 801d1e8:	3301      	adds	r3, #1
 801d1ea:	61fb      	str	r3, [r7, #28]
 801d1ec:	69fb      	ldr	r3, [r7, #28]
 801d1ee:	2b0f      	cmp	r3, #15
 801d1f0:	f67f aea2 	bls.w	801cf38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801d1f4:	bf00      	nop
 801d1f6:	bf00      	nop
 801d1f8:	3724      	adds	r7, #36	; 0x24
 801d1fa:	46bd      	mov	sp, r7
 801d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d200:	4770      	bx	lr
 801d202:	bf00      	nop
 801d204:	40023800 	.word	0x40023800
 801d208:	40013800 	.word	0x40013800
 801d20c:	40020000 	.word	0x40020000
 801d210:	40020400 	.word	0x40020400
 801d214:	40020800 	.word	0x40020800
 801d218:	40020c00 	.word	0x40020c00
 801d21c:	40021000 	.word	0x40021000
 801d220:	40013c00 	.word	0x40013c00

0801d224 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801d224:	b480      	push	{r7}
 801d226:	b087      	sub	sp, #28
 801d228:	af00      	add	r7, sp, #0
 801d22a:	6078      	str	r0, [r7, #4]
 801d22c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d22e:	2300      	movs	r3, #0
 801d230:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801d232:	2300      	movs	r3, #0
 801d234:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801d236:	2300      	movs	r3, #0
 801d238:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d23a:	2300      	movs	r3, #0
 801d23c:	617b      	str	r3, [r7, #20]
 801d23e:	e0bb      	b.n	801d3b8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d240:	2201      	movs	r2, #1
 801d242:	697b      	ldr	r3, [r7, #20]
 801d244:	fa02 f303 	lsl.w	r3, r2, r3
 801d248:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801d24a:	683a      	ldr	r2, [r7, #0]
 801d24c:	693b      	ldr	r3, [r7, #16]
 801d24e:	4013      	ands	r3, r2
 801d250:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801d252:	68fa      	ldr	r2, [r7, #12]
 801d254:	693b      	ldr	r3, [r7, #16]
 801d256:	429a      	cmp	r2, r3
 801d258:	f040 80ab 	bne.w	801d3b2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801d25c:	4a5c      	ldr	r2, [pc, #368]	; (801d3d0 <HAL_GPIO_DeInit+0x1ac>)
 801d25e:	697b      	ldr	r3, [r7, #20]
 801d260:	089b      	lsrs	r3, r3, #2
 801d262:	3302      	adds	r3, #2
 801d264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d268:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801d26a:	697b      	ldr	r3, [r7, #20]
 801d26c:	f003 0303 	and.w	r3, r3, #3
 801d270:	009b      	lsls	r3, r3, #2
 801d272:	220f      	movs	r2, #15
 801d274:	fa02 f303 	lsl.w	r3, r2, r3
 801d278:	68ba      	ldr	r2, [r7, #8]
 801d27a:	4013      	ands	r3, r2
 801d27c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	4a54      	ldr	r2, [pc, #336]	; (801d3d4 <HAL_GPIO_DeInit+0x1b0>)
 801d282:	4293      	cmp	r3, r2
 801d284:	d019      	beq.n	801d2ba <HAL_GPIO_DeInit+0x96>
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	4a53      	ldr	r2, [pc, #332]	; (801d3d8 <HAL_GPIO_DeInit+0x1b4>)
 801d28a:	4293      	cmp	r3, r2
 801d28c:	d013      	beq.n	801d2b6 <HAL_GPIO_DeInit+0x92>
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	4a52      	ldr	r2, [pc, #328]	; (801d3dc <HAL_GPIO_DeInit+0x1b8>)
 801d292:	4293      	cmp	r3, r2
 801d294:	d00d      	beq.n	801d2b2 <HAL_GPIO_DeInit+0x8e>
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	4a51      	ldr	r2, [pc, #324]	; (801d3e0 <HAL_GPIO_DeInit+0x1bc>)
 801d29a:	4293      	cmp	r3, r2
 801d29c:	d007      	beq.n	801d2ae <HAL_GPIO_DeInit+0x8a>
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	4a50      	ldr	r2, [pc, #320]	; (801d3e4 <HAL_GPIO_DeInit+0x1c0>)
 801d2a2:	4293      	cmp	r3, r2
 801d2a4:	d101      	bne.n	801d2aa <HAL_GPIO_DeInit+0x86>
 801d2a6:	2304      	movs	r3, #4
 801d2a8:	e008      	b.n	801d2bc <HAL_GPIO_DeInit+0x98>
 801d2aa:	2307      	movs	r3, #7
 801d2ac:	e006      	b.n	801d2bc <HAL_GPIO_DeInit+0x98>
 801d2ae:	2303      	movs	r3, #3
 801d2b0:	e004      	b.n	801d2bc <HAL_GPIO_DeInit+0x98>
 801d2b2:	2302      	movs	r3, #2
 801d2b4:	e002      	b.n	801d2bc <HAL_GPIO_DeInit+0x98>
 801d2b6:	2301      	movs	r3, #1
 801d2b8:	e000      	b.n	801d2bc <HAL_GPIO_DeInit+0x98>
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	697a      	ldr	r2, [r7, #20]
 801d2be:	f002 0203 	and.w	r2, r2, #3
 801d2c2:	0092      	lsls	r2, r2, #2
 801d2c4:	4093      	lsls	r3, r2
 801d2c6:	68ba      	ldr	r2, [r7, #8]
 801d2c8:	429a      	cmp	r2, r3
 801d2ca:	d132      	bne.n	801d332 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801d2cc:	4b46      	ldr	r3, [pc, #280]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2ce:	681a      	ldr	r2, [r3, #0]
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	43db      	mvns	r3, r3
 801d2d4:	4944      	ldr	r1, [pc, #272]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2d6:	4013      	ands	r3, r2
 801d2d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801d2da:	4b43      	ldr	r3, [pc, #268]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2dc:	685a      	ldr	r2, [r3, #4]
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	43db      	mvns	r3, r3
 801d2e2:	4941      	ldr	r1, [pc, #260]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2e4:	4013      	ands	r3, r2
 801d2e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801d2e8:	4b3f      	ldr	r3, [pc, #252]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2ea:	68da      	ldr	r2, [r3, #12]
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	43db      	mvns	r3, r3
 801d2f0:	493d      	ldr	r1, [pc, #244]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2f2:	4013      	ands	r3, r2
 801d2f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801d2f6:	4b3c      	ldr	r3, [pc, #240]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d2f8:	689a      	ldr	r2, [r3, #8]
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	43db      	mvns	r3, r3
 801d2fe:	493a      	ldr	r1, [pc, #232]	; (801d3e8 <HAL_GPIO_DeInit+0x1c4>)
 801d300:	4013      	ands	r3, r2
 801d302:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801d304:	697b      	ldr	r3, [r7, #20]
 801d306:	f003 0303 	and.w	r3, r3, #3
 801d30a:	009b      	lsls	r3, r3, #2
 801d30c:	220f      	movs	r2, #15
 801d30e:	fa02 f303 	lsl.w	r3, r2, r3
 801d312:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801d314:	4a2e      	ldr	r2, [pc, #184]	; (801d3d0 <HAL_GPIO_DeInit+0x1ac>)
 801d316:	697b      	ldr	r3, [r7, #20]
 801d318:	089b      	lsrs	r3, r3, #2
 801d31a:	3302      	adds	r3, #2
 801d31c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d320:	68bb      	ldr	r3, [r7, #8]
 801d322:	43da      	mvns	r2, r3
 801d324:	482a      	ldr	r0, [pc, #168]	; (801d3d0 <HAL_GPIO_DeInit+0x1ac>)
 801d326:	697b      	ldr	r3, [r7, #20]
 801d328:	089b      	lsrs	r3, r3, #2
 801d32a:	400a      	ands	r2, r1
 801d32c:	3302      	adds	r3, #2
 801d32e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	681a      	ldr	r2, [r3, #0]
 801d336:	697b      	ldr	r3, [r7, #20]
 801d338:	005b      	lsls	r3, r3, #1
 801d33a:	2103      	movs	r1, #3
 801d33c:	fa01 f303 	lsl.w	r3, r1, r3
 801d340:	43db      	mvns	r3, r3
 801d342:	401a      	ands	r2, r3
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	08da      	lsrs	r2, r3, #3
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	3208      	adds	r2, #8
 801d350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d354:	697b      	ldr	r3, [r7, #20]
 801d356:	f003 0307 	and.w	r3, r3, #7
 801d35a:	009b      	lsls	r3, r3, #2
 801d35c:	220f      	movs	r2, #15
 801d35e:	fa02 f303 	lsl.w	r3, r2, r3
 801d362:	43db      	mvns	r3, r3
 801d364:	697a      	ldr	r2, [r7, #20]
 801d366:	08d2      	lsrs	r2, r2, #3
 801d368:	4019      	ands	r1, r3
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	3208      	adds	r2, #8
 801d36e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	68da      	ldr	r2, [r3, #12]
 801d376:	697b      	ldr	r3, [r7, #20]
 801d378:	005b      	lsls	r3, r3, #1
 801d37a:	2103      	movs	r1, #3
 801d37c:	fa01 f303 	lsl.w	r3, r1, r3
 801d380:	43db      	mvns	r3, r3
 801d382:	401a      	ands	r2, r3
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	685a      	ldr	r2, [r3, #4]
 801d38c:	2101      	movs	r1, #1
 801d38e:	697b      	ldr	r3, [r7, #20]
 801d390:	fa01 f303 	lsl.w	r3, r1, r3
 801d394:	43db      	mvns	r3, r3
 801d396:	401a      	ands	r2, r3
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	689a      	ldr	r2, [r3, #8]
 801d3a0:	697b      	ldr	r3, [r7, #20]
 801d3a2:	005b      	lsls	r3, r3, #1
 801d3a4:	2103      	movs	r1, #3
 801d3a6:	fa01 f303 	lsl.w	r3, r1, r3
 801d3aa:	43db      	mvns	r3, r3
 801d3ac:	401a      	ands	r2, r3
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d3b2:	697b      	ldr	r3, [r7, #20]
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	617b      	str	r3, [r7, #20]
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	2b0f      	cmp	r3, #15
 801d3bc:	f67f af40 	bls.w	801d240 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801d3c0:	bf00      	nop
 801d3c2:	bf00      	nop
 801d3c4:	371c      	adds	r7, #28
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3cc:	4770      	bx	lr
 801d3ce:	bf00      	nop
 801d3d0:	40013800 	.word	0x40013800
 801d3d4:	40020000 	.word	0x40020000
 801d3d8:	40020400 	.word	0x40020400
 801d3dc:	40020800 	.word	0x40020800
 801d3e0:	40020c00 	.word	0x40020c00
 801d3e4:	40021000 	.word	0x40021000
 801d3e8:	40013c00 	.word	0x40013c00

0801d3ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801d3ec:	b480      	push	{r7}
 801d3ee:	b083      	sub	sp, #12
 801d3f0:	af00      	add	r7, sp, #0
 801d3f2:	6078      	str	r0, [r7, #4]
 801d3f4:	460b      	mov	r3, r1
 801d3f6:	807b      	strh	r3, [r7, #2]
 801d3f8:	4613      	mov	r3, r2
 801d3fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801d3fc:	787b      	ldrb	r3, [r7, #1]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d003      	beq.n	801d40a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801d402:	887a      	ldrh	r2, [r7, #2]
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801d408:	e003      	b.n	801d412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801d40a:	887b      	ldrh	r3, [r7, #2]
 801d40c:	041a      	lsls	r2, r3, #16
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	619a      	str	r2, [r3, #24]
}
 801d412:	bf00      	nop
 801d414:	370c      	adds	r7, #12
 801d416:	46bd      	mov	sp, r7
 801d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d41c:	4770      	bx	lr
	...

0801d420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b082      	sub	sp, #8
 801d424:	af00      	add	r7, sp, #0
 801d426:	4603      	mov	r3, r0
 801d428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801d42a:	4b08      	ldr	r3, [pc, #32]	; (801d44c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d42c:	695a      	ldr	r2, [r3, #20]
 801d42e:	88fb      	ldrh	r3, [r7, #6]
 801d430:	4013      	ands	r3, r2
 801d432:	2b00      	cmp	r3, #0
 801d434:	d006      	beq.n	801d444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801d436:	4a05      	ldr	r2, [pc, #20]	; (801d44c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d438:	88fb      	ldrh	r3, [r7, #6]
 801d43a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801d43c:	88fb      	ldrh	r3, [r7, #6]
 801d43e:	4618      	mov	r0, r3
 801d440:	f7e4 fcc8 	bl	8001dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 801d444:	bf00      	nop
 801d446:	3708      	adds	r7, #8
 801d448:	46bd      	mov	sp, r7
 801d44a:	bd80      	pop	{r7, pc}
 801d44c:	40013c00 	.word	0x40013c00

0801d450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801d450:	b580      	push	{r7, lr}
 801d452:	b084      	sub	sp, #16
 801d454:	af00      	add	r7, sp, #0
 801d456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d101      	bne.n	801d462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801d45e:	2301      	movs	r3, #1
 801d460:	e12b      	b.n	801d6ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d468:	b2db      	uxtb	r3, r3
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d106      	bne.n	801d47c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	2200      	movs	r2, #0
 801d472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801d476:	6878      	ldr	r0, [r7, #4]
 801d478:	f7e5 ffb2 	bl	80033e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	2224      	movs	r2, #36	; 0x24
 801d480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	681a      	ldr	r2, [r3, #0]
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	f022 0201 	bic.w	r2, r2, #1
 801d492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	681a      	ldr	r2, [r3, #0]
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d4a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	681a      	ldr	r2, [r3, #0]
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d4b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801d4b4:	f003 fb62 	bl	8020b7c <HAL_RCC_GetPCLK1Freq>
 801d4b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	685b      	ldr	r3, [r3, #4]
 801d4be:	4a81      	ldr	r2, [pc, #516]	; (801d6c4 <HAL_I2C_Init+0x274>)
 801d4c0:	4293      	cmp	r3, r2
 801d4c2:	d807      	bhi.n	801d4d4 <HAL_I2C_Init+0x84>
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	4a80      	ldr	r2, [pc, #512]	; (801d6c8 <HAL_I2C_Init+0x278>)
 801d4c8:	4293      	cmp	r3, r2
 801d4ca:	bf94      	ite	ls
 801d4cc:	2301      	movls	r3, #1
 801d4ce:	2300      	movhi	r3, #0
 801d4d0:	b2db      	uxtb	r3, r3
 801d4d2:	e006      	b.n	801d4e2 <HAL_I2C_Init+0x92>
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	4a7d      	ldr	r2, [pc, #500]	; (801d6cc <HAL_I2C_Init+0x27c>)
 801d4d8:	4293      	cmp	r3, r2
 801d4da:	bf94      	ite	ls
 801d4dc:	2301      	movls	r3, #1
 801d4de:	2300      	movhi	r3, #0
 801d4e0:	b2db      	uxtb	r3, r3
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d001      	beq.n	801d4ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801d4e6:	2301      	movs	r3, #1
 801d4e8:	e0e7      	b.n	801d6ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	4a78      	ldr	r2, [pc, #480]	; (801d6d0 <HAL_I2C_Init+0x280>)
 801d4ee:	fba2 2303 	umull	r2, r3, r2, r3
 801d4f2:	0c9b      	lsrs	r3, r3, #18
 801d4f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	685b      	ldr	r3, [r3, #4]
 801d4fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	68ba      	ldr	r2, [r7, #8]
 801d506:	430a      	orrs	r2, r1
 801d508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	6a1b      	ldr	r3, [r3, #32]
 801d510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	685b      	ldr	r3, [r3, #4]
 801d518:	4a6a      	ldr	r2, [pc, #424]	; (801d6c4 <HAL_I2C_Init+0x274>)
 801d51a:	4293      	cmp	r3, r2
 801d51c:	d802      	bhi.n	801d524 <HAL_I2C_Init+0xd4>
 801d51e:	68bb      	ldr	r3, [r7, #8]
 801d520:	3301      	adds	r3, #1
 801d522:	e009      	b.n	801d538 <HAL_I2C_Init+0xe8>
 801d524:	68bb      	ldr	r3, [r7, #8]
 801d526:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801d52a:	fb02 f303 	mul.w	r3, r2, r3
 801d52e:	4a69      	ldr	r2, [pc, #420]	; (801d6d4 <HAL_I2C_Init+0x284>)
 801d530:	fba2 2303 	umull	r2, r3, r2, r3
 801d534:	099b      	lsrs	r3, r3, #6
 801d536:	3301      	adds	r3, #1
 801d538:	687a      	ldr	r2, [r7, #4]
 801d53a:	6812      	ldr	r2, [r2, #0]
 801d53c:	430b      	orrs	r3, r1
 801d53e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	69db      	ldr	r3, [r3, #28]
 801d546:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801d54a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	685b      	ldr	r3, [r3, #4]
 801d552:	495c      	ldr	r1, [pc, #368]	; (801d6c4 <HAL_I2C_Init+0x274>)
 801d554:	428b      	cmp	r3, r1
 801d556:	d819      	bhi.n	801d58c <HAL_I2C_Init+0x13c>
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	1e59      	subs	r1, r3, #1
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	685b      	ldr	r3, [r3, #4]
 801d560:	005b      	lsls	r3, r3, #1
 801d562:	fbb1 f3f3 	udiv	r3, r1, r3
 801d566:	1c59      	adds	r1, r3, #1
 801d568:	f640 73fc 	movw	r3, #4092	; 0xffc
 801d56c:	400b      	ands	r3, r1
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d00a      	beq.n	801d588 <HAL_I2C_Init+0x138>
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	1e59      	subs	r1, r3, #1
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	685b      	ldr	r3, [r3, #4]
 801d57a:	005b      	lsls	r3, r3, #1
 801d57c:	fbb1 f3f3 	udiv	r3, r1, r3
 801d580:	3301      	adds	r3, #1
 801d582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d586:	e051      	b.n	801d62c <HAL_I2C_Init+0x1dc>
 801d588:	2304      	movs	r3, #4
 801d58a:	e04f      	b.n	801d62c <HAL_I2C_Init+0x1dc>
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	689b      	ldr	r3, [r3, #8]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d111      	bne.n	801d5b8 <HAL_I2C_Init+0x168>
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	1e58      	subs	r0, r3, #1
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	6859      	ldr	r1, [r3, #4]
 801d59c:	460b      	mov	r3, r1
 801d59e:	005b      	lsls	r3, r3, #1
 801d5a0:	440b      	add	r3, r1
 801d5a2:	fbb0 f3f3 	udiv	r3, r0, r3
 801d5a6:	3301      	adds	r3, #1
 801d5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	bf0c      	ite	eq
 801d5b0:	2301      	moveq	r3, #1
 801d5b2:	2300      	movne	r3, #0
 801d5b4:	b2db      	uxtb	r3, r3
 801d5b6:	e012      	b.n	801d5de <HAL_I2C_Init+0x18e>
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	1e58      	subs	r0, r3, #1
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	6859      	ldr	r1, [r3, #4]
 801d5c0:	460b      	mov	r3, r1
 801d5c2:	009b      	lsls	r3, r3, #2
 801d5c4:	440b      	add	r3, r1
 801d5c6:	0099      	lsls	r1, r3, #2
 801d5c8:	440b      	add	r3, r1
 801d5ca:	fbb0 f3f3 	udiv	r3, r0, r3
 801d5ce:	3301      	adds	r3, #1
 801d5d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	bf0c      	ite	eq
 801d5d8:	2301      	moveq	r3, #1
 801d5da:	2300      	movne	r3, #0
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d001      	beq.n	801d5e6 <HAL_I2C_Init+0x196>
 801d5e2:	2301      	movs	r3, #1
 801d5e4:	e022      	b.n	801d62c <HAL_I2C_Init+0x1dc>
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	689b      	ldr	r3, [r3, #8]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d10e      	bne.n	801d60c <HAL_I2C_Init+0x1bc>
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	1e58      	subs	r0, r3, #1
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	6859      	ldr	r1, [r3, #4]
 801d5f6:	460b      	mov	r3, r1
 801d5f8:	005b      	lsls	r3, r3, #1
 801d5fa:	440b      	add	r3, r1
 801d5fc:	fbb0 f3f3 	udiv	r3, r0, r3
 801d600:	3301      	adds	r3, #1
 801d602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d60a:	e00f      	b.n	801d62c <HAL_I2C_Init+0x1dc>
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	1e58      	subs	r0, r3, #1
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	6859      	ldr	r1, [r3, #4]
 801d614:	460b      	mov	r3, r1
 801d616:	009b      	lsls	r3, r3, #2
 801d618:	440b      	add	r3, r1
 801d61a:	0099      	lsls	r1, r3, #2
 801d61c:	440b      	add	r3, r1
 801d61e:	fbb0 f3f3 	udiv	r3, r0, r3
 801d622:	3301      	adds	r3, #1
 801d624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801d62c:	6879      	ldr	r1, [r7, #4]
 801d62e:	6809      	ldr	r1, [r1, #0]
 801d630:	4313      	orrs	r3, r2
 801d632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	69da      	ldr	r2, [r3, #28]
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	6a1b      	ldr	r3, [r3, #32]
 801d646:	431a      	orrs	r2, r3
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	430a      	orrs	r2, r1
 801d64e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	689b      	ldr	r3, [r3, #8]
 801d656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801d65a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d65e:	687a      	ldr	r2, [r7, #4]
 801d660:	6911      	ldr	r1, [r2, #16]
 801d662:	687a      	ldr	r2, [r7, #4]
 801d664:	68d2      	ldr	r2, [r2, #12]
 801d666:	4311      	orrs	r1, r2
 801d668:	687a      	ldr	r2, [r7, #4]
 801d66a:	6812      	ldr	r2, [r2, #0]
 801d66c:	430b      	orrs	r3, r1
 801d66e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	681b      	ldr	r3, [r3, #0]
 801d674:	68db      	ldr	r3, [r3, #12]
 801d676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	695a      	ldr	r2, [r3, #20]
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	699b      	ldr	r3, [r3, #24]
 801d682:	431a      	orrs	r2, r3
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	430a      	orrs	r2, r1
 801d68a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	681a      	ldr	r2, [r3, #0]
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	f042 0201 	orr.w	r2, r2, #1
 801d69a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	2200      	movs	r2, #0
 801d6a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	2220      	movs	r2, #32
 801d6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	2200      	movs	r2, #0
 801d6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801d6b8:	2300      	movs	r3, #0
}
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	3710      	adds	r7, #16
 801d6be:	46bd      	mov	sp, r7
 801d6c0:	bd80      	pop	{r7, pc}
 801d6c2:	bf00      	nop
 801d6c4:	000186a0 	.word	0x000186a0
 801d6c8:	001e847f 	.word	0x001e847f
 801d6cc:	003d08ff 	.word	0x003d08ff
 801d6d0:	431bde83 	.word	0x431bde83
 801d6d4:	10624dd3 	.word	0x10624dd3

0801d6d8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d6d8:	b580      	push	{r7, lr}
 801d6da:	b086      	sub	sp, #24
 801d6dc:	af00      	add	r7, sp, #0
 801d6de:	60f8      	str	r0, [r7, #12]
 801d6e0:	607a      	str	r2, [r7, #4]
 801d6e2:	461a      	mov	r2, r3
 801d6e4:	460b      	mov	r3, r1
 801d6e6:	817b      	strh	r3, [r7, #10]
 801d6e8:	4613      	mov	r3, r2
 801d6ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d6f6:	b2db      	uxtb	r3, r3
 801d6f8:	2b20      	cmp	r3, #32
 801d6fa:	f040 810d 	bne.w	801d918 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d6fe:	4b89      	ldr	r3, [pc, #548]	; (801d924 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	08db      	lsrs	r3, r3, #3
 801d704:	4a88      	ldr	r2, [pc, #544]	; (801d928 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801d706:	fba2 2303 	umull	r2, r3, r2, r3
 801d70a:	0a1a      	lsrs	r2, r3, #8
 801d70c:	4613      	mov	r3, r2
 801d70e:	009b      	lsls	r3, r3, #2
 801d710:	4413      	add	r3, r2
 801d712:	009a      	lsls	r2, r3, #2
 801d714:	4413      	add	r3, r2
 801d716:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d718:	693b      	ldr	r3, [r7, #16]
 801d71a:	3b01      	subs	r3, #1
 801d71c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d71e:	693b      	ldr	r3, [r7, #16]
 801d720:	2b00      	cmp	r3, #0
 801d722:	d116      	bne.n	801d752 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	2200      	movs	r2, #0
 801d728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	2220      	movs	r2, #32
 801d72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	2200      	movs	r2, #0
 801d736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d73e:	f043 0220 	orr.w	r2, r3, #32
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	2200      	movs	r2, #0
 801d74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d74e:	2301      	movs	r3, #1
 801d750:	e0e3      	b.n	801d91a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	699b      	ldr	r3, [r3, #24]
 801d758:	f003 0302 	and.w	r3, r3, #2
 801d75c:	2b02      	cmp	r3, #2
 801d75e:	d0db      	beq.n	801d718 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d766:	2b01      	cmp	r3, #1
 801d768:	d101      	bne.n	801d76e <HAL_I2C_Master_Transmit_DMA+0x96>
 801d76a:	2302      	movs	r3, #2
 801d76c:	e0d5      	b.n	801d91a <HAL_I2C_Master_Transmit_DMA+0x242>
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	2201      	movs	r2, #1
 801d772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	681b      	ldr	r3, [r3, #0]
 801d77c:	f003 0301 	and.w	r3, r3, #1
 801d780:	2b01      	cmp	r3, #1
 801d782:	d007      	beq.n	801d794 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	681a      	ldr	r2, [r3, #0]
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	f042 0201 	orr.w	r2, r2, #1
 801d792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	681a      	ldr	r2, [r3, #0]
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d7a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d7a4:	68fb      	ldr	r3, [r7, #12]
 801d7a6:	2221      	movs	r2, #33	; 0x21
 801d7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	2210      	movs	r2, #16
 801d7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	2200      	movs	r2, #0
 801d7b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	687a      	ldr	r2, [r7, #4]
 801d7be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	893a      	ldrh	r2, [r7, #8]
 801d7c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d7ca:	b29a      	uxth	r2, r3
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	4a56      	ldr	r2, [pc, #344]	; (801d92c <HAL_I2C_Master_Transmit_DMA+0x254>)
 801d7d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d7d6:	897a      	ldrh	r2, [r7, #10]
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d07b      	beq.n	801d8dc <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d02a      	beq.n	801d842 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7f0:	4a4f      	ldr	r2, [pc, #316]	; (801d930 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801d7f2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7f8:	4a4e      	ldr	r2, [pc, #312]	; (801d934 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801d7fa:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d800:	2200      	movs	r2, #0
 801d802:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d808:	2200      	movs	r2, #0
 801d80a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d810:	2200      	movs	r2, #0
 801d812:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d818:	2200      	movs	r2, #0
 801d81a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d824:	4619      	mov	r1, r3
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	3310      	adds	r3, #16
 801d82c:	461a      	mov	r2, r3
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d832:	f7ff f805 	bl	801c840 <HAL_DMA_Start_IT>
 801d836:	4603      	mov	r3, r0
 801d838:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d83a:	7dfb      	ldrb	r3, [r7, #23]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d139      	bne.n	801d8b4 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801d840:	e013      	b.n	801d86a <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	2220      	movs	r2, #32
 801d846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	2200      	movs	r2, #0
 801d84e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d856:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	2200      	movs	r2, #0
 801d862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801d866:	2301      	movs	r3, #1
 801d868:	e057      	b.n	801d91a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	2200      	movs	r2, #0
 801d86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	685a      	ldr	r2, [r3, #4]
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801d880:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	685a      	ldr	r2, [r3, #4]
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d890:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	681a      	ldr	r2, [r3, #0]
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d8a0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	681a      	ldr	r2, [r3, #0]
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d8b0:	601a      	str	r2, [r3, #0]
 801d8b2:	e02f      	b.n	801d914 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	2220      	movs	r2, #32
 801d8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	2200      	movs	r2, #0
 801d8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8c8:	f043 0210 	orr.w	r2, r3, #16
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d8d8:	2301      	movs	r3, #1
 801d8da:	e01e      	b.n	801d91a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	681a      	ldr	r2, [r3, #0]
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d8ea:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	681a      	ldr	r2, [r3, #0]
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d8fa:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	2200      	movs	r2, #0
 801d900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	685a      	ldr	r2, [r3, #4]
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801d912:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801d914:	2300      	movs	r3, #0
 801d916:	e000      	b.n	801d91a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801d918:	2302      	movs	r3, #2
  }
}
 801d91a:	4618      	mov	r0, r3
 801d91c:	3718      	adds	r7, #24
 801d91e:	46bd      	mov	sp, r7
 801d920:	bd80      	pop	{r7, pc}
 801d922:	bf00      	nop
 801d924:	20000020 	.word	0x20000020
 801d928:	14f8b589 	.word	0x14f8b589
 801d92c:	ffff0000 	.word	0xffff0000
 801d930:	0801fc01 	.word	0x0801fc01
 801d934:	0801fdab 	.word	0x0801fdab

0801d938 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b086      	sub	sp, #24
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	60f8      	str	r0, [r7, #12]
 801d940:	607a      	str	r2, [r7, #4]
 801d942:	461a      	mov	r2, r3
 801d944:	460b      	mov	r3, r1
 801d946:	817b      	strh	r3, [r7, #10]
 801d948:	4613      	mov	r3, r2
 801d94a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d94c:	2300      	movs	r3, #0
 801d94e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d956:	b2db      	uxtb	r3, r3
 801d958:	2b20      	cmp	r3, #32
 801d95a:	f040 810d 	bne.w	801db78 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d95e:	4b89      	ldr	r3, [pc, #548]	; (801db84 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	08db      	lsrs	r3, r3, #3
 801d964:	4a88      	ldr	r2, [pc, #544]	; (801db88 <HAL_I2C_Master_Receive_DMA+0x250>)
 801d966:	fba2 2303 	umull	r2, r3, r2, r3
 801d96a:	0a1a      	lsrs	r2, r3, #8
 801d96c:	4613      	mov	r3, r2
 801d96e:	009b      	lsls	r3, r3, #2
 801d970:	4413      	add	r3, r2
 801d972:	009a      	lsls	r2, r3, #2
 801d974:	4413      	add	r3, r2
 801d976:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d978:	693b      	ldr	r3, [r7, #16]
 801d97a:	3b01      	subs	r3, #1
 801d97c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d97e:	693b      	ldr	r3, [r7, #16]
 801d980:	2b00      	cmp	r3, #0
 801d982:	d116      	bne.n	801d9b2 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	2200      	movs	r2, #0
 801d988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	2220      	movs	r2, #32
 801d98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	2200      	movs	r2, #0
 801d996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d99e:	f043 0220 	orr.w	r2, r3, #32
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	e0e3      	b.n	801db7a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	699b      	ldr	r3, [r3, #24]
 801d9b8:	f003 0302 	and.w	r3, r3, #2
 801d9bc:	2b02      	cmp	r3, #2
 801d9be:	d0db      	beq.n	801d978 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d9c6:	2b01      	cmp	r3, #1
 801d9c8:	d101      	bne.n	801d9ce <HAL_I2C_Master_Receive_DMA+0x96>
 801d9ca:	2302      	movs	r3, #2
 801d9cc:	e0d5      	b.n	801db7a <HAL_I2C_Master_Receive_DMA+0x242>
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	2201      	movs	r2, #1
 801d9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	f003 0301 	and.w	r3, r3, #1
 801d9e0:	2b01      	cmp	r3, #1
 801d9e2:	d007      	beq.n	801d9f4 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	681a      	ldr	r2, [r3, #0]
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	f042 0201 	orr.w	r2, r2, #1
 801d9f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	681a      	ldr	r2, [r3, #0]
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801da02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	2222      	movs	r2, #34	; 0x22
 801da08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	2210      	movs	r2, #16
 801da10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	2200      	movs	r2, #0
 801da18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	687a      	ldr	r2, [r7, #4]
 801da1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	893a      	ldrh	r2, [r7, #8]
 801da24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801da2a:	b29a      	uxth	r2, r3
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	4a56      	ldr	r2, [pc, #344]	; (801db8c <HAL_I2C_Master_Receive_DMA+0x254>)
 801da34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801da36:	897a      	ldrh	r2, [r7, #10]
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da40:	2b00      	cmp	r3, #0
 801da42:	d07b      	beq.n	801db3c <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d02a      	beq.n	801daa2 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da50:	4a4f      	ldr	r2, [pc, #316]	; (801db90 <HAL_I2C_Master_Receive_DMA+0x258>)
 801da52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da58:	4a4e      	ldr	r2, [pc, #312]	; (801db94 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801da5a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da60:	2200      	movs	r2, #0
 801da62:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da68:	2200      	movs	r2, #0
 801da6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da70:	2200      	movs	r2, #0
 801da72:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da78:	2200      	movs	r2, #0
 801da7a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	3310      	adds	r3, #16
 801da86:	4619      	mov	r1, r3
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da8c:	461a      	mov	r2, r3
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da92:	f7fe fed5 	bl	801c840 <HAL_DMA_Start_IT>
 801da96:	4603      	mov	r3, r0
 801da98:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801da9a:	7dfb      	ldrb	r3, [r7, #23]
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	d139      	bne.n	801db14 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801daa0:	e013      	b.n	801daca <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	2220      	movs	r2, #32
 801daa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	2200      	movs	r2, #0
 801daae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dab6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	2200      	movs	r2, #0
 801dac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801dac6:	2301      	movs	r3, #1
 801dac8:	e057      	b.n	801db7a <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	681a      	ldr	r2, [r3, #0]
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dad8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	681a      	ldr	r2, [r3, #0]
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dae8:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	2200      	movs	r2, #0
 801daee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	685a      	ldr	r2, [r3, #4]
 801daf8:	68fb      	ldr	r3, [r7, #12]
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801db00:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	685a      	ldr	r2, [r3, #4]
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801db10:	605a      	str	r2, [r3, #4]
 801db12:	e02f      	b.n	801db74 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	2220      	movs	r2, #32
 801db18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	2200      	movs	r2, #0
 801db20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db28:	f043 0210 	orr.w	r2, r3, #16
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	2200      	movs	r2, #0
 801db34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801db38:	2301      	movs	r3, #1
 801db3a:	e01e      	b.n	801db7a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	2200      	movs	r2, #0
 801db40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	685a      	ldr	r2, [r3, #4]
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801db52:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	681a      	ldr	r2, [r3, #0]
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801db62:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	681a      	ldr	r2, [r3, #0]
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801db72:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801db74:	2300      	movs	r3, #0
 801db76:	e000      	b.n	801db7a <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801db78:	2302      	movs	r3, #2
  }
}
 801db7a:	4618      	mov	r0, r3
 801db7c:	3718      	adds	r7, #24
 801db7e:	46bd      	mov	sp, r7
 801db80:	bd80      	pop	{r7, pc}
 801db82:	bf00      	nop
 801db84:	20000020 	.word	0x20000020
 801db88:	14f8b589 	.word	0x14f8b589
 801db8c:	ffff0000 	.word	0xffff0000
 801db90:	0801fc01 	.word	0x0801fc01
 801db94:	0801fdab 	.word	0x0801fdab

0801db98 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801db98:	b580      	push	{r7, lr}
 801db9a:	b08a      	sub	sp, #40	; 0x28
 801db9c:	af02      	add	r7, sp, #8
 801db9e:	60f8      	str	r0, [r7, #12]
 801dba0:	4608      	mov	r0, r1
 801dba2:	4611      	mov	r1, r2
 801dba4:	461a      	mov	r2, r3
 801dba6:	4603      	mov	r3, r0
 801dba8:	817b      	strh	r3, [r7, #10]
 801dbaa:	460b      	mov	r3, r1
 801dbac:	813b      	strh	r3, [r7, #8]
 801dbae:	4613      	mov	r3, r2
 801dbb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801dbb6:	f7fe f843 	bl	801bc40 <HAL_GetTick>
 801dbba:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dbc2:	b2db      	uxtb	r3, r3
 801dbc4:	2b20      	cmp	r3, #32
 801dbc6:	f040 8145 	bne.w	801de54 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801dbca:	4b9d      	ldr	r3, [pc, #628]	; (801de40 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	08db      	lsrs	r3, r3, #3
 801dbd0:	4a9c      	ldr	r2, [pc, #624]	; (801de44 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801dbd2:	fba2 2303 	umull	r2, r3, r2, r3
 801dbd6:	0a1a      	lsrs	r2, r3, #8
 801dbd8:	4613      	mov	r3, r2
 801dbda:	009b      	lsls	r3, r3, #2
 801dbdc:	4413      	add	r3, r2
 801dbde:	009a      	lsls	r2, r3, #2
 801dbe0:	4413      	add	r3, r2
 801dbe2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801dbe4:	697b      	ldr	r3, [r7, #20]
 801dbe6:	3b01      	subs	r3, #1
 801dbe8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801dbea:	697b      	ldr	r3, [r7, #20]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d116      	bne.n	801dc1e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	2200      	movs	r2, #0
 801dbf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	2220      	movs	r2, #32
 801dbfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	2200      	movs	r2, #0
 801dc02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc0a:	f043 0220 	orr.w	r2, r3, #32
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	2200      	movs	r2, #0
 801dc16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dc1a:	2301      	movs	r3, #1
 801dc1c:	e11b      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	699b      	ldr	r3, [r3, #24]
 801dc24:	f003 0302 	and.w	r3, r3, #2
 801dc28:	2b02      	cmp	r3, #2
 801dc2a:	d0db      	beq.n	801dbe4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dc32:	2b01      	cmp	r3, #1
 801dc34:	d101      	bne.n	801dc3a <HAL_I2C_Mem_Write_DMA+0xa2>
 801dc36:	2302      	movs	r3, #2
 801dc38:	e10d      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	2201      	movs	r2, #1
 801dc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	f003 0301 	and.w	r3, r3, #1
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	d007      	beq.n	801dc60 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	681a      	ldr	r2, [r3, #0]
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	f042 0201 	orr.w	r2, r2, #1
 801dc5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	681a      	ldr	r2, [r3, #0]
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dc6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	2221      	movs	r2, #33	; 0x21
 801dc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801dc78:	68fb      	ldr	r3, [r7, #12]
 801dc7a:	2240      	movs	r2, #64	; 0x40
 801dc7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	2200      	movs	r2, #0
 801dc84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dc8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801dc90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dc96:	b29a      	uxth	r2, r3
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	4a6a      	ldr	r2, [pc, #424]	; (801de48 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801dca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801dca2:	897a      	ldrh	r2, [r7, #10]
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801dca8:	893a      	ldrh	r2, [r7, #8]
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801dcae:	88fa      	ldrh	r2, [r7, #6]
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	2200      	movs	r2, #0
 801dcb8:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	f000 80a9 	beq.w	801de16 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d02a      	beq.n	801dd22 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcd0:	4a5e      	ldr	r2, [pc, #376]	; (801de4c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801dcd2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801dcd4:	68fb      	ldr	r3, [r7, #12]
 801dcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcd8:	4a5d      	ldr	r2, [pc, #372]	; (801de50 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801dcda:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dce0:	2200      	movs	r2, #0
 801dce2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dce8:	2200      	movs	r2, #0
 801dcea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcf0:	2200      	movs	r2, #0
 801dcf2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dcf8:	2200      	movs	r2, #0
 801dcfa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd04:	4619      	mov	r1, r3
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	3310      	adds	r3, #16
 801dd0c:	461a      	mov	r2, r3
 801dd0e:	68fb      	ldr	r3, [r7, #12]
 801dd10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dd12:	f7fe fd95 	bl	801c840 <HAL_DMA_Start_IT>
 801dd16:	4603      	mov	r3, r0
 801dd18:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801dd1a:	7efb      	ldrb	r3, [r7, #27]
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d166      	bne.n	801ddee <HAL_I2C_Mem_Write_DMA+0x256>
 801dd20:	e013      	b.n	801dd4a <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	2220      	movs	r2, #32
 801dd26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	2200      	movs	r2, #0
 801dd2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	2200      	movs	r2, #0
 801dd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801dd46:	2301      	movs	r3, #1
 801dd48:	e085      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801dd4a:	88f8      	ldrh	r0, [r7, #6]
 801dd4c:	893a      	ldrh	r2, [r7, #8]
 801dd4e:	8979      	ldrh	r1, [r7, #10]
 801dd50:	69fb      	ldr	r3, [r7, #28]
 801dd52:	9301      	str	r3, [sp, #4]
 801dd54:	2323      	movs	r3, #35	; 0x23
 801dd56:	9300      	str	r3, [sp, #0]
 801dd58:	4603      	mov	r3, r0
 801dd5a:	68f8      	ldr	r0, [r7, #12]
 801dd5c:	f001 fdd2 	bl	801f904 <I2C_RequestMemoryWrite>
 801dd60:	4603      	mov	r3, r0
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d022      	beq.n	801ddac <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	f7fe fe30 	bl	801c9d0 <HAL_DMA_Abort_IT>
 801dd70:	4603      	mov	r3, r0
 801dd72:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd78:	2200      	movs	r2, #0
 801dd7a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	681b      	ldr	r3, [r3, #0]
 801dd80:	681a      	ldr	r2, [r3, #0]
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dd8a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	2200      	movs	r2, #0
 801dd90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	2200      	movs	r2, #0
 801dd96:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	681a      	ldr	r2, [r3, #0]
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	f022 0201 	bic.w	r2, r2, #1
 801dda6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801dda8:	2301      	movs	r3, #1
 801ddaa:	e054      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ddac:	2300      	movs	r3, #0
 801ddae:	613b      	str	r3, [r7, #16]
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	695b      	ldr	r3, [r3, #20]
 801ddb6:	613b      	str	r3, [r7, #16]
 801ddb8:	68fb      	ldr	r3, [r7, #12]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	699b      	ldr	r3, [r3, #24]
 801ddbe:	613b      	str	r3, [r7, #16]
 801ddc0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	2200      	movs	r2, #0
 801ddc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	685a      	ldr	r2, [r3, #4]
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ddd8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	685a      	ldr	r2, [r3, #4]
 801dde0:	68fb      	ldr	r3, [r7, #12]
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dde8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801ddea:	2300      	movs	r3, #0
 801ddec:	e033      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	2220      	movs	r2, #32
 801ddf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de02:	f043 0210 	orr.w	r2, r3, #16
 801de06:	68fb      	ldr	r3, [r7, #12]
 801de08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801de0a:	68fb      	ldr	r3, [r7, #12]
 801de0c:	2200      	movs	r2, #0
 801de0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801de12:	2301      	movs	r3, #1
 801de14:	e01f      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801de16:	68fb      	ldr	r3, [r7, #12]
 801de18:	2220      	movs	r2, #32
 801de1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	2200      	movs	r2, #0
 801de22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	2200      	movs	r2, #0
 801de36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801de3a:	2301      	movs	r3, #1
 801de3c:	e00b      	b.n	801de56 <HAL_I2C_Mem_Write_DMA+0x2be>
 801de3e:	bf00      	nop
 801de40:	20000020 	.word	0x20000020
 801de44:	14f8b589 	.word	0x14f8b589
 801de48:	ffff0000 	.word	0xffff0000
 801de4c:	0801fc01 	.word	0x0801fc01
 801de50:	0801fdab 	.word	0x0801fdab
    }
  }
  else
  {
    return HAL_BUSY;
 801de54:	2302      	movs	r3, #2
  }
}
 801de56:	4618      	mov	r0, r3
 801de58:	3720      	adds	r7, #32
 801de5a:	46bd      	mov	sp, r7
 801de5c:	bd80      	pop	{r7, pc}
 801de5e:	bf00      	nop

0801de60 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801de60:	b580      	push	{r7, lr}
 801de62:	b08c      	sub	sp, #48	; 0x30
 801de64:	af02      	add	r7, sp, #8
 801de66:	60f8      	str	r0, [r7, #12]
 801de68:	4608      	mov	r0, r1
 801de6a:	4611      	mov	r1, r2
 801de6c:	461a      	mov	r2, r3
 801de6e:	4603      	mov	r3, r0
 801de70:	817b      	strh	r3, [r7, #10]
 801de72:	460b      	mov	r3, r1
 801de74:	813b      	strh	r3, [r7, #8]
 801de76:	4613      	mov	r3, r2
 801de78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801de7a:	f7fd fee1 	bl	801bc40 <HAL_GetTick>
 801de7e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801de80:	2300      	movs	r3, #0
 801de82:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de8a:	b2db      	uxtb	r3, r3
 801de8c:	2b20      	cmp	r3, #32
 801de8e:	f040 8176 	bne.w	801e17e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801de92:	4b95      	ldr	r3, [pc, #596]	; (801e0e8 <HAL_I2C_Mem_Read_DMA+0x288>)
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	08db      	lsrs	r3, r3, #3
 801de98:	4a94      	ldr	r2, [pc, #592]	; (801e0ec <HAL_I2C_Mem_Read_DMA+0x28c>)
 801de9a:	fba2 2303 	umull	r2, r3, r2, r3
 801de9e:	0a1a      	lsrs	r2, r3, #8
 801dea0:	4613      	mov	r3, r2
 801dea2:	009b      	lsls	r3, r3, #2
 801dea4:	4413      	add	r3, r2
 801dea6:	009a      	lsls	r2, r3, #2
 801dea8:	4413      	add	r3, r2
 801deaa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801deac:	69fb      	ldr	r3, [r7, #28]
 801deae:	3b01      	subs	r3, #1
 801deb0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801deb2:	69fb      	ldr	r3, [r7, #28]
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d116      	bne.n	801dee6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	2200      	movs	r2, #0
 801debc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	2220      	movs	r2, #32
 801dec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	2200      	movs	r2, #0
 801deca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ded2:	f043 0220 	orr.w	r2, r3, #32
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	2200      	movs	r2, #0
 801dede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dee2:	2301      	movs	r3, #1
 801dee4:	e14c      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	699b      	ldr	r3, [r3, #24]
 801deec:	f003 0302 	and.w	r3, r3, #2
 801def0:	2b02      	cmp	r3, #2
 801def2:	d0db      	beq.n	801deac <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801defa:	2b01      	cmp	r3, #1
 801defc:	d101      	bne.n	801df02 <HAL_I2C_Mem_Read_DMA+0xa2>
 801defe:	2302      	movs	r3, #2
 801df00:	e13e      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	2201      	movs	r2, #1
 801df06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	f003 0301 	and.w	r3, r3, #1
 801df14:	2b01      	cmp	r3, #1
 801df16:	d007      	beq.n	801df28 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	681a      	ldr	r2, [r3, #0]
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	f042 0201 	orr.w	r2, r2, #1
 801df26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	681a      	ldr	r2, [r3, #0]
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801df36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	2222      	movs	r2, #34	; 0x22
 801df3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	2240      	movs	r2, #64	; 0x40
 801df44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	2200      	movs	r2, #0
 801df4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801df58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801df5e:	b29a      	uxth	r2, r3
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	4a62      	ldr	r2, [pc, #392]	; (801e0f0 <HAL_I2C_Mem_Read_DMA+0x290>)
 801df68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801df6a:	897a      	ldrh	r2, [r7, #10]
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801df70:	893a      	ldrh	r2, [r7, #8]
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801df76:	88fa      	ldrh	r2, [r7, #6]
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	2200      	movs	r2, #0
 801df80:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df86:	2b00      	cmp	r3, #0
 801df88:	f000 80cc 	beq.w	801e124 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df90:	2b00      	cmp	r3, #0
 801df92:	d02d      	beq.n	801dff0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df98:	4a56      	ldr	r2, [pc, #344]	; (801e0f4 <HAL_I2C_Mem_Read_DMA+0x294>)
 801df9a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfa0:	4a55      	ldr	r2, [pc, #340]	; (801e0f8 <HAL_I2C_Mem_Read_DMA+0x298>)
 801dfa2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfa8:	2200      	movs	r2, #0
 801dfaa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfb0:	2200      	movs	r2, #0
 801dfb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfb8:	2200      	movs	r2, #0
 801dfba:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801dfc4:	68fb      	ldr	r3, [r7, #12]
 801dfc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	3310      	adds	r3, #16
 801dfce:	4619      	mov	r1, r3
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dfd4:	461a      	mov	r2, r3
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dfda:	f7fe fc31 	bl	801c840 <HAL_DMA_Start_IT>
 801dfde:	4603      	mov	r3, r0
 801dfe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801dfe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	f040 8087 	bne.w	801e0fc <HAL_I2C_Mem_Read_DMA+0x29c>
 801dfee:	e013      	b.n	801e018 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	2220      	movs	r2, #32
 801dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	2200      	movs	r2, #0
 801dffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	2200      	movs	r2, #0
 801e010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e014:	2301      	movs	r3, #1
 801e016:	e0b3      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e018:	88f8      	ldrh	r0, [r7, #6]
 801e01a:	893a      	ldrh	r2, [r7, #8]
 801e01c:	8979      	ldrh	r1, [r7, #10]
 801e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e020:	9301      	str	r3, [sp, #4]
 801e022:	2323      	movs	r3, #35	; 0x23
 801e024:	9300      	str	r3, [sp, #0]
 801e026:	4603      	mov	r3, r0
 801e028:	68f8      	ldr	r0, [r7, #12]
 801e02a:	f001 fd01 	bl	801fa30 <I2C_RequestMemoryRead>
 801e02e:	4603      	mov	r3, r0
 801e030:	2b00      	cmp	r3, #0
 801e032:	d023      	beq.n	801e07c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e038:	4618      	mov	r0, r3
 801e03a:	f7fe fcc9 	bl	801c9d0 <HAL_DMA_Abort_IT>
 801e03e:	4603      	mov	r3, r0
 801e040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e048:	2200      	movs	r2, #0
 801e04a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	681a      	ldr	r2, [r3, #0]
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e05a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	2200      	movs	r2, #0
 801e060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	2200      	movs	r2, #0
 801e066:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	681a      	ldr	r2, [r3, #0]
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	f022 0201 	bic.w	r2, r2, #1
 801e076:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801e078:	2301      	movs	r3, #1
 801e07a:	e081      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801e07c:	68fb      	ldr	r3, [r7, #12]
 801e07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e080:	2b01      	cmp	r3, #1
 801e082:	d108      	bne.n	801e096 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	681a      	ldr	r2, [r3, #0]
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e092:	601a      	str	r2, [r3, #0]
 801e094:	e007      	b.n	801e0a6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	685a      	ldr	r2, [r3, #4]
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e0a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e0a6:	2300      	movs	r3, #0
 801e0a8:	61bb      	str	r3, [r7, #24]
 801e0aa:	68fb      	ldr	r3, [r7, #12]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	695b      	ldr	r3, [r3, #20]
 801e0b0:	61bb      	str	r3, [r7, #24]
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	699b      	ldr	r3, [r3, #24]
 801e0b8:	61bb      	str	r3, [r7, #24]
 801e0ba:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	2200      	movs	r2, #0
 801e0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	685a      	ldr	r2, [r3, #4]
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e0d2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	685a      	ldr	r2, [r3, #4]
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e0e2:	605a      	str	r2, [r3, #4]
 801e0e4:	e049      	b.n	801e17a <HAL_I2C_Mem_Read_DMA+0x31a>
 801e0e6:	bf00      	nop
 801e0e8:	20000020 	.word	0x20000020
 801e0ec:	14f8b589 	.word	0x14f8b589
 801e0f0:	ffff0000 	.word	0xffff0000
 801e0f4:	0801fc01 	.word	0x0801fc01
 801e0f8:	0801fdab 	.word	0x0801fdab
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	2220      	movs	r2, #32
 801e100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	2200      	movs	r2, #0
 801e108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e10c:	68fb      	ldr	r3, [r7, #12]
 801e10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e110:	f043 0210 	orr.w	r2, r3, #16
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	2200      	movs	r2, #0
 801e11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e120:	2301      	movs	r3, #1
 801e122:	e02d      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e124:	88f8      	ldrh	r0, [r7, #6]
 801e126:	893a      	ldrh	r2, [r7, #8]
 801e128:	8979      	ldrh	r1, [r7, #10]
 801e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e12c:	9301      	str	r3, [sp, #4]
 801e12e:	2323      	movs	r3, #35	; 0x23
 801e130:	9300      	str	r3, [sp, #0]
 801e132:	4603      	mov	r3, r0
 801e134:	68f8      	ldr	r0, [r7, #12]
 801e136:	f001 fc7b 	bl	801fa30 <I2C_RequestMemoryRead>
 801e13a:	4603      	mov	r3, r0
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d001      	beq.n	801e144 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801e140:	2301      	movs	r3, #1
 801e142:	e01d      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e144:	2300      	movs	r3, #0
 801e146:	617b      	str	r3, [r7, #20]
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	695b      	ldr	r3, [r3, #20]
 801e14e:	617b      	str	r3, [r7, #20]
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	699b      	ldr	r3, [r3, #24]
 801e156:	617b      	str	r3, [r7, #20]
 801e158:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	681a      	ldr	r2, [r3, #0]
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e168:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	2220      	movs	r2, #32
 801e16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	2200      	movs	r2, #0
 801e176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801e17a:	2300      	movs	r3, #0
 801e17c:	e000      	b.n	801e180 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801e17e:	2302      	movs	r3, #2
  }
}
 801e180:	4618      	mov	r0, r3
 801e182:	3728      	adds	r7, #40	; 0x28
 801e184:	46bd      	mov	sp, r7
 801e186:	bd80      	pop	{r7, pc}

0801e188 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e188:	b580      	push	{r7, lr}
 801e18a:	b088      	sub	sp, #32
 801e18c:	af00      	add	r7, sp, #0
 801e18e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801e190:	2300      	movs	r3, #0
 801e192:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	685b      	ldr	r3, [r3, #4]
 801e19a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e1a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e1b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e1b2:	7bfb      	ldrb	r3, [r7, #15]
 801e1b4:	2b10      	cmp	r3, #16
 801e1b6:	d003      	beq.n	801e1c0 <HAL_I2C_EV_IRQHandler+0x38>
 801e1b8:	7bfb      	ldrb	r3, [r7, #15]
 801e1ba:	2b40      	cmp	r3, #64	; 0x40
 801e1bc:	f040 80c1 	bne.w	801e342 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	699b      	ldr	r3, [r3, #24]
 801e1c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	695b      	ldr	r3, [r3, #20]
 801e1ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801e1d0:	69fb      	ldr	r3, [r7, #28]
 801e1d2:	f003 0301 	and.w	r3, r3, #1
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d10d      	bne.n	801e1f6 <HAL_I2C_EV_IRQHandler+0x6e>
 801e1da:	693b      	ldr	r3, [r7, #16]
 801e1dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801e1e0:	d003      	beq.n	801e1ea <HAL_I2C_EV_IRQHandler+0x62>
 801e1e2:	693b      	ldr	r3, [r7, #16]
 801e1e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801e1e8:	d101      	bne.n	801e1ee <HAL_I2C_EV_IRQHandler+0x66>
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	e000      	b.n	801e1f0 <HAL_I2C_EV_IRQHandler+0x68>
 801e1ee:	2300      	movs	r3, #0
 801e1f0:	2b01      	cmp	r3, #1
 801e1f2:	f000 8132 	beq.w	801e45a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e1f6:	69fb      	ldr	r3, [r7, #28]
 801e1f8:	f003 0301 	and.w	r3, r3, #1
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d00c      	beq.n	801e21a <HAL_I2C_EV_IRQHandler+0x92>
 801e200:	697b      	ldr	r3, [r7, #20]
 801e202:	0a5b      	lsrs	r3, r3, #9
 801e204:	f003 0301 	and.w	r3, r3, #1
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d006      	beq.n	801e21a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801e20c:	6878      	ldr	r0, [r7, #4]
 801e20e:	f002 f82a 	bl	8020266 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801e212:	6878      	ldr	r0, [r7, #4]
 801e214:	f000 fd5b 	bl	801ecce <I2C_Master_SB>
 801e218:	e092      	b.n	801e340 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e21a:	69fb      	ldr	r3, [r7, #28]
 801e21c:	08db      	lsrs	r3, r3, #3
 801e21e:	f003 0301 	and.w	r3, r3, #1
 801e222:	2b00      	cmp	r3, #0
 801e224:	d009      	beq.n	801e23a <HAL_I2C_EV_IRQHandler+0xb2>
 801e226:	697b      	ldr	r3, [r7, #20]
 801e228:	0a5b      	lsrs	r3, r3, #9
 801e22a:	f003 0301 	and.w	r3, r3, #1
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d003      	beq.n	801e23a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801e232:	6878      	ldr	r0, [r7, #4]
 801e234:	f000 fdd1 	bl	801edda <I2C_Master_ADD10>
 801e238:	e082      	b.n	801e340 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e23a:	69fb      	ldr	r3, [r7, #28]
 801e23c:	085b      	lsrs	r3, r3, #1
 801e23e:	f003 0301 	and.w	r3, r3, #1
 801e242:	2b00      	cmp	r3, #0
 801e244:	d009      	beq.n	801e25a <HAL_I2C_EV_IRQHandler+0xd2>
 801e246:	697b      	ldr	r3, [r7, #20]
 801e248:	0a5b      	lsrs	r3, r3, #9
 801e24a:	f003 0301 	and.w	r3, r3, #1
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d003      	beq.n	801e25a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801e252:	6878      	ldr	r0, [r7, #4]
 801e254:	f000 fdeb 	bl	801ee2e <I2C_Master_ADDR>
 801e258:	e072      	b.n	801e340 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801e25a:	69bb      	ldr	r3, [r7, #24]
 801e25c:	089b      	lsrs	r3, r3, #2
 801e25e:	f003 0301 	and.w	r3, r3, #1
 801e262:	2b00      	cmp	r3, #0
 801e264:	d03b      	beq.n	801e2de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	685b      	ldr	r3, [r3, #4]
 801e26c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e274:	f000 80f3 	beq.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e278:	69fb      	ldr	r3, [r7, #28]
 801e27a:	09db      	lsrs	r3, r3, #7
 801e27c:	f003 0301 	and.w	r3, r3, #1
 801e280:	2b00      	cmp	r3, #0
 801e282:	d00f      	beq.n	801e2a4 <HAL_I2C_EV_IRQHandler+0x11c>
 801e284:	697b      	ldr	r3, [r7, #20]
 801e286:	0a9b      	lsrs	r3, r3, #10
 801e288:	f003 0301 	and.w	r3, r3, #1
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d009      	beq.n	801e2a4 <HAL_I2C_EV_IRQHandler+0x11c>
 801e290:	69fb      	ldr	r3, [r7, #28]
 801e292:	089b      	lsrs	r3, r3, #2
 801e294:	f003 0301 	and.w	r3, r3, #1
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d103      	bne.n	801e2a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801e29c:	6878      	ldr	r0, [r7, #4]
 801e29e:	f000 f9cb 	bl	801e638 <I2C_MasterTransmit_TXE>
 801e2a2:	e04d      	b.n	801e340 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e2a4:	69fb      	ldr	r3, [r7, #28]
 801e2a6:	089b      	lsrs	r3, r3, #2
 801e2a8:	f003 0301 	and.w	r3, r3, #1
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	f000 80d6 	beq.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
 801e2b2:	697b      	ldr	r3, [r7, #20]
 801e2b4:	0a5b      	lsrs	r3, r3, #9
 801e2b6:	f003 0301 	and.w	r3, r3, #1
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	f000 80cf 	beq.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e2c0:	7bbb      	ldrb	r3, [r7, #14]
 801e2c2:	2b21      	cmp	r3, #33	; 0x21
 801e2c4:	d103      	bne.n	801e2ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801e2c6:	6878      	ldr	r0, [r7, #4]
 801e2c8:	f000 fa52 	bl	801e770 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e2cc:	e0c7      	b.n	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801e2ce:	7bfb      	ldrb	r3, [r7, #15]
 801e2d0:	2b40      	cmp	r3, #64	; 0x40
 801e2d2:	f040 80c4 	bne.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e2d6:	6878      	ldr	r0, [r7, #4]
 801e2d8:	f000 fac0 	bl	801e85c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e2dc:	e0bf      	b.n	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	685b      	ldr	r3, [r3, #4]
 801e2e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e2e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e2ec:	f000 80b7 	beq.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e2f0:	69fb      	ldr	r3, [r7, #28]
 801e2f2:	099b      	lsrs	r3, r3, #6
 801e2f4:	f003 0301 	and.w	r3, r3, #1
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d00f      	beq.n	801e31c <HAL_I2C_EV_IRQHandler+0x194>
 801e2fc:	697b      	ldr	r3, [r7, #20]
 801e2fe:	0a9b      	lsrs	r3, r3, #10
 801e300:	f003 0301 	and.w	r3, r3, #1
 801e304:	2b00      	cmp	r3, #0
 801e306:	d009      	beq.n	801e31c <HAL_I2C_EV_IRQHandler+0x194>
 801e308:	69fb      	ldr	r3, [r7, #28]
 801e30a:	089b      	lsrs	r3, r3, #2
 801e30c:	f003 0301 	and.w	r3, r3, #1
 801e310:	2b00      	cmp	r3, #0
 801e312:	d103      	bne.n	801e31c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801e314:	6878      	ldr	r0, [r7, #4]
 801e316:	f000 fb35 	bl	801e984 <I2C_MasterReceive_RXNE>
 801e31a:	e011      	b.n	801e340 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e31c:	69fb      	ldr	r3, [r7, #28]
 801e31e:	089b      	lsrs	r3, r3, #2
 801e320:	f003 0301 	and.w	r3, r3, #1
 801e324:	2b00      	cmp	r3, #0
 801e326:	f000 809a 	beq.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
 801e32a:	697b      	ldr	r3, [r7, #20]
 801e32c:	0a5b      	lsrs	r3, r3, #9
 801e32e:	f003 0301 	and.w	r3, r3, #1
 801e332:	2b00      	cmp	r3, #0
 801e334:	f000 8093 	beq.w	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	f000 fbde 	bl	801eafa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e33e:	e08e      	b.n	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
 801e340:	e08d      	b.n	801e45e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e346:	2b00      	cmp	r3, #0
 801e348:	d004      	beq.n	801e354 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	695b      	ldr	r3, [r3, #20]
 801e350:	61fb      	str	r3, [r7, #28]
 801e352:	e007      	b.n	801e364 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	699b      	ldr	r3, [r3, #24]
 801e35a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	695b      	ldr	r3, [r3, #20]
 801e362:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e364:	69fb      	ldr	r3, [r7, #28]
 801e366:	085b      	lsrs	r3, r3, #1
 801e368:	f003 0301 	and.w	r3, r3, #1
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d012      	beq.n	801e396 <HAL_I2C_EV_IRQHandler+0x20e>
 801e370:	697b      	ldr	r3, [r7, #20]
 801e372:	0a5b      	lsrs	r3, r3, #9
 801e374:	f003 0301 	and.w	r3, r3, #1
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d00c      	beq.n	801e396 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e380:	2b00      	cmp	r3, #0
 801e382:	d003      	beq.n	801e38c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	699b      	ldr	r3, [r3, #24]
 801e38a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801e38c:	69b9      	ldr	r1, [r7, #24]
 801e38e:	6878      	ldr	r0, [r7, #4]
 801e390:	f000 ff9c 	bl	801f2cc <I2C_Slave_ADDR>
 801e394:	e066      	b.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e396:	69fb      	ldr	r3, [r7, #28]
 801e398:	091b      	lsrs	r3, r3, #4
 801e39a:	f003 0301 	and.w	r3, r3, #1
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d009      	beq.n	801e3b6 <HAL_I2C_EV_IRQHandler+0x22e>
 801e3a2:	697b      	ldr	r3, [r7, #20]
 801e3a4:	0a5b      	lsrs	r3, r3, #9
 801e3a6:	f003 0301 	and.w	r3, r3, #1
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d003      	beq.n	801e3b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801e3ae:	6878      	ldr	r0, [r7, #4]
 801e3b0:	f000 ffd6 	bl	801f360 <I2C_Slave_STOPF>
 801e3b4:	e056      	b.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801e3b6:	7bbb      	ldrb	r3, [r7, #14]
 801e3b8:	2b21      	cmp	r3, #33	; 0x21
 801e3ba:	d002      	beq.n	801e3c2 <HAL_I2C_EV_IRQHandler+0x23a>
 801e3bc:	7bbb      	ldrb	r3, [r7, #14]
 801e3be:	2b29      	cmp	r3, #41	; 0x29
 801e3c0:	d125      	bne.n	801e40e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e3c2:	69fb      	ldr	r3, [r7, #28]
 801e3c4:	09db      	lsrs	r3, r3, #7
 801e3c6:	f003 0301 	and.w	r3, r3, #1
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d00f      	beq.n	801e3ee <HAL_I2C_EV_IRQHandler+0x266>
 801e3ce:	697b      	ldr	r3, [r7, #20]
 801e3d0:	0a9b      	lsrs	r3, r3, #10
 801e3d2:	f003 0301 	and.w	r3, r3, #1
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d009      	beq.n	801e3ee <HAL_I2C_EV_IRQHandler+0x266>
 801e3da:	69fb      	ldr	r3, [r7, #28]
 801e3dc:	089b      	lsrs	r3, r3, #2
 801e3de:	f003 0301 	and.w	r3, r3, #1
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d103      	bne.n	801e3ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801e3e6:	6878      	ldr	r0, [r7, #4]
 801e3e8:	f000 feb2 	bl	801f150 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e3ec:	e039      	b.n	801e462 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e3ee:	69fb      	ldr	r3, [r7, #28]
 801e3f0:	089b      	lsrs	r3, r3, #2
 801e3f2:	f003 0301 	and.w	r3, r3, #1
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d033      	beq.n	801e462 <HAL_I2C_EV_IRQHandler+0x2da>
 801e3fa:	697b      	ldr	r3, [r7, #20]
 801e3fc:	0a5b      	lsrs	r3, r3, #9
 801e3fe:	f003 0301 	and.w	r3, r3, #1
 801e402:	2b00      	cmp	r3, #0
 801e404:	d02d      	beq.n	801e462 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801e406:	6878      	ldr	r0, [r7, #4]
 801e408:	f000 fedf 	bl	801f1ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e40c:	e029      	b.n	801e462 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e40e:	69fb      	ldr	r3, [r7, #28]
 801e410:	099b      	lsrs	r3, r3, #6
 801e412:	f003 0301 	and.w	r3, r3, #1
 801e416:	2b00      	cmp	r3, #0
 801e418:	d00f      	beq.n	801e43a <HAL_I2C_EV_IRQHandler+0x2b2>
 801e41a:	697b      	ldr	r3, [r7, #20]
 801e41c:	0a9b      	lsrs	r3, r3, #10
 801e41e:	f003 0301 	and.w	r3, r3, #1
 801e422:	2b00      	cmp	r3, #0
 801e424:	d009      	beq.n	801e43a <HAL_I2C_EV_IRQHandler+0x2b2>
 801e426:	69fb      	ldr	r3, [r7, #28]
 801e428:	089b      	lsrs	r3, r3, #2
 801e42a:	f003 0301 	and.w	r3, r3, #1
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d103      	bne.n	801e43a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801e432:	6878      	ldr	r0, [r7, #4]
 801e434:	f000 feea 	bl	801f20c <I2C_SlaveReceive_RXNE>
 801e438:	e014      	b.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e43a:	69fb      	ldr	r3, [r7, #28]
 801e43c:	089b      	lsrs	r3, r3, #2
 801e43e:	f003 0301 	and.w	r3, r3, #1
 801e442:	2b00      	cmp	r3, #0
 801e444:	d00e      	beq.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
 801e446:	697b      	ldr	r3, [r7, #20]
 801e448:	0a5b      	lsrs	r3, r3, #9
 801e44a:	f003 0301 	and.w	r3, r3, #1
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d008      	beq.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801e452:	6878      	ldr	r0, [r7, #4]
 801e454:	f000 ff18 	bl	801f288 <I2C_SlaveReceive_BTF>
 801e458:	e004      	b.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801e45a:	bf00      	nop
 801e45c:	e002      	b.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e45e:	bf00      	nop
 801e460:	e000      	b.n	801e464 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e462:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801e464:	3720      	adds	r7, #32
 801e466:	46bd      	mov	sp, r7
 801e468:	bd80      	pop	{r7, pc}

0801e46a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e46a:	b580      	push	{r7, lr}
 801e46c:	b08a      	sub	sp, #40	; 0x28
 801e46e:	af00      	add	r7, sp, #0
 801e470:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	695b      	ldr	r3, [r3, #20]
 801e478:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	685b      	ldr	r3, [r3, #4]
 801e480:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801e482:	2300      	movs	r3, #0
 801e484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e48c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e48e:	6a3b      	ldr	r3, [r7, #32]
 801e490:	0a1b      	lsrs	r3, r3, #8
 801e492:	f003 0301 	and.w	r3, r3, #1
 801e496:	2b00      	cmp	r3, #0
 801e498:	d00e      	beq.n	801e4b8 <HAL_I2C_ER_IRQHandler+0x4e>
 801e49a:	69fb      	ldr	r3, [r7, #28]
 801e49c:	0a1b      	lsrs	r3, r3, #8
 801e49e:	f003 0301 	and.w	r3, r3, #1
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d008      	beq.n	801e4b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4a8:	f043 0301 	orr.w	r3, r3, #1
 801e4ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e4b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e4b8:	6a3b      	ldr	r3, [r7, #32]
 801e4ba:	0a5b      	lsrs	r3, r3, #9
 801e4bc:	f003 0301 	and.w	r3, r3, #1
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d00e      	beq.n	801e4e2 <HAL_I2C_ER_IRQHandler+0x78>
 801e4c4:	69fb      	ldr	r3, [r7, #28]
 801e4c6:	0a1b      	lsrs	r3, r3, #8
 801e4c8:	f003 0301 	and.w	r3, r3, #1
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d008      	beq.n	801e4e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4d2:	f043 0302 	orr.w	r3, r3, #2
 801e4d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801e4e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e4e2:	6a3b      	ldr	r3, [r7, #32]
 801e4e4:	0a9b      	lsrs	r3, r3, #10
 801e4e6:	f003 0301 	and.w	r3, r3, #1
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d03f      	beq.n	801e56e <HAL_I2C_ER_IRQHandler+0x104>
 801e4ee:	69fb      	ldr	r3, [r7, #28]
 801e4f0:	0a1b      	lsrs	r3, r3, #8
 801e4f2:	f003 0301 	and.w	r3, r3, #1
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d039      	beq.n	801e56e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801e4fa:	7efb      	ldrb	r3, [r7, #27]
 801e4fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e502:	b29b      	uxth	r3, r3
 801e504:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e50c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e512:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801e514:	7ebb      	ldrb	r3, [r7, #26]
 801e516:	2b20      	cmp	r3, #32
 801e518:	d112      	bne.n	801e540 <HAL_I2C_ER_IRQHandler+0xd6>
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d10f      	bne.n	801e540 <HAL_I2C_ER_IRQHandler+0xd6>
 801e520:	7cfb      	ldrb	r3, [r7, #19]
 801e522:	2b21      	cmp	r3, #33	; 0x21
 801e524:	d008      	beq.n	801e538 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801e526:	7cfb      	ldrb	r3, [r7, #19]
 801e528:	2b29      	cmp	r3, #41	; 0x29
 801e52a:	d005      	beq.n	801e538 <HAL_I2C_ER_IRQHandler+0xce>
 801e52c:	7cfb      	ldrb	r3, [r7, #19]
 801e52e:	2b28      	cmp	r3, #40	; 0x28
 801e530:	d106      	bne.n	801e540 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	2b21      	cmp	r3, #33	; 0x21
 801e536:	d103      	bne.n	801e540 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801e538:	6878      	ldr	r0, [r7, #4]
 801e53a:	f001 f841 	bl	801f5c0 <I2C_Slave_AF>
 801e53e:	e016      	b.n	801e56e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e548:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e54c:	f043 0304 	orr.w	r3, r3, #4
 801e550:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e552:	7efb      	ldrb	r3, [r7, #27]
 801e554:	2b10      	cmp	r3, #16
 801e556:	d002      	beq.n	801e55e <HAL_I2C_ER_IRQHandler+0xf4>
 801e558:	7efb      	ldrb	r3, [r7, #27]
 801e55a:	2b40      	cmp	r3, #64	; 0x40
 801e55c:	d107      	bne.n	801e56e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	681a      	ldr	r2, [r3, #0]
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e56c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e56e:	6a3b      	ldr	r3, [r7, #32]
 801e570:	0adb      	lsrs	r3, r3, #11
 801e572:	f003 0301 	and.w	r3, r3, #1
 801e576:	2b00      	cmp	r3, #0
 801e578:	d00e      	beq.n	801e598 <HAL_I2C_ER_IRQHandler+0x12e>
 801e57a:	69fb      	ldr	r3, [r7, #28]
 801e57c:	0a1b      	lsrs	r3, r3, #8
 801e57e:	f003 0301 	and.w	r3, r3, #1
 801e582:	2b00      	cmp	r3, #0
 801e584:	d008      	beq.n	801e598 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801e586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e588:	f043 0308 	orr.w	r3, r3, #8
 801e58c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801e596:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d008      	beq.n	801e5b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5a4:	431a      	orrs	r2, r3
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801e5aa:	6878      	ldr	r0, [r7, #4]
 801e5ac:	f001 f878 	bl	801f6a0 <I2C_ITError>
  }
}
 801e5b0:	bf00      	nop
 801e5b2:	3728      	adds	r7, #40	; 0x28
 801e5b4:	46bd      	mov	sp, r7
 801e5b6:	bd80      	pop	{r7, pc}

0801e5b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e5b8:	b480      	push	{r7}
 801e5ba:	b083      	sub	sp, #12
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801e5c0:	bf00      	nop
 801e5c2:	370c      	adds	r7, #12
 801e5c4:	46bd      	mov	sp, r7
 801e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ca:	4770      	bx	lr

0801e5cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e5cc:	b480      	push	{r7}
 801e5ce:	b083      	sub	sp, #12
 801e5d0:	af00      	add	r7, sp, #0
 801e5d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801e5d4:	bf00      	nop
 801e5d6:	370c      	adds	r7, #12
 801e5d8:	46bd      	mov	sp, r7
 801e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5de:	4770      	bx	lr

0801e5e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801e5e0:	b480      	push	{r7}
 801e5e2:	b083      	sub	sp, #12
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	6078      	str	r0, [r7, #4]
 801e5e8:	460b      	mov	r3, r1
 801e5ea:	70fb      	strb	r3, [r7, #3]
 801e5ec:	4613      	mov	r3, r2
 801e5ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801e5f0:	bf00      	nop
 801e5f2:	370c      	adds	r7, #12
 801e5f4:	46bd      	mov	sp, r7
 801e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5fa:	4770      	bx	lr

0801e5fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e5fc:	b480      	push	{r7}
 801e5fe:	b083      	sub	sp, #12
 801e600:	af00      	add	r7, sp, #0
 801e602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801e604:	bf00      	nop
 801e606:	370c      	adds	r7, #12
 801e608:	46bd      	mov	sp, r7
 801e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e60e:	4770      	bx	lr

0801e610 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801e610:	b480      	push	{r7}
 801e612:	b083      	sub	sp, #12
 801e614:	af00      	add	r7, sp, #0
 801e616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801e618:	bf00      	nop
 801e61a:	370c      	adds	r7, #12
 801e61c:	46bd      	mov	sp, r7
 801e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e622:	4770      	bx	lr

0801e624 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e624:	b480      	push	{r7}
 801e626:	b083      	sub	sp, #12
 801e628:	af00      	add	r7, sp, #0
 801e62a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801e62c:	bf00      	nop
 801e62e:	370c      	adds	r7, #12
 801e630:	46bd      	mov	sp, r7
 801e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e636:	4770      	bx	lr

0801e638 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e638:	b580      	push	{r7, lr}
 801e63a:	b084      	sub	sp, #16
 801e63c:	af00      	add	r7, sp, #0
 801e63e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e646:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e64e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e654:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d150      	bne.n	801e700 <I2C_MasterTransmit_TXE+0xc8>
 801e65e:	7bfb      	ldrb	r3, [r7, #15]
 801e660:	2b21      	cmp	r3, #33	; 0x21
 801e662:	d14d      	bne.n	801e700 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e664:	68bb      	ldr	r3, [r7, #8]
 801e666:	2b08      	cmp	r3, #8
 801e668:	d01d      	beq.n	801e6a6 <I2C_MasterTransmit_TXE+0x6e>
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	2b20      	cmp	r3, #32
 801e66e:	d01a      	beq.n	801e6a6 <I2C_MasterTransmit_TXE+0x6e>
 801e670:	68bb      	ldr	r3, [r7, #8]
 801e672:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e676:	d016      	beq.n	801e6a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	681b      	ldr	r3, [r3, #0]
 801e67c:	685a      	ldr	r2, [r3, #4]
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e686:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	2211      	movs	r2, #17
 801e68c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	2200      	movs	r2, #0
 801e692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	2220      	movs	r2, #32
 801e69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801e69e:	6878      	ldr	r0, [r7, #4]
 801e6a0:	f7e3 f848 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e6a4:	e060      	b.n	801e768 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	685a      	ldr	r2, [r3, #4]
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e6b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	681a      	ldr	r2, [r3, #0]
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e6c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	2200      	movs	r2, #0
 801e6ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	2220      	movs	r2, #32
 801e6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e6da:	b2db      	uxtb	r3, r3
 801e6dc:	2b40      	cmp	r3, #64	; 0x40
 801e6de:	d107      	bne.n	801e6f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	2200      	movs	r2, #0
 801e6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801e6e8:	6878      	ldr	r0, [r7, #4]
 801e6ea:	f7e3 f80d 	bl	8001708 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e6ee:	e03b      	b.n	801e768 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e6f8:	6878      	ldr	r0, [r7, #4]
 801e6fa:	f7e3 f81b 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e6fe:	e033      	b.n	801e768 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801e700:	7bfb      	ldrb	r3, [r7, #15]
 801e702:	2b21      	cmp	r3, #33	; 0x21
 801e704:	d005      	beq.n	801e712 <I2C_MasterTransmit_TXE+0xda>
 801e706:	7bbb      	ldrb	r3, [r7, #14]
 801e708:	2b40      	cmp	r3, #64	; 0x40
 801e70a:	d12d      	bne.n	801e768 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801e70c:	7bfb      	ldrb	r3, [r7, #15]
 801e70e:	2b22      	cmp	r3, #34	; 0x22
 801e710:	d12a      	bne.n	801e768 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e716:	b29b      	uxth	r3, r3
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d108      	bne.n	801e72e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	685a      	ldr	r2, [r3, #4]
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e72a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801e72c:	e01c      	b.n	801e768 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e734:	b2db      	uxtb	r3, r3
 801e736:	2b40      	cmp	r3, #64	; 0x40
 801e738:	d103      	bne.n	801e742 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e73a:	6878      	ldr	r0, [r7, #4]
 801e73c:	f000 f88e 	bl	801e85c <I2C_MemoryTransmit_TXE_BTF>
}
 801e740:	e012      	b.n	801e768 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e746:	781a      	ldrb	r2, [r3, #0]
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e752:	1c5a      	adds	r2, r3, #1
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e75c:	b29b      	uxth	r3, r3
 801e75e:	3b01      	subs	r3, #1
 801e760:	b29a      	uxth	r2, r3
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e766:	e7ff      	b.n	801e768 <I2C_MasterTransmit_TXE+0x130>
 801e768:	bf00      	nop
 801e76a:	3710      	adds	r7, #16
 801e76c:	46bd      	mov	sp, r7
 801e76e:	bd80      	pop	{r7, pc}

0801e770 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801e770:	b580      	push	{r7, lr}
 801e772:	b084      	sub	sp, #16
 801e774:	af00      	add	r7, sp, #0
 801e776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e77c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e784:	b2db      	uxtb	r3, r3
 801e786:	2b21      	cmp	r3, #33	; 0x21
 801e788:	d164      	bne.n	801e854 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e78e:	b29b      	uxth	r3, r3
 801e790:	2b00      	cmp	r3, #0
 801e792:	d012      	beq.n	801e7ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e798:	781a      	ldrb	r2, [r3, #0]
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7a4:	1c5a      	adds	r2, r3, #1
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e7ae:	b29b      	uxth	r3, r3
 801e7b0:	3b01      	subs	r3, #1
 801e7b2:	b29a      	uxth	r2, r3
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801e7b8:	e04c      	b.n	801e854 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e7ba:	68fb      	ldr	r3, [r7, #12]
 801e7bc:	2b08      	cmp	r3, #8
 801e7be:	d01d      	beq.n	801e7fc <I2C_MasterTransmit_BTF+0x8c>
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	2b20      	cmp	r3, #32
 801e7c4:	d01a      	beq.n	801e7fc <I2C_MasterTransmit_BTF+0x8c>
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e7cc:	d016      	beq.n	801e7fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	685a      	ldr	r2, [r3, #4]
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e7dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	2211      	movs	r2, #17
 801e7e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	2200      	movs	r2, #0
 801e7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	2220      	movs	r2, #32
 801e7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e7f4:	6878      	ldr	r0, [r7, #4]
 801e7f6:	f7e2 ff9d 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
}
 801e7fa:	e02b      	b.n	801e854 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	681b      	ldr	r3, [r3, #0]
 801e800:	685a      	ldr	r2, [r3, #4]
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e80a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	681a      	ldr	r2, [r3, #0]
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e81a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	2200      	movs	r2, #0
 801e820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	2220      	movs	r2, #32
 801e826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e830:	b2db      	uxtb	r3, r3
 801e832:	2b40      	cmp	r3, #64	; 0x40
 801e834:	d107      	bne.n	801e846 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	2200      	movs	r2, #0
 801e83a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801e83e:	6878      	ldr	r0, [r7, #4]
 801e840:	f7e2 ff62 	bl	8001708 <HAL_I2C_MemTxCpltCallback>
}
 801e844:	e006      	b.n	801e854 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e846:	687b      	ldr	r3, [r7, #4]
 801e848:	2200      	movs	r2, #0
 801e84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801e84e:	6878      	ldr	r0, [r7, #4]
 801e850:	f7e2 ff70 	bl	8001734 <HAL_I2C_MasterTxCpltCallback>
}
 801e854:	bf00      	nop
 801e856:	3710      	adds	r7, #16
 801e858:	46bd      	mov	sp, r7
 801e85a:	bd80      	pop	{r7, pc}

0801e85c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801e85c:	b580      	push	{r7, lr}
 801e85e:	b084      	sub	sp, #16
 801e860:	af00      	add	r7, sp, #0
 801e862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e86a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e870:	2b00      	cmp	r3, #0
 801e872:	d11d      	bne.n	801e8b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e878:	2b01      	cmp	r3, #1
 801e87a:	d10b      	bne.n	801e894 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e880:	b2da      	uxtb	r2, r3
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e88c:	1c9a      	adds	r2, r3, #2
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801e892:	e073      	b.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e898:	b29b      	uxth	r3, r3
 801e89a:	121b      	asrs	r3, r3, #8
 801e89c:	b2da      	uxtb	r2, r3
 801e89e:	687b      	ldr	r3, [r7, #4]
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8a8:	1c5a      	adds	r2, r3, #1
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e8ae:	e065      	b.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8b4:	2b01      	cmp	r3, #1
 801e8b6:	d10b      	bne.n	801e8d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e8bc:	b2da      	uxtb	r2, r3
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8c8:	1c5a      	adds	r2, r3, #1
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e8ce:	e055      	b.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8d4:	2b02      	cmp	r3, #2
 801e8d6:	d151      	bne.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801e8d8:	7bfb      	ldrb	r3, [r7, #15]
 801e8da:	2b22      	cmp	r3, #34	; 0x22
 801e8dc:	d10d      	bne.n	801e8fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	681a      	ldr	r2, [r3, #0]
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	681b      	ldr	r3, [r3, #0]
 801e8e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e8ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8f2:	1c5a      	adds	r2, r3, #1
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 801e8f8:	e040      	b.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e8fe:	b29b      	uxth	r3, r3
 801e900:	2b00      	cmp	r3, #0
 801e902:	d015      	beq.n	801e930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801e904:	7bfb      	ldrb	r3, [r7, #15]
 801e906:	2b21      	cmp	r3, #33	; 0x21
 801e908:	d112      	bne.n	801e930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e90e:	781a      	ldrb	r2, [r3, #0]
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e91a:	1c5a      	adds	r2, r3, #1
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e924:	b29b      	uxth	r3, r3
 801e926:	3b01      	subs	r3, #1
 801e928:	b29a      	uxth	r2, r3
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e92e:	e025      	b.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e934:	b29b      	uxth	r3, r3
 801e936:	2b00      	cmp	r3, #0
 801e938:	d120      	bne.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
 801e93a:	7bfb      	ldrb	r3, [r7, #15]
 801e93c:	2b21      	cmp	r3, #33	; 0x21
 801e93e:	d11d      	bne.n	801e97c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	685a      	ldr	r2, [r3, #4]
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e94e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	681a      	ldr	r2, [r3, #0]
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e95e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	2200      	movs	r2, #0
 801e964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	2220      	movs	r2, #32
 801e96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	2200      	movs	r2, #0
 801e972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801e976:	6878      	ldr	r0, [r7, #4]
 801e978:	f7e2 fec6 	bl	8001708 <HAL_I2C_MemTxCpltCallback>
}
 801e97c:	bf00      	nop
 801e97e:	3710      	adds	r7, #16
 801e980:	46bd      	mov	sp, r7
 801e982:	bd80      	pop	{r7, pc}

0801e984 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801e984:	b580      	push	{r7, lr}
 801e986:	b084      	sub	sp, #16
 801e988:	af00      	add	r7, sp, #0
 801e98a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e992:	b2db      	uxtb	r3, r3
 801e994:	2b22      	cmp	r3, #34	; 0x22
 801e996:	f040 80ac 	bne.w	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e99e:	b29b      	uxth	r3, r3
 801e9a0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801e9a2:	68fb      	ldr	r3, [r7, #12]
 801e9a4:	2b03      	cmp	r3, #3
 801e9a6:	d921      	bls.n	801e9ec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	691a      	ldr	r2, [r3, #16]
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9b2:	b2d2      	uxtb	r2, r2
 801e9b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e9b6:	687b      	ldr	r3, [r7, #4]
 801e9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9ba:	1c5a      	adds	r2, r3, #1
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e9c4:	b29b      	uxth	r3, r3
 801e9c6:	3b01      	subs	r3, #1
 801e9c8:	b29a      	uxth	r2, r3
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e9d2:	b29b      	uxth	r3, r3
 801e9d4:	2b03      	cmp	r3, #3
 801e9d6:	f040 808c 	bne.w	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	685a      	ldr	r2, [r3, #4]
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e9e8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801e9ea:	e082      	b.n	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9f0:	2b02      	cmp	r3, #2
 801e9f2:	d075      	beq.n	801eae0 <I2C_MasterReceive_RXNE+0x15c>
 801e9f4:	68fb      	ldr	r3, [r7, #12]
 801e9f6:	2b01      	cmp	r3, #1
 801e9f8:	d002      	beq.n	801ea00 <I2C_MasterReceive_RXNE+0x7c>
 801e9fa:	68fb      	ldr	r3, [r7, #12]
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d16f      	bne.n	801eae0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	f001 fbcf 	bl	80201a4 <I2C_WaitOnSTOPRequestThroughIT>
 801ea06:	4603      	mov	r3, r0
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d142      	bne.n	801ea92 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	681a      	ldr	r2, [r3, #0]
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	681b      	ldr	r3, [r3, #0]
 801ea16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	685a      	ldr	r2, [r3, #4]
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ea2a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	691a      	ldr	r2, [r3, #16]
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea36:	b2d2      	uxtb	r2, r2
 801ea38:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea3e:	1c5a      	adds	r2, r3, #1
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ea48:	b29b      	uxth	r3, r3
 801ea4a:	3b01      	subs	r3, #1
 801ea4c:	b29a      	uxth	r2, r3
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	2220      	movs	r2, #32
 801ea56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ea60:	b2db      	uxtb	r3, r3
 801ea62:	2b40      	cmp	r3, #64	; 0x40
 801ea64:	d10a      	bne.n	801ea7c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	2200      	movs	r2, #0
 801ea6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	2200      	movs	r2, #0
 801ea72:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801ea74:	6878      	ldr	r0, [r7, #4]
 801ea76:	f7e2 fe1b 	bl	80016b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ea7a:	e03a      	b.n	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	2200      	movs	r2, #0
 801ea80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2212      	movs	r2, #18
 801ea88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801ea8a:	6878      	ldr	r0, [r7, #4]
 801ea8c:	f7e2 fe26 	bl	80016dc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ea90:	e02f      	b.n	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	685a      	ldr	r2, [r3, #4]
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801eaa0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	691a      	ldr	r2, [r3, #16]
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eaac:	b2d2      	uxtb	r2, r2
 801eaae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eab4:	1c5a      	adds	r2, r3, #1
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eabe:	b29b      	uxth	r3, r3
 801eac0:	3b01      	subs	r3, #1
 801eac2:	b29a      	uxth	r2, r3
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2220      	movs	r2, #32
 801eacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	2200      	movs	r2, #0
 801ead4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801ead8:	6878      	ldr	r0, [r7, #4]
 801eada:	f7ff fd99 	bl	801e610 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801eade:	e008      	b.n	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	685a      	ldr	r2, [r3, #4]
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eaee:	605a      	str	r2, [r3, #4]
}
 801eaf0:	e7ff      	b.n	801eaf2 <I2C_MasterReceive_RXNE+0x16e>
 801eaf2:	bf00      	nop
 801eaf4:	3710      	adds	r7, #16
 801eaf6:	46bd      	mov	sp, r7
 801eaf8:	bd80      	pop	{r7, pc}

0801eafa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801eafa:	b580      	push	{r7, lr}
 801eafc:	b084      	sub	sp, #16
 801eafe:	af00      	add	r7, sp, #0
 801eb00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb06:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb0c:	b29b      	uxth	r3, r3
 801eb0e:	2b04      	cmp	r3, #4
 801eb10:	d11b      	bne.n	801eb4a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	685a      	ldr	r2, [r3, #4]
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb20:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	681b      	ldr	r3, [r3, #0]
 801eb26:	691a      	ldr	r2, [r3, #16]
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb2c:	b2d2      	uxtb	r2, r2
 801eb2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb34:	1c5a      	adds	r2, r3, #1
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb3e:	b29b      	uxth	r3, r3
 801eb40:	3b01      	subs	r3, #1
 801eb42:	b29a      	uxth	r2, r3
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801eb48:	e0bd      	b.n	801ecc6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb4e:	b29b      	uxth	r3, r3
 801eb50:	2b03      	cmp	r3, #3
 801eb52:	d129      	bne.n	801eba8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	685a      	ldr	r2, [r3, #4]
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb62:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	2b04      	cmp	r3, #4
 801eb68:	d00a      	beq.n	801eb80 <I2C_MasterReceive_BTF+0x86>
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	2b02      	cmp	r3, #2
 801eb6e:	d007      	beq.n	801eb80 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	681a      	ldr	r2, [r3, #0]
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	691a      	ldr	r2, [r3, #16]
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb8a:	b2d2      	uxtb	r2, r2
 801eb8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb92:	1c5a      	adds	r2, r3, #1
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb9c:	b29b      	uxth	r3, r3
 801eb9e:	3b01      	subs	r3, #1
 801eba0:	b29a      	uxth	r2, r3
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801eba6:	e08e      	b.n	801ecc6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ebac:	b29b      	uxth	r3, r3
 801ebae:	2b02      	cmp	r3, #2
 801ebb0:	d176      	bne.n	801eca0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801ebb2:	68fb      	ldr	r3, [r7, #12]
 801ebb4:	2b01      	cmp	r3, #1
 801ebb6:	d002      	beq.n	801ebbe <I2C_MasterReceive_BTF+0xc4>
 801ebb8:	68fb      	ldr	r3, [r7, #12]
 801ebba:	2b10      	cmp	r3, #16
 801ebbc:	d108      	bne.n	801ebd0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	681a      	ldr	r2, [r3, #0]
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ebcc:	601a      	str	r2, [r3, #0]
 801ebce:	e019      	b.n	801ec04 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801ebd0:	68fb      	ldr	r3, [r7, #12]
 801ebd2:	2b04      	cmp	r3, #4
 801ebd4:	d002      	beq.n	801ebdc <I2C_MasterReceive_BTF+0xe2>
 801ebd6:	68fb      	ldr	r3, [r7, #12]
 801ebd8:	2b02      	cmp	r3, #2
 801ebda:	d108      	bne.n	801ebee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	681a      	ldr	r2, [r3, #0]
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ebea:	601a      	str	r2, [r3, #0]
 801ebec:	e00a      	b.n	801ec04 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801ebee:	68fb      	ldr	r3, [r7, #12]
 801ebf0:	2b10      	cmp	r3, #16
 801ebf2:	d007      	beq.n	801ec04 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	681a      	ldr	r2, [r3, #0]
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ec02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	691a      	ldr	r2, [r3, #16]
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec0e:	b2d2      	uxtb	r2, r2
 801ec10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec16:	1c5a      	adds	r2, r3, #1
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec20:	b29b      	uxth	r3, r3
 801ec22:	3b01      	subs	r3, #1
 801ec24:	b29a      	uxth	r2, r3
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	691a      	ldr	r2, [r3, #16]
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec34:	b2d2      	uxtb	r2, r2
 801ec36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec3c:	1c5a      	adds	r2, r3, #1
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec46:	b29b      	uxth	r3, r3
 801ec48:	3b01      	subs	r3, #1
 801ec4a:	b29a      	uxth	r2, r3
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	685a      	ldr	r2, [r3, #4]
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801ec5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	2220      	movs	r2, #32
 801ec64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ec6e:	b2db      	uxtb	r3, r3
 801ec70:	2b40      	cmp	r3, #64	; 0x40
 801ec72:	d10a      	bne.n	801ec8a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	2200      	movs	r2, #0
 801ec78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	2200      	movs	r2, #0
 801ec80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801ec82:	6878      	ldr	r0, [r7, #4]
 801ec84:	f7e2 fd14 	bl	80016b0 <HAL_I2C_MemRxCpltCallback>
}
 801ec88:	e01d      	b.n	801ecc6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	2200      	movs	r2, #0
 801ec8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	2212      	movs	r2, #18
 801ec96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801ec98:	6878      	ldr	r0, [r7, #4]
 801ec9a:	f7e2 fd1f 	bl	80016dc <HAL_I2C_MasterRxCpltCallback>
}
 801ec9e:	e012      	b.n	801ecc6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	691a      	ldr	r2, [r3, #16]
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecaa:	b2d2      	uxtb	r2, r2
 801ecac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecb2:	1c5a      	adds	r2, r3, #1
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecbc:	b29b      	uxth	r3, r3
 801ecbe:	3b01      	subs	r3, #1
 801ecc0:	b29a      	uxth	r2, r3
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801ecc6:	bf00      	nop
 801ecc8:	3710      	adds	r7, #16
 801ecca:	46bd      	mov	sp, r7
 801eccc:	bd80      	pop	{r7, pc}

0801ecce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801ecce:	b480      	push	{r7}
 801ecd0:	b083      	sub	sp, #12
 801ecd2:	af00      	add	r7, sp, #0
 801ecd4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ecdc:	b2db      	uxtb	r3, r3
 801ecde:	2b40      	cmp	r3, #64	; 0x40
 801ece0:	d117      	bne.n	801ed12 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d109      	bne.n	801ecfe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ecee:	b2db      	uxtb	r3, r3
 801ecf0:	461a      	mov	r2, r3
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801ecfa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801ecfc:	e067      	b.n	801edce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ed02:	b2db      	uxtb	r3, r3
 801ed04:	f043 0301 	orr.w	r3, r3, #1
 801ed08:	b2da      	uxtb	r2, r3
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	611a      	str	r2, [r3, #16]
}
 801ed10:	e05d      	b.n	801edce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	691b      	ldr	r3, [r3, #16]
 801ed16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ed1a:	d133      	bne.n	801ed84 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ed22:	b2db      	uxtb	r3, r3
 801ed24:	2b21      	cmp	r3, #33	; 0x21
 801ed26:	d109      	bne.n	801ed3c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ed2c:	b2db      	uxtb	r3, r3
 801ed2e:	461a      	mov	r2, r3
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801ed38:	611a      	str	r2, [r3, #16]
 801ed3a:	e008      	b.n	801ed4e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ed40:	b2db      	uxtb	r3, r3
 801ed42:	f043 0301 	orr.w	r3, r3, #1
 801ed46:	b2da      	uxtb	r2, r3
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed52:	2b00      	cmp	r3, #0
 801ed54:	d004      	beq.n	801ed60 <I2C_Master_SB+0x92>
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d108      	bne.n	801ed72 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	d032      	beq.n	801edce <I2C_Master_SB+0x100>
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d02d      	beq.n	801edce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	685a      	ldr	r2, [r3, #4]
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	681b      	ldr	r3, [r3, #0]
 801ed7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ed80:	605a      	str	r2, [r3, #4]
}
 801ed82:	e024      	b.n	801edce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d10e      	bne.n	801edaa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ed90:	b29b      	uxth	r3, r3
 801ed92:	11db      	asrs	r3, r3, #7
 801ed94:	b2db      	uxtb	r3, r3
 801ed96:	f003 0306 	and.w	r3, r3, #6
 801ed9a:	b2db      	uxtb	r3, r3
 801ed9c:	f063 030f 	orn	r3, r3, #15
 801eda0:	b2da      	uxtb	r2, r3
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	611a      	str	r2, [r3, #16]
}
 801eda8:	e011      	b.n	801edce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801edae:	2b01      	cmp	r3, #1
 801edb0:	d10d      	bne.n	801edce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801edb6:	b29b      	uxth	r3, r3
 801edb8:	11db      	asrs	r3, r3, #7
 801edba:	b2db      	uxtb	r3, r3
 801edbc:	f003 0306 	and.w	r3, r3, #6
 801edc0:	b2db      	uxtb	r3, r3
 801edc2:	f063 030e 	orn	r3, r3, #14
 801edc6:	b2da      	uxtb	r2, r3
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	611a      	str	r2, [r3, #16]
}
 801edce:	bf00      	nop
 801edd0:	370c      	adds	r7, #12
 801edd2:	46bd      	mov	sp, r7
 801edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd8:	4770      	bx	lr

0801edda <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801edda:	b480      	push	{r7}
 801eddc:	b083      	sub	sp, #12
 801edde:	af00      	add	r7, sp, #0
 801ede0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ede6:	b2da      	uxtb	r2, r3
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	681b      	ldr	r3, [r3, #0]
 801edec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d004      	beq.n	801ee00 <I2C_Master_ADD10+0x26>
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801edfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d108      	bne.n	801ee12 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d00c      	beq.n	801ee22 <I2C_Master_ADD10+0x48>
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d007      	beq.n	801ee22 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	685a      	ldr	r2, [r3, #4]
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ee20:	605a      	str	r2, [r3, #4]
  }
}
 801ee22:	bf00      	nop
 801ee24:	370c      	adds	r7, #12
 801ee26:	46bd      	mov	sp, r7
 801ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee2c:	4770      	bx	lr

0801ee2e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801ee2e:	b480      	push	{r7}
 801ee30:	b091      	sub	sp, #68	; 0x44
 801ee32:	af00      	add	r7, sp, #0
 801ee34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ee3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee44:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ee4a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ee52:	b2db      	uxtb	r3, r3
 801ee54:	2b22      	cmp	r3, #34	; 0x22
 801ee56:	f040 8169 	bne.w	801f12c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d10f      	bne.n	801ee82 <I2C_Master_ADDR+0x54>
 801ee62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ee66:	2b40      	cmp	r3, #64	; 0x40
 801ee68:	d10b      	bne.n	801ee82 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	633b      	str	r3, [r7, #48]	; 0x30
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	695b      	ldr	r3, [r3, #20]
 801ee74:	633b      	str	r3, [r7, #48]	; 0x30
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	699b      	ldr	r3, [r3, #24]
 801ee7c:	633b      	str	r3, [r7, #48]	; 0x30
 801ee7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee80:	e160      	b.n	801f144 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d11d      	bne.n	801eec6 <I2C_Master_ADDR+0x98>
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	691b      	ldr	r3, [r3, #16]
 801ee8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801ee92:	d118      	bne.n	801eec6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ee94:	2300      	movs	r3, #0
 801ee96:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	695b      	ldr	r3, [r3, #20]
 801ee9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	699b      	ldr	r3, [r3, #24]
 801eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	681b      	ldr	r3, [r3, #0]
 801eeae:	681a      	ldr	r2, [r3, #0]
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eeb8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eebe:	1c5a      	adds	r2, r3, #1
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	651a      	str	r2, [r3, #80]	; 0x50
 801eec4:	e13e      	b.n	801f144 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eeca:	b29b      	uxth	r3, r3
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d113      	bne.n	801eef8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eed0:	2300      	movs	r3, #0
 801eed2:	62bb      	str	r3, [r7, #40]	; 0x28
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	695b      	ldr	r3, [r3, #20]
 801eeda:	62bb      	str	r3, [r7, #40]	; 0x28
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	699b      	ldr	r3, [r3, #24]
 801eee2:	62bb      	str	r3, [r7, #40]	; 0x28
 801eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	681a      	ldr	r2, [r3, #0]
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eef4:	601a      	str	r2, [r3, #0]
 801eef6:	e115      	b.n	801f124 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eefc:	b29b      	uxth	r3, r3
 801eefe:	2b01      	cmp	r3, #1
 801ef00:	f040 808a 	bne.w	801f018 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ef0a:	d137      	bne.n	801ef7c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	681a      	ldr	r2, [r3, #0]
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef1a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	685b      	ldr	r3, [r3, #4]
 801ef22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ef26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ef2a:	d113      	bne.n	801ef54 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	681a      	ldr	r2, [r3, #0]
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ef3a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	627b      	str	r3, [r7, #36]	; 0x24
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	695b      	ldr	r3, [r3, #20]
 801ef46:	627b      	str	r3, [r7, #36]	; 0x24
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	699b      	ldr	r3, [r3, #24]
 801ef4e:	627b      	str	r3, [r7, #36]	; 0x24
 801ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef52:	e0e7      	b.n	801f124 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801ef54:	2300      	movs	r3, #0
 801ef56:	623b      	str	r3, [r7, #32]
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	695b      	ldr	r3, [r3, #20]
 801ef5e:	623b      	str	r3, [r7, #32]
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	681b      	ldr	r3, [r3, #0]
 801ef64:	699b      	ldr	r3, [r3, #24]
 801ef66:	623b      	str	r3, [r7, #32]
 801ef68:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	681a      	ldr	r2, [r3, #0]
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ef78:	601a      	str	r2, [r3, #0]
 801ef7a:	e0d3      	b.n	801f124 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef7e:	2b08      	cmp	r3, #8
 801ef80:	d02e      	beq.n	801efe0 <I2C_Master_ADDR+0x1b2>
 801ef82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef84:	2b20      	cmp	r3, #32
 801ef86:	d02b      	beq.n	801efe0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801ef88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef8a:	2b12      	cmp	r3, #18
 801ef8c:	d102      	bne.n	801ef94 <I2C_Master_ADDR+0x166>
 801ef8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef90:	2b01      	cmp	r3, #1
 801ef92:	d125      	bne.n	801efe0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef96:	2b04      	cmp	r3, #4
 801ef98:	d00e      	beq.n	801efb8 <I2C_Master_ADDR+0x18a>
 801ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef9c:	2b02      	cmp	r3, #2
 801ef9e:	d00b      	beq.n	801efb8 <I2C_Master_ADDR+0x18a>
 801efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801efa2:	2b10      	cmp	r3, #16
 801efa4:	d008      	beq.n	801efb8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	681a      	ldr	r2, [r3, #0]
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801efb4:	601a      	str	r2, [r3, #0]
 801efb6:	e007      	b.n	801efc8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	681a      	ldr	r2, [r3, #0]
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801efc6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801efc8:	2300      	movs	r3, #0
 801efca:	61fb      	str	r3, [r7, #28]
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	695b      	ldr	r3, [r3, #20]
 801efd2:	61fb      	str	r3, [r7, #28]
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	699b      	ldr	r3, [r3, #24]
 801efda:	61fb      	str	r3, [r7, #28]
 801efdc:	69fb      	ldr	r3, [r7, #28]
 801efde:	e0a1      	b.n	801f124 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	681a      	ldr	r2, [r3, #0]
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	681b      	ldr	r3, [r3, #0]
 801efea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801efee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eff0:	2300      	movs	r3, #0
 801eff2:	61bb      	str	r3, [r7, #24]
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	695b      	ldr	r3, [r3, #20]
 801effa:	61bb      	str	r3, [r7, #24]
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	699b      	ldr	r3, [r3, #24]
 801f002:	61bb      	str	r3, [r7, #24]
 801f004:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	681a      	ldr	r2, [r3, #0]
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f014:	601a      	str	r2, [r3, #0]
 801f016:	e085      	b.n	801f124 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f01c:	b29b      	uxth	r3, r3
 801f01e:	2b02      	cmp	r3, #2
 801f020:	d14d      	bne.n	801f0be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f024:	2b04      	cmp	r3, #4
 801f026:	d016      	beq.n	801f056 <I2C_Master_ADDR+0x228>
 801f028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f02a:	2b02      	cmp	r3, #2
 801f02c:	d013      	beq.n	801f056 <I2C_Master_ADDR+0x228>
 801f02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f030:	2b10      	cmp	r3, #16
 801f032:	d010      	beq.n	801f056 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	681a      	ldr	r2, [r3, #0]
 801f03a:	687b      	ldr	r3, [r7, #4]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f042:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	681a      	ldr	r2, [r3, #0]
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f052:	601a      	str	r2, [r3, #0]
 801f054:	e007      	b.n	801f066 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	681a      	ldr	r2, [r3, #0]
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f064:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	685b      	ldr	r3, [r3, #4]
 801f06c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f074:	d117      	bne.n	801f0a6 <I2C_Master_ADDR+0x278>
 801f076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f07c:	d00b      	beq.n	801f096 <I2C_Master_ADDR+0x268>
 801f07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f080:	2b01      	cmp	r3, #1
 801f082:	d008      	beq.n	801f096 <I2C_Master_ADDR+0x268>
 801f084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f086:	2b08      	cmp	r3, #8
 801f088:	d005      	beq.n	801f096 <I2C_Master_ADDR+0x268>
 801f08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f08c:	2b10      	cmp	r3, #16
 801f08e:	d002      	beq.n	801f096 <I2C_Master_ADDR+0x268>
 801f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f092:	2b20      	cmp	r3, #32
 801f094:	d107      	bne.n	801f0a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	685a      	ldr	r2, [r3, #4]
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	681b      	ldr	r3, [r3, #0]
 801f0a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f0a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f0a6:	2300      	movs	r3, #0
 801f0a8:	617b      	str	r3, [r7, #20]
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	695b      	ldr	r3, [r3, #20]
 801f0b0:	617b      	str	r3, [r7, #20]
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	681b      	ldr	r3, [r3, #0]
 801f0b6:	699b      	ldr	r3, [r3, #24]
 801f0b8:	617b      	str	r3, [r7, #20]
 801f0ba:	697b      	ldr	r3, [r7, #20]
 801f0bc:	e032      	b.n	801f124 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	681a      	ldr	r2, [r3, #0]
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f0cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	685b      	ldr	r3, [r3, #4]
 801f0d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f0d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f0dc:	d117      	bne.n	801f10e <I2C_Master_ADDR+0x2e0>
 801f0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f0e4:	d00b      	beq.n	801f0fe <I2C_Master_ADDR+0x2d0>
 801f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0e8:	2b01      	cmp	r3, #1
 801f0ea:	d008      	beq.n	801f0fe <I2C_Master_ADDR+0x2d0>
 801f0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0ee:	2b08      	cmp	r3, #8
 801f0f0:	d005      	beq.n	801f0fe <I2C_Master_ADDR+0x2d0>
 801f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0f4:	2b10      	cmp	r3, #16
 801f0f6:	d002      	beq.n	801f0fe <I2C_Master_ADDR+0x2d0>
 801f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0fa:	2b20      	cmp	r3, #32
 801f0fc:	d107      	bne.n	801f10e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	685a      	ldr	r2, [r3, #4]
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f10c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f10e:	2300      	movs	r3, #0
 801f110:	613b      	str	r3, [r7, #16]
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	695b      	ldr	r3, [r3, #20]
 801f118:	613b      	str	r3, [r7, #16]
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	699b      	ldr	r3, [r3, #24]
 801f120:	613b      	str	r3, [r7, #16]
 801f122:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	2200      	movs	r2, #0
 801f128:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801f12a:	e00b      	b.n	801f144 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f12c:	2300      	movs	r3, #0
 801f12e:	60fb      	str	r3, [r7, #12]
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	695b      	ldr	r3, [r3, #20]
 801f136:	60fb      	str	r3, [r7, #12]
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	699b      	ldr	r3, [r3, #24]
 801f13e:	60fb      	str	r3, [r7, #12]
 801f140:	68fb      	ldr	r3, [r7, #12]
}
 801f142:	e7ff      	b.n	801f144 <I2C_Master_ADDR+0x316>
 801f144:	bf00      	nop
 801f146:	3744      	adds	r7, #68	; 0x44
 801f148:	46bd      	mov	sp, r7
 801f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f14e:	4770      	bx	lr

0801f150 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801f150:	b580      	push	{r7, lr}
 801f152:	b084      	sub	sp, #16
 801f154:	af00      	add	r7, sp, #0
 801f156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f15e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f164:	b29b      	uxth	r3, r3
 801f166:	2b00      	cmp	r3, #0
 801f168:	d02b      	beq.n	801f1c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f16e:	781a      	ldrb	r2, [r3, #0]
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f17a:	1c5a      	adds	r2, r3, #1
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f184:	b29b      	uxth	r3, r3
 801f186:	3b01      	subs	r3, #1
 801f188:	b29a      	uxth	r2, r3
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f192:	b29b      	uxth	r3, r3
 801f194:	2b00      	cmp	r3, #0
 801f196:	d114      	bne.n	801f1c2 <I2C_SlaveTransmit_TXE+0x72>
 801f198:	7bfb      	ldrb	r3, [r7, #15]
 801f19a:	2b29      	cmp	r3, #41	; 0x29
 801f19c:	d111      	bne.n	801f1c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	681b      	ldr	r3, [r3, #0]
 801f1a2:	685a      	ldr	r2, [r3, #4]
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f1ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	2221      	movs	r2, #33	; 0x21
 801f1b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	2228      	movs	r2, #40	; 0x28
 801f1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f1bc:	6878      	ldr	r0, [r7, #4]
 801f1be:	f7ff f9fb 	bl	801e5b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f1c2:	bf00      	nop
 801f1c4:	3710      	adds	r7, #16
 801f1c6:	46bd      	mov	sp, r7
 801f1c8:	bd80      	pop	{r7, pc}

0801f1ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801f1ca:	b480      	push	{r7}
 801f1cc:	b083      	sub	sp, #12
 801f1ce:	af00      	add	r7, sp, #0
 801f1d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f1d6:	b29b      	uxth	r3, r3
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d011      	beq.n	801f200 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1e0:	781a      	ldrb	r2, [r3, #0]
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1ec:	1c5a      	adds	r2, r3, #1
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f1f6:	b29b      	uxth	r3, r3
 801f1f8:	3b01      	subs	r3, #1
 801f1fa:	b29a      	uxth	r2, r3
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f200:	bf00      	nop
 801f202:	370c      	adds	r7, #12
 801f204:	46bd      	mov	sp, r7
 801f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f20a:	4770      	bx	lr

0801f20c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801f20c:	b580      	push	{r7, lr}
 801f20e:	b084      	sub	sp, #16
 801f210:	af00      	add	r7, sp, #0
 801f212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f21a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f220:	b29b      	uxth	r3, r3
 801f222:	2b00      	cmp	r3, #0
 801f224:	d02c      	beq.n	801f280 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	691a      	ldr	r2, [r3, #16]
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f230:	b2d2      	uxtb	r2, r2
 801f232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f238:	1c5a      	adds	r2, r3, #1
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f242:	b29b      	uxth	r3, r3
 801f244:	3b01      	subs	r3, #1
 801f246:	b29a      	uxth	r2, r3
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f250:	b29b      	uxth	r3, r3
 801f252:	2b00      	cmp	r3, #0
 801f254:	d114      	bne.n	801f280 <I2C_SlaveReceive_RXNE+0x74>
 801f256:	7bfb      	ldrb	r3, [r7, #15]
 801f258:	2b2a      	cmp	r3, #42	; 0x2a
 801f25a:	d111      	bne.n	801f280 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	685a      	ldr	r2, [r3, #4]
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f26a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	2222      	movs	r2, #34	; 0x22
 801f270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	2228      	movs	r2, #40	; 0x28
 801f276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f27a:	6878      	ldr	r0, [r7, #4]
 801f27c:	f7ff f9a6 	bl	801e5cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f280:	bf00      	nop
 801f282:	3710      	adds	r7, #16
 801f284:	46bd      	mov	sp, r7
 801f286:	bd80      	pop	{r7, pc}

0801f288 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801f288:	b480      	push	{r7}
 801f28a:	b083      	sub	sp, #12
 801f28c:	af00      	add	r7, sp, #0
 801f28e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f294:	b29b      	uxth	r3, r3
 801f296:	2b00      	cmp	r3, #0
 801f298:	d012      	beq.n	801f2c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	691a      	ldr	r2, [r3, #16]
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2a4:	b2d2      	uxtb	r2, r2
 801f2a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2ac:	1c5a      	adds	r2, r3, #1
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f2b6:	b29b      	uxth	r3, r3
 801f2b8:	3b01      	subs	r3, #1
 801f2ba:	b29a      	uxth	r2, r3
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f2c0:	bf00      	nop
 801f2c2:	370c      	adds	r7, #12
 801f2c4:	46bd      	mov	sp, r7
 801f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ca:	4770      	bx	lr

0801f2cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801f2cc:	b580      	push	{r7, lr}
 801f2ce:	b084      	sub	sp, #16
 801f2d0:	af00      	add	r7, sp, #0
 801f2d2:	6078      	str	r0, [r7, #4]
 801f2d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f2e0:	b2db      	uxtb	r3, r3
 801f2e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f2e6:	2b28      	cmp	r3, #40	; 0x28
 801f2e8:	d127      	bne.n	801f33a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	685a      	ldr	r2, [r3, #4]
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f2f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801f2fa:	683b      	ldr	r3, [r7, #0]
 801f2fc:	089b      	lsrs	r3, r3, #2
 801f2fe:	f003 0301 	and.w	r3, r3, #1
 801f302:	2b00      	cmp	r3, #0
 801f304:	d101      	bne.n	801f30a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801f306:	2301      	movs	r3, #1
 801f308:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801f30a:	683b      	ldr	r3, [r7, #0]
 801f30c:	09db      	lsrs	r3, r3, #7
 801f30e:	f003 0301 	and.w	r3, r3, #1
 801f312:	2b00      	cmp	r3, #0
 801f314:	d103      	bne.n	801f31e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	68db      	ldr	r3, [r3, #12]
 801f31a:	81bb      	strh	r3, [r7, #12]
 801f31c:	e002      	b.n	801f324 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	699b      	ldr	r3, [r3, #24]
 801f322:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	2200      	movs	r2, #0
 801f328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801f32c:	89ba      	ldrh	r2, [r7, #12]
 801f32e:	7bfb      	ldrb	r3, [r7, #15]
 801f330:	4619      	mov	r1, r3
 801f332:	6878      	ldr	r0, [r7, #4]
 801f334:	f7ff f954 	bl	801e5e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801f338:	e00e      	b.n	801f358 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f33a:	2300      	movs	r3, #0
 801f33c:	60bb      	str	r3, [r7, #8]
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	695b      	ldr	r3, [r3, #20]
 801f344:	60bb      	str	r3, [r7, #8]
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	699b      	ldr	r3, [r3, #24]
 801f34c:	60bb      	str	r3, [r7, #8]
 801f34e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	2200      	movs	r2, #0
 801f354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801f358:	bf00      	nop
 801f35a:	3710      	adds	r7, #16
 801f35c:	46bd      	mov	sp, r7
 801f35e:	bd80      	pop	{r7, pc}

0801f360 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b084      	sub	sp, #16
 801f364:	af00      	add	r7, sp, #0
 801f366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f36e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	685a      	ldr	r2, [r3, #4]
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f37e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801f380:	2300      	movs	r3, #0
 801f382:	60bb      	str	r3, [r7, #8]
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	695b      	ldr	r3, [r3, #20]
 801f38a:	60bb      	str	r3, [r7, #8]
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	681a      	ldr	r2, [r3, #0]
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	681b      	ldr	r3, [r3, #0]
 801f396:	f042 0201 	orr.w	r2, r2, #1
 801f39a:	601a      	str	r2, [r3, #0]
 801f39c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	681a      	ldr	r2, [r3, #0]
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f3ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	681b      	ldr	r3, [r3, #0]
 801f3b2:	685b      	ldr	r3, [r3, #4]
 801f3b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f3b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f3bc:	d172      	bne.n	801f4a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f3be:	7bfb      	ldrb	r3, [r7, #15]
 801f3c0:	2b22      	cmp	r3, #34	; 0x22
 801f3c2:	d002      	beq.n	801f3ca <I2C_Slave_STOPF+0x6a>
 801f3c4:	7bfb      	ldrb	r3, [r7, #15]
 801f3c6:	2b2a      	cmp	r3, #42	; 0x2a
 801f3c8:	d135      	bne.n	801f436 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801f3ca:	687b      	ldr	r3, [r7, #4]
 801f3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	685b      	ldr	r3, [r3, #4]
 801f3d2:	b29a      	uxth	r2, r3
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3dc:	b29b      	uxth	r3, r3
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d005      	beq.n	801f3ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3e6:	f043 0204 	orr.w	r2, r3, #4
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	685a      	ldr	r2, [r3, #4]
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f3fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f402:	4618      	mov	r0, r3
 801f404:	f7fd fc90 	bl	801cd28 <HAL_DMA_GetState>
 801f408:	4603      	mov	r3, r0
 801f40a:	2b01      	cmp	r3, #1
 801f40c:	d049      	beq.n	801f4a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f412:	4a69      	ldr	r2, [pc, #420]	; (801f5b8 <I2C_Slave_STOPF+0x258>)
 801f414:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f41a:	4618      	mov	r0, r3
 801f41c:	f7fd fad8 	bl	801c9d0 <HAL_DMA_Abort_IT>
 801f420:	4603      	mov	r3, r0
 801f422:	2b00      	cmp	r3, #0
 801f424:	d03d      	beq.n	801f4a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f42c:	687a      	ldr	r2, [r7, #4]
 801f42e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f430:	4610      	mov	r0, r2
 801f432:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f434:	e035      	b.n	801f4a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	685b      	ldr	r3, [r3, #4]
 801f43e:	b29a      	uxth	r2, r3
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f448:	b29b      	uxth	r3, r3
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d005      	beq.n	801f45a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f452:	f043 0204 	orr.w	r2, r3, #4
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	685a      	ldr	r2, [r3, #4]
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f468:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f46e:	4618      	mov	r0, r3
 801f470:	f7fd fc5a 	bl	801cd28 <HAL_DMA_GetState>
 801f474:	4603      	mov	r3, r0
 801f476:	2b01      	cmp	r3, #1
 801f478:	d014      	beq.n	801f4a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f47e:	4a4e      	ldr	r2, [pc, #312]	; (801f5b8 <I2C_Slave_STOPF+0x258>)
 801f480:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f486:	4618      	mov	r0, r3
 801f488:	f7fd faa2 	bl	801c9d0 <HAL_DMA_Abort_IT>
 801f48c:	4603      	mov	r3, r0
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d008      	beq.n	801f4a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f498:	687a      	ldr	r2, [r7, #4]
 801f49a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f49c:	4610      	mov	r0, r2
 801f49e:	4798      	blx	r3
 801f4a0:	e000      	b.n	801f4a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f4a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f4a8:	b29b      	uxth	r3, r3
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	d03e      	beq.n	801f52c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	681b      	ldr	r3, [r3, #0]
 801f4b2:	695b      	ldr	r3, [r3, #20]
 801f4b4:	f003 0304 	and.w	r3, r3, #4
 801f4b8:	2b04      	cmp	r3, #4
 801f4ba:	d112      	bne.n	801f4e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	691a      	ldr	r2, [r3, #16]
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4c6:	b2d2      	uxtb	r2, r2
 801f4c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4ce:	1c5a      	adds	r2, r3, #1
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f4d8:	b29b      	uxth	r3, r3
 801f4da:	3b01      	subs	r3, #1
 801f4dc:	b29a      	uxth	r2, r3
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	695b      	ldr	r3, [r3, #20]
 801f4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f4ec:	2b40      	cmp	r3, #64	; 0x40
 801f4ee:	d112      	bne.n	801f516 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	691a      	ldr	r2, [r3, #16]
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4fa:	b2d2      	uxtb	r2, r2
 801f4fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f502:	1c5a      	adds	r2, r3, #1
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f50c:	b29b      	uxth	r3, r3
 801f50e:	3b01      	subs	r3, #1
 801f510:	b29a      	uxth	r2, r3
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f51a:	b29b      	uxth	r3, r3
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d005      	beq.n	801f52c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f524:	f043 0204 	orr.w	r2, r3, #4
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f530:	2b00      	cmp	r3, #0
 801f532:	d003      	beq.n	801f53c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801f534:	6878      	ldr	r0, [r7, #4]
 801f536:	f000 f8b3 	bl	801f6a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801f53a:	e039      	b.n	801f5b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801f53c:	7bfb      	ldrb	r3, [r7, #15]
 801f53e:	2b2a      	cmp	r3, #42	; 0x2a
 801f540:	d109      	bne.n	801f556 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	2200      	movs	r2, #0
 801f546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	2228      	movs	r2, #40	; 0x28
 801f54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f550:	6878      	ldr	r0, [r7, #4]
 801f552:	f7ff f83b 	bl	801e5cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f55c:	b2db      	uxtb	r3, r3
 801f55e:	2b28      	cmp	r3, #40	; 0x28
 801f560:	d111      	bne.n	801f586 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	4a15      	ldr	r2, [pc, #84]	; (801f5bc <I2C_Slave_STOPF+0x25c>)
 801f566:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	2200      	movs	r2, #0
 801f56c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	2220      	movs	r2, #32
 801f572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	2200      	movs	r2, #0
 801f57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801f57e:	6878      	ldr	r0, [r7, #4]
 801f580:	f7ff f83c 	bl	801e5fc <HAL_I2C_ListenCpltCallback>
}
 801f584:	e014      	b.n	801f5b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f58a:	2b22      	cmp	r3, #34	; 0x22
 801f58c:	d002      	beq.n	801f594 <I2C_Slave_STOPF+0x234>
 801f58e:	7bfb      	ldrb	r3, [r7, #15]
 801f590:	2b22      	cmp	r3, #34	; 0x22
 801f592:	d10d      	bne.n	801f5b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	2200      	movs	r2, #0
 801f598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	2220      	movs	r2, #32
 801f59e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	2200      	movs	r2, #0
 801f5a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f5aa:	6878      	ldr	r0, [r7, #4]
 801f5ac:	f7ff f80e 	bl	801e5cc <HAL_I2C_SlaveRxCpltCallback>
}
 801f5b0:	bf00      	nop
 801f5b2:	3710      	adds	r7, #16
 801f5b4:	46bd      	mov	sp, r7
 801f5b6:	bd80      	pop	{r7, pc}
 801f5b8:	0801fe25 	.word	0x0801fe25
 801f5bc:	ffff0000 	.word	0xffff0000

0801f5c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b084      	sub	sp, #16
 801f5c4:	af00      	add	r7, sp, #0
 801f5c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f5ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801f5d6:	68bb      	ldr	r3, [r7, #8]
 801f5d8:	2b08      	cmp	r3, #8
 801f5da:	d002      	beq.n	801f5e2 <I2C_Slave_AF+0x22>
 801f5dc:	68bb      	ldr	r3, [r7, #8]
 801f5de:	2b20      	cmp	r3, #32
 801f5e0:	d129      	bne.n	801f636 <I2C_Slave_AF+0x76>
 801f5e2:	7bfb      	ldrb	r3, [r7, #15]
 801f5e4:	2b28      	cmp	r3, #40	; 0x28
 801f5e6:	d126      	bne.n	801f636 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	4a2c      	ldr	r2, [pc, #176]	; (801f69c <I2C_Slave_AF+0xdc>)
 801f5ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	685a      	ldr	r2, [r3, #4]
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f5fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f606:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	681a      	ldr	r2, [r3, #0]
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f616:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	2200      	movs	r2, #0
 801f61c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2220      	movs	r2, #32
 801f622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	2200      	movs	r2, #0
 801f62a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f62e:	6878      	ldr	r0, [r7, #4]
 801f630:	f7fe ffe4 	bl	801e5fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801f634:	e02e      	b.n	801f694 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801f636:	7bfb      	ldrb	r3, [r7, #15]
 801f638:	2b21      	cmp	r3, #33	; 0x21
 801f63a:	d126      	bne.n	801f68a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	4a17      	ldr	r2, [pc, #92]	; (801f69c <I2C_Slave_AF+0xdc>)
 801f640:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	2221      	movs	r2, #33	; 0x21
 801f646:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	2220      	movs	r2, #32
 801f64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	2200      	movs	r2, #0
 801f654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	685a      	ldr	r2, [r3, #4]
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f666:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f670:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	681a      	ldr	r2, [r3, #0]
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f680:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f682:	6878      	ldr	r0, [r7, #4]
 801f684:	f7fe ff98 	bl	801e5b8 <HAL_I2C_SlaveTxCpltCallback>
}
 801f688:	e004      	b.n	801f694 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f692:	615a      	str	r2, [r3, #20]
}
 801f694:	bf00      	nop
 801f696:	3710      	adds	r7, #16
 801f698:	46bd      	mov	sp, r7
 801f69a:	bd80      	pop	{r7, pc}
 801f69c:	ffff0000 	.word	0xffff0000

0801f6a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801f6a0:	b580      	push	{r7, lr}
 801f6a2:	b084      	sub	sp, #16
 801f6a4:	af00      	add	r7, sp, #0
 801f6a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f6ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f6b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f6b8:	7bbb      	ldrb	r3, [r7, #14]
 801f6ba:	2b10      	cmp	r3, #16
 801f6bc:	d002      	beq.n	801f6c4 <I2C_ITError+0x24>
 801f6be:	7bbb      	ldrb	r3, [r7, #14]
 801f6c0:	2b40      	cmp	r3, #64	; 0x40
 801f6c2:	d10a      	bne.n	801f6da <I2C_ITError+0x3a>
 801f6c4:	7bfb      	ldrb	r3, [r7, #15]
 801f6c6:	2b22      	cmp	r3, #34	; 0x22
 801f6c8:	d107      	bne.n	801f6da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	681a      	ldr	r2, [r3, #0]
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f6d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f6da:	7bfb      	ldrb	r3, [r7, #15]
 801f6dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f6e0:	2b28      	cmp	r3, #40	; 0x28
 801f6e2:	d107      	bne.n	801f6f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	2200      	movs	r2, #0
 801f6e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	2228      	movs	r2, #40	; 0x28
 801f6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801f6f2:	e015      	b.n	801f720 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	685b      	ldr	r3, [r3, #4]
 801f6fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f6fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f702:	d00a      	beq.n	801f71a <I2C_ITError+0x7a>
 801f704:	7bfb      	ldrb	r3, [r7, #15]
 801f706:	2b60      	cmp	r3, #96	; 0x60
 801f708:	d007      	beq.n	801f71a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801f70a:	687b      	ldr	r3, [r7, #4]
 801f70c:	2220      	movs	r2, #32
 801f70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	2200      	movs	r2, #0
 801f716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	2200      	movs	r2, #0
 801f71e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	685b      	ldr	r3, [r3, #4]
 801f726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f72a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f72e:	d162      	bne.n	801f7f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	685a      	ldr	r2, [r3, #4]
 801f736:	687b      	ldr	r3, [r7, #4]
 801f738:	681b      	ldr	r3, [r3, #0]
 801f73a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f73e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f748:	b2db      	uxtb	r3, r3
 801f74a:	2b01      	cmp	r3, #1
 801f74c:	d020      	beq.n	801f790 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f752:	4a6a      	ldr	r2, [pc, #424]	; (801f8fc <I2C_ITError+0x25c>)
 801f754:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f75a:	4618      	mov	r0, r3
 801f75c:	f7fd f938 	bl	801c9d0 <HAL_DMA_Abort_IT>
 801f760:	4603      	mov	r3, r0
 801f762:	2b00      	cmp	r3, #0
 801f764:	f000 8089 	beq.w	801f87a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	681b      	ldr	r3, [r3, #0]
 801f76c:	681a      	ldr	r2, [r3, #0]
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	f022 0201 	bic.w	r2, r2, #1
 801f776:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	2220      	movs	r2, #32
 801f77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f786:	687a      	ldr	r2, [r7, #4]
 801f788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f78a:	4610      	mov	r0, r2
 801f78c:	4798      	blx	r3
 801f78e:	e074      	b.n	801f87a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f794:	4a59      	ldr	r2, [pc, #356]	; (801f8fc <I2C_ITError+0x25c>)
 801f796:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f79c:	4618      	mov	r0, r3
 801f79e:	f7fd f917 	bl	801c9d0 <HAL_DMA_Abort_IT>
 801f7a2:	4603      	mov	r3, r0
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d068      	beq.n	801f87a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	695b      	ldr	r3, [r3, #20]
 801f7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7b2:	2b40      	cmp	r3, #64	; 0x40
 801f7b4:	d10b      	bne.n	801f7ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	691a      	ldr	r2, [r3, #16]
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7c0:	b2d2      	uxtb	r2, r2
 801f7c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7c8:	1c5a      	adds	r2, r3, #1
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f7ce:	687b      	ldr	r3, [r7, #4]
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	681a      	ldr	r2, [r3, #0]
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	f022 0201 	bic.w	r2, r2, #1
 801f7dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	2220      	movs	r2, #32
 801f7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f7ec:	687a      	ldr	r2, [r7, #4]
 801f7ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f7f0:	4610      	mov	r0, r2
 801f7f2:	4798      	blx	r3
 801f7f4:	e041      	b.n	801f87a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f7fc:	b2db      	uxtb	r3, r3
 801f7fe:	2b60      	cmp	r3, #96	; 0x60
 801f800:	d125      	bne.n	801f84e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	2220      	movs	r2, #32
 801f806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	2200      	movs	r2, #0
 801f80e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	695b      	ldr	r3, [r3, #20]
 801f816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f81a:	2b40      	cmp	r3, #64	; 0x40
 801f81c:	d10b      	bne.n	801f836 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	691a      	ldr	r2, [r3, #16]
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f828:	b2d2      	uxtb	r2, r2
 801f82a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f830:	1c5a      	adds	r2, r3, #1
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	681a      	ldr	r2, [r3, #0]
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	f022 0201 	bic.w	r2, r2, #1
 801f844:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801f846:	6878      	ldr	r0, [r7, #4]
 801f848:	f7fe feec 	bl	801e624 <HAL_I2C_AbortCpltCallback>
 801f84c:	e015      	b.n	801f87a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	695b      	ldr	r3, [r3, #20]
 801f854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f858:	2b40      	cmp	r3, #64	; 0x40
 801f85a:	d10b      	bne.n	801f874 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	691a      	ldr	r2, [r3, #16]
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f866:	b2d2      	uxtb	r2, r2
 801f868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f86e:	1c5a      	adds	r2, r3, #1
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801f874:	6878      	ldr	r0, [r7, #4]
 801f876:	f7fe fecb 	bl	801e610 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f87e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801f880:	68bb      	ldr	r3, [r7, #8]
 801f882:	f003 0301 	and.w	r3, r3, #1
 801f886:	2b00      	cmp	r3, #0
 801f888:	d10e      	bne.n	801f8a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801f88a:	68bb      	ldr	r3, [r7, #8]
 801f88c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801f890:	2b00      	cmp	r3, #0
 801f892:	d109      	bne.n	801f8a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801f894:	68bb      	ldr	r3, [r7, #8]
 801f896:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d104      	bne.n	801f8a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801f89e:	68bb      	ldr	r3, [r7, #8]
 801f8a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d007      	beq.n	801f8b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	685a      	ldr	r2, [r3, #4]
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	681b      	ldr	r3, [r3, #0]
 801f8b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f8b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f8be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8c4:	f003 0304 	and.w	r3, r3, #4
 801f8c8:	2b04      	cmp	r3, #4
 801f8ca:	d113      	bne.n	801f8f4 <I2C_ITError+0x254>
 801f8cc:	7bfb      	ldrb	r3, [r7, #15]
 801f8ce:	2b28      	cmp	r3, #40	; 0x28
 801f8d0:	d110      	bne.n	801f8f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	4a0a      	ldr	r2, [pc, #40]	; (801f900 <I2C_ITError+0x260>)
 801f8d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	2200      	movs	r2, #0
 801f8dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	2220      	movs	r2, #32
 801f8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	2200      	movs	r2, #0
 801f8ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f8ee:	6878      	ldr	r0, [r7, #4]
 801f8f0:	f7fe fe84 	bl	801e5fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801f8f4:	bf00      	nop
 801f8f6:	3710      	adds	r7, #16
 801f8f8:	46bd      	mov	sp, r7
 801f8fa:	bd80      	pop	{r7, pc}
 801f8fc:	0801fe25 	.word	0x0801fe25
 801f900:	ffff0000 	.word	0xffff0000

0801f904 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801f904:	b580      	push	{r7, lr}
 801f906:	b088      	sub	sp, #32
 801f908:	af02      	add	r7, sp, #8
 801f90a:	60f8      	str	r0, [r7, #12]
 801f90c:	4608      	mov	r0, r1
 801f90e:	4611      	mov	r1, r2
 801f910:	461a      	mov	r2, r3
 801f912:	4603      	mov	r3, r0
 801f914:	817b      	strh	r3, [r7, #10]
 801f916:	460b      	mov	r3, r1
 801f918:	813b      	strh	r3, [r7, #8]
 801f91a:	4613      	mov	r3, r2
 801f91c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	681a      	ldr	r2, [r3, #0]
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	681b      	ldr	r3, [r3, #0]
 801f928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f92c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f930:	9300      	str	r3, [sp, #0]
 801f932:	6a3b      	ldr	r3, [r7, #32]
 801f934:	2200      	movs	r2, #0
 801f936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f93a:	68f8      	ldr	r0, [r7, #12]
 801f93c:	f000 fb1a 	bl	801ff74 <I2C_WaitOnFlagUntilTimeout>
 801f940:	4603      	mov	r3, r0
 801f942:	2b00      	cmp	r3, #0
 801f944:	d00d      	beq.n	801f962 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f954:	d103      	bne.n	801f95e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f95c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f95e:	2303      	movs	r3, #3
 801f960:	e05f      	b.n	801fa22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f962:	897b      	ldrh	r3, [r7, #10]
 801f964:	b2db      	uxtb	r3, r3
 801f966:	461a      	mov	r2, r3
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f974:	6a3a      	ldr	r2, [r7, #32]
 801f976:	492d      	ldr	r1, [pc, #180]	; (801fa2c <I2C_RequestMemoryWrite+0x128>)
 801f978:	68f8      	ldr	r0, [r7, #12]
 801f97a:	f000 fb52 	bl	8020022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f97e:	4603      	mov	r3, r0
 801f980:	2b00      	cmp	r3, #0
 801f982:	d001      	beq.n	801f988 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801f984:	2301      	movs	r3, #1
 801f986:	e04c      	b.n	801fa22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f988:	2300      	movs	r3, #0
 801f98a:	617b      	str	r3, [r7, #20]
 801f98c:	68fb      	ldr	r3, [r7, #12]
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	695b      	ldr	r3, [r3, #20]
 801f992:	617b      	str	r3, [r7, #20]
 801f994:	68fb      	ldr	r3, [r7, #12]
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	699b      	ldr	r3, [r3, #24]
 801f99a:	617b      	str	r3, [r7, #20]
 801f99c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f9a0:	6a39      	ldr	r1, [r7, #32]
 801f9a2:	68f8      	ldr	r0, [r7, #12]
 801f9a4:	f000 fbbc 	bl	8020120 <I2C_WaitOnTXEFlagUntilTimeout>
 801f9a8:	4603      	mov	r3, r0
 801f9aa:	2b00      	cmp	r3, #0
 801f9ac:	d00d      	beq.n	801f9ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f9ae:	68fb      	ldr	r3, [r7, #12]
 801f9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f9b2:	2b04      	cmp	r3, #4
 801f9b4:	d107      	bne.n	801f9c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	681a      	ldr	r2, [r3, #0]
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f9c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801f9c6:	2301      	movs	r3, #1
 801f9c8:	e02b      	b.n	801fa22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801f9ca:	88fb      	ldrh	r3, [r7, #6]
 801f9cc:	2b01      	cmp	r3, #1
 801f9ce:	d105      	bne.n	801f9dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801f9d0:	893b      	ldrh	r3, [r7, #8]
 801f9d2:	b2da      	uxtb	r2, r3
 801f9d4:	68fb      	ldr	r3, [r7, #12]
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	611a      	str	r2, [r3, #16]
 801f9da:	e021      	b.n	801fa20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801f9dc:	893b      	ldrh	r3, [r7, #8]
 801f9de:	0a1b      	lsrs	r3, r3, #8
 801f9e0:	b29b      	uxth	r3, r3
 801f9e2:	b2da      	uxtb	r2, r3
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	681b      	ldr	r3, [r3, #0]
 801f9e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801f9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f9ec:	6a39      	ldr	r1, [r7, #32]
 801f9ee:	68f8      	ldr	r0, [r7, #12]
 801f9f0:	f000 fb96 	bl	8020120 <I2C_WaitOnTXEFlagUntilTimeout>
 801f9f4:	4603      	mov	r3, r0
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	d00d      	beq.n	801fa16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801f9fa:	68fb      	ldr	r3, [r7, #12]
 801f9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f9fe:	2b04      	cmp	r3, #4
 801fa00:	d107      	bne.n	801fa12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fa02:	68fb      	ldr	r3, [r7, #12]
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	681a      	ldr	r2, [r3, #0]
 801fa08:	68fb      	ldr	r3, [r7, #12]
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fa10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fa12:	2301      	movs	r3, #1
 801fa14:	e005      	b.n	801fa22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fa16:	893b      	ldrh	r3, [r7, #8]
 801fa18:	b2da      	uxtb	r2, r3
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	681b      	ldr	r3, [r3, #0]
 801fa1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801fa20:	2300      	movs	r3, #0
}
 801fa22:	4618      	mov	r0, r3
 801fa24:	3718      	adds	r7, #24
 801fa26:	46bd      	mov	sp, r7
 801fa28:	bd80      	pop	{r7, pc}
 801fa2a:	bf00      	nop
 801fa2c:	00010002 	.word	0x00010002

0801fa30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fa30:	b580      	push	{r7, lr}
 801fa32:	b088      	sub	sp, #32
 801fa34:	af02      	add	r7, sp, #8
 801fa36:	60f8      	str	r0, [r7, #12]
 801fa38:	4608      	mov	r0, r1
 801fa3a:	4611      	mov	r1, r2
 801fa3c:	461a      	mov	r2, r3
 801fa3e:	4603      	mov	r3, r0
 801fa40:	817b      	strh	r3, [r7, #10]
 801fa42:	460b      	mov	r3, r1
 801fa44:	813b      	strh	r3, [r7, #8]
 801fa46:	4613      	mov	r3, r2
 801fa48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	681a      	ldr	r2, [r3, #0]
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fa58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fa5a:	68fb      	ldr	r3, [r7, #12]
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	681a      	ldr	r2, [r3, #0]
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fa68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa6c:	9300      	str	r3, [sp, #0]
 801fa6e:	6a3b      	ldr	r3, [r7, #32]
 801fa70:	2200      	movs	r2, #0
 801fa72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fa76:	68f8      	ldr	r0, [r7, #12]
 801fa78:	f000 fa7c 	bl	801ff74 <I2C_WaitOnFlagUntilTimeout>
 801fa7c:	4603      	mov	r3, r0
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d00d      	beq.n	801fa9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fa82:	68fb      	ldr	r3, [r7, #12]
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fa8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fa90:	d103      	bne.n	801fa9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fa98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fa9a:	2303      	movs	r3, #3
 801fa9c:	e0aa      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fa9e:	897b      	ldrh	r3, [r7, #10]
 801faa0:	b2db      	uxtb	r3, r3
 801faa2:	461a      	mov	r2, r3
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801faac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801faae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fab0:	6a3a      	ldr	r2, [r7, #32]
 801fab2:	4952      	ldr	r1, [pc, #328]	; (801fbfc <I2C_RequestMemoryRead+0x1cc>)
 801fab4:	68f8      	ldr	r0, [r7, #12]
 801fab6:	f000 fab4 	bl	8020022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801faba:	4603      	mov	r3, r0
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d001      	beq.n	801fac4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801fac0:	2301      	movs	r3, #1
 801fac2:	e097      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fac4:	2300      	movs	r3, #0
 801fac6:	617b      	str	r3, [r7, #20]
 801fac8:	68fb      	ldr	r3, [r7, #12]
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	695b      	ldr	r3, [r3, #20]
 801face:	617b      	str	r3, [r7, #20]
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	699b      	ldr	r3, [r3, #24]
 801fad6:	617b      	str	r3, [r7, #20]
 801fad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fadc:	6a39      	ldr	r1, [r7, #32]
 801fade:	68f8      	ldr	r0, [r7, #12]
 801fae0:	f000 fb1e 	bl	8020120 <I2C_WaitOnTXEFlagUntilTimeout>
 801fae4:	4603      	mov	r3, r0
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d00d      	beq.n	801fb06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801faea:	68fb      	ldr	r3, [r7, #12]
 801faec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801faee:	2b04      	cmp	r3, #4
 801faf0:	d107      	bne.n	801fb02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801faf2:	68fb      	ldr	r3, [r7, #12]
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	681a      	ldr	r2, [r3, #0]
 801faf8:	68fb      	ldr	r3, [r7, #12]
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fb00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fb02:	2301      	movs	r3, #1
 801fb04:	e076      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801fb06:	88fb      	ldrh	r3, [r7, #6]
 801fb08:	2b01      	cmp	r3, #1
 801fb0a:	d105      	bne.n	801fb18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fb0c:	893b      	ldrh	r3, [r7, #8]
 801fb0e:	b2da      	uxtb	r2, r3
 801fb10:	68fb      	ldr	r3, [r7, #12]
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	611a      	str	r2, [r3, #16]
 801fb16:	e021      	b.n	801fb5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fb18:	893b      	ldrh	r3, [r7, #8]
 801fb1a:	0a1b      	lsrs	r3, r3, #8
 801fb1c:	b29b      	uxth	r3, r3
 801fb1e:	b2da      	uxtb	r2, r3
 801fb20:	68fb      	ldr	r3, [r7, #12]
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fb26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fb28:	6a39      	ldr	r1, [r7, #32]
 801fb2a:	68f8      	ldr	r0, [r7, #12]
 801fb2c:	f000 faf8 	bl	8020120 <I2C_WaitOnTXEFlagUntilTimeout>
 801fb30:	4603      	mov	r3, r0
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d00d      	beq.n	801fb52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fb36:	68fb      	ldr	r3, [r7, #12]
 801fb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb3a:	2b04      	cmp	r3, #4
 801fb3c:	d107      	bne.n	801fb4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	681b      	ldr	r3, [r3, #0]
 801fb42:	681a      	ldr	r2, [r3, #0]
 801fb44:	68fb      	ldr	r3, [r7, #12]
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fb4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fb4e:	2301      	movs	r3, #1
 801fb50:	e050      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fb52:	893b      	ldrh	r3, [r7, #8]
 801fb54:	b2da      	uxtb	r2, r3
 801fb56:	68fb      	ldr	r3, [r7, #12]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fb5e:	6a39      	ldr	r1, [r7, #32]
 801fb60:	68f8      	ldr	r0, [r7, #12]
 801fb62:	f000 fadd 	bl	8020120 <I2C_WaitOnTXEFlagUntilTimeout>
 801fb66:	4603      	mov	r3, r0
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d00d      	beq.n	801fb88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fb6c:	68fb      	ldr	r3, [r7, #12]
 801fb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb70:	2b04      	cmp	r3, #4
 801fb72:	d107      	bne.n	801fb84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	681a      	ldr	r2, [r3, #0]
 801fb7a:	68fb      	ldr	r3, [r7, #12]
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fb82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fb84:	2301      	movs	r3, #1
 801fb86:	e035      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fb88:	68fb      	ldr	r3, [r7, #12]
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	681a      	ldr	r2, [r3, #0]
 801fb8e:	68fb      	ldr	r3, [r7, #12]
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fb96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb9a:	9300      	str	r3, [sp, #0]
 801fb9c:	6a3b      	ldr	r3, [r7, #32]
 801fb9e:	2200      	movs	r2, #0
 801fba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fba4:	68f8      	ldr	r0, [r7, #12]
 801fba6:	f000 f9e5 	bl	801ff74 <I2C_WaitOnFlagUntilTimeout>
 801fbaa:	4603      	mov	r3, r0
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d00d      	beq.n	801fbcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fbb0:	68fb      	ldr	r3, [r7, #12]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	681b      	ldr	r3, [r3, #0]
 801fbb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fbba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fbbe:	d103      	bne.n	801fbc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fbc0:	68fb      	ldr	r3, [r7, #12]
 801fbc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fbc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fbc8:	2303      	movs	r3, #3
 801fbca:	e013      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801fbcc:	897b      	ldrh	r3, [r7, #10]
 801fbce:	b2db      	uxtb	r3, r3
 801fbd0:	f043 0301 	orr.w	r3, r3, #1
 801fbd4:	b2da      	uxtb	r2, r3
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	681b      	ldr	r3, [r3, #0]
 801fbda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbde:	6a3a      	ldr	r2, [r7, #32]
 801fbe0:	4906      	ldr	r1, [pc, #24]	; (801fbfc <I2C_RequestMemoryRead+0x1cc>)
 801fbe2:	68f8      	ldr	r0, [r7, #12]
 801fbe4:	f000 fa1d 	bl	8020022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fbe8:	4603      	mov	r3, r0
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	d001      	beq.n	801fbf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801fbee:	2301      	movs	r3, #1
 801fbf0:	e000      	b.n	801fbf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801fbf2:	2300      	movs	r3, #0
}
 801fbf4:	4618      	mov	r0, r3
 801fbf6:	3718      	adds	r7, #24
 801fbf8:	46bd      	mov	sp, r7
 801fbfa:	bd80      	pop	{r7, pc}
 801fbfc:	00010002 	.word	0x00010002

0801fc00 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801fc00:	b580      	push	{r7, lr}
 801fc02:	b086      	sub	sp, #24
 801fc04:	af00      	add	r7, sp, #0
 801fc06:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801fc0e:	697b      	ldr	r3, [r7, #20]
 801fc10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fc14:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801fc16:	697b      	ldr	r3, [r7, #20]
 801fc18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fc1c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801fc1e:	697b      	ldr	r3, [r7, #20]
 801fc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fc22:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fc24:	697b      	ldr	r3, [r7, #20]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	685a      	ldr	r2, [r3, #4]
 801fc2a:	697b      	ldr	r3, [r7, #20]
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801fc32:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801fc34:	697b      	ldr	r3, [r7, #20]
 801fc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d003      	beq.n	801fc44 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801fc3c:	697b      	ldr	r3, [r7, #20]
 801fc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fc40:	2200      	movs	r2, #0
 801fc42:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801fc44:	697b      	ldr	r3, [r7, #20]
 801fc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	d003      	beq.n	801fc54 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801fc4c:	697b      	ldr	r3, [r7, #20]
 801fc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc50:	2200      	movs	r2, #0
 801fc52:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801fc54:	7cfb      	ldrb	r3, [r7, #19]
 801fc56:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801fc5a:	2b21      	cmp	r3, #33	; 0x21
 801fc5c:	d007      	beq.n	801fc6e <I2C_DMAXferCplt+0x6e>
 801fc5e:	7cfb      	ldrb	r3, [r7, #19]
 801fc60:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801fc64:	2b22      	cmp	r3, #34	; 0x22
 801fc66:	d131      	bne.n	801fccc <I2C_DMAXferCplt+0xcc>
 801fc68:	7cbb      	ldrb	r3, [r7, #18]
 801fc6a:	2b20      	cmp	r3, #32
 801fc6c:	d12e      	bne.n	801fccc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801fc6e:	697b      	ldr	r3, [r7, #20]
 801fc70:	681b      	ldr	r3, [r3, #0]
 801fc72:	685a      	ldr	r2, [r3, #4]
 801fc74:	697b      	ldr	r3, [r7, #20]
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801fc7c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801fc7e:	697b      	ldr	r3, [r7, #20]
 801fc80:	2200      	movs	r2, #0
 801fc82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801fc84:	7cfb      	ldrb	r3, [r7, #19]
 801fc86:	2b29      	cmp	r3, #41	; 0x29
 801fc88:	d10a      	bne.n	801fca0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801fc8a:	697b      	ldr	r3, [r7, #20]
 801fc8c:	2221      	movs	r2, #33	; 0x21
 801fc8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801fc90:	697b      	ldr	r3, [r7, #20]
 801fc92:	2228      	movs	r2, #40	; 0x28
 801fc94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801fc98:	6978      	ldr	r0, [r7, #20]
 801fc9a:	f7fe fc8d 	bl	801e5b8 <HAL_I2C_SlaveTxCpltCallback>
 801fc9e:	e00c      	b.n	801fcba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801fca0:	7cfb      	ldrb	r3, [r7, #19]
 801fca2:	2b2a      	cmp	r3, #42	; 0x2a
 801fca4:	d109      	bne.n	801fcba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801fca6:	697b      	ldr	r3, [r7, #20]
 801fca8:	2222      	movs	r2, #34	; 0x22
 801fcaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801fcac:	697b      	ldr	r3, [r7, #20]
 801fcae:	2228      	movs	r2, #40	; 0x28
 801fcb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801fcb4:	6978      	ldr	r0, [r7, #20]
 801fcb6:	f7fe fc89 	bl	801e5cc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fcba:	697b      	ldr	r3, [r7, #20]
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	685a      	ldr	r2, [r3, #4]
 801fcc0:	697b      	ldr	r3, [r7, #20]
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801fcc8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801fcca:	e06a      	b.n	801fda2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801fccc:	697b      	ldr	r3, [r7, #20]
 801fcce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fcd2:	b2db      	uxtb	r3, r3
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d064      	beq.n	801fda2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801fcd8:	697b      	ldr	r3, [r7, #20]
 801fcda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fcdc:	b29b      	uxth	r3, r3
 801fcde:	2b01      	cmp	r3, #1
 801fce0:	d107      	bne.n	801fcf2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fce2:	697b      	ldr	r3, [r7, #20]
 801fce4:	681b      	ldr	r3, [r3, #0]
 801fce6:	681a      	ldr	r2, [r3, #0]
 801fce8:	697b      	ldr	r3, [r7, #20]
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fcf0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fcf2:	697b      	ldr	r3, [r7, #20]
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	685a      	ldr	r2, [r3, #4]
 801fcf8:	697b      	ldr	r3, [r7, #20]
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801fd00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801fd08:	d009      	beq.n	801fd1e <I2C_DMAXferCplt+0x11e>
 801fd0a:	68fb      	ldr	r3, [r7, #12]
 801fd0c:	2b08      	cmp	r3, #8
 801fd0e:	d006      	beq.n	801fd1e <I2C_DMAXferCplt+0x11e>
 801fd10:	68fb      	ldr	r3, [r7, #12]
 801fd12:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801fd16:	d002      	beq.n	801fd1e <I2C_DMAXferCplt+0x11e>
 801fd18:	68fb      	ldr	r3, [r7, #12]
 801fd1a:	2b20      	cmp	r3, #32
 801fd1c:	d107      	bne.n	801fd2e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fd1e:	697b      	ldr	r3, [r7, #20]
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	681a      	ldr	r2, [r3, #0]
 801fd24:	697b      	ldr	r3, [r7, #20]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd2c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801fd2e:	697b      	ldr	r3, [r7, #20]
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	685a      	ldr	r2, [r3, #4]
 801fd34:	697b      	ldr	r3, [r7, #20]
 801fd36:	681b      	ldr	r3, [r3, #0]
 801fd38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801fd3c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801fd3e:	697b      	ldr	r3, [r7, #20]
 801fd40:	681b      	ldr	r3, [r3, #0]
 801fd42:	685a      	ldr	r2, [r3, #4]
 801fd44:	697b      	ldr	r3, [r7, #20]
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801fd4c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801fd4e:	697b      	ldr	r3, [r7, #20]
 801fd50:	2200      	movs	r2, #0
 801fd52:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801fd54:	697b      	ldr	r3, [r7, #20]
 801fd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d003      	beq.n	801fd64 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801fd5c:	6978      	ldr	r0, [r7, #20]
 801fd5e:	f7fe fc57 	bl	801e610 <HAL_I2C_ErrorCallback>
}
 801fd62:	e01e      	b.n	801fda2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801fd64:	697b      	ldr	r3, [r7, #20]
 801fd66:	2220      	movs	r2, #32
 801fd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801fd6c:	697b      	ldr	r3, [r7, #20]
 801fd6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fd72:	b2db      	uxtb	r3, r3
 801fd74:	2b40      	cmp	r3, #64	; 0x40
 801fd76:	d10a      	bne.n	801fd8e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801fd78:	697b      	ldr	r3, [r7, #20]
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801fd80:	697b      	ldr	r3, [r7, #20]
 801fd82:	2200      	movs	r2, #0
 801fd84:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801fd86:	6978      	ldr	r0, [r7, #20]
 801fd88:	f7e1 fc92 	bl	80016b0 <HAL_I2C_MemRxCpltCallback>
}
 801fd8c:	e009      	b.n	801fda2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801fd8e:	697b      	ldr	r3, [r7, #20]
 801fd90:	2200      	movs	r2, #0
 801fd92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801fd96:	697b      	ldr	r3, [r7, #20]
 801fd98:	2212      	movs	r2, #18
 801fd9a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801fd9c:	6978      	ldr	r0, [r7, #20]
 801fd9e:	f7e1 fc9d 	bl	80016dc <HAL_I2C_MasterRxCpltCallback>
}
 801fda2:	bf00      	nop
 801fda4:	3718      	adds	r7, #24
 801fda6:	46bd      	mov	sp, r7
 801fda8:	bd80      	pop	{r7, pc}

0801fdaa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801fdaa:	b580      	push	{r7, lr}
 801fdac:	b084      	sub	sp, #16
 801fdae:	af00      	add	r7, sp, #0
 801fdb0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdb6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	d003      	beq.n	801fdc8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801fdc0:	68fb      	ldr	r3, [r7, #12]
 801fdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fdc4:	2200      	movs	r2, #0
 801fdc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801fdc8:	68fb      	ldr	r3, [r7, #12]
 801fdca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d003      	beq.n	801fdd8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801fdd0:	68fb      	ldr	r3, [r7, #12]
 801fdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdd4:	2200      	movs	r2, #0
 801fdd6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801fdd8:	6878      	ldr	r0, [r7, #4]
 801fdda:	f7fc ffb3 	bl	801cd44 <HAL_DMA_GetError>
 801fdde:	4603      	mov	r3, r0
 801fde0:	2b02      	cmp	r3, #2
 801fde2:	d01b      	beq.n	801fe1c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801fde4:	68fb      	ldr	r3, [r7, #12]
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	681a      	ldr	r2, [r3, #0]
 801fdea:	68fb      	ldr	r3, [r7, #12]
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fdf2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801fdf4:	68fb      	ldr	r3, [r7, #12]
 801fdf6:	2200      	movs	r2, #0
 801fdf8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801fdfa:	68fb      	ldr	r3, [r7, #12]
 801fdfc:	2220      	movs	r2, #32
 801fdfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	2200      	movs	r2, #0
 801fe06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801fe0a:	68fb      	ldr	r3, [r7, #12]
 801fe0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe0e:	f043 0210 	orr.w	r2, r3, #16
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801fe16:	68f8      	ldr	r0, [r7, #12]
 801fe18:	f7fe fbfa 	bl	801e610 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801fe1c:	bf00      	nop
 801fe1e:	3710      	adds	r7, #16
 801fe20:	46bd      	mov	sp, r7
 801fe22:	bd80      	pop	{r7, pc}

0801fe24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b086      	sub	sp, #24
 801fe28:	af00      	add	r7, sp, #0
 801fe2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801fe36:	697b      	ldr	r3, [r7, #20]
 801fe38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fe3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801fe3e:	4b4b      	ldr	r3, [pc, #300]	; (801ff6c <I2C_DMAAbort+0x148>)
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	08db      	lsrs	r3, r3, #3
 801fe44:	4a4a      	ldr	r2, [pc, #296]	; (801ff70 <I2C_DMAAbort+0x14c>)
 801fe46:	fba2 2303 	umull	r2, r3, r2, r3
 801fe4a:	0a1a      	lsrs	r2, r3, #8
 801fe4c:	4613      	mov	r3, r2
 801fe4e:	009b      	lsls	r3, r3, #2
 801fe50:	4413      	add	r3, r2
 801fe52:	00da      	lsls	r2, r3, #3
 801fe54:	1ad3      	subs	r3, r2, r3
 801fe56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801fe58:	68fb      	ldr	r3, [r7, #12]
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d106      	bne.n	801fe6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801fe5e:	697b      	ldr	r3, [r7, #20]
 801fe60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe62:	f043 0220 	orr.w	r2, r3, #32
 801fe66:	697b      	ldr	r3, [r7, #20]
 801fe68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801fe6a:	e00a      	b.n	801fe82 <I2C_DMAAbort+0x5e>
    }
    count--;
 801fe6c:	68fb      	ldr	r3, [r7, #12]
 801fe6e:	3b01      	subs	r3, #1
 801fe70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801fe72:	697b      	ldr	r3, [r7, #20]
 801fe74:	681b      	ldr	r3, [r3, #0]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801fe7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fe80:	d0ea      	beq.n	801fe58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801fe82:	697b      	ldr	r3, [r7, #20]
 801fe84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	d003      	beq.n	801fe92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801fe8a:	697b      	ldr	r3, [r7, #20]
 801fe8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fe8e:	2200      	movs	r2, #0
 801fe90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801fe92:	697b      	ldr	r3, [r7, #20]
 801fe94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d003      	beq.n	801fea2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe9e:	2200      	movs	r2, #0
 801fea0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fea2:	697b      	ldr	r3, [r7, #20]
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	681a      	ldr	r2, [r3, #0]
 801fea8:	697b      	ldr	r3, [r7, #20]
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801feb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801feb2:	697b      	ldr	r3, [r7, #20]
 801feb4:	2200      	movs	r2, #0
 801feb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801feb8:	697b      	ldr	r3, [r7, #20]
 801feba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801febc:	2b00      	cmp	r3, #0
 801febe:	d003      	beq.n	801fec8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801fec0:	697b      	ldr	r3, [r7, #20]
 801fec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fec4:	2200      	movs	r2, #0
 801fec6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801fec8:	697b      	ldr	r3, [r7, #20]
 801feca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d003      	beq.n	801fed8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801fed0:	697b      	ldr	r3, [r7, #20]
 801fed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fed4:	2200      	movs	r2, #0
 801fed6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801fed8:	697b      	ldr	r3, [r7, #20]
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	681a      	ldr	r2, [r3, #0]
 801fede:	697b      	ldr	r3, [r7, #20]
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	f022 0201 	bic.w	r2, r2, #1
 801fee6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801fee8:	697b      	ldr	r3, [r7, #20]
 801feea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801feee:	b2db      	uxtb	r3, r3
 801fef0:	2b60      	cmp	r3, #96	; 0x60
 801fef2:	d10e      	bne.n	801ff12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801fef4:	697b      	ldr	r3, [r7, #20]
 801fef6:	2220      	movs	r2, #32
 801fef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801fefc:	697b      	ldr	r3, [r7, #20]
 801fefe:	2200      	movs	r2, #0
 801ff00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801ff04:	697b      	ldr	r3, [r7, #20]
 801ff06:	2200      	movs	r2, #0
 801ff08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801ff0a:	6978      	ldr	r0, [r7, #20]
 801ff0c:	f7fe fb8a 	bl	801e624 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801ff10:	e027      	b.n	801ff62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801ff12:	7cfb      	ldrb	r3, [r7, #19]
 801ff14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ff18:	2b28      	cmp	r3, #40	; 0x28
 801ff1a:	d117      	bne.n	801ff4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801ff1c:	697b      	ldr	r3, [r7, #20]
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	681a      	ldr	r2, [r3, #0]
 801ff22:	697b      	ldr	r3, [r7, #20]
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	f042 0201 	orr.w	r2, r2, #1
 801ff2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ff2c:	697b      	ldr	r3, [r7, #20]
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	681a      	ldr	r2, [r3, #0]
 801ff32:	697b      	ldr	r3, [r7, #20]
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ff3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801ff3c:	697b      	ldr	r3, [r7, #20]
 801ff3e:	2200      	movs	r2, #0
 801ff40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801ff42:	697b      	ldr	r3, [r7, #20]
 801ff44:	2228      	movs	r2, #40	; 0x28
 801ff46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801ff4a:	e007      	b.n	801ff5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801ff4c:	697b      	ldr	r3, [r7, #20]
 801ff4e:	2220      	movs	r2, #32
 801ff50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ff54:	697b      	ldr	r3, [r7, #20]
 801ff56:	2200      	movs	r2, #0
 801ff58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801ff5c:	6978      	ldr	r0, [r7, #20]
 801ff5e:	f7fe fb57 	bl	801e610 <HAL_I2C_ErrorCallback>
}
 801ff62:	bf00      	nop
 801ff64:	3718      	adds	r7, #24
 801ff66:	46bd      	mov	sp, r7
 801ff68:	bd80      	pop	{r7, pc}
 801ff6a:	bf00      	nop
 801ff6c:	20000020 	.word	0x20000020
 801ff70:	14f8b589 	.word	0x14f8b589

0801ff74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801ff74:	b580      	push	{r7, lr}
 801ff76:	b084      	sub	sp, #16
 801ff78:	af00      	add	r7, sp, #0
 801ff7a:	60f8      	str	r0, [r7, #12]
 801ff7c:	60b9      	str	r1, [r7, #8]
 801ff7e:	603b      	str	r3, [r7, #0]
 801ff80:	4613      	mov	r3, r2
 801ff82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ff84:	e025      	b.n	801ffd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ff86:	683b      	ldr	r3, [r7, #0]
 801ff88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff8c:	d021      	beq.n	801ffd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ff8e:	f7fb fe57 	bl	801bc40 <HAL_GetTick>
 801ff92:	4602      	mov	r2, r0
 801ff94:	69bb      	ldr	r3, [r7, #24]
 801ff96:	1ad3      	subs	r3, r2, r3
 801ff98:	683a      	ldr	r2, [r7, #0]
 801ff9a:	429a      	cmp	r2, r3
 801ff9c:	d302      	bcc.n	801ffa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 801ff9e:	683b      	ldr	r3, [r7, #0]
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	d116      	bne.n	801ffd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801ffa4:	68fb      	ldr	r3, [r7, #12]
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	2220      	movs	r2, #32
 801ffae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ffbe:	f043 0220 	orr.w	r2, r3, #32
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ffc6:	68fb      	ldr	r3, [r7, #12]
 801ffc8:	2200      	movs	r2, #0
 801ffca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ffce:	2301      	movs	r3, #1
 801ffd0:	e023      	b.n	802001a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ffd2:	68bb      	ldr	r3, [r7, #8]
 801ffd4:	0c1b      	lsrs	r3, r3, #16
 801ffd6:	b2db      	uxtb	r3, r3
 801ffd8:	2b01      	cmp	r3, #1
 801ffda:	d10d      	bne.n	801fff8 <I2C_WaitOnFlagUntilTimeout+0x84>
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	695b      	ldr	r3, [r3, #20]
 801ffe2:	43da      	mvns	r2, r3
 801ffe4:	68bb      	ldr	r3, [r7, #8]
 801ffe6:	4013      	ands	r3, r2
 801ffe8:	b29b      	uxth	r3, r3
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	bf0c      	ite	eq
 801ffee:	2301      	moveq	r3, #1
 801fff0:	2300      	movne	r3, #0
 801fff2:	b2db      	uxtb	r3, r3
 801fff4:	461a      	mov	r2, r3
 801fff6:	e00c      	b.n	8020012 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801fff8:	68fb      	ldr	r3, [r7, #12]
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	699b      	ldr	r3, [r3, #24]
 801fffe:	43da      	mvns	r2, r3
 8020000:	68bb      	ldr	r3, [r7, #8]
 8020002:	4013      	ands	r3, r2
 8020004:	b29b      	uxth	r3, r3
 8020006:	2b00      	cmp	r3, #0
 8020008:	bf0c      	ite	eq
 802000a:	2301      	moveq	r3, #1
 802000c:	2300      	movne	r3, #0
 802000e:	b2db      	uxtb	r3, r3
 8020010:	461a      	mov	r2, r3
 8020012:	79fb      	ldrb	r3, [r7, #7]
 8020014:	429a      	cmp	r2, r3
 8020016:	d0b6      	beq.n	801ff86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8020018:	2300      	movs	r3, #0
}
 802001a:	4618      	mov	r0, r3
 802001c:	3710      	adds	r7, #16
 802001e:	46bd      	mov	sp, r7
 8020020:	bd80      	pop	{r7, pc}

08020022 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8020022:	b580      	push	{r7, lr}
 8020024:	b084      	sub	sp, #16
 8020026:	af00      	add	r7, sp, #0
 8020028:	60f8      	str	r0, [r7, #12]
 802002a:	60b9      	str	r1, [r7, #8]
 802002c:	607a      	str	r2, [r7, #4]
 802002e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020030:	e051      	b.n	80200d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020032:	68fb      	ldr	r3, [r7, #12]
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	695b      	ldr	r3, [r3, #20]
 8020038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802003c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020040:	d123      	bne.n	802008a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8020042:	68fb      	ldr	r3, [r7, #12]
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	681a      	ldr	r2, [r3, #0]
 8020048:	68fb      	ldr	r3, [r7, #12]
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020050:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	681b      	ldr	r3, [r3, #0]
 8020056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 802005a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 802005c:	68fb      	ldr	r3, [r7, #12]
 802005e:	2200      	movs	r2, #0
 8020060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	2220      	movs	r2, #32
 8020066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802006a:	68fb      	ldr	r3, [r7, #12]
 802006c:	2200      	movs	r2, #0
 802006e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020076:	f043 0204 	orr.w	r2, r3, #4
 802007a:	68fb      	ldr	r3, [r7, #12]
 802007c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802007e:	68fb      	ldr	r3, [r7, #12]
 8020080:	2200      	movs	r2, #0
 8020082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8020086:	2301      	movs	r3, #1
 8020088:	e046      	b.n	8020118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020090:	d021      	beq.n	80200d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020092:	f7fb fdd5 	bl	801bc40 <HAL_GetTick>
 8020096:	4602      	mov	r2, r0
 8020098:	683b      	ldr	r3, [r7, #0]
 802009a:	1ad3      	subs	r3, r2, r3
 802009c:	687a      	ldr	r2, [r7, #4]
 802009e:	429a      	cmp	r2, r3
 80200a0:	d302      	bcc.n	80200a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d116      	bne.n	80200d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80200a8:	68fb      	ldr	r3, [r7, #12]
 80200aa:	2200      	movs	r2, #0
 80200ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80200ae:	68fb      	ldr	r3, [r7, #12]
 80200b0:	2220      	movs	r2, #32
 80200b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	2200      	movs	r2, #0
 80200ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80200be:	68fb      	ldr	r3, [r7, #12]
 80200c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80200c2:	f043 0220 	orr.w	r2, r3, #32
 80200c6:	68fb      	ldr	r3, [r7, #12]
 80200c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80200ca:	68fb      	ldr	r3, [r7, #12]
 80200cc:	2200      	movs	r2, #0
 80200ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80200d2:	2301      	movs	r3, #1
 80200d4:	e020      	b.n	8020118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80200d6:	68bb      	ldr	r3, [r7, #8]
 80200d8:	0c1b      	lsrs	r3, r3, #16
 80200da:	b2db      	uxtb	r3, r3
 80200dc:	2b01      	cmp	r3, #1
 80200de:	d10c      	bne.n	80200fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80200e0:	68fb      	ldr	r3, [r7, #12]
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	695b      	ldr	r3, [r3, #20]
 80200e6:	43da      	mvns	r2, r3
 80200e8:	68bb      	ldr	r3, [r7, #8]
 80200ea:	4013      	ands	r3, r2
 80200ec:	b29b      	uxth	r3, r3
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	bf14      	ite	ne
 80200f2:	2301      	movne	r3, #1
 80200f4:	2300      	moveq	r3, #0
 80200f6:	b2db      	uxtb	r3, r3
 80200f8:	e00b      	b.n	8020112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80200fa:	68fb      	ldr	r3, [r7, #12]
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	699b      	ldr	r3, [r3, #24]
 8020100:	43da      	mvns	r2, r3
 8020102:	68bb      	ldr	r3, [r7, #8]
 8020104:	4013      	ands	r3, r2
 8020106:	b29b      	uxth	r3, r3
 8020108:	2b00      	cmp	r3, #0
 802010a:	bf14      	ite	ne
 802010c:	2301      	movne	r3, #1
 802010e:	2300      	moveq	r3, #0
 8020110:	b2db      	uxtb	r3, r3
 8020112:	2b00      	cmp	r3, #0
 8020114:	d18d      	bne.n	8020032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8020116:	2300      	movs	r3, #0
}
 8020118:	4618      	mov	r0, r3
 802011a:	3710      	adds	r7, #16
 802011c:	46bd      	mov	sp, r7
 802011e:	bd80      	pop	{r7, pc}

08020120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8020120:	b580      	push	{r7, lr}
 8020122:	b084      	sub	sp, #16
 8020124:	af00      	add	r7, sp, #0
 8020126:	60f8      	str	r0, [r7, #12]
 8020128:	60b9      	str	r1, [r7, #8]
 802012a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802012c:	e02d      	b.n	802018a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 802012e:	68f8      	ldr	r0, [r7, #12]
 8020130:	f000 f86a 	bl	8020208 <I2C_IsAcknowledgeFailed>
 8020134:	4603      	mov	r3, r0
 8020136:	2b00      	cmp	r3, #0
 8020138:	d001      	beq.n	802013e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802013a:	2301      	movs	r3, #1
 802013c:	e02d      	b.n	802019a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802013e:	68bb      	ldr	r3, [r7, #8]
 8020140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020144:	d021      	beq.n	802018a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020146:	f7fb fd7b 	bl	801bc40 <HAL_GetTick>
 802014a:	4602      	mov	r2, r0
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	1ad3      	subs	r3, r2, r3
 8020150:	68ba      	ldr	r2, [r7, #8]
 8020152:	429a      	cmp	r2, r3
 8020154:	d302      	bcc.n	802015c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8020156:	68bb      	ldr	r3, [r7, #8]
 8020158:	2b00      	cmp	r3, #0
 802015a:	d116      	bne.n	802018a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	2200      	movs	r2, #0
 8020160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	2220      	movs	r2, #32
 8020166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802016a:	68fb      	ldr	r3, [r7, #12]
 802016c:	2200      	movs	r2, #0
 802016e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8020172:	68fb      	ldr	r3, [r7, #12]
 8020174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020176:	f043 0220 	orr.w	r2, r3, #32
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	2200      	movs	r2, #0
 8020182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8020186:	2301      	movs	r3, #1
 8020188:	e007      	b.n	802019a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802018a:	68fb      	ldr	r3, [r7, #12]
 802018c:	681b      	ldr	r3, [r3, #0]
 802018e:	695b      	ldr	r3, [r3, #20]
 8020190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020194:	2b80      	cmp	r3, #128	; 0x80
 8020196:	d1ca      	bne.n	802012e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8020198:	2300      	movs	r3, #0
}
 802019a:	4618      	mov	r0, r3
 802019c:	3710      	adds	r7, #16
 802019e:	46bd      	mov	sp, r7
 80201a0:	bd80      	pop	{r7, pc}
	...

080201a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80201a4:	b480      	push	{r7}
 80201a6:	b085      	sub	sp, #20
 80201a8:	af00      	add	r7, sp, #0
 80201aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80201ac:	2300      	movs	r3, #0
 80201ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80201b0:	4b13      	ldr	r3, [pc, #76]	; (8020200 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	08db      	lsrs	r3, r3, #3
 80201b6:	4a13      	ldr	r2, [pc, #76]	; (8020204 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80201b8:	fba2 2303 	umull	r2, r3, r2, r3
 80201bc:	0a1a      	lsrs	r2, r3, #8
 80201be:	4613      	mov	r3, r2
 80201c0:	009b      	lsls	r3, r3, #2
 80201c2:	4413      	add	r3, r2
 80201c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80201c6:	68fb      	ldr	r3, [r7, #12]
 80201c8:	3b01      	subs	r3, #1
 80201ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d107      	bne.n	80201e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80201d6:	f043 0220 	orr.w	r2, r3, #32
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80201de:	2301      	movs	r3, #1
 80201e0:	e008      	b.n	80201f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80201ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80201f0:	d0e9      	beq.n	80201c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80201f2:	2300      	movs	r3, #0
}
 80201f4:	4618      	mov	r0, r3
 80201f6:	3714      	adds	r7, #20
 80201f8:	46bd      	mov	sp, r7
 80201fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201fe:	4770      	bx	lr
 8020200:	20000020 	.word	0x20000020
 8020204:	14f8b589 	.word	0x14f8b589

08020208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8020208:	b480      	push	{r7}
 802020a:	b083      	sub	sp, #12
 802020c:	af00      	add	r7, sp, #0
 802020e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	695b      	ldr	r3, [r3, #20]
 8020216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802021a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802021e:	d11b      	bne.n	8020258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	681b      	ldr	r3, [r3, #0]
 8020224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	2200      	movs	r2, #0
 802022e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	2220      	movs	r2, #32
 8020234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	2200      	movs	r2, #0
 802023c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020244:	f043 0204 	orr.w	r2, r3, #4
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	2200      	movs	r2, #0
 8020250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8020254:	2301      	movs	r3, #1
 8020256:	e000      	b.n	802025a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8020258:	2300      	movs	r3, #0
}
 802025a:	4618      	mov	r0, r3
 802025c:	370c      	adds	r7, #12
 802025e:	46bd      	mov	sp, r7
 8020260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020264:	4770      	bx	lr

08020266 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8020266:	b480      	push	{r7}
 8020268:	b083      	sub	sp, #12
 802026a:	af00      	add	r7, sp, #0
 802026c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020272:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8020276:	d103      	bne.n	8020280 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	2201      	movs	r2, #1
 802027c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 802027e:	e007      	b.n	8020290 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020284:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8020288:	d102      	bne.n	8020290 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	2208      	movs	r2, #8
 802028e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8020290:	bf00      	nop
 8020292:	370c      	adds	r7, #12
 8020294:	46bd      	mov	sp, r7
 8020296:	f85d 7b04 	ldr.w	r7, [sp], #4
 802029a:	4770      	bx	lr

0802029c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802029c:	b580      	push	{r7, lr}
 802029e:	b086      	sub	sp, #24
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d101      	bne.n	80202ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80202aa:	2301      	movs	r3, #1
 80202ac:	e267      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	f003 0301 	and.w	r3, r3, #1
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d075      	beq.n	80203a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80202ba:	4b88      	ldr	r3, [pc, #544]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80202bc:	689b      	ldr	r3, [r3, #8]
 80202be:	f003 030c 	and.w	r3, r3, #12
 80202c2:	2b04      	cmp	r3, #4
 80202c4:	d00c      	beq.n	80202e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80202c6:	4b85      	ldr	r3, [pc, #532]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80202c8:	689b      	ldr	r3, [r3, #8]
 80202ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80202ce:	2b08      	cmp	r3, #8
 80202d0:	d112      	bne.n	80202f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80202d2:	4b82      	ldr	r3, [pc, #520]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80202d4:	685b      	ldr	r3, [r3, #4]
 80202d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80202da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80202de:	d10b      	bne.n	80202f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80202e0:	4b7e      	ldr	r3, [pc, #504]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d05b      	beq.n	80203a4 <HAL_RCC_OscConfig+0x108>
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	685b      	ldr	r3, [r3, #4]
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	d157      	bne.n	80203a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80202f4:	2301      	movs	r3, #1
 80202f6:	e242      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	685b      	ldr	r3, [r3, #4]
 80202fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020300:	d106      	bne.n	8020310 <HAL_RCC_OscConfig+0x74>
 8020302:	4b76      	ldr	r3, [pc, #472]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020304:	681b      	ldr	r3, [r3, #0]
 8020306:	4a75      	ldr	r2, [pc, #468]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802030c:	6013      	str	r3, [r2, #0]
 802030e:	e01d      	b.n	802034c <HAL_RCC_OscConfig+0xb0>
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	685b      	ldr	r3, [r3, #4]
 8020314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8020318:	d10c      	bne.n	8020334 <HAL_RCC_OscConfig+0x98>
 802031a:	4b70      	ldr	r3, [pc, #448]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	4a6f      	ldr	r2, [pc, #444]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020324:	6013      	str	r3, [r2, #0]
 8020326:	4b6d      	ldr	r3, [pc, #436]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	4a6c      	ldr	r2, [pc, #432]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 802032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020330:	6013      	str	r3, [r2, #0]
 8020332:	e00b      	b.n	802034c <HAL_RCC_OscConfig+0xb0>
 8020334:	4b69      	ldr	r3, [pc, #420]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	4a68      	ldr	r2, [pc, #416]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 802033a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802033e:	6013      	str	r3, [r2, #0]
 8020340:	4b66      	ldr	r3, [pc, #408]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020342:	681b      	ldr	r3, [r3, #0]
 8020344:	4a65      	ldr	r2, [pc, #404]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802034a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	685b      	ldr	r3, [r3, #4]
 8020350:	2b00      	cmp	r3, #0
 8020352:	d013      	beq.n	802037c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020354:	f7fb fc74 	bl	801bc40 <HAL_GetTick>
 8020358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802035a:	e008      	b.n	802036e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802035c:	f7fb fc70 	bl	801bc40 <HAL_GetTick>
 8020360:	4602      	mov	r2, r0
 8020362:	693b      	ldr	r3, [r7, #16]
 8020364:	1ad3      	subs	r3, r2, r3
 8020366:	2b64      	cmp	r3, #100	; 0x64
 8020368:	d901      	bls.n	802036e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802036a:	2303      	movs	r3, #3
 802036c:	e207      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802036e:	4b5b      	ldr	r3, [pc, #364]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020376:	2b00      	cmp	r3, #0
 8020378:	d0f0      	beq.n	802035c <HAL_RCC_OscConfig+0xc0>
 802037a:	e014      	b.n	80203a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802037c:	f7fb fc60 	bl	801bc40 <HAL_GetTick>
 8020380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020382:	e008      	b.n	8020396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020384:	f7fb fc5c 	bl	801bc40 <HAL_GetTick>
 8020388:	4602      	mov	r2, r0
 802038a:	693b      	ldr	r3, [r7, #16]
 802038c:	1ad3      	subs	r3, r2, r3
 802038e:	2b64      	cmp	r3, #100	; 0x64
 8020390:	d901      	bls.n	8020396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8020392:	2303      	movs	r3, #3
 8020394:	e1f3      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020396:	4b51      	ldr	r3, [pc, #324]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d1f0      	bne.n	8020384 <HAL_RCC_OscConfig+0xe8>
 80203a2:	e000      	b.n	80203a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80203a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	681b      	ldr	r3, [r3, #0]
 80203aa:	f003 0302 	and.w	r3, r3, #2
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d063      	beq.n	802047a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80203b2:	4b4a      	ldr	r3, [pc, #296]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80203b4:	689b      	ldr	r3, [r3, #8]
 80203b6:	f003 030c 	and.w	r3, r3, #12
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d00b      	beq.n	80203d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80203be:	4b47      	ldr	r3, [pc, #284]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80203c0:	689b      	ldr	r3, [r3, #8]
 80203c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80203c6:	2b08      	cmp	r3, #8
 80203c8:	d11c      	bne.n	8020404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80203ca:	4b44      	ldr	r3, [pc, #272]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80203cc:	685b      	ldr	r3, [r3, #4]
 80203ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	d116      	bne.n	8020404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80203d6:	4b41      	ldr	r3, [pc, #260]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80203d8:	681b      	ldr	r3, [r3, #0]
 80203da:	f003 0302 	and.w	r3, r3, #2
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d005      	beq.n	80203ee <HAL_RCC_OscConfig+0x152>
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	68db      	ldr	r3, [r3, #12]
 80203e6:	2b01      	cmp	r3, #1
 80203e8:	d001      	beq.n	80203ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80203ea:	2301      	movs	r3, #1
 80203ec:	e1c7      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80203ee:	4b3b      	ldr	r3, [pc, #236]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	691b      	ldr	r3, [r3, #16]
 80203fa:	00db      	lsls	r3, r3, #3
 80203fc:	4937      	ldr	r1, [pc, #220]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80203fe:	4313      	orrs	r3, r2
 8020400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020402:	e03a      	b.n	802047a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	68db      	ldr	r3, [r3, #12]
 8020408:	2b00      	cmp	r3, #0
 802040a:	d020      	beq.n	802044e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802040c:	4b34      	ldr	r3, [pc, #208]	; (80204e0 <HAL_RCC_OscConfig+0x244>)
 802040e:	2201      	movs	r2, #1
 8020410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020412:	f7fb fc15 	bl	801bc40 <HAL_GetTick>
 8020416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020418:	e008      	b.n	802042c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802041a:	f7fb fc11 	bl	801bc40 <HAL_GetTick>
 802041e:	4602      	mov	r2, r0
 8020420:	693b      	ldr	r3, [r7, #16]
 8020422:	1ad3      	subs	r3, r2, r3
 8020424:	2b02      	cmp	r3, #2
 8020426:	d901      	bls.n	802042c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8020428:	2303      	movs	r3, #3
 802042a:	e1a8      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802042c:	4b2b      	ldr	r3, [pc, #172]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 802042e:	681b      	ldr	r3, [r3, #0]
 8020430:	f003 0302 	and.w	r3, r3, #2
 8020434:	2b00      	cmp	r3, #0
 8020436:	d0f0      	beq.n	802041a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020438:	4b28      	ldr	r3, [pc, #160]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	691b      	ldr	r3, [r3, #16]
 8020444:	00db      	lsls	r3, r3, #3
 8020446:	4925      	ldr	r1, [pc, #148]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020448:	4313      	orrs	r3, r2
 802044a:	600b      	str	r3, [r1, #0]
 802044c:	e015      	b.n	802047a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802044e:	4b24      	ldr	r3, [pc, #144]	; (80204e0 <HAL_RCC_OscConfig+0x244>)
 8020450:	2200      	movs	r2, #0
 8020452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020454:	f7fb fbf4 	bl	801bc40 <HAL_GetTick>
 8020458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802045a:	e008      	b.n	802046e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802045c:	f7fb fbf0 	bl	801bc40 <HAL_GetTick>
 8020460:	4602      	mov	r2, r0
 8020462:	693b      	ldr	r3, [r7, #16]
 8020464:	1ad3      	subs	r3, r2, r3
 8020466:	2b02      	cmp	r3, #2
 8020468:	d901      	bls.n	802046e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802046a:	2303      	movs	r3, #3
 802046c:	e187      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802046e:	4b1b      	ldr	r3, [pc, #108]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 8020470:	681b      	ldr	r3, [r3, #0]
 8020472:	f003 0302 	and.w	r3, r3, #2
 8020476:	2b00      	cmp	r3, #0
 8020478:	d1f0      	bne.n	802045c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	f003 0308 	and.w	r3, r3, #8
 8020482:	2b00      	cmp	r3, #0
 8020484:	d036      	beq.n	80204f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	695b      	ldr	r3, [r3, #20]
 802048a:	2b00      	cmp	r3, #0
 802048c:	d016      	beq.n	80204bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802048e:	4b15      	ldr	r3, [pc, #84]	; (80204e4 <HAL_RCC_OscConfig+0x248>)
 8020490:	2201      	movs	r2, #1
 8020492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020494:	f7fb fbd4 	bl	801bc40 <HAL_GetTick>
 8020498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802049a:	e008      	b.n	80204ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802049c:	f7fb fbd0 	bl	801bc40 <HAL_GetTick>
 80204a0:	4602      	mov	r2, r0
 80204a2:	693b      	ldr	r3, [r7, #16]
 80204a4:	1ad3      	subs	r3, r2, r3
 80204a6:	2b02      	cmp	r3, #2
 80204a8:	d901      	bls.n	80204ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80204aa:	2303      	movs	r3, #3
 80204ac:	e167      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80204ae:	4b0b      	ldr	r3, [pc, #44]	; (80204dc <HAL_RCC_OscConfig+0x240>)
 80204b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80204b2:	f003 0302 	and.w	r3, r3, #2
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d0f0      	beq.n	802049c <HAL_RCC_OscConfig+0x200>
 80204ba:	e01b      	b.n	80204f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80204bc:	4b09      	ldr	r3, [pc, #36]	; (80204e4 <HAL_RCC_OscConfig+0x248>)
 80204be:	2200      	movs	r2, #0
 80204c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80204c2:	f7fb fbbd 	bl	801bc40 <HAL_GetTick>
 80204c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80204c8:	e00e      	b.n	80204e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80204ca:	f7fb fbb9 	bl	801bc40 <HAL_GetTick>
 80204ce:	4602      	mov	r2, r0
 80204d0:	693b      	ldr	r3, [r7, #16]
 80204d2:	1ad3      	subs	r3, r2, r3
 80204d4:	2b02      	cmp	r3, #2
 80204d6:	d907      	bls.n	80204e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80204d8:	2303      	movs	r3, #3
 80204da:	e150      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
 80204dc:	40023800 	.word	0x40023800
 80204e0:	42470000 	.word	0x42470000
 80204e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80204e8:	4b88      	ldr	r3, [pc, #544]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80204ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80204ec:	f003 0302 	and.w	r3, r3, #2
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	d1ea      	bne.n	80204ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	f003 0304 	and.w	r3, r3, #4
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	f000 8097 	beq.w	8020630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8020502:	2300      	movs	r3, #0
 8020504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8020506:	4b81      	ldr	r3, [pc, #516]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802050e:	2b00      	cmp	r3, #0
 8020510:	d10f      	bne.n	8020532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020512:	2300      	movs	r3, #0
 8020514:	60bb      	str	r3, [r7, #8]
 8020516:	4b7d      	ldr	r3, [pc, #500]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802051a:	4a7c      	ldr	r2, [pc, #496]	; (802070c <HAL_RCC_OscConfig+0x470>)
 802051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020520:	6413      	str	r3, [r2, #64]	; 0x40
 8020522:	4b7a      	ldr	r3, [pc, #488]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802052a:	60bb      	str	r3, [r7, #8]
 802052c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802052e:	2301      	movs	r3, #1
 8020530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020532:	4b77      	ldr	r3, [pc, #476]	; (8020710 <HAL_RCC_OscConfig+0x474>)
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802053a:	2b00      	cmp	r3, #0
 802053c:	d118      	bne.n	8020570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802053e:	4b74      	ldr	r3, [pc, #464]	; (8020710 <HAL_RCC_OscConfig+0x474>)
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	4a73      	ldr	r2, [pc, #460]	; (8020710 <HAL_RCC_OscConfig+0x474>)
 8020544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802054a:	f7fb fb79 	bl	801bc40 <HAL_GetTick>
 802054e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020550:	e008      	b.n	8020564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020552:	f7fb fb75 	bl	801bc40 <HAL_GetTick>
 8020556:	4602      	mov	r2, r0
 8020558:	693b      	ldr	r3, [r7, #16]
 802055a:	1ad3      	subs	r3, r2, r3
 802055c:	2b02      	cmp	r3, #2
 802055e:	d901      	bls.n	8020564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8020560:	2303      	movs	r3, #3
 8020562:	e10c      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020564:	4b6a      	ldr	r3, [pc, #424]	; (8020710 <HAL_RCC_OscConfig+0x474>)
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802056c:	2b00      	cmp	r3, #0
 802056e:	d0f0      	beq.n	8020552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	689b      	ldr	r3, [r3, #8]
 8020574:	2b01      	cmp	r3, #1
 8020576:	d106      	bne.n	8020586 <HAL_RCC_OscConfig+0x2ea>
 8020578:	4b64      	ldr	r3, [pc, #400]	; (802070c <HAL_RCC_OscConfig+0x470>)
 802057a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802057c:	4a63      	ldr	r2, [pc, #396]	; (802070c <HAL_RCC_OscConfig+0x470>)
 802057e:	f043 0301 	orr.w	r3, r3, #1
 8020582:	6713      	str	r3, [r2, #112]	; 0x70
 8020584:	e01c      	b.n	80205c0 <HAL_RCC_OscConfig+0x324>
 8020586:	687b      	ldr	r3, [r7, #4]
 8020588:	689b      	ldr	r3, [r3, #8]
 802058a:	2b05      	cmp	r3, #5
 802058c:	d10c      	bne.n	80205a8 <HAL_RCC_OscConfig+0x30c>
 802058e:	4b5f      	ldr	r3, [pc, #380]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020592:	4a5e      	ldr	r2, [pc, #376]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020594:	f043 0304 	orr.w	r3, r3, #4
 8020598:	6713      	str	r3, [r2, #112]	; 0x70
 802059a:	4b5c      	ldr	r3, [pc, #368]	; (802070c <HAL_RCC_OscConfig+0x470>)
 802059c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802059e:	4a5b      	ldr	r2, [pc, #364]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80205a0:	f043 0301 	orr.w	r3, r3, #1
 80205a4:	6713      	str	r3, [r2, #112]	; 0x70
 80205a6:	e00b      	b.n	80205c0 <HAL_RCC_OscConfig+0x324>
 80205a8:	4b58      	ldr	r3, [pc, #352]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80205aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205ac:	4a57      	ldr	r2, [pc, #348]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80205ae:	f023 0301 	bic.w	r3, r3, #1
 80205b2:	6713      	str	r3, [r2, #112]	; 0x70
 80205b4:	4b55      	ldr	r3, [pc, #340]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80205b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205b8:	4a54      	ldr	r2, [pc, #336]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80205ba:	f023 0304 	bic.w	r3, r3, #4
 80205be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	689b      	ldr	r3, [r3, #8]
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d015      	beq.n	80205f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80205c8:	f7fb fb3a 	bl	801bc40 <HAL_GetTick>
 80205cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80205ce:	e00a      	b.n	80205e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80205d0:	f7fb fb36 	bl	801bc40 <HAL_GetTick>
 80205d4:	4602      	mov	r2, r0
 80205d6:	693b      	ldr	r3, [r7, #16]
 80205d8:	1ad3      	subs	r3, r2, r3
 80205da:	f241 3288 	movw	r2, #5000	; 0x1388
 80205de:	4293      	cmp	r3, r2
 80205e0:	d901      	bls.n	80205e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80205e2:	2303      	movs	r3, #3
 80205e4:	e0cb      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80205e6:	4b49      	ldr	r3, [pc, #292]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80205e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205ea:	f003 0302 	and.w	r3, r3, #2
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d0ee      	beq.n	80205d0 <HAL_RCC_OscConfig+0x334>
 80205f2:	e014      	b.n	802061e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80205f4:	f7fb fb24 	bl	801bc40 <HAL_GetTick>
 80205f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80205fa:	e00a      	b.n	8020612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80205fc:	f7fb fb20 	bl	801bc40 <HAL_GetTick>
 8020600:	4602      	mov	r2, r0
 8020602:	693b      	ldr	r3, [r7, #16]
 8020604:	1ad3      	subs	r3, r2, r3
 8020606:	f241 3288 	movw	r2, #5000	; 0x1388
 802060a:	4293      	cmp	r3, r2
 802060c:	d901      	bls.n	8020612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802060e:	2303      	movs	r3, #3
 8020610:	e0b5      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8020612:	4b3e      	ldr	r3, [pc, #248]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020616:	f003 0302 	and.w	r3, r3, #2
 802061a:	2b00      	cmp	r3, #0
 802061c:	d1ee      	bne.n	80205fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802061e:	7dfb      	ldrb	r3, [r7, #23]
 8020620:	2b01      	cmp	r3, #1
 8020622:	d105      	bne.n	8020630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8020624:	4b39      	ldr	r3, [pc, #228]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020628:	4a38      	ldr	r2, [pc, #224]	; (802070c <HAL_RCC_OscConfig+0x470>)
 802062a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802062e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	699b      	ldr	r3, [r3, #24]
 8020634:	2b00      	cmp	r3, #0
 8020636:	f000 80a1 	beq.w	802077c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802063a:	4b34      	ldr	r3, [pc, #208]	; (802070c <HAL_RCC_OscConfig+0x470>)
 802063c:	689b      	ldr	r3, [r3, #8]
 802063e:	f003 030c 	and.w	r3, r3, #12
 8020642:	2b08      	cmp	r3, #8
 8020644:	d05c      	beq.n	8020700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	699b      	ldr	r3, [r3, #24]
 802064a:	2b02      	cmp	r3, #2
 802064c:	d141      	bne.n	80206d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802064e:	4b31      	ldr	r3, [pc, #196]	; (8020714 <HAL_RCC_OscConfig+0x478>)
 8020650:	2200      	movs	r2, #0
 8020652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020654:	f7fb faf4 	bl	801bc40 <HAL_GetTick>
 8020658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802065a:	e008      	b.n	802066e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802065c:	f7fb faf0 	bl	801bc40 <HAL_GetTick>
 8020660:	4602      	mov	r2, r0
 8020662:	693b      	ldr	r3, [r7, #16]
 8020664:	1ad3      	subs	r3, r2, r3
 8020666:	2b02      	cmp	r3, #2
 8020668:	d901      	bls.n	802066e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802066a:	2303      	movs	r3, #3
 802066c:	e087      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802066e:	4b27      	ldr	r3, [pc, #156]	; (802070c <HAL_RCC_OscConfig+0x470>)
 8020670:	681b      	ldr	r3, [r3, #0]
 8020672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020676:	2b00      	cmp	r3, #0
 8020678:	d1f0      	bne.n	802065c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	69da      	ldr	r2, [r3, #28]
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	6a1b      	ldr	r3, [r3, #32]
 8020682:	431a      	orrs	r2, r3
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020688:	019b      	lsls	r3, r3, #6
 802068a:	431a      	orrs	r2, r3
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020690:	085b      	lsrs	r3, r3, #1
 8020692:	3b01      	subs	r3, #1
 8020694:	041b      	lsls	r3, r3, #16
 8020696:	431a      	orrs	r2, r3
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802069c:	061b      	lsls	r3, r3, #24
 802069e:	491b      	ldr	r1, [pc, #108]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80206a0:	4313      	orrs	r3, r2
 80206a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80206a4:	4b1b      	ldr	r3, [pc, #108]	; (8020714 <HAL_RCC_OscConfig+0x478>)
 80206a6:	2201      	movs	r2, #1
 80206a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80206aa:	f7fb fac9 	bl	801bc40 <HAL_GetTick>
 80206ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80206b0:	e008      	b.n	80206c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80206b2:	f7fb fac5 	bl	801bc40 <HAL_GetTick>
 80206b6:	4602      	mov	r2, r0
 80206b8:	693b      	ldr	r3, [r7, #16]
 80206ba:	1ad3      	subs	r3, r2, r3
 80206bc:	2b02      	cmp	r3, #2
 80206be:	d901      	bls.n	80206c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80206c0:	2303      	movs	r3, #3
 80206c2:	e05c      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80206c4:	4b11      	ldr	r3, [pc, #68]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	d0f0      	beq.n	80206b2 <HAL_RCC_OscConfig+0x416>
 80206d0:	e054      	b.n	802077c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80206d2:	4b10      	ldr	r3, [pc, #64]	; (8020714 <HAL_RCC_OscConfig+0x478>)
 80206d4:	2200      	movs	r2, #0
 80206d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80206d8:	f7fb fab2 	bl	801bc40 <HAL_GetTick>
 80206dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80206de:	e008      	b.n	80206f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80206e0:	f7fb faae 	bl	801bc40 <HAL_GetTick>
 80206e4:	4602      	mov	r2, r0
 80206e6:	693b      	ldr	r3, [r7, #16]
 80206e8:	1ad3      	subs	r3, r2, r3
 80206ea:	2b02      	cmp	r3, #2
 80206ec:	d901      	bls.n	80206f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80206ee:	2303      	movs	r3, #3
 80206f0:	e045      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80206f2:	4b06      	ldr	r3, [pc, #24]	; (802070c <HAL_RCC_OscConfig+0x470>)
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d1f0      	bne.n	80206e0 <HAL_RCC_OscConfig+0x444>
 80206fe:	e03d      	b.n	802077c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	699b      	ldr	r3, [r3, #24]
 8020704:	2b01      	cmp	r3, #1
 8020706:	d107      	bne.n	8020718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8020708:	2301      	movs	r3, #1
 802070a:	e038      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
 802070c:	40023800 	.word	0x40023800
 8020710:	40007000 	.word	0x40007000
 8020714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8020718:	4b1b      	ldr	r3, [pc, #108]	; (8020788 <HAL_RCC_OscConfig+0x4ec>)
 802071a:	685b      	ldr	r3, [r3, #4]
 802071c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	699b      	ldr	r3, [r3, #24]
 8020722:	2b01      	cmp	r3, #1
 8020724:	d028      	beq.n	8020778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8020726:	68fb      	ldr	r3, [r7, #12]
 8020728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8020730:	429a      	cmp	r2, r3
 8020732:	d121      	bne.n	8020778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8020734:	68fb      	ldr	r3, [r7, #12]
 8020736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802073e:	429a      	cmp	r2, r3
 8020740:	d11a      	bne.n	8020778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8020742:	68fa      	ldr	r2, [r7, #12]
 8020744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8020748:	4013      	ands	r3, r2
 802074a:	687a      	ldr	r2, [r7, #4]
 802074c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802074e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8020750:	4293      	cmp	r3, r2
 8020752:	d111      	bne.n	8020778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8020754:	68fb      	ldr	r3, [r7, #12]
 8020756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802075e:	085b      	lsrs	r3, r3, #1
 8020760:	3b01      	subs	r3, #1
 8020762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8020764:	429a      	cmp	r2, r3
 8020766:	d107      	bne.n	8020778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8020774:	429a      	cmp	r2, r3
 8020776:	d001      	beq.n	802077c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8020778:	2301      	movs	r3, #1
 802077a:	e000      	b.n	802077e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802077c:	2300      	movs	r3, #0
}
 802077e:	4618      	mov	r0, r3
 8020780:	3718      	adds	r7, #24
 8020782:	46bd      	mov	sp, r7
 8020784:	bd80      	pop	{r7, pc}
 8020786:	bf00      	nop
 8020788:	40023800 	.word	0x40023800

0802078c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802078c:	b580      	push	{r7, lr}
 802078e:	b084      	sub	sp, #16
 8020790:	af00      	add	r7, sp, #0
 8020792:	6078      	str	r0, [r7, #4]
 8020794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	2b00      	cmp	r3, #0
 802079a:	d101      	bne.n	80207a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802079c:	2301      	movs	r3, #1
 802079e:	e0cc      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80207a0:	4b68      	ldr	r3, [pc, #416]	; (8020944 <HAL_RCC_ClockConfig+0x1b8>)
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	f003 0307 	and.w	r3, r3, #7
 80207a8:	683a      	ldr	r2, [r7, #0]
 80207aa:	429a      	cmp	r2, r3
 80207ac:	d90c      	bls.n	80207c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80207ae:	4b65      	ldr	r3, [pc, #404]	; (8020944 <HAL_RCC_ClockConfig+0x1b8>)
 80207b0:	683a      	ldr	r2, [r7, #0]
 80207b2:	b2d2      	uxtb	r2, r2
 80207b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80207b6:	4b63      	ldr	r3, [pc, #396]	; (8020944 <HAL_RCC_ClockConfig+0x1b8>)
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	f003 0307 	and.w	r3, r3, #7
 80207be:	683a      	ldr	r2, [r7, #0]
 80207c0:	429a      	cmp	r2, r3
 80207c2:	d001      	beq.n	80207c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80207c4:	2301      	movs	r3, #1
 80207c6:	e0b8      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	f003 0302 	and.w	r3, r3, #2
 80207d0:	2b00      	cmp	r3, #0
 80207d2:	d020      	beq.n	8020816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	f003 0304 	and.w	r3, r3, #4
 80207dc:	2b00      	cmp	r3, #0
 80207de:	d005      	beq.n	80207ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80207e0:	4b59      	ldr	r3, [pc, #356]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 80207e2:	689b      	ldr	r3, [r3, #8]
 80207e4:	4a58      	ldr	r2, [pc, #352]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 80207e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80207ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80207ec:	687b      	ldr	r3, [r7, #4]
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	f003 0308 	and.w	r3, r3, #8
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d005      	beq.n	8020804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80207f8:	4b53      	ldr	r3, [pc, #332]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 80207fa:	689b      	ldr	r3, [r3, #8]
 80207fc:	4a52      	ldr	r2, [pc, #328]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 80207fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8020802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8020804:	4b50      	ldr	r3, [pc, #320]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 8020806:	689b      	ldr	r3, [r3, #8]
 8020808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	689b      	ldr	r3, [r3, #8]
 8020810:	494d      	ldr	r1, [pc, #308]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 8020812:	4313      	orrs	r3, r2
 8020814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	681b      	ldr	r3, [r3, #0]
 802081a:	f003 0301 	and.w	r3, r3, #1
 802081e:	2b00      	cmp	r3, #0
 8020820:	d044      	beq.n	80208ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	685b      	ldr	r3, [r3, #4]
 8020826:	2b01      	cmp	r3, #1
 8020828:	d107      	bne.n	802083a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802082a:	4b47      	ldr	r3, [pc, #284]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802082c:	681b      	ldr	r3, [r3, #0]
 802082e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020832:	2b00      	cmp	r3, #0
 8020834:	d119      	bne.n	802086a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020836:	2301      	movs	r3, #1
 8020838:	e07f      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	685b      	ldr	r3, [r3, #4]
 802083e:	2b02      	cmp	r3, #2
 8020840:	d003      	beq.n	802084a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020846:	2b03      	cmp	r3, #3
 8020848:	d107      	bne.n	802085a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802084a:	4b3f      	ldr	r3, [pc, #252]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802084c:	681b      	ldr	r3, [r3, #0]
 802084e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020852:	2b00      	cmp	r3, #0
 8020854:	d109      	bne.n	802086a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020856:	2301      	movs	r3, #1
 8020858:	e06f      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802085a:	4b3b      	ldr	r3, [pc, #236]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802085c:	681b      	ldr	r3, [r3, #0]
 802085e:	f003 0302 	and.w	r3, r3, #2
 8020862:	2b00      	cmp	r3, #0
 8020864:	d101      	bne.n	802086a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020866:	2301      	movs	r3, #1
 8020868:	e067      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802086a:	4b37      	ldr	r3, [pc, #220]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802086c:	689b      	ldr	r3, [r3, #8]
 802086e:	f023 0203 	bic.w	r2, r3, #3
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	685b      	ldr	r3, [r3, #4]
 8020876:	4934      	ldr	r1, [pc, #208]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 8020878:	4313      	orrs	r3, r2
 802087a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802087c:	f7fb f9e0 	bl	801bc40 <HAL_GetTick>
 8020880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020882:	e00a      	b.n	802089a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020884:	f7fb f9dc 	bl	801bc40 <HAL_GetTick>
 8020888:	4602      	mov	r2, r0
 802088a:	68fb      	ldr	r3, [r7, #12]
 802088c:	1ad3      	subs	r3, r2, r3
 802088e:	f241 3288 	movw	r2, #5000	; 0x1388
 8020892:	4293      	cmp	r3, r2
 8020894:	d901      	bls.n	802089a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8020896:	2303      	movs	r3, #3
 8020898:	e04f      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802089a:	4b2b      	ldr	r3, [pc, #172]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802089c:	689b      	ldr	r3, [r3, #8]
 802089e:	f003 020c 	and.w	r2, r3, #12
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	685b      	ldr	r3, [r3, #4]
 80208a6:	009b      	lsls	r3, r3, #2
 80208a8:	429a      	cmp	r2, r3
 80208aa:	d1eb      	bne.n	8020884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80208ac:	4b25      	ldr	r3, [pc, #148]	; (8020944 <HAL_RCC_ClockConfig+0x1b8>)
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	f003 0307 	and.w	r3, r3, #7
 80208b4:	683a      	ldr	r2, [r7, #0]
 80208b6:	429a      	cmp	r2, r3
 80208b8:	d20c      	bcs.n	80208d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80208ba:	4b22      	ldr	r3, [pc, #136]	; (8020944 <HAL_RCC_ClockConfig+0x1b8>)
 80208bc:	683a      	ldr	r2, [r7, #0]
 80208be:	b2d2      	uxtb	r2, r2
 80208c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80208c2:	4b20      	ldr	r3, [pc, #128]	; (8020944 <HAL_RCC_ClockConfig+0x1b8>)
 80208c4:	681b      	ldr	r3, [r3, #0]
 80208c6:	f003 0307 	and.w	r3, r3, #7
 80208ca:	683a      	ldr	r2, [r7, #0]
 80208cc:	429a      	cmp	r2, r3
 80208ce:	d001      	beq.n	80208d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80208d0:	2301      	movs	r3, #1
 80208d2:	e032      	b.n	802093a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	681b      	ldr	r3, [r3, #0]
 80208d8:	f003 0304 	and.w	r3, r3, #4
 80208dc:	2b00      	cmp	r3, #0
 80208de:	d008      	beq.n	80208f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80208e0:	4b19      	ldr	r3, [pc, #100]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 80208e2:	689b      	ldr	r3, [r3, #8]
 80208e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	68db      	ldr	r3, [r3, #12]
 80208ec:	4916      	ldr	r1, [pc, #88]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 80208ee:	4313      	orrs	r3, r2
 80208f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	f003 0308 	and.w	r3, r3, #8
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d009      	beq.n	8020912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80208fe:	4b12      	ldr	r3, [pc, #72]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 8020900:	689b      	ldr	r3, [r3, #8]
 8020902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	691b      	ldr	r3, [r3, #16]
 802090a:	00db      	lsls	r3, r3, #3
 802090c:	490e      	ldr	r1, [pc, #56]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802090e:	4313      	orrs	r3, r2
 8020910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8020912:	f000 f821 	bl	8020958 <HAL_RCC_GetSysClockFreq>
 8020916:	4602      	mov	r2, r0
 8020918:	4b0b      	ldr	r3, [pc, #44]	; (8020948 <HAL_RCC_ClockConfig+0x1bc>)
 802091a:	689b      	ldr	r3, [r3, #8]
 802091c:	091b      	lsrs	r3, r3, #4
 802091e:	f003 030f 	and.w	r3, r3, #15
 8020922:	490a      	ldr	r1, [pc, #40]	; (802094c <HAL_RCC_ClockConfig+0x1c0>)
 8020924:	5ccb      	ldrb	r3, [r1, r3]
 8020926:	fa22 f303 	lsr.w	r3, r2, r3
 802092a:	4a09      	ldr	r2, [pc, #36]	; (8020950 <HAL_RCC_ClockConfig+0x1c4>)
 802092c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802092e:	4b09      	ldr	r3, [pc, #36]	; (8020954 <HAL_RCC_ClockConfig+0x1c8>)
 8020930:	681b      	ldr	r3, [r3, #0]
 8020932:	4618      	mov	r0, r3
 8020934:	f7fb f940 	bl	801bbb8 <HAL_InitTick>

  return HAL_OK;
 8020938:	2300      	movs	r3, #0
}
 802093a:	4618      	mov	r0, r3
 802093c:	3710      	adds	r7, #16
 802093e:	46bd      	mov	sp, r7
 8020940:	bd80      	pop	{r7, pc}
 8020942:	bf00      	nop
 8020944:	40023c00 	.word	0x40023c00
 8020948:	40023800 	.word	0x40023800
 802094c:	08027fb4 	.word	0x08027fb4
 8020950:	20000020 	.word	0x20000020
 8020954:	20000150 	.word	0x20000150

08020958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802095c:	b094      	sub	sp, #80	; 0x50
 802095e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8020960:	2300      	movs	r3, #0
 8020962:	647b      	str	r3, [r7, #68]	; 0x44
 8020964:	2300      	movs	r3, #0
 8020966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020968:	2300      	movs	r3, #0
 802096a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 802096c:	2300      	movs	r3, #0
 802096e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020970:	4b79      	ldr	r3, [pc, #484]	; (8020b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8020972:	689b      	ldr	r3, [r3, #8]
 8020974:	f003 030c 	and.w	r3, r3, #12
 8020978:	2b08      	cmp	r3, #8
 802097a:	d00d      	beq.n	8020998 <HAL_RCC_GetSysClockFreq+0x40>
 802097c:	2b08      	cmp	r3, #8
 802097e:	f200 80e1 	bhi.w	8020b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8020982:	2b00      	cmp	r3, #0
 8020984:	d002      	beq.n	802098c <HAL_RCC_GetSysClockFreq+0x34>
 8020986:	2b04      	cmp	r3, #4
 8020988:	d003      	beq.n	8020992 <HAL_RCC_GetSysClockFreq+0x3a>
 802098a:	e0db      	b.n	8020b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802098c:	4b73      	ldr	r3, [pc, #460]	; (8020b5c <HAL_RCC_GetSysClockFreq+0x204>)
 802098e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8020990:	e0db      	b.n	8020b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8020992:	4b73      	ldr	r3, [pc, #460]	; (8020b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8020994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020996:	e0d8      	b.n	8020b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8020998:	4b6f      	ldr	r3, [pc, #444]	; (8020b58 <HAL_RCC_GetSysClockFreq+0x200>)
 802099a:	685b      	ldr	r3, [r3, #4]
 802099c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80209a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80209a2:	4b6d      	ldr	r3, [pc, #436]	; (8020b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80209a4:	685b      	ldr	r3, [r3, #4]
 80209a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d063      	beq.n	8020a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80209ae:	4b6a      	ldr	r3, [pc, #424]	; (8020b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80209b0:	685b      	ldr	r3, [r3, #4]
 80209b2:	099b      	lsrs	r3, r3, #6
 80209b4:	2200      	movs	r2, #0
 80209b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80209b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80209ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80209c0:	633b      	str	r3, [r7, #48]	; 0x30
 80209c2:	2300      	movs	r3, #0
 80209c4:	637b      	str	r3, [r7, #52]	; 0x34
 80209c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80209ca:	4622      	mov	r2, r4
 80209cc:	462b      	mov	r3, r5
 80209ce:	f04f 0000 	mov.w	r0, #0
 80209d2:	f04f 0100 	mov.w	r1, #0
 80209d6:	0159      	lsls	r1, r3, #5
 80209d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80209dc:	0150      	lsls	r0, r2, #5
 80209de:	4602      	mov	r2, r0
 80209e0:	460b      	mov	r3, r1
 80209e2:	4621      	mov	r1, r4
 80209e4:	1a51      	subs	r1, r2, r1
 80209e6:	6139      	str	r1, [r7, #16]
 80209e8:	4629      	mov	r1, r5
 80209ea:	eb63 0301 	sbc.w	r3, r3, r1
 80209ee:	617b      	str	r3, [r7, #20]
 80209f0:	f04f 0200 	mov.w	r2, #0
 80209f4:	f04f 0300 	mov.w	r3, #0
 80209f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80209fc:	4659      	mov	r1, fp
 80209fe:	018b      	lsls	r3, r1, #6
 8020a00:	4651      	mov	r1, sl
 8020a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8020a06:	4651      	mov	r1, sl
 8020a08:	018a      	lsls	r2, r1, #6
 8020a0a:	4651      	mov	r1, sl
 8020a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8020a10:	4659      	mov	r1, fp
 8020a12:	eb63 0901 	sbc.w	r9, r3, r1
 8020a16:	f04f 0200 	mov.w	r2, #0
 8020a1a:	f04f 0300 	mov.w	r3, #0
 8020a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8020a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8020a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8020a2a:	4690      	mov	r8, r2
 8020a2c:	4699      	mov	r9, r3
 8020a2e:	4623      	mov	r3, r4
 8020a30:	eb18 0303 	adds.w	r3, r8, r3
 8020a34:	60bb      	str	r3, [r7, #8]
 8020a36:	462b      	mov	r3, r5
 8020a38:	eb49 0303 	adc.w	r3, r9, r3
 8020a3c:	60fb      	str	r3, [r7, #12]
 8020a3e:	f04f 0200 	mov.w	r2, #0
 8020a42:	f04f 0300 	mov.w	r3, #0
 8020a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020a4a:	4629      	mov	r1, r5
 8020a4c:	024b      	lsls	r3, r1, #9
 8020a4e:	4621      	mov	r1, r4
 8020a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8020a54:	4621      	mov	r1, r4
 8020a56:	024a      	lsls	r2, r1, #9
 8020a58:	4610      	mov	r0, r2
 8020a5a:	4619      	mov	r1, r3
 8020a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020a5e:	2200      	movs	r2, #0
 8020a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8020a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020a68:	f7e0 fa0a 	bl	8000e80 <__aeabi_uldivmod>
 8020a6c:	4602      	mov	r2, r0
 8020a6e:	460b      	mov	r3, r1
 8020a70:	4613      	mov	r3, r2
 8020a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020a74:	e058      	b.n	8020b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020a76:	4b38      	ldr	r3, [pc, #224]	; (8020b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8020a78:	685b      	ldr	r3, [r3, #4]
 8020a7a:	099b      	lsrs	r3, r3, #6
 8020a7c:	2200      	movs	r2, #0
 8020a7e:	4618      	mov	r0, r3
 8020a80:	4611      	mov	r1, r2
 8020a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8020a86:	623b      	str	r3, [r7, #32]
 8020a88:	2300      	movs	r3, #0
 8020a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8020a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8020a90:	4642      	mov	r2, r8
 8020a92:	464b      	mov	r3, r9
 8020a94:	f04f 0000 	mov.w	r0, #0
 8020a98:	f04f 0100 	mov.w	r1, #0
 8020a9c:	0159      	lsls	r1, r3, #5
 8020a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020aa2:	0150      	lsls	r0, r2, #5
 8020aa4:	4602      	mov	r2, r0
 8020aa6:	460b      	mov	r3, r1
 8020aa8:	4641      	mov	r1, r8
 8020aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8020aae:	4649      	mov	r1, r9
 8020ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8020ab4:	f04f 0200 	mov.w	r2, #0
 8020ab8:	f04f 0300 	mov.w	r3, #0
 8020abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8020ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8020ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8020ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8020acc:	eb63 050b 	sbc.w	r5, r3, fp
 8020ad0:	f04f 0200 	mov.w	r2, #0
 8020ad4:	f04f 0300 	mov.w	r3, #0
 8020ad8:	00eb      	lsls	r3, r5, #3
 8020ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ade:	00e2      	lsls	r2, r4, #3
 8020ae0:	4614      	mov	r4, r2
 8020ae2:	461d      	mov	r5, r3
 8020ae4:	4643      	mov	r3, r8
 8020ae6:	18e3      	adds	r3, r4, r3
 8020ae8:	603b      	str	r3, [r7, #0]
 8020aea:	464b      	mov	r3, r9
 8020aec:	eb45 0303 	adc.w	r3, r5, r3
 8020af0:	607b      	str	r3, [r7, #4]
 8020af2:	f04f 0200 	mov.w	r2, #0
 8020af6:	f04f 0300 	mov.w	r3, #0
 8020afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8020afe:	4629      	mov	r1, r5
 8020b00:	028b      	lsls	r3, r1, #10
 8020b02:	4621      	mov	r1, r4
 8020b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8020b08:	4621      	mov	r1, r4
 8020b0a:	028a      	lsls	r2, r1, #10
 8020b0c:	4610      	mov	r0, r2
 8020b0e:	4619      	mov	r1, r3
 8020b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020b12:	2200      	movs	r2, #0
 8020b14:	61bb      	str	r3, [r7, #24]
 8020b16:	61fa      	str	r2, [r7, #28]
 8020b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020b1c:	f7e0 f9b0 	bl	8000e80 <__aeabi_uldivmod>
 8020b20:	4602      	mov	r2, r0
 8020b22:	460b      	mov	r3, r1
 8020b24:	4613      	mov	r3, r2
 8020b26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8020b28:	4b0b      	ldr	r3, [pc, #44]	; (8020b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8020b2a:	685b      	ldr	r3, [r3, #4]
 8020b2c:	0c1b      	lsrs	r3, r3, #16
 8020b2e:	f003 0303 	and.w	r3, r3, #3
 8020b32:	3301      	adds	r3, #1
 8020b34:	005b      	lsls	r3, r3, #1
 8020b36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8020b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8020b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020b42:	e002      	b.n	8020b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8020b44:	4b05      	ldr	r3, [pc, #20]	; (8020b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8020b46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8020b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8020b4c:	4618      	mov	r0, r3
 8020b4e:	3750      	adds	r7, #80	; 0x50
 8020b50:	46bd      	mov	sp, r7
 8020b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b56:	bf00      	nop
 8020b58:	40023800 	.word	0x40023800
 8020b5c:	00f42400 	.word	0x00f42400
 8020b60:	007a1200 	.word	0x007a1200

08020b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8020b64:	b480      	push	{r7}
 8020b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020b68:	4b03      	ldr	r3, [pc, #12]	; (8020b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8020b6a:	681b      	ldr	r3, [r3, #0]
}
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	46bd      	mov	sp, r7
 8020b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b74:	4770      	bx	lr
 8020b76:	bf00      	nop
 8020b78:	20000020 	.word	0x20000020

08020b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8020b7c:	b580      	push	{r7, lr}
 8020b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8020b80:	f7ff fff0 	bl	8020b64 <HAL_RCC_GetHCLKFreq>
 8020b84:	4602      	mov	r2, r0
 8020b86:	4b05      	ldr	r3, [pc, #20]	; (8020b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8020b88:	689b      	ldr	r3, [r3, #8]
 8020b8a:	0a9b      	lsrs	r3, r3, #10
 8020b8c:	f003 0307 	and.w	r3, r3, #7
 8020b90:	4903      	ldr	r1, [pc, #12]	; (8020ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8020b92:	5ccb      	ldrb	r3, [r1, r3]
 8020b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020b98:	4618      	mov	r0, r3
 8020b9a:	bd80      	pop	{r7, pc}
 8020b9c:	40023800 	.word	0x40023800
 8020ba0:	08027fc4 	.word	0x08027fc4

08020ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020ba8:	f7ff ffdc 	bl	8020b64 <HAL_RCC_GetHCLKFreq>
 8020bac:	4602      	mov	r2, r0
 8020bae:	4b05      	ldr	r3, [pc, #20]	; (8020bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8020bb0:	689b      	ldr	r3, [r3, #8]
 8020bb2:	0b5b      	lsrs	r3, r3, #13
 8020bb4:	f003 0307 	and.w	r3, r3, #7
 8020bb8:	4903      	ldr	r1, [pc, #12]	; (8020bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8020bba:	5ccb      	ldrb	r3, [r1, r3]
 8020bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020bc0:	4618      	mov	r0, r3
 8020bc2:	bd80      	pop	{r7, pc}
 8020bc4:	40023800 	.word	0x40023800
 8020bc8:	08027fc4 	.word	0x08027fc4

08020bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8020bcc:	b580      	push	{r7, lr}
 8020bce:	b082      	sub	sp, #8
 8020bd0:	af00      	add	r7, sp, #0
 8020bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d101      	bne.n	8020bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020bda:	2301      	movs	r3, #1
 8020bdc:	e041      	b.n	8020c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020be4:	b2db      	uxtb	r3, r3
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d106      	bne.n	8020bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	2200      	movs	r2, #0
 8020bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020bf2:	6878      	ldr	r0, [r7, #4]
 8020bf4:	f7e2 fcf6 	bl	80035e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020bf8:	687b      	ldr	r3, [r7, #4]
 8020bfa:	2202      	movs	r2, #2
 8020bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	681a      	ldr	r2, [r3, #0]
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	3304      	adds	r3, #4
 8020c08:	4619      	mov	r1, r3
 8020c0a:	4610      	mov	r0, r2
 8020c0c:	f000 fd14 	bl	8021638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	2201      	movs	r2, #1
 8020c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	2201      	movs	r2, #1
 8020c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	2201      	movs	r2, #1
 8020c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	2201      	movs	r2, #1
 8020c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	2201      	movs	r2, #1
 8020c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	2201      	movs	r2, #1
 8020c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	2201      	movs	r2, #1
 8020c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	2201      	movs	r2, #1
 8020c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	2201      	movs	r2, #1
 8020c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020c58:	687b      	ldr	r3, [r7, #4]
 8020c5a:	2201      	movs	r2, #1
 8020c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020c60:	2300      	movs	r3, #0
}
 8020c62:	4618      	mov	r0, r3
 8020c64:	3708      	adds	r7, #8
 8020c66:	46bd      	mov	sp, r7
 8020c68:	bd80      	pop	{r7, pc}

08020c6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020c6a:	b580      	push	{r7, lr}
 8020c6c:	b082      	sub	sp, #8
 8020c6e:	af00      	add	r7, sp, #0
 8020c70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	d101      	bne.n	8020c7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020c78:	2301      	movs	r3, #1
 8020c7a:	e041      	b.n	8020d00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020c82:	b2db      	uxtb	r3, r3
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d106      	bne.n	8020c96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8020c90:	6878      	ldr	r0, [r7, #4]
 8020c92:	f000 f839 	bl	8020d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	2202      	movs	r2, #2
 8020c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	681a      	ldr	r2, [r3, #0]
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	3304      	adds	r3, #4
 8020ca6:	4619      	mov	r1, r3
 8020ca8:	4610      	mov	r0, r2
 8020caa:	f000 fcc5 	bl	8021638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	2201      	movs	r2, #1
 8020cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	2201      	movs	r2, #1
 8020cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	2201      	movs	r2, #1
 8020cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	2201      	movs	r2, #1
 8020cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	2201      	movs	r2, #1
 8020cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	2201      	movs	r2, #1
 8020cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020cde:	687b      	ldr	r3, [r7, #4]
 8020ce0:	2201      	movs	r2, #1
 8020ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	2201      	movs	r2, #1
 8020cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	2201      	movs	r2, #1
 8020cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	2201      	movs	r2, #1
 8020cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020cfe:	2300      	movs	r3, #0
}
 8020d00:	4618      	mov	r0, r3
 8020d02:	3708      	adds	r7, #8
 8020d04:	46bd      	mov	sp, r7
 8020d06:	bd80      	pop	{r7, pc}

08020d08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020d08:	b480      	push	{r7}
 8020d0a:	b083      	sub	sp, #12
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8020d10:	bf00      	nop
 8020d12:	370c      	adds	r7, #12
 8020d14:	46bd      	mov	sp, r7
 8020d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d1a:	4770      	bx	lr

08020d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020d1c:	b580      	push	{r7, lr}
 8020d1e:	b084      	sub	sp, #16
 8020d20:	af00      	add	r7, sp, #0
 8020d22:	6078      	str	r0, [r7, #4]
 8020d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8020d26:	683b      	ldr	r3, [r7, #0]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d109      	bne.n	8020d40 <HAL_TIM_PWM_Start+0x24>
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020d32:	b2db      	uxtb	r3, r3
 8020d34:	2b01      	cmp	r3, #1
 8020d36:	bf14      	ite	ne
 8020d38:	2301      	movne	r3, #1
 8020d3a:	2300      	moveq	r3, #0
 8020d3c:	b2db      	uxtb	r3, r3
 8020d3e:	e022      	b.n	8020d86 <HAL_TIM_PWM_Start+0x6a>
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	2b04      	cmp	r3, #4
 8020d44:	d109      	bne.n	8020d5a <HAL_TIM_PWM_Start+0x3e>
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8020d4c:	b2db      	uxtb	r3, r3
 8020d4e:	2b01      	cmp	r3, #1
 8020d50:	bf14      	ite	ne
 8020d52:	2301      	movne	r3, #1
 8020d54:	2300      	moveq	r3, #0
 8020d56:	b2db      	uxtb	r3, r3
 8020d58:	e015      	b.n	8020d86 <HAL_TIM_PWM_Start+0x6a>
 8020d5a:	683b      	ldr	r3, [r7, #0]
 8020d5c:	2b08      	cmp	r3, #8
 8020d5e:	d109      	bne.n	8020d74 <HAL_TIM_PWM_Start+0x58>
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8020d66:	b2db      	uxtb	r3, r3
 8020d68:	2b01      	cmp	r3, #1
 8020d6a:	bf14      	ite	ne
 8020d6c:	2301      	movne	r3, #1
 8020d6e:	2300      	moveq	r3, #0
 8020d70:	b2db      	uxtb	r3, r3
 8020d72:	e008      	b.n	8020d86 <HAL_TIM_PWM_Start+0x6a>
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b01      	cmp	r3, #1
 8020d7e:	bf14      	ite	ne
 8020d80:	2301      	movne	r3, #1
 8020d82:	2300      	moveq	r3, #0
 8020d84:	b2db      	uxtb	r3, r3
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d001      	beq.n	8020d8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8020d8a:	2301      	movs	r3, #1
 8020d8c:	e068      	b.n	8020e60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8020d8e:	683b      	ldr	r3, [r7, #0]
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d104      	bne.n	8020d9e <HAL_TIM_PWM_Start+0x82>
 8020d94:	687b      	ldr	r3, [r7, #4]
 8020d96:	2202      	movs	r2, #2
 8020d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020d9c:	e013      	b.n	8020dc6 <HAL_TIM_PWM_Start+0xaa>
 8020d9e:	683b      	ldr	r3, [r7, #0]
 8020da0:	2b04      	cmp	r3, #4
 8020da2:	d104      	bne.n	8020dae <HAL_TIM_PWM_Start+0x92>
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	2202      	movs	r2, #2
 8020da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020dac:	e00b      	b.n	8020dc6 <HAL_TIM_PWM_Start+0xaa>
 8020dae:	683b      	ldr	r3, [r7, #0]
 8020db0:	2b08      	cmp	r3, #8
 8020db2:	d104      	bne.n	8020dbe <HAL_TIM_PWM_Start+0xa2>
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	2202      	movs	r2, #2
 8020db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020dbc:	e003      	b.n	8020dc6 <HAL_TIM_PWM_Start+0xaa>
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	2202      	movs	r2, #2
 8020dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	681b      	ldr	r3, [r3, #0]
 8020dca:	2201      	movs	r2, #1
 8020dcc:	6839      	ldr	r1, [r7, #0]
 8020dce:	4618      	mov	r0, r3
 8020dd0:	f000 fed8 	bl	8021b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	4a23      	ldr	r2, [pc, #140]	; (8020e68 <HAL_TIM_PWM_Start+0x14c>)
 8020dda:	4293      	cmp	r3, r2
 8020ddc:	d107      	bne.n	8020dee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	681b      	ldr	r3, [r3, #0]
 8020de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	681b      	ldr	r3, [r3, #0]
 8020df2:	4a1d      	ldr	r2, [pc, #116]	; (8020e68 <HAL_TIM_PWM_Start+0x14c>)
 8020df4:	4293      	cmp	r3, r2
 8020df6:	d018      	beq.n	8020e2a <HAL_TIM_PWM_Start+0x10e>
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020e00:	d013      	beq.n	8020e2a <HAL_TIM_PWM_Start+0x10e>
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	4a19      	ldr	r2, [pc, #100]	; (8020e6c <HAL_TIM_PWM_Start+0x150>)
 8020e08:	4293      	cmp	r3, r2
 8020e0a:	d00e      	beq.n	8020e2a <HAL_TIM_PWM_Start+0x10e>
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	4a17      	ldr	r2, [pc, #92]	; (8020e70 <HAL_TIM_PWM_Start+0x154>)
 8020e12:	4293      	cmp	r3, r2
 8020e14:	d009      	beq.n	8020e2a <HAL_TIM_PWM_Start+0x10e>
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	681b      	ldr	r3, [r3, #0]
 8020e1a:	4a16      	ldr	r2, [pc, #88]	; (8020e74 <HAL_TIM_PWM_Start+0x158>)
 8020e1c:	4293      	cmp	r3, r2
 8020e1e:	d004      	beq.n	8020e2a <HAL_TIM_PWM_Start+0x10e>
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	681b      	ldr	r3, [r3, #0]
 8020e24:	4a14      	ldr	r2, [pc, #80]	; (8020e78 <HAL_TIM_PWM_Start+0x15c>)
 8020e26:	4293      	cmp	r3, r2
 8020e28:	d111      	bne.n	8020e4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	681b      	ldr	r3, [r3, #0]
 8020e2e:	689b      	ldr	r3, [r3, #8]
 8020e30:	f003 0307 	and.w	r3, r3, #7
 8020e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020e36:	68fb      	ldr	r3, [r7, #12]
 8020e38:	2b06      	cmp	r3, #6
 8020e3a:	d010      	beq.n	8020e5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	681a      	ldr	r2, [r3, #0]
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	681b      	ldr	r3, [r3, #0]
 8020e46:	f042 0201 	orr.w	r2, r2, #1
 8020e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020e4c:	e007      	b.n	8020e5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	681a      	ldr	r2, [r3, #0]
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	f042 0201 	orr.w	r2, r2, #1
 8020e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8020e5e:	2300      	movs	r3, #0
}
 8020e60:	4618      	mov	r0, r3
 8020e62:	3710      	adds	r7, #16
 8020e64:	46bd      	mov	sp, r7
 8020e66:	bd80      	pop	{r7, pc}
 8020e68:	40010000 	.word	0x40010000
 8020e6c:	40000400 	.word	0x40000400
 8020e70:	40000800 	.word	0x40000800
 8020e74:	40000c00 	.word	0x40000c00
 8020e78:	40014000 	.word	0x40014000

08020e7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020e7c:	b580      	push	{r7, lr}
 8020e7e:	b084      	sub	sp, #16
 8020e80:	af00      	add	r7, sp, #0
 8020e82:	6078      	str	r0, [r7, #4]
 8020e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020e86:	2300      	movs	r3, #0
 8020e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8020e8a:	683b      	ldr	r3, [r7, #0]
 8020e8c:	2b00      	cmp	r3, #0
 8020e8e:	d104      	bne.n	8020e9a <HAL_TIM_IC_Start_IT+0x1e>
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020e96:	b2db      	uxtb	r3, r3
 8020e98:	e013      	b.n	8020ec2 <HAL_TIM_IC_Start_IT+0x46>
 8020e9a:	683b      	ldr	r3, [r7, #0]
 8020e9c:	2b04      	cmp	r3, #4
 8020e9e:	d104      	bne.n	8020eaa <HAL_TIM_IC_Start_IT+0x2e>
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8020ea6:	b2db      	uxtb	r3, r3
 8020ea8:	e00b      	b.n	8020ec2 <HAL_TIM_IC_Start_IT+0x46>
 8020eaa:	683b      	ldr	r3, [r7, #0]
 8020eac:	2b08      	cmp	r3, #8
 8020eae:	d104      	bne.n	8020eba <HAL_TIM_IC_Start_IT+0x3e>
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8020eb6:	b2db      	uxtb	r3, r3
 8020eb8:	e003      	b.n	8020ec2 <HAL_TIM_IC_Start_IT+0x46>
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020ec0:	b2db      	uxtb	r3, r3
 8020ec2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8020ec4:	683b      	ldr	r3, [r7, #0]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d104      	bne.n	8020ed4 <HAL_TIM_IC_Start_IT+0x58>
 8020eca:	687b      	ldr	r3, [r7, #4]
 8020ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020ed0:	b2db      	uxtb	r3, r3
 8020ed2:	e013      	b.n	8020efc <HAL_TIM_IC_Start_IT+0x80>
 8020ed4:	683b      	ldr	r3, [r7, #0]
 8020ed6:	2b04      	cmp	r3, #4
 8020ed8:	d104      	bne.n	8020ee4 <HAL_TIM_IC_Start_IT+0x68>
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8020ee0:	b2db      	uxtb	r3, r3
 8020ee2:	e00b      	b.n	8020efc <HAL_TIM_IC_Start_IT+0x80>
 8020ee4:	683b      	ldr	r3, [r7, #0]
 8020ee6:	2b08      	cmp	r3, #8
 8020ee8:	d104      	bne.n	8020ef4 <HAL_TIM_IC_Start_IT+0x78>
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020ef0:	b2db      	uxtb	r3, r3
 8020ef2:	e003      	b.n	8020efc <HAL_TIM_IC_Start_IT+0x80>
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020efa:	b2db      	uxtb	r3, r3
 8020efc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8020efe:	7bbb      	ldrb	r3, [r7, #14]
 8020f00:	2b01      	cmp	r3, #1
 8020f02:	d102      	bne.n	8020f0a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8020f04:	7b7b      	ldrb	r3, [r7, #13]
 8020f06:	2b01      	cmp	r3, #1
 8020f08:	d001      	beq.n	8020f0e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8020f0a:	2301      	movs	r3, #1
 8020f0c:	e0c2      	b.n	8021094 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8020f0e:	683b      	ldr	r3, [r7, #0]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d104      	bne.n	8020f1e <HAL_TIM_IC_Start_IT+0xa2>
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	2202      	movs	r2, #2
 8020f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020f1c:	e013      	b.n	8020f46 <HAL_TIM_IC_Start_IT+0xca>
 8020f1e:	683b      	ldr	r3, [r7, #0]
 8020f20:	2b04      	cmp	r3, #4
 8020f22:	d104      	bne.n	8020f2e <HAL_TIM_IC_Start_IT+0xb2>
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	2202      	movs	r2, #2
 8020f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020f2c:	e00b      	b.n	8020f46 <HAL_TIM_IC_Start_IT+0xca>
 8020f2e:	683b      	ldr	r3, [r7, #0]
 8020f30:	2b08      	cmp	r3, #8
 8020f32:	d104      	bne.n	8020f3e <HAL_TIM_IC_Start_IT+0xc2>
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	2202      	movs	r2, #2
 8020f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020f3c:	e003      	b.n	8020f46 <HAL_TIM_IC_Start_IT+0xca>
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	2202      	movs	r2, #2
 8020f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d104      	bne.n	8020f56 <HAL_TIM_IC_Start_IT+0xda>
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	2202      	movs	r2, #2
 8020f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020f54:	e013      	b.n	8020f7e <HAL_TIM_IC_Start_IT+0x102>
 8020f56:	683b      	ldr	r3, [r7, #0]
 8020f58:	2b04      	cmp	r3, #4
 8020f5a:	d104      	bne.n	8020f66 <HAL_TIM_IC_Start_IT+0xea>
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	2202      	movs	r2, #2
 8020f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020f64:	e00b      	b.n	8020f7e <HAL_TIM_IC_Start_IT+0x102>
 8020f66:	683b      	ldr	r3, [r7, #0]
 8020f68:	2b08      	cmp	r3, #8
 8020f6a:	d104      	bne.n	8020f76 <HAL_TIM_IC_Start_IT+0xfa>
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	2202      	movs	r2, #2
 8020f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020f74:	e003      	b.n	8020f7e <HAL_TIM_IC_Start_IT+0x102>
 8020f76:	687b      	ldr	r3, [r7, #4]
 8020f78:	2202      	movs	r2, #2
 8020f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8020f7e:	683b      	ldr	r3, [r7, #0]
 8020f80:	2b0c      	cmp	r3, #12
 8020f82:	d841      	bhi.n	8021008 <HAL_TIM_IC_Start_IT+0x18c>
 8020f84:	a201      	add	r2, pc, #4	; (adr r2, 8020f8c <HAL_TIM_IC_Start_IT+0x110>)
 8020f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f8a:	bf00      	nop
 8020f8c:	08020fc1 	.word	0x08020fc1
 8020f90:	08021009 	.word	0x08021009
 8020f94:	08021009 	.word	0x08021009
 8020f98:	08021009 	.word	0x08021009
 8020f9c:	08020fd3 	.word	0x08020fd3
 8020fa0:	08021009 	.word	0x08021009
 8020fa4:	08021009 	.word	0x08021009
 8020fa8:	08021009 	.word	0x08021009
 8020fac:	08020fe5 	.word	0x08020fe5
 8020fb0:	08021009 	.word	0x08021009
 8020fb4:	08021009 	.word	0x08021009
 8020fb8:	08021009 	.word	0x08021009
 8020fbc:	08020ff7 	.word	0x08020ff7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	68da      	ldr	r2, [r3, #12]
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	681b      	ldr	r3, [r3, #0]
 8020fca:	f042 0202 	orr.w	r2, r2, #2
 8020fce:	60da      	str	r2, [r3, #12]
      break;
 8020fd0:	e01d      	b.n	802100e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	681b      	ldr	r3, [r3, #0]
 8020fd6:	68da      	ldr	r2, [r3, #12]
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	681b      	ldr	r3, [r3, #0]
 8020fdc:	f042 0204 	orr.w	r2, r2, #4
 8020fe0:	60da      	str	r2, [r3, #12]
      break;
 8020fe2:	e014      	b.n	802100e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	681b      	ldr	r3, [r3, #0]
 8020fe8:	68da      	ldr	r2, [r3, #12]
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	681b      	ldr	r3, [r3, #0]
 8020fee:	f042 0208 	orr.w	r2, r2, #8
 8020ff2:	60da      	str	r2, [r3, #12]
      break;
 8020ff4:	e00b      	b.n	802100e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	681b      	ldr	r3, [r3, #0]
 8020ffa:	68da      	ldr	r2, [r3, #12]
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	681b      	ldr	r3, [r3, #0]
 8021000:	f042 0210 	orr.w	r2, r2, #16
 8021004:	60da      	str	r2, [r3, #12]
      break;
 8021006:	e002      	b.n	802100e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8021008:	2301      	movs	r3, #1
 802100a:	73fb      	strb	r3, [r7, #15]
      break;
 802100c:	bf00      	nop
  }

  if (status == HAL_OK)
 802100e:	7bfb      	ldrb	r3, [r7, #15]
 8021010:	2b00      	cmp	r3, #0
 8021012:	d13e      	bne.n	8021092 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	2201      	movs	r2, #1
 802101a:	6839      	ldr	r1, [r7, #0]
 802101c:	4618      	mov	r0, r3
 802101e:	f000 fdb1 	bl	8021b84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	4a1d      	ldr	r2, [pc, #116]	; (802109c <HAL_TIM_IC_Start_IT+0x220>)
 8021028:	4293      	cmp	r3, r2
 802102a:	d018      	beq.n	802105e <HAL_TIM_IC_Start_IT+0x1e2>
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021034:	d013      	beq.n	802105e <HAL_TIM_IC_Start_IT+0x1e2>
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	681b      	ldr	r3, [r3, #0]
 802103a:	4a19      	ldr	r2, [pc, #100]	; (80210a0 <HAL_TIM_IC_Start_IT+0x224>)
 802103c:	4293      	cmp	r3, r2
 802103e:	d00e      	beq.n	802105e <HAL_TIM_IC_Start_IT+0x1e2>
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4a17      	ldr	r2, [pc, #92]	; (80210a4 <HAL_TIM_IC_Start_IT+0x228>)
 8021046:	4293      	cmp	r3, r2
 8021048:	d009      	beq.n	802105e <HAL_TIM_IC_Start_IT+0x1e2>
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	4a16      	ldr	r2, [pc, #88]	; (80210a8 <HAL_TIM_IC_Start_IT+0x22c>)
 8021050:	4293      	cmp	r3, r2
 8021052:	d004      	beq.n	802105e <HAL_TIM_IC_Start_IT+0x1e2>
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	4a14      	ldr	r2, [pc, #80]	; (80210ac <HAL_TIM_IC_Start_IT+0x230>)
 802105a:	4293      	cmp	r3, r2
 802105c:	d111      	bne.n	8021082 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	689b      	ldr	r3, [r3, #8]
 8021064:	f003 0307 	and.w	r3, r3, #7
 8021068:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802106a:	68bb      	ldr	r3, [r7, #8]
 802106c:	2b06      	cmp	r3, #6
 802106e:	d010      	beq.n	8021092 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	681a      	ldr	r2, [r3, #0]
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	681b      	ldr	r3, [r3, #0]
 802107a:	f042 0201 	orr.w	r2, r2, #1
 802107e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021080:	e007      	b.n	8021092 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8021082:	687b      	ldr	r3, [r7, #4]
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	681a      	ldr	r2, [r3, #0]
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	f042 0201 	orr.w	r2, r2, #1
 8021090:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8021092:	7bfb      	ldrb	r3, [r7, #15]
}
 8021094:	4618      	mov	r0, r3
 8021096:	3710      	adds	r7, #16
 8021098:	46bd      	mov	sp, r7
 802109a:	bd80      	pop	{r7, pc}
 802109c:	40010000 	.word	0x40010000
 80210a0:	40000400 	.word	0x40000400
 80210a4:	40000800 	.word	0x40000800
 80210a8:	40000c00 	.word	0x40000c00
 80210ac:	40014000 	.word	0x40014000

080210b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80210b0:	b580      	push	{r7, lr}
 80210b2:	b082      	sub	sp, #8
 80210b4:	af00      	add	r7, sp, #0
 80210b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	681b      	ldr	r3, [r3, #0]
 80210bc:	691b      	ldr	r3, [r3, #16]
 80210be:	f003 0302 	and.w	r3, r3, #2
 80210c2:	2b02      	cmp	r3, #2
 80210c4:	d122      	bne.n	802110c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80210c6:	687b      	ldr	r3, [r7, #4]
 80210c8:	681b      	ldr	r3, [r3, #0]
 80210ca:	68db      	ldr	r3, [r3, #12]
 80210cc:	f003 0302 	and.w	r3, r3, #2
 80210d0:	2b02      	cmp	r3, #2
 80210d2:	d11b      	bne.n	802110c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	681b      	ldr	r3, [r3, #0]
 80210d8:	f06f 0202 	mvn.w	r2, #2
 80210dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	2201      	movs	r2, #1
 80210e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	699b      	ldr	r3, [r3, #24]
 80210ea:	f003 0303 	and.w	r3, r3, #3
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	d003      	beq.n	80210fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80210f2:	6878      	ldr	r0, [r7, #4]
 80210f4:	f000 fa81 	bl	80215fa <HAL_TIM_IC_CaptureCallback>
 80210f8:	e005      	b.n	8021106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80210fa:	6878      	ldr	r0, [r7, #4]
 80210fc:	f000 fa73 	bl	80215e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021100:	6878      	ldr	r0, [r7, #4]
 8021102:	f000 fa84 	bl	802160e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	2200      	movs	r2, #0
 802110a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	691b      	ldr	r3, [r3, #16]
 8021112:	f003 0304 	and.w	r3, r3, #4
 8021116:	2b04      	cmp	r3, #4
 8021118:	d122      	bne.n	8021160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	68db      	ldr	r3, [r3, #12]
 8021120:	f003 0304 	and.w	r3, r3, #4
 8021124:	2b04      	cmp	r3, #4
 8021126:	d11b      	bne.n	8021160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	f06f 0204 	mvn.w	r2, #4
 8021130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	2202      	movs	r2, #2
 8021136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	699b      	ldr	r3, [r3, #24]
 802113e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021142:	2b00      	cmp	r3, #0
 8021144:	d003      	beq.n	802114e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021146:	6878      	ldr	r0, [r7, #4]
 8021148:	f000 fa57 	bl	80215fa <HAL_TIM_IC_CaptureCallback>
 802114c:	e005      	b.n	802115a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802114e:	6878      	ldr	r0, [r7, #4]
 8021150:	f000 fa49 	bl	80215e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021154:	6878      	ldr	r0, [r7, #4]
 8021156:	f000 fa5a 	bl	802160e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	2200      	movs	r2, #0
 802115e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	691b      	ldr	r3, [r3, #16]
 8021166:	f003 0308 	and.w	r3, r3, #8
 802116a:	2b08      	cmp	r3, #8
 802116c:	d122      	bne.n	80211b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802116e:	687b      	ldr	r3, [r7, #4]
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	68db      	ldr	r3, [r3, #12]
 8021174:	f003 0308 	and.w	r3, r3, #8
 8021178:	2b08      	cmp	r3, #8
 802117a:	d11b      	bne.n	80211b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	681b      	ldr	r3, [r3, #0]
 8021180:	f06f 0208 	mvn.w	r2, #8
 8021184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	2204      	movs	r2, #4
 802118a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	681b      	ldr	r3, [r3, #0]
 8021190:	69db      	ldr	r3, [r3, #28]
 8021192:	f003 0303 	and.w	r3, r3, #3
 8021196:	2b00      	cmp	r3, #0
 8021198:	d003      	beq.n	80211a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802119a:	6878      	ldr	r0, [r7, #4]
 802119c:	f000 fa2d 	bl	80215fa <HAL_TIM_IC_CaptureCallback>
 80211a0:	e005      	b.n	80211ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80211a2:	6878      	ldr	r0, [r7, #4]
 80211a4:	f000 fa1f 	bl	80215e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80211a8:	6878      	ldr	r0, [r7, #4]
 80211aa:	f000 fa30 	bl	802160e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	2200      	movs	r2, #0
 80211b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	691b      	ldr	r3, [r3, #16]
 80211ba:	f003 0310 	and.w	r3, r3, #16
 80211be:	2b10      	cmp	r3, #16
 80211c0:	d122      	bne.n	8021208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	68db      	ldr	r3, [r3, #12]
 80211c8:	f003 0310 	and.w	r3, r3, #16
 80211cc:	2b10      	cmp	r3, #16
 80211ce:	d11b      	bne.n	8021208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	f06f 0210 	mvn.w	r2, #16
 80211d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	2208      	movs	r2, #8
 80211de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	69db      	ldr	r3, [r3, #28]
 80211e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d003      	beq.n	80211f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80211ee:	6878      	ldr	r0, [r7, #4]
 80211f0:	f000 fa03 	bl	80215fa <HAL_TIM_IC_CaptureCallback>
 80211f4:	e005      	b.n	8021202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80211f6:	6878      	ldr	r0, [r7, #4]
 80211f8:	f000 f9f5 	bl	80215e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80211fc:	6878      	ldr	r0, [r7, #4]
 80211fe:	f000 fa06 	bl	802160e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	2200      	movs	r2, #0
 8021206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	681b      	ldr	r3, [r3, #0]
 802120c:	691b      	ldr	r3, [r3, #16]
 802120e:	f003 0301 	and.w	r3, r3, #1
 8021212:	2b01      	cmp	r3, #1
 8021214:	d10e      	bne.n	8021234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	681b      	ldr	r3, [r3, #0]
 802121a:	68db      	ldr	r3, [r3, #12]
 802121c:	f003 0301 	and.w	r3, r3, #1
 8021220:	2b01      	cmp	r3, #1
 8021222:	d107      	bne.n	8021234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	f06f 0201 	mvn.w	r2, #1
 802122c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802122e:	6878      	ldr	r0, [r7, #4]
 8021230:	f000 f9cf 	bl	80215d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	691b      	ldr	r3, [r3, #16]
 802123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802123e:	2b80      	cmp	r3, #128	; 0x80
 8021240:	d10e      	bne.n	8021260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	68db      	ldr	r3, [r3, #12]
 8021248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802124c:	2b80      	cmp	r3, #128	; 0x80
 802124e:	d107      	bne.n	8021260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8021258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802125a:	6878      	ldr	r0, [r7, #4]
 802125c:	f000 fd30 	bl	8021cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	691b      	ldr	r3, [r3, #16]
 8021266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802126a:	2b40      	cmp	r3, #64	; 0x40
 802126c:	d10e      	bne.n	802128c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	68db      	ldr	r3, [r3, #12]
 8021274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021278:	2b40      	cmp	r3, #64	; 0x40
 802127a:	d107      	bne.n	802128c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	681b      	ldr	r3, [r3, #0]
 8021280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8021284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8021286:	6878      	ldr	r0, [r7, #4]
 8021288:	f000 f9cb 	bl	8021622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	691b      	ldr	r3, [r3, #16]
 8021292:	f003 0320 	and.w	r3, r3, #32
 8021296:	2b20      	cmp	r3, #32
 8021298:	d10e      	bne.n	80212b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	68db      	ldr	r3, [r3, #12]
 80212a0:	f003 0320 	and.w	r3, r3, #32
 80212a4:	2b20      	cmp	r3, #32
 80212a6:	d107      	bne.n	80212b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	681b      	ldr	r3, [r3, #0]
 80212ac:	f06f 0220 	mvn.w	r2, #32
 80212b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80212b2:	6878      	ldr	r0, [r7, #4]
 80212b4:	f000 fcfa 	bl	8021cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80212b8:	bf00      	nop
 80212ba:	3708      	adds	r7, #8
 80212bc:	46bd      	mov	sp, r7
 80212be:	bd80      	pop	{r7, pc}

080212c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80212c0:	b580      	push	{r7, lr}
 80212c2:	b086      	sub	sp, #24
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	60f8      	str	r0, [r7, #12]
 80212c8:	60b9      	str	r1, [r7, #8]
 80212ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80212cc:	2300      	movs	r3, #0
 80212ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80212d0:	68fb      	ldr	r3, [r7, #12]
 80212d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80212d6:	2b01      	cmp	r3, #1
 80212d8:	d101      	bne.n	80212de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80212da:	2302      	movs	r3, #2
 80212dc:	e0ae      	b.n	802143c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80212de:	68fb      	ldr	r3, [r7, #12]
 80212e0:	2201      	movs	r2, #1
 80212e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	2b0c      	cmp	r3, #12
 80212ea:	f200 809f 	bhi.w	802142c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80212ee:	a201      	add	r2, pc, #4	; (adr r2, 80212f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80212f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80212f4:	08021329 	.word	0x08021329
 80212f8:	0802142d 	.word	0x0802142d
 80212fc:	0802142d 	.word	0x0802142d
 8021300:	0802142d 	.word	0x0802142d
 8021304:	08021369 	.word	0x08021369
 8021308:	0802142d 	.word	0x0802142d
 802130c:	0802142d 	.word	0x0802142d
 8021310:	0802142d 	.word	0x0802142d
 8021314:	080213ab 	.word	0x080213ab
 8021318:	0802142d 	.word	0x0802142d
 802131c:	0802142d 	.word	0x0802142d
 8021320:	0802142d 	.word	0x0802142d
 8021324:	080213eb 	.word	0x080213eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8021328:	68fb      	ldr	r3, [r7, #12]
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	68b9      	ldr	r1, [r7, #8]
 802132e:	4618      	mov	r0, r3
 8021330:	f000 fa02 	bl	8021738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	699a      	ldr	r2, [r3, #24]
 802133a:	68fb      	ldr	r3, [r7, #12]
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	f042 0208 	orr.w	r2, r2, #8
 8021342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	699a      	ldr	r2, [r3, #24]
 802134a:	68fb      	ldr	r3, [r7, #12]
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	f022 0204 	bic.w	r2, r2, #4
 8021352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	681b      	ldr	r3, [r3, #0]
 8021358:	6999      	ldr	r1, [r3, #24]
 802135a:	68bb      	ldr	r3, [r7, #8]
 802135c:	691a      	ldr	r2, [r3, #16]
 802135e:	68fb      	ldr	r3, [r7, #12]
 8021360:	681b      	ldr	r3, [r3, #0]
 8021362:	430a      	orrs	r2, r1
 8021364:	619a      	str	r2, [r3, #24]
      break;
 8021366:	e064      	b.n	8021432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8021368:	68fb      	ldr	r3, [r7, #12]
 802136a:	681b      	ldr	r3, [r3, #0]
 802136c:	68b9      	ldr	r1, [r7, #8]
 802136e:	4618      	mov	r0, r3
 8021370:	f000 fa48 	bl	8021804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8021374:	68fb      	ldr	r3, [r7, #12]
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	699a      	ldr	r2, [r3, #24]
 802137a:	68fb      	ldr	r3, [r7, #12]
 802137c:	681b      	ldr	r3, [r3, #0]
 802137e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8021382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	699a      	ldr	r2, [r3, #24]
 802138a:	68fb      	ldr	r3, [r7, #12]
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8021392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	6999      	ldr	r1, [r3, #24]
 802139a:	68bb      	ldr	r3, [r7, #8]
 802139c:	691b      	ldr	r3, [r3, #16]
 802139e:	021a      	lsls	r2, r3, #8
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	430a      	orrs	r2, r1
 80213a6:	619a      	str	r2, [r3, #24]
      break;
 80213a8:	e043      	b.n	8021432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	68b9      	ldr	r1, [r7, #8]
 80213b0:	4618      	mov	r0, r3
 80213b2:	f000 fa93 	bl	80218dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	69da      	ldr	r2, [r3, #28]
 80213bc:	68fb      	ldr	r3, [r7, #12]
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	f042 0208 	orr.w	r2, r2, #8
 80213c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80213c6:	68fb      	ldr	r3, [r7, #12]
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	69da      	ldr	r2, [r3, #28]
 80213cc:	68fb      	ldr	r3, [r7, #12]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	f022 0204 	bic.w	r2, r2, #4
 80213d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80213d6:	68fb      	ldr	r3, [r7, #12]
 80213d8:	681b      	ldr	r3, [r3, #0]
 80213da:	69d9      	ldr	r1, [r3, #28]
 80213dc:	68bb      	ldr	r3, [r7, #8]
 80213de:	691a      	ldr	r2, [r3, #16]
 80213e0:	68fb      	ldr	r3, [r7, #12]
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	430a      	orrs	r2, r1
 80213e6:	61da      	str	r2, [r3, #28]
      break;
 80213e8:	e023      	b.n	8021432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80213ea:	68fb      	ldr	r3, [r7, #12]
 80213ec:	681b      	ldr	r3, [r3, #0]
 80213ee:	68b9      	ldr	r1, [r7, #8]
 80213f0:	4618      	mov	r0, r3
 80213f2:	f000 fadd 	bl	80219b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80213f6:	68fb      	ldr	r3, [r7, #12]
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	69da      	ldr	r2, [r3, #28]
 80213fc:	68fb      	ldr	r3, [r7, #12]
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8021404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	69da      	ldr	r2, [r3, #28]
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8021414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	69d9      	ldr	r1, [r3, #28]
 802141c:	68bb      	ldr	r3, [r7, #8]
 802141e:	691b      	ldr	r3, [r3, #16]
 8021420:	021a      	lsls	r2, r3, #8
 8021422:	68fb      	ldr	r3, [r7, #12]
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	430a      	orrs	r2, r1
 8021428:	61da      	str	r2, [r3, #28]
      break;
 802142a:	e002      	b.n	8021432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 802142c:	2301      	movs	r3, #1
 802142e:	75fb      	strb	r3, [r7, #23]
      break;
 8021430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	2200      	movs	r2, #0
 8021436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802143a:	7dfb      	ldrb	r3, [r7, #23]
}
 802143c:	4618      	mov	r0, r3
 802143e:	3718      	adds	r7, #24
 8021440:	46bd      	mov	sp, r7
 8021442:	bd80      	pop	{r7, pc}

08021444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8021444:	b580      	push	{r7, lr}
 8021446:	b084      	sub	sp, #16
 8021448:	af00      	add	r7, sp, #0
 802144a:	6078      	str	r0, [r7, #4]
 802144c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802144e:	2300      	movs	r3, #0
 8021450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021458:	2b01      	cmp	r3, #1
 802145a:	d101      	bne.n	8021460 <HAL_TIM_ConfigClockSource+0x1c>
 802145c:	2302      	movs	r3, #2
 802145e:	e0b4      	b.n	80215ca <HAL_TIM_ConfigClockSource+0x186>
 8021460:	687b      	ldr	r3, [r7, #4]
 8021462:	2201      	movs	r2, #1
 8021464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	2202      	movs	r2, #2
 802146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	681b      	ldr	r3, [r3, #0]
 8021474:	689b      	ldr	r3, [r3, #8]
 8021476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8021478:	68bb      	ldr	r3, [r7, #8]
 802147a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802147e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8021480:	68bb      	ldr	r3, [r7, #8]
 8021482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	68ba      	ldr	r2, [r7, #8]
 802148e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8021490:	683b      	ldr	r3, [r7, #0]
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021498:	d03e      	beq.n	8021518 <HAL_TIM_ConfigClockSource+0xd4>
 802149a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802149e:	f200 8087 	bhi.w	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80214a6:	f000 8086 	beq.w	80215b6 <HAL_TIM_ConfigClockSource+0x172>
 80214aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80214ae:	d87f      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214b0:	2b70      	cmp	r3, #112	; 0x70
 80214b2:	d01a      	beq.n	80214ea <HAL_TIM_ConfigClockSource+0xa6>
 80214b4:	2b70      	cmp	r3, #112	; 0x70
 80214b6:	d87b      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214b8:	2b60      	cmp	r3, #96	; 0x60
 80214ba:	d050      	beq.n	802155e <HAL_TIM_ConfigClockSource+0x11a>
 80214bc:	2b60      	cmp	r3, #96	; 0x60
 80214be:	d877      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214c0:	2b50      	cmp	r3, #80	; 0x50
 80214c2:	d03c      	beq.n	802153e <HAL_TIM_ConfigClockSource+0xfa>
 80214c4:	2b50      	cmp	r3, #80	; 0x50
 80214c6:	d873      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214c8:	2b40      	cmp	r3, #64	; 0x40
 80214ca:	d058      	beq.n	802157e <HAL_TIM_ConfigClockSource+0x13a>
 80214cc:	2b40      	cmp	r3, #64	; 0x40
 80214ce:	d86f      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214d0:	2b30      	cmp	r3, #48	; 0x30
 80214d2:	d064      	beq.n	802159e <HAL_TIM_ConfigClockSource+0x15a>
 80214d4:	2b30      	cmp	r3, #48	; 0x30
 80214d6:	d86b      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214d8:	2b20      	cmp	r3, #32
 80214da:	d060      	beq.n	802159e <HAL_TIM_ConfigClockSource+0x15a>
 80214dc:	2b20      	cmp	r3, #32
 80214de:	d867      	bhi.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
 80214e0:	2b00      	cmp	r3, #0
 80214e2:	d05c      	beq.n	802159e <HAL_TIM_ConfigClockSource+0x15a>
 80214e4:	2b10      	cmp	r3, #16
 80214e6:	d05a      	beq.n	802159e <HAL_TIM_ConfigClockSource+0x15a>
 80214e8:	e062      	b.n	80215b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	6818      	ldr	r0, [r3, #0]
 80214ee:	683b      	ldr	r3, [r7, #0]
 80214f0:	6899      	ldr	r1, [r3, #8]
 80214f2:	683b      	ldr	r3, [r7, #0]
 80214f4:	685a      	ldr	r2, [r3, #4]
 80214f6:	683b      	ldr	r3, [r7, #0]
 80214f8:	68db      	ldr	r3, [r3, #12]
 80214fa:	f000 fb23 	bl	8021b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	689b      	ldr	r3, [r3, #8]
 8021504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8021506:	68bb      	ldr	r3, [r7, #8]
 8021508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802150c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	681b      	ldr	r3, [r3, #0]
 8021512:	68ba      	ldr	r2, [r7, #8]
 8021514:	609a      	str	r2, [r3, #8]
      break;
 8021516:	e04f      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	6818      	ldr	r0, [r3, #0]
 802151c:	683b      	ldr	r3, [r7, #0]
 802151e:	6899      	ldr	r1, [r3, #8]
 8021520:	683b      	ldr	r3, [r7, #0]
 8021522:	685a      	ldr	r2, [r3, #4]
 8021524:	683b      	ldr	r3, [r7, #0]
 8021526:	68db      	ldr	r3, [r3, #12]
 8021528:	f000 fb0c 	bl	8021b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	681b      	ldr	r3, [r3, #0]
 8021530:	689a      	ldr	r2, [r3, #8]
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	681b      	ldr	r3, [r3, #0]
 8021536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802153a:	609a      	str	r2, [r3, #8]
      break;
 802153c:	e03c      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	6818      	ldr	r0, [r3, #0]
 8021542:	683b      	ldr	r3, [r7, #0]
 8021544:	6859      	ldr	r1, [r3, #4]
 8021546:	683b      	ldr	r3, [r7, #0]
 8021548:	68db      	ldr	r3, [r3, #12]
 802154a:	461a      	mov	r2, r3
 802154c:	f000 fa80 	bl	8021a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	681b      	ldr	r3, [r3, #0]
 8021554:	2150      	movs	r1, #80	; 0x50
 8021556:	4618      	mov	r0, r3
 8021558:	f000 fad9 	bl	8021b0e <TIM_ITRx_SetConfig>
      break;
 802155c:	e02c      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	6818      	ldr	r0, [r3, #0]
 8021562:	683b      	ldr	r3, [r7, #0]
 8021564:	6859      	ldr	r1, [r3, #4]
 8021566:	683b      	ldr	r3, [r7, #0]
 8021568:	68db      	ldr	r3, [r3, #12]
 802156a:	461a      	mov	r2, r3
 802156c:	f000 fa9f 	bl	8021aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	2160      	movs	r1, #96	; 0x60
 8021576:	4618      	mov	r0, r3
 8021578:	f000 fac9 	bl	8021b0e <TIM_ITRx_SetConfig>
      break;
 802157c:	e01c      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	6818      	ldr	r0, [r3, #0]
 8021582:	683b      	ldr	r3, [r7, #0]
 8021584:	6859      	ldr	r1, [r3, #4]
 8021586:	683b      	ldr	r3, [r7, #0]
 8021588:	68db      	ldr	r3, [r3, #12]
 802158a:	461a      	mov	r2, r3
 802158c:	f000 fa60 	bl	8021a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	2140      	movs	r1, #64	; 0x40
 8021596:	4618      	mov	r0, r3
 8021598:	f000 fab9 	bl	8021b0e <TIM_ITRx_SetConfig>
      break;
 802159c:	e00c      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	681a      	ldr	r2, [r3, #0]
 80215a2:	683b      	ldr	r3, [r7, #0]
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	4619      	mov	r1, r3
 80215a8:	4610      	mov	r0, r2
 80215aa:	f000 fab0 	bl	8021b0e <TIM_ITRx_SetConfig>
      break;
 80215ae:	e003      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80215b0:	2301      	movs	r3, #1
 80215b2:	73fb      	strb	r3, [r7, #15]
      break;
 80215b4:	e000      	b.n	80215b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80215b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	2201      	movs	r2, #1
 80215bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	2200      	movs	r2, #0
 80215c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80215c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80215ca:	4618      	mov	r0, r3
 80215cc:	3710      	adds	r7, #16
 80215ce:	46bd      	mov	sp, r7
 80215d0:	bd80      	pop	{r7, pc}

080215d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80215d2:	b480      	push	{r7}
 80215d4:	b083      	sub	sp, #12
 80215d6:	af00      	add	r7, sp, #0
 80215d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80215da:	bf00      	nop
 80215dc:	370c      	adds	r7, #12
 80215de:	46bd      	mov	sp, r7
 80215e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215e4:	4770      	bx	lr

080215e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80215e6:	b480      	push	{r7}
 80215e8:	b083      	sub	sp, #12
 80215ea:	af00      	add	r7, sp, #0
 80215ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80215ee:	bf00      	nop
 80215f0:	370c      	adds	r7, #12
 80215f2:	46bd      	mov	sp, r7
 80215f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f8:	4770      	bx	lr

080215fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80215fa:	b480      	push	{r7}
 80215fc:	b083      	sub	sp, #12
 80215fe:	af00      	add	r7, sp, #0
 8021600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8021602:	bf00      	nop
 8021604:	370c      	adds	r7, #12
 8021606:	46bd      	mov	sp, r7
 8021608:	f85d 7b04 	ldr.w	r7, [sp], #4
 802160c:	4770      	bx	lr

0802160e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802160e:	b480      	push	{r7}
 8021610:	b083      	sub	sp, #12
 8021612:	af00      	add	r7, sp, #0
 8021614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8021616:	bf00      	nop
 8021618:	370c      	adds	r7, #12
 802161a:	46bd      	mov	sp, r7
 802161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021620:	4770      	bx	lr

08021622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8021622:	b480      	push	{r7}
 8021624:	b083      	sub	sp, #12
 8021626:	af00      	add	r7, sp, #0
 8021628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802162a:	bf00      	nop
 802162c:	370c      	adds	r7, #12
 802162e:	46bd      	mov	sp, r7
 8021630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021634:	4770      	bx	lr
	...

08021638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8021638:	b480      	push	{r7}
 802163a:	b085      	sub	sp, #20
 802163c:	af00      	add	r7, sp, #0
 802163e:	6078      	str	r0, [r7, #4]
 8021640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	4a34      	ldr	r2, [pc, #208]	; (802171c <TIM_Base_SetConfig+0xe4>)
 802164c:	4293      	cmp	r3, r2
 802164e:	d00f      	beq.n	8021670 <TIM_Base_SetConfig+0x38>
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021656:	d00b      	beq.n	8021670 <TIM_Base_SetConfig+0x38>
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	4a31      	ldr	r2, [pc, #196]	; (8021720 <TIM_Base_SetConfig+0xe8>)
 802165c:	4293      	cmp	r3, r2
 802165e:	d007      	beq.n	8021670 <TIM_Base_SetConfig+0x38>
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	4a30      	ldr	r2, [pc, #192]	; (8021724 <TIM_Base_SetConfig+0xec>)
 8021664:	4293      	cmp	r3, r2
 8021666:	d003      	beq.n	8021670 <TIM_Base_SetConfig+0x38>
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	4a2f      	ldr	r2, [pc, #188]	; (8021728 <TIM_Base_SetConfig+0xf0>)
 802166c:	4293      	cmp	r3, r2
 802166e:	d108      	bne.n	8021682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8021670:	68fb      	ldr	r3, [r7, #12]
 8021672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8021678:	683b      	ldr	r3, [r7, #0]
 802167a:	685b      	ldr	r3, [r3, #4]
 802167c:	68fa      	ldr	r2, [r7, #12]
 802167e:	4313      	orrs	r3, r2
 8021680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	4a25      	ldr	r2, [pc, #148]	; (802171c <TIM_Base_SetConfig+0xe4>)
 8021686:	4293      	cmp	r3, r2
 8021688:	d01b      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021690:	d017      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	4a22      	ldr	r2, [pc, #136]	; (8021720 <TIM_Base_SetConfig+0xe8>)
 8021696:	4293      	cmp	r3, r2
 8021698:	d013      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	4a21      	ldr	r2, [pc, #132]	; (8021724 <TIM_Base_SetConfig+0xec>)
 802169e:	4293      	cmp	r3, r2
 80216a0:	d00f      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	4a20      	ldr	r2, [pc, #128]	; (8021728 <TIM_Base_SetConfig+0xf0>)
 80216a6:	4293      	cmp	r3, r2
 80216a8:	d00b      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	4a1f      	ldr	r2, [pc, #124]	; (802172c <TIM_Base_SetConfig+0xf4>)
 80216ae:	4293      	cmp	r3, r2
 80216b0:	d007      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	4a1e      	ldr	r2, [pc, #120]	; (8021730 <TIM_Base_SetConfig+0xf8>)
 80216b6:	4293      	cmp	r3, r2
 80216b8:	d003      	beq.n	80216c2 <TIM_Base_SetConfig+0x8a>
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	4a1d      	ldr	r2, [pc, #116]	; (8021734 <TIM_Base_SetConfig+0xfc>)
 80216be:	4293      	cmp	r3, r2
 80216c0:	d108      	bne.n	80216d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80216c2:	68fb      	ldr	r3, [r7, #12]
 80216c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80216c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80216ca:	683b      	ldr	r3, [r7, #0]
 80216cc:	68db      	ldr	r3, [r3, #12]
 80216ce:	68fa      	ldr	r2, [r7, #12]
 80216d0:	4313      	orrs	r3, r2
 80216d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80216da:	683b      	ldr	r3, [r7, #0]
 80216dc:	695b      	ldr	r3, [r3, #20]
 80216de:	4313      	orrs	r3, r2
 80216e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	68fa      	ldr	r2, [r7, #12]
 80216e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80216e8:	683b      	ldr	r3, [r7, #0]
 80216ea:	689a      	ldr	r2, [r3, #8]
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80216f0:	683b      	ldr	r3, [r7, #0]
 80216f2:	681a      	ldr	r2, [r3, #0]
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	4a08      	ldr	r2, [pc, #32]	; (802171c <TIM_Base_SetConfig+0xe4>)
 80216fc:	4293      	cmp	r3, r2
 80216fe:	d103      	bne.n	8021708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8021700:	683b      	ldr	r3, [r7, #0]
 8021702:	691a      	ldr	r2, [r3, #16]
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	2201      	movs	r2, #1
 802170c:	615a      	str	r2, [r3, #20]
}
 802170e:	bf00      	nop
 8021710:	3714      	adds	r7, #20
 8021712:	46bd      	mov	sp, r7
 8021714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021718:	4770      	bx	lr
 802171a:	bf00      	nop
 802171c:	40010000 	.word	0x40010000
 8021720:	40000400 	.word	0x40000400
 8021724:	40000800 	.word	0x40000800
 8021728:	40000c00 	.word	0x40000c00
 802172c:	40014000 	.word	0x40014000
 8021730:	40014400 	.word	0x40014400
 8021734:	40014800 	.word	0x40014800

08021738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021738:	b480      	push	{r7}
 802173a:	b087      	sub	sp, #28
 802173c:	af00      	add	r7, sp, #0
 802173e:	6078      	str	r0, [r7, #4]
 8021740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	6a1b      	ldr	r3, [r3, #32]
 8021746:	f023 0201 	bic.w	r2, r3, #1
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	6a1b      	ldr	r3, [r3, #32]
 8021752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	685b      	ldr	r3, [r3, #4]
 8021758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	699b      	ldr	r3, [r3, #24]
 802175e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8021760:	68fb      	ldr	r3, [r7, #12]
 8021762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8021768:	68fb      	ldr	r3, [r7, #12]
 802176a:	f023 0303 	bic.w	r3, r3, #3
 802176e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021770:	683b      	ldr	r3, [r7, #0]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	68fa      	ldr	r2, [r7, #12]
 8021776:	4313      	orrs	r3, r2
 8021778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802177a:	697b      	ldr	r3, [r7, #20]
 802177c:	f023 0302 	bic.w	r3, r3, #2
 8021780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8021782:	683b      	ldr	r3, [r7, #0]
 8021784:	689b      	ldr	r3, [r3, #8]
 8021786:	697a      	ldr	r2, [r7, #20]
 8021788:	4313      	orrs	r3, r2
 802178a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802178c:	687b      	ldr	r3, [r7, #4]
 802178e:	4a1c      	ldr	r2, [pc, #112]	; (8021800 <TIM_OC1_SetConfig+0xc8>)
 8021790:	4293      	cmp	r3, r2
 8021792:	d10c      	bne.n	80217ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8021794:	697b      	ldr	r3, [r7, #20]
 8021796:	f023 0308 	bic.w	r3, r3, #8
 802179a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802179c:	683b      	ldr	r3, [r7, #0]
 802179e:	68db      	ldr	r3, [r3, #12]
 80217a0:	697a      	ldr	r2, [r7, #20]
 80217a2:	4313      	orrs	r3, r2
 80217a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80217a6:	697b      	ldr	r3, [r7, #20]
 80217a8:	f023 0304 	bic.w	r3, r3, #4
 80217ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	4a13      	ldr	r2, [pc, #76]	; (8021800 <TIM_OC1_SetConfig+0xc8>)
 80217b2:	4293      	cmp	r3, r2
 80217b4:	d111      	bne.n	80217da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80217b6:	693b      	ldr	r3, [r7, #16]
 80217b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80217bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80217be:	693b      	ldr	r3, [r7, #16]
 80217c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80217c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80217c6:	683b      	ldr	r3, [r7, #0]
 80217c8:	695b      	ldr	r3, [r3, #20]
 80217ca:	693a      	ldr	r2, [r7, #16]
 80217cc:	4313      	orrs	r3, r2
 80217ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80217d0:	683b      	ldr	r3, [r7, #0]
 80217d2:	699b      	ldr	r3, [r3, #24]
 80217d4:	693a      	ldr	r2, [r7, #16]
 80217d6:	4313      	orrs	r3, r2
 80217d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	693a      	ldr	r2, [r7, #16]
 80217de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	68fa      	ldr	r2, [r7, #12]
 80217e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80217e6:	683b      	ldr	r3, [r7, #0]
 80217e8:	685a      	ldr	r2, [r3, #4]
 80217ea:	687b      	ldr	r3, [r7, #4]
 80217ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80217ee:	687b      	ldr	r3, [r7, #4]
 80217f0:	697a      	ldr	r2, [r7, #20]
 80217f2:	621a      	str	r2, [r3, #32]
}
 80217f4:	bf00      	nop
 80217f6:	371c      	adds	r7, #28
 80217f8:	46bd      	mov	sp, r7
 80217fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217fe:	4770      	bx	lr
 8021800:	40010000 	.word	0x40010000

08021804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021804:	b480      	push	{r7}
 8021806:	b087      	sub	sp, #28
 8021808:	af00      	add	r7, sp, #0
 802180a:	6078      	str	r0, [r7, #4]
 802180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	6a1b      	ldr	r3, [r3, #32]
 8021812:	f023 0210 	bic.w	r2, r3, #16
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	6a1b      	ldr	r3, [r3, #32]
 802181e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	685b      	ldr	r3, [r3, #4]
 8021824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021826:	687b      	ldr	r3, [r7, #4]
 8021828:	699b      	ldr	r3, [r3, #24]
 802182a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802182c:	68fb      	ldr	r3, [r7, #12]
 802182e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8021834:	68fb      	ldr	r3, [r7, #12]
 8021836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802183a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802183c:	683b      	ldr	r3, [r7, #0]
 802183e:	681b      	ldr	r3, [r3, #0]
 8021840:	021b      	lsls	r3, r3, #8
 8021842:	68fa      	ldr	r2, [r7, #12]
 8021844:	4313      	orrs	r3, r2
 8021846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8021848:	697b      	ldr	r3, [r7, #20]
 802184a:	f023 0320 	bic.w	r3, r3, #32
 802184e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8021850:	683b      	ldr	r3, [r7, #0]
 8021852:	689b      	ldr	r3, [r3, #8]
 8021854:	011b      	lsls	r3, r3, #4
 8021856:	697a      	ldr	r2, [r7, #20]
 8021858:	4313      	orrs	r3, r2
 802185a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	4a1e      	ldr	r2, [pc, #120]	; (80218d8 <TIM_OC2_SetConfig+0xd4>)
 8021860:	4293      	cmp	r3, r2
 8021862:	d10d      	bne.n	8021880 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8021864:	697b      	ldr	r3, [r7, #20]
 8021866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802186a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802186c:	683b      	ldr	r3, [r7, #0]
 802186e:	68db      	ldr	r3, [r3, #12]
 8021870:	011b      	lsls	r3, r3, #4
 8021872:	697a      	ldr	r2, [r7, #20]
 8021874:	4313      	orrs	r3, r2
 8021876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8021878:	697b      	ldr	r3, [r7, #20]
 802187a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802187e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	4a15      	ldr	r2, [pc, #84]	; (80218d8 <TIM_OC2_SetConfig+0xd4>)
 8021884:	4293      	cmp	r3, r2
 8021886:	d113      	bne.n	80218b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8021888:	693b      	ldr	r3, [r7, #16]
 802188a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802188e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8021890:	693b      	ldr	r3, [r7, #16]
 8021892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8021898:	683b      	ldr	r3, [r7, #0]
 802189a:	695b      	ldr	r3, [r3, #20]
 802189c:	009b      	lsls	r3, r3, #2
 802189e:	693a      	ldr	r2, [r7, #16]
 80218a0:	4313      	orrs	r3, r2
 80218a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80218a4:	683b      	ldr	r3, [r7, #0]
 80218a6:	699b      	ldr	r3, [r3, #24]
 80218a8:	009b      	lsls	r3, r3, #2
 80218aa:	693a      	ldr	r2, [r7, #16]
 80218ac:	4313      	orrs	r3, r2
 80218ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	693a      	ldr	r2, [r7, #16]
 80218b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	68fa      	ldr	r2, [r7, #12]
 80218ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80218bc:	683b      	ldr	r3, [r7, #0]
 80218be:	685a      	ldr	r2, [r3, #4]
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	697a      	ldr	r2, [r7, #20]
 80218c8:	621a      	str	r2, [r3, #32]
}
 80218ca:	bf00      	nop
 80218cc:	371c      	adds	r7, #28
 80218ce:	46bd      	mov	sp, r7
 80218d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218d4:	4770      	bx	lr
 80218d6:	bf00      	nop
 80218d8:	40010000 	.word	0x40010000

080218dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80218dc:	b480      	push	{r7}
 80218de:	b087      	sub	sp, #28
 80218e0:	af00      	add	r7, sp, #0
 80218e2:	6078      	str	r0, [r7, #4]
 80218e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80218e6:	687b      	ldr	r3, [r7, #4]
 80218e8:	6a1b      	ldr	r3, [r3, #32]
 80218ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	6a1b      	ldr	r3, [r3, #32]
 80218f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	685b      	ldr	r3, [r3, #4]
 80218fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80218fe:	687b      	ldr	r3, [r7, #4]
 8021900:	69db      	ldr	r3, [r3, #28]
 8021902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8021904:	68fb      	ldr	r3, [r7, #12]
 8021906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802190a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	f023 0303 	bic.w	r3, r3, #3
 8021912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021914:	683b      	ldr	r3, [r7, #0]
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	68fa      	ldr	r2, [r7, #12]
 802191a:	4313      	orrs	r3, r2
 802191c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802191e:	697b      	ldr	r3, [r7, #20]
 8021920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8021926:	683b      	ldr	r3, [r7, #0]
 8021928:	689b      	ldr	r3, [r3, #8]
 802192a:	021b      	lsls	r3, r3, #8
 802192c:	697a      	ldr	r2, [r7, #20]
 802192e:	4313      	orrs	r3, r2
 8021930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	4a1d      	ldr	r2, [pc, #116]	; (80219ac <TIM_OC3_SetConfig+0xd0>)
 8021936:	4293      	cmp	r3, r2
 8021938:	d10d      	bne.n	8021956 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802193a:	697b      	ldr	r3, [r7, #20]
 802193c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8021942:	683b      	ldr	r3, [r7, #0]
 8021944:	68db      	ldr	r3, [r3, #12]
 8021946:	021b      	lsls	r3, r3, #8
 8021948:	697a      	ldr	r2, [r7, #20]
 802194a:	4313      	orrs	r3, r2
 802194c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802194e:	697b      	ldr	r3, [r7, #20]
 8021950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	4a14      	ldr	r2, [pc, #80]	; (80219ac <TIM_OC3_SetConfig+0xd0>)
 802195a:	4293      	cmp	r3, r2
 802195c:	d113      	bne.n	8021986 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802195e:	693b      	ldr	r3, [r7, #16]
 8021960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8021966:	693b      	ldr	r3, [r7, #16]
 8021968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802196c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802196e:	683b      	ldr	r3, [r7, #0]
 8021970:	695b      	ldr	r3, [r3, #20]
 8021972:	011b      	lsls	r3, r3, #4
 8021974:	693a      	ldr	r2, [r7, #16]
 8021976:	4313      	orrs	r3, r2
 8021978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802197a:	683b      	ldr	r3, [r7, #0]
 802197c:	699b      	ldr	r3, [r3, #24]
 802197e:	011b      	lsls	r3, r3, #4
 8021980:	693a      	ldr	r2, [r7, #16]
 8021982:	4313      	orrs	r3, r2
 8021984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	693a      	ldr	r2, [r7, #16]
 802198a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	68fa      	ldr	r2, [r7, #12]
 8021990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8021992:	683b      	ldr	r3, [r7, #0]
 8021994:	685a      	ldr	r2, [r3, #4]
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	697a      	ldr	r2, [r7, #20]
 802199e:	621a      	str	r2, [r3, #32]
}
 80219a0:	bf00      	nop
 80219a2:	371c      	adds	r7, #28
 80219a4:	46bd      	mov	sp, r7
 80219a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219aa:	4770      	bx	lr
 80219ac:	40010000 	.word	0x40010000

080219b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80219b0:	b480      	push	{r7}
 80219b2:	b087      	sub	sp, #28
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	6078      	str	r0, [r7, #4]
 80219b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80219ba:	687b      	ldr	r3, [r7, #4]
 80219bc:	6a1b      	ldr	r3, [r3, #32]
 80219be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	6a1b      	ldr	r3, [r3, #32]
 80219ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80219cc:	687b      	ldr	r3, [r7, #4]
 80219ce:	685b      	ldr	r3, [r3, #4]
 80219d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	69db      	ldr	r3, [r3, #28]
 80219d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80219de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80219e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80219e8:	683b      	ldr	r3, [r7, #0]
 80219ea:	681b      	ldr	r3, [r3, #0]
 80219ec:	021b      	lsls	r3, r3, #8
 80219ee:	68fa      	ldr	r2, [r7, #12]
 80219f0:	4313      	orrs	r3, r2
 80219f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80219f4:	693b      	ldr	r3, [r7, #16]
 80219f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80219fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80219fc:	683b      	ldr	r3, [r7, #0]
 80219fe:	689b      	ldr	r3, [r3, #8]
 8021a00:	031b      	lsls	r3, r3, #12
 8021a02:	693a      	ldr	r2, [r7, #16]
 8021a04:	4313      	orrs	r3, r2
 8021a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	4a10      	ldr	r2, [pc, #64]	; (8021a4c <TIM_OC4_SetConfig+0x9c>)
 8021a0c:	4293      	cmp	r3, r2
 8021a0e:	d109      	bne.n	8021a24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8021a10:	697b      	ldr	r3, [r7, #20]
 8021a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8021a18:	683b      	ldr	r3, [r7, #0]
 8021a1a:	695b      	ldr	r3, [r3, #20]
 8021a1c:	019b      	lsls	r3, r3, #6
 8021a1e:	697a      	ldr	r2, [r7, #20]
 8021a20:	4313      	orrs	r3, r2
 8021a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	697a      	ldr	r2, [r7, #20]
 8021a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	68fa      	ldr	r2, [r7, #12]
 8021a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8021a30:	683b      	ldr	r3, [r7, #0]
 8021a32:	685a      	ldr	r2, [r3, #4]
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	693a      	ldr	r2, [r7, #16]
 8021a3c:	621a      	str	r2, [r3, #32]
}
 8021a3e:	bf00      	nop
 8021a40:	371c      	adds	r7, #28
 8021a42:	46bd      	mov	sp, r7
 8021a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a48:	4770      	bx	lr
 8021a4a:	bf00      	nop
 8021a4c:	40010000 	.word	0x40010000

08021a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021a50:	b480      	push	{r7}
 8021a52:	b087      	sub	sp, #28
 8021a54:	af00      	add	r7, sp, #0
 8021a56:	60f8      	str	r0, [r7, #12]
 8021a58:	60b9      	str	r1, [r7, #8]
 8021a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021a5c:	68fb      	ldr	r3, [r7, #12]
 8021a5e:	6a1b      	ldr	r3, [r3, #32]
 8021a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021a62:	68fb      	ldr	r3, [r7, #12]
 8021a64:	6a1b      	ldr	r3, [r3, #32]
 8021a66:	f023 0201 	bic.w	r2, r3, #1
 8021a6a:	68fb      	ldr	r3, [r7, #12]
 8021a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021a6e:	68fb      	ldr	r3, [r7, #12]
 8021a70:	699b      	ldr	r3, [r3, #24]
 8021a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021a74:	693b      	ldr	r3, [r7, #16]
 8021a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	011b      	lsls	r3, r3, #4
 8021a80:	693a      	ldr	r2, [r7, #16]
 8021a82:	4313      	orrs	r3, r2
 8021a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021a86:	697b      	ldr	r3, [r7, #20]
 8021a88:	f023 030a 	bic.w	r3, r3, #10
 8021a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8021a8e:	697a      	ldr	r2, [r7, #20]
 8021a90:	68bb      	ldr	r3, [r7, #8]
 8021a92:	4313      	orrs	r3, r2
 8021a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021a96:	68fb      	ldr	r3, [r7, #12]
 8021a98:	693a      	ldr	r2, [r7, #16]
 8021a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021a9c:	68fb      	ldr	r3, [r7, #12]
 8021a9e:	697a      	ldr	r2, [r7, #20]
 8021aa0:	621a      	str	r2, [r3, #32]
}
 8021aa2:	bf00      	nop
 8021aa4:	371c      	adds	r7, #28
 8021aa6:	46bd      	mov	sp, r7
 8021aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aac:	4770      	bx	lr

08021aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021aae:	b480      	push	{r7}
 8021ab0:	b087      	sub	sp, #28
 8021ab2:	af00      	add	r7, sp, #0
 8021ab4:	60f8      	str	r0, [r7, #12]
 8021ab6:	60b9      	str	r1, [r7, #8]
 8021ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	6a1b      	ldr	r3, [r3, #32]
 8021abe:	f023 0210 	bic.w	r2, r3, #16
 8021ac2:	68fb      	ldr	r3, [r7, #12]
 8021ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021ac6:	68fb      	ldr	r3, [r7, #12]
 8021ac8:	699b      	ldr	r3, [r3, #24]
 8021aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021acc:	68fb      	ldr	r3, [r7, #12]
 8021ace:	6a1b      	ldr	r3, [r3, #32]
 8021ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8021ad2:	697b      	ldr	r3, [r7, #20]
 8021ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8021ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021ada:	687b      	ldr	r3, [r7, #4]
 8021adc:	031b      	lsls	r3, r3, #12
 8021ade:	697a      	ldr	r2, [r7, #20]
 8021ae0:	4313      	orrs	r3, r2
 8021ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021ae4:	693b      	ldr	r3, [r7, #16]
 8021ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021aec:	68bb      	ldr	r3, [r7, #8]
 8021aee:	011b      	lsls	r3, r3, #4
 8021af0:	693a      	ldr	r2, [r7, #16]
 8021af2:	4313      	orrs	r3, r2
 8021af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021af6:	68fb      	ldr	r3, [r7, #12]
 8021af8:	697a      	ldr	r2, [r7, #20]
 8021afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021afc:	68fb      	ldr	r3, [r7, #12]
 8021afe:	693a      	ldr	r2, [r7, #16]
 8021b00:	621a      	str	r2, [r3, #32]
}
 8021b02:	bf00      	nop
 8021b04:	371c      	adds	r7, #28
 8021b06:	46bd      	mov	sp, r7
 8021b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b0c:	4770      	bx	lr

08021b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8021b0e:	b480      	push	{r7}
 8021b10:	b085      	sub	sp, #20
 8021b12:	af00      	add	r7, sp, #0
 8021b14:	6078      	str	r0, [r7, #4]
 8021b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	689b      	ldr	r3, [r3, #8]
 8021b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8021b1e:	68fb      	ldr	r3, [r7, #12]
 8021b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021b26:	683a      	ldr	r2, [r7, #0]
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	4313      	orrs	r3, r2
 8021b2c:	f043 0307 	orr.w	r3, r3, #7
 8021b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	68fa      	ldr	r2, [r7, #12]
 8021b36:	609a      	str	r2, [r3, #8]
}
 8021b38:	bf00      	nop
 8021b3a:	3714      	adds	r7, #20
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b42:	4770      	bx	lr

08021b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021b44:	b480      	push	{r7}
 8021b46:	b087      	sub	sp, #28
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	60f8      	str	r0, [r7, #12]
 8021b4c:	60b9      	str	r1, [r7, #8]
 8021b4e:	607a      	str	r2, [r7, #4]
 8021b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	689b      	ldr	r3, [r3, #8]
 8021b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8021b58:	697b      	ldr	r3, [r7, #20]
 8021b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021b60:	683b      	ldr	r3, [r7, #0]
 8021b62:	021a      	lsls	r2, r3, #8
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	431a      	orrs	r2, r3
 8021b68:	68bb      	ldr	r3, [r7, #8]
 8021b6a:	4313      	orrs	r3, r2
 8021b6c:	697a      	ldr	r2, [r7, #20]
 8021b6e:	4313      	orrs	r3, r2
 8021b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021b72:	68fb      	ldr	r3, [r7, #12]
 8021b74:	697a      	ldr	r2, [r7, #20]
 8021b76:	609a      	str	r2, [r3, #8]
}
 8021b78:	bf00      	nop
 8021b7a:	371c      	adds	r7, #28
 8021b7c:	46bd      	mov	sp, r7
 8021b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b82:	4770      	bx	lr

08021b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8021b84:	b480      	push	{r7}
 8021b86:	b087      	sub	sp, #28
 8021b88:	af00      	add	r7, sp, #0
 8021b8a:	60f8      	str	r0, [r7, #12]
 8021b8c:	60b9      	str	r1, [r7, #8]
 8021b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021b90:	68bb      	ldr	r3, [r7, #8]
 8021b92:	f003 031f 	and.w	r3, r3, #31
 8021b96:	2201      	movs	r2, #1
 8021b98:	fa02 f303 	lsl.w	r3, r2, r3
 8021b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8021b9e:	68fb      	ldr	r3, [r7, #12]
 8021ba0:	6a1a      	ldr	r2, [r3, #32]
 8021ba2:	697b      	ldr	r3, [r7, #20]
 8021ba4:	43db      	mvns	r3, r3
 8021ba6:	401a      	ands	r2, r3
 8021ba8:	68fb      	ldr	r3, [r7, #12]
 8021baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8021bac:	68fb      	ldr	r3, [r7, #12]
 8021bae:	6a1a      	ldr	r2, [r3, #32]
 8021bb0:	68bb      	ldr	r3, [r7, #8]
 8021bb2:	f003 031f 	and.w	r3, r3, #31
 8021bb6:	6879      	ldr	r1, [r7, #4]
 8021bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8021bbc:	431a      	orrs	r2, r3
 8021bbe:	68fb      	ldr	r3, [r7, #12]
 8021bc0:	621a      	str	r2, [r3, #32]
}
 8021bc2:	bf00      	nop
 8021bc4:	371c      	adds	r7, #28
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bcc:	4770      	bx	lr
	...

08021bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021bd0:	b480      	push	{r7}
 8021bd2:	b085      	sub	sp, #20
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	6078      	str	r0, [r7, #4]
 8021bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021bda:	687b      	ldr	r3, [r7, #4]
 8021bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021be0:	2b01      	cmp	r3, #1
 8021be2:	d101      	bne.n	8021be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021be4:	2302      	movs	r3, #2
 8021be6:	e050      	b.n	8021c8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	2201      	movs	r2, #1
 8021bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	2202      	movs	r2, #2
 8021bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	685b      	ldr	r3, [r3, #4]
 8021bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	689b      	ldr	r3, [r3, #8]
 8021c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8021c10:	683b      	ldr	r3, [r7, #0]
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	68fa      	ldr	r2, [r7, #12]
 8021c16:	4313      	orrs	r3, r2
 8021c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	68fa      	ldr	r2, [r7, #12]
 8021c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	4a1c      	ldr	r2, [pc, #112]	; (8021c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8021c28:	4293      	cmp	r3, r2
 8021c2a:	d018      	beq.n	8021c5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	681b      	ldr	r3, [r3, #0]
 8021c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021c34:	d013      	beq.n	8021c5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	4a18      	ldr	r2, [pc, #96]	; (8021c9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8021c3c:	4293      	cmp	r3, r2
 8021c3e:	d00e      	beq.n	8021c5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	681b      	ldr	r3, [r3, #0]
 8021c44:	4a16      	ldr	r2, [pc, #88]	; (8021ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8021c46:	4293      	cmp	r3, r2
 8021c48:	d009      	beq.n	8021c5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	4a15      	ldr	r2, [pc, #84]	; (8021ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8021c50:	4293      	cmp	r3, r2
 8021c52:	d004      	beq.n	8021c5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	681b      	ldr	r3, [r3, #0]
 8021c58:	4a13      	ldr	r2, [pc, #76]	; (8021ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8021c5a:	4293      	cmp	r3, r2
 8021c5c:	d10c      	bne.n	8021c78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021c5e:	68bb      	ldr	r3, [r7, #8]
 8021c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021c66:	683b      	ldr	r3, [r7, #0]
 8021c68:	685b      	ldr	r3, [r3, #4]
 8021c6a:	68ba      	ldr	r2, [r7, #8]
 8021c6c:	4313      	orrs	r3, r2
 8021c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	68ba      	ldr	r2, [r7, #8]
 8021c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	2201      	movs	r2, #1
 8021c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	2200      	movs	r2, #0
 8021c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021c88:	2300      	movs	r3, #0
}
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	3714      	adds	r7, #20
 8021c8e:	46bd      	mov	sp, r7
 8021c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c94:	4770      	bx	lr
 8021c96:	bf00      	nop
 8021c98:	40010000 	.word	0x40010000
 8021c9c:	40000400 	.word	0x40000400
 8021ca0:	40000800 	.word	0x40000800
 8021ca4:	40000c00 	.word	0x40000c00
 8021ca8:	40014000 	.word	0x40014000

08021cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021cac:	b480      	push	{r7}
 8021cae:	b083      	sub	sp, #12
 8021cb0:	af00      	add	r7, sp, #0
 8021cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021cb4:	bf00      	nop
 8021cb6:	370c      	adds	r7, #12
 8021cb8:	46bd      	mov	sp, r7
 8021cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cbe:	4770      	bx	lr

08021cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021cc0:	b480      	push	{r7}
 8021cc2:	b083      	sub	sp, #12
 8021cc4:	af00      	add	r7, sp, #0
 8021cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021cc8:	bf00      	nop
 8021cca:	370c      	adds	r7, #12
 8021ccc:	46bd      	mov	sp, r7
 8021cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cd2:	4770      	bx	lr

08021cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021cd4:	b580      	push	{r7, lr}
 8021cd6:	b082      	sub	sp, #8
 8021cd8:	af00      	add	r7, sp, #0
 8021cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d101      	bne.n	8021ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021ce2:	2301      	movs	r3, #1
 8021ce4:	e03f      	b.n	8021d66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021cec:	b2db      	uxtb	r3, r3
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d106      	bne.n	8021d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	2200      	movs	r2, #0
 8021cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021cfa:	6878      	ldr	r0, [r7, #4]
 8021cfc:	f7e1 fd08 	bl	8003710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	2224      	movs	r2, #36	; 0x24
 8021d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	681b      	ldr	r3, [r3, #0]
 8021d0c:	68da      	ldr	r2, [r3, #12]
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021d18:	6878      	ldr	r0, [r7, #4]
 8021d1a:	f000 fec7 	bl	8022aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	691a      	ldr	r2, [r3, #16]
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	681b      	ldr	r3, [r3, #0]
 8021d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	681b      	ldr	r3, [r3, #0]
 8021d32:	695a      	ldr	r2, [r3, #20]
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	681b      	ldr	r3, [r3, #0]
 8021d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	68da      	ldr	r2, [r3, #12]
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	2200      	movs	r2, #0
 8021d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	2220      	movs	r2, #32
 8021d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	2220      	movs	r2, #32
 8021d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021d64:	2300      	movs	r3, #0
}
 8021d66:	4618      	mov	r0, r3
 8021d68:	3708      	adds	r7, #8
 8021d6a:	46bd      	mov	sp, r7
 8021d6c:	bd80      	pop	{r7, pc}

08021d6e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8021d6e:	b580      	push	{r7, lr}
 8021d70:	b082      	sub	sp, #8
 8021d72:	af00      	add	r7, sp, #0
 8021d74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d101      	bne.n	8021d80 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8021d7c:	2301      	movs	r3, #1
 8021d7e:	e021      	b.n	8021dc4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	2224      	movs	r2, #36	; 0x24
 8021d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	681b      	ldr	r3, [r3, #0]
 8021d8c:	68da      	ldr	r2, [r3, #12]
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021d96:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8021d98:	6878      	ldr	r0, [r7, #4]
 8021d9a:	f7e1 fd83 	bl	80038a4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021d9e:	687b      	ldr	r3, [r7, #4]
 8021da0:	2200      	movs	r2, #0
 8021da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	2200      	movs	r2, #0
 8021da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	2200      	movs	r2, #0
 8021db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	2200      	movs	r2, #0
 8021db8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	2200      	movs	r2, #0
 8021dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021dc2:	2300      	movs	r3, #0
}
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	3708      	adds	r7, #8
 8021dc8:	46bd      	mov	sp, r7
 8021dca:	bd80      	pop	{r7, pc}

08021dcc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8021dcc:	b480      	push	{r7}
 8021dce:	b085      	sub	sp, #20
 8021dd0:	af00      	add	r7, sp, #0
 8021dd2:	60f8      	str	r0, [r7, #12]
 8021dd4:	60b9      	str	r1, [r7, #8]
 8021dd6:	4613      	mov	r3, r2
 8021dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021dda:	68fb      	ldr	r3, [r7, #12]
 8021ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021de0:	b2db      	uxtb	r3, r3
 8021de2:	2b20      	cmp	r3, #32
 8021de4:	d130      	bne.n	8021e48 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8021de6:	68bb      	ldr	r3, [r7, #8]
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d002      	beq.n	8021df2 <HAL_UART_Transmit_IT+0x26>
 8021dec:	88fb      	ldrh	r3, [r7, #6]
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d101      	bne.n	8021df6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8021df2:	2301      	movs	r3, #1
 8021df4:	e029      	b.n	8021e4a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021dfc:	2b01      	cmp	r3, #1
 8021dfe:	d101      	bne.n	8021e04 <HAL_UART_Transmit_IT+0x38>
 8021e00:	2302      	movs	r3, #2
 8021e02:	e022      	b.n	8021e4a <HAL_UART_Transmit_IT+0x7e>
 8021e04:	68fb      	ldr	r3, [r7, #12]
 8021e06:	2201      	movs	r2, #1
 8021e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8021e0c:	68fb      	ldr	r3, [r7, #12]
 8021e0e:	68ba      	ldr	r2, [r7, #8]
 8021e10:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8021e12:	68fb      	ldr	r3, [r7, #12]
 8021e14:	88fa      	ldrh	r2, [r7, #6]
 8021e16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8021e18:	68fb      	ldr	r3, [r7, #12]
 8021e1a:	88fa      	ldrh	r2, [r7, #6]
 8021e1c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	2200      	movs	r2, #0
 8021e22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021e24:	68fb      	ldr	r3, [r7, #12]
 8021e26:	2221      	movs	r2, #33	; 0x21
 8021e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021e2c:	68fb      	ldr	r3, [r7, #12]
 8021e2e:	2200      	movs	r2, #0
 8021e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8021e34:	68fb      	ldr	r3, [r7, #12]
 8021e36:	681b      	ldr	r3, [r3, #0]
 8021e38:	68da      	ldr	r2, [r3, #12]
 8021e3a:	68fb      	ldr	r3, [r7, #12]
 8021e3c:	681b      	ldr	r3, [r3, #0]
 8021e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021e42:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8021e44:	2300      	movs	r3, #0
 8021e46:	e000      	b.n	8021e4a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8021e48:	2302      	movs	r3, #2
  }
}
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	3714      	adds	r7, #20
 8021e4e:	46bd      	mov	sp, r7
 8021e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e54:	4770      	bx	lr

08021e56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8021e56:	b580      	push	{r7, lr}
 8021e58:	b084      	sub	sp, #16
 8021e5a:	af00      	add	r7, sp, #0
 8021e5c:	60f8      	str	r0, [r7, #12]
 8021e5e:	60b9      	str	r1, [r7, #8]
 8021e60:	4613      	mov	r3, r2
 8021e62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8021e64:	68fb      	ldr	r3, [r7, #12]
 8021e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021e6a:	b2db      	uxtb	r3, r3
 8021e6c:	2b20      	cmp	r3, #32
 8021e6e:	d11d      	bne.n	8021eac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8021e70:	68bb      	ldr	r3, [r7, #8]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d002      	beq.n	8021e7c <HAL_UART_Receive_IT+0x26>
 8021e76:	88fb      	ldrh	r3, [r7, #6]
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d101      	bne.n	8021e80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8021e7c:	2301      	movs	r3, #1
 8021e7e:	e016      	b.n	8021eae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021e86:	2b01      	cmp	r3, #1
 8021e88:	d101      	bne.n	8021e8e <HAL_UART_Receive_IT+0x38>
 8021e8a:	2302      	movs	r3, #2
 8021e8c:	e00f      	b.n	8021eae <HAL_UART_Receive_IT+0x58>
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	2201      	movs	r2, #1
 8021e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021e96:	68fb      	ldr	r3, [r7, #12]
 8021e98:	2200      	movs	r2, #0
 8021e9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8021e9c:	88fb      	ldrh	r3, [r7, #6]
 8021e9e:	461a      	mov	r2, r3
 8021ea0:	68b9      	ldr	r1, [r7, #8]
 8021ea2:	68f8      	ldr	r0, [r7, #12]
 8021ea4:	f000 fbca 	bl	802263c <UART_Start_Receive_IT>
 8021ea8:	4603      	mov	r3, r0
 8021eaa:	e000      	b.n	8021eae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8021eac:	2302      	movs	r3, #2
  }
}
 8021eae:	4618      	mov	r0, r3
 8021eb0:	3710      	adds	r7, #16
 8021eb2:	46bd      	mov	sp, r7
 8021eb4:	bd80      	pop	{r7, pc}
	...

08021eb8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8021eb8:	b580      	push	{r7, lr}
 8021eba:	b0a2      	sub	sp, #136	; 0x88
 8021ebc:	af00      	add	r7, sp, #0
 8021ebe:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8021ec0:	2301      	movs	r3, #1
 8021ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	330c      	adds	r3, #12
 8021ecc:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021ed0:	e853 3f00 	ldrex	r3, [r3]
 8021ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8021ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021ed8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8021edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	330c      	adds	r3, #12
 8021ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021eec:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021ef2:	e841 2300 	strex	r3, r2, [r1]
 8021ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8021ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d1e3      	bne.n	8021ec6 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	3314      	adds	r3, #20
 8021f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021f08:	e853 3f00 	ldrex	r3, [r3]
 8021f0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021f10:	f023 0301 	bic.w	r3, r3, #1
 8021f14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	681b      	ldr	r3, [r3, #0]
 8021f1a:	3314      	adds	r3, #20
 8021f1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021f1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8021f20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021f26:	e841 2300 	strex	r3, r2, [r1]
 8021f2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8021f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d1e5      	bne.n	8021efe <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f36:	2b01      	cmp	r3, #1
 8021f38:	d119      	bne.n	8021f6e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	330c      	adds	r3, #12
 8021f40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021f44:	e853 3f00 	ldrex	r3, [r3]
 8021f48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8021f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f4c:	f023 0310 	bic.w	r3, r3, #16
 8021f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	681b      	ldr	r3, [r3, #0]
 8021f56:	330c      	adds	r3, #12
 8021f58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8021f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8021f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021f62:	e841 2300 	strex	r3, r2, [r1]
 8021f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8021f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	d1e5      	bne.n	8021f3a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d00f      	beq.n	8021f96 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	681b      	ldr	r3, [r3, #0]
 8021f7a:	695b      	ldr	r3, [r3, #20]
 8021f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021f80:	2b80      	cmp	r3, #128	; 0x80
 8021f82:	d104      	bne.n	8021f8e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8021f84:	687b      	ldr	r3, [r7, #4]
 8021f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021f88:	4a53      	ldr	r2, [pc, #332]	; (80220d8 <HAL_UART_Abort_IT+0x220>)
 8021f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8021f8c:	e003      	b.n	8021f96 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021f92:	2200      	movs	r2, #0
 8021f94:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d00f      	beq.n	8021fbe <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	695b      	ldr	r3, [r3, #20]
 8021fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021fa8:	2b40      	cmp	r3, #64	; 0x40
 8021faa:	d104      	bne.n	8021fb6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021fb0:	4a4a      	ldr	r2, [pc, #296]	; (80220dc <HAL_UART_Abort_IT+0x224>)
 8021fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8021fb4:	e003      	b.n	8021fbe <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021fba:	2200      	movs	r2, #0
 8021fbc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	681b      	ldr	r3, [r3, #0]
 8021fc2:	695b      	ldr	r3, [r3, #20]
 8021fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021fc8:	2b80      	cmp	r3, #128	; 0x80
 8021fca:	d12d      	bne.n	8022028 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	3314      	adds	r3, #20
 8021fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fd6:	e853 3f00 	ldrex	r3, [r3]
 8021fda:	623b      	str	r3, [r7, #32]
   return(result);
 8021fdc:	6a3b      	ldr	r3, [r7, #32]
 8021fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021fe2:	677b      	str	r3, [r7, #116]	; 0x74
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	3314      	adds	r3, #20
 8021fea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021fec:	633a      	str	r2, [r7, #48]	; 0x30
 8021fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021ff4:	e841 2300 	strex	r3, r2, [r1]
 8021ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d1e5      	bne.n	8021fcc <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022004:	2b00      	cmp	r3, #0
 8022006:	d00f      	beq.n	8022028 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802200c:	4618      	mov	r0, r3
 802200e:	f7fa fcdf 	bl	801c9d0 <HAL_DMA_Abort_IT>
 8022012:	4603      	mov	r3, r0
 8022014:	2b00      	cmp	r3, #0
 8022016:	d004      	beq.n	8022022 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802201c:	2200      	movs	r2, #0
 802201e:	651a      	str	r2, [r3, #80]	; 0x50
 8022020:	e002      	b.n	8022028 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8022022:	2300      	movs	r3, #0
 8022024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	681b      	ldr	r3, [r3, #0]
 802202c:	695b      	ldr	r3, [r3, #20]
 802202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022032:	2b40      	cmp	r3, #64	; 0x40
 8022034:	d130      	bne.n	8022098 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	681b      	ldr	r3, [r3, #0]
 802203a:	3314      	adds	r3, #20
 802203c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802203e:	693b      	ldr	r3, [r7, #16]
 8022040:	e853 3f00 	ldrex	r3, [r3]
 8022044:	60fb      	str	r3, [r7, #12]
   return(result);
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802204c:	673b      	str	r3, [r7, #112]	; 0x70
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	681b      	ldr	r3, [r3, #0]
 8022052:	3314      	adds	r3, #20
 8022054:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022056:	61fa      	str	r2, [r7, #28]
 8022058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802205a:	69b9      	ldr	r1, [r7, #24]
 802205c:	69fa      	ldr	r2, [r7, #28]
 802205e:	e841 2300 	strex	r3, r2, [r1]
 8022062:	617b      	str	r3, [r7, #20]
   return(result);
 8022064:	697b      	ldr	r3, [r7, #20]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d1e5      	bne.n	8022036 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802206e:	2b00      	cmp	r3, #0
 8022070:	d012      	beq.n	8022098 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022076:	4618      	mov	r0, r3
 8022078:	f7fa fcaa 	bl	801c9d0 <HAL_DMA_Abort_IT>
 802207c:	4603      	mov	r3, r0
 802207e:	2b00      	cmp	r3, #0
 8022080:	d007      	beq.n	8022092 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022086:	2200      	movs	r2, #0
 8022088:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 802208a:	2301      	movs	r3, #1
 802208c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022090:	e002      	b.n	8022098 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8022092:	2300      	movs	r3, #0
 8022094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8022098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802209c:	2b01      	cmp	r3, #1
 802209e:	d116      	bne.n	80220ce <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	2200      	movs	r2, #0
 80220a4:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	2200      	movs	r2, #0
 80220aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	2200      	movs	r2, #0
 80220b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	2220      	movs	r2, #32
 80220b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	2220      	movs	r2, #32
 80220be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	2200      	movs	r2, #0
 80220c6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80220c8:	6878      	ldr	r0, [r7, #4]
 80220ca:	f000 faa1 	bl	8022610 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80220ce:	2300      	movs	r3, #0
}
 80220d0:	4618      	mov	r0, r3
 80220d2:	3788      	adds	r7, #136	; 0x88
 80220d4:	46bd      	mov	sp, r7
 80220d6:	bd80      	pop	{r7, pc}
 80220d8:	080227a7 	.word	0x080227a7
 80220dc:	08022807 	.word	0x08022807

080220e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80220e0:	b580      	push	{r7, lr}
 80220e2:	b0ba      	sub	sp, #232	; 0xe8
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	681b      	ldr	r3, [r3, #0]
 80220ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80220f2:	687b      	ldr	r3, [r7, #4]
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	68db      	ldr	r3, [r3, #12]
 80220f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	695b      	ldr	r3, [r3, #20]
 8022102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8022106:	2300      	movs	r3, #0
 8022108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802210c:	2300      	movs	r3, #0
 802210e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8022112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022116:	f003 030f 	and.w	r3, r3, #15
 802211a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802211e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8022122:	2b00      	cmp	r3, #0
 8022124:	d10f      	bne.n	8022146 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8022126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802212a:	f003 0320 	and.w	r3, r3, #32
 802212e:	2b00      	cmp	r3, #0
 8022130:	d009      	beq.n	8022146 <HAL_UART_IRQHandler+0x66>
 8022132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022136:	f003 0320 	and.w	r3, r3, #32
 802213a:	2b00      	cmp	r3, #0
 802213c:	d003      	beq.n	8022146 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802213e:	6878      	ldr	r0, [r7, #4]
 8022140:	f000 fbf9 	bl	8022936 <UART_Receive_IT>
      return;
 8022144:	e256      	b.n	80225f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8022146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802214a:	2b00      	cmp	r3, #0
 802214c:	f000 80de 	beq.w	802230c <HAL_UART_IRQHandler+0x22c>
 8022150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022154:	f003 0301 	and.w	r3, r3, #1
 8022158:	2b00      	cmp	r3, #0
 802215a:	d106      	bne.n	802216a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802215c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022160:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8022164:	2b00      	cmp	r3, #0
 8022166:	f000 80d1 	beq.w	802230c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802216a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802216e:	f003 0301 	and.w	r3, r3, #1
 8022172:	2b00      	cmp	r3, #0
 8022174:	d00b      	beq.n	802218e <HAL_UART_IRQHandler+0xae>
 8022176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802217e:	2b00      	cmp	r3, #0
 8022180:	d005      	beq.n	802218e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022186:	f043 0201 	orr.w	r2, r3, #1
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022192:	f003 0304 	and.w	r3, r3, #4
 8022196:	2b00      	cmp	r3, #0
 8022198:	d00b      	beq.n	80221b2 <HAL_UART_IRQHandler+0xd2>
 802219a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802219e:	f003 0301 	and.w	r3, r3, #1
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d005      	beq.n	80221b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80221aa:	f043 0202 	orr.w	r2, r3, #2
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80221b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80221b6:	f003 0302 	and.w	r3, r3, #2
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d00b      	beq.n	80221d6 <HAL_UART_IRQHandler+0xf6>
 80221be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80221c2:	f003 0301 	and.w	r3, r3, #1
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d005      	beq.n	80221d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80221ce:	f043 0204 	orr.w	r2, r3, #4
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80221d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80221da:	f003 0308 	and.w	r3, r3, #8
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d011      	beq.n	8022206 <HAL_UART_IRQHandler+0x126>
 80221e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80221e6:	f003 0320 	and.w	r3, r3, #32
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d105      	bne.n	80221fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80221ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80221f2:	f003 0301 	and.w	r3, r3, #1
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d005      	beq.n	8022206 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80221fe:	f043 0208 	orr.w	r2, r3, #8
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802220a:	2b00      	cmp	r3, #0
 802220c:	f000 81ed 	beq.w	80225ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8022210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022214:	f003 0320 	and.w	r3, r3, #32
 8022218:	2b00      	cmp	r3, #0
 802221a:	d008      	beq.n	802222e <HAL_UART_IRQHandler+0x14e>
 802221c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022220:	f003 0320 	and.w	r3, r3, #32
 8022224:	2b00      	cmp	r3, #0
 8022226:	d002      	beq.n	802222e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8022228:	6878      	ldr	r0, [r7, #4]
 802222a:	f000 fb84 	bl	8022936 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	695b      	ldr	r3, [r3, #20]
 8022234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022238:	2b40      	cmp	r3, #64	; 0x40
 802223a:	bf0c      	ite	eq
 802223c:	2301      	moveq	r3, #1
 802223e:	2300      	movne	r3, #0
 8022240:	b2db      	uxtb	r3, r3
 8022242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802224a:	f003 0308 	and.w	r3, r3, #8
 802224e:	2b00      	cmp	r3, #0
 8022250:	d103      	bne.n	802225a <HAL_UART_IRQHandler+0x17a>
 8022252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8022256:	2b00      	cmp	r3, #0
 8022258:	d04f      	beq.n	80222fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802225a:	6878      	ldr	r0, [r7, #4]
 802225c:	f000 fa2c 	bl	80226b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	695b      	ldr	r3, [r3, #20]
 8022266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802226a:	2b40      	cmp	r3, #64	; 0x40
 802226c:	d141      	bne.n	80222f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	3314      	adds	r3, #20
 8022274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802227c:	e853 3f00 	ldrex	r3, [r3]
 8022280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8022284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802228c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	3314      	adds	r3, #20
 8022296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802229a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802229e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80222a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80222aa:	e841 2300 	strex	r3, r2, [r1]
 80222ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80222b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	d1d9      	bne.n	802226e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80222ba:	687b      	ldr	r3, [r7, #4]
 80222bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d013      	beq.n	80222ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222c6:	4a7d      	ldr	r2, [pc, #500]	; (80224bc <HAL_UART_IRQHandler+0x3dc>)
 80222c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222ce:	4618      	mov	r0, r3
 80222d0:	f7fa fb7e 	bl	801c9d0 <HAL_DMA_Abort_IT>
 80222d4:	4603      	mov	r3, r0
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d016      	beq.n	8022308 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80222e0:	687a      	ldr	r2, [r7, #4]
 80222e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80222e4:	4610      	mov	r0, r2
 80222e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80222e8:	e00e      	b.n	8022308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80222ea:	6878      	ldr	r0, [r7, #4]
 80222ec:	f000 f986 	bl	80225fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80222f0:	e00a      	b.n	8022308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80222f2:	6878      	ldr	r0, [r7, #4]
 80222f4:	f000 f982 	bl	80225fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80222f8:	e006      	b.n	8022308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80222fa:	6878      	ldr	r0, [r7, #4]
 80222fc:	f000 f97e 	bl	80225fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	2200      	movs	r2, #0
 8022304:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8022306:	e170      	b.n	80225ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022308:	bf00      	nop
    return;
 802230a:	e16e      	b.n	80225ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022310:	2b01      	cmp	r3, #1
 8022312:	f040 814a 	bne.w	80225aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8022316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802231a:	f003 0310 	and.w	r3, r3, #16
 802231e:	2b00      	cmp	r3, #0
 8022320:	f000 8143 	beq.w	80225aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8022324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022328:	f003 0310 	and.w	r3, r3, #16
 802232c:	2b00      	cmp	r3, #0
 802232e:	f000 813c 	beq.w	80225aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022332:	2300      	movs	r3, #0
 8022334:	60bb      	str	r3, [r7, #8]
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	681b      	ldr	r3, [r3, #0]
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	60bb      	str	r3, [r7, #8]
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	685b      	ldr	r3, [r3, #4]
 8022344:	60bb      	str	r3, [r7, #8]
 8022346:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	681b      	ldr	r3, [r3, #0]
 802234c:	695b      	ldr	r3, [r3, #20]
 802234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022352:	2b40      	cmp	r3, #64	; 0x40
 8022354:	f040 80b4 	bne.w	80224c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	685b      	ldr	r3, [r3, #4]
 8022360:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8022364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8022368:	2b00      	cmp	r3, #0
 802236a:	f000 8140 	beq.w	80225ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8022376:	429a      	cmp	r2, r3
 8022378:	f080 8139 	bcs.w	80225ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802237c:	687b      	ldr	r3, [r7, #4]
 802237e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8022382:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022388:	69db      	ldr	r3, [r3, #28]
 802238a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802238e:	f000 8088 	beq.w	80224a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	330c      	adds	r3, #12
 8022398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802239c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80223a0:	e853 3f00 	ldrex	r3, [r3]
 80223a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80223a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80223ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80223b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	681b      	ldr	r3, [r3, #0]
 80223b8:	330c      	adds	r3, #12
 80223ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80223be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80223c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80223c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80223ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80223ce:	e841 2300 	strex	r3, r2, [r1]
 80223d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80223d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d1d9      	bne.n	8022392 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	3314      	adds	r3, #20
 80223e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80223e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80223e8:	e853 3f00 	ldrex	r3, [r3]
 80223ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80223ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80223f0:	f023 0301 	bic.w	r3, r3, #1
 80223f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	3314      	adds	r3, #20
 80223fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8022402:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8022406:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022408:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802240a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802240e:	e841 2300 	strex	r3, r2, [r1]
 8022412:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8022414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022416:	2b00      	cmp	r3, #0
 8022418:	d1e1      	bne.n	80223de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	3314      	adds	r3, #20
 8022420:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022424:	e853 3f00 	ldrex	r3, [r3]
 8022428:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802242a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802242c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	3314      	adds	r3, #20
 802243a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802243e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022440:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022442:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8022444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022446:	e841 2300 	strex	r3, r2, [r1]
 802244a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802244c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802244e:	2b00      	cmp	r3, #0
 8022450:	d1e3      	bne.n	802241a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	2220      	movs	r2, #32
 8022456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	2200      	movs	r2, #0
 802245e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	330c      	adds	r3, #12
 8022466:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802246a:	e853 3f00 	ldrex	r3, [r3]
 802246e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8022470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022472:	f023 0310 	bic.w	r3, r3, #16
 8022476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	330c      	adds	r3, #12
 8022480:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8022484:	65ba      	str	r2, [r7, #88]	; 0x58
 8022486:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802248a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802248c:	e841 2300 	strex	r3, r2, [r1]
 8022490:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8022492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022494:	2b00      	cmp	r3, #0
 8022496:	d1e3      	bne.n	8022460 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8022498:	687b      	ldr	r3, [r7, #4]
 802249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802249c:	4618      	mov	r0, r3
 802249e:	f7fa fa27 	bl	801c8f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80224a2:	687b      	ldr	r3, [r7, #4]
 80224a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80224aa:	b29b      	uxth	r3, r3
 80224ac:	1ad3      	subs	r3, r2, r3
 80224ae:	b29b      	uxth	r3, r3
 80224b0:	4619      	mov	r1, r3
 80224b2:	6878      	ldr	r0, [r7, #4]
 80224b4:	f000 f8b6 	bl	8022624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80224b8:	e099      	b.n	80225ee <HAL_UART_IRQHandler+0x50e>
 80224ba:	bf00      	nop
 80224bc:	0802277f 	.word	0x0802277f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80224c8:	b29b      	uxth	r3, r3
 80224ca:	1ad3      	subs	r3, r2, r3
 80224cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80224d4:	b29b      	uxth	r3, r3
 80224d6:	2b00      	cmp	r3, #0
 80224d8:	f000 808b 	beq.w	80225f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80224dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	f000 8086 	beq.w	80225f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	681b      	ldr	r3, [r3, #0]
 80224ea:	330c      	adds	r3, #12
 80224ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80224ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80224f0:	e853 3f00 	ldrex	r3, [r3]
 80224f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80224f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80224f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80224fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	681b      	ldr	r3, [r3, #0]
 8022504:	330c      	adds	r3, #12
 8022506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802250a:	647a      	str	r2, [r7, #68]	; 0x44
 802250c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802250e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8022510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022512:	e841 2300 	strex	r3, r2, [r1]
 8022516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802251a:	2b00      	cmp	r3, #0
 802251c:	d1e3      	bne.n	80224e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	3314      	adds	r3, #20
 8022524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022528:	e853 3f00 	ldrex	r3, [r3]
 802252c:	623b      	str	r3, [r7, #32]
   return(result);
 802252e:	6a3b      	ldr	r3, [r7, #32]
 8022530:	f023 0301 	bic.w	r3, r3, #1
 8022534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	681b      	ldr	r3, [r3, #0]
 802253c:	3314      	adds	r3, #20
 802253e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8022542:	633a      	str	r2, [r7, #48]	; 0x30
 8022544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802254a:	e841 2300 	strex	r3, r2, [r1]
 802254e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8022550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022552:	2b00      	cmp	r3, #0
 8022554:	d1e3      	bne.n	802251e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8022556:	687b      	ldr	r3, [r7, #4]
 8022558:	2220      	movs	r2, #32
 802255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	2200      	movs	r2, #0
 8022562:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	681b      	ldr	r3, [r3, #0]
 8022568:	330c      	adds	r3, #12
 802256a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802256c:	693b      	ldr	r3, [r7, #16]
 802256e:	e853 3f00 	ldrex	r3, [r3]
 8022572:	60fb      	str	r3, [r7, #12]
   return(result);
 8022574:	68fb      	ldr	r3, [r7, #12]
 8022576:	f023 0310 	bic.w	r3, r3, #16
 802257a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	681b      	ldr	r3, [r3, #0]
 8022582:	330c      	adds	r3, #12
 8022584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8022588:	61fa      	str	r2, [r7, #28]
 802258a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802258c:	69b9      	ldr	r1, [r7, #24]
 802258e:	69fa      	ldr	r2, [r7, #28]
 8022590:	e841 2300 	strex	r3, r2, [r1]
 8022594:	617b      	str	r3, [r7, #20]
   return(result);
 8022596:	697b      	ldr	r3, [r7, #20]
 8022598:	2b00      	cmp	r3, #0
 802259a:	d1e3      	bne.n	8022564 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802259c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80225a0:	4619      	mov	r1, r3
 80225a2:	6878      	ldr	r0, [r7, #4]
 80225a4:	f000 f83e 	bl	8022624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80225a8:	e023      	b.n	80225f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80225aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80225ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d009      	beq.n	80225ca <HAL_UART_IRQHandler+0x4ea>
 80225b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80225ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d003      	beq.n	80225ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80225c2:	6878      	ldr	r0, [r7, #4]
 80225c4:	f000 f94f 	bl	8022866 <UART_Transmit_IT>
    return;
 80225c8:	e014      	b.n	80225f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80225ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80225ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d00e      	beq.n	80225f4 <HAL_UART_IRQHandler+0x514>
 80225d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80225da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80225de:	2b00      	cmp	r3, #0
 80225e0:	d008      	beq.n	80225f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80225e2:	6878      	ldr	r0, [r7, #4]
 80225e4:	f000 f98f 	bl	8022906 <UART_EndTransmit_IT>
    return;
 80225e8:	e004      	b.n	80225f4 <HAL_UART_IRQHandler+0x514>
    return;
 80225ea:	bf00      	nop
 80225ec:	e002      	b.n	80225f4 <HAL_UART_IRQHandler+0x514>
      return;
 80225ee:	bf00      	nop
 80225f0:	e000      	b.n	80225f4 <HAL_UART_IRQHandler+0x514>
      return;
 80225f2:	bf00      	nop
  }
}
 80225f4:	37e8      	adds	r7, #232	; 0xe8
 80225f6:	46bd      	mov	sp, r7
 80225f8:	bd80      	pop	{r7, pc}
 80225fa:	bf00      	nop

080225fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80225fc:	b480      	push	{r7}
 80225fe:	b083      	sub	sp, #12
 8022600:	af00      	add	r7, sp, #0
 8022602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8022604:	bf00      	nop
 8022606:	370c      	adds	r7, #12
 8022608:	46bd      	mov	sp, r7
 802260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802260e:	4770      	bx	lr

08022610 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8022610:	b480      	push	{r7}
 8022612:	b083      	sub	sp, #12
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8022618:	bf00      	nop
 802261a:	370c      	adds	r7, #12
 802261c:	46bd      	mov	sp, r7
 802261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022622:	4770      	bx	lr

08022624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8022624:	b480      	push	{r7}
 8022626:	b083      	sub	sp, #12
 8022628:	af00      	add	r7, sp, #0
 802262a:	6078      	str	r0, [r7, #4]
 802262c:	460b      	mov	r3, r1
 802262e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8022630:	bf00      	nop
 8022632:	370c      	adds	r7, #12
 8022634:	46bd      	mov	sp, r7
 8022636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802263a:	4770      	bx	lr

0802263c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802263c:	b480      	push	{r7}
 802263e:	b085      	sub	sp, #20
 8022640:	af00      	add	r7, sp, #0
 8022642:	60f8      	str	r0, [r7, #12]
 8022644:	60b9      	str	r1, [r7, #8]
 8022646:	4613      	mov	r3, r2
 8022648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 802264a:	68fb      	ldr	r3, [r7, #12]
 802264c:	68ba      	ldr	r2, [r7, #8]
 802264e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8022650:	68fb      	ldr	r3, [r7, #12]
 8022652:	88fa      	ldrh	r2, [r7, #6]
 8022654:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8022656:	68fb      	ldr	r3, [r7, #12]
 8022658:	88fa      	ldrh	r2, [r7, #6]
 802265a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	2200      	movs	r2, #0
 8022660:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8022662:	68fb      	ldr	r3, [r7, #12]
 8022664:	2222      	movs	r2, #34	; 0x22
 8022666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802266a:	68fb      	ldr	r3, [r7, #12]
 802266c:	2200      	movs	r2, #0
 802266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8022672:	68fb      	ldr	r3, [r7, #12]
 8022674:	691b      	ldr	r3, [r3, #16]
 8022676:	2b00      	cmp	r3, #0
 8022678:	d007      	beq.n	802268a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802267a:	68fb      	ldr	r3, [r7, #12]
 802267c:	681b      	ldr	r3, [r3, #0]
 802267e:	68da      	ldr	r2, [r3, #12]
 8022680:	68fb      	ldr	r3, [r7, #12]
 8022682:	681b      	ldr	r3, [r3, #0]
 8022684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022688:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	681b      	ldr	r3, [r3, #0]
 802268e:	695a      	ldr	r2, [r3, #20]
 8022690:	68fb      	ldr	r3, [r7, #12]
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	f042 0201 	orr.w	r2, r2, #1
 8022698:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802269a:	68fb      	ldr	r3, [r7, #12]
 802269c:	681b      	ldr	r3, [r3, #0]
 802269e:	68da      	ldr	r2, [r3, #12]
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	681b      	ldr	r3, [r3, #0]
 80226a4:	f042 0220 	orr.w	r2, r2, #32
 80226a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80226aa:	2300      	movs	r3, #0
}
 80226ac:	4618      	mov	r0, r3
 80226ae:	3714      	adds	r7, #20
 80226b0:	46bd      	mov	sp, r7
 80226b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b6:	4770      	bx	lr

080226b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80226b8:	b480      	push	{r7}
 80226ba:	b095      	sub	sp, #84	; 0x54
 80226bc:	af00      	add	r7, sp, #0
 80226be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	681b      	ldr	r3, [r3, #0]
 80226c4:	330c      	adds	r3, #12
 80226c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80226ca:	e853 3f00 	ldrex	r3, [r3]
 80226ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80226d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80226d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	330c      	adds	r3, #12
 80226de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80226e0:	643a      	str	r2, [r7, #64]	; 0x40
 80226e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80226e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80226e8:	e841 2300 	strex	r3, r2, [r1]
 80226ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80226ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80226f0:	2b00      	cmp	r3, #0
 80226f2:	d1e5      	bne.n	80226c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	3314      	adds	r3, #20
 80226fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226fc:	6a3b      	ldr	r3, [r7, #32]
 80226fe:	e853 3f00 	ldrex	r3, [r3]
 8022702:	61fb      	str	r3, [r7, #28]
   return(result);
 8022704:	69fb      	ldr	r3, [r7, #28]
 8022706:	f023 0301 	bic.w	r3, r3, #1
 802270a:	64bb      	str	r3, [r7, #72]	; 0x48
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	681b      	ldr	r3, [r3, #0]
 8022710:	3314      	adds	r3, #20
 8022712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802271c:	e841 2300 	strex	r3, r2, [r1]
 8022720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8022722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022724:	2b00      	cmp	r3, #0
 8022726:	d1e5      	bne.n	80226f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802272c:	2b01      	cmp	r3, #1
 802272e:	d119      	bne.n	8022764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	681b      	ldr	r3, [r3, #0]
 8022734:	330c      	adds	r3, #12
 8022736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	e853 3f00 	ldrex	r3, [r3]
 802273e:	60bb      	str	r3, [r7, #8]
   return(result);
 8022740:	68bb      	ldr	r3, [r7, #8]
 8022742:	f023 0310 	bic.w	r3, r3, #16
 8022746:	647b      	str	r3, [r7, #68]	; 0x44
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	681b      	ldr	r3, [r3, #0]
 802274c:	330c      	adds	r3, #12
 802274e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022750:	61ba      	str	r2, [r7, #24]
 8022752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022754:	6979      	ldr	r1, [r7, #20]
 8022756:	69ba      	ldr	r2, [r7, #24]
 8022758:	e841 2300 	strex	r3, r2, [r1]
 802275c:	613b      	str	r3, [r7, #16]
   return(result);
 802275e:	693b      	ldr	r3, [r7, #16]
 8022760:	2b00      	cmp	r3, #0
 8022762:	d1e5      	bne.n	8022730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	2220      	movs	r2, #32
 8022768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	2200      	movs	r2, #0
 8022770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8022772:	bf00      	nop
 8022774:	3754      	adds	r7, #84	; 0x54
 8022776:	46bd      	mov	sp, r7
 8022778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802277c:	4770      	bx	lr

0802277e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802277e:	b580      	push	{r7, lr}
 8022780:	b084      	sub	sp, #16
 8022782:	af00      	add	r7, sp, #0
 8022784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802278a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802278c:	68fb      	ldr	r3, [r7, #12]
 802278e:	2200      	movs	r2, #0
 8022790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8022792:	68fb      	ldr	r3, [r7, #12]
 8022794:	2200      	movs	r2, #0
 8022796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022798:	68f8      	ldr	r0, [r7, #12]
 802279a:	f7ff ff2f 	bl	80225fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802279e:	bf00      	nop
 80227a0:	3710      	adds	r7, #16
 80227a2:	46bd      	mov	sp, r7
 80227a4:	bd80      	pop	{r7, pc}

080227a6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80227a6:	b580      	push	{r7, lr}
 80227a8:	b084      	sub	sp, #16
 80227aa:	af00      	add	r7, sp, #0
 80227ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227b2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80227b4:	68fb      	ldr	r3, [r7, #12]
 80227b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80227b8:	2200      	movs	r2, #0
 80227ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80227bc:	68fb      	ldr	r3, [r7, #12]
 80227be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227c0:	2b00      	cmp	r3, #0
 80227c2:	d004      	beq.n	80227ce <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	d117      	bne.n	80227fe <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80227ce:	68fb      	ldr	r3, [r7, #12]
 80227d0:	2200      	movs	r2, #0
 80227d2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80227d4:	68fb      	ldr	r3, [r7, #12]
 80227d6:	2200      	movs	r2, #0
 80227d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	2200      	movs	r2, #0
 80227de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80227e0:	68fb      	ldr	r3, [r7, #12]
 80227e2:	2220      	movs	r2, #32
 80227e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80227e8:	68fb      	ldr	r3, [r7, #12]
 80227ea:	2220      	movs	r2, #32
 80227ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	2200      	movs	r2, #0
 80227f4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80227f6:	68f8      	ldr	r0, [r7, #12]
 80227f8:	f7ff ff0a 	bl	8022610 <HAL_UART_AbortCpltCallback>
 80227fc:	e000      	b.n	8022800 <UART_DMATxAbortCallback+0x5a>
      return;
 80227fe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022800:	3710      	adds	r7, #16
 8022802:	46bd      	mov	sp, r7
 8022804:	bd80      	pop	{r7, pc}

08022806 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022806:	b580      	push	{r7, lr}
 8022808:	b084      	sub	sp, #16
 802280a:	af00      	add	r7, sp, #0
 802280c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802280e:	687b      	ldr	r3, [r7, #4]
 8022810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022812:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8022814:	68fb      	ldr	r3, [r7, #12]
 8022816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022818:	2200      	movs	r2, #0
 802281a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022820:	2b00      	cmp	r3, #0
 8022822:	d004      	beq.n	802282e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8022824:	68fb      	ldr	r3, [r7, #12]
 8022826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802282a:	2b00      	cmp	r3, #0
 802282c:	d117      	bne.n	802285e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802282e:	68fb      	ldr	r3, [r7, #12]
 8022830:	2200      	movs	r2, #0
 8022832:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022834:	68fb      	ldr	r3, [r7, #12]
 8022836:	2200      	movs	r2, #0
 8022838:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802283a:	68fb      	ldr	r3, [r7, #12]
 802283c:	2200      	movs	r2, #0
 802283e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8022840:	68fb      	ldr	r3, [r7, #12]
 8022842:	2220      	movs	r2, #32
 8022844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022848:	68fb      	ldr	r3, [r7, #12]
 802284a:	2220      	movs	r2, #32
 802284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022850:	68fb      	ldr	r3, [r7, #12]
 8022852:	2200      	movs	r2, #0
 8022854:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022856:	68f8      	ldr	r0, [r7, #12]
 8022858:	f7ff feda 	bl	8022610 <HAL_UART_AbortCpltCallback>
 802285c:	e000      	b.n	8022860 <UART_DMARxAbortCallback+0x5a>
      return;
 802285e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022860:	3710      	adds	r7, #16
 8022862:	46bd      	mov	sp, r7
 8022864:	bd80      	pop	{r7, pc}

08022866 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8022866:	b480      	push	{r7}
 8022868:	b085      	sub	sp, #20
 802286a:	af00      	add	r7, sp, #0
 802286c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022874:	b2db      	uxtb	r3, r3
 8022876:	2b21      	cmp	r3, #33	; 0x21
 8022878:	d13e      	bne.n	80228f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	689b      	ldr	r3, [r3, #8]
 802287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022882:	d114      	bne.n	80228ae <UART_Transmit_IT+0x48>
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	691b      	ldr	r3, [r3, #16]
 8022888:	2b00      	cmp	r3, #0
 802288a:	d110      	bne.n	80228ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	6a1b      	ldr	r3, [r3, #32]
 8022890:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	881b      	ldrh	r3, [r3, #0]
 8022896:	461a      	mov	r2, r3
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80228a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	6a1b      	ldr	r3, [r3, #32]
 80228a6:	1c9a      	adds	r2, r3, #2
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	621a      	str	r2, [r3, #32]
 80228ac:	e008      	b.n	80228c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	6a1b      	ldr	r3, [r3, #32]
 80228b2:	1c59      	adds	r1, r3, #1
 80228b4:	687a      	ldr	r2, [r7, #4]
 80228b6:	6211      	str	r1, [r2, #32]
 80228b8:	781a      	ldrb	r2, [r3, #0]
 80228ba:	687b      	ldr	r3, [r7, #4]
 80228bc:	681b      	ldr	r3, [r3, #0]
 80228be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80228c4:	b29b      	uxth	r3, r3
 80228c6:	3b01      	subs	r3, #1
 80228c8:	b29b      	uxth	r3, r3
 80228ca:	687a      	ldr	r2, [r7, #4]
 80228cc:	4619      	mov	r1, r3
 80228ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d10f      	bne.n	80228f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	68da      	ldr	r2, [r3, #12]
 80228da:	687b      	ldr	r3, [r7, #4]
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80228e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	68da      	ldr	r2, [r3, #12]
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	681b      	ldr	r3, [r3, #0]
 80228ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80228f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80228f4:	2300      	movs	r3, #0
 80228f6:	e000      	b.n	80228fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80228f8:	2302      	movs	r3, #2
  }
}
 80228fa:	4618      	mov	r0, r3
 80228fc:	3714      	adds	r7, #20
 80228fe:	46bd      	mov	sp, r7
 8022900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022904:	4770      	bx	lr

08022906 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022906:	b580      	push	{r7, lr}
 8022908:	b082      	sub	sp, #8
 802290a:	af00      	add	r7, sp, #0
 802290c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	681b      	ldr	r3, [r3, #0]
 8022912:	68da      	ldr	r2, [r3, #12]
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	681b      	ldr	r3, [r3, #0]
 8022918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802291c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	2220      	movs	r2, #32
 8022922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022926:	6878      	ldr	r0, [r7, #4]
 8022928:	f7df fc3e 	bl	80021a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802292c:	2300      	movs	r3, #0
}
 802292e:	4618      	mov	r0, r3
 8022930:	3708      	adds	r7, #8
 8022932:	46bd      	mov	sp, r7
 8022934:	bd80      	pop	{r7, pc}

08022936 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022936:	b580      	push	{r7, lr}
 8022938:	b08c      	sub	sp, #48	; 0x30
 802293a:	af00      	add	r7, sp, #0
 802293c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802293e:	687b      	ldr	r3, [r7, #4]
 8022940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022944:	b2db      	uxtb	r3, r3
 8022946:	2b22      	cmp	r3, #34	; 0x22
 8022948:	f040 80ab 	bne.w	8022aa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802294c:	687b      	ldr	r3, [r7, #4]
 802294e:	689b      	ldr	r3, [r3, #8]
 8022950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022954:	d117      	bne.n	8022986 <UART_Receive_IT+0x50>
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	691b      	ldr	r3, [r3, #16]
 802295a:	2b00      	cmp	r3, #0
 802295c:	d113      	bne.n	8022986 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802295e:	2300      	movs	r3, #0
 8022960:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022966:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	681b      	ldr	r3, [r3, #0]
 802296c:	685b      	ldr	r3, [r3, #4]
 802296e:	b29b      	uxth	r3, r3
 8022970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022974:	b29a      	uxth	r2, r3
 8022976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022978:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802297e:	1c9a      	adds	r2, r3, #2
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	629a      	str	r2, [r3, #40]	; 0x28
 8022984:	e026      	b.n	80229d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802298a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802298c:	2300      	movs	r3, #0
 802298e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	689b      	ldr	r3, [r3, #8]
 8022994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022998:	d007      	beq.n	80229aa <UART_Receive_IT+0x74>
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	689b      	ldr	r3, [r3, #8]
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d10a      	bne.n	80229b8 <UART_Receive_IT+0x82>
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	691b      	ldr	r3, [r3, #16]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d106      	bne.n	80229b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	681b      	ldr	r3, [r3, #0]
 80229ae:	685b      	ldr	r3, [r3, #4]
 80229b0:	b2da      	uxtb	r2, r3
 80229b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229b4:	701a      	strb	r2, [r3, #0]
 80229b6:	e008      	b.n	80229ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	681b      	ldr	r3, [r3, #0]
 80229bc:	685b      	ldr	r3, [r3, #4]
 80229be:	b2db      	uxtb	r3, r3
 80229c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80229c4:	b2da      	uxtb	r2, r3
 80229c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229ce:	1c5a      	adds	r2, r3, #1
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80229d8:	b29b      	uxth	r3, r3
 80229da:	3b01      	subs	r3, #1
 80229dc:	b29b      	uxth	r3, r3
 80229de:	687a      	ldr	r2, [r7, #4]
 80229e0:	4619      	mov	r1, r3
 80229e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d15a      	bne.n	8022a9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	68da      	ldr	r2, [r3, #12]
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	f022 0220 	bic.w	r2, r2, #32
 80229f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	68da      	ldr	r2, [r3, #12]
 80229fe:	687b      	ldr	r3, [r7, #4]
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	695a      	ldr	r2, [r3, #20]
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	681b      	ldr	r3, [r3, #0]
 8022a12:	f022 0201 	bic.w	r2, r2, #1
 8022a16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	2220      	movs	r2, #32
 8022a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a24:	2b01      	cmp	r3, #1
 8022a26:	d135      	bne.n	8022a94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	2200      	movs	r2, #0
 8022a2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	681b      	ldr	r3, [r3, #0]
 8022a32:	330c      	adds	r3, #12
 8022a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022a36:	697b      	ldr	r3, [r7, #20]
 8022a38:	e853 3f00 	ldrex	r3, [r3]
 8022a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8022a3e:	693b      	ldr	r3, [r7, #16]
 8022a40:	f023 0310 	bic.w	r3, r3, #16
 8022a44:	627b      	str	r3, [r7, #36]	; 0x24
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	330c      	adds	r3, #12
 8022a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022a4e:	623a      	str	r2, [r7, #32]
 8022a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022a52:	69f9      	ldr	r1, [r7, #28]
 8022a54:	6a3a      	ldr	r2, [r7, #32]
 8022a56:	e841 2300 	strex	r3, r2, [r1]
 8022a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8022a5c:	69bb      	ldr	r3, [r7, #24]
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d1e5      	bne.n	8022a2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	681b      	ldr	r3, [r3, #0]
 8022a68:	f003 0310 	and.w	r3, r3, #16
 8022a6c:	2b10      	cmp	r3, #16
 8022a6e:	d10a      	bne.n	8022a86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022a70:	2300      	movs	r3, #0
 8022a72:	60fb      	str	r3, [r7, #12]
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	60fb      	str	r3, [r7, #12]
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	685b      	ldr	r3, [r3, #4]
 8022a82:	60fb      	str	r3, [r7, #12]
 8022a84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022a8a:	4619      	mov	r1, r3
 8022a8c:	6878      	ldr	r0, [r7, #4]
 8022a8e:	f7ff fdc9 	bl	8022624 <HAL_UARTEx_RxEventCallback>
 8022a92:	e002      	b.n	8022a9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8022a94:	6878      	ldr	r0, [r7, #4]
 8022a96:	f7df fc11 	bl	80022bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	e002      	b.n	8022aa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8022a9e:	2300      	movs	r3, #0
 8022aa0:	e000      	b.n	8022aa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8022aa2:	2302      	movs	r3, #2
  }
}
 8022aa4:	4618      	mov	r0, r3
 8022aa6:	3730      	adds	r7, #48	; 0x30
 8022aa8:	46bd      	mov	sp, r7
 8022aaa:	bd80      	pop	{r7, pc}

08022aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022ab0:	b0c0      	sub	sp, #256	; 0x100
 8022ab2:	af00      	add	r7, sp, #0
 8022ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	691b      	ldr	r3, [r3, #16]
 8022ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ac8:	68d9      	ldr	r1, [r3, #12]
 8022aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ace:	681a      	ldr	r2, [r3, #0]
 8022ad0:	ea40 0301 	orr.w	r3, r0, r1
 8022ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ada:	689a      	ldr	r2, [r3, #8]
 8022adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ae0:	691b      	ldr	r3, [r3, #16]
 8022ae2:	431a      	orrs	r2, r3
 8022ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ae8:	695b      	ldr	r3, [r3, #20]
 8022aea:	431a      	orrs	r2, r3
 8022aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022af0:	69db      	ldr	r3, [r3, #28]
 8022af2:	4313      	orrs	r3, r2
 8022af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8022af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	68db      	ldr	r3, [r3, #12]
 8022b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022b04:	f021 010c 	bic.w	r1, r1, #12
 8022b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b0c:	681a      	ldr	r2, [r3, #0]
 8022b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8022b12:	430b      	orrs	r3, r1
 8022b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	695b      	ldr	r3, [r3, #20]
 8022b1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8022b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b26:	6999      	ldr	r1, [r3, #24]
 8022b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b2c:	681a      	ldr	r2, [r3, #0]
 8022b2e:	ea40 0301 	orr.w	r3, r0, r1
 8022b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b38:	681a      	ldr	r2, [r3, #0]
 8022b3a:	4b8f      	ldr	r3, [pc, #572]	; (8022d78 <UART_SetConfig+0x2cc>)
 8022b3c:	429a      	cmp	r2, r3
 8022b3e:	d005      	beq.n	8022b4c <UART_SetConfig+0xa0>
 8022b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b44:	681a      	ldr	r2, [r3, #0]
 8022b46:	4b8d      	ldr	r3, [pc, #564]	; (8022d7c <UART_SetConfig+0x2d0>)
 8022b48:	429a      	cmp	r2, r3
 8022b4a:	d104      	bne.n	8022b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022b4c:	f7fe f82a 	bl	8020ba4 <HAL_RCC_GetPCLK2Freq>
 8022b50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8022b54:	e003      	b.n	8022b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022b56:	f7fe f811 	bl	8020b7c <HAL_RCC_GetPCLK1Freq>
 8022b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022b62:	69db      	ldr	r3, [r3, #28]
 8022b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022b68:	f040 810c 	bne.w	8022d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022b70:	2200      	movs	r2, #0
 8022b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8022b76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8022b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022b7e:	4622      	mov	r2, r4
 8022b80:	462b      	mov	r3, r5
 8022b82:	1891      	adds	r1, r2, r2
 8022b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8022b86:	415b      	adcs	r3, r3
 8022b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8022b8e:	4621      	mov	r1, r4
 8022b90:	eb12 0801 	adds.w	r8, r2, r1
 8022b94:	4629      	mov	r1, r5
 8022b96:	eb43 0901 	adc.w	r9, r3, r1
 8022b9a:	f04f 0200 	mov.w	r2, #0
 8022b9e:	f04f 0300 	mov.w	r3, #0
 8022ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022bae:	4690      	mov	r8, r2
 8022bb0:	4699      	mov	r9, r3
 8022bb2:	4623      	mov	r3, r4
 8022bb4:	eb18 0303 	adds.w	r3, r8, r3
 8022bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022bbc:	462b      	mov	r3, r5
 8022bbe:	eb49 0303 	adc.w	r3, r9, r3
 8022bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022bca:	685b      	ldr	r3, [r3, #4]
 8022bcc:	2200      	movs	r2, #0
 8022bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8022bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8022bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022bda:	460b      	mov	r3, r1
 8022bdc:	18db      	adds	r3, r3, r3
 8022bde:	653b      	str	r3, [r7, #80]	; 0x50
 8022be0:	4613      	mov	r3, r2
 8022be2:	eb42 0303 	adc.w	r3, r2, r3
 8022be6:	657b      	str	r3, [r7, #84]	; 0x54
 8022be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8022bf0:	f7de f946 	bl	8000e80 <__aeabi_uldivmod>
 8022bf4:	4602      	mov	r2, r0
 8022bf6:	460b      	mov	r3, r1
 8022bf8:	4b61      	ldr	r3, [pc, #388]	; (8022d80 <UART_SetConfig+0x2d4>)
 8022bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8022bfe:	095b      	lsrs	r3, r3, #5
 8022c00:	011c      	lsls	r4, r3, #4
 8022c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022c06:	2200      	movs	r2, #0
 8022c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8022c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8022c14:	4642      	mov	r2, r8
 8022c16:	464b      	mov	r3, r9
 8022c18:	1891      	adds	r1, r2, r2
 8022c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8022c1c:	415b      	adcs	r3, r3
 8022c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022c24:	4641      	mov	r1, r8
 8022c26:	eb12 0a01 	adds.w	sl, r2, r1
 8022c2a:	4649      	mov	r1, r9
 8022c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8022c30:	f04f 0200 	mov.w	r2, #0
 8022c34:	f04f 0300 	mov.w	r3, #0
 8022c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8022c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022c44:	4692      	mov	sl, r2
 8022c46:	469b      	mov	fp, r3
 8022c48:	4643      	mov	r3, r8
 8022c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8022c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022c52:	464b      	mov	r3, r9
 8022c54:	eb4b 0303 	adc.w	r3, fp, r3
 8022c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c60:	685b      	ldr	r3, [r3, #4]
 8022c62:	2200      	movs	r2, #0
 8022c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022c68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8022c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8022c70:	460b      	mov	r3, r1
 8022c72:	18db      	adds	r3, r3, r3
 8022c74:	643b      	str	r3, [r7, #64]	; 0x40
 8022c76:	4613      	mov	r3, r2
 8022c78:	eb42 0303 	adc.w	r3, r2, r3
 8022c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8022c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8022c86:	f7de f8fb 	bl	8000e80 <__aeabi_uldivmod>
 8022c8a:	4602      	mov	r2, r0
 8022c8c:	460b      	mov	r3, r1
 8022c8e:	4611      	mov	r1, r2
 8022c90:	4b3b      	ldr	r3, [pc, #236]	; (8022d80 <UART_SetConfig+0x2d4>)
 8022c92:	fba3 2301 	umull	r2, r3, r3, r1
 8022c96:	095b      	lsrs	r3, r3, #5
 8022c98:	2264      	movs	r2, #100	; 0x64
 8022c9a:	fb02 f303 	mul.w	r3, r2, r3
 8022c9e:	1acb      	subs	r3, r1, r3
 8022ca0:	00db      	lsls	r3, r3, #3
 8022ca2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8022ca6:	4b36      	ldr	r3, [pc, #216]	; (8022d80 <UART_SetConfig+0x2d4>)
 8022ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8022cac:	095b      	lsrs	r3, r3, #5
 8022cae:	005b      	lsls	r3, r3, #1
 8022cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022cb4:	441c      	add	r4, r3
 8022cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022cba:	2200      	movs	r2, #0
 8022cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8022cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8022cc8:	4642      	mov	r2, r8
 8022cca:	464b      	mov	r3, r9
 8022ccc:	1891      	adds	r1, r2, r2
 8022cce:	63b9      	str	r1, [r7, #56]	; 0x38
 8022cd0:	415b      	adcs	r3, r3
 8022cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022cd8:	4641      	mov	r1, r8
 8022cda:	1851      	adds	r1, r2, r1
 8022cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8022cde:	4649      	mov	r1, r9
 8022ce0:	414b      	adcs	r3, r1
 8022ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8022ce4:	f04f 0200 	mov.w	r2, #0
 8022ce8:	f04f 0300 	mov.w	r3, #0
 8022cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8022cf0:	4659      	mov	r1, fp
 8022cf2:	00cb      	lsls	r3, r1, #3
 8022cf4:	4651      	mov	r1, sl
 8022cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022cfa:	4651      	mov	r1, sl
 8022cfc:	00ca      	lsls	r2, r1, #3
 8022cfe:	4610      	mov	r0, r2
 8022d00:	4619      	mov	r1, r3
 8022d02:	4603      	mov	r3, r0
 8022d04:	4642      	mov	r2, r8
 8022d06:	189b      	adds	r3, r3, r2
 8022d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022d0c:	464b      	mov	r3, r9
 8022d0e:	460a      	mov	r2, r1
 8022d10:	eb42 0303 	adc.w	r3, r2, r3
 8022d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d1c:	685b      	ldr	r3, [r3, #4]
 8022d1e:	2200      	movs	r2, #0
 8022d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8022d24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8022d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8022d2c:	460b      	mov	r3, r1
 8022d2e:	18db      	adds	r3, r3, r3
 8022d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8022d32:	4613      	mov	r3, r2
 8022d34:	eb42 0303 	adc.w	r3, r2, r3
 8022d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8022d42:	f7de f89d 	bl	8000e80 <__aeabi_uldivmod>
 8022d46:	4602      	mov	r2, r0
 8022d48:	460b      	mov	r3, r1
 8022d4a:	4b0d      	ldr	r3, [pc, #52]	; (8022d80 <UART_SetConfig+0x2d4>)
 8022d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8022d50:	095b      	lsrs	r3, r3, #5
 8022d52:	2164      	movs	r1, #100	; 0x64
 8022d54:	fb01 f303 	mul.w	r3, r1, r3
 8022d58:	1ad3      	subs	r3, r2, r3
 8022d5a:	00db      	lsls	r3, r3, #3
 8022d5c:	3332      	adds	r3, #50	; 0x32
 8022d5e:	4a08      	ldr	r2, [pc, #32]	; (8022d80 <UART_SetConfig+0x2d4>)
 8022d60:	fba2 2303 	umull	r2, r3, r2, r3
 8022d64:	095b      	lsrs	r3, r3, #5
 8022d66:	f003 0207 	and.w	r2, r3, #7
 8022d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	4422      	add	r2, r4
 8022d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8022d74:	e105      	b.n	8022f82 <UART_SetConfig+0x4d6>
 8022d76:	bf00      	nop
 8022d78:	40011000 	.word	0x40011000
 8022d7c:	40011400 	.word	0x40011400
 8022d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022d88:	2200      	movs	r2, #0
 8022d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8022d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8022d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8022d96:	4642      	mov	r2, r8
 8022d98:	464b      	mov	r3, r9
 8022d9a:	1891      	adds	r1, r2, r2
 8022d9c:	6239      	str	r1, [r7, #32]
 8022d9e:	415b      	adcs	r3, r3
 8022da0:	627b      	str	r3, [r7, #36]	; 0x24
 8022da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022da6:	4641      	mov	r1, r8
 8022da8:	1854      	adds	r4, r2, r1
 8022daa:	4649      	mov	r1, r9
 8022dac:	eb43 0501 	adc.w	r5, r3, r1
 8022db0:	f04f 0200 	mov.w	r2, #0
 8022db4:	f04f 0300 	mov.w	r3, #0
 8022db8:	00eb      	lsls	r3, r5, #3
 8022dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022dbe:	00e2      	lsls	r2, r4, #3
 8022dc0:	4614      	mov	r4, r2
 8022dc2:	461d      	mov	r5, r3
 8022dc4:	4643      	mov	r3, r8
 8022dc6:	18e3      	adds	r3, r4, r3
 8022dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022dcc:	464b      	mov	r3, r9
 8022dce:	eb45 0303 	adc.w	r3, r5, r3
 8022dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022dda:	685b      	ldr	r3, [r3, #4]
 8022ddc:	2200      	movs	r2, #0
 8022dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8022de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8022de6:	f04f 0200 	mov.w	r2, #0
 8022dea:	f04f 0300 	mov.w	r3, #0
 8022dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8022df2:	4629      	mov	r1, r5
 8022df4:	008b      	lsls	r3, r1, #2
 8022df6:	4621      	mov	r1, r4
 8022df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022dfc:	4621      	mov	r1, r4
 8022dfe:	008a      	lsls	r2, r1, #2
 8022e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8022e04:	f7de f83c 	bl	8000e80 <__aeabi_uldivmod>
 8022e08:	4602      	mov	r2, r0
 8022e0a:	460b      	mov	r3, r1
 8022e0c:	4b60      	ldr	r3, [pc, #384]	; (8022f90 <UART_SetConfig+0x4e4>)
 8022e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8022e12:	095b      	lsrs	r3, r3, #5
 8022e14:	011c      	lsls	r4, r3, #4
 8022e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022e1a:	2200      	movs	r2, #0
 8022e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8022e20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8022e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8022e28:	4642      	mov	r2, r8
 8022e2a:	464b      	mov	r3, r9
 8022e2c:	1891      	adds	r1, r2, r2
 8022e2e:	61b9      	str	r1, [r7, #24]
 8022e30:	415b      	adcs	r3, r3
 8022e32:	61fb      	str	r3, [r7, #28]
 8022e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022e38:	4641      	mov	r1, r8
 8022e3a:	1851      	adds	r1, r2, r1
 8022e3c:	6139      	str	r1, [r7, #16]
 8022e3e:	4649      	mov	r1, r9
 8022e40:	414b      	adcs	r3, r1
 8022e42:	617b      	str	r3, [r7, #20]
 8022e44:	f04f 0200 	mov.w	r2, #0
 8022e48:	f04f 0300 	mov.w	r3, #0
 8022e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022e50:	4659      	mov	r1, fp
 8022e52:	00cb      	lsls	r3, r1, #3
 8022e54:	4651      	mov	r1, sl
 8022e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022e5a:	4651      	mov	r1, sl
 8022e5c:	00ca      	lsls	r2, r1, #3
 8022e5e:	4610      	mov	r0, r2
 8022e60:	4619      	mov	r1, r3
 8022e62:	4603      	mov	r3, r0
 8022e64:	4642      	mov	r2, r8
 8022e66:	189b      	adds	r3, r3, r2
 8022e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022e6c:	464b      	mov	r3, r9
 8022e6e:	460a      	mov	r2, r1
 8022e70:	eb42 0303 	adc.w	r3, r2, r3
 8022e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e7c:	685b      	ldr	r3, [r3, #4]
 8022e7e:	2200      	movs	r2, #0
 8022e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8022e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8022e84:	f04f 0200 	mov.w	r2, #0
 8022e88:	f04f 0300 	mov.w	r3, #0
 8022e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8022e90:	4649      	mov	r1, r9
 8022e92:	008b      	lsls	r3, r1, #2
 8022e94:	4641      	mov	r1, r8
 8022e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022e9a:	4641      	mov	r1, r8
 8022e9c:	008a      	lsls	r2, r1, #2
 8022e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8022ea2:	f7dd ffed 	bl	8000e80 <__aeabi_uldivmod>
 8022ea6:	4602      	mov	r2, r0
 8022ea8:	460b      	mov	r3, r1
 8022eaa:	4b39      	ldr	r3, [pc, #228]	; (8022f90 <UART_SetConfig+0x4e4>)
 8022eac:	fba3 1302 	umull	r1, r3, r3, r2
 8022eb0:	095b      	lsrs	r3, r3, #5
 8022eb2:	2164      	movs	r1, #100	; 0x64
 8022eb4:	fb01 f303 	mul.w	r3, r1, r3
 8022eb8:	1ad3      	subs	r3, r2, r3
 8022eba:	011b      	lsls	r3, r3, #4
 8022ebc:	3332      	adds	r3, #50	; 0x32
 8022ebe:	4a34      	ldr	r2, [pc, #208]	; (8022f90 <UART_SetConfig+0x4e4>)
 8022ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8022ec4:	095b      	lsrs	r3, r3, #5
 8022ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022eca:	441c      	add	r4, r3
 8022ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022ed0:	2200      	movs	r2, #0
 8022ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8022ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8022ed6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8022eda:	4642      	mov	r2, r8
 8022edc:	464b      	mov	r3, r9
 8022ede:	1891      	adds	r1, r2, r2
 8022ee0:	60b9      	str	r1, [r7, #8]
 8022ee2:	415b      	adcs	r3, r3
 8022ee4:	60fb      	str	r3, [r7, #12]
 8022ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022eea:	4641      	mov	r1, r8
 8022eec:	1851      	adds	r1, r2, r1
 8022eee:	6039      	str	r1, [r7, #0]
 8022ef0:	4649      	mov	r1, r9
 8022ef2:	414b      	adcs	r3, r1
 8022ef4:	607b      	str	r3, [r7, #4]
 8022ef6:	f04f 0200 	mov.w	r2, #0
 8022efa:	f04f 0300 	mov.w	r3, #0
 8022efe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8022f02:	4659      	mov	r1, fp
 8022f04:	00cb      	lsls	r3, r1, #3
 8022f06:	4651      	mov	r1, sl
 8022f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022f0c:	4651      	mov	r1, sl
 8022f0e:	00ca      	lsls	r2, r1, #3
 8022f10:	4610      	mov	r0, r2
 8022f12:	4619      	mov	r1, r3
 8022f14:	4603      	mov	r3, r0
 8022f16:	4642      	mov	r2, r8
 8022f18:	189b      	adds	r3, r3, r2
 8022f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8022f1c:	464b      	mov	r3, r9
 8022f1e:	460a      	mov	r2, r1
 8022f20:	eb42 0303 	adc.w	r3, r2, r3
 8022f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f2a:	685b      	ldr	r3, [r3, #4]
 8022f2c:	2200      	movs	r2, #0
 8022f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8022f30:	667a      	str	r2, [r7, #100]	; 0x64
 8022f32:	f04f 0200 	mov.w	r2, #0
 8022f36:	f04f 0300 	mov.w	r3, #0
 8022f3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8022f3e:	4649      	mov	r1, r9
 8022f40:	008b      	lsls	r3, r1, #2
 8022f42:	4641      	mov	r1, r8
 8022f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022f48:	4641      	mov	r1, r8
 8022f4a:	008a      	lsls	r2, r1, #2
 8022f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8022f50:	f7dd ff96 	bl	8000e80 <__aeabi_uldivmod>
 8022f54:	4602      	mov	r2, r0
 8022f56:	460b      	mov	r3, r1
 8022f58:	4b0d      	ldr	r3, [pc, #52]	; (8022f90 <UART_SetConfig+0x4e4>)
 8022f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8022f5e:	095b      	lsrs	r3, r3, #5
 8022f60:	2164      	movs	r1, #100	; 0x64
 8022f62:	fb01 f303 	mul.w	r3, r1, r3
 8022f66:	1ad3      	subs	r3, r2, r3
 8022f68:	011b      	lsls	r3, r3, #4
 8022f6a:	3332      	adds	r3, #50	; 0x32
 8022f6c:	4a08      	ldr	r2, [pc, #32]	; (8022f90 <UART_SetConfig+0x4e4>)
 8022f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8022f72:	095b      	lsrs	r3, r3, #5
 8022f74:	f003 020f 	and.w	r2, r3, #15
 8022f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f7c:	681b      	ldr	r3, [r3, #0]
 8022f7e:	4422      	add	r2, r4
 8022f80:	609a      	str	r2, [r3, #8]
}
 8022f82:	bf00      	nop
 8022f84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022f8e:	bf00      	nop
 8022f90:	51eb851f 	.word	0x51eb851f

08022f94 <atoi>:
 8022f94:	220a      	movs	r2, #10
 8022f96:	2100      	movs	r1, #0
 8022f98:	f000 ba6a 	b.w	8023470 <strtol>

08022f9c <calloc>:
 8022f9c:	4b02      	ldr	r3, [pc, #8]	; (8022fa8 <calloc+0xc>)
 8022f9e:	460a      	mov	r2, r1
 8022fa0:	4601      	mov	r1, r0
 8022fa2:	6818      	ldr	r0, [r3, #0]
 8022fa4:	f000 b852 	b.w	802304c <_calloc_r>
 8022fa8:	20000158 	.word	0x20000158

08022fac <__errno>:
 8022fac:	4b01      	ldr	r3, [pc, #4]	; (8022fb4 <__errno+0x8>)
 8022fae:	6818      	ldr	r0, [r3, #0]
 8022fb0:	4770      	bx	lr
 8022fb2:	bf00      	nop
 8022fb4:	20000158 	.word	0x20000158

08022fb8 <__libc_init_array>:
 8022fb8:	b570      	push	{r4, r5, r6, lr}
 8022fba:	4d0d      	ldr	r5, [pc, #52]	; (8022ff0 <__libc_init_array+0x38>)
 8022fbc:	4c0d      	ldr	r4, [pc, #52]	; (8022ff4 <__libc_init_array+0x3c>)
 8022fbe:	1b64      	subs	r4, r4, r5
 8022fc0:	10a4      	asrs	r4, r4, #2
 8022fc2:	2600      	movs	r6, #0
 8022fc4:	42a6      	cmp	r6, r4
 8022fc6:	d109      	bne.n	8022fdc <__libc_init_array+0x24>
 8022fc8:	4d0b      	ldr	r5, [pc, #44]	; (8022ff8 <__libc_init_array+0x40>)
 8022fca:	4c0c      	ldr	r4, [pc, #48]	; (8022ffc <__libc_init_array+0x44>)
 8022fcc:	f002 ff00 	bl	8025dd0 <_init>
 8022fd0:	1b64      	subs	r4, r4, r5
 8022fd2:	10a4      	asrs	r4, r4, #2
 8022fd4:	2600      	movs	r6, #0
 8022fd6:	42a6      	cmp	r6, r4
 8022fd8:	d105      	bne.n	8022fe6 <__libc_init_array+0x2e>
 8022fda:	bd70      	pop	{r4, r5, r6, pc}
 8022fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8022fe0:	4798      	blx	r3
 8022fe2:	3601      	adds	r6, #1
 8022fe4:	e7ee      	b.n	8022fc4 <__libc_init_array+0xc>
 8022fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8022fea:	4798      	blx	r3
 8022fec:	3601      	adds	r6, #1
 8022fee:	e7f2      	b.n	8022fd6 <__libc_init_array+0x1e>
 8022ff0:	08029e00 	.word	0x08029e00
 8022ff4:	08029e00 	.word	0x08029e00
 8022ff8:	08029e00 	.word	0x08029e00
 8022ffc:	08029e04 	.word	0x08029e04

08023000 <malloc>:
 8023000:	4b02      	ldr	r3, [pc, #8]	; (802300c <malloc+0xc>)
 8023002:	4601      	mov	r1, r0
 8023004:	6818      	ldr	r0, [r3, #0]
 8023006:	f000 b8a3 	b.w	8023150 <_malloc_r>
 802300a:	bf00      	nop
 802300c:	20000158 	.word	0x20000158

08023010 <free>:
 8023010:	4b02      	ldr	r3, [pc, #8]	; (802301c <free+0xc>)
 8023012:	4601      	mov	r1, r0
 8023014:	6818      	ldr	r0, [r3, #0]
 8023016:	f000 b82f 	b.w	8023078 <_free_r>
 802301a:	bf00      	nop
 802301c:	20000158 	.word	0x20000158

08023020 <memcpy>:
 8023020:	440a      	add	r2, r1
 8023022:	4291      	cmp	r1, r2
 8023024:	f100 33ff 	add.w	r3, r0, #4294967295
 8023028:	d100      	bne.n	802302c <memcpy+0xc>
 802302a:	4770      	bx	lr
 802302c:	b510      	push	{r4, lr}
 802302e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023036:	4291      	cmp	r1, r2
 8023038:	d1f9      	bne.n	802302e <memcpy+0xe>
 802303a:	bd10      	pop	{r4, pc}

0802303c <memset>:
 802303c:	4402      	add	r2, r0
 802303e:	4603      	mov	r3, r0
 8023040:	4293      	cmp	r3, r2
 8023042:	d100      	bne.n	8023046 <memset+0xa>
 8023044:	4770      	bx	lr
 8023046:	f803 1b01 	strb.w	r1, [r3], #1
 802304a:	e7f9      	b.n	8023040 <memset+0x4>

0802304c <_calloc_r>:
 802304c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802304e:	fba1 2402 	umull	r2, r4, r1, r2
 8023052:	b94c      	cbnz	r4, 8023068 <_calloc_r+0x1c>
 8023054:	4611      	mov	r1, r2
 8023056:	9201      	str	r2, [sp, #4]
 8023058:	f000 f87a 	bl	8023150 <_malloc_r>
 802305c:	9a01      	ldr	r2, [sp, #4]
 802305e:	4605      	mov	r5, r0
 8023060:	b930      	cbnz	r0, 8023070 <_calloc_r+0x24>
 8023062:	4628      	mov	r0, r5
 8023064:	b003      	add	sp, #12
 8023066:	bd30      	pop	{r4, r5, pc}
 8023068:	220c      	movs	r2, #12
 802306a:	6002      	str	r2, [r0, #0]
 802306c:	2500      	movs	r5, #0
 802306e:	e7f8      	b.n	8023062 <_calloc_r+0x16>
 8023070:	4621      	mov	r1, r4
 8023072:	f7ff ffe3 	bl	802303c <memset>
 8023076:	e7f4      	b.n	8023062 <_calloc_r+0x16>

08023078 <_free_r>:
 8023078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802307a:	2900      	cmp	r1, #0
 802307c:	d044      	beq.n	8023108 <_free_r+0x90>
 802307e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023082:	9001      	str	r0, [sp, #4]
 8023084:	2b00      	cmp	r3, #0
 8023086:	f1a1 0404 	sub.w	r4, r1, #4
 802308a:	bfb8      	it	lt
 802308c:	18e4      	addlt	r4, r4, r3
 802308e:	f000 f9f9 	bl	8023484 <__malloc_lock>
 8023092:	4a1e      	ldr	r2, [pc, #120]	; (802310c <_free_r+0x94>)
 8023094:	9801      	ldr	r0, [sp, #4]
 8023096:	6813      	ldr	r3, [r2, #0]
 8023098:	b933      	cbnz	r3, 80230a8 <_free_r+0x30>
 802309a:	6063      	str	r3, [r4, #4]
 802309c:	6014      	str	r4, [r2, #0]
 802309e:	b003      	add	sp, #12
 80230a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80230a4:	f000 b9f4 	b.w	8023490 <__malloc_unlock>
 80230a8:	42a3      	cmp	r3, r4
 80230aa:	d908      	bls.n	80230be <_free_r+0x46>
 80230ac:	6825      	ldr	r5, [r4, #0]
 80230ae:	1961      	adds	r1, r4, r5
 80230b0:	428b      	cmp	r3, r1
 80230b2:	bf01      	itttt	eq
 80230b4:	6819      	ldreq	r1, [r3, #0]
 80230b6:	685b      	ldreq	r3, [r3, #4]
 80230b8:	1949      	addeq	r1, r1, r5
 80230ba:	6021      	streq	r1, [r4, #0]
 80230bc:	e7ed      	b.n	802309a <_free_r+0x22>
 80230be:	461a      	mov	r2, r3
 80230c0:	685b      	ldr	r3, [r3, #4]
 80230c2:	b10b      	cbz	r3, 80230c8 <_free_r+0x50>
 80230c4:	42a3      	cmp	r3, r4
 80230c6:	d9fa      	bls.n	80230be <_free_r+0x46>
 80230c8:	6811      	ldr	r1, [r2, #0]
 80230ca:	1855      	adds	r5, r2, r1
 80230cc:	42a5      	cmp	r5, r4
 80230ce:	d10b      	bne.n	80230e8 <_free_r+0x70>
 80230d0:	6824      	ldr	r4, [r4, #0]
 80230d2:	4421      	add	r1, r4
 80230d4:	1854      	adds	r4, r2, r1
 80230d6:	42a3      	cmp	r3, r4
 80230d8:	6011      	str	r1, [r2, #0]
 80230da:	d1e0      	bne.n	802309e <_free_r+0x26>
 80230dc:	681c      	ldr	r4, [r3, #0]
 80230de:	685b      	ldr	r3, [r3, #4]
 80230e0:	6053      	str	r3, [r2, #4]
 80230e2:	4421      	add	r1, r4
 80230e4:	6011      	str	r1, [r2, #0]
 80230e6:	e7da      	b.n	802309e <_free_r+0x26>
 80230e8:	d902      	bls.n	80230f0 <_free_r+0x78>
 80230ea:	230c      	movs	r3, #12
 80230ec:	6003      	str	r3, [r0, #0]
 80230ee:	e7d6      	b.n	802309e <_free_r+0x26>
 80230f0:	6825      	ldr	r5, [r4, #0]
 80230f2:	1961      	adds	r1, r4, r5
 80230f4:	428b      	cmp	r3, r1
 80230f6:	bf04      	itt	eq
 80230f8:	6819      	ldreq	r1, [r3, #0]
 80230fa:	685b      	ldreq	r3, [r3, #4]
 80230fc:	6063      	str	r3, [r4, #4]
 80230fe:	bf04      	itt	eq
 8023100:	1949      	addeq	r1, r1, r5
 8023102:	6021      	streq	r1, [r4, #0]
 8023104:	6054      	str	r4, [r2, #4]
 8023106:	e7ca      	b.n	802309e <_free_r+0x26>
 8023108:	b003      	add	sp, #12
 802310a:	bd30      	pop	{r4, r5, pc}
 802310c:	20001df0 	.word	0x20001df0

08023110 <sbrk_aligned>:
 8023110:	b570      	push	{r4, r5, r6, lr}
 8023112:	4e0e      	ldr	r6, [pc, #56]	; (802314c <sbrk_aligned+0x3c>)
 8023114:	460c      	mov	r4, r1
 8023116:	6831      	ldr	r1, [r6, #0]
 8023118:	4605      	mov	r5, r0
 802311a:	b911      	cbnz	r1, 8023122 <sbrk_aligned+0x12>
 802311c:	f000 f88c 	bl	8023238 <_sbrk_r>
 8023120:	6030      	str	r0, [r6, #0]
 8023122:	4621      	mov	r1, r4
 8023124:	4628      	mov	r0, r5
 8023126:	f000 f887 	bl	8023238 <_sbrk_r>
 802312a:	1c43      	adds	r3, r0, #1
 802312c:	d00a      	beq.n	8023144 <sbrk_aligned+0x34>
 802312e:	1cc4      	adds	r4, r0, #3
 8023130:	f024 0403 	bic.w	r4, r4, #3
 8023134:	42a0      	cmp	r0, r4
 8023136:	d007      	beq.n	8023148 <sbrk_aligned+0x38>
 8023138:	1a21      	subs	r1, r4, r0
 802313a:	4628      	mov	r0, r5
 802313c:	f000 f87c 	bl	8023238 <_sbrk_r>
 8023140:	3001      	adds	r0, #1
 8023142:	d101      	bne.n	8023148 <sbrk_aligned+0x38>
 8023144:	f04f 34ff 	mov.w	r4, #4294967295
 8023148:	4620      	mov	r0, r4
 802314a:	bd70      	pop	{r4, r5, r6, pc}
 802314c:	20001df4 	.word	0x20001df4

08023150 <_malloc_r>:
 8023150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023154:	1ccd      	adds	r5, r1, #3
 8023156:	f025 0503 	bic.w	r5, r5, #3
 802315a:	3508      	adds	r5, #8
 802315c:	2d0c      	cmp	r5, #12
 802315e:	bf38      	it	cc
 8023160:	250c      	movcc	r5, #12
 8023162:	2d00      	cmp	r5, #0
 8023164:	4607      	mov	r7, r0
 8023166:	db01      	blt.n	802316c <_malloc_r+0x1c>
 8023168:	42a9      	cmp	r1, r5
 802316a:	d905      	bls.n	8023178 <_malloc_r+0x28>
 802316c:	230c      	movs	r3, #12
 802316e:	603b      	str	r3, [r7, #0]
 8023170:	2600      	movs	r6, #0
 8023172:	4630      	mov	r0, r6
 8023174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023178:	4e2e      	ldr	r6, [pc, #184]	; (8023234 <_malloc_r+0xe4>)
 802317a:	f000 f983 	bl	8023484 <__malloc_lock>
 802317e:	6833      	ldr	r3, [r6, #0]
 8023180:	461c      	mov	r4, r3
 8023182:	bb34      	cbnz	r4, 80231d2 <_malloc_r+0x82>
 8023184:	4629      	mov	r1, r5
 8023186:	4638      	mov	r0, r7
 8023188:	f7ff ffc2 	bl	8023110 <sbrk_aligned>
 802318c:	1c43      	adds	r3, r0, #1
 802318e:	4604      	mov	r4, r0
 8023190:	d14d      	bne.n	802322e <_malloc_r+0xde>
 8023192:	6834      	ldr	r4, [r6, #0]
 8023194:	4626      	mov	r6, r4
 8023196:	2e00      	cmp	r6, #0
 8023198:	d140      	bne.n	802321c <_malloc_r+0xcc>
 802319a:	6823      	ldr	r3, [r4, #0]
 802319c:	4631      	mov	r1, r6
 802319e:	4638      	mov	r0, r7
 80231a0:	eb04 0803 	add.w	r8, r4, r3
 80231a4:	f000 f848 	bl	8023238 <_sbrk_r>
 80231a8:	4580      	cmp	r8, r0
 80231aa:	d13a      	bne.n	8023222 <_malloc_r+0xd2>
 80231ac:	6821      	ldr	r1, [r4, #0]
 80231ae:	3503      	adds	r5, #3
 80231b0:	1a6d      	subs	r5, r5, r1
 80231b2:	f025 0503 	bic.w	r5, r5, #3
 80231b6:	3508      	adds	r5, #8
 80231b8:	2d0c      	cmp	r5, #12
 80231ba:	bf38      	it	cc
 80231bc:	250c      	movcc	r5, #12
 80231be:	4629      	mov	r1, r5
 80231c0:	4638      	mov	r0, r7
 80231c2:	f7ff ffa5 	bl	8023110 <sbrk_aligned>
 80231c6:	3001      	adds	r0, #1
 80231c8:	d02b      	beq.n	8023222 <_malloc_r+0xd2>
 80231ca:	6823      	ldr	r3, [r4, #0]
 80231cc:	442b      	add	r3, r5
 80231ce:	6023      	str	r3, [r4, #0]
 80231d0:	e00e      	b.n	80231f0 <_malloc_r+0xa0>
 80231d2:	6822      	ldr	r2, [r4, #0]
 80231d4:	1b52      	subs	r2, r2, r5
 80231d6:	d41e      	bmi.n	8023216 <_malloc_r+0xc6>
 80231d8:	2a0b      	cmp	r2, #11
 80231da:	d916      	bls.n	802320a <_malloc_r+0xba>
 80231dc:	1961      	adds	r1, r4, r5
 80231de:	42a3      	cmp	r3, r4
 80231e0:	6025      	str	r5, [r4, #0]
 80231e2:	bf18      	it	ne
 80231e4:	6059      	strne	r1, [r3, #4]
 80231e6:	6863      	ldr	r3, [r4, #4]
 80231e8:	bf08      	it	eq
 80231ea:	6031      	streq	r1, [r6, #0]
 80231ec:	5162      	str	r2, [r4, r5]
 80231ee:	604b      	str	r3, [r1, #4]
 80231f0:	4638      	mov	r0, r7
 80231f2:	f104 060b 	add.w	r6, r4, #11
 80231f6:	f000 f94b 	bl	8023490 <__malloc_unlock>
 80231fa:	f026 0607 	bic.w	r6, r6, #7
 80231fe:	1d23      	adds	r3, r4, #4
 8023200:	1af2      	subs	r2, r6, r3
 8023202:	d0b6      	beq.n	8023172 <_malloc_r+0x22>
 8023204:	1b9b      	subs	r3, r3, r6
 8023206:	50a3      	str	r3, [r4, r2]
 8023208:	e7b3      	b.n	8023172 <_malloc_r+0x22>
 802320a:	6862      	ldr	r2, [r4, #4]
 802320c:	42a3      	cmp	r3, r4
 802320e:	bf0c      	ite	eq
 8023210:	6032      	streq	r2, [r6, #0]
 8023212:	605a      	strne	r2, [r3, #4]
 8023214:	e7ec      	b.n	80231f0 <_malloc_r+0xa0>
 8023216:	4623      	mov	r3, r4
 8023218:	6864      	ldr	r4, [r4, #4]
 802321a:	e7b2      	b.n	8023182 <_malloc_r+0x32>
 802321c:	4634      	mov	r4, r6
 802321e:	6876      	ldr	r6, [r6, #4]
 8023220:	e7b9      	b.n	8023196 <_malloc_r+0x46>
 8023222:	230c      	movs	r3, #12
 8023224:	603b      	str	r3, [r7, #0]
 8023226:	4638      	mov	r0, r7
 8023228:	f000 f932 	bl	8023490 <__malloc_unlock>
 802322c:	e7a1      	b.n	8023172 <_malloc_r+0x22>
 802322e:	6025      	str	r5, [r4, #0]
 8023230:	e7de      	b.n	80231f0 <_malloc_r+0xa0>
 8023232:	bf00      	nop
 8023234:	20001df0 	.word	0x20001df0

08023238 <_sbrk_r>:
 8023238:	b538      	push	{r3, r4, r5, lr}
 802323a:	4d06      	ldr	r5, [pc, #24]	; (8023254 <_sbrk_r+0x1c>)
 802323c:	2300      	movs	r3, #0
 802323e:	4604      	mov	r4, r0
 8023240:	4608      	mov	r0, r1
 8023242:	602b      	str	r3, [r5, #0]
 8023244:	f7e0 fc1a 	bl	8003a7c <_sbrk>
 8023248:	1c43      	adds	r3, r0, #1
 802324a:	d102      	bne.n	8023252 <_sbrk_r+0x1a>
 802324c:	682b      	ldr	r3, [r5, #0]
 802324e:	b103      	cbz	r3, 8023252 <_sbrk_r+0x1a>
 8023250:	6023      	str	r3, [r4, #0]
 8023252:	bd38      	pop	{r3, r4, r5, pc}
 8023254:	20001df8 	.word	0x20001df8

08023258 <strcasecmp>:
 8023258:	b530      	push	{r4, r5, lr}
 802325a:	4d0b      	ldr	r5, [pc, #44]	; (8023288 <strcasecmp+0x30>)
 802325c:	4604      	mov	r4, r0
 802325e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023262:	5d5a      	ldrb	r2, [r3, r5]
 8023264:	f002 0203 	and.w	r2, r2, #3
 8023268:	2a01      	cmp	r2, #1
 802326a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802326e:	5ca8      	ldrb	r0, [r5, r2]
 8023270:	f000 0003 	and.w	r0, r0, #3
 8023274:	bf08      	it	eq
 8023276:	3320      	addeq	r3, #32
 8023278:	2801      	cmp	r0, #1
 802327a:	bf08      	it	eq
 802327c:	3220      	addeq	r2, #32
 802327e:	1a98      	subs	r0, r3, r2
 8023280:	d101      	bne.n	8023286 <strcasecmp+0x2e>
 8023282:	2a00      	cmp	r2, #0
 8023284:	d1eb      	bne.n	802325e <strcasecmp+0x6>
 8023286:	bd30      	pop	{r4, r5, pc}
 8023288:	080296ed 	.word	0x080296ed

0802328c <strcat>:
 802328c:	b510      	push	{r4, lr}
 802328e:	4602      	mov	r2, r0
 8023290:	7814      	ldrb	r4, [r2, #0]
 8023292:	4613      	mov	r3, r2
 8023294:	3201      	adds	r2, #1
 8023296:	2c00      	cmp	r4, #0
 8023298:	d1fa      	bne.n	8023290 <strcat+0x4>
 802329a:	3b01      	subs	r3, #1
 802329c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80232a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80232a4:	2a00      	cmp	r2, #0
 80232a6:	d1f9      	bne.n	802329c <strcat+0x10>
 80232a8:	bd10      	pop	{r4, pc}

080232aa <strchr>:
 80232aa:	b2c9      	uxtb	r1, r1
 80232ac:	4603      	mov	r3, r0
 80232ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80232b2:	b11a      	cbz	r2, 80232bc <strchr+0x12>
 80232b4:	428a      	cmp	r2, r1
 80232b6:	d1f9      	bne.n	80232ac <strchr+0x2>
 80232b8:	4618      	mov	r0, r3
 80232ba:	4770      	bx	lr
 80232bc:	2900      	cmp	r1, #0
 80232be:	bf18      	it	ne
 80232c0:	2300      	movne	r3, #0
 80232c2:	e7f9      	b.n	80232b8 <strchr+0xe>

080232c4 <strcpy>:
 80232c4:	4603      	mov	r3, r0
 80232c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80232ca:	f803 2b01 	strb.w	r2, [r3], #1
 80232ce:	2a00      	cmp	r2, #0
 80232d0:	d1f9      	bne.n	80232c6 <strcpy+0x2>
 80232d2:	4770      	bx	lr

080232d4 <strncasecmp>:
 80232d4:	b570      	push	{r4, r5, r6, lr}
 80232d6:	4e0f      	ldr	r6, [pc, #60]	; (8023314 <strncasecmp+0x40>)
 80232d8:	4604      	mov	r4, r0
 80232da:	440a      	add	r2, r1
 80232dc:	428a      	cmp	r2, r1
 80232de:	d101      	bne.n	80232e4 <strncasecmp+0x10>
 80232e0:	2000      	movs	r0, #0
 80232e2:	e013      	b.n	802330c <strncasecmp+0x38>
 80232e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80232e8:	5d98      	ldrb	r0, [r3, r6]
 80232ea:	f000 0003 	and.w	r0, r0, #3
 80232ee:	2801      	cmp	r0, #1
 80232f0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80232f4:	5c35      	ldrb	r5, [r6, r0]
 80232f6:	f005 0503 	and.w	r5, r5, #3
 80232fa:	bf08      	it	eq
 80232fc:	3320      	addeq	r3, #32
 80232fe:	2d01      	cmp	r5, #1
 8023300:	bf08      	it	eq
 8023302:	3020      	addeq	r0, #32
 8023304:	1a1b      	subs	r3, r3, r0
 8023306:	d102      	bne.n	802330e <strncasecmp+0x3a>
 8023308:	2800      	cmp	r0, #0
 802330a:	d1e7      	bne.n	80232dc <strncasecmp+0x8>
 802330c:	bd70      	pop	{r4, r5, r6, pc}
 802330e:	4618      	mov	r0, r3
 8023310:	e7fc      	b.n	802330c <strncasecmp+0x38>
 8023312:	bf00      	nop
 8023314:	080296ed 	.word	0x080296ed

08023318 <strncpy>:
 8023318:	b510      	push	{r4, lr}
 802331a:	3901      	subs	r1, #1
 802331c:	4603      	mov	r3, r0
 802331e:	b132      	cbz	r2, 802332e <strncpy+0x16>
 8023320:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023324:	f803 4b01 	strb.w	r4, [r3], #1
 8023328:	3a01      	subs	r2, #1
 802332a:	2c00      	cmp	r4, #0
 802332c:	d1f7      	bne.n	802331e <strncpy+0x6>
 802332e:	441a      	add	r2, r3
 8023330:	2100      	movs	r1, #0
 8023332:	4293      	cmp	r3, r2
 8023334:	d100      	bne.n	8023338 <strncpy+0x20>
 8023336:	bd10      	pop	{r4, pc}
 8023338:	f803 1b01 	strb.w	r1, [r3], #1
 802333c:	e7f9      	b.n	8023332 <strncpy+0x1a>

0802333e <strstr>:
 802333e:	780a      	ldrb	r2, [r1, #0]
 8023340:	b570      	push	{r4, r5, r6, lr}
 8023342:	b96a      	cbnz	r2, 8023360 <strstr+0x22>
 8023344:	bd70      	pop	{r4, r5, r6, pc}
 8023346:	429a      	cmp	r2, r3
 8023348:	d109      	bne.n	802335e <strstr+0x20>
 802334a:	460c      	mov	r4, r1
 802334c:	4605      	mov	r5, r0
 802334e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8023352:	2b00      	cmp	r3, #0
 8023354:	d0f6      	beq.n	8023344 <strstr+0x6>
 8023356:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802335a:	429e      	cmp	r6, r3
 802335c:	d0f7      	beq.n	802334e <strstr+0x10>
 802335e:	3001      	adds	r0, #1
 8023360:	7803      	ldrb	r3, [r0, #0]
 8023362:	2b00      	cmp	r3, #0
 8023364:	d1ef      	bne.n	8023346 <strstr+0x8>
 8023366:	4618      	mov	r0, r3
 8023368:	e7ec      	b.n	8023344 <strstr+0x6>
	...

0802336c <_strtol_l.constprop.0>:
 802336c:	2b01      	cmp	r3, #1
 802336e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023372:	d001      	beq.n	8023378 <_strtol_l.constprop.0+0xc>
 8023374:	2b24      	cmp	r3, #36	; 0x24
 8023376:	d906      	bls.n	8023386 <_strtol_l.constprop.0+0x1a>
 8023378:	f7ff fe18 	bl	8022fac <__errno>
 802337c:	2316      	movs	r3, #22
 802337e:	6003      	str	r3, [r0, #0]
 8023380:	2000      	movs	r0, #0
 8023382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023386:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802346c <_strtol_l.constprop.0+0x100>
 802338a:	460d      	mov	r5, r1
 802338c:	462e      	mov	r6, r5
 802338e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023392:	f814 700c 	ldrb.w	r7, [r4, ip]
 8023396:	f017 0708 	ands.w	r7, r7, #8
 802339a:	d1f7      	bne.n	802338c <_strtol_l.constprop.0+0x20>
 802339c:	2c2d      	cmp	r4, #45	; 0x2d
 802339e:	d132      	bne.n	8023406 <_strtol_l.constprop.0+0x9a>
 80233a0:	782c      	ldrb	r4, [r5, #0]
 80233a2:	2701      	movs	r7, #1
 80233a4:	1cb5      	adds	r5, r6, #2
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	d05b      	beq.n	8023462 <_strtol_l.constprop.0+0xf6>
 80233aa:	2b10      	cmp	r3, #16
 80233ac:	d109      	bne.n	80233c2 <_strtol_l.constprop.0+0x56>
 80233ae:	2c30      	cmp	r4, #48	; 0x30
 80233b0:	d107      	bne.n	80233c2 <_strtol_l.constprop.0+0x56>
 80233b2:	782c      	ldrb	r4, [r5, #0]
 80233b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80233b8:	2c58      	cmp	r4, #88	; 0x58
 80233ba:	d14d      	bne.n	8023458 <_strtol_l.constprop.0+0xec>
 80233bc:	786c      	ldrb	r4, [r5, #1]
 80233be:	2310      	movs	r3, #16
 80233c0:	3502      	adds	r5, #2
 80233c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80233c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80233ca:	f04f 0c00 	mov.w	ip, #0
 80233ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80233d2:	4666      	mov	r6, ip
 80233d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80233d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80233dc:	f1be 0f09 	cmp.w	lr, #9
 80233e0:	d816      	bhi.n	8023410 <_strtol_l.constprop.0+0xa4>
 80233e2:	4674      	mov	r4, lr
 80233e4:	42a3      	cmp	r3, r4
 80233e6:	dd24      	ble.n	8023432 <_strtol_l.constprop.0+0xc6>
 80233e8:	f1bc 0f00 	cmp.w	ip, #0
 80233ec:	db1e      	blt.n	802342c <_strtol_l.constprop.0+0xc0>
 80233ee:	45b1      	cmp	r9, r6
 80233f0:	d31c      	bcc.n	802342c <_strtol_l.constprop.0+0xc0>
 80233f2:	d101      	bne.n	80233f8 <_strtol_l.constprop.0+0x8c>
 80233f4:	45a2      	cmp	sl, r4
 80233f6:	db19      	blt.n	802342c <_strtol_l.constprop.0+0xc0>
 80233f8:	fb06 4603 	mla	r6, r6, r3, r4
 80233fc:	f04f 0c01 	mov.w	ip, #1
 8023400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023404:	e7e8      	b.n	80233d8 <_strtol_l.constprop.0+0x6c>
 8023406:	2c2b      	cmp	r4, #43	; 0x2b
 8023408:	bf04      	itt	eq
 802340a:	782c      	ldrbeq	r4, [r5, #0]
 802340c:	1cb5      	addeq	r5, r6, #2
 802340e:	e7ca      	b.n	80233a6 <_strtol_l.constprop.0+0x3a>
 8023410:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8023414:	f1be 0f19 	cmp.w	lr, #25
 8023418:	d801      	bhi.n	802341e <_strtol_l.constprop.0+0xb2>
 802341a:	3c37      	subs	r4, #55	; 0x37
 802341c:	e7e2      	b.n	80233e4 <_strtol_l.constprop.0+0x78>
 802341e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8023422:	f1be 0f19 	cmp.w	lr, #25
 8023426:	d804      	bhi.n	8023432 <_strtol_l.constprop.0+0xc6>
 8023428:	3c57      	subs	r4, #87	; 0x57
 802342a:	e7db      	b.n	80233e4 <_strtol_l.constprop.0+0x78>
 802342c:	f04f 3cff 	mov.w	ip, #4294967295
 8023430:	e7e6      	b.n	8023400 <_strtol_l.constprop.0+0x94>
 8023432:	f1bc 0f00 	cmp.w	ip, #0
 8023436:	da05      	bge.n	8023444 <_strtol_l.constprop.0+0xd8>
 8023438:	2322      	movs	r3, #34	; 0x22
 802343a:	6003      	str	r3, [r0, #0]
 802343c:	4646      	mov	r6, r8
 802343e:	b942      	cbnz	r2, 8023452 <_strtol_l.constprop.0+0xe6>
 8023440:	4630      	mov	r0, r6
 8023442:	e79e      	b.n	8023382 <_strtol_l.constprop.0+0x16>
 8023444:	b107      	cbz	r7, 8023448 <_strtol_l.constprop.0+0xdc>
 8023446:	4276      	negs	r6, r6
 8023448:	2a00      	cmp	r2, #0
 802344a:	d0f9      	beq.n	8023440 <_strtol_l.constprop.0+0xd4>
 802344c:	f1bc 0f00 	cmp.w	ip, #0
 8023450:	d000      	beq.n	8023454 <_strtol_l.constprop.0+0xe8>
 8023452:	1e69      	subs	r1, r5, #1
 8023454:	6011      	str	r1, [r2, #0]
 8023456:	e7f3      	b.n	8023440 <_strtol_l.constprop.0+0xd4>
 8023458:	2430      	movs	r4, #48	; 0x30
 802345a:	2b00      	cmp	r3, #0
 802345c:	d1b1      	bne.n	80233c2 <_strtol_l.constprop.0+0x56>
 802345e:	2308      	movs	r3, #8
 8023460:	e7af      	b.n	80233c2 <_strtol_l.constprop.0+0x56>
 8023462:	2c30      	cmp	r4, #48	; 0x30
 8023464:	d0a5      	beq.n	80233b2 <_strtol_l.constprop.0+0x46>
 8023466:	230a      	movs	r3, #10
 8023468:	e7ab      	b.n	80233c2 <_strtol_l.constprop.0+0x56>
 802346a:	bf00      	nop
 802346c:	080296ed 	.word	0x080296ed

08023470 <strtol>:
 8023470:	4613      	mov	r3, r2
 8023472:	460a      	mov	r2, r1
 8023474:	4601      	mov	r1, r0
 8023476:	4802      	ldr	r0, [pc, #8]	; (8023480 <strtol+0x10>)
 8023478:	6800      	ldr	r0, [r0, #0]
 802347a:	f7ff bf77 	b.w	802336c <_strtol_l.constprop.0>
 802347e:	bf00      	nop
 8023480:	20000158 	.word	0x20000158

08023484 <__malloc_lock>:
 8023484:	4801      	ldr	r0, [pc, #4]	; (802348c <__malloc_lock+0x8>)
 8023486:	f000 b809 	b.w	802349c <__retarget_lock_acquire_recursive>
 802348a:	bf00      	nop
 802348c:	20001dfc 	.word	0x20001dfc

08023490 <__malloc_unlock>:
 8023490:	4801      	ldr	r0, [pc, #4]	; (8023498 <__malloc_unlock+0x8>)
 8023492:	f000 b804 	b.w	802349e <__retarget_lock_release_recursive>
 8023496:	bf00      	nop
 8023498:	20001dfc 	.word	0x20001dfc

0802349c <__retarget_lock_acquire_recursive>:
 802349c:	4770      	bx	lr

0802349e <__retarget_lock_release_recursive>:
 802349e:	4770      	bx	lr

080234a0 <cos>:
 80234a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80234a2:	ec53 2b10 	vmov	r2, r3, d0
 80234a6:	4826      	ldr	r0, [pc, #152]	; (8023540 <cos+0xa0>)
 80234a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80234ac:	4281      	cmp	r1, r0
 80234ae:	dc06      	bgt.n	80234be <cos+0x1e>
 80234b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8023538 <cos+0x98>
 80234b4:	b005      	add	sp, #20
 80234b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80234ba:	f001 b9c1 	b.w	8024840 <__kernel_cos>
 80234be:	4821      	ldr	r0, [pc, #132]	; (8023544 <cos+0xa4>)
 80234c0:	4281      	cmp	r1, r0
 80234c2:	dd09      	ble.n	80234d8 <cos+0x38>
 80234c4:	ee10 0a10 	vmov	r0, s0
 80234c8:	4619      	mov	r1, r3
 80234ca:	f7dc fe91 	bl	80001f0 <__aeabi_dsub>
 80234ce:	ec41 0b10 	vmov	d0, r0, r1
 80234d2:	b005      	add	sp, #20
 80234d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80234d8:	4668      	mov	r0, sp
 80234da:	f000 f9fd 	bl	80238d8 <__ieee754_rem_pio2>
 80234de:	f000 0003 	and.w	r0, r0, #3
 80234e2:	2801      	cmp	r0, #1
 80234e4:	d00b      	beq.n	80234fe <cos+0x5e>
 80234e6:	2802      	cmp	r0, #2
 80234e8:	d016      	beq.n	8023518 <cos+0x78>
 80234ea:	b9e0      	cbnz	r0, 8023526 <cos+0x86>
 80234ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80234f0:	ed9d 0b00 	vldr	d0, [sp]
 80234f4:	f001 f9a4 	bl	8024840 <__kernel_cos>
 80234f8:	ec51 0b10 	vmov	r0, r1, d0
 80234fc:	e7e7      	b.n	80234ce <cos+0x2e>
 80234fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023502:	ed9d 0b00 	vldr	d0, [sp]
 8023506:	f001 fdb3 	bl	8025070 <__kernel_sin>
 802350a:	ec53 2b10 	vmov	r2, r3, d0
 802350e:	ee10 0a10 	vmov	r0, s0
 8023512:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023516:	e7da      	b.n	80234ce <cos+0x2e>
 8023518:	ed9d 1b02 	vldr	d1, [sp, #8]
 802351c:	ed9d 0b00 	vldr	d0, [sp]
 8023520:	f001 f98e 	bl	8024840 <__kernel_cos>
 8023524:	e7f1      	b.n	802350a <cos+0x6a>
 8023526:	ed9d 1b02 	vldr	d1, [sp, #8]
 802352a:	ed9d 0b00 	vldr	d0, [sp]
 802352e:	2001      	movs	r0, #1
 8023530:	f001 fd9e 	bl	8025070 <__kernel_sin>
 8023534:	e7e0      	b.n	80234f8 <cos+0x58>
 8023536:	bf00      	nop
	...
 8023540:	3fe921fb 	.word	0x3fe921fb
 8023544:	7fefffff 	.word	0x7fefffff

08023548 <sin>:
 8023548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802354a:	ec53 2b10 	vmov	r2, r3, d0
 802354e:	4828      	ldr	r0, [pc, #160]	; (80235f0 <sin+0xa8>)
 8023550:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023554:	4281      	cmp	r1, r0
 8023556:	dc07      	bgt.n	8023568 <sin+0x20>
 8023558:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80235e8 <sin+0xa0>
 802355c:	2000      	movs	r0, #0
 802355e:	b005      	add	sp, #20
 8023560:	f85d eb04 	ldr.w	lr, [sp], #4
 8023564:	f001 bd84 	b.w	8025070 <__kernel_sin>
 8023568:	4822      	ldr	r0, [pc, #136]	; (80235f4 <sin+0xac>)
 802356a:	4281      	cmp	r1, r0
 802356c:	dd09      	ble.n	8023582 <sin+0x3a>
 802356e:	ee10 0a10 	vmov	r0, s0
 8023572:	4619      	mov	r1, r3
 8023574:	f7dc fe3c 	bl	80001f0 <__aeabi_dsub>
 8023578:	ec41 0b10 	vmov	d0, r0, r1
 802357c:	b005      	add	sp, #20
 802357e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023582:	4668      	mov	r0, sp
 8023584:	f000 f9a8 	bl	80238d8 <__ieee754_rem_pio2>
 8023588:	f000 0003 	and.w	r0, r0, #3
 802358c:	2801      	cmp	r0, #1
 802358e:	d00c      	beq.n	80235aa <sin+0x62>
 8023590:	2802      	cmp	r0, #2
 8023592:	d011      	beq.n	80235b8 <sin+0x70>
 8023594:	b9f0      	cbnz	r0, 80235d4 <sin+0x8c>
 8023596:	ed9d 1b02 	vldr	d1, [sp, #8]
 802359a:	ed9d 0b00 	vldr	d0, [sp]
 802359e:	2001      	movs	r0, #1
 80235a0:	f001 fd66 	bl	8025070 <__kernel_sin>
 80235a4:	ec51 0b10 	vmov	r0, r1, d0
 80235a8:	e7e6      	b.n	8023578 <sin+0x30>
 80235aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80235ae:	ed9d 0b00 	vldr	d0, [sp]
 80235b2:	f001 f945 	bl	8024840 <__kernel_cos>
 80235b6:	e7f5      	b.n	80235a4 <sin+0x5c>
 80235b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80235bc:	ed9d 0b00 	vldr	d0, [sp]
 80235c0:	2001      	movs	r0, #1
 80235c2:	f001 fd55 	bl	8025070 <__kernel_sin>
 80235c6:	ec53 2b10 	vmov	r2, r3, d0
 80235ca:	ee10 0a10 	vmov	r0, s0
 80235ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80235d2:	e7d1      	b.n	8023578 <sin+0x30>
 80235d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80235d8:	ed9d 0b00 	vldr	d0, [sp]
 80235dc:	f001 f930 	bl	8024840 <__kernel_cos>
 80235e0:	e7f1      	b.n	80235c6 <sin+0x7e>
 80235e2:	bf00      	nop
 80235e4:	f3af 8000 	nop.w
	...
 80235f0:	3fe921fb 	.word	0x3fe921fb
 80235f4:	7fefffff 	.word	0x7fefffff

080235f8 <cosf>:
 80235f8:	ee10 3a10 	vmov	r3, s0
 80235fc:	b507      	push	{r0, r1, r2, lr}
 80235fe:	4a1e      	ldr	r2, [pc, #120]	; (8023678 <cosf+0x80>)
 8023600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023604:	4293      	cmp	r3, r2
 8023606:	dc06      	bgt.n	8023616 <cosf+0x1e>
 8023608:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802367c <cosf+0x84>
 802360c:	b003      	add	sp, #12
 802360e:	f85d eb04 	ldr.w	lr, [sp], #4
 8023612:	f001 bdeb 	b.w	80251ec <__kernel_cosf>
 8023616:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802361a:	db04      	blt.n	8023626 <cosf+0x2e>
 802361c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023620:	b003      	add	sp, #12
 8023622:	f85d fb04 	ldr.w	pc, [sp], #4
 8023626:	4668      	mov	r0, sp
 8023628:	f000 ffc8 	bl	80245bc <__ieee754_rem_pio2f>
 802362c:	f000 0003 	and.w	r0, r0, #3
 8023630:	2801      	cmp	r0, #1
 8023632:	d009      	beq.n	8023648 <cosf+0x50>
 8023634:	2802      	cmp	r0, #2
 8023636:	d010      	beq.n	802365a <cosf+0x62>
 8023638:	b9b0      	cbnz	r0, 8023668 <cosf+0x70>
 802363a:	eddd 0a01 	vldr	s1, [sp, #4]
 802363e:	ed9d 0a00 	vldr	s0, [sp]
 8023642:	f001 fdd3 	bl	80251ec <__kernel_cosf>
 8023646:	e7eb      	b.n	8023620 <cosf+0x28>
 8023648:	eddd 0a01 	vldr	s1, [sp, #4]
 802364c:	ed9d 0a00 	vldr	s0, [sp]
 8023650:	f002 f8a2 	bl	8025798 <__kernel_sinf>
 8023654:	eeb1 0a40 	vneg.f32	s0, s0
 8023658:	e7e2      	b.n	8023620 <cosf+0x28>
 802365a:	eddd 0a01 	vldr	s1, [sp, #4]
 802365e:	ed9d 0a00 	vldr	s0, [sp]
 8023662:	f001 fdc3 	bl	80251ec <__kernel_cosf>
 8023666:	e7f5      	b.n	8023654 <cosf+0x5c>
 8023668:	eddd 0a01 	vldr	s1, [sp, #4]
 802366c:	ed9d 0a00 	vldr	s0, [sp]
 8023670:	2001      	movs	r0, #1
 8023672:	f002 f891 	bl	8025798 <__kernel_sinf>
 8023676:	e7d3      	b.n	8023620 <cosf+0x28>
 8023678:	3f490fd8 	.word	0x3f490fd8
 802367c:	00000000 	.word	0x00000000

08023680 <lrintf>:
 8023680:	ee10 3a10 	vmov	r3, s0
 8023684:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023688:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 802368c:	281e      	cmp	r0, #30
 802368e:	b082      	sub	sp, #8
 8023690:	dc2e      	bgt.n	80236f0 <lrintf+0x70>
 8023692:	1c41      	adds	r1, r0, #1
 8023694:	da02      	bge.n	802369c <lrintf+0x1c>
 8023696:	2000      	movs	r0, #0
 8023698:	b002      	add	sp, #8
 802369a:	4770      	bx	lr
 802369c:	2816      	cmp	r0, #22
 802369e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80236a2:	dd09      	ble.n	80236b8 <lrintf+0x38>
 80236a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80236a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80236ac:	3a96      	subs	r2, #150	; 0x96
 80236ae:	4090      	lsls	r0, r2
 80236b0:	2900      	cmp	r1, #0
 80236b2:	d0f1      	beq.n	8023698 <lrintf+0x18>
 80236b4:	4240      	negs	r0, r0
 80236b6:	e7ef      	b.n	8023698 <lrintf+0x18>
 80236b8:	4b10      	ldr	r3, [pc, #64]	; (80236fc <lrintf+0x7c>)
 80236ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80236be:	ed93 7a00 	vldr	s14, [r3]
 80236c2:	ee37 0a00 	vadd.f32	s0, s14, s0
 80236c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80236ca:	eddd 7a01 	vldr	s15, [sp, #4]
 80236ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80236d2:	ee17 3a90 	vmov	r3, s15
 80236d6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80236da:	d0dc      	beq.n	8023696 <lrintf+0x16>
 80236dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80236e0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80236e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80236e8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80236ec:	40d8      	lsrs	r0, r3
 80236ee:	e7df      	b.n	80236b0 <lrintf+0x30>
 80236f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80236f4:	ee17 0a90 	vmov	r0, s15
 80236f8:	e7ce      	b.n	8023698 <lrintf+0x18>
 80236fa:	bf00      	nop
 80236fc:	080297f0 	.word	0x080297f0

08023700 <sinf>:
 8023700:	ee10 3a10 	vmov	r3, s0
 8023704:	b507      	push	{r0, r1, r2, lr}
 8023706:	4a1f      	ldr	r2, [pc, #124]	; (8023784 <sinf+0x84>)
 8023708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802370c:	4293      	cmp	r3, r2
 802370e:	dc07      	bgt.n	8023720 <sinf+0x20>
 8023710:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8023788 <sinf+0x88>
 8023714:	2000      	movs	r0, #0
 8023716:	b003      	add	sp, #12
 8023718:	f85d eb04 	ldr.w	lr, [sp], #4
 802371c:	f002 b83c 	b.w	8025798 <__kernel_sinf>
 8023720:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023724:	db04      	blt.n	8023730 <sinf+0x30>
 8023726:	ee30 0a40 	vsub.f32	s0, s0, s0
 802372a:	b003      	add	sp, #12
 802372c:	f85d fb04 	ldr.w	pc, [sp], #4
 8023730:	4668      	mov	r0, sp
 8023732:	f000 ff43 	bl	80245bc <__ieee754_rem_pio2f>
 8023736:	f000 0003 	and.w	r0, r0, #3
 802373a:	2801      	cmp	r0, #1
 802373c:	d00a      	beq.n	8023754 <sinf+0x54>
 802373e:	2802      	cmp	r0, #2
 8023740:	d00f      	beq.n	8023762 <sinf+0x62>
 8023742:	b9c0      	cbnz	r0, 8023776 <sinf+0x76>
 8023744:	eddd 0a01 	vldr	s1, [sp, #4]
 8023748:	ed9d 0a00 	vldr	s0, [sp]
 802374c:	2001      	movs	r0, #1
 802374e:	f002 f823 	bl	8025798 <__kernel_sinf>
 8023752:	e7ea      	b.n	802372a <sinf+0x2a>
 8023754:	eddd 0a01 	vldr	s1, [sp, #4]
 8023758:	ed9d 0a00 	vldr	s0, [sp]
 802375c:	f001 fd46 	bl	80251ec <__kernel_cosf>
 8023760:	e7e3      	b.n	802372a <sinf+0x2a>
 8023762:	eddd 0a01 	vldr	s1, [sp, #4]
 8023766:	ed9d 0a00 	vldr	s0, [sp]
 802376a:	2001      	movs	r0, #1
 802376c:	f002 f814 	bl	8025798 <__kernel_sinf>
 8023770:	eeb1 0a40 	vneg.f32	s0, s0
 8023774:	e7d9      	b.n	802372a <sinf+0x2a>
 8023776:	eddd 0a01 	vldr	s1, [sp, #4]
 802377a:	ed9d 0a00 	vldr	s0, [sp]
 802377e:	f001 fd35 	bl	80251ec <__kernel_cosf>
 8023782:	e7f5      	b.n	8023770 <sinf+0x70>
 8023784:	3f490fd8 	.word	0x3f490fd8
 8023788:	00000000 	.word	0x00000000

0802378c <acosf>:
 802378c:	b508      	push	{r3, lr}
 802378e:	ed2d 8b02 	vpush	{d8}
 8023792:	eeb0 8a40 	vmov.f32	s16, s0
 8023796:	f000 faab 	bl	8023cf0 <__ieee754_acosf>
 802379a:	eeb4 8a48 	vcmp.f32	s16, s16
 802379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237a2:	eef0 8a40 	vmov.f32	s17, s0
 80237a6:	d615      	bvs.n	80237d4 <acosf+0x48>
 80237a8:	eeb0 0a48 	vmov.f32	s0, s16
 80237ac:	f002 fa42 	bl	8025c34 <fabsf>
 80237b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80237b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80237b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237bc:	dd0a      	ble.n	80237d4 <acosf+0x48>
 80237be:	f7ff fbf5 	bl	8022fac <__errno>
 80237c2:	ecbd 8b02 	vpop	{d8}
 80237c6:	2321      	movs	r3, #33	; 0x21
 80237c8:	6003      	str	r3, [r0, #0]
 80237ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80237ce:	4804      	ldr	r0, [pc, #16]	; (80237e0 <acosf+0x54>)
 80237d0:	f002 ba86 	b.w	8025ce0 <nanf>
 80237d4:	eeb0 0a68 	vmov.f32	s0, s17
 80237d8:	ecbd 8b02 	vpop	{d8}
 80237dc:	bd08      	pop	{r3, pc}
 80237de:	bf00      	nop
 80237e0:	080297f8 	.word	0x080297f8

080237e4 <atan2f>:
 80237e4:	f000 bb7c 	b.w	8023ee0 <__ieee754_atan2f>

080237e8 <powf>:
 80237e8:	b508      	push	{r3, lr}
 80237ea:	ed2d 8b04 	vpush	{d8-d9}
 80237ee:	eeb0 8a60 	vmov.f32	s16, s1
 80237f2:	eeb0 9a40 	vmov.f32	s18, s0
 80237f6:	f000 fc13 	bl	8024020 <__ieee754_powf>
 80237fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80237fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023802:	eef0 8a40 	vmov.f32	s17, s0
 8023806:	d63e      	bvs.n	8023886 <powf+0x9e>
 8023808:	eeb5 9a40 	vcmp.f32	s18, #0.0
 802380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023810:	d112      	bne.n	8023838 <powf+0x50>
 8023812:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802381a:	d039      	beq.n	8023890 <powf+0xa8>
 802381c:	eeb0 0a48 	vmov.f32	s0, s16
 8023820:	f002 fa0f 	bl	8025c42 <finitef>
 8023824:	b378      	cbz	r0, 8023886 <powf+0x9e>
 8023826:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802382e:	d52a      	bpl.n	8023886 <powf+0x9e>
 8023830:	f7ff fbbc 	bl	8022fac <__errno>
 8023834:	2322      	movs	r3, #34	; 0x22
 8023836:	e014      	b.n	8023862 <powf+0x7a>
 8023838:	f002 fa03 	bl	8025c42 <finitef>
 802383c:	b998      	cbnz	r0, 8023866 <powf+0x7e>
 802383e:	eeb0 0a49 	vmov.f32	s0, s18
 8023842:	f002 f9fe 	bl	8025c42 <finitef>
 8023846:	b170      	cbz	r0, 8023866 <powf+0x7e>
 8023848:	eeb0 0a48 	vmov.f32	s0, s16
 802384c:	f002 f9f9 	bl	8025c42 <finitef>
 8023850:	b148      	cbz	r0, 8023866 <powf+0x7e>
 8023852:	eef4 8a68 	vcmp.f32	s17, s17
 8023856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802385a:	d7e9      	bvc.n	8023830 <powf+0x48>
 802385c:	f7ff fba6 	bl	8022fac <__errno>
 8023860:	2321      	movs	r3, #33	; 0x21
 8023862:	6003      	str	r3, [r0, #0]
 8023864:	e00f      	b.n	8023886 <powf+0x9e>
 8023866:	eef5 8a40 	vcmp.f32	s17, #0.0
 802386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802386e:	d10a      	bne.n	8023886 <powf+0x9e>
 8023870:	eeb0 0a49 	vmov.f32	s0, s18
 8023874:	f002 f9e5 	bl	8025c42 <finitef>
 8023878:	b128      	cbz	r0, 8023886 <powf+0x9e>
 802387a:	eeb0 0a48 	vmov.f32	s0, s16
 802387e:	f002 f9e0 	bl	8025c42 <finitef>
 8023882:	2800      	cmp	r0, #0
 8023884:	d1d4      	bne.n	8023830 <powf+0x48>
 8023886:	eeb0 0a68 	vmov.f32	s0, s17
 802388a:	ecbd 8b04 	vpop	{d8-d9}
 802388e:	bd08      	pop	{r3, pc}
 8023890:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8023894:	e7f7      	b.n	8023886 <powf+0x9e>
	...

08023898 <sqrtf>:
 8023898:	b508      	push	{r3, lr}
 802389a:	ed2d 8b02 	vpush	{d8}
 802389e:	eeb0 8a40 	vmov.f32	s16, s0
 80238a2:	f000 ffc7 	bl	8024834 <__ieee754_sqrtf>
 80238a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80238aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238ae:	d60c      	bvs.n	80238ca <sqrtf+0x32>
 80238b0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80238d0 <sqrtf+0x38>
 80238b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80238b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238bc:	d505      	bpl.n	80238ca <sqrtf+0x32>
 80238be:	f7ff fb75 	bl	8022fac <__errno>
 80238c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80238c6:	2321      	movs	r3, #33	; 0x21
 80238c8:	6003      	str	r3, [r0, #0]
 80238ca:	ecbd 8b02 	vpop	{d8}
 80238ce:	bd08      	pop	{r3, pc}
	...

080238d8 <__ieee754_rem_pio2>:
 80238d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238dc:	ed2d 8b02 	vpush	{d8}
 80238e0:	ec55 4b10 	vmov	r4, r5, d0
 80238e4:	4bca      	ldr	r3, [pc, #808]	; (8023c10 <__ieee754_rem_pio2+0x338>)
 80238e6:	b08b      	sub	sp, #44	; 0x2c
 80238e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80238ec:	4598      	cmp	r8, r3
 80238ee:	4682      	mov	sl, r0
 80238f0:	9502      	str	r5, [sp, #8]
 80238f2:	dc08      	bgt.n	8023906 <__ieee754_rem_pio2+0x2e>
 80238f4:	2200      	movs	r2, #0
 80238f6:	2300      	movs	r3, #0
 80238f8:	ed80 0b00 	vstr	d0, [r0]
 80238fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023900:	f04f 0b00 	mov.w	fp, #0
 8023904:	e028      	b.n	8023958 <__ieee754_rem_pio2+0x80>
 8023906:	4bc3      	ldr	r3, [pc, #780]	; (8023c14 <__ieee754_rem_pio2+0x33c>)
 8023908:	4598      	cmp	r8, r3
 802390a:	dc78      	bgt.n	80239fe <__ieee754_rem_pio2+0x126>
 802390c:	9b02      	ldr	r3, [sp, #8]
 802390e:	4ec2      	ldr	r6, [pc, #776]	; (8023c18 <__ieee754_rem_pio2+0x340>)
 8023910:	2b00      	cmp	r3, #0
 8023912:	ee10 0a10 	vmov	r0, s0
 8023916:	a3b0      	add	r3, pc, #704	; (adr r3, 8023bd8 <__ieee754_rem_pio2+0x300>)
 8023918:	e9d3 2300 	ldrd	r2, r3, [r3]
 802391c:	4629      	mov	r1, r5
 802391e:	dd39      	ble.n	8023994 <__ieee754_rem_pio2+0xbc>
 8023920:	f7dc fc66 	bl	80001f0 <__aeabi_dsub>
 8023924:	45b0      	cmp	r8, r6
 8023926:	4604      	mov	r4, r0
 8023928:	460d      	mov	r5, r1
 802392a:	d01b      	beq.n	8023964 <__ieee754_rem_pio2+0x8c>
 802392c:	a3ac      	add	r3, pc, #688	; (adr r3, 8023be0 <__ieee754_rem_pio2+0x308>)
 802392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023932:	f7dc fc5d 	bl	80001f0 <__aeabi_dsub>
 8023936:	4602      	mov	r2, r0
 8023938:	460b      	mov	r3, r1
 802393a:	e9ca 2300 	strd	r2, r3, [sl]
 802393e:	4620      	mov	r0, r4
 8023940:	4629      	mov	r1, r5
 8023942:	f7dc fc55 	bl	80001f0 <__aeabi_dsub>
 8023946:	a3a6      	add	r3, pc, #664	; (adr r3, 8023be0 <__ieee754_rem_pio2+0x308>)
 8023948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802394c:	f7dc fc50 	bl	80001f0 <__aeabi_dsub>
 8023950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023954:	f04f 0b01 	mov.w	fp, #1
 8023958:	4658      	mov	r0, fp
 802395a:	b00b      	add	sp, #44	; 0x2c
 802395c:	ecbd 8b02 	vpop	{d8}
 8023960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023964:	a3a0      	add	r3, pc, #640	; (adr r3, 8023be8 <__ieee754_rem_pio2+0x310>)
 8023966:	e9d3 2300 	ldrd	r2, r3, [r3]
 802396a:	f7dc fc41 	bl	80001f0 <__aeabi_dsub>
 802396e:	a3a0      	add	r3, pc, #640	; (adr r3, 8023bf0 <__ieee754_rem_pio2+0x318>)
 8023970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023974:	4604      	mov	r4, r0
 8023976:	460d      	mov	r5, r1
 8023978:	f7dc fc3a 	bl	80001f0 <__aeabi_dsub>
 802397c:	4602      	mov	r2, r0
 802397e:	460b      	mov	r3, r1
 8023980:	e9ca 2300 	strd	r2, r3, [sl]
 8023984:	4620      	mov	r0, r4
 8023986:	4629      	mov	r1, r5
 8023988:	f7dc fc32 	bl	80001f0 <__aeabi_dsub>
 802398c:	a398      	add	r3, pc, #608	; (adr r3, 8023bf0 <__ieee754_rem_pio2+0x318>)
 802398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023992:	e7db      	b.n	802394c <__ieee754_rem_pio2+0x74>
 8023994:	f7dc fc2e 	bl	80001f4 <__adddf3>
 8023998:	45b0      	cmp	r8, r6
 802399a:	4604      	mov	r4, r0
 802399c:	460d      	mov	r5, r1
 802399e:	d016      	beq.n	80239ce <__ieee754_rem_pio2+0xf6>
 80239a0:	a38f      	add	r3, pc, #572	; (adr r3, 8023be0 <__ieee754_rem_pio2+0x308>)
 80239a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239a6:	f7dc fc25 	bl	80001f4 <__adddf3>
 80239aa:	4602      	mov	r2, r0
 80239ac:	460b      	mov	r3, r1
 80239ae:	e9ca 2300 	strd	r2, r3, [sl]
 80239b2:	4620      	mov	r0, r4
 80239b4:	4629      	mov	r1, r5
 80239b6:	f7dc fc1b 	bl	80001f0 <__aeabi_dsub>
 80239ba:	a389      	add	r3, pc, #548	; (adr r3, 8023be0 <__ieee754_rem_pio2+0x308>)
 80239bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239c0:	f7dc fc18 	bl	80001f4 <__adddf3>
 80239c4:	f04f 3bff 	mov.w	fp, #4294967295
 80239c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80239cc:	e7c4      	b.n	8023958 <__ieee754_rem_pio2+0x80>
 80239ce:	a386      	add	r3, pc, #536	; (adr r3, 8023be8 <__ieee754_rem_pio2+0x310>)
 80239d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239d4:	f7dc fc0e 	bl	80001f4 <__adddf3>
 80239d8:	a385      	add	r3, pc, #532	; (adr r3, 8023bf0 <__ieee754_rem_pio2+0x318>)
 80239da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239de:	4604      	mov	r4, r0
 80239e0:	460d      	mov	r5, r1
 80239e2:	f7dc fc07 	bl	80001f4 <__adddf3>
 80239e6:	4602      	mov	r2, r0
 80239e8:	460b      	mov	r3, r1
 80239ea:	e9ca 2300 	strd	r2, r3, [sl]
 80239ee:	4620      	mov	r0, r4
 80239f0:	4629      	mov	r1, r5
 80239f2:	f7dc fbfd 	bl	80001f0 <__aeabi_dsub>
 80239f6:	a37e      	add	r3, pc, #504	; (adr r3, 8023bf0 <__ieee754_rem_pio2+0x318>)
 80239f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239fc:	e7e0      	b.n	80239c0 <__ieee754_rem_pio2+0xe8>
 80239fe:	4b87      	ldr	r3, [pc, #540]	; (8023c1c <__ieee754_rem_pio2+0x344>)
 8023a00:	4598      	cmp	r8, r3
 8023a02:	f300 80d9 	bgt.w	8023bb8 <__ieee754_rem_pio2+0x2e0>
 8023a06:	f001 ff31 	bl	802586c <fabs>
 8023a0a:	ec55 4b10 	vmov	r4, r5, d0
 8023a0e:	ee10 0a10 	vmov	r0, s0
 8023a12:	a379      	add	r3, pc, #484	; (adr r3, 8023bf8 <__ieee754_rem_pio2+0x320>)
 8023a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a18:	4629      	mov	r1, r5
 8023a1a:	f7dc fda1 	bl	8000560 <__aeabi_dmul>
 8023a1e:	4b80      	ldr	r3, [pc, #512]	; (8023c20 <__ieee754_rem_pio2+0x348>)
 8023a20:	2200      	movs	r2, #0
 8023a22:	f7dc fbe7 	bl	80001f4 <__adddf3>
 8023a26:	f7dd f835 	bl	8000a94 <__aeabi_d2iz>
 8023a2a:	4683      	mov	fp, r0
 8023a2c:	f7dc fd2e 	bl	800048c <__aeabi_i2d>
 8023a30:	4602      	mov	r2, r0
 8023a32:	460b      	mov	r3, r1
 8023a34:	ec43 2b18 	vmov	d8, r2, r3
 8023a38:	a367      	add	r3, pc, #412	; (adr r3, 8023bd8 <__ieee754_rem_pio2+0x300>)
 8023a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a3e:	f7dc fd8f 	bl	8000560 <__aeabi_dmul>
 8023a42:	4602      	mov	r2, r0
 8023a44:	460b      	mov	r3, r1
 8023a46:	4620      	mov	r0, r4
 8023a48:	4629      	mov	r1, r5
 8023a4a:	f7dc fbd1 	bl	80001f0 <__aeabi_dsub>
 8023a4e:	a364      	add	r3, pc, #400	; (adr r3, 8023be0 <__ieee754_rem_pio2+0x308>)
 8023a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a54:	4606      	mov	r6, r0
 8023a56:	460f      	mov	r7, r1
 8023a58:	ec51 0b18 	vmov	r0, r1, d8
 8023a5c:	f7dc fd80 	bl	8000560 <__aeabi_dmul>
 8023a60:	f1bb 0f1f 	cmp.w	fp, #31
 8023a64:	4604      	mov	r4, r0
 8023a66:	460d      	mov	r5, r1
 8023a68:	dc0d      	bgt.n	8023a86 <__ieee754_rem_pio2+0x1ae>
 8023a6a:	4b6e      	ldr	r3, [pc, #440]	; (8023c24 <__ieee754_rem_pio2+0x34c>)
 8023a6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023a74:	4543      	cmp	r3, r8
 8023a76:	d006      	beq.n	8023a86 <__ieee754_rem_pio2+0x1ae>
 8023a78:	4622      	mov	r2, r4
 8023a7a:	462b      	mov	r3, r5
 8023a7c:	4630      	mov	r0, r6
 8023a7e:	4639      	mov	r1, r7
 8023a80:	f7dc fbb6 	bl	80001f0 <__aeabi_dsub>
 8023a84:	e00f      	b.n	8023aa6 <__ieee754_rem_pio2+0x1ce>
 8023a86:	462b      	mov	r3, r5
 8023a88:	4622      	mov	r2, r4
 8023a8a:	4630      	mov	r0, r6
 8023a8c:	4639      	mov	r1, r7
 8023a8e:	f7dc fbaf 	bl	80001f0 <__aeabi_dsub>
 8023a92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023a96:	9303      	str	r3, [sp, #12]
 8023a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023a9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023aa0:	f1b8 0f10 	cmp.w	r8, #16
 8023aa4:	dc02      	bgt.n	8023aac <__ieee754_rem_pio2+0x1d4>
 8023aa6:	e9ca 0100 	strd	r0, r1, [sl]
 8023aaa:	e039      	b.n	8023b20 <__ieee754_rem_pio2+0x248>
 8023aac:	a34e      	add	r3, pc, #312	; (adr r3, 8023be8 <__ieee754_rem_pio2+0x310>)
 8023aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ab2:	ec51 0b18 	vmov	r0, r1, d8
 8023ab6:	f7dc fd53 	bl	8000560 <__aeabi_dmul>
 8023aba:	4604      	mov	r4, r0
 8023abc:	460d      	mov	r5, r1
 8023abe:	4602      	mov	r2, r0
 8023ac0:	460b      	mov	r3, r1
 8023ac2:	4630      	mov	r0, r6
 8023ac4:	4639      	mov	r1, r7
 8023ac6:	f7dc fb93 	bl	80001f0 <__aeabi_dsub>
 8023aca:	4602      	mov	r2, r0
 8023acc:	460b      	mov	r3, r1
 8023ace:	4680      	mov	r8, r0
 8023ad0:	4689      	mov	r9, r1
 8023ad2:	4630      	mov	r0, r6
 8023ad4:	4639      	mov	r1, r7
 8023ad6:	f7dc fb8b 	bl	80001f0 <__aeabi_dsub>
 8023ada:	4622      	mov	r2, r4
 8023adc:	462b      	mov	r3, r5
 8023ade:	f7dc fb87 	bl	80001f0 <__aeabi_dsub>
 8023ae2:	a343      	add	r3, pc, #268	; (adr r3, 8023bf0 <__ieee754_rem_pio2+0x318>)
 8023ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ae8:	4604      	mov	r4, r0
 8023aea:	460d      	mov	r5, r1
 8023aec:	ec51 0b18 	vmov	r0, r1, d8
 8023af0:	f7dc fd36 	bl	8000560 <__aeabi_dmul>
 8023af4:	4622      	mov	r2, r4
 8023af6:	462b      	mov	r3, r5
 8023af8:	f7dc fb7a 	bl	80001f0 <__aeabi_dsub>
 8023afc:	4602      	mov	r2, r0
 8023afe:	460b      	mov	r3, r1
 8023b00:	4604      	mov	r4, r0
 8023b02:	460d      	mov	r5, r1
 8023b04:	4640      	mov	r0, r8
 8023b06:	4649      	mov	r1, r9
 8023b08:	f7dc fb72 	bl	80001f0 <__aeabi_dsub>
 8023b0c:	9a03      	ldr	r2, [sp, #12]
 8023b0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023b12:	1ad3      	subs	r3, r2, r3
 8023b14:	2b31      	cmp	r3, #49	; 0x31
 8023b16:	dc24      	bgt.n	8023b62 <__ieee754_rem_pio2+0x28a>
 8023b18:	e9ca 0100 	strd	r0, r1, [sl]
 8023b1c:	4646      	mov	r6, r8
 8023b1e:	464f      	mov	r7, r9
 8023b20:	e9da 8900 	ldrd	r8, r9, [sl]
 8023b24:	4630      	mov	r0, r6
 8023b26:	4642      	mov	r2, r8
 8023b28:	464b      	mov	r3, r9
 8023b2a:	4639      	mov	r1, r7
 8023b2c:	f7dc fb60 	bl	80001f0 <__aeabi_dsub>
 8023b30:	462b      	mov	r3, r5
 8023b32:	4622      	mov	r2, r4
 8023b34:	f7dc fb5c 	bl	80001f0 <__aeabi_dsub>
 8023b38:	9b02      	ldr	r3, [sp, #8]
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023b40:	f6bf af0a 	bge.w	8023958 <__ieee754_rem_pio2+0x80>
 8023b44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023b48:	f8ca 3004 	str.w	r3, [sl, #4]
 8023b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023b50:	f8ca 8000 	str.w	r8, [sl]
 8023b54:	f8ca 0008 	str.w	r0, [sl, #8]
 8023b58:	f8ca 300c 	str.w	r3, [sl, #12]
 8023b5c:	f1cb 0b00 	rsb	fp, fp, #0
 8023b60:	e6fa      	b.n	8023958 <__ieee754_rem_pio2+0x80>
 8023b62:	a327      	add	r3, pc, #156	; (adr r3, 8023c00 <__ieee754_rem_pio2+0x328>)
 8023b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b68:	ec51 0b18 	vmov	r0, r1, d8
 8023b6c:	f7dc fcf8 	bl	8000560 <__aeabi_dmul>
 8023b70:	4604      	mov	r4, r0
 8023b72:	460d      	mov	r5, r1
 8023b74:	4602      	mov	r2, r0
 8023b76:	460b      	mov	r3, r1
 8023b78:	4640      	mov	r0, r8
 8023b7a:	4649      	mov	r1, r9
 8023b7c:	f7dc fb38 	bl	80001f0 <__aeabi_dsub>
 8023b80:	4602      	mov	r2, r0
 8023b82:	460b      	mov	r3, r1
 8023b84:	4606      	mov	r6, r0
 8023b86:	460f      	mov	r7, r1
 8023b88:	4640      	mov	r0, r8
 8023b8a:	4649      	mov	r1, r9
 8023b8c:	f7dc fb30 	bl	80001f0 <__aeabi_dsub>
 8023b90:	4622      	mov	r2, r4
 8023b92:	462b      	mov	r3, r5
 8023b94:	f7dc fb2c 	bl	80001f0 <__aeabi_dsub>
 8023b98:	a31b      	add	r3, pc, #108	; (adr r3, 8023c08 <__ieee754_rem_pio2+0x330>)
 8023b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b9e:	4604      	mov	r4, r0
 8023ba0:	460d      	mov	r5, r1
 8023ba2:	ec51 0b18 	vmov	r0, r1, d8
 8023ba6:	f7dc fcdb 	bl	8000560 <__aeabi_dmul>
 8023baa:	4622      	mov	r2, r4
 8023bac:	462b      	mov	r3, r5
 8023bae:	f7dc fb1f 	bl	80001f0 <__aeabi_dsub>
 8023bb2:	4604      	mov	r4, r0
 8023bb4:	460d      	mov	r5, r1
 8023bb6:	e75f      	b.n	8023a78 <__ieee754_rem_pio2+0x1a0>
 8023bb8:	4b1b      	ldr	r3, [pc, #108]	; (8023c28 <__ieee754_rem_pio2+0x350>)
 8023bba:	4598      	cmp	r8, r3
 8023bbc:	dd36      	ble.n	8023c2c <__ieee754_rem_pio2+0x354>
 8023bbe:	ee10 2a10 	vmov	r2, s0
 8023bc2:	462b      	mov	r3, r5
 8023bc4:	4620      	mov	r0, r4
 8023bc6:	4629      	mov	r1, r5
 8023bc8:	f7dc fb12 	bl	80001f0 <__aeabi_dsub>
 8023bcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023bd0:	e9ca 0100 	strd	r0, r1, [sl]
 8023bd4:	e694      	b.n	8023900 <__ieee754_rem_pio2+0x28>
 8023bd6:	bf00      	nop
 8023bd8:	54400000 	.word	0x54400000
 8023bdc:	3ff921fb 	.word	0x3ff921fb
 8023be0:	1a626331 	.word	0x1a626331
 8023be4:	3dd0b461 	.word	0x3dd0b461
 8023be8:	1a600000 	.word	0x1a600000
 8023bec:	3dd0b461 	.word	0x3dd0b461
 8023bf0:	2e037073 	.word	0x2e037073
 8023bf4:	3ba3198a 	.word	0x3ba3198a
 8023bf8:	6dc9c883 	.word	0x6dc9c883
 8023bfc:	3fe45f30 	.word	0x3fe45f30
 8023c00:	2e000000 	.word	0x2e000000
 8023c04:	3ba3198a 	.word	0x3ba3198a
 8023c08:	252049c1 	.word	0x252049c1
 8023c0c:	397b839a 	.word	0x397b839a
 8023c10:	3fe921fb 	.word	0x3fe921fb
 8023c14:	4002d97b 	.word	0x4002d97b
 8023c18:	3ff921fb 	.word	0x3ff921fb
 8023c1c:	413921fb 	.word	0x413921fb
 8023c20:	3fe00000 	.word	0x3fe00000
 8023c24:	080297fc 	.word	0x080297fc
 8023c28:	7fefffff 	.word	0x7fefffff
 8023c2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8023c30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8023c34:	ee10 0a10 	vmov	r0, s0
 8023c38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8023c3c:	ee10 6a10 	vmov	r6, s0
 8023c40:	460f      	mov	r7, r1
 8023c42:	f7dc ff27 	bl	8000a94 <__aeabi_d2iz>
 8023c46:	f7dc fc21 	bl	800048c <__aeabi_i2d>
 8023c4a:	4602      	mov	r2, r0
 8023c4c:	460b      	mov	r3, r1
 8023c4e:	4630      	mov	r0, r6
 8023c50:	4639      	mov	r1, r7
 8023c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023c56:	f7dc facb 	bl	80001f0 <__aeabi_dsub>
 8023c5a:	4b23      	ldr	r3, [pc, #140]	; (8023ce8 <__ieee754_rem_pio2+0x410>)
 8023c5c:	2200      	movs	r2, #0
 8023c5e:	f7dc fc7f 	bl	8000560 <__aeabi_dmul>
 8023c62:	460f      	mov	r7, r1
 8023c64:	4606      	mov	r6, r0
 8023c66:	f7dc ff15 	bl	8000a94 <__aeabi_d2iz>
 8023c6a:	f7dc fc0f 	bl	800048c <__aeabi_i2d>
 8023c6e:	4602      	mov	r2, r0
 8023c70:	460b      	mov	r3, r1
 8023c72:	4630      	mov	r0, r6
 8023c74:	4639      	mov	r1, r7
 8023c76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023c7a:	f7dc fab9 	bl	80001f0 <__aeabi_dsub>
 8023c7e:	4b1a      	ldr	r3, [pc, #104]	; (8023ce8 <__ieee754_rem_pio2+0x410>)
 8023c80:	2200      	movs	r2, #0
 8023c82:	f7dc fc6d 	bl	8000560 <__aeabi_dmul>
 8023c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023c8a:	ad04      	add	r5, sp, #16
 8023c8c:	f04f 0803 	mov.w	r8, #3
 8023c90:	46a9      	mov	r9, r5
 8023c92:	2600      	movs	r6, #0
 8023c94:	2700      	movs	r7, #0
 8023c96:	4632      	mov	r2, r6
 8023c98:	463b      	mov	r3, r7
 8023c9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8023c9e:	46c3      	mov	fp, r8
 8023ca0:	3d08      	subs	r5, #8
 8023ca2:	f108 38ff 	add.w	r8, r8, #4294967295
 8023ca6:	f7dc fec3 	bl	8000a30 <__aeabi_dcmpeq>
 8023caa:	2800      	cmp	r0, #0
 8023cac:	d1f3      	bne.n	8023c96 <__ieee754_rem_pio2+0x3be>
 8023cae:	4b0f      	ldr	r3, [pc, #60]	; (8023cec <__ieee754_rem_pio2+0x414>)
 8023cb0:	9301      	str	r3, [sp, #4]
 8023cb2:	2302      	movs	r3, #2
 8023cb4:	9300      	str	r3, [sp, #0]
 8023cb6:	4622      	mov	r2, r4
 8023cb8:	465b      	mov	r3, fp
 8023cba:	4651      	mov	r1, sl
 8023cbc:	4648      	mov	r0, r9
 8023cbe:	f000 fe87 	bl	80249d0 <__kernel_rem_pio2>
 8023cc2:	9b02      	ldr	r3, [sp, #8]
 8023cc4:	2b00      	cmp	r3, #0
 8023cc6:	4683      	mov	fp, r0
 8023cc8:	f6bf ae46 	bge.w	8023958 <__ieee754_rem_pio2+0x80>
 8023ccc:	e9da 2100 	ldrd	r2, r1, [sl]
 8023cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023cd4:	e9ca 2300 	strd	r2, r3, [sl]
 8023cd8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8023cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023ce0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8023ce4:	e73a      	b.n	8023b5c <__ieee754_rem_pio2+0x284>
 8023ce6:	bf00      	nop
 8023ce8:	41700000 	.word	0x41700000
 8023cec:	0802987c 	.word	0x0802987c

08023cf0 <__ieee754_acosf>:
 8023cf0:	b508      	push	{r3, lr}
 8023cf2:	ee10 3a10 	vmov	r3, s0
 8023cf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8023cfa:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8023cfe:	ed2d 8b0c 	vpush	{d8-d13}
 8023d02:	d10a      	bne.n	8023d1a <__ieee754_acosf+0x2a>
 8023d04:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8023e9c <__ieee754_acosf+0x1ac>
 8023d08:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8023ea0 <__ieee754_acosf+0x1b0>
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	bfd8      	it	le
 8023d10:	eeb0 0a48 	vmovle.f32	s0, s16
 8023d14:	ecbd 8b0c 	vpop	{d8-d13}
 8023d18:	bd08      	pop	{r3, pc}
 8023d1a:	dd04      	ble.n	8023d26 <__ieee754_acosf+0x36>
 8023d1c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8023d20:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023d24:	e7f6      	b.n	8023d14 <__ieee754_acosf+0x24>
 8023d26:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8023d2a:	da3c      	bge.n	8023da6 <__ieee754_acosf+0xb6>
 8023d2c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8023d30:	f340 80b1 	ble.w	8023e96 <__ieee754_acosf+0x1a6>
 8023d34:	ee60 7a00 	vmul.f32	s15, s0, s0
 8023d38:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8023ea4 <__ieee754_acosf+0x1b4>
 8023d3c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8023ea8 <__ieee754_acosf+0x1b8>
 8023d40:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8023eac <__ieee754_acosf+0x1bc>
 8023d44:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8023eb0 <__ieee754_acosf+0x1c0>
 8023d48:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8023d4c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8023eb4 <__ieee754_acosf+0x1c4>
 8023d50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023d54:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8023eb8 <__ieee754_acosf+0x1c8>
 8023d58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023d5c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8023ebc <__ieee754_acosf+0x1cc>
 8023d60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023d64:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8023ec0 <__ieee754_acosf+0x1d0>
 8023d68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023d6c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8023ec4 <__ieee754_acosf+0x1d4>
 8023d70:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8023d74:	eddf 6a54 	vldr	s13, [pc, #336]	; 8023ec8 <__ieee754_acosf+0x1d8>
 8023d78:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023d7c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8023ecc <__ieee754_acosf+0x1dc>
 8023d80:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8023d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023d88:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023d94:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023d98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8023ed0 <__ieee754_acosf+0x1e0>
 8023d9c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8023da0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8023da4:	e7b6      	b.n	8023d14 <__ieee754_acosf+0x24>
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	eddf da3e 	vldr	s27, [pc, #248]	; 8023ea4 <__ieee754_acosf+0x1b4>
 8023dac:	eddf ca3e 	vldr	s25, [pc, #248]	; 8023ea8 <__ieee754_acosf+0x1b8>
 8023db0:	ed9f ca40 	vldr	s24, [pc, #256]	; 8023eb4 <__ieee754_acosf+0x1c4>
 8023db4:	eddf ba40 	vldr	s23, [pc, #256]	; 8023eb8 <__ieee754_acosf+0x1c8>
 8023db8:	ed9f ba40 	vldr	s22, [pc, #256]	; 8023ebc <__ieee754_acosf+0x1cc>
 8023dbc:	eddf 8a40 	vldr	s17, [pc, #256]	; 8023ec0 <__ieee754_acosf+0x1d0>
 8023dc0:	ed9f da40 	vldr	s26, [pc, #256]	; 8023ec4 <__ieee754_acosf+0x1d4>
 8023dc4:	eddf aa39 	vldr	s21, [pc, #228]	; 8023eac <__ieee754_acosf+0x1bc>
 8023dc8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8023ec8 <__ieee754_acosf+0x1d8>
 8023dcc:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8023ecc <__ieee754_acosf+0x1dc>
 8023dd0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8023dd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023dd8:	da28      	bge.n	8023e2c <__ieee754_acosf+0x13c>
 8023dda:	ee30 0a09 	vadd.f32	s0, s0, s18
 8023dde:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023de2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8023de6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8023dea:	eeac ca80 	vfma.f32	s24, s25, s0
 8023dee:	eeaa aa80 	vfma.f32	s20, s21, s0
 8023df2:	eeec ba00 	vfma.f32	s23, s24, s0
 8023df6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8023dfa:	eeab ba80 	vfma.f32	s22, s23, s0
 8023dfe:	eea9 9a80 	vfma.f32	s18, s19, s0
 8023e02:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8023e06:	ee68 8a80 	vmul.f32	s17, s17, s0
 8023e0a:	f000 fd13 	bl	8024834 <__ieee754_sqrtf>
 8023e0e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8023e12:	eddf 7a30 	vldr	s15, [pc, #192]	; 8023ed4 <__ieee754_acosf+0x1e4>
 8023e16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023e1a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023e1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023e22:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8023ed8 <__ieee754_acosf+0x1e8>
 8023e26:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8023e2a:	e773      	b.n	8023d14 <__ieee754_acosf+0x24>
 8023e2c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8023e30:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023e34:	eeb0 0a48 	vmov.f32	s0, s16
 8023e38:	f000 fcfc 	bl	8024834 <__ieee754_sqrtf>
 8023e3c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8023e40:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8023e44:	eeac ca88 	vfma.f32	s24, s25, s16
 8023e48:	eeaa aa88 	vfma.f32	s20, s21, s16
 8023e4c:	eeec ba08 	vfma.f32	s23, s24, s16
 8023e50:	ee10 3a10 	vmov	r3, s0
 8023e54:	eeab ba88 	vfma.f32	s22, s23, s16
 8023e58:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023e5c:	f023 030f 	bic.w	r3, r3, #15
 8023e60:	eeea 9a08 	vfma.f32	s19, s20, s16
 8023e64:	ee07 3a90 	vmov	s15, r3
 8023e68:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8023e6c:	eeb0 6a48 	vmov.f32	s12, s16
 8023e70:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8023e74:	eea9 9a88 	vfma.f32	s18, s19, s16
 8023e78:	ee70 6a27 	vadd.f32	s13, s0, s15
 8023e7c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8023e80:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8023e84:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8023e88:	eea0 7a26 	vfma.f32	s14, s0, s13
 8023e8c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8023e90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023e94:	e73e      	b.n	8023d14 <__ieee754_acosf+0x24>
 8023e96:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8023edc <__ieee754_acosf+0x1ec>
 8023e9a:	e73b      	b.n	8023d14 <__ieee754_acosf+0x24>
 8023e9c:	00000000 	.word	0x00000000
 8023ea0:	40490fdb 	.word	0x40490fdb
 8023ea4:	3811ef08 	.word	0x3811ef08
 8023ea8:	3a4f7f04 	.word	0x3a4f7f04
 8023eac:	bf303361 	.word	0xbf303361
 8023eb0:	33a22168 	.word	0x33a22168
 8023eb4:	bd241146 	.word	0xbd241146
 8023eb8:	3e4e0aa8 	.word	0x3e4e0aa8
 8023ebc:	bea6b090 	.word	0xbea6b090
 8023ec0:	3e2aaaab 	.word	0x3e2aaaab
 8023ec4:	3d9dc62e 	.word	0x3d9dc62e
 8023ec8:	4001572d 	.word	0x4001572d
 8023ecc:	c019d139 	.word	0xc019d139
 8023ed0:	3fc90fda 	.word	0x3fc90fda
 8023ed4:	b3a22168 	.word	0xb3a22168
 8023ed8:	40490fda 	.word	0x40490fda
 8023edc:	3fc90fdb 	.word	0x3fc90fdb

08023ee0 <__ieee754_atan2f>:
 8023ee0:	ee10 2a90 	vmov	r2, s1
 8023ee4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8023ee8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023eec:	b510      	push	{r4, lr}
 8023eee:	eef0 7a40 	vmov.f32	s15, s0
 8023ef2:	dc06      	bgt.n	8023f02 <__ieee754_atan2f+0x22>
 8023ef4:	ee10 0a10 	vmov	r0, s0
 8023ef8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8023efc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023f00:	dd04      	ble.n	8023f0c <__ieee754_atan2f+0x2c>
 8023f02:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023f06:	eeb0 0a67 	vmov.f32	s0, s15
 8023f0a:	bd10      	pop	{r4, pc}
 8023f0c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8023f10:	d103      	bne.n	8023f1a <__ieee754_atan2f+0x3a>
 8023f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f16:	f001 bdb9 	b.w	8025a8c <atanf>
 8023f1a:	1794      	asrs	r4, r2, #30
 8023f1c:	f004 0402 	and.w	r4, r4, #2
 8023f20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8023f24:	b943      	cbnz	r3, 8023f38 <__ieee754_atan2f+0x58>
 8023f26:	2c02      	cmp	r4, #2
 8023f28:	d05e      	beq.n	8023fe8 <__ieee754_atan2f+0x108>
 8023f2a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8023ffc <__ieee754_atan2f+0x11c>
 8023f2e:	2c03      	cmp	r4, #3
 8023f30:	bf08      	it	eq
 8023f32:	eef0 7a47 	vmoveq.f32	s15, s14
 8023f36:	e7e6      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023f38:	b941      	cbnz	r1, 8023f4c <__ieee754_atan2f+0x6c>
 8023f3a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8024000 <__ieee754_atan2f+0x120>
 8023f3e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8024004 <__ieee754_atan2f+0x124>
 8023f42:	2800      	cmp	r0, #0
 8023f44:	bfb8      	it	lt
 8023f46:	eef0 7a40 	vmovlt.f32	s15, s0
 8023f4a:	e7dc      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023f4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023f50:	d110      	bne.n	8023f74 <__ieee754_atan2f+0x94>
 8023f52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023f56:	f104 34ff 	add.w	r4, r4, #4294967295
 8023f5a:	d107      	bne.n	8023f6c <__ieee754_atan2f+0x8c>
 8023f5c:	2c02      	cmp	r4, #2
 8023f5e:	d846      	bhi.n	8023fee <__ieee754_atan2f+0x10e>
 8023f60:	4b29      	ldr	r3, [pc, #164]	; (8024008 <__ieee754_atan2f+0x128>)
 8023f62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8023f66:	edd4 7a00 	vldr	s15, [r4]
 8023f6a:	e7cc      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023f6c:	2c02      	cmp	r4, #2
 8023f6e:	d841      	bhi.n	8023ff4 <__ieee754_atan2f+0x114>
 8023f70:	4b26      	ldr	r3, [pc, #152]	; (802400c <__ieee754_atan2f+0x12c>)
 8023f72:	e7f6      	b.n	8023f62 <__ieee754_atan2f+0x82>
 8023f74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023f78:	d0df      	beq.n	8023f3a <__ieee754_atan2f+0x5a>
 8023f7a:	1a5b      	subs	r3, r3, r1
 8023f7c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8023f80:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8023f84:	da1a      	bge.n	8023fbc <__ieee754_atan2f+0xdc>
 8023f86:	2a00      	cmp	r2, #0
 8023f88:	da01      	bge.n	8023f8e <__ieee754_atan2f+0xae>
 8023f8a:	313c      	adds	r1, #60	; 0x3c
 8023f8c:	db19      	blt.n	8023fc2 <__ieee754_atan2f+0xe2>
 8023f8e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8023f92:	f001 fe4f 	bl	8025c34 <fabsf>
 8023f96:	f001 fd79 	bl	8025a8c <atanf>
 8023f9a:	eef0 7a40 	vmov.f32	s15, s0
 8023f9e:	2c01      	cmp	r4, #1
 8023fa0:	d012      	beq.n	8023fc8 <__ieee754_atan2f+0xe8>
 8023fa2:	2c02      	cmp	r4, #2
 8023fa4:	d017      	beq.n	8023fd6 <__ieee754_atan2f+0xf6>
 8023fa6:	2c00      	cmp	r4, #0
 8023fa8:	d0ad      	beq.n	8023f06 <__ieee754_atan2f+0x26>
 8023faa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8024010 <__ieee754_atan2f+0x130>
 8023fae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023fb2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8024014 <__ieee754_atan2f+0x134>
 8023fb6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023fba:	e7a4      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023fbc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8024000 <__ieee754_atan2f+0x120>
 8023fc0:	e7ed      	b.n	8023f9e <__ieee754_atan2f+0xbe>
 8023fc2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8024018 <__ieee754_atan2f+0x138>
 8023fc6:	e7ea      	b.n	8023f9e <__ieee754_atan2f+0xbe>
 8023fc8:	ee17 3a90 	vmov	r3, s15
 8023fcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023fd0:	ee07 3a90 	vmov	s15, r3
 8023fd4:	e797      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023fd6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024010 <__ieee754_atan2f+0x130>
 8023fda:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023fde:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8024014 <__ieee754_atan2f+0x134>
 8023fe2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023fe6:	e78e      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023fe8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8024014 <__ieee754_atan2f+0x134>
 8023fec:	e78b      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023fee:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802401c <__ieee754_atan2f+0x13c>
 8023ff2:	e788      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023ff4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8024018 <__ieee754_atan2f+0x138>
 8023ff8:	e785      	b.n	8023f06 <__ieee754_atan2f+0x26>
 8023ffa:	bf00      	nop
 8023ffc:	c0490fdb 	.word	0xc0490fdb
 8024000:	3fc90fdb 	.word	0x3fc90fdb
 8024004:	bfc90fdb 	.word	0xbfc90fdb
 8024008:	08029984 	.word	0x08029984
 802400c:	08029990 	.word	0x08029990
 8024010:	33bbbd2e 	.word	0x33bbbd2e
 8024014:	40490fdb 	.word	0x40490fdb
 8024018:	00000000 	.word	0x00000000
 802401c:	3f490fdb 	.word	0x3f490fdb

08024020 <__ieee754_powf>:
 8024020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024024:	ee10 4a90 	vmov	r4, s1
 8024028:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 802402c:	ed2d 8b02 	vpush	{d8}
 8024030:	ee10 6a10 	vmov	r6, s0
 8024034:	eeb0 8a40 	vmov.f32	s16, s0
 8024038:	eef0 8a60 	vmov.f32	s17, s1
 802403c:	d10c      	bne.n	8024058 <__ieee754_powf+0x38>
 802403e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8024042:	0076      	lsls	r6, r6, #1
 8024044:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8024048:	f240 8296 	bls.w	8024578 <__ieee754_powf+0x558>
 802404c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8024050:	ecbd 8b02 	vpop	{d8}
 8024054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024058:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802405c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024060:	dcf4      	bgt.n	802404c <__ieee754_powf+0x2c>
 8024062:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024066:	dd08      	ble.n	802407a <__ieee754_powf+0x5a>
 8024068:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 802406c:	d1ee      	bne.n	802404c <__ieee754_powf+0x2c>
 802406e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8024072:	0064      	lsls	r4, r4, #1
 8024074:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8024078:	e7e6      	b.n	8024048 <__ieee754_powf+0x28>
 802407a:	2e00      	cmp	r6, #0
 802407c:	da20      	bge.n	80240c0 <__ieee754_powf+0xa0>
 802407e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8024082:	da2d      	bge.n	80240e0 <__ieee754_powf+0xc0>
 8024084:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8024088:	f2c0 827f 	blt.w	802458a <__ieee754_powf+0x56a>
 802408c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8024090:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024094:	fa48 f703 	asr.w	r7, r8, r3
 8024098:	fa07 f303 	lsl.w	r3, r7, r3
 802409c:	4543      	cmp	r3, r8
 802409e:	f040 8274 	bne.w	802458a <__ieee754_powf+0x56a>
 80240a2:	f007 0701 	and.w	r7, r7, #1
 80240a6:	f1c7 0702 	rsb	r7, r7, #2
 80240aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80240ae:	d11f      	bne.n	80240f0 <__ieee754_powf+0xd0>
 80240b0:	2c00      	cmp	r4, #0
 80240b2:	f280 8267 	bge.w	8024584 <__ieee754_powf+0x564>
 80240b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80240ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80240be:	e7c7      	b.n	8024050 <__ieee754_powf+0x30>
 80240c0:	2700      	movs	r7, #0
 80240c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80240c6:	d1f0      	bne.n	80240aa <__ieee754_powf+0x8a>
 80240c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80240cc:	f000 8254 	beq.w	8024578 <__ieee754_powf+0x558>
 80240d0:	dd08      	ble.n	80240e4 <__ieee754_powf+0xc4>
 80240d2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80243dc <__ieee754_powf+0x3bc>
 80240d6:	2c00      	cmp	r4, #0
 80240d8:	bfa8      	it	ge
 80240da:	eeb0 0a68 	vmovge.f32	s0, s17
 80240de:	e7b7      	b.n	8024050 <__ieee754_powf+0x30>
 80240e0:	2702      	movs	r7, #2
 80240e2:	e7ee      	b.n	80240c2 <__ieee754_powf+0xa2>
 80240e4:	2c00      	cmp	r4, #0
 80240e6:	f280 824a 	bge.w	802457e <__ieee754_powf+0x55e>
 80240ea:	eeb1 0a68 	vneg.f32	s0, s17
 80240ee:	e7af      	b.n	8024050 <__ieee754_powf+0x30>
 80240f0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80240f4:	d102      	bne.n	80240fc <__ieee754_powf+0xdc>
 80240f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80240fa:	e7a9      	b.n	8024050 <__ieee754_powf+0x30>
 80240fc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8024100:	eeb0 0a48 	vmov.f32	s0, s16
 8024104:	d107      	bne.n	8024116 <__ieee754_powf+0xf6>
 8024106:	2e00      	cmp	r6, #0
 8024108:	db05      	blt.n	8024116 <__ieee754_powf+0xf6>
 802410a:	ecbd 8b02 	vpop	{d8}
 802410e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024112:	f000 bb8f 	b.w	8024834 <__ieee754_sqrtf>
 8024116:	f001 fd8d 	bl	8025c34 <fabsf>
 802411a:	b125      	cbz	r5, 8024126 <__ieee754_powf+0x106>
 802411c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8024120:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8024124:	d116      	bne.n	8024154 <__ieee754_powf+0x134>
 8024126:	2c00      	cmp	r4, #0
 8024128:	bfbc      	itt	lt
 802412a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 802412e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8024132:	2e00      	cmp	r6, #0
 8024134:	da8c      	bge.n	8024050 <__ieee754_powf+0x30>
 8024136:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 802413a:	ea55 0307 	orrs.w	r3, r5, r7
 802413e:	d104      	bne.n	802414a <__ieee754_powf+0x12a>
 8024140:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024144:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8024148:	e782      	b.n	8024050 <__ieee754_powf+0x30>
 802414a:	2f01      	cmp	r7, #1
 802414c:	d180      	bne.n	8024050 <__ieee754_powf+0x30>
 802414e:	eeb1 0a40 	vneg.f32	s0, s0
 8024152:	e77d      	b.n	8024050 <__ieee754_powf+0x30>
 8024154:	0ff0      	lsrs	r0, r6, #31
 8024156:	3801      	subs	r0, #1
 8024158:	ea57 0300 	orrs.w	r3, r7, r0
 802415c:	d104      	bne.n	8024168 <__ieee754_powf+0x148>
 802415e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8024162:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8024166:	e773      	b.n	8024050 <__ieee754_powf+0x30>
 8024168:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802416c:	dd74      	ble.n	8024258 <__ieee754_powf+0x238>
 802416e:	4b9c      	ldr	r3, [pc, #624]	; (80243e0 <__ieee754_powf+0x3c0>)
 8024170:	429d      	cmp	r5, r3
 8024172:	dc08      	bgt.n	8024186 <__ieee754_powf+0x166>
 8024174:	2c00      	cmp	r4, #0
 8024176:	da0b      	bge.n	8024190 <__ieee754_powf+0x170>
 8024178:	2000      	movs	r0, #0
 802417a:	ecbd 8b02 	vpop	{d8}
 802417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024182:	f001 bb6d 	b.w	8025860 <__math_oflowf>
 8024186:	4b97      	ldr	r3, [pc, #604]	; (80243e4 <__ieee754_powf+0x3c4>)
 8024188:	429d      	cmp	r5, r3
 802418a:	dd08      	ble.n	802419e <__ieee754_powf+0x17e>
 802418c:	2c00      	cmp	r4, #0
 802418e:	dcf3      	bgt.n	8024178 <__ieee754_powf+0x158>
 8024190:	2000      	movs	r0, #0
 8024192:	ecbd 8b02 	vpop	{d8}
 8024196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802419a:	f001 bb5b 	b.w	8025854 <__math_uflowf>
 802419e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80241a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80241a6:	eddf 6a90 	vldr	s13, [pc, #576]	; 80243e8 <__ieee754_powf+0x3c8>
 80241aa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80241ae:	eee0 6a67 	vfms.f32	s13, s0, s15
 80241b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80241b6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80241ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80241be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80241c2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80243ec <__ieee754_powf+0x3cc>
 80241c6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80241ca:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80243f0 <__ieee754_powf+0x3d0>
 80241ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80241d2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80243f4 <__ieee754_powf+0x3d4>
 80241d6:	eef0 6a67 	vmov.f32	s13, s15
 80241da:	eee0 6a07 	vfma.f32	s13, s0, s14
 80241de:	ee16 3a90 	vmov	r3, s13
 80241e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80241e6:	f023 030f 	bic.w	r3, r3, #15
 80241ea:	ee00 3a90 	vmov	s1, r3
 80241ee:	eee0 0a47 	vfms.f32	s1, s0, s14
 80241f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80241f6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80241fa:	f024 040f 	bic.w	r4, r4, #15
 80241fe:	ee07 4a10 	vmov	s14, r4
 8024202:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8024206:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802420a:	ee07 3a90 	vmov	s15, r3
 802420e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8024212:	3f01      	subs	r7, #1
 8024214:	ea57 0200 	orrs.w	r2, r7, r0
 8024218:	ee07 4a10 	vmov	s14, r4
 802421c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024220:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8024224:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8024228:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 802422c:	ee17 4a10 	vmov	r4, s14
 8024230:	bf08      	it	eq
 8024232:	eeb0 8a40 	vmoveq.f32	s16, s0
 8024236:	2c00      	cmp	r4, #0
 8024238:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802423c:	f340 817e 	ble.w	802453c <__ieee754_powf+0x51c>
 8024240:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8024244:	f340 80f8 	ble.w	8024438 <__ieee754_powf+0x418>
 8024248:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024250:	bf4c      	ite	mi
 8024252:	2001      	movmi	r0, #1
 8024254:	2000      	movpl	r0, #0
 8024256:	e790      	b.n	802417a <__ieee754_powf+0x15a>
 8024258:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 802425c:	bf01      	itttt	eq
 802425e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80243f8 <__ieee754_powf+0x3d8>
 8024262:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8024266:	f06f 0217 	mvneq.w	r2, #23
 802426a:	ee17 5a90 	vmoveq	r5, s15
 802426e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8024272:	bf18      	it	ne
 8024274:	2200      	movne	r2, #0
 8024276:	3b7f      	subs	r3, #127	; 0x7f
 8024278:	4413      	add	r3, r2
 802427a:	4a60      	ldr	r2, [pc, #384]	; (80243fc <__ieee754_powf+0x3dc>)
 802427c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8024280:	4295      	cmp	r5, r2
 8024282:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8024286:	dd06      	ble.n	8024296 <__ieee754_powf+0x276>
 8024288:	4a5d      	ldr	r2, [pc, #372]	; (8024400 <__ieee754_powf+0x3e0>)
 802428a:	4295      	cmp	r5, r2
 802428c:	f340 80a4 	ble.w	80243d8 <__ieee754_powf+0x3b8>
 8024290:	3301      	adds	r3, #1
 8024292:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8024296:	2500      	movs	r5, #0
 8024298:	4a5a      	ldr	r2, [pc, #360]	; (8024404 <__ieee754_powf+0x3e4>)
 802429a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802429e:	ee07 1a90 	vmov	s15, r1
 80242a2:	ed92 7a00 	vldr	s14, [r2]
 80242a6:	4a58      	ldr	r2, [pc, #352]	; (8024408 <__ieee754_powf+0x3e8>)
 80242a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80242ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80242b0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80242b4:	1049      	asrs	r1, r1, #1
 80242b6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80242ba:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80242be:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80242c2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80242c6:	ee06 1a10 	vmov	s12, r1
 80242ca:	ee65 4a26 	vmul.f32	s9, s10, s13
 80242ce:	ee36 7a47 	vsub.f32	s14, s12, s14
 80242d2:	ee14 6a90 	vmov	r6, s9
 80242d6:	4016      	ands	r6, r2
 80242d8:	ee05 6a90 	vmov	s11, r6
 80242dc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80242e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80242e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802440c <__ieee754_powf+0x3ec>
 80242e8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80242ec:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80242f0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80242f4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8024410 <__ieee754_powf+0x3f0>
 80242f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80242fc:	eddf 6a45 	vldr	s13, [pc, #276]	; 8024414 <__ieee754_powf+0x3f4>
 8024300:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024304:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80243e8 <__ieee754_powf+0x3c8>
 8024308:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802430c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8024418 <__ieee754_powf+0x3f8>
 8024310:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024314:	ed9f 7a41 	vldr	s14, [pc, #260]	; 802441c <__ieee754_powf+0x3fc>
 8024318:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802431c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8024320:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8024324:	ee66 6a86 	vmul.f32	s13, s13, s12
 8024328:	eee5 6a07 	vfma.f32	s13, s10, s14
 802432c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8024330:	eef0 7a45 	vmov.f32	s15, s10
 8024334:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802433c:	ee17 1a90 	vmov	r1, s15
 8024340:	4011      	ands	r1, r2
 8024342:	ee07 1a90 	vmov	s15, r1
 8024346:	ee37 7ac5 	vsub.f32	s14, s15, s10
 802434a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 802434e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8024352:	ee27 7a24 	vmul.f32	s14, s14, s9
 8024356:	eea6 7a27 	vfma.f32	s14, s12, s15
 802435a:	eeb0 6a47 	vmov.f32	s12, s14
 802435e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8024362:	ee16 1a10 	vmov	r1, s12
 8024366:	4011      	ands	r1, r2
 8024368:	ee06 1a90 	vmov	s13, r1
 802436c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8024370:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8024420 <__ieee754_powf+0x400>
 8024374:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8024424 <__ieee754_powf+0x404>
 8024378:	ee37 7a66 	vsub.f32	s14, s14, s13
 802437c:	ee06 1a10 	vmov	s12, r1
 8024380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024384:	eddf 7a28 	vldr	s15, [pc, #160]	; 8024428 <__ieee754_powf+0x408>
 8024388:	4928      	ldr	r1, [pc, #160]	; (802442c <__ieee754_powf+0x40c>)
 802438a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802438e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8024392:	edd1 7a00 	vldr	s15, [r1]
 8024396:	ee37 7a27 	vadd.f32	s14, s14, s15
 802439a:	ee07 3a90 	vmov	s15, r3
 802439e:	4b24      	ldr	r3, [pc, #144]	; (8024430 <__ieee754_powf+0x410>)
 80243a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80243a4:	eef0 7a47 	vmov.f32	s15, s14
 80243a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80243ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80243b0:	edd5 0a00 	vldr	s1, [r5]
 80243b4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80243b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80243bc:	ee17 3a90 	vmov	r3, s15
 80243c0:	4013      	ands	r3, r2
 80243c2:	ee07 3a90 	vmov	s15, r3
 80243c6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80243ca:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80243ce:	eee6 6a65 	vfms.f32	s13, s12, s11
 80243d2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80243d6:	e70e      	b.n	80241f6 <__ieee754_powf+0x1d6>
 80243d8:	2501      	movs	r5, #1
 80243da:	e75d      	b.n	8024298 <__ieee754_powf+0x278>
 80243dc:	00000000 	.word	0x00000000
 80243e0:	3f7ffff3 	.word	0x3f7ffff3
 80243e4:	3f800007 	.word	0x3f800007
 80243e8:	3eaaaaab 	.word	0x3eaaaaab
 80243ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80243f0:	36eca570 	.word	0x36eca570
 80243f4:	3fb8aa00 	.word	0x3fb8aa00
 80243f8:	4b800000 	.word	0x4b800000
 80243fc:	001cc471 	.word	0x001cc471
 8024400:	005db3d6 	.word	0x005db3d6
 8024404:	0802999c 	.word	0x0802999c
 8024408:	fffff000 	.word	0xfffff000
 802440c:	3e6c3255 	.word	0x3e6c3255
 8024410:	3e53f142 	.word	0x3e53f142
 8024414:	3e8ba305 	.word	0x3e8ba305
 8024418:	3edb6db7 	.word	0x3edb6db7
 802441c:	3f19999a 	.word	0x3f19999a
 8024420:	3f76384f 	.word	0x3f76384f
 8024424:	3f763800 	.word	0x3f763800
 8024428:	369dc3a0 	.word	0x369dc3a0
 802442c:	080299ac 	.word	0x080299ac
 8024430:	080299a4 	.word	0x080299a4
 8024434:	3338aa3c 	.word	0x3338aa3c
 8024438:	f040 8095 	bne.w	8024566 <__ieee754_powf+0x546>
 802443c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8024434 <__ieee754_powf+0x414>
 8024440:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024444:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8024448:	eef4 6ac7 	vcmpe.f32	s13, s14
 802444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024450:	f73f aefa 	bgt.w	8024248 <__ieee754_powf+0x228>
 8024454:	15db      	asrs	r3, r3, #23
 8024456:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 802445a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802445e:	4103      	asrs	r3, r0
 8024460:	4423      	add	r3, r4
 8024462:	494b      	ldr	r1, [pc, #300]	; (8024590 <__ieee754_powf+0x570>)
 8024464:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024468:	3a7f      	subs	r2, #127	; 0x7f
 802446a:	4111      	asrs	r1, r2
 802446c:	ea23 0101 	bic.w	r1, r3, r1
 8024470:	ee07 1a10 	vmov	s14, r1
 8024474:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024478:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802447c:	f1c2 0217 	rsb	r2, r2, #23
 8024480:	4110      	asrs	r0, r2
 8024482:	2c00      	cmp	r4, #0
 8024484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024488:	bfb8      	it	lt
 802448a:	4240      	neglt	r0, r0
 802448c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8024490:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8024594 <__ieee754_powf+0x574>
 8024494:	eddf 6a40 	vldr	s13, [pc, #256]	; 8024598 <__ieee754_powf+0x578>
 8024498:	ee17 3a10 	vmov	r3, s14
 802449c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80244a0:	f023 030f 	bic.w	r3, r3, #15
 80244a4:	ee07 3a10 	vmov	s14, r3
 80244a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80244ac:	ee27 0a00 	vmul.f32	s0, s14, s0
 80244b0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80244b4:	eddf 7a39 	vldr	s15, [pc, #228]	; 802459c <__ieee754_powf+0x57c>
 80244b8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80244bc:	eef0 7a40 	vmov.f32	s15, s0
 80244c0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80244c4:	eeb0 6a67 	vmov.f32	s12, s15
 80244c8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80244cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80244d0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80244d4:	eddf 6a32 	vldr	s13, [pc, #200]	; 80245a0 <__ieee754_powf+0x580>
 80244d8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80245a4 <__ieee754_powf+0x584>
 80244dc:	eee7 6a06 	vfma.f32	s13, s14, s12
 80244e0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80245a8 <__ieee754_powf+0x588>
 80244e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80244e8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80245ac <__ieee754_powf+0x58c>
 80244ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 80244f0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80245b0 <__ieee754_powf+0x590>
 80244f4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80244f8:	eef0 6a67 	vmov.f32	s13, s15
 80244fc:	eee6 6a47 	vfms.f32	s13, s12, s14
 8024500:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8024504:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8024508:	ee76 6ac7 	vsub.f32	s13, s13, s14
 802450c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8024510:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8024514:	ee37 0a40 	vsub.f32	s0, s14, s0
 8024518:	ee70 7a67 	vsub.f32	s15, s0, s15
 802451c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024520:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024524:	ee10 3a10 	vmov	r3, s0
 8024528:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 802452c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8024530:	da1f      	bge.n	8024572 <__ieee754_powf+0x552>
 8024532:	f001 fbdb 	bl	8025cec <scalbnf>
 8024536:	ee20 0a08 	vmul.f32	s0, s0, s16
 802453a:	e589      	b.n	8024050 <__ieee754_powf+0x30>
 802453c:	4a1d      	ldr	r2, [pc, #116]	; (80245b4 <__ieee754_powf+0x594>)
 802453e:	4293      	cmp	r3, r2
 8024540:	dd07      	ble.n	8024552 <__ieee754_powf+0x532>
 8024542:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8024546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802454a:	bf4c      	ite	mi
 802454c:	2001      	movmi	r0, #1
 802454e:	2000      	movpl	r0, #0
 8024550:	e61f      	b.n	8024192 <__ieee754_powf+0x172>
 8024552:	d108      	bne.n	8024566 <__ieee754_powf+0x546>
 8024554:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024558:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024560:	f6ff af78 	blt.w	8024454 <__ieee754_powf+0x434>
 8024564:	e7ed      	b.n	8024542 <__ieee754_powf+0x522>
 8024566:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802456a:	f73f af73 	bgt.w	8024454 <__ieee754_powf+0x434>
 802456e:	2000      	movs	r0, #0
 8024570:	e78c      	b.n	802448c <__ieee754_powf+0x46c>
 8024572:	ee00 3a10 	vmov	s0, r3
 8024576:	e7de      	b.n	8024536 <__ieee754_powf+0x516>
 8024578:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802457c:	e568      	b.n	8024050 <__ieee754_powf+0x30>
 802457e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80245b8 <__ieee754_powf+0x598>
 8024582:	e565      	b.n	8024050 <__ieee754_powf+0x30>
 8024584:	eeb0 0a48 	vmov.f32	s0, s16
 8024588:	e562      	b.n	8024050 <__ieee754_powf+0x30>
 802458a:	2700      	movs	r7, #0
 802458c:	e58d      	b.n	80240aa <__ieee754_powf+0x8a>
 802458e:	bf00      	nop
 8024590:	007fffff 	.word	0x007fffff
 8024594:	35bfbe8c 	.word	0x35bfbe8c
 8024598:	3f317200 	.word	0x3f317200
 802459c:	3f317218 	.word	0x3f317218
 80245a0:	b5ddea0e 	.word	0xb5ddea0e
 80245a4:	3331bb4c 	.word	0x3331bb4c
 80245a8:	388ab355 	.word	0x388ab355
 80245ac:	bb360b61 	.word	0xbb360b61
 80245b0:	3e2aaaab 	.word	0x3e2aaaab
 80245b4:	43160000 	.word	0x43160000
 80245b8:	00000000 	.word	0x00000000

080245bc <__ieee754_rem_pio2f>:
 80245bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245be:	ee10 6a10 	vmov	r6, s0
 80245c2:	4b8e      	ldr	r3, [pc, #568]	; (80247fc <__ieee754_rem_pio2f+0x240>)
 80245c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80245c8:	429d      	cmp	r5, r3
 80245ca:	b087      	sub	sp, #28
 80245cc:	eef0 7a40 	vmov.f32	s15, s0
 80245d0:	4604      	mov	r4, r0
 80245d2:	dc05      	bgt.n	80245e0 <__ieee754_rem_pio2f+0x24>
 80245d4:	2300      	movs	r3, #0
 80245d6:	ed80 0a00 	vstr	s0, [r0]
 80245da:	6043      	str	r3, [r0, #4]
 80245dc:	2000      	movs	r0, #0
 80245de:	e01a      	b.n	8024616 <__ieee754_rem_pio2f+0x5a>
 80245e0:	4b87      	ldr	r3, [pc, #540]	; (8024800 <__ieee754_rem_pio2f+0x244>)
 80245e2:	429d      	cmp	r5, r3
 80245e4:	dc46      	bgt.n	8024674 <__ieee754_rem_pio2f+0xb8>
 80245e6:	2e00      	cmp	r6, #0
 80245e8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8024804 <__ieee754_rem_pio2f+0x248>
 80245ec:	4b86      	ldr	r3, [pc, #536]	; (8024808 <__ieee754_rem_pio2f+0x24c>)
 80245ee:	f025 050f 	bic.w	r5, r5, #15
 80245f2:	dd1f      	ble.n	8024634 <__ieee754_rem_pio2f+0x78>
 80245f4:	429d      	cmp	r5, r3
 80245f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80245fa:	d00e      	beq.n	802461a <__ieee754_rem_pio2f+0x5e>
 80245fc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802480c <__ieee754_rem_pio2f+0x250>
 8024600:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8024604:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024608:	ed80 0a00 	vstr	s0, [r0]
 802460c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024610:	2001      	movs	r0, #1
 8024612:	edc4 7a01 	vstr	s15, [r4, #4]
 8024616:	b007      	add	sp, #28
 8024618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802461a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8024810 <__ieee754_rem_pio2f+0x254>
 802461e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8024814 <__ieee754_rem_pio2f+0x258>
 8024622:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024626:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802462a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802462e:	edc0 6a00 	vstr	s13, [r0]
 8024632:	e7eb      	b.n	802460c <__ieee754_rem_pio2f+0x50>
 8024634:	429d      	cmp	r5, r3
 8024636:	ee77 7a80 	vadd.f32	s15, s15, s0
 802463a:	d00e      	beq.n	802465a <__ieee754_rem_pio2f+0x9e>
 802463c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802480c <__ieee754_rem_pio2f+0x250>
 8024640:	ee37 0a87 	vadd.f32	s0, s15, s14
 8024644:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8024648:	ed80 0a00 	vstr	s0, [r0]
 802464c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024650:	f04f 30ff 	mov.w	r0, #4294967295
 8024654:	edc4 7a01 	vstr	s15, [r4, #4]
 8024658:	e7dd      	b.n	8024616 <__ieee754_rem_pio2f+0x5a>
 802465a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8024810 <__ieee754_rem_pio2f+0x254>
 802465e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8024814 <__ieee754_rem_pio2f+0x258>
 8024662:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024666:	ee77 6a87 	vadd.f32	s13, s15, s14
 802466a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802466e:	edc0 6a00 	vstr	s13, [r0]
 8024672:	e7eb      	b.n	802464c <__ieee754_rem_pio2f+0x90>
 8024674:	4b68      	ldr	r3, [pc, #416]	; (8024818 <__ieee754_rem_pio2f+0x25c>)
 8024676:	429d      	cmp	r5, r3
 8024678:	dc72      	bgt.n	8024760 <__ieee754_rem_pio2f+0x1a4>
 802467a:	f001 fadb 	bl	8025c34 <fabsf>
 802467e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802481c <__ieee754_rem_pio2f+0x260>
 8024682:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024686:	eee0 7a07 	vfma.f32	s15, s0, s14
 802468a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802468e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024692:	ee17 0a90 	vmov	r0, s15
 8024696:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8024804 <__ieee754_rem_pio2f+0x248>
 802469a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802469e:	281f      	cmp	r0, #31
 80246a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802480c <__ieee754_rem_pio2f+0x250>
 80246a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80246a8:	eeb1 6a47 	vneg.f32	s12, s14
 80246ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80246b0:	ee16 2a90 	vmov	r2, s13
 80246b4:	dc1c      	bgt.n	80246f0 <__ieee754_rem_pio2f+0x134>
 80246b6:	495a      	ldr	r1, [pc, #360]	; (8024820 <__ieee754_rem_pio2f+0x264>)
 80246b8:	1e47      	subs	r7, r0, #1
 80246ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80246be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80246c2:	428b      	cmp	r3, r1
 80246c4:	d014      	beq.n	80246f0 <__ieee754_rem_pio2f+0x134>
 80246c6:	6022      	str	r2, [r4, #0]
 80246c8:	ed94 7a00 	vldr	s14, [r4]
 80246cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80246d0:	2e00      	cmp	r6, #0
 80246d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80246d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80246da:	da9c      	bge.n	8024616 <__ieee754_rem_pio2f+0x5a>
 80246dc:	eeb1 7a47 	vneg.f32	s14, s14
 80246e0:	eeb1 0a40 	vneg.f32	s0, s0
 80246e4:	ed84 7a00 	vstr	s14, [r4]
 80246e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80246ec:	4240      	negs	r0, r0
 80246ee:	e792      	b.n	8024616 <__ieee754_rem_pio2f+0x5a>
 80246f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80246f4:	15eb      	asrs	r3, r5, #23
 80246f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80246fa:	2d08      	cmp	r5, #8
 80246fc:	dde3      	ble.n	80246c6 <__ieee754_rem_pio2f+0x10a>
 80246fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 8024810 <__ieee754_rem_pio2f+0x254>
 8024702:	eddf 5a44 	vldr	s11, [pc, #272]	; 8024814 <__ieee754_rem_pio2f+0x258>
 8024706:	eef0 6a40 	vmov.f32	s13, s0
 802470a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802470e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8024712:	eea6 0a27 	vfma.f32	s0, s12, s15
 8024716:	eef0 7a40 	vmov.f32	s15, s0
 802471a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802471e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8024722:	ee15 2a90 	vmov	r2, s11
 8024726:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802472a:	1a5b      	subs	r3, r3, r1
 802472c:	2b19      	cmp	r3, #25
 802472e:	dc04      	bgt.n	802473a <__ieee754_rem_pio2f+0x17e>
 8024730:	edc4 5a00 	vstr	s11, [r4]
 8024734:	eeb0 0a66 	vmov.f32	s0, s13
 8024738:	e7c6      	b.n	80246c8 <__ieee754_rem_pio2f+0x10c>
 802473a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8024824 <__ieee754_rem_pio2f+0x268>
 802473e:	eeb0 0a66 	vmov.f32	s0, s13
 8024742:	eea6 0a25 	vfma.f32	s0, s12, s11
 8024746:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802474a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8024828 <__ieee754_rem_pio2f+0x26c>
 802474e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8024752:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8024756:	ee30 7a67 	vsub.f32	s14, s0, s15
 802475a:	ed84 7a00 	vstr	s14, [r4]
 802475e:	e7b3      	b.n	80246c8 <__ieee754_rem_pio2f+0x10c>
 8024760:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024764:	db06      	blt.n	8024774 <__ieee754_rem_pio2f+0x1b8>
 8024766:	ee70 7a40 	vsub.f32	s15, s0, s0
 802476a:	edc0 7a01 	vstr	s15, [r0, #4]
 802476e:	edc0 7a00 	vstr	s15, [r0]
 8024772:	e733      	b.n	80245dc <__ieee754_rem_pio2f+0x20>
 8024774:	15ea      	asrs	r2, r5, #23
 8024776:	3a86      	subs	r2, #134	; 0x86
 8024778:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802477c:	ee07 3a90 	vmov	s15, r3
 8024780:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024784:	eddf 6a29 	vldr	s13, [pc, #164]	; 802482c <__ieee754_rem_pio2f+0x270>
 8024788:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802478c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024790:	ed8d 7a03 	vstr	s14, [sp, #12]
 8024794:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024798:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802479c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80247a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80247a4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80247a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80247ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80247b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247b4:	edcd 7a05 	vstr	s15, [sp, #20]
 80247b8:	d11e      	bne.n	80247f8 <__ieee754_rem_pio2f+0x23c>
 80247ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80247be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247c2:	bf14      	ite	ne
 80247c4:	2302      	movne	r3, #2
 80247c6:	2301      	moveq	r3, #1
 80247c8:	4919      	ldr	r1, [pc, #100]	; (8024830 <__ieee754_rem_pio2f+0x274>)
 80247ca:	9101      	str	r1, [sp, #4]
 80247cc:	2102      	movs	r1, #2
 80247ce:	9100      	str	r1, [sp, #0]
 80247d0:	a803      	add	r0, sp, #12
 80247d2:	4621      	mov	r1, r4
 80247d4:	f000 fd6a 	bl	80252ac <__kernel_rem_pio2f>
 80247d8:	2e00      	cmp	r6, #0
 80247da:	f6bf af1c 	bge.w	8024616 <__ieee754_rem_pio2f+0x5a>
 80247de:	edd4 7a00 	vldr	s15, [r4]
 80247e2:	eef1 7a67 	vneg.f32	s15, s15
 80247e6:	edc4 7a00 	vstr	s15, [r4]
 80247ea:	edd4 7a01 	vldr	s15, [r4, #4]
 80247ee:	eef1 7a67 	vneg.f32	s15, s15
 80247f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80247f6:	e779      	b.n	80246ec <__ieee754_rem_pio2f+0x130>
 80247f8:	2303      	movs	r3, #3
 80247fa:	e7e5      	b.n	80247c8 <__ieee754_rem_pio2f+0x20c>
 80247fc:	3f490fd8 	.word	0x3f490fd8
 8024800:	4016cbe3 	.word	0x4016cbe3
 8024804:	3fc90f80 	.word	0x3fc90f80
 8024808:	3fc90fd0 	.word	0x3fc90fd0
 802480c:	37354443 	.word	0x37354443
 8024810:	37354400 	.word	0x37354400
 8024814:	2e85a308 	.word	0x2e85a308
 8024818:	43490f80 	.word	0x43490f80
 802481c:	3f22f984 	.word	0x3f22f984
 8024820:	080299b4 	.word	0x080299b4
 8024824:	2e85a300 	.word	0x2e85a300
 8024828:	248d3132 	.word	0x248d3132
 802482c:	43800000 	.word	0x43800000
 8024830:	08029a34 	.word	0x08029a34

08024834 <__ieee754_sqrtf>:
 8024834:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024838:	4770      	bx	lr
 802483a:	0000      	movs	r0, r0
 802483c:	0000      	movs	r0, r0
	...

08024840 <__kernel_cos>:
 8024840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024844:	ec57 6b10 	vmov	r6, r7, d0
 8024848:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802484c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024850:	ed8d 1b00 	vstr	d1, [sp]
 8024854:	da07      	bge.n	8024866 <__kernel_cos+0x26>
 8024856:	ee10 0a10 	vmov	r0, s0
 802485a:	4639      	mov	r1, r7
 802485c:	f7dc f91a 	bl	8000a94 <__aeabi_d2iz>
 8024860:	2800      	cmp	r0, #0
 8024862:	f000 8088 	beq.w	8024976 <__kernel_cos+0x136>
 8024866:	4632      	mov	r2, r6
 8024868:	463b      	mov	r3, r7
 802486a:	4630      	mov	r0, r6
 802486c:	4639      	mov	r1, r7
 802486e:	f7db fe77 	bl	8000560 <__aeabi_dmul>
 8024872:	4b51      	ldr	r3, [pc, #324]	; (80249b8 <__kernel_cos+0x178>)
 8024874:	2200      	movs	r2, #0
 8024876:	4604      	mov	r4, r0
 8024878:	460d      	mov	r5, r1
 802487a:	f7db fe71 	bl	8000560 <__aeabi_dmul>
 802487e:	a340      	add	r3, pc, #256	; (adr r3, 8024980 <__kernel_cos+0x140>)
 8024880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024884:	4682      	mov	sl, r0
 8024886:	468b      	mov	fp, r1
 8024888:	4620      	mov	r0, r4
 802488a:	4629      	mov	r1, r5
 802488c:	f7db fe68 	bl	8000560 <__aeabi_dmul>
 8024890:	a33d      	add	r3, pc, #244	; (adr r3, 8024988 <__kernel_cos+0x148>)
 8024892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024896:	f7db fcad 	bl	80001f4 <__adddf3>
 802489a:	4622      	mov	r2, r4
 802489c:	462b      	mov	r3, r5
 802489e:	f7db fe5f 	bl	8000560 <__aeabi_dmul>
 80248a2:	a33b      	add	r3, pc, #236	; (adr r3, 8024990 <__kernel_cos+0x150>)
 80248a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248a8:	f7db fca2 	bl	80001f0 <__aeabi_dsub>
 80248ac:	4622      	mov	r2, r4
 80248ae:	462b      	mov	r3, r5
 80248b0:	f7db fe56 	bl	8000560 <__aeabi_dmul>
 80248b4:	a338      	add	r3, pc, #224	; (adr r3, 8024998 <__kernel_cos+0x158>)
 80248b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248ba:	f7db fc9b 	bl	80001f4 <__adddf3>
 80248be:	4622      	mov	r2, r4
 80248c0:	462b      	mov	r3, r5
 80248c2:	f7db fe4d 	bl	8000560 <__aeabi_dmul>
 80248c6:	a336      	add	r3, pc, #216	; (adr r3, 80249a0 <__kernel_cos+0x160>)
 80248c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248cc:	f7db fc90 	bl	80001f0 <__aeabi_dsub>
 80248d0:	4622      	mov	r2, r4
 80248d2:	462b      	mov	r3, r5
 80248d4:	f7db fe44 	bl	8000560 <__aeabi_dmul>
 80248d8:	a333      	add	r3, pc, #204	; (adr r3, 80249a8 <__kernel_cos+0x168>)
 80248da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248de:	f7db fc89 	bl	80001f4 <__adddf3>
 80248e2:	4622      	mov	r2, r4
 80248e4:	462b      	mov	r3, r5
 80248e6:	f7db fe3b 	bl	8000560 <__aeabi_dmul>
 80248ea:	4622      	mov	r2, r4
 80248ec:	462b      	mov	r3, r5
 80248ee:	f7db fe37 	bl	8000560 <__aeabi_dmul>
 80248f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80248f6:	4604      	mov	r4, r0
 80248f8:	460d      	mov	r5, r1
 80248fa:	4630      	mov	r0, r6
 80248fc:	4639      	mov	r1, r7
 80248fe:	f7db fe2f 	bl	8000560 <__aeabi_dmul>
 8024902:	460b      	mov	r3, r1
 8024904:	4602      	mov	r2, r0
 8024906:	4629      	mov	r1, r5
 8024908:	4620      	mov	r0, r4
 802490a:	f7db fc71 	bl	80001f0 <__aeabi_dsub>
 802490e:	4b2b      	ldr	r3, [pc, #172]	; (80249bc <__kernel_cos+0x17c>)
 8024910:	4598      	cmp	r8, r3
 8024912:	4606      	mov	r6, r0
 8024914:	460f      	mov	r7, r1
 8024916:	dc10      	bgt.n	802493a <__kernel_cos+0xfa>
 8024918:	4602      	mov	r2, r0
 802491a:	460b      	mov	r3, r1
 802491c:	4650      	mov	r0, sl
 802491e:	4659      	mov	r1, fp
 8024920:	f7db fc66 	bl	80001f0 <__aeabi_dsub>
 8024924:	460b      	mov	r3, r1
 8024926:	4926      	ldr	r1, [pc, #152]	; (80249c0 <__kernel_cos+0x180>)
 8024928:	4602      	mov	r2, r0
 802492a:	2000      	movs	r0, #0
 802492c:	f7db fc60 	bl	80001f0 <__aeabi_dsub>
 8024930:	ec41 0b10 	vmov	d0, r0, r1
 8024934:	b003      	add	sp, #12
 8024936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802493a:	4b22      	ldr	r3, [pc, #136]	; (80249c4 <__kernel_cos+0x184>)
 802493c:	4920      	ldr	r1, [pc, #128]	; (80249c0 <__kernel_cos+0x180>)
 802493e:	4598      	cmp	r8, r3
 8024940:	bfcc      	ite	gt
 8024942:	4d21      	ldrgt	r5, [pc, #132]	; (80249c8 <__kernel_cos+0x188>)
 8024944:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024948:	2400      	movs	r4, #0
 802494a:	4622      	mov	r2, r4
 802494c:	462b      	mov	r3, r5
 802494e:	2000      	movs	r0, #0
 8024950:	f7db fc4e 	bl	80001f0 <__aeabi_dsub>
 8024954:	4622      	mov	r2, r4
 8024956:	4680      	mov	r8, r0
 8024958:	4689      	mov	r9, r1
 802495a:	462b      	mov	r3, r5
 802495c:	4650      	mov	r0, sl
 802495e:	4659      	mov	r1, fp
 8024960:	f7db fc46 	bl	80001f0 <__aeabi_dsub>
 8024964:	4632      	mov	r2, r6
 8024966:	463b      	mov	r3, r7
 8024968:	f7db fc42 	bl	80001f0 <__aeabi_dsub>
 802496c:	4602      	mov	r2, r0
 802496e:	460b      	mov	r3, r1
 8024970:	4640      	mov	r0, r8
 8024972:	4649      	mov	r1, r9
 8024974:	e7da      	b.n	802492c <__kernel_cos+0xec>
 8024976:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80249b0 <__kernel_cos+0x170>
 802497a:	e7db      	b.n	8024934 <__kernel_cos+0xf4>
 802497c:	f3af 8000 	nop.w
 8024980:	be8838d4 	.word	0xbe8838d4
 8024984:	bda8fae9 	.word	0xbda8fae9
 8024988:	bdb4b1c4 	.word	0xbdb4b1c4
 802498c:	3e21ee9e 	.word	0x3e21ee9e
 8024990:	809c52ad 	.word	0x809c52ad
 8024994:	3e927e4f 	.word	0x3e927e4f
 8024998:	19cb1590 	.word	0x19cb1590
 802499c:	3efa01a0 	.word	0x3efa01a0
 80249a0:	16c15177 	.word	0x16c15177
 80249a4:	3f56c16c 	.word	0x3f56c16c
 80249a8:	5555554c 	.word	0x5555554c
 80249ac:	3fa55555 	.word	0x3fa55555
 80249b0:	00000000 	.word	0x00000000
 80249b4:	3ff00000 	.word	0x3ff00000
 80249b8:	3fe00000 	.word	0x3fe00000
 80249bc:	3fd33332 	.word	0x3fd33332
 80249c0:	3ff00000 	.word	0x3ff00000
 80249c4:	3fe90000 	.word	0x3fe90000
 80249c8:	3fd20000 	.word	0x3fd20000
 80249cc:	00000000 	.word	0x00000000

080249d0 <__kernel_rem_pio2>:
 80249d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249d4:	ed2d 8b02 	vpush	{d8}
 80249d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80249dc:	f112 0f14 	cmn.w	r2, #20
 80249e0:	9308      	str	r3, [sp, #32]
 80249e2:	9101      	str	r1, [sp, #4]
 80249e4:	4bc4      	ldr	r3, [pc, #784]	; (8024cf8 <__kernel_rem_pio2+0x328>)
 80249e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80249e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80249ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80249ee:	9302      	str	r3, [sp, #8]
 80249f0:	9b08      	ldr	r3, [sp, #32]
 80249f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80249f6:	bfa8      	it	ge
 80249f8:	1ed4      	subge	r4, r2, #3
 80249fa:	9306      	str	r3, [sp, #24]
 80249fc:	bfb2      	itee	lt
 80249fe:	2400      	movlt	r4, #0
 8024a00:	2318      	movge	r3, #24
 8024a02:	fb94 f4f3 	sdivge	r4, r4, r3
 8024a06:	f06f 0317 	mvn.w	r3, #23
 8024a0a:	fb04 3303 	mla	r3, r4, r3, r3
 8024a0e:	eb03 0a02 	add.w	sl, r3, r2
 8024a12:	9b02      	ldr	r3, [sp, #8]
 8024a14:	9a06      	ldr	r2, [sp, #24]
 8024a16:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024ce8 <__kernel_rem_pio2+0x318>
 8024a1a:	eb03 0802 	add.w	r8, r3, r2
 8024a1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024a20:	1aa7      	subs	r7, r4, r2
 8024a22:	ae22      	add	r6, sp, #136	; 0x88
 8024a24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024a28:	2500      	movs	r5, #0
 8024a2a:	4545      	cmp	r5, r8
 8024a2c:	dd13      	ble.n	8024a56 <__kernel_rem_pio2+0x86>
 8024a2e:	9b08      	ldr	r3, [sp, #32]
 8024a30:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024ce8 <__kernel_rem_pio2+0x318>
 8024a34:	aa22      	add	r2, sp, #136	; 0x88
 8024a36:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024a3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024a3e:	f04f 0800 	mov.w	r8, #0
 8024a42:	9b02      	ldr	r3, [sp, #8]
 8024a44:	4598      	cmp	r8, r3
 8024a46:	dc2f      	bgt.n	8024aa8 <__kernel_rem_pio2+0xd8>
 8024a48:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024a4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024a50:	462f      	mov	r7, r5
 8024a52:	2600      	movs	r6, #0
 8024a54:	e01b      	b.n	8024a8e <__kernel_rem_pio2+0xbe>
 8024a56:	42ef      	cmn	r7, r5
 8024a58:	d407      	bmi.n	8024a6a <__kernel_rem_pio2+0x9a>
 8024a5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024a5e:	f7db fd15 	bl	800048c <__aeabi_i2d>
 8024a62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8024a66:	3501      	adds	r5, #1
 8024a68:	e7df      	b.n	8024a2a <__kernel_rem_pio2+0x5a>
 8024a6a:	ec51 0b18 	vmov	r0, r1, d8
 8024a6e:	e7f8      	b.n	8024a62 <__kernel_rem_pio2+0x92>
 8024a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024a74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024a78:	f7db fd72 	bl	8000560 <__aeabi_dmul>
 8024a7c:	4602      	mov	r2, r0
 8024a7e:	460b      	mov	r3, r1
 8024a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024a84:	f7db fbb6 	bl	80001f4 <__adddf3>
 8024a88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024a8c:	3601      	adds	r6, #1
 8024a8e:	9b06      	ldr	r3, [sp, #24]
 8024a90:	429e      	cmp	r6, r3
 8024a92:	f1a7 0708 	sub.w	r7, r7, #8
 8024a96:	ddeb      	ble.n	8024a70 <__kernel_rem_pio2+0xa0>
 8024a98:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024a9c:	f108 0801 	add.w	r8, r8, #1
 8024aa0:	ecab 7b02 	vstmia	fp!, {d7}
 8024aa4:	3508      	adds	r5, #8
 8024aa6:	e7cc      	b.n	8024a42 <__kernel_rem_pio2+0x72>
 8024aa8:	9b02      	ldr	r3, [sp, #8]
 8024aaa:	aa0e      	add	r2, sp, #56	; 0x38
 8024aac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024ab0:	930d      	str	r3, [sp, #52]	; 0x34
 8024ab2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024ab4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024ab8:	9c02      	ldr	r4, [sp, #8]
 8024aba:	930c      	str	r3, [sp, #48]	; 0x30
 8024abc:	00e3      	lsls	r3, r4, #3
 8024abe:	930a      	str	r3, [sp, #40]	; 0x28
 8024ac0:	ab9a      	add	r3, sp, #616	; 0x268
 8024ac2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024ac6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024aca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024ace:	ab72      	add	r3, sp, #456	; 0x1c8
 8024ad0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8024ad4:	46c3      	mov	fp, r8
 8024ad6:	46a1      	mov	r9, r4
 8024ad8:	f1b9 0f00 	cmp.w	r9, #0
 8024adc:	f1a5 0508 	sub.w	r5, r5, #8
 8024ae0:	dc77      	bgt.n	8024bd2 <__kernel_rem_pio2+0x202>
 8024ae2:	ec47 6b10 	vmov	d0, r6, r7
 8024ae6:	4650      	mov	r0, sl
 8024ae8:	f000 ff4a 	bl	8025980 <scalbn>
 8024aec:	ec57 6b10 	vmov	r6, r7, d0
 8024af0:	2200      	movs	r2, #0
 8024af2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8024af6:	ee10 0a10 	vmov	r0, s0
 8024afa:	4639      	mov	r1, r7
 8024afc:	f7db fd30 	bl	8000560 <__aeabi_dmul>
 8024b00:	ec41 0b10 	vmov	d0, r0, r1
 8024b04:	f000 febc 	bl	8025880 <floor>
 8024b08:	4b7c      	ldr	r3, [pc, #496]	; (8024cfc <__kernel_rem_pio2+0x32c>)
 8024b0a:	ec51 0b10 	vmov	r0, r1, d0
 8024b0e:	2200      	movs	r2, #0
 8024b10:	f7db fd26 	bl	8000560 <__aeabi_dmul>
 8024b14:	4602      	mov	r2, r0
 8024b16:	460b      	mov	r3, r1
 8024b18:	4630      	mov	r0, r6
 8024b1a:	4639      	mov	r1, r7
 8024b1c:	f7db fb68 	bl	80001f0 <__aeabi_dsub>
 8024b20:	460f      	mov	r7, r1
 8024b22:	4606      	mov	r6, r0
 8024b24:	f7db ffb6 	bl	8000a94 <__aeabi_d2iz>
 8024b28:	9004      	str	r0, [sp, #16]
 8024b2a:	f7db fcaf 	bl	800048c <__aeabi_i2d>
 8024b2e:	4602      	mov	r2, r0
 8024b30:	460b      	mov	r3, r1
 8024b32:	4630      	mov	r0, r6
 8024b34:	4639      	mov	r1, r7
 8024b36:	f7db fb5b 	bl	80001f0 <__aeabi_dsub>
 8024b3a:	f1ba 0f00 	cmp.w	sl, #0
 8024b3e:	4606      	mov	r6, r0
 8024b40:	460f      	mov	r7, r1
 8024b42:	dd6d      	ble.n	8024c20 <__kernel_rem_pio2+0x250>
 8024b44:	1e62      	subs	r2, r4, #1
 8024b46:	ab0e      	add	r3, sp, #56	; 0x38
 8024b48:	9d04      	ldr	r5, [sp, #16]
 8024b4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024b4e:	f1ca 0118 	rsb	r1, sl, #24
 8024b52:	fa40 f301 	asr.w	r3, r0, r1
 8024b56:	441d      	add	r5, r3
 8024b58:	408b      	lsls	r3, r1
 8024b5a:	1ac0      	subs	r0, r0, r3
 8024b5c:	ab0e      	add	r3, sp, #56	; 0x38
 8024b5e:	9504      	str	r5, [sp, #16]
 8024b60:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8024b64:	f1ca 0317 	rsb	r3, sl, #23
 8024b68:	fa40 fb03 	asr.w	fp, r0, r3
 8024b6c:	f1bb 0f00 	cmp.w	fp, #0
 8024b70:	dd65      	ble.n	8024c3e <__kernel_rem_pio2+0x26e>
 8024b72:	9b04      	ldr	r3, [sp, #16]
 8024b74:	2200      	movs	r2, #0
 8024b76:	3301      	adds	r3, #1
 8024b78:	9304      	str	r3, [sp, #16]
 8024b7a:	4615      	mov	r5, r2
 8024b7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024b80:	4294      	cmp	r4, r2
 8024b82:	f300 809c 	bgt.w	8024cbe <__kernel_rem_pio2+0x2ee>
 8024b86:	f1ba 0f00 	cmp.w	sl, #0
 8024b8a:	dd07      	ble.n	8024b9c <__kernel_rem_pio2+0x1cc>
 8024b8c:	f1ba 0f01 	cmp.w	sl, #1
 8024b90:	f000 80c0 	beq.w	8024d14 <__kernel_rem_pio2+0x344>
 8024b94:	f1ba 0f02 	cmp.w	sl, #2
 8024b98:	f000 80c6 	beq.w	8024d28 <__kernel_rem_pio2+0x358>
 8024b9c:	f1bb 0f02 	cmp.w	fp, #2
 8024ba0:	d14d      	bne.n	8024c3e <__kernel_rem_pio2+0x26e>
 8024ba2:	4632      	mov	r2, r6
 8024ba4:	463b      	mov	r3, r7
 8024ba6:	4956      	ldr	r1, [pc, #344]	; (8024d00 <__kernel_rem_pio2+0x330>)
 8024ba8:	2000      	movs	r0, #0
 8024baa:	f7db fb21 	bl	80001f0 <__aeabi_dsub>
 8024bae:	4606      	mov	r6, r0
 8024bb0:	460f      	mov	r7, r1
 8024bb2:	2d00      	cmp	r5, #0
 8024bb4:	d043      	beq.n	8024c3e <__kernel_rem_pio2+0x26e>
 8024bb6:	4650      	mov	r0, sl
 8024bb8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024cf0 <__kernel_rem_pio2+0x320>
 8024bbc:	f000 fee0 	bl	8025980 <scalbn>
 8024bc0:	4630      	mov	r0, r6
 8024bc2:	4639      	mov	r1, r7
 8024bc4:	ec53 2b10 	vmov	r2, r3, d0
 8024bc8:	f7db fb12 	bl	80001f0 <__aeabi_dsub>
 8024bcc:	4606      	mov	r6, r0
 8024bce:	460f      	mov	r7, r1
 8024bd0:	e035      	b.n	8024c3e <__kernel_rem_pio2+0x26e>
 8024bd2:	4b4c      	ldr	r3, [pc, #304]	; (8024d04 <__kernel_rem_pio2+0x334>)
 8024bd4:	2200      	movs	r2, #0
 8024bd6:	4630      	mov	r0, r6
 8024bd8:	4639      	mov	r1, r7
 8024bda:	f7db fcc1 	bl	8000560 <__aeabi_dmul>
 8024bde:	f7db ff59 	bl	8000a94 <__aeabi_d2iz>
 8024be2:	f7db fc53 	bl	800048c <__aeabi_i2d>
 8024be6:	4602      	mov	r2, r0
 8024be8:	460b      	mov	r3, r1
 8024bea:	ec43 2b18 	vmov	d8, r2, r3
 8024bee:	4b46      	ldr	r3, [pc, #280]	; (8024d08 <__kernel_rem_pio2+0x338>)
 8024bf0:	2200      	movs	r2, #0
 8024bf2:	f7db fcb5 	bl	8000560 <__aeabi_dmul>
 8024bf6:	4602      	mov	r2, r0
 8024bf8:	460b      	mov	r3, r1
 8024bfa:	4630      	mov	r0, r6
 8024bfc:	4639      	mov	r1, r7
 8024bfe:	f7db faf7 	bl	80001f0 <__aeabi_dsub>
 8024c02:	f7db ff47 	bl	8000a94 <__aeabi_d2iz>
 8024c06:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024c0a:	f84b 0b04 	str.w	r0, [fp], #4
 8024c0e:	ec51 0b18 	vmov	r0, r1, d8
 8024c12:	f7db faef 	bl	80001f4 <__adddf3>
 8024c16:	f109 39ff 	add.w	r9, r9, #4294967295
 8024c1a:	4606      	mov	r6, r0
 8024c1c:	460f      	mov	r7, r1
 8024c1e:	e75b      	b.n	8024ad8 <__kernel_rem_pio2+0x108>
 8024c20:	d106      	bne.n	8024c30 <__kernel_rem_pio2+0x260>
 8024c22:	1e63      	subs	r3, r4, #1
 8024c24:	aa0e      	add	r2, sp, #56	; 0x38
 8024c26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024c2a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024c2e:	e79d      	b.n	8024b6c <__kernel_rem_pio2+0x19c>
 8024c30:	4b36      	ldr	r3, [pc, #216]	; (8024d0c <__kernel_rem_pio2+0x33c>)
 8024c32:	2200      	movs	r2, #0
 8024c34:	f7db ff1a 	bl	8000a6c <__aeabi_dcmpge>
 8024c38:	2800      	cmp	r0, #0
 8024c3a:	d13d      	bne.n	8024cb8 <__kernel_rem_pio2+0x2e8>
 8024c3c:	4683      	mov	fp, r0
 8024c3e:	2200      	movs	r2, #0
 8024c40:	2300      	movs	r3, #0
 8024c42:	4630      	mov	r0, r6
 8024c44:	4639      	mov	r1, r7
 8024c46:	f7db fef3 	bl	8000a30 <__aeabi_dcmpeq>
 8024c4a:	2800      	cmp	r0, #0
 8024c4c:	f000 80c0 	beq.w	8024dd0 <__kernel_rem_pio2+0x400>
 8024c50:	1e65      	subs	r5, r4, #1
 8024c52:	462b      	mov	r3, r5
 8024c54:	2200      	movs	r2, #0
 8024c56:	9902      	ldr	r1, [sp, #8]
 8024c58:	428b      	cmp	r3, r1
 8024c5a:	da6c      	bge.n	8024d36 <__kernel_rem_pio2+0x366>
 8024c5c:	2a00      	cmp	r2, #0
 8024c5e:	f000 8089 	beq.w	8024d74 <__kernel_rem_pio2+0x3a4>
 8024c62:	ab0e      	add	r3, sp, #56	; 0x38
 8024c64:	f1aa 0a18 	sub.w	sl, sl, #24
 8024c68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	f000 80ad 	beq.w	8024dcc <__kernel_rem_pio2+0x3fc>
 8024c72:	4650      	mov	r0, sl
 8024c74:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024cf0 <__kernel_rem_pio2+0x320>
 8024c78:	f000 fe82 	bl	8025980 <scalbn>
 8024c7c:	ab9a      	add	r3, sp, #616	; 0x268
 8024c7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024c82:	ec57 6b10 	vmov	r6, r7, d0
 8024c86:	00ec      	lsls	r4, r5, #3
 8024c88:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024c8c:	46aa      	mov	sl, r5
 8024c8e:	f1ba 0f00 	cmp.w	sl, #0
 8024c92:	f280 80d6 	bge.w	8024e42 <__kernel_rem_pio2+0x472>
 8024c96:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024ce8 <__kernel_rem_pio2+0x318>
 8024c9a:	462e      	mov	r6, r5
 8024c9c:	2e00      	cmp	r6, #0
 8024c9e:	f2c0 8104 	blt.w	8024eaa <__kernel_rem_pio2+0x4da>
 8024ca2:	ab72      	add	r3, sp, #456	; 0x1c8
 8024ca4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024ca8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024d10 <__kernel_rem_pio2+0x340>
 8024cac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024cb0:	f04f 0800 	mov.w	r8, #0
 8024cb4:	1baf      	subs	r7, r5, r6
 8024cb6:	e0ea      	b.n	8024e8e <__kernel_rem_pio2+0x4be>
 8024cb8:	f04f 0b02 	mov.w	fp, #2
 8024cbc:	e759      	b.n	8024b72 <__kernel_rem_pio2+0x1a2>
 8024cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8024cc2:	b955      	cbnz	r5, 8024cda <__kernel_rem_pio2+0x30a>
 8024cc4:	b123      	cbz	r3, 8024cd0 <__kernel_rem_pio2+0x300>
 8024cc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8024cca:	f8c8 3000 	str.w	r3, [r8]
 8024cce:	2301      	movs	r3, #1
 8024cd0:	3201      	adds	r2, #1
 8024cd2:	f108 0804 	add.w	r8, r8, #4
 8024cd6:	461d      	mov	r5, r3
 8024cd8:	e752      	b.n	8024b80 <__kernel_rem_pio2+0x1b0>
 8024cda:	1acb      	subs	r3, r1, r3
 8024cdc:	f8c8 3000 	str.w	r3, [r8]
 8024ce0:	462b      	mov	r3, r5
 8024ce2:	e7f5      	b.n	8024cd0 <__kernel_rem_pio2+0x300>
 8024ce4:	f3af 8000 	nop.w
	...
 8024cf4:	3ff00000 	.word	0x3ff00000
 8024cf8:	08029d90 	.word	0x08029d90
 8024cfc:	40200000 	.word	0x40200000
 8024d00:	3ff00000 	.word	0x3ff00000
 8024d04:	3e700000 	.word	0x3e700000
 8024d08:	41700000 	.word	0x41700000
 8024d0c:	3fe00000 	.word	0x3fe00000
 8024d10:	08029d50 	.word	0x08029d50
 8024d14:	1e62      	subs	r2, r4, #1
 8024d16:	ab0e      	add	r3, sp, #56	; 0x38
 8024d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024d1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024d20:	a90e      	add	r1, sp, #56	; 0x38
 8024d22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8024d26:	e739      	b.n	8024b9c <__kernel_rem_pio2+0x1cc>
 8024d28:	1e62      	subs	r2, r4, #1
 8024d2a:	ab0e      	add	r3, sp, #56	; 0x38
 8024d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024d30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8024d34:	e7f4      	b.n	8024d20 <__kernel_rem_pio2+0x350>
 8024d36:	a90e      	add	r1, sp, #56	; 0x38
 8024d38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024d3c:	3b01      	subs	r3, #1
 8024d3e:	430a      	orrs	r2, r1
 8024d40:	e789      	b.n	8024c56 <__kernel_rem_pio2+0x286>
 8024d42:	3301      	adds	r3, #1
 8024d44:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8024d48:	2900      	cmp	r1, #0
 8024d4a:	d0fa      	beq.n	8024d42 <__kernel_rem_pio2+0x372>
 8024d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d4e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8024d52:	446a      	add	r2, sp
 8024d54:	3a98      	subs	r2, #152	; 0x98
 8024d56:	920a      	str	r2, [sp, #40]	; 0x28
 8024d58:	9a08      	ldr	r2, [sp, #32]
 8024d5a:	18e3      	adds	r3, r4, r3
 8024d5c:	18a5      	adds	r5, r4, r2
 8024d5e:	aa22      	add	r2, sp, #136	; 0x88
 8024d60:	f104 0801 	add.w	r8, r4, #1
 8024d64:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8024d68:	9304      	str	r3, [sp, #16]
 8024d6a:	9b04      	ldr	r3, [sp, #16]
 8024d6c:	4543      	cmp	r3, r8
 8024d6e:	da04      	bge.n	8024d7a <__kernel_rem_pio2+0x3aa>
 8024d70:	461c      	mov	r4, r3
 8024d72:	e6a3      	b.n	8024abc <__kernel_rem_pio2+0xec>
 8024d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024d76:	2301      	movs	r3, #1
 8024d78:	e7e4      	b.n	8024d44 <__kernel_rem_pio2+0x374>
 8024d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8024d80:	f7db fb84 	bl	800048c <__aeabi_i2d>
 8024d84:	e8e5 0102 	strd	r0, r1, [r5], #8
 8024d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d8a:	46ab      	mov	fp, r5
 8024d8c:	461c      	mov	r4, r3
 8024d8e:	f04f 0900 	mov.w	r9, #0
 8024d92:	2600      	movs	r6, #0
 8024d94:	2700      	movs	r7, #0
 8024d96:	9b06      	ldr	r3, [sp, #24]
 8024d98:	4599      	cmp	r9, r3
 8024d9a:	dd06      	ble.n	8024daa <__kernel_rem_pio2+0x3da>
 8024d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d9e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8024da2:	f108 0801 	add.w	r8, r8, #1
 8024da6:	930a      	str	r3, [sp, #40]	; 0x28
 8024da8:	e7df      	b.n	8024d6a <__kernel_rem_pio2+0x39a>
 8024daa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8024dae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8024db2:	f7db fbd5 	bl	8000560 <__aeabi_dmul>
 8024db6:	4602      	mov	r2, r0
 8024db8:	460b      	mov	r3, r1
 8024dba:	4630      	mov	r0, r6
 8024dbc:	4639      	mov	r1, r7
 8024dbe:	f7db fa19 	bl	80001f4 <__adddf3>
 8024dc2:	f109 0901 	add.w	r9, r9, #1
 8024dc6:	4606      	mov	r6, r0
 8024dc8:	460f      	mov	r7, r1
 8024dca:	e7e4      	b.n	8024d96 <__kernel_rem_pio2+0x3c6>
 8024dcc:	3d01      	subs	r5, #1
 8024dce:	e748      	b.n	8024c62 <__kernel_rem_pio2+0x292>
 8024dd0:	ec47 6b10 	vmov	d0, r6, r7
 8024dd4:	f1ca 0000 	rsb	r0, sl, #0
 8024dd8:	f000 fdd2 	bl	8025980 <scalbn>
 8024ddc:	ec57 6b10 	vmov	r6, r7, d0
 8024de0:	4ba0      	ldr	r3, [pc, #640]	; (8025064 <__kernel_rem_pio2+0x694>)
 8024de2:	ee10 0a10 	vmov	r0, s0
 8024de6:	2200      	movs	r2, #0
 8024de8:	4639      	mov	r1, r7
 8024dea:	f7db fe3f 	bl	8000a6c <__aeabi_dcmpge>
 8024dee:	b1f8      	cbz	r0, 8024e30 <__kernel_rem_pio2+0x460>
 8024df0:	4b9d      	ldr	r3, [pc, #628]	; (8025068 <__kernel_rem_pio2+0x698>)
 8024df2:	2200      	movs	r2, #0
 8024df4:	4630      	mov	r0, r6
 8024df6:	4639      	mov	r1, r7
 8024df8:	f7db fbb2 	bl	8000560 <__aeabi_dmul>
 8024dfc:	f7db fe4a 	bl	8000a94 <__aeabi_d2iz>
 8024e00:	4680      	mov	r8, r0
 8024e02:	f7db fb43 	bl	800048c <__aeabi_i2d>
 8024e06:	4b97      	ldr	r3, [pc, #604]	; (8025064 <__kernel_rem_pio2+0x694>)
 8024e08:	2200      	movs	r2, #0
 8024e0a:	f7db fba9 	bl	8000560 <__aeabi_dmul>
 8024e0e:	460b      	mov	r3, r1
 8024e10:	4602      	mov	r2, r0
 8024e12:	4639      	mov	r1, r7
 8024e14:	4630      	mov	r0, r6
 8024e16:	f7db f9eb 	bl	80001f0 <__aeabi_dsub>
 8024e1a:	f7db fe3b 	bl	8000a94 <__aeabi_d2iz>
 8024e1e:	1c65      	adds	r5, r4, #1
 8024e20:	ab0e      	add	r3, sp, #56	; 0x38
 8024e22:	f10a 0a18 	add.w	sl, sl, #24
 8024e26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024e2a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8024e2e:	e720      	b.n	8024c72 <__kernel_rem_pio2+0x2a2>
 8024e30:	4630      	mov	r0, r6
 8024e32:	4639      	mov	r1, r7
 8024e34:	f7db fe2e 	bl	8000a94 <__aeabi_d2iz>
 8024e38:	ab0e      	add	r3, sp, #56	; 0x38
 8024e3a:	4625      	mov	r5, r4
 8024e3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024e40:	e717      	b.n	8024c72 <__kernel_rem_pio2+0x2a2>
 8024e42:	ab0e      	add	r3, sp, #56	; 0x38
 8024e44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8024e48:	f7db fb20 	bl	800048c <__aeabi_i2d>
 8024e4c:	4632      	mov	r2, r6
 8024e4e:	463b      	mov	r3, r7
 8024e50:	f7db fb86 	bl	8000560 <__aeabi_dmul>
 8024e54:	4b84      	ldr	r3, [pc, #528]	; (8025068 <__kernel_rem_pio2+0x698>)
 8024e56:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8024e5a:	2200      	movs	r2, #0
 8024e5c:	4630      	mov	r0, r6
 8024e5e:	4639      	mov	r1, r7
 8024e60:	f7db fb7e 	bl	8000560 <__aeabi_dmul>
 8024e64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024e68:	4606      	mov	r6, r0
 8024e6a:	460f      	mov	r7, r1
 8024e6c:	e70f      	b.n	8024c8e <__kernel_rem_pio2+0x2be>
 8024e6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8024e72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8024e76:	f7db fb73 	bl	8000560 <__aeabi_dmul>
 8024e7a:	4602      	mov	r2, r0
 8024e7c:	460b      	mov	r3, r1
 8024e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024e82:	f7db f9b7 	bl	80001f4 <__adddf3>
 8024e86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024e8a:	f108 0801 	add.w	r8, r8, #1
 8024e8e:	9b02      	ldr	r3, [sp, #8]
 8024e90:	4598      	cmp	r8, r3
 8024e92:	dc01      	bgt.n	8024e98 <__kernel_rem_pio2+0x4c8>
 8024e94:	45b8      	cmp	r8, r7
 8024e96:	ddea      	ble.n	8024e6e <__kernel_rem_pio2+0x49e>
 8024e98:	ed9d 7b06 	vldr	d7, [sp, #24]
 8024e9c:	ab4a      	add	r3, sp, #296	; 0x128
 8024e9e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8024ea2:	ed87 7b00 	vstr	d7, [r7]
 8024ea6:	3e01      	subs	r6, #1
 8024ea8:	e6f8      	b.n	8024c9c <__kernel_rem_pio2+0x2cc>
 8024eaa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8024eac:	2b02      	cmp	r3, #2
 8024eae:	dc0b      	bgt.n	8024ec8 <__kernel_rem_pio2+0x4f8>
 8024eb0:	2b00      	cmp	r3, #0
 8024eb2:	dc35      	bgt.n	8024f20 <__kernel_rem_pio2+0x550>
 8024eb4:	d059      	beq.n	8024f6a <__kernel_rem_pio2+0x59a>
 8024eb6:	9b04      	ldr	r3, [sp, #16]
 8024eb8:	f003 0007 	and.w	r0, r3, #7
 8024ebc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8024ec0:	ecbd 8b02 	vpop	{d8}
 8024ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ec8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8024eca:	2b03      	cmp	r3, #3
 8024ecc:	d1f3      	bne.n	8024eb6 <__kernel_rem_pio2+0x4e6>
 8024ece:	ab4a      	add	r3, sp, #296	; 0x128
 8024ed0:	4423      	add	r3, r4
 8024ed2:	9306      	str	r3, [sp, #24]
 8024ed4:	461c      	mov	r4, r3
 8024ed6:	469a      	mov	sl, r3
 8024ed8:	9502      	str	r5, [sp, #8]
 8024eda:	9b02      	ldr	r3, [sp, #8]
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	f1aa 0a08 	sub.w	sl, sl, #8
 8024ee2:	dc6b      	bgt.n	8024fbc <__kernel_rem_pio2+0x5ec>
 8024ee4:	46aa      	mov	sl, r5
 8024ee6:	f1ba 0f01 	cmp.w	sl, #1
 8024eea:	f1a4 0408 	sub.w	r4, r4, #8
 8024eee:	f300 8085 	bgt.w	8024ffc <__kernel_rem_pio2+0x62c>
 8024ef2:	9c06      	ldr	r4, [sp, #24]
 8024ef4:	2000      	movs	r0, #0
 8024ef6:	3408      	adds	r4, #8
 8024ef8:	2100      	movs	r1, #0
 8024efa:	2d01      	cmp	r5, #1
 8024efc:	f300 809d 	bgt.w	802503a <__kernel_rem_pio2+0x66a>
 8024f00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8024f04:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8024f08:	f1bb 0f00 	cmp.w	fp, #0
 8024f0c:	f040 809b 	bne.w	8025046 <__kernel_rem_pio2+0x676>
 8024f10:	9b01      	ldr	r3, [sp, #4]
 8024f12:	e9c3 5600 	strd	r5, r6, [r3]
 8024f16:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8024f1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8024f1e:	e7ca      	b.n	8024eb6 <__kernel_rem_pio2+0x4e6>
 8024f20:	3408      	adds	r4, #8
 8024f22:	ab4a      	add	r3, sp, #296	; 0x128
 8024f24:	441c      	add	r4, r3
 8024f26:	462e      	mov	r6, r5
 8024f28:	2000      	movs	r0, #0
 8024f2a:	2100      	movs	r1, #0
 8024f2c:	2e00      	cmp	r6, #0
 8024f2e:	da36      	bge.n	8024f9e <__kernel_rem_pio2+0x5ce>
 8024f30:	f1bb 0f00 	cmp.w	fp, #0
 8024f34:	d039      	beq.n	8024faa <__kernel_rem_pio2+0x5da>
 8024f36:	4602      	mov	r2, r0
 8024f38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024f3c:	9c01      	ldr	r4, [sp, #4]
 8024f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8024f42:	4602      	mov	r2, r0
 8024f44:	460b      	mov	r3, r1
 8024f46:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8024f4a:	f7db f951 	bl	80001f0 <__aeabi_dsub>
 8024f4e:	ae4c      	add	r6, sp, #304	; 0x130
 8024f50:	2401      	movs	r4, #1
 8024f52:	42a5      	cmp	r5, r4
 8024f54:	da2c      	bge.n	8024fb0 <__kernel_rem_pio2+0x5e0>
 8024f56:	f1bb 0f00 	cmp.w	fp, #0
 8024f5a:	d002      	beq.n	8024f62 <__kernel_rem_pio2+0x592>
 8024f5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024f60:	4619      	mov	r1, r3
 8024f62:	9b01      	ldr	r3, [sp, #4]
 8024f64:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8024f68:	e7a5      	b.n	8024eb6 <__kernel_rem_pio2+0x4e6>
 8024f6a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8024f6e:	eb0d 0403 	add.w	r4, sp, r3
 8024f72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8024f76:	2000      	movs	r0, #0
 8024f78:	2100      	movs	r1, #0
 8024f7a:	2d00      	cmp	r5, #0
 8024f7c:	da09      	bge.n	8024f92 <__kernel_rem_pio2+0x5c2>
 8024f7e:	f1bb 0f00 	cmp.w	fp, #0
 8024f82:	d002      	beq.n	8024f8a <__kernel_rem_pio2+0x5ba>
 8024f84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024f88:	4619      	mov	r1, r3
 8024f8a:	9b01      	ldr	r3, [sp, #4]
 8024f8c:	e9c3 0100 	strd	r0, r1, [r3]
 8024f90:	e791      	b.n	8024eb6 <__kernel_rem_pio2+0x4e6>
 8024f92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024f96:	f7db f92d 	bl	80001f4 <__adddf3>
 8024f9a:	3d01      	subs	r5, #1
 8024f9c:	e7ed      	b.n	8024f7a <__kernel_rem_pio2+0x5aa>
 8024f9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024fa2:	f7db f927 	bl	80001f4 <__adddf3>
 8024fa6:	3e01      	subs	r6, #1
 8024fa8:	e7c0      	b.n	8024f2c <__kernel_rem_pio2+0x55c>
 8024faa:	4602      	mov	r2, r0
 8024fac:	460b      	mov	r3, r1
 8024fae:	e7c5      	b.n	8024f3c <__kernel_rem_pio2+0x56c>
 8024fb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8024fb4:	f7db f91e 	bl	80001f4 <__adddf3>
 8024fb8:	3401      	adds	r4, #1
 8024fba:	e7ca      	b.n	8024f52 <__kernel_rem_pio2+0x582>
 8024fbc:	e9da 8900 	ldrd	r8, r9, [sl]
 8024fc0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8024fc4:	9b02      	ldr	r3, [sp, #8]
 8024fc6:	3b01      	subs	r3, #1
 8024fc8:	9302      	str	r3, [sp, #8]
 8024fca:	4632      	mov	r2, r6
 8024fcc:	463b      	mov	r3, r7
 8024fce:	4640      	mov	r0, r8
 8024fd0:	4649      	mov	r1, r9
 8024fd2:	f7db f90f 	bl	80001f4 <__adddf3>
 8024fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024fda:	4602      	mov	r2, r0
 8024fdc:	460b      	mov	r3, r1
 8024fde:	4640      	mov	r0, r8
 8024fe0:	4649      	mov	r1, r9
 8024fe2:	f7db f905 	bl	80001f0 <__aeabi_dsub>
 8024fe6:	4632      	mov	r2, r6
 8024fe8:	463b      	mov	r3, r7
 8024fea:	f7db f903 	bl	80001f4 <__adddf3>
 8024fee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8024ff2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024ff6:	ed8a 7b00 	vstr	d7, [sl]
 8024ffa:	e76e      	b.n	8024eda <__kernel_rem_pio2+0x50a>
 8024ffc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8025000:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8025004:	4640      	mov	r0, r8
 8025006:	4632      	mov	r2, r6
 8025008:	463b      	mov	r3, r7
 802500a:	4649      	mov	r1, r9
 802500c:	f7db f8f2 	bl	80001f4 <__adddf3>
 8025010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025014:	4602      	mov	r2, r0
 8025016:	460b      	mov	r3, r1
 8025018:	4640      	mov	r0, r8
 802501a:	4649      	mov	r1, r9
 802501c:	f7db f8e8 	bl	80001f0 <__aeabi_dsub>
 8025020:	4632      	mov	r2, r6
 8025022:	463b      	mov	r3, r7
 8025024:	f7db f8e6 	bl	80001f4 <__adddf3>
 8025028:	ed9d 7b02 	vldr	d7, [sp, #8]
 802502c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025030:	ed84 7b00 	vstr	d7, [r4]
 8025034:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025038:	e755      	b.n	8024ee6 <__kernel_rem_pio2+0x516>
 802503a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802503e:	f7db f8d9 	bl	80001f4 <__adddf3>
 8025042:	3d01      	subs	r5, #1
 8025044:	e759      	b.n	8024efa <__kernel_rem_pio2+0x52a>
 8025046:	9b01      	ldr	r3, [sp, #4]
 8025048:	9a01      	ldr	r2, [sp, #4]
 802504a:	601d      	str	r5, [r3, #0]
 802504c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8025050:	605c      	str	r4, [r3, #4]
 8025052:	609f      	str	r7, [r3, #8]
 8025054:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8025058:	60d3      	str	r3, [r2, #12]
 802505a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802505e:	6110      	str	r0, [r2, #16]
 8025060:	6153      	str	r3, [r2, #20]
 8025062:	e728      	b.n	8024eb6 <__kernel_rem_pio2+0x4e6>
 8025064:	41700000 	.word	0x41700000
 8025068:	3e700000 	.word	0x3e700000
 802506c:	00000000 	.word	0x00000000

08025070 <__kernel_sin>:
 8025070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025074:	ed2d 8b04 	vpush	{d8-d9}
 8025078:	eeb0 8a41 	vmov.f32	s16, s2
 802507c:	eef0 8a61 	vmov.f32	s17, s3
 8025080:	ec55 4b10 	vmov	r4, r5, d0
 8025084:	b083      	sub	sp, #12
 8025086:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802508a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802508e:	9001      	str	r0, [sp, #4]
 8025090:	da06      	bge.n	80250a0 <__kernel_sin+0x30>
 8025092:	ee10 0a10 	vmov	r0, s0
 8025096:	4629      	mov	r1, r5
 8025098:	f7db fcfc 	bl	8000a94 <__aeabi_d2iz>
 802509c:	2800      	cmp	r0, #0
 802509e:	d051      	beq.n	8025144 <__kernel_sin+0xd4>
 80250a0:	4622      	mov	r2, r4
 80250a2:	462b      	mov	r3, r5
 80250a4:	4620      	mov	r0, r4
 80250a6:	4629      	mov	r1, r5
 80250a8:	f7db fa5a 	bl	8000560 <__aeabi_dmul>
 80250ac:	4682      	mov	sl, r0
 80250ae:	468b      	mov	fp, r1
 80250b0:	4602      	mov	r2, r0
 80250b2:	460b      	mov	r3, r1
 80250b4:	4620      	mov	r0, r4
 80250b6:	4629      	mov	r1, r5
 80250b8:	f7db fa52 	bl	8000560 <__aeabi_dmul>
 80250bc:	a341      	add	r3, pc, #260	; (adr r3, 80251c4 <__kernel_sin+0x154>)
 80250be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250c2:	4680      	mov	r8, r0
 80250c4:	4689      	mov	r9, r1
 80250c6:	4650      	mov	r0, sl
 80250c8:	4659      	mov	r1, fp
 80250ca:	f7db fa49 	bl	8000560 <__aeabi_dmul>
 80250ce:	a33f      	add	r3, pc, #252	; (adr r3, 80251cc <__kernel_sin+0x15c>)
 80250d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250d4:	f7db f88c 	bl	80001f0 <__aeabi_dsub>
 80250d8:	4652      	mov	r2, sl
 80250da:	465b      	mov	r3, fp
 80250dc:	f7db fa40 	bl	8000560 <__aeabi_dmul>
 80250e0:	a33c      	add	r3, pc, #240	; (adr r3, 80251d4 <__kernel_sin+0x164>)
 80250e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250e6:	f7db f885 	bl	80001f4 <__adddf3>
 80250ea:	4652      	mov	r2, sl
 80250ec:	465b      	mov	r3, fp
 80250ee:	f7db fa37 	bl	8000560 <__aeabi_dmul>
 80250f2:	a33a      	add	r3, pc, #232	; (adr r3, 80251dc <__kernel_sin+0x16c>)
 80250f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250f8:	f7db f87a 	bl	80001f0 <__aeabi_dsub>
 80250fc:	4652      	mov	r2, sl
 80250fe:	465b      	mov	r3, fp
 8025100:	f7db fa2e 	bl	8000560 <__aeabi_dmul>
 8025104:	a337      	add	r3, pc, #220	; (adr r3, 80251e4 <__kernel_sin+0x174>)
 8025106:	e9d3 2300 	ldrd	r2, r3, [r3]
 802510a:	f7db f873 	bl	80001f4 <__adddf3>
 802510e:	9b01      	ldr	r3, [sp, #4]
 8025110:	4606      	mov	r6, r0
 8025112:	460f      	mov	r7, r1
 8025114:	b9eb      	cbnz	r3, 8025152 <__kernel_sin+0xe2>
 8025116:	4602      	mov	r2, r0
 8025118:	460b      	mov	r3, r1
 802511a:	4650      	mov	r0, sl
 802511c:	4659      	mov	r1, fp
 802511e:	f7db fa1f 	bl	8000560 <__aeabi_dmul>
 8025122:	a325      	add	r3, pc, #148	; (adr r3, 80251b8 <__kernel_sin+0x148>)
 8025124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025128:	f7db f862 	bl	80001f0 <__aeabi_dsub>
 802512c:	4642      	mov	r2, r8
 802512e:	464b      	mov	r3, r9
 8025130:	f7db fa16 	bl	8000560 <__aeabi_dmul>
 8025134:	4602      	mov	r2, r0
 8025136:	460b      	mov	r3, r1
 8025138:	4620      	mov	r0, r4
 802513a:	4629      	mov	r1, r5
 802513c:	f7db f85a 	bl	80001f4 <__adddf3>
 8025140:	4604      	mov	r4, r0
 8025142:	460d      	mov	r5, r1
 8025144:	ec45 4b10 	vmov	d0, r4, r5
 8025148:	b003      	add	sp, #12
 802514a:	ecbd 8b04 	vpop	{d8-d9}
 802514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025152:	4b1b      	ldr	r3, [pc, #108]	; (80251c0 <__kernel_sin+0x150>)
 8025154:	ec51 0b18 	vmov	r0, r1, d8
 8025158:	2200      	movs	r2, #0
 802515a:	f7db fa01 	bl	8000560 <__aeabi_dmul>
 802515e:	4632      	mov	r2, r6
 8025160:	ec41 0b19 	vmov	d9, r0, r1
 8025164:	463b      	mov	r3, r7
 8025166:	4640      	mov	r0, r8
 8025168:	4649      	mov	r1, r9
 802516a:	f7db f9f9 	bl	8000560 <__aeabi_dmul>
 802516e:	4602      	mov	r2, r0
 8025170:	460b      	mov	r3, r1
 8025172:	ec51 0b19 	vmov	r0, r1, d9
 8025176:	f7db f83b 	bl	80001f0 <__aeabi_dsub>
 802517a:	4652      	mov	r2, sl
 802517c:	465b      	mov	r3, fp
 802517e:	f7db f9ef 	bl	8000560 <__aeabi_dmul>
 8025182:	ec53 2b18 	vmov	r2, r3, d8
 8025186:	f7db f833 	bl	80001f0 <__aeabi_dsub>
 802518a:	a30b      	add	r3, pc, #44	; (adr r3, 80251b8 <__kernel_sin+0x148>)
 802518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025190:	4606      	mov	r6, r0
 8025192:	460f      	mov	r7, r1
 8025194:	4640      	mov	r0, r8
 8025196:	4649      	mov	r1, r9
 8025198:	f7db f9e2 	bl	8000560 <__aeabi_dmul>
 802519c:	4602      	mov	r2, r0
 802519e:	460b      	mov	r3, r1
 80251a0:	4630      	mov	r0, r6
 80251a2:	4639      	mov	r1, r7
 80251a4:	f7db f826 	bl	80001f4 <__adddf3>
 80251a8:	4602      	mov	r2, r0
 80251aa:	460b      	mov	r3, r1
 80251ac:	4620      	mov	r0, r4
 80251ae:	4629      	mov	r1, r5
 80251b0:	f7db f81e 	bl	80001f0 <__aeabi_dsub>
 80251b4:	e7c4      	b.n	8025140 <__kernel_sin+0xd0>
 80251b6:	bf00      	nop
 80251b8:	55555549 	.word	0x55555549
 80251bc:	3fc55555 	.word	0x3fc55555
 80251c0:	3fe00000 	.word	0x3fe00000
 80251c4:	5acfd57c 	.word	0x5acfd57c
 80251c8:	3de5d93a 	.word	0x3de5d93a
 80251cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80251d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80251d4:	57b1fe7d 	.word	0x57b1fe7d
 80251d8:	3ec71de3 	.word	0x3ec71de3
 80251dc:	19c161d5 	.word	0x19c161d5
 80251e0:	3f2a01a0 	.word	0x3f2a01a0
 80251e4:	1110f8a6 	.word	0x1110f8a6
 80251e8:	3f811111 	.word	0x3f811111

080251ec <__kernel_cosf>:
 80251ec:	ee10 3a10 	vmov	r3, s0
 80251f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80251f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80251f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80251fc:	da05      	bge.n	802520a <__kernel_cosf+0x1e>
 80251fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025202:	ee17 2a90 	vmov	r2, s15
 8025206:	2a00      	cmp	r2, #0
 8025208:	d03d      	beq.n	8025286 <__kernel_cosf+0x9a>
 802520a:	ee60 5a00 	vmul.f32	s11, s0, s0
 802520e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802528c <__kernel_cosf+0xa0>
 8025212:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8025290 <__kernel_cosf+0xa4>
 8025216:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8025294 <__kernel_cosf+0xa8>
 802521a:	4a1f      	ldr	r2, [pc, #124]	; (8025298 <__kernel_cosf+0xac>)
 802521c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8025220:	4293      	cmp	r3, r2
 8025222:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802529c <__kernel_cosf+0xb0>
 8025226:	eee7 7a25 	vfma.f32	s15, s14, s11
 802522a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80252a0 <__kernel_cosf+0xb4>
 802522e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8025232:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80252a4 <__kernel_cosf+0xb8>
 8025236:	eee7 7a25 	vfma.f32	s15, s14, s11
 802523a:	eeb0 7a66 	vmov.f32	s14, s13
 802523e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8025242:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8025246:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802524a:	ee67 6a25 	vmul.f32	s13, s14, s11
 802524e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8025252:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025256:	dc04      	bgt.n	8025262 <__kernel_cosf+0x76>
 8025258:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802525c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8025260:	4770      	bx	lr
 8025262:	4a11      	ldr	r2, [pc, #68]	; (80252a8 <__kernel_cosf+0xbc>)
 8025264:	4293      	cmp	r3, r2
 8025266:	bfda      	itte	le
 8025268:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802526c:	ee06 3a90 	vmovle	s13, r3
 8025270:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8025274:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025278:	ee36 0a66 	vsub.f32	s0, s12, s13
 802527c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025280:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025284:	4770      	bx	lr
 8025286:	eeb0 0a46 	vmov.f32	s0, s12
 802528a:	4770      	bx	lr
 802528c:	ad47d74e 	.word	0xad47d74e
 8025290:	310f74f6 	.word	0x310f74f6
 8025294:	3d2aaaab 	.word	0x3d2aaaab
 8025298:	3e999999 	.word	0x3e999999
 802529c:	b493f27c 	.word	0xb493f27c
 80252a0:	37d00d01 	.word	0x37d00d01
 80252a4:	bab60b61 	.word	0xbab60b61
 80252a8:	3f480000 	.word	0x3f480000

080252ac <__kernel_rem_pio2f>:
 80252ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252b0:	ed2d 8b04 	vpush	{d8-d9}
 80252b4:	b0d9      	sub	sp, #356	; 0x164
 80252b6:	4688      	mov	r8, r1
 80252b8:	9002      	str	r0, [sp, #8]
 80252ba:	49bb      	ldr	r1, [pc, #748]	; (80255a8 <__kernel_rem_pio2f+0x2fc>)
 80252bc:	9866      	ldr	r0, [sp, #408]	; 0x198
 80252be:	9301      	str	r3, [sp, #4]
 80252c0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80252c4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80252c8:	1e59      	subs	r1, r3, #1
 80252ca:	1d13      	adds	r3, r2, #4
 80252cc:	db27      	blt.n	802531e <__kernel_rem_pio2f+0x72>
 80252ce:	f1b2 0b03 	subs.w	fp, r2, #3
 80252d2:	bf48      	it	mi
 80252d4:	f102 0b04 	addmi.w	fp, r2, #4
 80252d8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80252dc:	1c45      	adds	r5, r0, #1
 80252de:	00ec      	lsls	r4, r5, #3
 80252e0:	1a47      	subs	r7, r0, r1
 80252e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 80252e6:	9403      	str	r4, [sp, #12]
 80252e8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80252ec:	eb0a 0c01 	add.w	ip, sl, r1
 80252f0:	ae1c      	add	r6, sp, #112	; 0x70
 80252f2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80252f6:	2400      	movs	r4, #0
 80252f8:	4564      	cmp	r4, ip
 80252fa:	dd12      	ble.n	8025322 <__kernel_rem_pio2f+0x76>
 80252fc:	9b01      	ldr	r3, [sp, #4]
 80252fe:	ac1c      	add	r4, sp, #112	; 0x70
 8025300:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8025304:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8025308:	f04f 0c00 	mov.w	ip, #0
 802530c:	45d4      	cmp	ip, sl
 802530e:	dc27      	bgt.n	8025360 <__kernel_rem_pio2f+0xb4>
 8025310:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8025314:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 8025318:	4627      	mov	r7, r4
 802531a:	2600      	movs	r6, #0
 802531c:	e016      	b.n	802534c <__kernel_rem_pio2f+0xa0>
 802531e:	2000      	movs	r0, #0
 8025320:	e7dc      	b.n	80252dc <__kernel_rem_pio2f+0x30>
 8025322:	42e7      	cmn	r7, r4
 8025324:	bf5d      	ittte	pl
 8025326:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 802532a:	ee07 3a90 	vmovpl	s15, r3
 802532e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8025332:	eef0 7a47 	vmovmi.f32	s15, s14
 8025336:	ece6 7a01 	vstmia	r6!, {s15}
 802533a:	3401      	adds	r4, #1
 802533c:	e7dc      	b.n	80252f8 <__kernel_rem_pio2f+0x4c>
 802533e:	ecf9 6a01 	vldmia	r9!, {s13}
 8025342:	ed97 7a00 	vldr	s14, [r7]
 8025346:	eee6 7a87 	vfma.f32	s15, s13, s14
 802534a:	3601      	adds	r6, #1
 802534c:	428e      	cmp	r6, r1
 802534e:	f1a7 0704 	sub.w	r7, r7, #4
 8025352:	ddf4      	ble.n	802533e <__kernel_rem_pio2f+0x92>
 8025354:	eceb 7a01 	vstmia	fp!, {s15}
 8025358:	f10c 0c01 	add.w	ip, ip, #1
 802535c:	3404      	adds	r4, #4
 802535e:	e7d5      	b.n	802530c <__kernel_rem_pio2f+0x60>
 8025360:	ab08      	add	r3, sp, #32
 8025362:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8025366:	eddf 8a93 	vldr	s17, [pc, #588]	; 80255b4 <__kernel_rem_pio2f+0x308>
 802536a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80255b0 <__kernel_rem_pio2f+0x304>
 802536e:	9304      	str	r3, [sp, #16]
 8025370:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8025374:	4656      	mov	r6, sl
 8025376:	00b3      	lsls	r3, r6, #2
 8025378:	9305      	str	r3, [sp, #20]
 802537a:	ab58      	add	r3, sp, #352	; 0x160
 802537c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8025380:	ac08      	add	r4, sp, #32
 8025382:	ab44      	add	r3, sp, #272	; 0x110
 8025384:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8025388:	46a4      	mov	ip, r4
 802538a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802538e:	4637      	mov	r7, r6
 8025390:	2f00      	cmp	r7, #0
 8025392:	f1a0 0004 	sub.w	r0, r0, #4
 8025396:	dc4f      	bgt.n	8025438 <__kernel_rem_pio2f+0x18c>
 8025398:	4628      	mov	r0, r5
 802539a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802539e:	f000 fca5 	bl	8025cec <scalbnf>
 80253a2:	eeb0 8a40 	vmov.f32	s16, s0
 80253a6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80253aa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80253ae:	f000 fc55 	bl	8025c5c <floorf>
 80253b2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80253b6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80253ba:	2d00      	cmp	r5, #0
 80253bc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80253c0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80253c4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80253c8:	ee17 9a90 	vmov	r9, s15
 80253cc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80253d0:	dd44      	ble.n	802545c <__kernel_rem_pio2f+0x1b0>
 80253d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80253d6:	ab08      	add	r3, sp, #32
 80253d8:	f1c5 0e08 	rsb	lr, r5, #8
 80253dc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80253e0:	fa47 f00e 	asr.w	r0, r7, lr
 80253e4:	4481      	add	r9, r0
 80253e6:	fa00 f00e 	lsl.w	r0, r0, lr
 80253ea:	1a3f      	subs	r7, r7, r0
 80253ec:	f1c5 0007 	rsb	r0, r5, #7
 80253f0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80253f4:	4107      	asrs	r7, r0
 80253f6:	2f00      	cmp	r7, #0
 80253f8:	dd3f      	ble.n	802547a <__kernel_rem_pio2f+0x1ce>
 80253fa:	f04f 0e00 	mov.w	lr, #0
 80253fe:	f109 0901 	add.w	r9, r9, #1
 8025402:	4673      	mov	r3, lr
 8025404:	4576      	cmp	r6, lr
 8025406:	dc6b      	bgt.n	80254e0 <__kernel_rem_pio2f+0x234>
 8025408:	2d00      	cmp	r5, #0
 802540a:	dd04      	ble.n	8025416 <__kernel_rem_pio2f+0x16a>
 802540c:	2d01      	cmp	r5, #1
 802540e:	d078      	beq.n	8025502 <__kernel_rem_pio2f+0x256>
 8025410:	2d02      	cmp	r5, #2
 8025412:	f000 8081 	beq.w	8025518 <__kernel_rem_pio2f+0x26c>
 8025416:	2f02      	cmp	r7, #2
 8025418:	d12f      	bne.n	802547a <__kernel_rem_pio2f+0x1ce>
 802541a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802541e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8025422:	b353      	cbz	r3, 802547a <__kernel_rem_pio2f+0x1ce>
 8025424:	4628      	mov	r0, r5
 8025426:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802542a:	f000 fc5f 	bl	8025cec <scalbnf>
 802542e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025432:	ee38 8a40 	vsub.f32	s16, s16, s0
 8025436:	e020      	b.n	802547a <__kernel_rem_pio2f+0x1ce>
 8025438:	ee60 7a28 	vmul.f32	s15, s0, s17
 802543c:	3f01      	subs	r7, #1
 802543e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025446:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802544a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802544e:	ecac 0a01 	vstmia	ip!, {s0}
 8025452:	ed90 0a00 	vldr	s0, [r0]
 8025456:	ee37 0a80 	vadd.f32	s0, s15, s0
 802545a:	e799      	b.n	8025390 <__kernel_rem_pio2f+0xe4>
 802545c:	d105      	bne.n	802546a <__kernel_rem_pio2f+0x1be>
 802545e:	1e70      	subs	r0, r6, #1
 8025460:	ab08      	add	r3, sp, #32
 8025462:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8025466:	11ff      	asrs	r7, r7, #7
 8025468:	e7c5      	b.n	80253f6 <__kernel_rem_pio2f+0x14a>
 802546a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802546e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8025472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025476:	da31      	bge.n	80254dc <__kernel_rem_pio2f+0x230>
 8025478:	2700      	movs	r7, #0
 802547a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802547e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025482:	f040 809b 	bne.w	80255bc <__kernel_rem_pio2f+0x310>
 8025486:	1e74      	subs	r4, r6, #1
 8025488:	46a4      	mov	ip, r4
 802548a:	2000      	movs	r0, #0
 802548c:	45d4      	cmp	ip, sl
 802548e:	da4a      	bge.n	8025526 <__kernel_rem_pio2f+0x27a>
 8025490:	2800      	cmp	r0, #0
 8025492:	d07a      	beq.n	802558a <__kernel_rem_pio2f+0x2de>
 8025494:	ab08      	add	r3, sp, #32
 8025496:	3d08      	subs	r5, #8
 8025498:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802549c:	2b00      	cmp	r3, #0
 802549e:	f000 8081 	beq.w	80255a4 <__kernel_rem_pio2f+0x2f8>
 80254a2:	4628      	mov	r0, r5
 80254a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80254a8:	00a5      	lsls	r5, r4, #2
 80254aa:	f000 fc1f 	bl	8025cec <scalbnf>
 80254ae:	aa44      	add	r2, sp, #272	; 0x110
 80254b0:	1d2b      	adds	r3, r5, #4
 80254b2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80255b4 <__kernel_rem_pio2f+0x308>
 80254b6:	18d1      	adds	r1, r2, r3
 80254b8:	4622      	mov	r2, r4
 80254ba:	2a00      	cmp	r2, #0
 80254bc:	f280 80ae 	bge.w	802561c <__kernel_rem_pio2f+0x370>
 80254c0:	4622      	mov	r2, r4
 80254c2:	2a00      	cmp	r2, #0
 80254c4:	f2c0 80cc 	blt.w	8025660 <__kernel_rem_pio2f+0x3b4>
 80254c8:	a944      	add	r1, sp, #272	; 0x110
 80254ca:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80254ce:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80255ac <__kernel_rem_pio2f+0x300>
 80254d2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 80254d6:	2000      	movs	r0, #0
 80254d8:	1aa1      	subs	r1, r4, r2
 80254da:	e0b6      	b.n	802564a <__kernel_rem_pio2f+0x39e>
 80254dc:	2702      	movs	r7, #2
 80254de:	e78c      	b.n	80253fa <__kernel_rem_pio2f+0x14e>
 80254e0:	6820      	ldr	r0, [r4, #0]
 80254e2:	b94b      	cbnz	r3, 80254f8 <__kernel_rem_pio2f+0x24c>
 80254e4:	b118      	cbz	r0, 80254ee <__kernel_rem_pio2f+0x242>
 80254e6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80254ea:	6020      	str	r0, [r4, #0]
 80254ec:	2001      	movs	r0, #1
 80254ee:	f10e 0e01 	add.w	lr, lr, #1
 80254f2:	3404      	adds	r4, #4
 80254f4:	4603      	mov	r3, r0
 80254f6:	e785      	b.n	8025404 <__kernel_rem_pio2f+0x158>
 80254f8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80254fc:	6020      	str	r0, [r4, #0]
 80254fe:	4618      	mov	r0, r3
 8025500:	e7f5      	b.n	80254ee <__kernel_rem_pio2f+0x242>
 8025502:	1e74      	subs	r4, r6, #1
 8025504:	a808      	add	r0, sp, #32
 8025506:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802550a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802550e:	f10d 0c20 	add.w	ip, sp, #32
 8025512:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8025516:	e77e      	b.n	8025416 <__kernel_rem_pio2f+0x16a>
 8025518:	1e74      	subs	r4, r6, #1
 802551a:	a808      	add	r0, sp, #32
 802551c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8025520:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8025524:	e7f3      	b.n	802550e <__kernel_rem_pio2f+0x262>
 8025526:	ab08      	add	r3, sp, #32
 8025528:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802552c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025530:	4318      	orrs	r0, r3
 8025532:	e7ab      	b.n	802548c <__kernel_rem_pio2f+0x1e0>
 8025534:	f10c 0c01 	add.w	ip, ip, #1
 8025538:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 802553c:	2c00      	cmp	r4, #0
 802553e:	d0f9      	beq.n	8025534 <__kernel_rem_pio2f+0x288>
 8025540:	9b05      	ldr	r3, [sp, #20]
 8025542:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8025546:	eb0d 0003 	add.w	r0, sp, r3
 802554a:	9b01      	ldr	r3, [sp, #4]
 802554c:	18f4      	adds	r4, r6, r3
 802554e:	ab1c      	add	r3, sp, #112	; 0x70
 8025550:	1c77      	adds	r7, r6, #1
 8025552:	384c      	subs	r0, #76	; 0x4c
 8025554:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025558:	4466      	add	r6, ip
 802555a:	42be      	cmp	r6, r7
 802555c:	f6ff af0b 	blt.w	8025376 <__kernel_rem_pio2f+0xca>
 8025560:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8025564:	f8dd e008 	ldr.w	lr, [sp, #8]
 8025568:	ee07 3a90 	vmov	s15, r3
 802556c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025570:	f04f 0c00 	mov.w	ip, #0
 8025574:	ece4 7a01 	vstmia	r4!, {s15}
 8025578:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 802557c:	46a1      	mov	r9, r4
 802557e:	458c      	cmp	ip, r1
 8025580:	dd07      	ble.n	8025592 <__kernel_rem_pio2f+0x2e6>
 8025582:	ece0 7a01 	vstmia	r0!, {s15}
 8025586:	3701      	adds	r7, #1
 8025588:	e7e7      	b.n	802555a <__kernel_rem_pio2f+0x2ae>
 802558a:	9804      	ldr	r0, [sp, #16]
 802558c:	f04f 0c01 	mov.w	ip, #1
 8025590:	e7d2      	b.n	8025538 <__kernel_rem_pio2f+0x28c>
 8025592:	ecfe 6a01 	vldmia	lr!, {s13}
 8025596:	ed39 7a01 	vldmdb	r9!, {s14}
 802559a:	f10c 0c01 	add.w	ip, ip, #1
 802559e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80255a2:	e7ec      	b.n	802557e <__kernel_rem_pio2f+0x2d2>
 80255a4:	3c01      	subs	r4, #1
 80255a6:	e775      	b.n	8025494 <__kernel_rem_pio2f+0x1e8>
 80255a8:	08029dcc 	.word	0x08029dcc
 80255ac:	08029da0 	.word	0x08029da0
 80255b0:	43800000 	.word	0x43800000
 80255b4:	3b800000 	.word	0x3b800000
 80255b8:	00000000 	.word	0x00000000
 80255bc:	9b03      	ldr	r3, [sp, #12]
 80255be:	eeb0 0a48 	vmov.f32	s0, s16
 80255c2:	1a98      	subs	r0, r3, r2
 80255c4:	f000 fb92 	bl	8025cec <scalbnf>
 80255c8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80255b0 <__kernel_rem_pio2f+0x304>
 80255cc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80255d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255d4:	db19      	blt.n	802560a <__kernel_rem_pio2f+0x35e>
 80255d6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80255b4 <__kernel_rem_pio2f+0x308>
 80255da:	ee60 7a27 	vmul.f32	s15, s0, s15
 80255de:	aa08      	add	r2, sp, #32
 80255e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80255e4:	1c74      	adds	r4, r6, #1
 80255e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80255ea:	3508      	adds	r5, #8
 80255ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80255f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80255f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80255f8:	ee10 3a10 	vmov	r3, s0
 80255fc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8025600:	ee17 3a90 	vmov	r3, s15
 8025604:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8025608:	e74b      	b.n	80254a2 <__kernel_rem_pio2f+0x1f6>
 802560a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802560e:	aa08      	add	r2, sp, #32
 8025610:	ee10 3a10 	vmov	r3, s0
 8025614:	4634      	mov	r4, r6
 8025616:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802561a:	e742      	b.n	80254a2 <__kernel_rem_pio2f+0x1f6>
 802561c:	a808      	add	r0, sp, #32
 802561e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8025622:	9001      	str	r0, [sp, #4]
 8025624:	ee07 0a90 	vmov	s15, r0
 8025628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802562c:	3a01      	subs	r2, #1
 802562e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8025632:	ee20 0a07 	vmul.f32	s0, s0, s14
 8025636:	ed61 7a01 	vstmdb	r1!, {s15}
 802563a:	e73e      	b.n	80254ba <__kernel_rem_pio2f+0x20e>
 802563c:	ecfc 6a01 	vldmia	ip!, {s13}
 8025640:	ecb6 7a01 	vldmia	r6!, {s14}
 8025644:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025648:	3001      	adds	r0, #1
 802564a:	4550      	cmp	r0, sl
 802564c:	dc01      	bgt.n	8025652 <__kernel_rem_pio2f+0x3a6>
 802564e:	4288      	cmp	r0, r1
 8025650:	ddf4      	ble.n	802563c <__kernel_rem_pio2f+0x390>
 8025652:	a858      	add	r0, sp, #352	; 0x160
 8025654:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8025658:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802565c:	3a01      	subs	r2, #1
 802565e:	e730      	b.n	80254c2 <__kernel_rem_pio2f+0x216>
 8025660:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8025662:	2a02      	cmp	r2, #2
 8025664:	dc09      	bgt.n	802567a <__kernel_rem_pio2f+0x3ce>
 8025666:	2a00      	cmp	r2, #0
 8025668:	dc2a      	bgt.n	80256c0 <__kernel_rem_pio2f+0x414>
 802566a:	d043      	beq.n	80256f4 <__kernel_rem_pio2f+0x448>
 802566c:	f009 0007 	and.w	r0, r9, #7
 8025670:	b059      	add	sp, #356	; 0x164
 8025672:	ecbd 8b04 	vpop	{d8-d9}
 8025676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802567a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802567c:	2b03      	cmp	r3, #3
 802567e:	d1f5      	bne.n	802566c <__kernel_rem_pio2f+0x3c0>
 8025680:	ab30      	add	r3, sp, #192	; 0xc0
 8025682:	442b      	add	r3, r5
 8025684:	461a      	mov	r2, r3
 8025686:	4619      	mov	r1, r3
 8025688:	4620      	mov	r0, r4
 802568a:	2800      	cmp	r0, #0
 802568c:	f1a1 0104 	sub.w	r1, r1, #4
 8025690:	dc51      	bgt.n	8025736 <__kernel_rem_pio2f+0x48a>
 8025692:	4621      	mov	r1, r4
 8025694:	2901      	cmp	r1, #1
 8025696:	f1a2 0204 	sub.w	r2, r2, #4
 802569a:	dc5c      	bgt.n	8025756 <__kernel_rem_pio2f+0x4aa>
 802569c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 80256a0:	3304      	adds	r3, #4
 80256a2:	2c01      	cmp	r4, #1
 80256a4:	dc67      	bgt.n	8025776 <__kernel_rem_pio2f+0x4ca>
 80256a6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80256aa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80256ae:	2f00      	cmp	r7, #0
 80256b0:	d167      	bne.n	8025782 <__kernel_rem_pio2f+0x4d6>
 80256b2:	edc8 6a00 	vstr	s13, [r8]
 80256b6:	ed88 7a01 	vstr	s14, [r8, #4]
 80256ba:	edc8 7a02 	vstr	s15, [r8, #8]
 80256be:	e7d5      	b.n	802566c <__kernel_rem_pio2f+0x3c0>
 80256c0:	aa30      	add	r2, sp, #192	; 0xc0
 80256c2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 80256c6:	4413      	add	r3, r2
 80256c8:	4622      	mov	r2, r4
 80256ca:	2a00      	cmp	r2, #0
 80256cc:	da24      	bge.n	8025718 <__kernel_rem_pio2f+0x46c>
 80256ce:	b34f      	cbz	r7, 8025724 <__kernel_rem_pio2f+0x478>
 80256d0:	eef1 7a47 	vneg.f32	s15, s14
 80256d4:	edc8 7a00 	vstr	s15, [r8]
 80256d8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80256dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80256e0:	aa31      	add	r2, sp, #196	; 0xc4
 80256e2:	2301      	movs	r3, #1
 80256e4:	429c      	cmp	r4, r3
 80256e6:	da20      	bge.n	802572a <__kernel_rem_pio2f+0x47e>
 80256e8:	b10f      	cbz	r7, 80256ee <__kernel_rem_pio2f+0x442>
 80256ea:	eef1 7a67 	vneg.f32	s15, s15
 80256ee:	edc8 7a01 	vstr	s15, [r8, #4]
 80256f2:	e7bb      	b.n	802566c <__kernel_rem_pio2f+0x3c0>
 80256f4:	aa30      	add	r2, sp, #192	; 0xc0
 80256f6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80255b8 <__kernel_rem_pio2f+0x30c>
 80256fa:	4413      	add	r3, r2
 80256fc:	2c00      	cmp	r4, #0
 80256fe:	da05      	bge.n	802570c <__kernel_rem_pio2f+0x460>
 8025700:	b10f      	cbz	r7, 8025706 <__kernel_rem_pio2f+0x45a>
 8025702:	eef1 7a67 	vneg.f32	s15, s15
 8025706:	edc8 7a00 	vstr	s15, [r8]
 802570a:	e7af      	b.n	802566c <__kernel_rem_pio2f+0x3c0>
 802570c:	ed33 7a01 	vldmdb	r3!, {s14}
 8025710:	3c01      	subs	r4, #1
 8025712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025716:	e7f1      	b.n	80256fc <__kernel_rem_pio2f+0x450>
 8025718:	ed73 7a01 	vldmdb	r3!, {s15}
 802571c:	3a01      	subs	r2, #1
 802571e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025722:	e7d2      	b.n	80256ca <__kernel_rem_pio2f+0x41e>
 8025724:	eef0 7a47 	vmov.f32	s15, s14
 8025728:	e7d4      	b.n	80256d4 <__kernel_rem_pio2f+0x428>
 802572a:	ecb2 7a01 	vldmia	r2!, {s14}
 802572e:	3301      	adds	r3, #1
 8025730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025734:	e7d6      	b.n	80256e4 <__kernel_rem_pio2f+0x438>
 8025736:	edd1 7a00 	vldr	s15, [r1]
 802573a:	edd1 6a01 	vldr	s13, [r1, #4]
 802573e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025742:	3801      	subs	r0, #1
 8025744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025748:	ed81 7a00 	vstr	s14, [r1]
 802574c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025750:	edc1 7a01 	vstr	s15, [r1, #4]
 8025754:	e799      	b.n	802568a <__kernel_rem_pio2f+0x3de>
 8025756:	edd2 7a00 	vldr	s15, [r2]
 802575a:	edd2 6a01 	vldr	s13, [r2, #4]
 802575e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025762:	3901      	subs	r1, #1
 8025764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025768:	ed82 7a00 	vstr	s14, [r2]
 802576c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025770:	edc2 7a01 	vstr	s15, [r2, #4]
 8025774:	e78e      	b.n	8025694 <__kernel_rem_pio2f+0x3e8>
 8025776:	ed33 7a01 	vldmdb	r3!, {s14}
 802577a:	3c01      	subs	r4, #1
 802577c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025780:	e78f      	b.n	80256a2 <__kernel_rem_pio2f+0x3f6>
 8025782:	eef1 6a66 	vneg.f32	s13, s13
 8025786:	eeb1 7a47 	vneg.f32	s14, s14
 802578a:	edc8 6a00 	vstr	s13, [r8]
 802578e:	ed88 7a01 	vstr	s14, [r8, #4]
 8025792:	eef1 7a67 	vneg.f32	s15, s15
 8025796:	e790      	b.n	80256ba <__kernel_rem_pio2f+0x40e>

08025798 <__kernel_sinf>:
 8025798:	ee10 3a10 	vmov	r3, s0
 802579c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80257a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80257a4:	da04      	bge.n	80257b0 <__kernel_sinf+0x18>
 80257a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80257aa:	ee17 3a90 	vmov	r3, s15
 80257ae:	b35b      	cbz	r3, 8025808 <__kernel_sinf+0x70>
 80257b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80257b4:	eddf 7a15 	vldr	s15, [pc, #84]	; 802580c <__kernel_sinf+0x74>
 80257b8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8025810 <__kernel_sinf+0x78>
 80257bc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80257c0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8025814 <__kernel_sinf+0x7c>
 80257c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80257c8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8025818 <__kernel_sinf+0x80>
 80257cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80257d0:	eddf 7a12 	vldr	s15, [pc, #72]	; 802581c <__kernel_sinf+0x84>
 80257d4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80257d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80257dc:	b930      	cbnz	r0, 80257ec <__kernel_sinf+0x54>
 80257de:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8025820 <__kernel_sinf+0x88>
 80257e2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80257e6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80257ea:	4770      	bx	lr
 80257ec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80257f0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80257f4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80257f8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80257fc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025824 <__kernel_sinf+0x8c>
 8025800:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8025804:	ee30 0a60 	vsub.f32	s0, s0, s1
 8025808:	4770      	bx	lr
 802580a:	bf00      	nop
 802580c:	2f2ec9d3 	.word	0x2f2ec9d3
 8025810:	b2d72f34 	.word	0xb2d72f34
 8025814:	3638ef1b 	.word	0x3638ef1b
 8025818:	b9500d01 	.word	0xb9500d01
 802581c:	3c088889 	.word	0x3c088889
 8025820:	be2aaaab 	.word	0xbe2aaaab
 8025824:	3e2aaaab 	.word	0x3e2aaaab

08025828 <with_errnof>:
 8025828:	b513      	push	{r0, r1, r4, lr}
 802582a:	4604      	mov	r4, r0
 802582c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025830:	f7fd fbbc 	bl	8022fac <__errno>
 8025834:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025838:	6004      	str	r4, [r0, #0]
 802583a:	b002      	add	sp, #8
 802583c:	bd10      	pop	{r4, pc}

0802583e <xflowf>:
 802583e:	b130      	cbz	r0, 802584e <xflowf+0x10>
 8025840:	eef1 7a40 	vneg.f32	s15, s0
 8025844:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025848:	2022      	movs	r0, #34	; 0x22
 802584a:	f7ff bfed 	b.w	8025828 <with_errnof>
 802584e:	eef0 7a40 	vmov.f32	s15, s0
 8025852:	e7f7      	b.n	8025844 <xflowf+0x6>

08025854 <__math_uflowf>:
 8025854:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802585c <__math_uflowf+0x8>
 8025858:	f7ff bff1 	b.w	802583e <xflowf>
 802585c:	10000000 	.word	0x10000000

08025860 <__math_oflowf>:
 8025860:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025868 <__math_oflowf+0x8>
 8025864:	f7ff bfeb 	b.w	802583e <xflowf>
 8025868:	70000000 	.word	0x70000000

0802586c <fabs>:
 802586c:	ec51 0b10 	vmov	r0, r1, d0
 8025870:	ee10 2a10 	vmov	r2, s0
 8025874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025878:	ec43 2b10 	vmov	d0, r2, r3
 802587c:	4770      	bx	lr
	...

08025880 <floor>:
 8025880:	ec51 0b10 	vmov	r0, r1, d0
 8025884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025888:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802588c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025890:	2e13      	cmp	r6, #19
 8025892:	ee10 5a10 	vmov	r5, s0
 8025896:	ee10 8a10 	vmov	r8, s0
 802589a:	460c      	mov	r4, r1
 802589c:	dc32      	bgt.n	8025904 <floor+0x84>
 802589e:	2e00      	cmp	r6, #0
 80258a0:	da14      	bge.n	80258cc <floor+0x4c>
 80258a2:	a333      	add	r3, pc, #204	; (adr r3, 8025970 <floor+0xf0>)
 80258a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258a8:	f7da fca4 	bl	80001f4 <__adddf3>
 80258ac:	2200      	movs	r2, #0
 80258ae:	2300      	movs	r3, #0
 80258b0:	f7db f8e6 	bl	8000a80 <__aeabi_dcmpgt>
 80258b4:	b138      	cbz	r0, 80258c6 <floor+0x46>
 80258b6:	2c00      	cmp	r4, #0
 80258b8:	da57      	bge.n	802596a <floor+0xea>
 80258ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80258be:	431d      	orrs	r5, r3
 80258c0:	d001      	beq.n	80258c6 <floor+0x46>
 80258c2:	4c2d      	ldr	r4, [pc, #180]	; (8025978 <floor+0xf8>)
 80258c4:	2500      	movs	r5, #0
 80258c6:	4621      	mov	r1, r4
 80258c8:	4628      	mov	r0, r5
 80258ca:	e025      	b.n	8025918 <floor+0x98>
 80258cc:	4f2b      	ldr	r7, [pc, #172]	; (802597c <floor+0xfc>)
 80258ce:	4137      	asrs	r7, r6
 80258d0:	ea01 0307 	and.w	r3, r1, r7
 80258d4:	4303      	orrs	r3, r0
 80258d6:	d01f      	beq.n	8025918 <floor+0x98>
 80258d8:	a325      	add	r3, pc, #148	; (adr r3, 8025970 <floor+0xf0>)
 80258da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258de:	f7da fc89 	bl	80001f4 <__adddf3>
 80258e2:	2200      	movs	r2, #0
 80258e4:	2300      	movs	r3, #0
 80258e6:	f7db f8cb 	bl	8000a80 <__aeabi_dcmpgt>
 80258ea:	2800      	cmp	r0, #0
 80258ec:	d0eb      	beq.n	80258c6 <floor+0x46>
 80258ee:	2c00      	cmp	r4, #0
 80258f0:	bfbe      	ittt	lt
 80258f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80258f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80258fa:	19a4      	addlt	r4, r4, r6
 80258fc:	ea24 0407 	bic.w	r4, r4, r7
 8025900:	2500      	movs	r5, #0
 8025902:	e7e0      	b.n	80258c6 <floor+0x46>
 8025904:	2e33      	cmp	r6, #51	; 0x33
 8025906:	dd0b      	ble.n	8025920 <floor+0xa0>
 8025908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802590c:	d104      	bne.n	8025918 <floor+0x98>
 802590e:	ee10 2a10 	vmov	r2, s0
 8025912:	460b      	mov	r3, r1
 8025914:	f7da fc6e 	bl	80001f4 <__adddf3>
 8025918:	ec41 0b10 	vmov	d0, r0, r1
 802591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025920:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025924:	f04f 33ff 	mov.w	r3, #4294967295
 8025928:	fa23 f707 	lsr.w	r7, r3, r7
 802592c:	4207      	tst	r7, r0
 802592e:	d0f3      	beq.n	8025918 <floor+0x98>
 8025930:	a30f      	add	r3, pc, #60	; (adr r3, 8025970 <floor+0xf0>)
 8025932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025936:	f7da fc5d 	bl	80001f4 <__adddf3>
 802593a:	2200      	movs	r2, #0
 802593c:	2300      	movs	r3, #0
 802593e:	f7db f89f 	bl	8000a80 <__aeabi_dcmpgt>
 8025942:	2800      	cmp	r0, #0
 8025944:	d0bf      	beq.n	80258c6 <floor+0x46>
 8025946:	2c00      	cmp	r4, #0
 8025948:	da02      	bge.n	8025950 <floor+0xd0>
 802594a:	2e14      	cmp	r6, #20
 802594c:	d103      	bne.n	8025956 <floor+0xd6>
 802594e:	3401      	adds	r4, #1
 8025950:	ea25 0507 	bic.w	r5, r5, r7
 8025954:	e7b7      	b.n	80258c6 <floor+0x46>
 8025956:	2301      	movs	r3, #1
 8025958:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802595c:	fa03 f606 	lsl.w	r6, r3, r6
 8025960:	4435      	add	r5, r6
 8025962:	4545      	cmp	r5, r8
 8025964:	bf38      	it	cc
 8025966:	18e4      	addcc	r4, r4, r3
 8025968:	e7f2      	b.n	8025950 <floor+0xd0>
 802596a:	2500      	movs	r5, #0
 802596c:	462c      	mov	r4, r5
 802596e:	e7aa      	b.n	80258c6 <floor+0x46>
 8025970:	8800759c 	.word	0x8800759c
 8025974:	7e37e43c 	.word	0x7e37e43c
 8025978:	bff00000 	.word	0xbff00000
 802597c:	000fffff 	.word	0x000fffff

08025980 <scalbn>:
 8025980:	b570      	push	{r4, r5, r6, lr}
 8025982:	ec55 4b10 	vmov	r4, r5, d0
 8025986:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802598a:	4606      	mov	r6, r0
 802598c:	462b      	mov	r3, r5
 802598e:	b99a      	cbnz	r2, 80259b8 <scalbn+0x38>
 8025990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025994:	4323      	orrs	r3, r4
 8025996:	d036      	beq.n	8025a06 <scalbn+0x86>
 8025998:	4b39      	ldr	r3, [pc, #228]	; (8025a80 <scalbn+0x100>)
 802599a:	4629      	mov	r1, r5
 802599c:	ee10 0a10 	vmov	r0, s0
 80259a0:	2200      	movs	r2, #0
 80259a2:	f7da fddd 	bl	8000560 <__aeabi_dmul>
 80259a6:	4b37      	ldr	r3, [pc, #220]	; (8025a84 <scalbn+0x104>)
 80259a8:	429e      	cmp	r6, r3
 80259aa:	4604      	mov	r4, r0
 80259ac:	460d      	mov	r5, r1
 80259ae:	da10      	bge.n	80259d2 <scalbn+0x52>
 80259b0:	a32b      	add	r3, pc, #172	; (adr r3, 8025a60 <scalbn+0xe0>)
 80259b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259b6:	e03a      	b.n	8025a2e <scalbn+0xae>
 80259b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80259bc:	428a      	cmp	r2, r1
 80259be:	d10c      	bne.n	80259da <scalbn+0x5a>
 80259c0:	ee10 2a10 	vmov	r2, s0
 80259c4:	4620      	mov	r0, r4
 80259c6:	4629      	mov	r1, r5
 80259c8:	f7da fc14 	bl	80001f4 <__adddf3>
 80259cc:	4604      	mov	r4, r0
 80259ce:	460d      	mov	r5, r1
 80259d0:	e019      	b.n	8025a06 <scalbn+0x86>
 80259d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80259d6:	460b      	mov	r3, r1
 80259d8:	3a36      	subs	r2, #54	; 0x36
 80259da:	4432      	add	r2, r6
 80259dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80259e0:	428a      	cmp	r2, r1
 80259e2:	dd08      	ble.n	80259f6 <scalbn+0x76>
 80259e4:	2d00      	cmp	r5, #0
 80259e6:	a120      	add	r1, pc, #128	; (adr r1, 8025a68 <scalbn+0xe8>)
 80259e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80259ec:	da1c      	bge.n	8025a28 <scalbn+0xa8>
 80259ee:	a120      	add	r1, pc, #128	; (adr r1, 8025a70 <scalbn+0xf0>)
 80259f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80259f4:	e018      	b.n	8025a28 <scalbn+0xa8>
 80259f6:	2a00      	cmp	r2, #0
 80259f8:	dd08      	ble.n	8025a0c <scalbn+0x8c>
 80259fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80259fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025a02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025a06:	ec45 4b10 	vmov	d0, r4, r5
 8025a0a:	bd70      	pop	{r4, r5, r6, pc}
 8025a0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025a10:	da19      	bge.n	8025a46 <scalbn+0xc6>
 8025a12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025a16:	429e      	cmp	r6, r3
 8025a18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025a1c:	dd0a      	ble.n	8025a34 <scalbn+0xb4>
 8025a1e:	a112      	add	r1, pc, #72	; (adr r1, 8025a68 <scalbn+0xe8>)
 8025a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d1e2      	bne.n	80259ee <scalbn+0x6e>
 8025a28:	a30f      	add	r3, pc, #60	; (adr r3, 8025a68 <scalbn+0xe8>)
 8025a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a2e:	f7da fd97 	bl	8000560 <__aeabi_dmul>
 8025a32:	e7cb      	b.n	80259cc <scalbn+0x4c>
 8025a34:	a10a      	add	r1, pc, #40	; (adr r1, 8025a60 <scalbn+0xe0>)
 8025a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025a3a:	2b00      	cmp	r3, #0
 8025a3c:	d0b8      	beq.n	80259b0 <scalbn+0x30>
 8025a3e:	a10e      	add	r1, pc, #56	; (adr r1, 8025a78 <scalbn+0xf8>)
 8025a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025a44:	e7b4      	b.n	80259b0 <scalbn+0x30>
 8025a46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025a4a:	3236      	adds	r2, #54	; 0x36
 8025a4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025a50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025a54:	4620      	mov	r0, r4
 8025a56:	4b0c      	ldr	r3, [pc, #48]	; (8025a88 <scalbn+0x108>)
 8025a58:	2200      	movs	r2, #0
 8025a5a:	e7e8      	b.n	8025a2e <scalbn+0xae>
 8025a5c:	f3af 8000 	nop.w
 8025a60:	c2f8f359 	.word	0xc2f8f359
 8025a64:	01a56e1f 	.word	0x01a56e1f
 8025a68:	8800759c 	.word	0x8800759c
 8025a6c:	7e37e43c 	.word	0x7e37e43c
 8025a70:	8800759c 	.word	0x8800759c
 8025a74:	fe37e43c 	.word	0xfe37e43c
 8025a78:	c2f8f359 	.word	0xc2f8f359
 8025a7c:	81a56e1f 	.word	0x81a56e1f
 8025a80:	43500000 	.word	0x43500000
 8025a84:	ffff3cb0 	.word	0xffff3cb0
 8025a88:	3c900000 	.word	0x3c900000

08025a8c <atanf>:
 8025a8c:	b538      	push	{r3, r4, r5, lr}
 8025a8e:	ee10 5a10 	vmov	r5, s0
 8025a92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8025a96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8025a9a:	eef0 7a40 	vmov.f32	s15, s0
 8025a9e:	db10      	blt.n	8025ac2 <atanf+0x36>
 8025aa0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8025aa4:	dd04      	ble.n	8025ab0 <atanf+0x24>
 8025aa6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8025aae:	bd38      	pop	{r3, r4, r5, pc}
 8025ab0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025be8 <atanf+0x15c>
 8025ab4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8025bec <atanf+0x160>
 8025ab8:	2d00      	cmp	r5, #0
 8025aba:	bfd8      	it	le
 8025abc:	eef0 7a40 	vmovle.f32	s15, s0
 8025ac0:	e7f3      	b.n	8025aaa <atanf+0x1e>
 8025ac2:	4b4b      	ldr	r3, [pc, #300]	; (8025bf0 <atanf+0x164>)
 8025ac4:	429c      	cmp	r4, r3
 8025ac6:	dc10      	bgt.n	8025aea <atanf+0x5e>
 8025ac8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8025acc:	da0a      	bge.n	8025ae4 <atanf+0x58>
 8025ace:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8025bf4 <atanf+0x168>
 8025ad2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8025ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025ada:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ae2:	dce2      	bgt.n	8025aaa <atanf+0x1e>
 8025ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8025ae8:	e013      	b.n	8025b12 <atanf+0x86>
 8025aea:	f000 f8a3 	bl	8025c34 <fabsf>
 8025aee:	4b42      	ldr	r3, [pc, #264]	; (8025bf8 <atanf+0x16c>)
 8025af0:	429c      	cmp	r4, r3
 8025af2:	dc4f      	bgt.n	8025b94 <atanf+0x108>
 8025af4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8025af8:	429c      	cmp	r4, r3
 8025afa:	dc41      	bgt.n	8025b80 <atanf+0xf4>
 8025afc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8025b00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025b04:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025b08:	2300      	movs	r3, #0
 8025b0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025b0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b12:	1c5a      	adds	r2, r3, #1
 8025b14:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025b18:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8025bfc <atanf+0x170>
 8025b1c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8025c00 <atanf+0x174>
 8025b20:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8025c04 <atanf+0x178>
 8025b24:	ee66 6a06 	vmul.f32	s13, s12, s12
 8025b28:	eee6 5a87 	vfma.f32	s11, s13, s14
 8025b2c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8025c08 <atanf+0x17c>
 8025b30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025b34:	eddf 5a35 	vldr	s11, [pc, #212]	; 8025c0c <atanf+0x180>
 8025b38:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025b3c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8025c10 <atanf+0x184>
 8025b40:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025b44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8025c14 <atanf+0x188>
 8025b48:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025b4c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8025c18 <atanf+0x18c>
 8025b50:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025b54:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8025c1c <atanf+0x190>
 8025b58:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025b5c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8025c20 <atanf+0x194>
 8025b60:	eea7 5a26 	vfma.f32	s10, s14, s13
 8025b64:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8025c24 <atanf+0x198>
 8025b68:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025b6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025b70:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025b74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025b78:	d121      	bne.n	8025bbe <atanf+0x132>
 8025b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025b7e:	e794      	b.n	8025aaa <atanf+0x1e>
 8025b80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025b84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025b88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025b8c:	2301      	movs	r3, #1
 8025b8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b92:	e7be      	b.n	8025b12 <atanf+0x86>
 8025b94:	4b24      	ldr	r3, [pc, #144]	; (8025c28 <atanf+0x19c>)
 8025b96:	429c      	cmp	r4, r3
 8025b98:	dc0b      	bgt.n	8025bb2 <atanf+0x126>
 8025b9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8025b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ba2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025ba6:	2302      	movs	r3, #2
 8025ba8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025bb0:	e7af      	b.n	8025b12 <atanf+0x86>
 8025bb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025bb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025bba:	2303      	movs	r3, #3
 8025bbc:	e7a9      	b.n	8025b12 <atanf+0x86>
 8025bbe:	4a1b      	ldr	r2, [pc, #108]	; (8025c2c <atanf+0x1a0>)
 8025bc0:	491b      	ldr	r1, [pc, #108]	; (8025c30 <atanf+0x1a4>)
 8025bc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025bc6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025bca:	ed93 0a00 	vldr	s0, [r3]
 8025bce:	ee37 7a40 	vsub.f32	s14, s14, s0
 8025bd2:	ed92 0a00 	vldr	s0, [r2]
 8025bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025bda:	2d00      	cmp	r5, #0
 8025bdc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025be0:	bfb8      	it	lt
 8025be2:	eef1 7a67 	vneglt.f32	s15, s15
 8025be6:	e760      	b.n	8025aaa <atanf+0x1e>
 8025be8:	3fc90fdb 	.word	0x3fc90fdb
 8025bec:	bfc90fdb 	.word	0xbfc90fdb
 8025bf0:	3edfffff 	.word	0x3edfffff
 8025bf4:	7149f2ca 	.word	0x7149f2ca
 8025bf8:	3f97ffff 	.word	0x3f97ffff
 8025bfc:	3c8569d7 	.word	0x3c8569d7
 8025c00:	3d4bda59 	.word	0x3d4bda59
 8025c04:	bd6ef16b 	.word	0xbd6ef16b
 8025c08:	3d886b35 	.word	0x3d886b35
 8025c0c:	3dba2e6e 	.word	0x3dba2e6e
 8025c10:	3e124925 	.word	0x3e124925
 8025c14:	3eaaaaab 	.word	0x3eaaaaab
 8025c18:	bd15a221 	.word	0xbd15a221
 8025c1c:	bd9d8795 	.word	0xbd9d8795
 8025c20:	bde38e38 	.word	0xbde38e38
 8025c24:	be4ccccd 	.word	0xbe4ccccd
 8025c28:	401bffff 	.word	0x401bffff
 8025c2c:	08029dd8 	.word	0x08029dd8
 8025c30:	08029de8 	.word	0x08029de8

08025c34 <fabsf>:
 8025c34:	ee10 3a10 	vmov	r3, s0
 8025c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025c3c:	ee00 3a10 	vmov	s0, r3
 8025c40:	4770      	bx	lr

08025c42 <finitef>:
 8025c42:	b082      	sub	sp, #8
 8025c44:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025c48:	9801      	ldr	r0, [sp, #4]
 8025c4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025c4e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025c52:	bfac      	ite	ge
 8025c54:	2000      	movge	r0, #0
 8025c56:	2001      	movlt	r0, #1
 8025c58:	b002      	add	sp, #8
 8025c5a:	4770      	bx	lr

08025c5c <floorf>:
 8025c5c:	ee10 3a10 	vmov	r3, s0
 8025c60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025c64:	3a7f      	subs	r2, #127	; 0x7f
 8025c66:	2a16      	cmp	r2, #22
 8025c68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025c6c:	dc2a      	bgt.n	8025cc4 <floorf+0x68>
 8025c6e:	2a00      	cmp	r2, #0
 8025c70:	da11      	bge.n	8025c96 <floorf+0x3a>
 8025c72:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025cd4 <floorf+0x78>
 8025c76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025c7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c82:	dd05      	ble.n	8025c90 <floorf+0x34>
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	da23      	bge.n	8025cd0 <floorf+0x74>
 8025c88:	4a13      	ldr	r2, [pc, #76]	; (8025cd8 <floorf+0x7c>)
 8025c8a:	2900      	cmp	r1, #0
 8025c8c:	bf18      	it	ne
 8025c8e:	4613      	movne	r3, r2
 8025c90:	ee00 3a10 	vmov	s0, r3
 8025c94:	4770      	bx	lr
 8025c96:	4911      	ldr	r1, [pc, #68]	; (8025cdc <floorf+0x80>)
 8025c98:	4111      	asrs	r1, r2
 8025c9a:	420b      	tst	r3, r1
 8025c9c:	d0fa      	beq.n	8025c94 <floorf+0x38>
 8025c9e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025cd4 <floorf+0x78>
 8025ca2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025ca6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cae:	ddef      	ble.n	8025c90 <floorf+0x34>
 8025cb0:	2b00      	cmp	r3, #0
 8025cb2:	bfbe      	ittt	lt
 8025cb4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025cb8:	fa40 f202 	asrlt.w	r2, r0, r2
 8025cbc:	189b      	addlt	r3, r3, r2
 8025cbe:	ea23 0301 	bic.w	r3, r3, r1
 8025cc2:	e7e5      	b.n	8025c90 <floorf+0x34>
 8025cc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025cc8:	d3e4      	bcc.n	8025c94 <floorf+0x38>
 8025cca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025cce:	4770      	bx	lr
 8025cd0:	2300      	movs	r3, #0
 8025cd2:	e7dd      	b.n	8025c90 <floorf+0x34>
 8025cd4:	7149f2ca 	.word	0x7149f2ca
 8025cd8:	bf800000 	.word	0xbf800000
 8025cdc:	007fffff 	.word	0x007fffff

08025ce0 <nanf>:
 8025ce0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025ce8 <nanf+0x8>
 8025ce4:	4770      	bx	lr
 8025ce6:	bf00      	nop
 8025ce8:	7fc00000 	.word	0x7fc00000

08025cec <scalbnf>:
 8025cec:	ee10 3a10 	vmov	r3, s0
 8025cf0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8025cf4:	d025      	beq.n	8025d42 <scalbnf+0x56>
 8025cf6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8025cfa:	d302      	bcc.n	8025d02 <scalbnf+0x16>
 8025cfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025d00:	4770      	bx	lr
 8025d02:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8025d06:	d122      	bne.n	8025d4e <scalbnf+0x62>
 8025d08:	4b2a      	ldr	r3, [pc, #168]	; (8025db4 <scalbnf+0xc8>)
 8025d0a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8025db8 <scalbnf+0xcc>
 8025d0e:	4298      	cmp	r0, r3
 8025d10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025d14:	db16      	blt.n	8025d44 <scalbnf+0x58>
 8025d16:	ee10 3a10 	vmov	r3, s0
 8025d1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025d1e:	3a19      	subs	r2, #25
 8025d20:	4402      	add	r2, r0
 8025d22:	2afe      	cmp	r2, #254	; 0xfe
 8025d24:	dd15      	ble.n	8025d52 <scalbnf+0x66>
 8025d26:	ee10 3a10 	vmov	r3, s0
 8025d2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8025dbc <scalbnf+0xd0>
 8025d2e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8025dc0 <scalbnf+0xd4>
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	eeb0 7a67 	vmov.f32	s14, s15
 8025d38:	bfb8      	it	lt
 8025d3a:	eef0 7a66 	vmovlt.f32	s15, s13
 8025d3e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025d42:	4770      	bx	lr
 8025d44:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8025dc4 <scalbnf+0xd8>
 8025d48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025d4c:	4770      	bx	lr
 8025d4e:	0dd2      	lsrs	r2, r2, #23
 8025d50:	e7e6      	b.n	8025d20 <scalbnf+0x34>
 8025d52:	2a00      	cmp	r2, #0
 8025d54:	dd06      	ble.n	8025d64 <scalbnf+0x78>
 8025d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025d5a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025d5e:	ee00 3a10 	vmov	s0, r3
 8025d62:	4770      	bx	lr
 8025d64:	f112 0f16 	cmn.w	r2, #22
 8025d68:	da1a      	bge.n	8025da0 <scalbnf+0xb4>
 8025d6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025d6e:	4298      	cmp	r0, r3
 8025d70:	ee10 3a10 	vmov	r3, s0
 8025d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025d78:	dd0a      	ble.n	8025d90 <scalbnf+0xa4>
 8025d7a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8025dbc <scalbnf+0xd0>
 8025d7e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8025dc0 <scalbnf+0xd4>
 8025d82:	eef0 7a40 	vmov.f32	s15, s0
 8025d86:	2b00      	cmp	r3, #0
 8025d88:	bf18      	it	ne
 8025d8a:	eeb0 0a47 	vmovne.f32	s0, s14
 8025d8e:	e7db      	b.n	8025d48 <scalbnf+0x5c>
 8025d90:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8025dc4 <scalbnf+0xd8>
 8025d94:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8025dc8 <scalbnf+0xdc>
 8025d98:	eef0 7a40 	vmov.f32	s15, s0
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	e7f3      	b.n	8025d88 <scalbnf+0x9c>
 8025da0:	3219      	adds	r2, #25
 8025da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025da6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025daa:	eddf 7a08 	vldr	s15, [pc, #32]	; 8025dcc <scalbnf+0xe0>
 8025dae:	ee07 3a10 	vmov	s14, r3
 8025db2:	e7c4      	b.n	8025d3e <scalbnf+0x52>
 8025db4:	ffff3cb0 	.word	0xffff3cb0
 8025db8:	4c000000 	.word	0x4c000000
 8025dbc:	7149f2ca 	.word	0x7149f2ca
 8025dc0:	f149f2ca 	.word	0xf149f2ca
 8025dc4:	0da24260 	.word	0x0da24260
 8025dc8:	8da24260 	.word	0x8da24260
 8025dcc:	33000000 	.word	0x33000000

08025dd0 <_init>:
 8025dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dd2:	bf00      	nop
 8025dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025dd6:	bc08      	pop	{r3}
 8025dd8:	469e      	mov	lr, r3
 8025dda:	4770      	bx	lr

08025ddc <_fini>:
 8025ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dde:	bf00      	nop
 8025de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025de2:	bc08      	pop	{r3}
 8025de4:	469e      	mov	lr, r3
 8025de6:	4770      	bx	lr
